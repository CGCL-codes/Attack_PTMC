# coding=utf-8
# @Time    : 2020/8/13
# @Author  : Zhou Yang
# @Email   : zyang@smu.edu.sg
# @File    : gi_attack.py
'''For attacking CodeBERT models'''
import sys
import os

sys.path.append('../code')
sys.path.append('../../../')
sys.path.append('../../../python_parser')

import json
import logging
import argparse
import warnings
import torch
import time
import multiprocessing
from model import Model
from run import TextDataset
from utils import set_seed,CodeDataset
from utils import Recorder_style
from attacker import Style_Attacker, get_transfered_code, convert_code_to_features
cpu_cont = multiprocessing.cpu_count()
from transformers import (WEIGHTS_NAME, AdamW, get_linear_schedule_with_warmup,
                          BertConfig, BertForMaskedLM, BertTokenizer,
                          GPT2Config, GPT2ForSequenceClassification, GPT2Tokenizer,
                          OpenAIGPTConfig, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer,
                          RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer,
                          DistilBertConfig, DistilBertForMaskedLM, DistilBertTokenizer)

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
warnings.simplefilter(action='ignore', category=FutureWarning)  # Only report warning

MODEL_CLASSES = {
    'gpt2': (GPT2Config, GPT2ForSequenceClassification, GPT2Tokenizer),
    'openai-gpt': (OpenAIGPTConfig, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer),
    'bert': (BertConfig, BertForMaskedLM, BertTokenizer),
    'roberta': (RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer),
    'distilbert': (DistilBertConfig, DistilBertForMaskedLM, DistilBertTokenizer)
}

logger = logging.getLogger(__name__)


def main():
    parser = argparse.ArgumentParser()

    ## Required parameters
    parser.add_argument("--output_dir", default=None, type=str, required=True,
                        help="The output directory where the model predictions and checkpoints will be written.")

    ## Other parameters
    parser.add_argument("--block_size", default=-1, type=int,
                        help="Optional input sequence length after tokenization."
                             "The training dataset will be truncated in block of this size for training."
                             "Default to the model max input length for single sentence inputs (take into account special tokens).")
    parser.add_argument("--eval_data_file", default=None, type=str,
                        help="An optional input evaluation data file to evaluate the perplexity on (a text file).")

    parser.add_argument("--model_type", default="bert", type=str,
                        help="The model architecture to be fine-tuned.")
    parser.add_argument("--model_name_or_path", default=None, type=str,
                        help="The model checkpoint for weights initialization.")

    parser.add_argument("--base_model", default=None, type=str,
                        help="Base Model")
    parser.add_argument("--csv_store_path", default=None, type=str,
                        help="Base Model")

    parser.add_argument("--config_name", default="", type=str,
                        help="Optional pretrained config name or path if not the same as model_name_or_path")
    parser.add_argument("--tokenizer_name", default="", type=str,
                        help="Optional pretrained tokenizer name or path if not the same as model_name_or_path")
    parser.add_argument("--data_flow_length", default=64, type=int,
                        help="Optional Data Flow input sequence length after tokenization.")
    parser.add_argument("--code_length", default=256, type=int,
                        help="Optional Code input sequence length after tokenization.")
    parser.add_argument("--do_train", action='store_true',
                        help="Whether to run training.")
    parser.add_argument("--use_ga", action='store_true',
                        help="Whether to GA-Attack.")
    parser.add_argument("--eval_batch_size", default=4, type=int,
                        help="Batch size per GPU/CPU for evaluation.")
    parser.add_argument('--seed', type=int, default=42,
                        help="random seed for initialization")
    parser.add_argument("--cache_dir", default="", type=str,
                        help="Optional directory to store the pre-trained models downloaded from s3 (instread of the default one)")

    args = parser.parse_args()

    args.device = torch.device("cuda")
    # Set seed
    set_seed(args.seed)

    config_class, model_class, tokenizer_class = MODEL_CLASSES[args.model_type]
    config = config_class.from_pretrained(args.config_name if args.config_name else args.model_name_or_path,
                                          cache_dir=args.cache_dir if args.cache_dir else None)
    config.num_labels = 1
    config.pad_token_id = 50255
    tokenizer = tokenizer_class.from_pretrained(args.tokenizer_name,
                                                do_lower_case=False,
                                                cache_dir=args.cache_dir if args.cache_dir else None)

    if args.block_size <= 0:
        args.block_size = tokenizer.max_len_single_sentence  # Our input block size will be the max possible for the model
    args.block_size = min(args.block_size, tokenizer.max_len_single_sentence)
    if args.model_name_or_path:
        model = model_class.from_pretrained(args.model_name_or_path,
                                            from_tf=bool('.ckpt' in args.model_name_or_path),
                                            config=config,
                                            cache_dir=args.cache_dir if args.cache_dir else None)
    else:
        model = model_class(config)

    model = Model(model, config, tokenizer, args)

    checkpoint_prefix = 'checkpoint-best-acc/model.bin'
    output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))
    model.load_state_dict(torch.load(output_dir))
    model.to(args.device)
    logger.info("reload model from {}".format(output_dir))

    ## Load Dataset
    eval_dataset = TextDataset(tokenizer, args, args.eval_data_file)

    # Load original source codes
    source_codes = []
    labels = []
    idx_list = []
    with open(args.eval_data_file) as f:
        for line in f:
            js = json.loads(line.strip())
            idx_list.append(js['idx'])
            source_codes.append(js['func'])
            labels.append(js["target"])

    success_attack = 0
    total_cnt = 0

    recoder1 = Recorder_style(args.csv_store_path)
    attacker = Style_Attacker(args, model, tokenizer)
    start_time = time.time()
    index_start = 107
    index_end = 1000
    print("index_start:", index_start)
    print("index_end:", index_end)
    for index, example in enumerate(eval_dataset):
        if index < index_start:
            continue
        if index >= index_end:
            break
        print("Index: ", index)
        idx = idx_list[index]
        example_start_time = time.time()
        orig_prob, orig_label = model.get_results([example], args.eval_batch_size)
        code = source_codes[index]
        true_label = labels[index]
        if true_label != orig_label[0]:
            print(true_label)
            print(orig_label[0])
            print("true_label != orig_label[0]")
            continue
        # print(code)
        adv_codes = get_transfered_code(code)
        if len(adv_codes) == 0:
            print("len(adv_codes) == 0")
            continue

        total_cnt += 1
        # attack_num: 1
        query_times = 0
        is_success = -1
        adv_codes_attack = []
        print("attack(1)_len(adv_codes)", len(adv_codes))
        for adv_code in adv_codes:
            new_adv_codes = get_transfered_code(adv_code)
            if len(new_adv_codes) == 0:
                print("in style line 165 : len(new_adv_codes) == 0")
            adv_codes_attack += new_adv_codes
            new_feature = convert_code_to_features(adv_code, tokenizer, example[1].item(),idx, args)
            new_dataset = CodeDataset([new_feature])
            logits, preds = model.get_results(new_dataset, args.eval_batch_size)
            temp_label = preds[0]
            query_times += 1
            example_end_time = (time.time() - example_start_time) / 60
            if temp_label != true_label:
                is_success =1
                print("%s SUC! (%.5f => %.5f)" % \
                      ('>>', true_label, temp_label), flush=True)
                print("Attack_1 SUC on index = {}.".format(index))

                print("Example time cost: ", round(example_end_time, 2), "min")
                print("ALL examples time cost: ", round((time.time() - start_time) / 60, 2), "min")
                print("Query times in this attack: ", query_times)
                success_attack += 1
                adv_label = 1 if true_label == 0 else 0
                recoder1.write(index, code, adv_code, true_label, adv_label, query_times, round(example_end_time, 2), "style change")
                # recoder3.write(index, code, adv_code, true_label, adv_label, query_times, round(example_end_time, 2))
                # recoder5.write(index, code, adv_code, true_label, adv_label, query_times, round(example_end_time, 2))
                print("Success rate is : {}/{} = {}".format(success_attack, total_cnt, 1.0 * success_attack / total_cnt))
                break
            # else:
            #     adv_label = 1 if true_label == 0 else 0
            #     recoder1.write(index, None, None, true_label,
            #                    adv_label, query_times, round(example_end_time, 2), "0")
        if is_success==-1:
            print("Attack_1 failed on index = {}.".format(index))
            while True:
                print("in style line 196 len(adv_codes_attack) =", len(adv_codes_attack))
                is_success, adv_code, query_times_ = attacker.style_attack(true_label, example, adv_codes_attack,idx, query_times)

                # print("Attack 3 time cost: ", round((time.time() - t0) / 60, 2), "min")
                adv_codes_attack = adv_code
                if query_times_ == None:
                    query_times_ = 0
                query_times += query_times_
                if is_success == 1:
                    break
                if query_times >= 500:
                    break
            example_end_time = (time.time() - example_start_time) / 60
            if is_success == 1:
                print("Example time cost: ", round(example_end_time, 2), "min")
                print("ALL examples time cost: ", round((time.time() - start_time) / 60, 2), "min")
                print("Query times in this attack: ", query_times)
                success_attack += 1
                adv_label = 1 if true_label == 0 else 0
                recoder1.write(index, code, adv_code, true_label, adv_label, query_times, round(example_end_time, 2),
                               "style change")
                # recoder5.write(index, code, adv_codes, true_label, adv_label, query_times, round(example_end_time, 2))
                print(
                    "Success rate is : {}/{} = {}".format(success_attack, total_cnt, 1.0 * success_attack / total_cnt))
            else:
                adv_label = 1 if true_label == 0 else 0
                recoder1.write(index, None, None, true_label,
                               adv_label, query_times, round(example_end_time, 2), "0")
                print("Example time cost: ", round(example_end_time, 2), "min")
                print("ALL examples time cost: ", round((time.time() - start_time) / 60, 2), "min")
                print("Query times in this attack: ", query_times)
                # print("ALL examples time cost: ", round((time.time() - start_time) / 60, 2), "min")
    print("ALL examples time cost: ", round((time.time() - start_time) / 60, 2), "min")
    print(
        "Success rate is : {}/{} = {}".format(success_attack, total_cnt, 1.0 * success_attack / total_cnt))

    # for index, example in enumerate(eval_dataset):
    #     print("Index: ", index)
    #     example_start_time = time.time()
    #     orig_prob, orig_label = model.get_results([example], args.eval_batch_size)
    #     code = source_codes[index]
    #     idx = idx_list[index]
    #     true_label = labels[index]
    #     if true_label != orig_label[0]:
    #         continue
    #     adv_codes = get_transfered_code(code)
    #     if len(adv_codes) == 0:
    #         continue
    #     total_cnt += 1
    #     is_success, adv_code, query_times = attacker.style_attack(code, true_label, example, adv_codes, idx)
    #     if not is_success == 1:
    #         print("Attack failed on index = {}.".format(index))
    #         continue
    #
    #     example_end_time = (time.time() - example_start_time) / 60
    #     print("Example time cost: ", round(example_end_time, 2), "min")
    #     print("ALL examples time cost: ", round((time.time() - start_time) / 60, 2), "min")
    #     print("Query times in this attack: ", query_times)
    #     success_attack += 1
    #     adv_label = 1 if true_label == 0 else 0
    #     recoder.write(index, code, adv_code, true_label, adv_label, query_times, round(example_end_time, 2))
    #     print("Success rate is : {}/{} = {}".format(success_attack, total_cnt, 1.0 * success_attack / total_cnt))

if __name__ == '__main__':
    main()
