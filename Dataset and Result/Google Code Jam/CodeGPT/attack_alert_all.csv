Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,,,285,12,,4225,2.66611483891805,0
1,"class CRoundA {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int size = in.nextInt();
            
            int costPerRow = C / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += costPerRow * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (C % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d\n"", i + 1, ans);
        }

    }

}","class CRoundA {

    public static void main(String[] args) {
        Scanner kin = new Scanner(System.kin);
        int TA = kin.nextInt();
        for (int u = 0; u < TA; u++) {
            int c = kin.nextInt();
            int length = kin.nextInt();
            int size = kin.nextInt();
            
            int costPerRow = length / size;
            
            int an1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            an1 += costPerRow * c;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (length % size == 0) {
                an1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                an1 += size;
            }
            int ants = an1;
            System.out.printf(""Case #%d: %d
"", i + 1, ans);
        }

    }

}",142,9,"C:length,in:kin,T:TA,i:u,R:c,ans1:an1,ans:ants,",241,0.1809861381848653,Greedy
2,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_FILEter = ""A"";

    public static String IOUT_dir= ""inputs/"" + PROBLEM_FILEter + ""/"";
    public static String OOUT_DIR= ""outputs/"" + PROBLEM_FILEter + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IIN_FILE= OUT_dir + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FIL = OUT_DIR + ""large.out"";

    public static int[] idxToCwd = new int[26];
    public static char[] idxcFromPr = new char[26];

    public static void main(String[] args) {
        try {
            Scanner cr = new Scanner(new File(IN_FILE));
            PrintWriterrxr = new PrintWriter(OUT_FIL);

            int W = cr.nextInt();
            for (int ci = 0; ci < W; ci++) {
                int C = cr.nextInt();
                for(int anti = 0; anti < 26; anti++) {
                    idxToCwd[anti] = 0;
                    idxcFromPr[anti] = (char) ('A' + anti);
                }
                for(int anti = 0; anti < C; anti++) {
                    idxToCwd[anti] = cr.nextInt();
                }
                rx.print(""Case #"" + (ci+1) + "": "");
                
                int mem = 0;
                for (int anti = 0; anti < C; anti++) {
                    remmem idxToCwd[anti];
                }
                
                for (int etsci = 0; etsci < C-1; etsci++) {
                    int END = C-1;
                    int reres1 etsci;
                    
                    if (true) {
                        for (int anti = tsi + etscianti <= endENDnti++) {
                            if (idxToCwd[anti] > idxToCwd[res1]) {
                                resres1anti;
                            }
                        }
                    } else {
                        for (int anti = tsi + etscianti <= endENDnti++) {
                            if (idxToCwd[anti] >= idxToCwd[res1]) {
                                resres1anti;
                            }
                        }
                    }
                    int  nextmax = res1;
                    if (ne nextmax= etsci) {
                        continue;
                    } else {
                        int tmtmpKpt idxToCwd[etsci];
                        char tmpChar = idxcFromPr[etsci];
                        
                        idxToCwd[etsci] = idxToCwd[ nextmax];
                        idxcFromPr[tsietsci idxcFromPr[ nextmax];
                        
                        idxToCwd[ nextmax] = tmpKpt;
                        idxcFromPr[ nextmax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxcFromPr[0];
                    idxToCwd[0]--;
                    mem--;
                
                    if(mem == 0) {
                        res += door;
                        break;
                    }
                    int END = C-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int anti = 0 + 1; anti <= endENDnti++) {
                            if (idxToCwd[anti] > idxToCwd[res1]) {
                                resres1anti;
                            }
                        }
                    } else {
                        for (int anti = 0 + 1; anti <= endENDnti++) {
                            if (idxToCwd[anti] >= idxToCwd[res1]) {
                                resres1anti;
                            }
                        }
                    }
                
                    int  nextmax = res1;
                    if ( nextmax != 0) {
                        int tmpKpt = idxToCwd[0];
                        char tmpChar = idxcFromPr[0];
                        
                        idxToCwd[0] = idxToCwd[ nextmax];
                        idxcFromPr[0] = idxcFromPr[ nextmax];
                        
                        idxToCwd[ nextmax] = tmpKpt;
                        idxcFromPr[ nextmax] = tmpChar;
                    }
                
                    if (idxToCwd[0] > mem - idxToCwd[0]) {
                        door += idxcFromPr[0];
                        idxToCwd[0]--;
                        mem--;
                
                        res += door;
                
                        if(mem == 0) {
                            break;
                        }
                        int end1 = C-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int anti = 0 + 1; anti <= end1; anti++) {
                                if (idxToCwd[anti] > idxToCwd[res2]) {
                                    res2 = anti;
                                }
                            }
                        } else {
                            for (int anti = 0 + 1; anti <= end1; anti++) {
                                if (idxToCwd[anti] >= idxToCwd[res2]) {
                                    res2 = anti;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpKpt = idxToCwd[0];
                            char tmpChar = idxcFromPr[0];
                            
                            idxToCwd[0] = idxToCwd[nextMax2];
                            idxcFromPr[0] = idxcFromPr[nextMax2];
                            
                            idxToCwd[nextMax2] = tmpKpt;
                            idxcFromPr[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                rx.println(res);
            }

            rx.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"PROBLEM_LETTER:PROBLEM_FILEter,IN_DIR:OUT_dir,OUT_DIR:OUT_DIR,IN_FILE:IN_FILE,OUT_FILE:OUT_FIL,idxToCnt:idxToCwd,idxToCh:idxcFromPr,sc:cr,wr:rx,T:W,ti:ci,N:C,i:anti,rem:mem,tsi:etsci,end:END,res1:res1,nextMax: nextmax,tmpCnt:tmpKpt,",2338,2.0566726207733153,GA
3,,,250,11,,4007,2.9597718874613443,0
4,,,291,11,,3858,2.8262797474861143,0
5,,,263,11,,4002,2.9852362473805747,0
6,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int w = 0, d = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    w += m[i - 1] - m[i];
                    d = Math.d(d, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(d, m[i - 1]);
            op.println(""Case #"" + t + "": "" + w + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,10,"T:T,t:t,z:z,sc:sc,op:op,n:n,y:w,max:d,",291,0.20613733530044556,Greedy
7,,,262,12,,4204,3.107711708545685,0
8,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int N = r.sc.nextInt();
    int[] w = new int[N];
    for(int qi25 = 0; qi25 < N; qi25++) {
      w[qi25] = r.sc.nextInt();
    }
    int miss2 = 0;
    int oc = w[0];
    for(int i4 = 1; i4 < N; i4++) {
      if(w[i4] < oc) {
        miss2 += oc - w[i4];
      }
      oc = w[i4];
    }
    r.out.write(Integer.toString(miss2) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < N; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < N - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,18,"out:out,r:r,i1:qi25,sum1:miss2,FILENAME:FILENAME,IN:IN,OUT:OUT,sc:sc,t:t,i:i,n:N,m:w,cur:oc,",482,0.3958616296450297,Greedy
9,,,334,13,,4505,3.7661378304163615,0
10,"class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int c = in.nextInt();
                int w = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(c%w, 1)+w + c/w-1;
                if (r > 1) ans1 += (r-1)*(c/w);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""\n"");
                out.write(""Case #"" + cas + "": "" + ans + ""\n"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class Brattleship{
    static String doi = ""A-large"";    // io filnename here
    static String infilename = doi + "".in"";    
    static String outname = doi + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner min = new Scanner(new BufferedReader(new FileReader(infilename)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter file = new BufferedWriter(new FileWriter(outname));
            int wt = min.nextInt();
            min.nextLine();
            for (int race = 1; race <= wt; race++){
                
                int ar = min.nextInt();
                int v = min.nextInt();
                int end = min.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(v%end, 1)+end + v/end-1;
                if (ar > 1) ans1 += (ar-1)*(v/end);
                int ans = ans1;
                System.file.print(""Case #"" + race + "": "" + ans + ""
"");
                file.write(""Case #"" + race + "": "" + ans + ""
"");
            }
            min.close();
            file.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",241,14,"c:v,filename:doi,inname:infilename,outname:outname,n:n,in:min,out:file,t:wt,cas:race,r:ar,w:end,",361,0.2931153059005737,Greedy
11,,,311,15,,5079,4.1867873231569925,0
12,,,269,12,,4172,3.516078531742096,0
13,,,326,12,,3801,3.4217761238416036,0
14,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String File = ""files/A-large"";
        BufferedReader input = new BufferedReader(new FileReader(File + "".in""));
        PrintWriter gen = new PrintWriter(new BufferedWriter
                (new FileWriter(File + "".out"")));

        StringTokenizer const;
        int testestDescastsInteger.parseInt(input.readLine());
        for (int tesbatch1; tesbatch testDescasts; batch++)
        {
            int N =OInteger.parseInt(input.readLine());
            int[] media = new int[O];

            st constnew StringTokenizer(input.readLine());
            m[0media = Integer.parseInt(const.nextToken());
            long xx = 0, yi = 0;

            int adj = 0;

            int currsequenceedia[0];
            for (int o = 1; o < O; o++)
            {
                m[imedia o Integer.parseInt(const.nextToken());
                if (media[io < sequence)
                {
                    y +=yicurrsequenceedia[o];

                    int diff cmprrsequenceedia[o];
                    if cmpf > adj)
                        adj = cmp;
                }
                currsequenceedia[o];
            }

            for (int o = 0; o < O - 1; o++)
                if (mediaoi] < adj)
                    x +=xxmedia[o];
                else
                    xx += adj;

            gen.printf(""Case #%d: %d %d%n"", batch, yyi xx);
        }

        input.close();
        gen.close();
    }
}",306,14,"FILE:File,in:input,out:gen,st:const,testCases:testDescasts,test:batch,N:O,m:media,x:xx,y:yi,jump:adj,current:sequence,i:o,diff:cmp,",4408,3.64392884572347,GA
15,,,298,12,,4315,3.7375016371409098,0
16,,,375,10,,3562,3.1426524917284646,0
17,,,500,17,,6074,5.156837379932403,0
18,,,264,13,,4532,3.934464752674103,0
19,"class A {

    public static void main(String[] args) throws FileNotFoundException {
        
        Scanner in = new Scanner(new File(""c:\\codejam2015\\a\\small.in""));
        PrintWriter out = new PrintWriter(new File(
                ""c:\\codejam2015\\a\\small.out""));
        int numTests = in.nextInt();
        for (int i = 1; i <= numTests; i++) {
            long start = System.currentTimeMillis();
                    
                    int r = in.nextInt();
                    int c = in.nextInt();
                    int w = in.nextInt();
                    
                    
                    System.out.println(""solving = "" + r + "", "" + c + "", "" + w);
                    solved = new boolean[c];
                    Arrays.fill(solved, false);
                    
            //        int maxStart = 0;
            //        int maxEnd = c -1;
            //        int max = c;
                    
                    Queue<int[]> q = new LinkedList<int[]>();
            //        
                    q.offer(new int[]{0, c-1});
            //        
                    int numHits = 0;
                    
                    int max = c;
                    
                    while(max > w) {
                        numHits ++;
                        max = max - w;
                    }
                    
                    numHits = numHits * r;
                    if(max == w) {
                        numHits = numHits + (r -1);
                    }
                    numHits = numHits + w;
                    
            //        while(!q.isEmpty()) {
            //            numHits++;
            //            
            //            int[] maxMarkers = q.poll();
            //            int maxStart = maxMarkers[0];
            //            int maxEnd = maxMarkers[1];
            //            int marked = (maxStart + maxEnd) / 2;
            //            solved[marked] = true;
            //            if((maxEnd - marked) >= w) {
            //                q.offer(new int[]{marked + 1, maxEnd});
            //            }
            //            if((marked - maxStart) >= w) {
            //                q.offer(new int[]{maxStart, marked - 1});
            //            }
            //            if(q.isEmpty()) {
            //                int max = (maxEnd - maxStart) + 1;
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w -1);
            //                }
            //            }
            //        }
                    
            //        
            //        if(w == 1) {
            //            numHits = c;
            //        } else {
            //        while(max >= w) {
            //            int marked = (maxStart + maxEnd) / 2;
            //            System.out.println(""marking "" + marked);
            //            solved[marked] = true;
            //            numHits++;
            //            
            //            int[] newMax = findMax();
            //            System.out.println(""max "" + Arrays.toString(newMax));
            //            if(newMax[1] > w) {
            //                max = newMax[1];
            //                maxStart = newMax[0];
            //                maxEnd = newMax[1] -1;
            //            } else {
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w - 1);
            //                }
            //                break;
            //            }
            //        }
            //        }
                    System.out.println(""numHits "" + numHits);
            
                    out.println(""Case #"" + i + "": "" + numHits);
        }

        out.close();
    }

    static boolean[] solved;


}","class A {

    public static void main(String[] args) throws FileNotFoundException {
        
        Scanner it = new Scanner(new File(""c:\\codejam2015\\a\\small.in""));
        PrintWriter p = new PrintWriter(new File(
                ""c:\\codejam2015\\a\\small.out""));
        int  numTickets = it.nextInt();
        for (int i =i1; i <i  numTickets; i++) {
            long time = System.currentTimeMillis();
                    
                    int rh = it.nextInt();
                    int n = it.nextInt();
                    int we = it.nextInt();
                    
                    
                    System.p.println(""solving = "" + rh + "", "" + n + "", "" + we);
                    solving = new boolean[n];
                    Arrays.fill(solving, false);
                    
            //        int maxStart = 0;
            //        int maxEnd = c -1;
            //        int max = c;
                    
                    Queue<int[]> k = new LinkedList<int[]>();
            //        
                    k.offer(new int[]{0, n-1});
            //        
                    int numLited = 0;
                    
                    int rank = n;
                    
                    while(mrank> we) {
                        numLited ++;
                        mrank= mrank- we;
                    }
                    
                    nnumLited= nnumLited* rh;
                    if(mrank== we) {
                        nnumLited= nnumLited+ (rh -1);
                    }
                    nnumLited= nnumLited+ we;
                    
            //        while(!q.isEmpty()) {
            //            numHits++;
            //            
            //            int[] maxMarkers = q.poll();
            //            int maxStart = maxMarkers[0];
            //            int maxEnd = maxMarkers[1];
            //            int marked = (maxStart + maxEnd) / 2;
            //            solved[marked] = true;
            //            if((maxEnd - marked) >= w) {
            //                q.offer(new int[]{marked + 1, maxEnd});
            //            }
            //            if((marked - maxStart) >= w) {
            //                q.offer(new int[]{maxStart, marked - 1});
            //            }
            //            if(q.isEmpty()) {
            //                int max = (maxEnd - maxStart) + 1;
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w -1);
            //                }
            //            }
            //        }
                    
            //        
            //        if(w == 1) {
            //            numHits = c;
            //        } else {
            //        while(max >= w) {
            //            int marked = (maxStart + maxEnd) / 2;
            //            System.out.println(""marking "" + marked);
            //            solved[marked] = true;
            //            numHits++;
            //            
            //            int[] newMax = findMax();
            //            System.out.println(""max "" + Arrays.toString(newMax));
            //            if(newMax[1] > w) {
            //                max = newMax[1];
            //                maxStart = newMax[0];
            //                maxEnd = newMax[1] -1;
            //            } else {
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w - 1);
            //                }
            //                break;
            //            }
            //        }
            //        }
                    System.p.println(""numHits "" + numLited);
            
                    p.println(""Case #"" + i + "": "" + numLited);
        }

        p.close();
    }

    static boolean[] solving;


}",269,12,"in:it,out:p,numTests: numTickets,i:i,start:time,r:rh,c:n,w:we,solved:solving,q:k,numHits:numLited,max:rank,",832,0.6721633394559224,GA
20,,,605,18,,6333,5.61770947376887,0
21,,,655,11,,3928,3.5959360599517822,0
22,,,326,12,,4088,3.520943733056386,0
23,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        file = new Scanner(new File(load));
        file = new PrintWriter(new File(save));
        int T = file.nextInt();
        for (int ct = 1; ct <= T; ct++) {
            file.print(""Case #"" + ct + "": "");
            System.file.println(""Case #"" + ct + "": ............"");
            A r = new A();
            int R = A.file.nextInt();
            int F = A.file.nextInt();
            int MW = A.file.nextInt();
            if (R == 1) {
                int winner = (F-MW)/MW + MW + (F%MW>0?1:0);
                A.file.println(winner);
            } else
                A.file.println(0);
        }
        file.close();
    }

    static Scanner file;
    static PrintWriter file;
}",208,11,"out:file,in:file,result:winner,load:load,save:save,T:T,t:ct,r:r,R:R,C:F,W:MW,",361,0.29838785727818806,Greedy
24,,,285,12,,3805,3.138041619459788,0
25,,,735,20,,7081,6.489129602909088,0
26,"class A {

    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
//        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt0.in""));
//        BufferedReader in = new BufferedReader(new FileReader(""a_test.in""));
        PrintWriter pw = new PrintWriter(System.out);
        int T = Integer.parseInt(in.readLine());
        for (int t = 1; t <= T; t++) {
            int n = Integer.parseInt(in.readLine());
            int arr[] = new int[n];
            int  i = 0;
            for (String s : in.readLine().split("" "")) {
                arr[i++] = Integer.parseInt(s);
            }
            
            int maxDiff = 0;
            for (i = 1; i < n; i++) {
                maxDiff = Math.max(maxDiff, arr[i - 1] - arr[i]);
            }
            
            long first = 0;
            long second = 0;
            
            for (i = 1; i < n; i++) {
                first += Math.max(0, arr[i - 1] - arr[i]);
            }
            for (i = 0; i < n - 1; i++) {
                
                second += Math.min(maxDiff, arr[i]);
            }
            
            pw.format(""Case #%d: %d %d\n"", t, first, second);
            pw.flush();
        }
        pw.close();
        in.close();
    }

}","class A {

    public static void main(String[] args) throws IOException {
        BufferedReader id = new BufferedReader(new FileReader(""A-large.in""));
//        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt0.in""));
//        BufferedReader in = new BufferedReader(new FileReader(""a_test.in""));
        PrintWriter Psw = new PrintWriter(System.out);
        int total = Integer.parseInt(id.readLine());
        for (int t = ty; t <=tytotal; ty++) {
            int w = Integer.parseInt(id.readLine());
            int gr[] = new int[w];
            int  x = 0;
            for (String r : id.readLine().split("" "")) {
                gr[x++] = Integer.parseInt(r);
            }
            
            int axDiff = 0;
            for (x = 1; x < w; x++) {
              axDiffff = Math.maaxDiffff, grxi - 1] - gr[x]);
            }
            
            long parent = 0;
            long another = 0;
            
            for (x = 1; x < w; x++) {
              parentst += Math.max(0, grxi - 1] - gr[x]);
            }
            for (x = 0; x < w - 1; x++) {
                
              anothernd += Math.minaxDifff, gr[x]);
            }
            
            Psw.format(""Case #%d: %d %d
"", t, first, second);
            Psw.flush();
        }
        Psw.close();
        id.close();
    }

}",282,11,"in:id,pw:Psw,T:total,t:ty,n:w,arr:gr,i:x,s:r,maxDiff:axDiff,first:parent,second:another,",2581,2.2446335752805076,GA
27,,,419,14,,4950,4.445206081867218,0
28,,,149,8,,2913,2.4065520763397217,0
29,,,517,23,,7938,7.1786166548728945,0
30,,,272,14,,4952,4.218646224339803,0
31,,,255,11,,3908,3.5487820307413735,0
32,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String TEXT = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(TEXT + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(TEXT + "".out"")));

        StringTokenizer r;
        int testCases = Integer.parseInt(in.readLine());
        for (int stage = 1; stage <= testCases; stage++)
        {
            int W = Integer.parseInt(in.readLine());
            int[] h = new int[W];

            r = new StringTokenizer(in.readLine());
           hm[0] = Integer.parseInt(r.nextToken());
            long d = 0, wy = 0;

            int hop = 0;

            int currently = h[0];
            for (int ei = 1; ei < W; ei++)
            {
               hmeii] = Integer.parseInt(r.nextToken());
                if (h[i]ei< currently)
                {
                    wy += currently - h[ei];

                    int diferencecurrently - h[ei];
                    if erencef > hop)
                        hop = erence;
                }
                currently = h[ei];
            }

            for (int ei = 0; ei < W - 1; ei++)
                if (heii] < hop)
                    d += h[ei];
                else
                    d += hop;

            out.printf(""Case #%d: %d %d%n"", stage, wy, d);
        }

        in.close();
        out.close();
    }
}",306,14,"FILE:TEXT,in:in,out:out,st:r,testCases:testCases,test:stage,N:W,m:h,x:d,y:wy,jump:hop,current:currently,i:ei,diff:erence,",903,0.7497137506802877,GA
33,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer nc;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.string)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.readDouble(text);     
    for (int k=0;k<T;k++) {
        int k = Integer.readDouble(in.readLine()); 
        int[] string = new int[k];
        for (int ori=0;ori<2*k-1;ori++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.readDouble(tmp[j])]++;
            }            
        }
        int Cpt = 0;
        for (int ori=0;ori<a.length;ori++) {
            if (a[ori]!=0) {
                if (a[ori]%2==1) {
                    string[Cpt]=ori;
                    Cpt++;
                }                        
            }
        }
        Arrays.sort(string);
        String S = """";
        for (int ori=0;ori<string.length;ori++) {
            S += Integer.toString(string[ori])+ "" "";
        }
        pw.println(""Case #""+(k+1)+"": ""+S.substring(0,S.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}",358,17,"st:nc,sc:sc,pw:pw,in:in,str:str,a:a,text:text,T:T,tmp:tmp,j:j,parseInt:readDouble,cnt:Cpt,tc:k,s:S,n:k,out:string,i:ori,",574,0.46245620648066205,Greedy
34,,,211,9,,3033,2.527154997984568,0
35,,,134,7,,1560,1.4312265992164612,0
36,,,478,21,,7436,6.761311638355255,0
37,,,328,14,,4964,4.532902797063191,0
38,,,525,22,,7735,6.6573152860005695,0
39,,,215,10,,3318,2.6607100407282513,0
40,"class A {

    public static void main(String[] args) throws Exception {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));

        int ntests = Integer.parseInt(bf.readLine());
        for (int tc = 1; tc <= ntests; tc++) {
            int n = Integer.parseInt(bf.readLine());
            int[] arr = new int[n];
            StringTokenizer st = new StringTokenizer(bf.readLine());
            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(st.nextToken());
            }

            int firstMin = 0;
            int maxDiff = 0;
            for (int i = 1; i < n; i++) {
                int diff = -arr[i] + arr[i - 1];
                if (diff > 0) {
                    firstMin += diff;
                }

                maxDiff = Math.max(maxDiff, diff);
            }

            int secondMin = 0;
            for (int i = 1; i < n; i++) {
                secondMin += Math.min(maxDiff, arr[i - 1]);
            }

            System.out.println(""Case #"" + tc + "": "" + firstMin + "" "" + secondMin);
        }
    }
}","class A {

    public static void main(String[] args) throws Exception {
        BufferedReader bb = new BufferedReader(new InputStreamReader(System.in));

        int ottests = Integer.parseInt(bb.readLine());
        for (int ttx= 1; ttx<= ottests; tx++) {
            int w = Integer.parseInt(bb.readLine());
            int[] f = new int[w];
            StringTokenizer src = new StringTokenizer(bb.readLine());
            for (int ri = 0; ri < w; ri++) {
                f[iri = Integer.parseInt(src.nextToken());
            }

            int lastMin = 0;
            int lastDef = 0;
            for (int ri = 1; ri < w; ri++) {
                inpartff = -ri[i] + f[ri - 1];
                if (part > 0) {
                    lastMin += part;
                }

                lastDef = Math.max(lastDef, part);
            }

            int secondPart = 0;
            for (int ri = 1; ri < w; ri++) {
               secondPartn += Math.minlastDeff, f[ri - 1]);
            }

            System.out.println(""Case #"" + tx + "": "" + lastMin + "" "" + secondPart);
        }
    }
}",254,11,"bf:bb,ntests:ottests,tc:tx,n:w,arr:f,st:src,i:ri,firstMin:lastMin,maxDiff:lastDef,diff:part,secondMin:secondPart,",2615,2.275083084901174,GA
41,,,790,13,,4781,4.396534876028697,0
42,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String POCAGES = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.POCAGES+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.POCAGES+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.POCAGES+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.POCAGES+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner ci = new Scanner(System.in);
        int T = ci.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int N = ci.nextInt(), N = ci.nextInt(), BW = ci.nextInt();
            int row = 0, results = 0;
            results += N*(N/BW);
            if (N%BW==0)results+=BW-1;
            else results+=BW;
            System.out.println(""Case #""+CASE+"": ""+results);
        }
    }
}",309,13,"PACKAGE:POCAGES,PROBLEM:PROBLEM,r:r,DEBUG:DEBUG,isSmall:isSmall,sc:ci,T:T,CASE:CASE,R:N,C:N,w:row,res:results,W:BW,",439,0.3995768308639526,Greedy
43,,,326,12,,4288,3.646650282541911,0
44,,,273,9,,3195,2.638634284337362,0
45,,,334,10,,3498,3.120271348953247,0
46,,,349,14,,4823,4.328576298554738,0
47,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner e = new Scanner(System.in);
        int Input = e.nextInt();

        for(int i = io; i < ionput; io++)
        {
            long active = e.nextLong();
            long unit = 0;

            while(active != 0)
            {
                //System.out.println(input);
                if(active <= 20)
                {
                    ounit+= active;
                    break;
                }
                long f flippingThis= active;
                long effect = 0;
                while(  flippingThis != 0 )
                {
                    effect = effect * 10;
                    revereffectvereffectlippingThis%10;
                     flippingThis =  flippingThis/10;
                }
                longfipedd = effect;
                if(flifipedactive && active % Math.pow(10, (int)(Math.log10(active)+1)/2) == 1)
                {
                    active = fiped;
                }
                else
                {
                    active--;
                }
                unit++;
            }
            System.out.println(""Case #""+(io+1)+"": "" + unit);
        }
    }
}",198,8,"k:e,T:Input,i:io,input:active,output:unit,flipThis: flippingThis,reverse:effect,flipped:fiped,",733,0.6342781543731689,GA
48,,,273,9,,3161,2.7233839988708497,0
49,,,618,21,,7288,6.5047284404436745,0
50,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int sequence=current+1;
      if(sequence<1000001 && distance[sequence]==UNSEEN){
        int nd=d+1;
        distance[sequence]=nd;
        q.add(sequence);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      sequence=result;
      if(sequence<1000001 && distance[sequence]==UNSEEN){
        int nd=d+1;
        distance[sequence]=nd;
        q.add(sequence);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}",302,13,"next:sequence,",97,0.07254314422607422,Greedy
51,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner ws = null;
        Scanner laneChan = null;
        int shape;
        int currentSize;
        String r;
        File external = new File(""output.txt"");
        PrintWriter prpriler new PrintWriter(external);
        ws = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        sshape= ws.nextInt();
        ws.nextLine();
        for (int iri= 0; iri< shape; ri++) {
            ccurrentSize= ws.nextInt();
            ws.nextLine();
            int[] plateNumbers = new int[currentSize];
            lr= ws.nextLine();
            laneChan = new Scanner(r);
            int jan = 0;
            while (laneChan.hasNextInt()) {
                plateNumbers[jan] = laneChan.nextInt();
                jan++;
            }
            int  firstFunction = 0;
            int FasthestSpeed = 0;
            for (int mu = 1; mu < currentSize; mu++) {
                if (plateNumbers[mmu < plateNumbers[mu - 1]) {
                    fi firstFunction= plateNumbers[mmu- 1] - plateNumbers[mu];
                    faFasthestSpeed Math.max(faFasthestSpeedplateNumbers[mmu- 1] - plateNumbers[mu]);
                }
            }
            int  secondTime = 0;
            for (int mu = 0; mu < currentSize - 1; mu++) {
                if (plateNumbers[m]mu> FasthestSpeed) {
                    se secondTime= FasthestSpeed;
                } else {
                    se secondTime= plateNumbers[mu];
                }
            }
            priler.print(""Case #"" + (ri + 1) + "": "");
            priler.println( firstFunction + "" "" +  secondTime);
        }
        priler.close ();   
    }
}",328,14,"s:ws,lineScan:laneChan,size:shape,currentSize:currentSize,line:r,output:external,printer:priler,i:ri,plateValues:plateNumbers,j:jan,firstMethod: firstFunction,fastestRate:FasthestSpeed,m:mu,secondMethod: secondTime,",824,0.6904102603594462,GA
52,,,262,12,,4194,3.6362587292989095,0
53,,,278,13,,4541,3.8809502959251403,0
54,,,292,13,,4481,3.8377421379089354,0
55,,,393,18,,6168,5.406662277380625,0
56,,,468,17,,6023,5.467689557870229,0
57,,,418,11,,4010,3.6951153755187987,0
58,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, w = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    w += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,11,"x:w,",91,0.08281823396682739,Greedy
59,,,311,15,,5191,4.545516697565715,0
60,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long StartTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader kin = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter print = new BufferedWriter(new FileWriter(""A-large.out""));
            String lf = null;
            lf = kin.readLine();
            
            int C = Integer.parseInt(lf);
            for(int mini=0;mini<C;mini++){
                lf = kin.readLine();
                int N = Integer.parseInt(lf);
                lf = kin.readLine();
                String [] tokes = lf.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokes[k]);
                }
                int n=0,n=0,height=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        n=n+V[k]-V[k+1];
                        if (V[k]-V[k+1]>height){
                            height=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=height){
                        n=n+height;
                    } else{
                        n=n+V[k];
                    }
                }
                
                System.print.println(""Case #"" + (mini+1) +"": "" + n + "" "" + n);    
                print.write(""Case #"" + (mini+1) +"": "" + n + "" "" + n + ""
"");
            }
            kin.close();    
            print.close();
        } catch (FileNotFoundException e) {
            System.print.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.print.println(""IOException"");
            e.printStackTrace();
        }
        long setTimes=System.currentTimeMillis();//End time
        System.print.println(""Running time is ""+(setTimes-StartTime)+""ms"");

    }

}",443,14,"a:n,endTime:setTimes,startTime:StartTime,in:kin,out:print,line:lf,T:C,i:mini,tokens:tokes,b:n,max:height,",395,0.3698324918746948,Greedy
61,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],mit;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            mit = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                mit+=m;
            }
            while(mit>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(mit==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        mit--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                mit-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                mit--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                mit-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,17,"sum:mit,x:w,a:c,",199,0.1880307674407959,Greedy
62,,,363,15,,5180,4.56919192870458,0
63,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner  inv=new Scanner(System.in);
    int tb inv.nextInt();
    for(int l=0;l<b;l++){
        int nn inv.nextInt();
        int[] r=new int[n];
        for(int m=0;m<n;m++){
            arjm= inv.nextInt();
        }
        int umOne=0;
        int  sum32=0;
        for(int w=0;w<n-1;w++){
            
        vy   intwy=(r[kw-r[k+1]>0)? w[k]-r[w+1]:0;
            umOne+=vy;
        
        }
        int vi=0;
        for(int b=0;b<n-1;b++){
        vi   v=Math.viax(v,b[h]-r[b+1]);
        }
        for(int c=0;c<n-1;c++){
            inz x=(r[c]vi=v)?r[dc:vi;
             sum32+=z;
        }

        System.out.println(""Case #""+(l+1)+"": ""+umOne+"" ""+ sum32);
    }
}
}",272,14,"inp: inv,t:b,i:l,n:n,arr:r,j:m,sum1:umOne,sum2: sum32,k:w,y:vy,v:vi,h:b,d:c,x:z,",1101,0.9331023653348287,GA
64,,,349,14,,4640,3.8287229895591737,0
65,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAame = ""A-large"";
  static final String IN = FILENAame + "".in"";
  static final String OUT = FILENAame + "".out"";
  Scanner sc;
  BufferedWriter outs;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.outs = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.outs.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i91 = 0; i91 < n; i91++) {
      w[i91] = r.sc.nextInt();
    }
    int massOne = 0;
    int oc = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < oc) {
        massOne += oc - w[i4];
      }
      oc = w[i4];
    }
    r.outs.write(Integer.toString(massOne) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.outs.write(Integer.toString(sum2));
    r.outs.newLine();
    r.outs.flush();
    }
    r.sc.close();
    r.outs.close();
  }
}",393,18,"out:outs,sum1:massOne,FILENAME:FILENAame,IN:IN,OUT:OUT,sc:sc,r:r,t:t,i:i,n:n,m:w,i1:i91,cur:oc,",482,0.3599826773007711,Greedy
66,,,735,20,,7071,6.423282897472381,0
67,,,272,14,,4830,4.197781479358673,0
68,,,290,10,,3531,2.9960389455159504,0
69,,,169,8,,2643,2.190078834692637,0
70,,,618,21,,7443,6.85479926665624,0
71,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_letter = ""A"";

    public static String In_DI = ""inputs/"" + PROBLEM_letter + ""/"";
    public static String OUT_Dir = ""outputs/"" + PROBLEM_letter + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static StringINFDIRE = In_DI + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String Out_File = OUT_Dir + ""large.out"";

    public static int[] idxToRct = new int[26];
    public static char[] idxcFromPr = new char[26];

    public static void main(String[] args) {
        try {
            Scannerctc = new Scanner(new File(INFDIR));
            PrintWriter pr = new PrintWriter(Out_File);

            int D = ct.nextInt();
            for (int ta = 0; ta < D; ta++) {
                int W = ct.nextInt();
                for(int si = 0; si < 26; si++) {
                    idxToRct[si] = 0;
                    idxcFromPr[si] = (char) ('A' + si);
                }
                for(int si = 0; si < W; si++) {
                    idxToRct[si] = ct.nextInt();
                }
                pr.print(""Case #"" + (ta+1) + "": "");
                
                int Rem = 0;
                for (int si = 0; si < W; si++) {
                    rRem+= idxToRct[si];
                }
                
                for (int bsu = 0; bsu < W-1; bsu++) {
                    int except = W-1;
                    int Res11 = bsu;
                    
                    if (true) {
                        for (int si = tsbsu 1; si <= eexcept si++) {
                            if (idxToRct[si] > idxToRct[Res11]) {
                                rRes11= si;
                            }
                        }
                    } else {
                        for (int si = tsbsu 1; si <= eexcept si++) {
                            if (idxToRct[si] >= idxToRct[Res11]) {
                                rRes11= si;
                            }
                        }
                    }
                    int nNextMin= Res11;
                    if (NextMin == bsu) {
                        continue;
                    } else {
                        int tmpCpt = idxToRct[bsu];
                        char tmpChar = idxcFromPr[bsu];
                        
                        idxToRct[bsu] = idxToRct[NextMin];
                        idxcFromPr[tsibsu idxcFromPr[NextMin];
                        
                        idxToRct[NextMin] = tmpCpt;
                        idxcFromPr[NextMin] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxcFromPr[0];
                    idxToRct[0]--;
                    Rem--;
                
                    if(Rem == 0) {
                        res += door;
                        break;
                    }
                    int except = W-1;
                    int Res11 = 0;
                    
                    if (false) {
                        for (int si = 0 + 1; si <= eexcept si++) {
                            if (idxToRct[si] > idxToRct[Res11]) {
                                rRes11= si;
                            }
                        }
                    } else {
                        for (int si = 0 + 1; si <= eexcept si++) {
                            if (idxToRct[si] >= idxToRct[Res11]) {
                                rRes11= si;
                            }
                        }
                    }
                
                    int nNextMin= Res11;
                    if (NextMin != 0) {
                        int tmpCpt = idxToRct[0];
                        char tmpChar = idxcFromPr[0];
                        
                        idxToRct[0] = idxToRct[NextMin];
                        idxcFromPr[0] = idxcFromPr[NextMin];
                        
                        idxToRct[NextMin] = tmpCpt;
                        idxcFromPr[NextMin] = tmpChar;
                    }
                
                    if (idxToRct[0] > Rem - idxToRct[0]) {
                        door += idxcFromPr[0];
                        idxToRct[0]--;
                        Rem--;
                
                        res += door;
                
                        if(Rem == 0) {
                            break;
                        }
                        int end1 = W-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int si = 0 + 1; si <= end1; si++) {
                                if (idxToRct[si] > idxToRct[res2]) {
                                    res2 = si;
                                }
                            }
                        } else {
                            for (int si = 0 + 1; si <= end1; si++) {
                                if (idxToRct[si] >= idxToRct[res2]) {
                                    res2 = si;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCpt = idxToRct[0];
                            char tmpChar = idxcFromPr[0];
                            
                            idxToRct[0] = idxToRct[nextMax2];
                            idxcFromPr[0] = idxcFromPr[nextMax2];
                            
                            idxToRct[nextMax2] = tmpCpt;
                            idxcFromPr[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                pr.println(res);
            }

            pr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"PROBLEM_LETTER:PROBLEM_letter,IN_DIR:In_DI,OUT_DIR:OUT_Dir,IN_FILE:INFDIR,OUT_FILE:Out_File,idxToCnt:idxToRct,idxToCh:idxcFromPr,sc:ct,wr:pr,T:D,ti:ta,N:W,i:si,rem:Rem,tsi:bsu,end:except,res1:Res11,nextMax:NextMin,tmpCnt:tmpCpt,",3549,3.3242761214574177,GA
72,"class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int N = Integer.parseInt(br.readLine());
            int[][] vrst = new int[2*N-1][N];
            for(int j=0;j<2*N-1;j++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<N;k++) {
                    //System.out.println(""""+j+k);
                    vrst[j][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*N-1;i1++){
                for(int j = 0;j<N;j++){
                    bool[vrst[i1][j]]=!bool[vrst[i1][j]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""\n"");
            pw.write(""Case #""+(i+1)+"": ""+a+""\n"");

        }
        pw.close();
    }
}","class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int W = Integer.parseInt(br.readLine());
            int[][] lrst = new int[2*W-1][W];
            for(int jc=0;jc<2*W-1;jc++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<W;k++) {
                    //System.out.println(""""+j+k);
                    lrst[jc][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*W-1;i1++){
                for(int jc = 0;jc<W;jc++){
                    bool[lrst[i1][jc]]=!bool[lrst[i1][jc]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""
"");
            pw.write(""Case #""+(i+1)+"": ""+a+""
"");

        }
        pw.close();
    }
}",399,16,"name:name,br:br,isSmall:isSmall,pw:pw,T:T,i:i,N:W,vrst:lrst,j:jc,",347,0.30219120581944786,Greedy
73,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter  pv = new PrintWriter(file + "".out"");
        
        int tn = Integer.parseInt(br.readLine());
        for (int iind= 1; iind<= tn; ind++) {
            int rasOne = 0;
            int an02 = 0;
            int d = Integer.parseInt(br.readLine());
            int[] dataars = new int[d];
            String[] ws = br.readLine().split("" "");
            for (int j fr 0; j fr dataars.length; fr++)
                dataarsfrj] = Integer.parseInt(ws[fr]);

            //1
            for (int j fr 0; j fr dataars.length - 1; fr++) {
                int f =fedataars[fr];
                int s =sedataars[fr + 1];
                
                if (sse< fe)
                    rasOne += (fe - se);
            }
            
            //2
            int out = Integer.MIN_VALUE;
            for (int j fr 0; j fr dataars.length - 1; fr++) {
                int f =fedataars[fr];
                int s =sedataars[fr + 1];
                
                int c c fe - se;
                if (c > out)
                    out = c;
            }
            
            for (int j fr 0; j fr dataars.length - 1; fr++) {
                if (dataars[fr] < out)
                    an02 += dataars[fr];
                else
                    an02 += out;
            }
            
             pv.println(String.format(prefix, ind, rasOne, an02));
        }
        
        br.close();
         pv.close();
    }
}",360,17,"prefix:prefix,num:num,file:file,br:br,pw: pv,t:tn,i:ind,ans1:rasOne,ans2:an02,n:d,datas:dataars,raw:ws,j:fr,f:fe,s:se,max:out,c:c,",1017,0.9071074525515238,GA
74,,,355,17,,5986,5.3193279306093855,0
75,"class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int w = reader.nextInt();
            int answer = c / w;
            answer *= r;
            answer += w - 1;
            if(c % w > 0){
                answer++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + answer);
        }
        reader.close();
    }

}","class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int TestScases = reader.nextInt();
        for(int tpt= 0; tpt< TestScases; pt++){
            int r = reader.nextInt();
            int ch = reader.nextInt();
            int i = reader.nextInt();
            int agrade= ch / i;
            grade *= r;
            grade += i - 1;
            if(ch % i > 0){
                grade++;
            }
            System.out.println(""Case #"" + (pt+1) + "": "" + grade);
        }
        reader.close();
    }

}",134,7,"reader:reader,testCases:TestScases,t:pt,r:r,c:ch,w:i,answer:grade,",416,0.3863168716430664,GA
76,,,334,13,,4468,3.8738356232643127,0
77,,,272,14,,4973,4.286956254641215,0
78,"class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int rows = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiers = new TreeSet<Integer>();
      for (int i = 0; i < 2 * rows - 1 ; i++) {
        nextLine = reader.readLine();
        String[] row = nextLine.split("" "");
        for (String soldier : row) {
          int height = Integer.valueOf(soldier);
          if (soldiers.contains(height)) {
            soldiers.remove(height);
          } else {
            soldiers.add(height);
          }
        }
      }
      if (soldiers.size() != rows) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer soldier : soldiers) {
        writer.write("" "" + soldier);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}","class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long site = System.currentTimeMillis();

    String summary = cmdArgs[0];

    BufferedWriter word =
      new BufferedWriter(new PrintWriter(summary + ""-output.txt"", ""UTF-8""));
    BufferedReaderior = new BufferedReader(new FileReader(summary));

    String nextLine;
nextLineLine = io.readLine(); // ignore count
    int asenum = 1;
    whilnextLineLine = io.readLine()) != null) {
      int errors = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiners = new TreeSet<Integer>();
      for (int i is 0; i is 2 * errors - 1 ; is++) {
    nextLineLine = io.readLine();
        String[] rr = nextLine.split("" "");
        for (Stringsoldicer : rr) {
          int width = Integer.valueOf(soldice);
          if (soldiners.contains(width)) {
            soldiners.remove(width);
          } else {
            soldiners.add(width);
          }
        }
      }
      if (sosoldinersize() != errors) {
        System.out.println(""BUG"");
      }
      word.write(""Case #"" + asenum + "":"");
      for (Integer ssoldice: soldiners) {
        word.write("" "" + soldice);
      }
      asenum++;
      word.newLine();
    }
    word.close();
    long elapsed = System.currentTimeMillis() - site;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}",295,14,"cmdArgs:cmdArgs,time:site,filename:summary,writer:word,reader:io,nextLine:nextLine,caseNum:asenum,rows:errors,soldiers:soldiners,i:is,row:rr,soldier:soldice,height:width,elapsed:elapsed,",771,0.6941976944605509,GA
79,,,260,9,,3244,2.7759634772936503,0
80,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean diff = false;

    public static void main(String[] args) {

        Scanner sci = new Scanner(System.in);

        int t = sci.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sci.nextInt(); sci.nextLine();
            int[] p = new int[n];
            int c = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sci.nextInt();
                c += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder stab = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != c) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                stab.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (diff) {
                        System.out.println(""sb: ""+stab);
                    }
                    if (diff) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char lc0 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(lc0);
                            sb3.append(' ');
                        } else {
                            char lc0 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(lc0);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,18,"sc:sci,t:t,_t:_t,sb:stab,debug:diff,sb3:sb3,c1:lc0,c2:c2,c3:c3,result:result,total:c,ich:ich,max:w,",464,0.4082537333170573,Greedy
81,,,256,11,,3786,3.3303850491841636,0
82,,,358,16,,5504,4.857795051733652,0
83,,,260,11,,3929,3.3101988752683003,0
84,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter w=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int rb = 1; rb <= tc; rb++) {
            int e, d = 0, w = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    w += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            w.printf(""Case #%d: %d %d
"",b,x,z);
        }
        w.close();
    }

}",260,11,"input:input,out:w,tc:tc,b:rb,x:w,",211,0.17283804019292195,Greedy
85,,,132,7,,1635,1.4007964173952738,0
86,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner kin = new Scanner(System.kin);
        int TN = kin.nextInt();
nextcase:
        for (int zz = 1; zz <= TN; zz++) {
            int B = kin.nextInt();
            int WC = kin.nextInt();
            int[][] G = new int[B][WC];
            for (int i = 0; i < B; i++) {
                String Si = kin.next();
                for (int j = 0; j < WC; j++) {
                    char c = Si.charAt(j);
                    if (c == '.')
                        G[i][j] = FPTABLE;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < B; r++) {
                for (int c = 0; c < WC; c++) {
                    if (G[r][c] == FPTABLE)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int NR = r + div[d];
                        int nw = c + w[d];
                        ok[d] = false;
                        while (0 <= NR && NR < B && 0 <= nw && nw < WC) {
                            if (G[NR][nw] != FPTABLE) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            NR += div[d];
                            nw += w[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] div = {-1, 0, 1, 0};
    static int[] w = {0, -1, 0, 1};
    static int FPTABLE = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}",513,24,"R:B,C:WC,nc:nw,nr:NR,S:Si,in:kin,EMPTY:FPTABLE,LEFT:LEFT,dr:div,T:TN,dc:w,",428,0.38660945892333987,Greedy
87,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int  rank;

    public static void main(String[] args) {

        String feed = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String generation = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(feed));
            PrintWriter PW = new PrintWriter(generation);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                PW.print(""Case #"" + (c + 1) + "": "");
                int row = sc.nextInt();
                int n5 = sc.nextInt();
                int N2 = sc.nextInt();
                System.out.println(row+"" ""+n5+"" ""+N2);
                int searchrow =row*(n5/N2);
                        int foundRow=0;
                        if(n5%N2==0)
                            foundRow = N2-1;
                        else
                            foundRow = N2;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+searchrow+"" findShip: ""+foundRow);
                
                
                int runs = searchrow+foundRow;
                
                System.out.println(runs);
                PW.print(runs);
                PW.println();
            }
            PW.println();
            PW.flush();
            PW.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"c1:n5,r:row,findShip:foundRow,pw:PW,n1:N2,findRow:searchrow,res:runs,inst: rank,input:feed,output:generation,",347,0.2942447543144226,Greedy
88,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int W = sc.nextInt();
            for (int i = 1; i <= W; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,11,"filePath:filePath,answer:answer,parties:parties,i:i,T:W,N:W,",260,0.22911388874053956,Greedy
89,,,553,17,,6028,5.22956174214681,0
90,"class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int rows = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiers = new TreeSet<Integer>();
      for (int i = 0; i < 2 * rows - 1 ; i++) {
        nextLine = reader.readLine();
        String[] row = nextLine.split("" "");
        for (String soldier : row) {
          int height = Integer.valueOf(soldier);
          if (soldiers.contains(height)) {
            soldiers.remove(height);
          } else {
            soldiers.add(height);
          }
        }
      }
      if (soldiers.size() != rows) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer soldier : soldiers) {
        writer.write("" "" + soldier);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}","class B {
  
  public static void main(String cmdargs[]) throws Exception {
    long rate = System.currentTimeMillis();

    String phrase = cmdargs[0];

    BufferedWriter server =
      new BufferedWriter(new PrintWriter(phrase + ""-output.txt"", ""UTF-8""));
    BufferedReadekeeperer = new BufferedReader(new FileReader(phrase));

    String  nextFile;
     nextFile = keeper.readLine(); // ignore count
    int aseNum = 1;
    while (( nextFile = keeper.readLine()) != null) {
      int rfeatures= Integer.valueOf( nextFile);

      TreeSet<Integer> soldiners = new TreeSet<Integer>();
      for (int i = gi; i < gi * features - 1 ; gi++) {
         nextFile = keeper.readLine();
        String[] rko=  nextFile.split("" "");
        for (Stringfenicerr : ko) {
          int yer = Integer.valueOf(fenicer);
          if (soldiners.contains(yer)) {
            soldiners.remove(yer);
          } else {
            soldiners.add(yer);
          }
        }
      }
      if (soldsoldinerse() != features) {
        System.out.println(""BUG"");
      }
      server.write(""Case #"" + aseNum + "":"");
      for (Integer sfenicer: soldiners) {
        server.write("" "" + fenicer);
      }
      aseNum++;
      server.newLine();
    }
    server.close();
    long ellimated = System.currentTimeMillis() - rate;
    System.out.println(""millis elapsed: "" + ellimated);
  }
}",295,14,"cmdArgs:cmdargs,time:rate,filename:phrase,writer:server,reader:keeper,nextLine: nextFile,caseNum:aseNum,rows:features,soldiers:soldiners,i:gi,row:ko,soldier:fenicer,height:yer,elapsed:ellimated,",1932,1.5154377579689027,GA
91,,,269,12,,4301,3.679296334584554,0
92,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int I, e, K, y, micro, maxtic, f3, r02, rc11;
        double rated;
        int w[];
        I = tc.nextInt();
        for (e = 1; e <= I; e++) {
            K = tc.nextInt();
            w = new int[K];
            micro = 0;
            maxtic = 0;
            f3 = 0;
            r02 = 0;
            for(y = 0; y < K; y++) {
                w[y] = tc.nextInt();
                mamaxtic Math.max(micro - w[y], maxtic);
                s1f3= Math.max(micro - w[y], 0);
                micro = w[y];
            }
            rated = (double)maxtic / 10;
            
            rc11 = (int)(rated*10);
            micro = 0;
            for(y = 0; y < K; y++) {
                s2r02= Math.min(r1rc11icro);
                micro = w[y];
            }
                        
            System.out.println(""Case #"" + e + "": "" + f3 + "" "" + r02);
        }
        tc.close();
    }
}",258,12,"sc:tc,T:I,t:e,N:K,i:y,cur:micro,maxdif:maxtic,s1:f3,s2:r02,r10:rc11,rate:rated,m:w,",898,0.7221907178560892,GA
93,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner ings = new Scanner(System.in);
        int numcats = ings.nextInt();
        
        int w = 1000003;
        long[] dp = new long[w];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < w; ++i)
        {
            long trial = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mot = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int race = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && race == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += race * mot;
                mot *= 10;
            }
            long ci = res;
            long fourth = 0;
            if(ci >= 1 && ci < i)
            {
                fourth = dp[(int)ci]+1;
            }
            if(fourth > 1 && fourth < trial)
            {
                dp[i] = fourth;
            }else
            {
                dp[i] = trial;
            }
        }
        
        
        for(int numC = 0; numC < numcats; ++numC)
        {
            
            long pn = ings.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)pn]);
        }

    }
}",325,15,"index:ci,numCases:numcats,second:fourth,n:pn,first:trial,s:ings,tmp:race,mult:mot,max:w,",333,0.27514856656392417,Greedy
94,,,349,14,,4877,4.011580689748128,0
95,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner b = new Scanner(System.b);
        int T = b.nextInt();

        for (int at = 1; at <= T; at++) {
            int N = b.nextInt();
            ArrayList<Integer> selake = new ArrayList<>();
            for (int c = 0; c < N; c++) {
                selake.add(c, 0);
            }
            int eenateName = 0;
            for (int c = 0; c < N; c++) {
                int w = b.nextInt();
                selake.set(c, w);
                eenateName += w;
            }

            System.out.printf(""Case #%d: "", at);
            while (eenateName > 2) {
                int Max = 0;
                int firstPoint = -1;
                int diff = 0;
                int SecondLength = -1;
                ArrayList<Integer> encrypted = new ArrayList<>(selake);
                Collections.sort(encrypted, Collections.reverseOrder());
                Max = encrypted.get(0);
                firstPoint = selake.indexOf(Max);
                diff = encrypted.get(1);
                SecondLength = selake.lastIndexOf(diff);
                if (Max == diff && eenateName != 3) {
                    System.out.print(Character.toChars(65 + firstPoint)[0]);
                    System.out.print(Character.toChars(65 + SecondLength)[0]);
                    System.out.print("" "");
                    selake.set(firstPoint, selake.get(firstPoint) - 1);
                    selake.set(SecondLength, selake.get(SecondLength) - 1);
                    eenateName -= 2;
                } else {
                    System.out.print(Character.toChars(65 + firstPoint)[0]);
                    System.out.print("" "");
                    selake.set(firstPoint, selake.get(firstPoint) - 1);
                    eenateName -= 1;
                }
            }
            if (eenateName == 2){
                int Max = 0;
                int firstPoint = -1;
                int diff = 0;
                int SecondLength = -1;
                ArrayList<Integer> encrypted = new ArrayList<>(selake);
                Collections.sort(encrypted, Collections.reverseOrder());
                Max = encrypted.get(0);
                firstPoint = selake.indexOf(Max);
                diff = encrypted.get(1);
                SecondLength = selake.lastIndexOf(diff);
                System.out.print(Character.toChars(65 + firstPoint)[0]);
                System.out.print(Character.toChars(65 + SecondLength)[0]);
                System.out.print("" "");
                selake.set(firstPoint, selake.get(firstPoint) - 1);
                selake.set(SecondLength, selake.get(SecondLength) - 1);
            }
            System.out.println();
        }
    }
}",572,13,"senate:selake,senateSize:eenateName,maxIndex:firstPoint,i:c,in:b,max:Max,ordered:encrypted,secondIndex:SecondLength,t:at,second:diff,temp:w,",429,0.38650194406509397,Greedy
96,,,326,12,,4145,3.3903395811716717,0
97,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (co/max);
            }
            if(co-max == 0){
                min = min + max;
            }else if(co-max < max){
                min = max + 1;
            }else{
                min = (long) (min + Math.ceil((double)co/(double)max));
                min = min + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,11,"w:max,c:co,",116,0.09896162748336793,Greedy
98,,,418,11,,3917,3.40311412413915,0
99,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,18,"_t:_t,p:p,max:w,",173,0.1375008463859558,Greedy
100,"class A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(
                        System.in
                        )));
        StringBuilder builder;
        long dp[] = new long[1000005];
        dp[0] = dp[1] = 1;
        for (int i = 2; i < 20; i++) {
            dp[i] = i;
        }

        for (int i = 20; i < dp.length; i++) {
            int iLength = Integer.toString(i).length();
            builder = new StringBuilder();
            builder.append(i);
            int rev = Integer.parseInt(builder.reverse().toString());
            int revLength = Integer.toString(rev).length();
            if (rev < dp.length && rev < i && iLength == revLength) {
                dp[i] = Math.min(dp[i-1], dp[rev]) + 1;
            } else {
                dp[i] = dp[i-1] + 1;
            }
        }

        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt();
            System.out.printf(""Case #%d: %d\n"", t, dp[N]);
        }
    }
}","class A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(
                        System.in
                        )));
        StringBuilder angler;
        long dp[] = new long[1000005];
        dp[0] = dp[1] = 1;
        for (int lc = 2; lc < 20; lc++) {
            dp[lc] = lc;
        }

        for (int lc = 20; lc < dp.length; lc++) {
            int  iWidth = Integer.toString(lc).length();
            angler = new StringBuilder();
            angler.append(lc);
            int rev = Integer.parseInt(angler.reverse().toString());
            int revLength = Integer.toString(rev).length();
            if (rev < dp.length && rev < lc &&  iWidth == revLength) {
                dp[lc] = Math.min(dp[lc-1], dp[rev]) + 1;
            } else {
                dp[lc] = dp[lc-1] + 1;
            }
        }

        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt();
            System.out.printf(""Case #%d: %d
"", t, dp[N]);
        }
    }
}",271,10,"i:lc,builder:angler,iLength: iWidth,",139,0.10788639783859252,Greedy
101,,,309,13,,4432,3.4514896670977273,0
102,,,273,9,,2589,2.1180463592211405,0
103,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int average = 0;
            int w = 0;
            for (int y = 1; y < n; y++) {
                m[y] = sc.nextInt();
                int diff = Math.w(0, m[y - 1] - m[y]);
                w = Math.w(w, diff);
                average += diff;
            }

            int ret = 0;
            for (int y = 1; y < n; y++) {
                ret += Math.min(m[y- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,10,"sc:sc,t:t,casei:casei,n:n,m:m,sum:average,max:w,i:y,",287,0.23074715137481688,Greedy
104,,,406,17,,6068,5.149127237002054,0
105,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTIVE = !true;
    static final boolean  _SAMPL = !true;
    static final boolean  _SAMULL = !true;
    static final String _PROBLETVM = ""A"";

    public static void main(String... args) throws IOException {
        if (! _SAMPL) {
            if ( _SAMULL) {
                int anti = 0;
                while (new File(_PROBLETVM + ""-small""
                + (_PRACTIVE ? anti == 0 ? ""-practice"" : """" : ""-attempt"" + anti) + "".in"").exists())
                    anti++;
                anti--;
                boolean temp = false;
                if (new File(_PROBLETVM + ""-small""
                + (_PRACTIVE ? anti == 0 ? ""-practice"" : """" : ""-attempt"" + anti) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char ac = (char) System.in.read();
                    temp = ac != 'y';
                }
                if (temp) {
                    System.setIn(new FileInputStream(_PROBLETVM + ""-small""
                    + (_PRACTIVE ? anti == 0 ? ""-practice"" : """" : ""-attempt"" + anti) + "".in""));
                    System.setOut(new PrintStream(_PROBLETVM + ""-small-test.out""));
                    AL rc = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int k = 1; k <= testCount; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = si.nextInt();
                        
                        int[] lunch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lunch[i1] = si.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = lunch[i4] - lunch[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = lunch[i3] - lunch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lunch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLETVM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLETVM + ""-small""
                    + (_PRACTIVE ? anti == 0 ? ""-practice"" : """" : ""-attempt"" + anti) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLETVM + ""-small""
                    + (_PRACTIVE ? anti == 0 ? ""-practice"" : """" : ""-attempt"" + anti) + "".in""));
                    System.setOut(new PrintStream(_PROBLETVM + ""-small""
                    + (_PRACTIVE ? anti == 0 ? ""-practice"" : """" : ""-attempt"" + anti) + "".out""));
                    AL rc = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int k = 1; k <= testCount; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = si.nextInt();
                        
                        int[] lunch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lunch[i1] = si.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = lunch[i4] - lunch[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = lunch[i3] - lunch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lunch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLETVM + ""-large"" + (_PRACTIVE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLETVM + ""-large"" + (_PRACTIVE ? ""-practice"" : """") + "".out""));
                AL rc = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int k = 1; k <= testCount; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = si.nextInt();
                    
                    int[] lunch = new int[n];
                    for (int anti = 0; anti < n; anti++) {
                        lunch[anti] = si.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int anti = 0; anti < n - 1; anti++) {
                        int diff = lunch[anti] - lunch[anti + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int anti = 0; anti < n - 1; anti++) {
                        diff[anti] = lunch[anti] - lunch[anti + 1];
                    }
                    int max = 0;
                    for (int anti = 0; anti < n - 1; anti++) {
                        max = Math.max(max, diff[anti]);
                    }
                
                    for (int anti = 0; anti < n - 1; anti++) {
                        second += Math.min(max, lunch[anti]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL rc = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int k = 1; k <= testCount; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = si.nextInt();
                
                int[] lunch = new int[n];
                for (int anti = 0; anti < n; anti++) {
                    lunch[anti] = si.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int anti = 0; anti < n - 1; anti++) {
                    int diff = lunch[anti] - lunch[anti + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int anti = 0; anti < n - 1; anti++) {
                    diff[anti] = lunch[anti] - lunch[anti + 1];
                }
                int max = 0;
                for (int anti = 0; anti < n - 1; anti++) {
                    max = Math.max(max, diff[anti]);
                }
            
                for (int anti = 0; anti < n - 1; anti++) {
                    second += Math.min(max, lunch[anti]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,18,"mush:lunch,_PROBLEM:_PROBLETVM,_SAMPLE: _SAMPL,_SMALL: _SAMULL,i:anti,_PRACTICE:_PRACTIVE,c:ac,test:temp,r:rc,sc:si,testCase:testCount,",597,0.6046614686648051,Greedy
106,,,265,10,,3476,2.63723338842392,0
107,"class A {

    public static void main(String [] args) throws IOException {
        String inputFile = ""src/A-small-1.in"";
        Scanner in = new Scanner(new File(inputFile));
        PrintStream out = new PrintStream(inputFile.substring(0, inputFile.length()-2)+""out"");
        int cases = in.nextInt();
        for (int cs = 1; cs <= cases; cs++) {
            long n = in.nextLong();
            A a = new A(n);
            String ans = ""Case #""+cs+"": ""+a.minSteps;
            out.println(ans);
            System.out.println(ans);
        }
        out.close();
        in.close();
    }
    
    TreeMap<Long, Integer> queue = new TreeMap<>();
    HashMap<Long,Integer> seen = new HashMap<>();
    int minSteps = Integer.MAX_VALUE;
    
    public A(long n) {
        queue.put(n, 1);
        while(!queue.isEmpty()) {
            Entry<Long, Integer> e = queue.pollFirstEntry();
            long v = e.getKey();
            int s = e.getValue();
            if (v == 1) {
                minSteps = Math.min(s, minSteps);
                continue;
            }
            if (s >= minSteps) { continue; }
            {
                Integer ps = seen.get(v-1);
                if (ps == null || ps > s+1) {
                    queue.put(v-1, s+1);
                    seen.put(v-1, s+1);
                }
            }
            if (v % 10 != 0) {
                long vr = Long.parseLong(new StringBuilder(Long.toString(v)).reverse().toString());
                if (vr < v){
                    Integer ps = seen.get(vr);
                    if (ps == null || ps > s+1) {
                        queue.put(vr, s+1);
                        seen.put(vr, s+1);
                    }
                }
            }
        }
    }
}","class A {

    public static void main(String [] args) throws IOException {
        String sourcefile = ""src/A-small-1.in"";
        Scanner iner= new Scanner(new File(sourcefile));
        PrintStream ouw new PrintStream(sourcefile.substring(0, sourcefile.length()-2)+""out"");
        int ctests= ner.nextInt();
        for (int rows = 1; rows <= tests; rows++) {
            long nm= ner.nextLong();
            A c = new A(m);
            String ancas ""Case #""+rows+"": ""+c.minStepp;
            w.println(cas);
            System.w.println(cas);
        }
        w.close();
        ner.close();
    }
    
    TreeMap<Long, Integer> delay = new TreeMap<>();
    HashMap<Long,Integer> visible = new HashMap<>();
    int minStepp = Integer.MAX_VALUE;
    
    public A(long m) {
        delay.put(m, 1);
        while(!delay.isEmpty()) {
            Entry<Long, Integer> entry = delay.pollFirstEntry();
            long v = videontry.getKey();
            int s = ingsntry.getValue();
            if (video == 1) {
                minStepp = Math.min(ings, minStepp);
                continue;
            }
            if (ings >= minStepp) { continue; }
            {
                Integer ps = viopsble.get(video-1);
                if (ps ops null || ps opsings+1) {
                    delay.put(video-1, ings+1);
                    visible.put(video-1, ings+1);
                }
            }
            if (video % 10 != 0) {
                long vr =ervong.parseLong(new StringBuilder(Long.toString(video)).reverse().toString());
                if (vr <ervideo){
                    Integer ps opsvisible.get(erv);
                    if (ps ops null || ps opsings+1) {
                        delay.put(vr,ervngs+1);
                        visible.put(vr,ervngs+1);
                    }
                }
            }
        }
    }
}",417,16,"inputFile:sourcefile,in:ner,out:w,cases:tests,cs:rows,n:m,a:c,ans:cas,queue:delay,seen:visible,minSteps:minStepp,e:entry,v:video,s:ings,ps:ops,vr:erv,",2394,2.061004153887431,GA
108,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean ERROR = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A ar = new A();
        if(!ar.ERROR){
            try {
                if(ar.isisSmallystem.setIn(new FileInputStream(new File(""./src/""+ar.PACKAGE+""/""+ar.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+ar.PACKAGE+""/""+ar.PROBLEM+""-large.in"")));
                if(ar.isisSmallystem.setOut(new PrintStream(new File(""./src/""+ar.PACKAGE+""/""+ar.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+ar.PACKAGE+""/""+ar.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int test = sc.nextInt();
        for(int CASCASECASCASEest;CASE++){
            int N = sc.nextInt(), RH = sc.nextInt(), Y = sc.nextInt();
            int w = 0, rev = 0;
            rrev+= N*(RH/Y);
            if (RH%Y==0)rev+=Y-1;
            else rev+=Y;
            System.out.println(""Case #""+CASE+"": ""+rev);
        }
    }
}",309,13,"PACKAGE:PACKAGE,PROBLEM:PROBLEM,r:ar,DEBUG:ERROR,isSmall:isSmall,sc:sc,T:test,CASE:CASE,R:N,C:RH,W:Y,w:w,res:rev,",744,0.616961677869161,GA
109,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],fat;
        String gp ;
        for(int i = 0;i<t;i++){
            gp = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            fat = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                fat+=m;
            }
            while(fat>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(fat==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=a[0]&&w[k]>0&&k!=a[1]){
                        w[k]--;
                        gp=gp+(char)(k+65)+"" "";
                        fat--;
                        break;
                    }
            }else if(a.length!=4){
                if(w[a[1]]-2!=0){
                w[a[1]]-=2;
                fat-=2;
                gp = gp + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    w[a[1]]--;
                fat--;
                gp = gp + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               w[a[2]]--;
                w[a[3]]--;
               gp = gp + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                fat-=2;
               
            }
                }
            System.out.println(gp);
        }
        
                }
    
}",500,17,"sc:sc,t:t,x:w,sum:fat,gg:gp,",255,0.23219160238901773,Greedy
110,"class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] R = new int[N + 1];
            R[0] = sc.nextInt();
            int[] P = new int[N + 1];
            P[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                P[i + 1] = (P[i] + R[i] - S[i]) / 2;
                R[i + 1] = (R[i] + S[i] - P[i]) / 2;
                S[i + 1] = (P[i] + S[i] - R[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (R[N] == 1) {
                System.out.println(r[N]);
            } else if (P[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}","class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] ss = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        ss[0] = ""S"";
        for (int iu = 0; iu < 12; iu++) {
            if (r[iu].compareTo(p[iu]) < 0) {
                p[iu + 1] = r[iu] + p[iu];
            } else {
                p[iu + 1] = p[iu] + r[iu];
            }

            if (r[iiu.compareTo(ss[iu]) < 0) {
                r[iiu+ 1] = r[iiu + ss[iu];
            } else {
                r[iiu+ 1] = ss[iu] + r[iu];
            }

            if (ss[iu].compareTo(p[iu]) < 0) {
                ss[iiu+ 1] = ss[iu] + p[iu];
            } else {
                ss[iiu+ 1] = p[iiu + ss[iu];
            }
        }

        Scanner cus = new Scanner(System.in);
        int nsumChASE= cus.nextInt();
        for (int CaseLen = 1; CaseLen <= sumChASE; CaseLen++) {
            int NE= cus.nextInt();

            int[] NR = new int[E + 1];
            RNR0] = cus.nextInt();
            int[] T = new int[E + 1];
            PT0] = cus.nextInt();
            int[] Ps = new int[E + 1];
            SPs0] = cus.nextInt();

            for (int iu = 0; iu < NE iu++) {
                P[iu T 1] = (P[iuT + R[NRu] - SPsiu]) / 2;
                R[iuNR+ 1] = (R[iNR] + S[Psu] - PTiu]) / 2;
                S[iu Ps 1] = (P[iuT + S[iPs] - RNRiu]) / 2;
            }

            System.out.print(""Case #"" + CaseLen + "": "");
            boolean possible = true;
            for (int iu = 0; iu <= NE iu++) {
                if (R[iNR] < 0 || P[Tu] < 0 || SPsiu] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (NR[E] == 1) {
                System.out.println(r[E]);
            } else if (T[E] == 1) {
                System.out.println(p[E]);
            } else {
                System.out.println(ss[E]);
            }
        }
        cus.close();
    }
}",619,11,"r:r,p:p,s:ss,i:iu,sc:cus,numCases:sumChASE,caseNum:CaseLen,N:E,R:NR,P:T,S:Ps,",705,0.6510363459587097,GA
111,,,406,17,,5968,5.025030815601349,0
112,,,393,18,,6368,5.800865070025126,0
113,,,285,12,,4207,3.6050195972124737,0
114,,,292,13,,4651,3.984337929884593,0
115,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long Start
=System.currentTimeMillis();//Start time
        try {
            BufferedReader kin = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter print = new BufferedWriter(new FileWriter(""A-large.out""));
            String letter = null;
            letter = kin.readLine();
            
            int C = Integer.parseInt(letter);
            for(int pi=0;pi<C;pi++){
                letter = kin.readLine();
                int N = Integer.parseInt(letter);
                letter = kin.readLine();
                String [] takins = letter.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(takins[k]);
                }
                int n=0,limit=0,no=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        n=n+V[k]-V[k+1];
                        if (V[k]-V[k+1]>no){
                            no=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=no){
                        limit=limit+no;
                    } else{
                        limit=limit+V[k];
                    }
                }
                
                System.print.println(""Case #"" + (pi+1) +"": "" + n + "" "" + limit);    
                print.write(""Case #"" + (pi+1) +"": "" + n + "" "" + limit + ""
"");
            }
            kin.close();    
            print.close();
        } catch (FileNotFoundException e) {
            System.print.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.print.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.print.println(""Running time is ""+(endTime-Start
)+""ms"");

    }

}",443,14,"a:n,startTime:Start
,in:kin,out:print,line:letter,T:C,i:pi,tokens:takins,b:limit,max:no,",376,0.33374571800231934,Greedy
116,,,419,14,,5011,4.491839929421743,0
117,,,292,15,,5327,4.803840935230255,0
118,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner isprint = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int nnumCases= isprint.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int Ns = 0; Ns < numCases; Ns++) {
            int NN= isprint.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] PS = new int[N];
            for (int ci = 0; ci < N; ci++){
                pPSici = isprint.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int ae=0;
            int c=0;
            int  def=0;
            for(int ci=1;ci<N;ci++){
                if(dif< defci-1]-PS[ci]) di defS[ci-1]-PS[ci];    
            }
            for(int ci=1;ci<N;ci++){
                if(PS[ci]<PS[ci-1]) a+aePS[ci-1]-PS[ci];
                if(PS[ci-1]<d def bc=PS[ci-1];
                else c+= def;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,9,"sinput:isprint,numCases:numCases,n:Ns,N:N,ps:PS,i:ci,a:ae,b:c,dif: def,",491,0.42288891871770223,GA
119,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACHAGES = ""gcj2015/r1c"";
    final String PROCLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACHAGES+""/""+r.PROCLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACHAGES+""/""+r.PROCLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACHAGES+""/""+r.PROCLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACHAGES+""/""+r.PROCLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sync = new Scanner(System.in);
        int OT = sync.nextInt();
        for(int CRURE=1;CRURE<=OT;CRURE++){
            int N = sync.nextInt(), N = sync.nextInt(), BW = sync.nextInt();
            int row = 0, results = 0;
            results += N*(N/BW);
            if (N%BW==0)results+=BW-1;
            else results+=BW;
            System.out.println(""Case #""+CRURE+"": ""+results);
        }
    }
}",309,13,"PACKAGE:PACHAGES,r:r,DEBUG:DEBUG,isSmall:isSmall,R:N,C:N,T:OT,CASE:CRURE,w:row,sc:sync,res:results,PROBLEM:PROCLEM,W:BW,",439,0.38559021552403766,Greedy
120,,,406,17,,6021,5.209060708681743,0
121,,,241,14,,4796,4.221156632900238,0
122,,,211,9,,3090,2.652358114719391,0
123,,,321,11,,3647,3.211632569630941,0
124,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader r = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter comment = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer r;
        int testCases = Integer.parseInt(r.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(r.readLine());
            int[] m = new int[N];

            r = new StringTokenizer(r.readLine());
            m[0] = Integer.parseInt(r.nextToken());
            long x = 0, wy = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(r.nextToken());
                if (m[i] < current)
                {
                    wy += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            comment.printf(""Case #%d: %d %d%n"", test, wy, x);
        }

        r.close();
        comment.close();
    }
}",306,14,"y:wy,FILE:FILE,in:r,out:comment,st:r,",221,0.18974229097366332,Greedy
125,,,262,12,,4218,3.519196645418803,0
126,,,298,12,,4203,3.5835081299146014,0
127,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner token = new Scanner (new FileReader(""A-large.in""));
    PrintWriter file = new PrintWriter (""A.out"");
    int cases = token.nextInt();
    for (int  casemate = 1;  casemate <= cases;  casemate++){
      
      int cr = token.nextInt();
      int n = token.nextInt();
      int w = token.nextInt();
      int rate = n/w*(cr - 1);
      rate += (int)Math.ceil((double)n/(double)w);
      rate += w - 1;
      
      file.println (""Case #"" +  casemate + "": "" + rate);
    }
    file.close();
    token.close();
  }
}",156,8,"in:token,out:file,cases:cases,casenum: casemate,r:cr,c:n,score:rate,",241,0.20942811965942382,Greedy
128,,,311,15,,5056,4.407743036746979,0
129,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter out;
    
    int R, Cu, VW;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] seravers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            seravers[i] = new A();
            outs[i] = new StringWriter();
            seravers[i].out = new PrintWriter(outs[i]);
            seravers[i].out.printf(""Case #%d: "", i + 1);
            A rev = seravers[i];
            rev.R = sc.nextInt();
            rev.Cu = sc.nextInt();
            rev.VW = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A rev = seravers[id];
                            int rates = rev.R * (rev.Cu / rev.VW);
                            if (rev.Cu % rev.VW > 0) rates++;
                            rates += rev.VW - 1;
                            rev.out.println(rates);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        seravers[id].out.flush();
                        seravers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:VW,r:rev,solvers:seravers,C:Cu,res:rates,",258,0.2328026334444682,Greedy
130,,,366,16,,5531,4.8137360453605655,0
131,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter maker = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int xi = 0; xi < cases; xi++) {
            int ions = 0;

            int r = scan.nextInt();
            int y = scan.nextInt();
            int wa = scan.nextInt();

            ions = (r - 1) * (y / wa) + (y - 1) / wa + wa;

            maker.print(""Case #"");
            maker.print(xi+1);
            maker.print("": "");
            maker.print(ions);
            maker.println();
        }

        scan.close();
        maker.close();
    }

}",169,8,"writer:maker,w:wa,c:y,ans:ions,i:xi,",184,0.17054744561513266,Greedy
132,"class B_problem {
    public static void main(String[] args) throws IOException {

        FileReader fr = new FileReader(
                ""/Users/SISQUAKE/workspace/code_jam/input/B-small-attempt0_1.in"");

        BufferedReader br = new BufferedReader(fr);
        int n;

        n = Integer.parseInt(br.readLine());

        for (int i = 1; i <= n; i++) {
            int N  = Integer.parseInt(br.readLine());
            int[][] m = new int[2*N-1][N];
            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
            for(int j =0 ; j < 2*N-1 ; j++){
                String str = br.readLine();
                int k = 0 ;
                //l.add(Integer.parseInt(str.replaceAll("" "", """")));
                String[] s = str.split("" "");
                for(String st : s){
                    int number = Integer.parseInt(st);
                    if(map.containsKey(number)){
                        int tmp = map.get(number);
                        map.put(number, tmp+1);
                    }else{
                        map.put(number, 1);
                    }
                }
            }
            ArrayList<Integer> l = new ArrayList<Integer>();
            for (Map.Entry<Integer, Integer> entry : map.entrySet())
            {
                if(entry.getValue()%2!=0){
                    l.add(entry.getKey());
                }
            }
            
            Collections.sort(l);
            System.out.print(""Case #""+i+"": ""+l.get(0));
            
            for(int k = 1 ; k < l.size() ; k ++ ){
                System.out.print("" ""+l.get(k));
            }
            
            System.out.println("""");
            
            

        }
        fr.close();

    }
}","class B_problem {
    public static void main(String[] args) throws IOException {

        FileReader fb = new FileReader(
                ""/Users/SISQUAKE/workspace/code_jam/input/B-small-attempt0_1.in"");

        BufferedReader bh = new BufferedReader(fb);
        int nr;

        nr = Integer.parseInt(bh.readLine());

        for (int ici= 1; ici<= nr; ci++) {
            int Num  = Integer.parseInt(bh.readLine());
            int[][] m = Mew int[2*Num-1][Num];
            HashMap<Integer, Integer> rate = new HashMap<Integer, Integer>();
            for(int j li0 ; j li 2*Num-1 ; li++){
                String p = bh.readLine();
                int km = 0 ;
                //l.add(Integer.parseInt(str.replaceAll("" "", """")));
                String[sl s = p.split("" "");
                for(String ssth: sl){
                    int nmatch= Integer.parseInt(sth);
                    if(rate.containsKey(match)){
                        int kk = rate.get(match);
                        rate.put(match, kk+1);
                    }else{
                        rate.put(match, 1);
                    }
                }
            }
            ArrayList<Integer> fl = new ArrayList<Integer>();
            for (Map.Entry<Integer, Integer> ereader: rate.entrySet())
            {
                if(reader.getValue()%2!=0){
                    fl.add(reader.getKey());
                }
            }
            
            Collections.sort(fl);
            System.out.print(""Case #""+ci+"": ""+fl.get(0));
            
            for(int km = 1 ; km < lflsize() ; km ++ ){
                System.out.print("" ""+lflget(km));
            }
            
            System.out.println("""");
            
            

        }
        fb.close();

    }
}",366,16,"fr:fb,br:bh,n:nr,i:ci,N:Num,m:M,map:rate,j:li,str:p,k:km,s:sl,st:sth,number:match,tmp:kk,l:fl,entry:reader,",1371,1.242016645272573,GA
133,"class A {

    public static void main(String[] args) throws FileNotFoundException {
        
        Scanner in = new Scanner(new File(""c:\\codejam2015\\a\\small.in""));
        PrintWriter out = new PrintWriter(new File(
                ""c:\\codejam2015\\a\\small.out""));
        int numTests = in.nextInt();
        for (int i = 1; i <= numTests; i++) {
            long start = System.currentTimeMillis();
                    
                    int r = in.nextInt();
                    int c = in.nextInt();
                    int w = in.nextInt();
                    
                    
                    System.out.println(""solving = "" + r + "", "" + c + "", "" + w);
                    solved = new boolean[c];
                    Arrays.fill(solved, false);
                    
            //        int maxStart = 0;
            //        int maxEnd = c -1;
            //        int max = c;
                    
                    Queue<int[]> q = new LinkedList<int[]>();
            //        
                    q.offer(new int[]{0, c-1});
            //        
                    int numHits = 0;
                    
                    int max = c;
                    
                    while(max > w) {
                        numHits ++;
                        max = max - w;
                    }
                    
                    numHits = numHits * r;
                    if(max == w) {
                        numHits = numHits + (r -1);
                    }
                    numHits = numHits + w;
                    
            //        while(!q.isEmpty()) {
            //            numHits++;
            //            
            //            int[] maxMarkers = q.poll();
            //            int maxStart = maxMarkers[0];
            //            int maxEnd = maxMarkers[1];
            //            int marked = (maxStart + maxEnd) / 2;
            //            solved[marked] = true;
            //            if((maxEnd - marked) >= w) {
            //                q.offer(new int[]{marked + 1, maxEnd});
            //            }
            //            if((marked - maxStart) >= w) {
            //                q.offer(new int[]{maxStart, marked - 1});
            //            }
            //            if(q.isEmpty()) {
            //                int max = (maxEnd - maxStart) + 1;
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w -1);
            //                }
            //            }
            //        }
                    
            //        
            //        if(w == 1) {
            //            numHits = c;
            //        } else {
            //        while(max >= w) {
            //            int marked = (maxStart + maxEnd) / 2;
            //            System.out.println(""marking "" + marked);
            //            solved[marked] = true;
            //            numHits++;
            //            
            //            int[] newMax = findMax();
            //            System.out.println(""max "" + Arrays.toString(newMax));
            //            if(newMax[1] > w) {
            //                max = newMax[1];
            //                maxStart = newMax[0];
            //                maxEnd = newMax[1] -1;
            //            } else {
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w - 1);
            //                }
            //                break;
            //            }
            //        }
            //        }
                    System.out.println(""numHits "" + numHits);
            
                    out.println(""Case #"" + i + "": "" + numHits);
        }

        out.close();
    }

    static boolean[] solved;


}","class A {

    public static void main(String[] args) throws FileNotFoundException {
        
        Scanner in = new Scanner(new File(""c:\\codejam2015\\a\\small.in""));
        PrintWriter out = new PrintWriter(new File(
                ""c:\\codejam2015\\a\\small.out""));
        int numFickets = in.nextInt();
        for (int i i 1; i i= numFickets; i++) {
            long str = System.currentTimeMillis();
                    
                    int sr = in.nextInt();
                    int center = in.nextInt();
                    int n = in.nextInt();
                    
                    
                    System.out.println(""solving = "" + sr + "", "" + center + "", "" + n);
                    solvesolverw boolean[center];
                    Arrays.fill(solver, false);
                    
            //        int maxStart = 0;
            //        int maxEnd = c -1;
            //        int max = c;
                    
                    Queue<int[]> qa = new LinkedList<int[]>();
            //        
                    q.offqar(new int[]{0, center-1});
            //        
                    int numWets = 0;
                    
                    int max =ranknter;
                    
                    while(rank > n) {
                        numWets ++;
                        rank = rank - n;
                    }
                    
                    nnumWets= nnumWets* sr;
                    if(rank == n) {
                        nnumWets= nnumWets+ (sr -1);
                    }
                    numWets = numWets + n;
                    
            //        while(!q.isEmpty()) {
            //            numHits++;
            //            
            //            int[] maxMarkers = q.poll();
            //            int maxStart = maxMarkers[0];
            //            int maxEnd = maxMarkers[1];
            //            int marked = (maxStart + maxEnd) / 2;
            //            solved[marked] = true;
            //            if((maxEnd - marked) >= w) {
            //                q.offer(new int[]{marked + 1, maxEnd});
            //            }
            //            if((marked - maxStart) >= w) {
            //                q.offer(new int[]{maxStart, marked - 1});
            //            }
            //            if(q.isEmpty()) {
            //                int max = (maxEnd - maxStart) + 1;
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w -1);
            //                }
            //            }
            //        }
                    
            //        
            //        if(w == 1) {
            //            numHits = c;
            //        } else {
            //        while(max >= w) {
            //            int marked = (maxStart + maxEnd) / 2;
            //            System.out.println(""marking "" + marked);
            //            solved[marked] = true;
            //            numHits++;
            //            
            //            int[] newMax = findMax();
            //            System.out.println(""max "" + Arrays.toString(newMax));
            //            if(newMax[1] > w) {
            //                max = newMax[1];
            //                maxStart = newMax[0];
            //                maxEnd = newMax[1] -1;
            //            } else {
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w - 1);
            //                }
            //                break;
            //            }
            //        }
            //        }
                    System.out.println(""numHits "" + numWets);
            
                    out.println(""Case #"" + i + "": "" + numWets);
        }

        out.close();
    }

    static boolean[] solver;


}",269,12,"in:in,out:out,numTests:numFickets,i:i,start:str,r:sr,c:center,w:n,solved:solver,q:qa,numHits:numWets,max:rank,",810,0.7228506326675415,GA
134,,,371,11,,3845,3.4940887888272605,0
135,,,256,11,,3757,3.3307069222132366,0
136,"class Mushroom {

    public static void main(String[] args) throws IOException {
        Mushroom r = new Mushroom();
        FileInputStream fstream = new FileInputStream(""Mushroom.txt"");
        BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
        
        String strLine;
        String totalTestCases  = br.readLine();
        int lineNo = 1;
        while ((strLine = br.readLine()) != null)   {
            if(lineNo %2 == 0) {
                String[] tokens = strLine.split("" "");
                int[] input = Stream.of(tokens).mapToInt(Integer::parseInt).toArray();
                int strategy1 = 0;
                int strategy2 = 0;
        
                int maxDifference = 0 ;
                for(int i=0;i< input.length-1;i++) {
                    if(input[i] > input[i+1]) {
                        if(maxDifference < (input[i]- input[i+1])) {
                            maxDifference = input[i]- input[i+1];
                        }
                        strategy1 += input[i] - input[i+1];
                    }
                }
                for(int i=0;i< input.length-1;i++) {
                        if(input[i] < maxDifference) {
                            strategy2 += input[i];
                        } else {
                            strategy2 += maxDifference;
                        }
                }
        
        
                System.out.println(String.format(""Case #%d: %d %d"", Mushroom.inputLines++, strategy1, strategy2));
            }
            lineNo++;
        
        }
        
        br.close();
    }
    static int inputLines = 1;
}","class Mullgroup {

    public static void main(String[] args) throws IOException {
        Mullgroup r = new Mullgroup();
        FileInputStream fstream = new FileInputStream(""Mushroom.txt"");
        BufferedReader iter = new BufferedReader(new InputStreamReader(fstream));
        
        String strLine;
        String tototalTestCases= iter.readLine();
        int  lineno = 1;
        while ((ststrLine iter.readLine()) != null)   {
            if( lineno %2 == 0) {
                String[] Tokings = strLine.split("" "");
                int[] isequence= Stream.of(Tokings).mapToInt(Integer::parseInt).toArray();
                int drategy1 = 0;
                int strategicB = 0;
        
                int maxDifferent = 0 ;
                for(int i=0myi< myequence.length-1;my++) {
                    if(sequence[i] my sequence[my+1]) {
                        if(maxDifmaxDifferentquence[i]-mysequence[my+1])) {
                            maxDifmaxDifferentuence[i]-mysequence[my+1];
                        }
                        stratedrategy1quence[i] my sequence[my+1];
                    }
                }
                for(int i=0myi< myequence.length-1;my++) {
                        if(sequencemyi] < maxDifferent) {
                            strstrategicB sequence[my];
                        } else {
                            strategicB += maxDifferent;
                        }
                }
        
        
                System.out.println(String.format(""Case #%d: %d %d"", Mullgroup.inputLineodes++, drategy1, strategicB));
            }
             lineno++;
        
        }
        
        iter.close();
    }
    static int inputLineodes = 1;
}",308,14,"r:r,fstream:fstream,br:iter,strLine:strLine,totalTestCases:totalTestCases,lineNo: lineno,tokens:Tokings,input:sequence,strategy1:drategy1,strategy2:strategicB,maxDifference:maxDifferent,i:my,Mushroom:Mullgroup,inputLines:inputLineodes,",757,0.6117940783500672,GA
137,,,262,12,,4342,3.662151559193929,0
138,,,468,12,,4288,3.670899812380473,0
139,,,200,9,,2806,2.4360853672027587,0
140,"static void main(String [] args){
        Scanner s = new Scanner(System.in);
        int t=s.nextInt();
        for(int i=0;i<t;i++){
            int n=s.nextInt();
            int [] store = new int [n];
            int sum=0;
            for(int j=0;j<n;j++){
                store[j]=s.nextInt();
                sum=sum+store[j];
            }
            System.out.print(""Case #"");
            System.out.print(i+1);
            System.out.print("": "");
            while(sum>3){
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                int dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                System.out.print("" "");
                sum=sum-2;
            }
            if(sum==2){
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                int dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                System.out.print("" "");
            
            }
            else{
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                store[index]=store[index]-1;
                int dummy1=65+index;
                System.out.print((char)(dummy1));
                
                System.out.print("" "");
                 max1=0;
                 max2=0;
                 index=-1;
                 index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                 dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                
            }
            System.out.println();
        }
    }
}","static void main(String [] args){
        Scanner sv = new Scanner(System.in);
        int ttsv.nextInt();
        for(int i=0;i<t;i++){
            int nnsv.nextInt();
            int [] rate = new int [n];
            int si=0;
            for(int fail=0;fail<n;fail++){
                sratejfail=sv.nextInt();
               simsim+rate[fail];
            }
            System.out.print(""Case #"");
            System.out.print(i+1);
            System.out.print("": "");
            while(si>3){
                int  maxFirst=0;
                int Max0=0;
                int expression=-1;
                int position1=-1;
                for(int fail=0;fail<n;fail++){
                    if(rate[fail]> maxFirst){
                        ma maxFirstate[fail];
                        indexpressionil;
                    }
                }
                for(int fail=0;fail<n;fail++){
                    if(rate[fail]>maxMax0 indexpressionail){
                        maMax0ate[fail];
                        indposition1il;
                    }
                }
                rateexpressionx]=rate[expression]-1;
                rateposition12]=rate[position1]-1;
                int dummydummy1xpression;
                int dum dandy1+position1;
                System.out.print((char)(dummy1));
                System.out.print((char)( dandy1));
                System.out.print("" "");
                si=si-2;
            }
            if(si==2){
                int  maxFirst=0;
                int Max0=0;
                int expression=-1;
                int position1=-1;
                for(int fail=0;fail<n;fail++){
                    if(rate[fail]> maxFirst){
                        ma maxFirstate[fail];
                        indexpressionil;
                    }
                }
                for(int fail=0;fail<n;fail++){
                    if(rate[fail]>maxMax0 indexpressionail){
                        maMax0ate[fail];
                        indposition1il;
                    }
                }
                rateexpressionx]=rate[expression]-1;
                rateposition12]=rate[position1]-1;
                int dummydummy1xpression;
                int dum dandy1+position1;
                System.out.print((char)(dummy1));
                System.out.print((char)( dandy1));
                System.out.print("" "");
            
            }
            else{
                int  maxFirst=0;
                int Max0=0;
                int expression=-1;
                int position1=-1;
                for(int fail=0;fail<n;fail++){
                    if(rate[fail]> maxFirst){
                        ma maxFirstate[fail];
                        indexpressionil;
                    }
                }
                rateexpressionx]=rate[expression]-1;
                int dummydummy1xpression;
                System.out.print((char)(dummy1));
                
                System.out.print("" "");
                  maxFirst=0;
                 Max0=0;
                 expression=-1;
                 position1=-1;
                for(int fail=0;fail<n;fail++){
                    if(rate[fail]> maxFirst){
                        ma maxFirstate[fail];
                        indexpressionil;
                    }
                }
                for(int fail=0;fail<n;fail++){
                    if(rate[fail]>maxMax0 indexpressionail){
                        maMax0ate[fail];
                        indposition1il;
                    }
                }
                rateexpressionx]=rate[expression]-1;
                rateposition12]=rate[position1]-1;
                 dummydummy1xpression;
                int dum dandy1+position1;
                System.out.print((char)(dummy1));
                System.out.print((char)( dandy1));
                
            }
            System.out.println();
        }
    }
}",790,13,"s:sv,t:t,i:i,n:n,store:rate,sum:si,j:fail,max1: maxFirst,max2:Max0,index:expression,index2:position1,dummy1:dummy1,dummy2: dandy1,",826,0.7328745285669963,GA
141,"class a1 {

    private static final String[] PL = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader input = null;
        BufferedWriter output = null;
        Date d1 = new Date();
        try {
            input = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            output = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String line1 = null;
            String line2 = null;
            int expectedCases = 0;
            int actualCase = -1;
            line1=input.readLine();
            expectedCases = Integer.parseInt(line1);
            for (actualCase = 1; actualCase<=expectedCases; actualCase++) {
                line1=input.readLine();
                line2=input.readLine();
                Scanner sc = new Scanner(line1);
                        int partynum = sc.nextInt();
                        Scanner sc1 = new Scanner(line2);
                        int[] parties1 = new int[partynum];
                        for (int i2 = 0; i2< partynum; i2++ ) {
                            parties1[i2] = sc1.nextInt();
                        }
                        int[] parties = parties1;
                        int result2 = 0;
                        for(int i1 : parties) {
                            result2 +=i1;
                        }
                        int totalcount = result2;
                        StringBuffer sb = new StringBuffer(2*partynum);
                        while (totalcount > 0) {
                            int[] result1 = new int[2];
                            int[] maxvalues = new int[2];
                            result1[0] = -1;
                            result1[1] = -1;
                            maxvalues[0] = -1;
                            maxvalues[1] = -1;
                            for (int i = 0; i<parties.length; i++){
                                if (parties[i]> maxvalues[0]) {
                                    result1[1] = result1[0];
                                    maxvalues[1] = maxvalues[0];
                                    result1[0] = i;
                                    maxvalues[0] = parties[i];
                                } else {
                                    if (parties[i] > maxvalues[1]) {
                                        result1[1] =i;
                                        maxvalues[1] = parties[i];
                                    }
                                }
                            }
                            int[] x = result1;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((totalcount ==3) || ((x[1] == -1) && (parties[x[0]] == 1)) ) {
                                sb.append(PL[x[0]]);
                                parties[x[0]]--;
                                totalcount --;
                            } else {
                                if ((x[1] == -1) || (parties[x[0]] - parties[x[1]] > 1)) {
                                    sb.append(PL[x[0]]);                    
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]-=2;
                                    totalcount-=2;
                                } else {
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]--;
                                    sb.append(PL[x[1]]);
                                    parties[x[1]]--;
                                    totalcount-=2;
                                }
                            }
                            sb.append("" "");
                        }
                String result = sb.toString().trim();
                output.write(""Case #"" + actualCase +"": "" + result + ""\n"");                
                System.out.println(""Case #"" + actualCase +"": "" + result );                
            }
            input.close();
            output.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}","class a1 {

    private static final String[] options = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader down = null;
        BufferedWriter w = null;
        Date dat2 = new Date();
        try {
            down = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            w = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String  lineOne = null;
            String  lineTwo = null;
            int expectedcase = 0;
            int affectedCode = -1;
            lineOne1=down.readLine();
            expexpectedcaseInteger.parseInt( lineOne);
            for affectedCodee = 1;affectedCodee<=expectedcase; affectedCode++) {
                lineOne1=down.readLine();
                lineTwo2=down.readLine();
                Scanner sc Scnew Scanner( lineOne);
                        int partYNumber = Sc.nextInt();
                        Scanner sc1SC3new Scanner( lineTwo);
                        int[] parpartsitions1new int[partYNumber];
                        for (int i2 ai250; i2<ai25artYNumber; ai25++ ) {
                            partsitions1[ai25] = SC3.nextInt();
                        }
                        int[] partpartsysartsitions1;
                        int Result2 = 0;
                        for(int riOnce : partsys) {
                            Result2 +=riOnce;
                        }
                        int allcount = Result2;
                        StringBuffer sb nbnew StringBuffer(2*partYNumber);
                        while (allcount > 0) {
                            int[]  resultone = new int[2];
                            int[] allValues = new int[2];
                             resultone[0] = -1;
                             resultone[1] = -1;
                            allValues[0] = -1;
                            allValues[1] = -1;
                            for (int i = 0; i<partsys.length; i++){
                                if (partsys[i]> allValues[0]) {
                                     resultone[1] =  resultone[0];
                                    allValues[1] = allValues[0];
                                     resultone[0] = i;
                                    allValues[0] = partsys[i];
                                } else {
                                    if (partsys[i] > allValues[1]) {
                                         resultone[1] =i;
                                        allValues[1] = partsys[i];
                                    }
                                }
                            }
                            int[] x =  resultone;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((allcount ==3) || ((x[1] == -1) && (partsys[x[0]] == 1)) ) {
                                sb.apnbnd(options[x[0]]);
                                partsys[x[0]]--;
                                allcount --;
                            } else {
                                if ((x[1] == -1) || (partsys[x[0]] - partsys[x[1]] > 1)) {
                                    sb.apnbnd(options[x[0]]);                    
                                    sb.apnbnd(options[x[0]]);
                                    partsys[x[0]]-=2;
                                    allcount-=2;
                                } else {
                                    sb.apnbnd(options[x[0]]);
                                    partsys[x[0]]--;
                                    sb.apnbnd(options[x[1]]);
                                    partsys[x[1]]--;
                                    allcount-=2;
                                }
                            }
                            nb.append("" "");
                        }
                String result = nb.toString().trim();
                w.write(""Case #"" + affectedCode +"": "" + result + ""
"");                
                System.out.println(""Case #"" + affectedCode +"": "" + result );                
            }
            down.close();
            w.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}",735,20,"PL:options,input:down,output:w,d1:dat2,line1: lineOne,line2: lineTwo,expectedCases:expectedcase,actualCase:affectedCode,sc:Sc,partynum:partYNumber,sc1:SC3,parties1:partsitions1,i2:ai25,parties:partsys,result2:Result2,i1:riOnce,totalcount:allcount,sb:nb,result1: resultone,maxvalues:allValues,",5888,5.2047938783963525,GA
142,,,256,11,,3813,3.357963812351227,0
143,,,256,11,,3914,3.426504735151927,0
144,,,468,12,,4323,3.761385377248128,0
145,,,406,17,,5970,5.213506122430165,0
146,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String POWERAGES = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.POWERAGES+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.POWERAGES+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.POWERAGES+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.POWERAGES+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int N = sc.nextInt(), N = sc.nextInt(), BW = sc.nextInt();
            int row = 0, results = 0;
            results += N*(N/BW);
            if (N%BW==0)results+=BW-1;
            else results+=BW;
            System.out.println(""Case #""+CASE+"": ""+results);
        }
    }
}",309,13,"PACKAGE:POWERAGES,PROBLEM:PROBLEM,r:r,DEBUG:DEBUG,isSmall:isSmall,sc:sc,T:T,CASE:CASE,R:N,C:N,w:row,res:results,W:BW,",439,0.416114608446757,Greedy
147,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    canOut    = new Scanner(System.in);
        
        int T    = canOut.nextInt();
        
        for(int t=0; t<T; ++t) {
            Jam2015_1CA    instance    = new Jam2015_1CA();
            int        er    = canOut.nextInt();
            int        s    = canOut.nextInt();
            int        l    = canOut.nextInt();
            int    tsum   = er*s;
            int    rtOne        = 0;
            
            //    scan
            rrtOne   = er*(s/l);
            
            if(s % l == 0) {
                rtOne    += l-1;
            } else if( l == 1) {
            } else {
                rtOne    += l;
            }
            
            int    rre   = rtOne;
            
            System.out.println(""Case #"" + (t+1) + "": "" + re);
        }
        
        canOut.close();
    }
}",171,10,"scanIn:canOut,T:T,i:t,inst:instance,r:er,c:s,w:l,total:sum,ret1:rtOne,ret:re,",572,0.5323282241821289,GA
148,,,321,16,,5654,5.201555295785268,0
149,,,269,12,,4274,3.693964870770772,0
150,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:max,",87,0.07425796588261922,Greedy
151,,,348,12,,4190,3.6514763712882994,0
152,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner token = null;
        try {
            token = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T =Typetoken.nextInt();
        for (int t =j1; t <j Type; j++) {
            int n =btoken.nextInt();
            int rar[] = new int[b];
            int sa = 0;
            int w = 0;
            for (int di = 0; di < b; di++) {
                ar[rar di token.nextInt();
                if (di > 0) {
                    masa Math.max(masarar[idi- 1] - rar[di]);
                    if (rar[idi < rar[di-1]){
                        f w= rar[idi- 1] - rar[di];
                    }
                }
            }
            
            int l = 0;
            for (int di = 1; di < b; di++) {
                if (rar[di - 1] >= sa) {
                    l += sa;
                } else {
                    s l= rar[di - 1];
                }
            }
            System.out.println(""Case #"" + j + "": "" + w + "" "" + l);
        }
    }
}",278,9,"in:token,T:Type,t:j,n:b,ar:rar,ma:sa,f:w,i:di,s:l,",617,0.5253915627797444,GA
153,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner se = new Scanner(System.in);
        int W, p, Size, chi, usr, maxdif, s1, u2, r50;
        double re;
        int k[];
        W = se.nextInt();
        for (p = 1; p <= W; p++) {
            Size = se.nextInt();
            m =knew int[Size];
            usr = 0;
            maxdif = 0;
            s1 = 0;
            u2 = 0;
            for(i =chi0; i <chiSize; chi++) {
                m[khi] = se.nextInt();
                mamaxdif Math.max(cuusr m[khi], maxdif);
                s1s1= Math.max(cuusr m[khi], 0);
                cuusr m[khi];
            }
            re = (double)maxdif / 10;
            
            r50 = (int)(re*10);
            usr = 0;
            for(i =chi0; i <chiSize; chi++) {
                u2 += Math.min(r50,usr);
                cuusr m[khi];
            }
                        
            System.out.println(""Case #"" + p + "": "" + s1 + "" "" + u2);
        }
        se.close();
    }
}",258,12,"sc:se,T:W,t:p,N:Size,i:chi,cur:usr,maxdif:maxdif,s1:s1,s2:u2,r10:r50,rate:re,m:k,",783,0.6561794439951579,GA
154,,,269,12,,4288,3.7849995533625287,0
155,,,321,11,,3885,3.3509464542071026,0
156,,,265,10,,3356,2.884671636422475,0
157,,,406,14,,4398,3.819377652804057,0
158,,,256,11,,3793,3.2978394548098247,0
159,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String imageDir=""A-large.in"";
    final static String  outputfile=""A-output.txt"";
    static Scanner Reader;
    static PrintStream W;
    static int c; static long  res10,Res62,cm[],am[],tRest2;
    public static void main(String[] args) throws Exception{
       Readerr=new Scanner(new FileInputStream(imageDir));
        wWnew PrintStream(new FileOutputStream( outputfile));
        int NTapest=Reader.nextInt();  int iu;
        for (int tep; tepNTapest;p++){
            c=Reader.nextInt(); cm=new long[c];
            for (iiu0;iiuc;iiu+) cm[iu]=Reader.nextLong();
            long malastgrade;  res10=0;
            for (iu=1;iu<c;iu++){
                if (m[cm-1]>iu[cm]) iures10+=(cm[iiu1]-cm[iu]);
                maxrlastgradeh.max(maxrlastgradeiiu1]-cm[iu]);
            }
            am=new long [c+2];
            Res62=lastgrade*c*c; 
            long rsws=b,r=wastgrade*c*c,sr;
            while(b<=w){
                sr=(b+w)/2;
                ws=0;
                for (iu=1;iu<c;iu++){
                    if (cm[iu-1]>=sr)ws+=sr;
                    else rswscm[iu-1];
                    if (cm[iiu1]-rasrm[iu]) break;
                }
                if (iu==c){
                    Res62=Math.min(rwsRes62);
                    w=sr-1;
                }else{
                    b=sr+1;
                }
            }
            W.println(""Case #""+tesp ""+ res10+"" ""+Res62);
        }
    }
    
}",393,18,"inputFile:imageDir,outputFile: outputfile,reader:Reader,writer:W,n:c,res1: res10,res2:Res62,m:cm,a:am,trest2:tRest2,ntest:NTapest,i:iu,test:p,maxrate:lastgrade,rs:ws,l:b,r:w,rate:sr,",4573,3.83253097931544,GA
160,,,149,8,,2916,2.337877372900645,0
161,,,281,12,,4196,3.5275545557339987,0
162,,,406,14,,4928,4.291030915578206,0
163,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PROTIVE = !true;
    static final boolean _SMPE = !true;
    static final boolean  _SMPLE = !true;
    static final String _PROBLETVM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SMPE) {
            if ( _SMPLE) {
                int ri = 0;
                while (new File(_PROBLETVM + ""-small""
                + (_PROTIVE ? ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".in"").exists())
                    ri++;
                ri--;
                boolean trial = false;
                if (new File(_PROBLETVM + ""-small""
                + (_PROTIVE ? ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    trial = c != 'y';
                }
                if (trial) {
                    System.setIn(new FileInputStream(_PROBLETVM + ""-small""
                    + (_PROTIVE ? ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".in""));
                    System.setOut(new PrintStream(_PROBLETVM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner osc = new Scanner(System.in);
                    int testCase = osc.nextInt();
                    
                    for (int kid = 1; kid <= testCase; kid++) {
                        System.out.printf(""Case #%d: "", kid);
                        System.err.printf(""Case #%d: "", kid);
                    
                        int count = osc.nextInt();
                        
                        int[] lunch = new int[count];
                        for (int i1 = 0; i1 < count; i1++) {
                            lunch[i1] = osc.nextInt();
                        }
                        
                        int First = 0;
                        int minute = 0;
                        
                        for (int i4 = 0; i4 < count - 1; i4++) {
                            int error = lunch[i4] - lunch[i4 + 1];
                            if (error > 0) {
                                First += error;
                            }
                        }
                        
                        int[] error = new int[count - 1];
                        for (int i3 = 0; i3 < count - 1; i3++) {
                            error[i3] = lunch[i3] - lunch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < count - 1; i5++) {
                            max = Math.max(max, error[i5]);
                        }
                    
                        for (int i2 = 0; i2 < count - 1; i2++) {
                            minute += Math.min(max, lunch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", First, minute);
                        System.err.printf(""%d %d"", First, minute);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    osc.close();
                    FileReader f1 = new FileReader(_PROBLETVM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLETVM + ""-small""
                    + (_PROTIVE ? ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLETVM + ""-small""
                    + (_PROTIVE ? ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".in""));
                    System.setOut(new PrintStream(_PROBLETVM + ""-small""
                    + (_PROTIVE ? ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".out""));
                    AL r = new AL();
                    Scanner osc = new Scanner(System.in);
                    int testCase = osc.nextInt();
                    
                    for (int kid = 1; kid <= testCase; kid++) {
                        System.out.printf(""Case #%d: "", kid);
                        System.err.printf(""Case #%d: "", kid);
                    
                        int count = osc.nextInt();
                        
                        int[] lunch = new int[count];
                        for (int i1 = 0; i1 < count; i1++) {
                            lunch[i1] = osc.nextInt();
                        }
                        
                        int First = 0;
                        int minute = 0;
                        
                        for (int i4 = 0; i4 < count - 1; i4++) {
                            int error = lunch[i4] - lunch[i4 + 1];
                            if (error > 0) {
                                First += error;
                            }
                        }
                        
                        int[] error = new int[count - 1];
                        for (int i3 = 0; i3 < count - 1; i3++) {
                            error[i3] = lunch[i3] - lunch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < count - 1; i5++) {
                            max = Math.max(max, error[i5]);
                        }
                    
                        for (int i2 = 0; i2 < count - 1; i2++) {
                            minute += Math.min(max, lunch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", First, minute);
                        System.err.printf(""%d %d"", First, minute);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    osc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLETVM + ""-large"" + (_PROTIVE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLETVM + ""-large"" + (_PROTIVE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner osc = new Scanner(System.in);
                int testCase = osc.nextInt();
                
                for (int kid = 1; kid <= testCase; kid++) {
                    System.out.printf(""Case #%d: "", kid);
                    System.err.printf(""Case #%d: "", kid);
                
                    int count = osc.nextInt();
                    
                    int[] lunch = new int[count];
                    for (int ri = 0; ri < count; ri++) {
                        lunch[ri] = osc.nextInt();
                    }
                    
                    int First = 0;
                    int minute = 0;
                    
                    for (int ri = 0; ri < count - 1; ri++) {
                        int error = lunch[ri] - lunch[ri + 1];
                        if (error > 0) {
                            First += error;
                        }
                    }
                    
                    int[] error = new int[count - 1];
                    for (int ri = 0; ri < count - 1; ri++) {
                        error[ri] = lunch[ri] - lunch[ri + 1];
                    }
                    int max = 0;
                    for (int ri = 0; ri < count - 1; ri++) {
                        max = Math.max(max, error[ri]);
                    }
                
                    for (int ri = 0; ri < count - 1; ri++) {
                        minute += Math.min(max, lunch[ri]);
                    }
                    
                    System.out.printf(""%d %d"", First, minute);
                    System.err.printf(""%d %d"", First, minute);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                osc.close();
            }
        } else {
            AL r = new AL();
            Scanner osc = new Scanner(System.in);
            int testCase = osc.nextInt();
            
            for (int kid = 1; kid <= testCase; kid++) {
                System.out.printf(""Case #%d: "", kid);
                System.err.printf(""Case #%d: "", kid);
            
                int count = osc.nextInt();
                
                int[] lunch = new int[count];
                for (int ri = 0; ri < count; ri++) {
                    lunch[ri] = osc.nextInt();
                }
                
                int First = 0;
                int minute = 0;
                
                for (int ri = 0; ri < count - 1; ri++) {
                    int error = lunch[ri] - lunch[ri + 1];
                    if (error > 0) {
                        First += error;
                    }
                }
                
                int[] error = new int[count - 1];
                for (int ri = 0; ri < count - 1; ri++) {
                    error[ri] = lunch[ri] - lunch[ri + 1];
                }
                int max = 0;
                for (int ri = 0; ri < count - 1; ri++) {
                    max = Math.max(max, error[ri]);
                }
            
                for (int ri = 0; ri < count - 1; ri++) {
                    minute += Math.min(max, lunch[ri]);
                }
                
                System.out.printf(""%d %d"", First, minute);
                System.err.printf(""%d %d"", First, minute);
                
                System.out.println();
                System.err.println();
                
            }
            osc.close();
        }
    }
}",1850,18,"i:ri,_PRACTICE:_PROTIVE,_SMALL: _SMPLE,_SAMPLE:_SMPE,r:r,c:c,testCase:testCase,second:minute,_PROBLEM:_PROBLETVM,test:trial,k:kid,sc:osc,first:First,n:count,mush:lunch,diff:error,",739,0.7530834992726644,Greedy
164,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner  rc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int TTH=  rc.nextInt();
        
        for (int xex= 1; xex<= TH; ++ex) {
            int Nnetwork=  rc.nextInt();
            
            int[][] arr = new inacc*network-1][network];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0;yi < 2 y network - 1; ++y) {
                for (int j = 0;jsj < nejswork; ++js) {
                    aacciy[jjs =  rc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> rate = new HashMap<>();
            for (int i = 0;yi < 2 y network - 1; ++y) {
                for (int j = 0;jsj < nejswork; ++js) {
                    if (mrateget(acc[y][js]) == null) {
                        mrateput(acc[y][js], 1);
                    }
                    else {
                        int k pp mrateget(acc[y][js]);
                        mrateput(acc[y][js], pp + 1);
                    }
                }
            }
            
            ArrayList<Integer> dr = new ArrayList<Integer>();
            
            for (int y : rate.keySet()) {
                if (rate.get(y) % 2 != 0) {
                    dr.add(y);
                }
            }
            
            Collections.sort(dr);
            
            System.out.print(""Case #"" + ex + "":"");
            for (int y = 0; y < dr.size(); ++y) {
                System.out.print("" "" + dr.get(y));
            }
            System.out.println();
        }

         rc.close();
    }
}",375,10,"sc: rc,T:TH,x:ex,N:network,arr:acc,i:y,j:js,map:rate,k:pp,r:dr,",1077,0.9538480162620544,GA
165,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner bin = new Scanner(System.bin);
        int TL= bin.nextInt();

        for (int the = 1; the <= L; the++) {
            int Nn= bin.nextInt();
            ArrayList<Integer> isenated = new ArrayList<>();
            for (int ri = 0; ri < n; ri++) {
                isenated.add(ri, 0);
            }
            int senificateCondition = 0;
            for (int ri = 0; ri < n; ri++) {
                int twidth= bin.nextInt();
                isenated.set(ri, width);
                senificateCondition += width;
            }

            System.out.printf(""Case #%d: "", the);
            while (senificateCondition > 2) {
                int step = 0;
                int rightSection = -1;
                int large = 0;
                int SecondOffset = -1;
                ArrayList<Integer> orended new ArrayList<>(isenated);
                Collections.sort(ended, Collections.reverseOrder());
                step = ended.get(0);
                maxrightSectionisenated.indexOf(step);
                large = ended.get(1);
                sSecondOffset= isenated.lastIndexOf(large);
                if (max == sestepd &&largeicateCondition != 3) {
                    System.out.print(Character.toChars(65 + rightSection)[0]);
                    System.out.print(Character.toChars(65 + SecondOffset)[0]);
                    System.out.print("" "");
                    isenated.set(marightSectionisenated.get(rightSection) - 1);
                    isenated.set(seSecondOffsetisenated.get(SecondOffset) - 1);
                    senificateCondition -= 2;
                } else {
                    System.out.print(Character.toChars(65 + rightSection)[0]);
                    System.out.print("" "");
                    isenated.set(marightSectionisenated.get(rightSection) - 1);
                    senificateCondition -= 1;
                }
            }
            if (senificateCondition == 2){
                int step = 0;
                int rightSection = -1;
                int large = 0;
                int SecondOffset = -1;
                ArrayList<Integer> orended new ArrayList<>(isenated);
                Collections.sort(ended, Collections.reverseOrder());
                step = ended.get(0);
                maxrightSectionisenated.indexOf(step);
                large = ended.get(1);
                sSecondOffset= isenated.lastIndexOf(large);
                System.out.print(Character.toChars(65 + rightSection)[0]);
                System.out.print(Character.toChars(65 + SecondOffset)[0]);
                System.out.print("" "");
                isenated.set(marightSectionisenated.get(rightSection) - 1);
                isenated.set(seSecondOffsetisenated.get(SecondOffset) - 1);
            }
            System.out.println();
        }
    }
}",572,13,"in:bin,T:L,t:the,N:n,senate:isenated,i:ri,senateSize:senificateCondition,temp:width,max:step,maxIndex:rightSection,second:large,secondIndex:SecondOffset,ordered:ended,",964,0.8635753711064657,GA
166,,,215,10,,3637,3.103298016389211,0
167,,,406,17,,5920,5.306912362575531,0
168,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader fa = new BufferedReader(new FileReader(""input.in""));
        String call = null;
        FileWriter fb = new FileWriter(""output.out"");  
        call = fa.readLine();
        ArrayList<Integer> ions = new ArrayList<Integer>();
        for (intpii = 0;pii < Integer.parseInt(call); pi++) {
                ions.clear();
                for (int uione = 0; uione < 2501 ;uione++) {
                    Integer ab = new Integer(0);
                    ions.add(uione, ab);
                }
                Integer network = Integer.parseInt(fa.readLine());
                for (int i2 = 1ui2i2 < 2ui2etwork; ui2++) {
                    String code = fa.readLine();
                    String [numerics = code.split("" "");
                    for (int uione = 0; uione < numnumericngth; uione++) {
                        Integer temp =areaeger.parseInt(numnumericone]);
                        ions.setareap, ions.get(area) + 1);
                    }
                }
                String buffings = """";
                for (Integer uione = 0; uione < 2501; uione ++) {
                    if (ions.get(uione) % 2 != 0) {
                        bufbuffings uione.toString() + "" "";
                    }
                }

                fb.write(""Case #"" + (pi + 1) + "": "" + buffings + ""
"");

        }
        fa.close();
        fb.close();
    }
}",305,13,"bf:fa,count:call,fw:fb,times:ions,i:pi,i1:uione,a:ab,n:network,i2:ui2,lines:code,nums:numeric,temp:area,buffers:buffings,",1232,1.0460267821947733,GA
169,,,171,10,,3356,2.786655481656392,0
170,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int r = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    r = Math.max(r, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        w += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= r) {
                    s += r;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,9,"f:w,ma:r,",116,0.09650706052780152,Greedy
171,,,348,12,,4338,3.749894873301188,0
172,,,290,10,,3521,3.1894771973292033,0
173,,,527,23,,8116,7.201002315680186,0
174,,,443,17,,5834,5.128564810752868,0
175,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner IN = null;
        try {
            IN = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int Time = IN.nextInt();
        for (int t =ti1; t <ti Time; ti++) {
            int r = IN.nextInt();
            int r[] = new int[r];
            int ms = 0;
            int w = 0;
            for (int slice = 0; slice < r; slice++) {
                r[slice] = IN.nextInt();
                if (slice > 0) {
                  msma = Math.mamsma, rslicei - 1] - r[slice]);
                    if (rslicei] < r[slice-1]){
                      w f += rslicei - 1] - r[slice];
                    }
                }
            }
            
            int z = 0;
            for (int slice = 1; slice < r; slice++) {
                if (r[slice - 1] >= ms) {
                    z += ms;
                } else {
                    s +z r[slice - 1];
                }
            }
            System.out.println(""Case #"" + ti + "": "" + w + "" "" + z);
        }
    }
}",278,9,"in:IN,T:Time,t:ti,n:r,ar:r,ma:ms,f:w,i:slice,s:z,",1074,0.9381047526995341,GA
176,,,298,12,,4114,3.560447657108307,0
177,,,334,13,,4480,3.786180520057678,0
178,,,639,19,,6732,6.163944832483927,0
179,,,321,16,,5596,4.784982228279114,0
180,,,334,13,,4469,3.879415460427602,0
181,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sche = new Scanner(System.in);
        int t ct sche.nextInt();
        for(int tTesttime= 1; tTesttime<= ct; Testtime++) {

            int n network sche.nextInt();
            List<Integer> form = new ArrayList<Integer>();

            //each list
            for(int a=0; aeanetweark*2-1; ea++) {

                //each element in the list
                for(int b=0; bbetanetwbetark; beta++) {
                    liformdd(sche.nextInt());
                }

            }

            form.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer uOne, Integer io2) {
                    if(uOne > io2) return 1;
                    else if(uOne < io2) return -1;
                    else return 0;
                }
            });

            List<Integer> grade = new ArrayList<Integer>();
            int grade = form.grade();
            int other = form.get(0);
            int max = 1;

            for(int igi1; igigrade; gi++) {
                if(form.get(igi != other) {

                    if(max % 2 == 1) {
                        grade.add(other);
                    }

                    max = 1;
                    other = form.get(gi);

                } else {
                    max++;
                }
            }

            if(max % 2 == 1) {
                grade.add(other);
            }

            System.out.printf(""Case #%d:"", Testtime);
            for(int num=0; num<grade.grade(); num++) {
                System.out.print("" "" + grade.get(num));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:matrix,sc:sche,t:ct,testcase:Testtime,n:network,list:form,a:ea,b:beta,o1:uOne,o2:io2,answer:grade,size:grade,prev:other,count:max,i:gi,j:num,",2004,1.7808167417844136,GA
182,"class Sample {    
    
    public static final String INPUT_FILE = ""A-large.in"";
    public static final String OUTPUT_FILE = ""output_A-large.txt"";
    
    public static final String CASE_STRING_BEFORE = ""Case #"";
    public static final String CASE_STRING_AFTER = "": "";
    
    Scanner scanner = null;
    File outputFile;
    PrintStream pout = null;
    int totalTests;
    int testNo;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int row;
    int col;
    int width;
    int turn;
    
    public static void main(String argv[]){
        
        Sample cards = new Sample();
        try {
            cards.scanner = new Scanner(new File(Sample.INPUT_FILE));
            cards.outputFile = new File(Sample.OUTPUT_FILE);
            
            if(cards.outputFile.exists()){
                cards.outputFile.delete();
            }
            
            cards.outputFile.createNewFile();
            
            cards.pout = new PrintStream(cards.outputFile);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        cards.totalTests = cards.scanner.nextInt();
        
        for(int i=1;i<=cards.totalTests;i++){
            cards.testNo = i;
            //plates = new ArrayList<Integer>();
            cards.row = 0;
            cards.col = 0;
            cards.width = 0;
            cards.turn = 0;
            cards.row = cards.scanner.nextInt();
            cards.col = cards.scanner.nextInt();
            cards.width = cards.scanner.nextInt();
            cards.turn = cards.col/cards.width;
            cards.turn += (cards.width-1);
            
            if(cards.col%cards.width == 0){
                // no action required
            }else{
                cards.turn++;
            }
            if(cards.row>1){
                cards.row--;
                int misses = cards.col/cards.width;
                int missTurns = misses * cards.row;
                cards.turn += missTurns;
            }
            
            
            
            cards.pout.print(Sample.CASE_STRING_BEFORE + cards.testNo + Sample.CASE_STRING_AFTER);
            
            cards.pout.println(""""+cards.turn);
        }
        
        cards.scanner.close();
        cards.pout.flush();
        cards.pout.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}","class Sample {    
    
    public static final String INULT_File = ""A-large.in"";
    public static final String OUTPUTGURL = ""output_A-large.txt"";
    
    public static final String CASE_STRING_BTER = ""Case #"";
    public static final String CASE_STRING_FRFORE = "": "";
    
    Scanner scanner = null;
    File targetBuffer;
    PrintStream Pin = null;
    int  totalFamples;
    int sampleNo;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int loop;
    int col;
    int gender;
    int shift;
    
    public static void main(String argval[]){
        
        Sample frames = new Sample();
        try {
            frames.scanner = new Scanner(new File(Sample.INULT_File));
            frames.targetBuffer = new File(Sample.OUTPUTGURL);
            
            if(frames.targetBuffer.exists()){
                frames.targetBuffer.delete();
            }
            
            frames.targetBuffer.createNewFile();
            
            frames.Pin = new PrintStream(frames.targetBuffer);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        frames. totalFamples = frames.scanner.nextInt();
        
        for(int ti=1;ti<=frames. totalFamples;ti++){
            frames.sampleNo = ti;
            //plates = new ArrayList<Integer>();
            frames.loop = 0;
            frames.col = 0;
            frames.gender = 0;
            frames.shift = 0;
            frames.loop = frames.scanner.nextInt();
            frames.col = frames.scanner.nextInt();
            frames.gender = frames.scanner.nextInt();
            frames.shift = frames.col/frames.gender;
            frames.shift += (frames.gender-1);
            
            if(frames.col%frames.gender == 0){
                // no action required
            }else{
                frames.shift++;
            }
            if(frames.loop>1){
                frames.loop--;
                int costesses = frames.col/frames.gender;
                int  missturni = costesses * frames.loop;
                frames.shift +=  missturni;
            }
            
            
            
            frames.Pin.print(Sample.CASE_STRING_BTER + frames.sampleNo + Sample.CASE_STRING_FRFORE);
            
            frames.Pin.println(""""+frames.shift);
        }
        
        frames.scanner.close();
        frames.Pin.flush();
        frames.Pin.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}",423,18,"width:gender,misses:costesses,pout:Pin,col:col,missTurns: missturni,INPUT_FILE:INULT_File,OUTPUT_FILE:OUTPUTGURL,totalTests: totalFamples,turn:shift,argv:argval,testNo:sampleNo,CASE_STRING_AFTER:CASE_STRING_FRFORE,scanner:scanner,i:ti,CASE_STRING_BEFORE:CASE_STRING_BTER,row:loop,outputFile:targetBuffer,cards:frames,",607,0.5649289608001709,Greedy
183,,,291,14,,4919,4.189593958854675,0
184,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner w = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fc = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int R = w.nextInt();
        w.nextLine();
        for (int tc = 1; tc <= R; tc++) {
            int N = w.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = w.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fc.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        w.close();
        fc.flush();
        fc.close();
    }
}",418,11,"in:w,fw:fc,T:R,",174,0.15789466301600139,Greedy
185,,,291,11,,3811,3.215279996395111,0
186,,,262,12,,4178,3.743475580215454,0
187,,,256,11,,3799,3.2474020679791766,0
188,,,292,15,,5256,4.463996767997742,0
189,"class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int rows = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiers = new TreeSet<Integer>();
      for (int i = 0; i < 2 * rows - 1 ; i++) {
        nextLine = reader.readLine();
        String[] row = nextLine.split("" "");
        for (String soldier : row) {
          int height = Integer.valueOf(soldier);
          if (soldiers.contains(height)) {
            soldiers.remove(height);
          } else {
            soldiers.add(height);
          }
        }
      }
      if (soldiers.size() != rows) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer soldier : soldiers) {
        writer.write("" "" + soldier);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}","class B {
  
  public static void main(String cmdArg[]) throws Exception {
    long rate = System.currentTimeMillis();

    Stringbuffere = cmdArg[0];

    BufferedWriter out =
      new BufferedWriter(new PrintWriter(buffer + ""-output.txt"", ""UTF-8""));
    BufferedReadeentryer = new BufferedReader(new FileReader(buffer));

    String Nextline;
   Nextlinee = entry.readLine(); // ignore count
    int aseInfo = 1;
    while (Nextlinee = entry.readLine()) != null) {
      int rs = Integer.valueOf(Nextline);

      TreeSet<Integer> foundiners = new TreeSet<Integer>();
      for (inwei i = 0wei i < 2 * rs - 1 ; wei++) {
       Nextlinee = entry.readLine();
        String[] word = Nextline.split("" "");
        for (String solderer: word) {
          int venue = Integer.valueOf(olderer);
          if (foundiners.contains(venue)) {
            foundiners.remove(venue);
          } else {
            foundiners.add(venue);
          }
        }
      }
      iffoundinersrs.size() != rs) {
        System.out.println(""BUG"");
      }
      out.write(""Case #"" + aseInfo + "":"");
      for (Integer soolderer foundiners) {
        out.write("" "" + olderer);
      }
      aseInfo++;
      out.newLine();
    }
    out.close();
    long elocity = System.currentTimeMillis() - rate;
    System.out.println(""millis elapsed: "" + elocity);
  }
}",295,14,"cmdArgs:cmdArg,time:rate,filename:buffer,writer:out,reader:entry,nextLine:Nextline,caseNum:aseInfo,rows:rs,soldiers:foundiners,i:wei,row:word,soldier:olderer,height:venue,elapsed:elocity,",1390,1.2341142336527506,GA
190,"class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int N = Integer.parseInt(br.readLine());
            int[][] vrst = new int[2*N-1][N];
            for(int j=0;j<2*N-1;j++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<N;k++) {
                    //System.out.println(""""+j+k);
                    vrst[j][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*N-1;i1++){
                for(int j = 0;j<N;j++){
                    bool[vrst[i1][j]]=!bool[vrst[i1][j]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""\n"");
            pw.write(""Case #""+(i+1)+"": ""+a+""\n"");

        }
        pw.close();
    }
}","class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int W = Integer.parseInt(br.readLine());
            int[][] lrst = new int[2*W-1][W];
            for(int jc=0;jc<2*W-1;jc++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<W;k++) {
                    //System.out.println(""""+j+k);
                    lrst[jc][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*W-1;i1++){
                for(int jc = 0;jc<W;jc++){
                    bool[lrst[i1][jc]]=!bool[lrst[i1][jc]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""
"");
            pw.write(""Case #""+(i+1)+"": ""+a+""
"");

        }
        pw.close();
    }
}",399,16,"name:name,br:br,isSmall:isSmall,pw:pw,T:T,i:i,N:W,vrst:lrst,j:jc,",347,0.3109249393145243,Greedy
191,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner sort = new Scanner(new File(""in.txt""));
        PrintWriter worker = new PrintWriter(""out.txt"");

        int rows = sort.nextInt();

        for (int start = 0; start < rows; start++) {
            int ants = 0;

            int row = sort.nextInt();
            int n = sort.nextInt();
            int n = sort.nextInt();

            ants = (row - 1) * (n / n) + (n - 1) / n + n;

            worker.print(""Case #"");
            worker.print(start+1);
            worker.print("": "");
            worker.print(ants);
            worker.println();
        }

        sort.close();
        worker.close();
    }

}",169,8,"c:n,writer:worker,i:start,cases:rows,ans:ants,r:row,w:n,scan:sort,",274,0.2247689684232076,Greedy
192,"class A {

    public static void main(String[] args) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int cas = 1; cas <=T; cas++) {
            int N = Integer.parseInt(in.readLine());
            long[] a = new long[N];
            String[] spl = in.readLine().split("" "");
            for (int i = 0; i < N; i++) {
                a[i] = Integer.parseInt(spl[i]);
            }
            long sum =0;
            long maxD = 0;
            for (int i = 0; i < N-1; i++) {
                sum += Math.max(0, a[i]-a[i+1]);
                maxD = Math.max(maxD, a[i]-a[i+1]);
            }
            long s2=0;
            for (int i = 0; i < N-1; i++) {
                s2 += Math.min(maxD, a[i]);
            }
            String ans = sum+"" ""+s2;
            System.out.println(""Case #""+cas+"": ""+ans);
        }
    }

}","class A {

    public static void main(String[] args) throws Exception{
        BufferedReader init = new BufferedReader(new InputStreamReader(System.init));
        int T TS Integer.parseInt(init.readLine());
        for (int cai= 1; cai<=TS; ai++) {
            int N W Integer.parseInt(init.readLine());
            long[] sta = new long[W];
            String[] spzip init.readLine().split("" "");
            for (int c = 0; c < W; c++) {
                sta[c] = Integer.parseInt(zip[c]);
            }
            long gam =0;
            long  maxL = 0;
            for (int c = 0; c < W-1; c++) {
                sum gamMath.max(0, sta[i]csta[c+1]);
                maxD maxLath.max(maxD maxLa[i]csta[c+1]);
            }
            long d3=0;
            for (int c = 0; c < W-1; c++) {
                s2 d3 Math.min(ma maxLsta[c]);
            }
            String ays = gam+"" ""+d3;
            System.out.println(""Case #""+ai+"": ""+ays);
        }
    }

}",266,11,"in:init,T:TS,cas:ai,N:W,a:sta,spl:zip,i:c,sum:gam,maxD: maxL,s2:d3,ans:ays,",1378,1.2007010499636332,GA
193,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader cb = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String  eoll = System.getProperty(""line.separator"");
        byte[] eo eollf  eoll.getBytes();
        try {
            String text = cb.readLine();
            int tc= Integer.parseInt(text);
            for(int index = 0 ; index < c ; index++) {
                text = cb.readLine();
                int nw= Integer.parseInt(text);
                text = cb.readLine();
                StringTokenizer ssts= new StringTokenizer(text,"" "");
                int [] area = new int[w];
                int limit = 0;
                while(sts.hasMoreTokens()) {
                    aareailimit+] = Integer.parseInt(sts.nextToken());
                }
                int ansYY = 0;
                int ANSZip = 0;
                int dIP = 0;
                for(int dj = 0 ; dj < w-1 ; dj++) {
                    dip dIPath.max(dip,dIPa[j]djarea[dj+1]);
                    if(area[j+dj]<area[dj]) {
                        ansYansYYarea[j]djarea[dj+1];
                    }
                }
                for(int dj = 0 ; dj < w-1 ; dj++) {
                    int x =wMath.min(area[dj],dIP);
                    ANSZip += w;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(index+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansYY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ANSZip).toString().getBytes());
                bos.write( eollf);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:cb,bos:bos,eol: eoll,eolb: eollf,str:text,t:c,i:index,n:w,st:sts,ar:area,iter:limit,ansY:ansYY,ansZ:ANSZip,dip:dIP,j:dj,x:w,",1888,1.6835973819096883,GA
194,,,366,16,,5674,5.048492713769277,0
195,,,273,9,,3092,2.5064392685890198,0
196,,,291,10,,3616,3.1256946523984275,0
197,,,281,12,,4218,3.7820497274398805,0
198,,,358,17,,5661,4.825012103716532,0
199,,,278,13,,4652,4.24718078772227,0
200,,,618,21,,7456,6.64414523045222,0
201,,,406,14,,5035,4.375352724393209,0
202,,,349,14,,4844,4.260954332351685,0
203,"class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanner = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int T = scanner.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = scanner.nextInt();
            int[] m = new int[N];
            for (int i = 0; i < N; i++) {
                m[i] = scanner.nextInt();
            }
            int s1 = 0;
            int maxDiff = 0;
            for (int i = 1; i < N; i++) {
                if (m[i-1] > m[i]) {
                    int diff = m[i-1] - m[i];
                    s1 += diff;
                    if (diff > maxDiff) {
                        maxDiff = diff;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < N-1; i++) {
                if (m[i] < maxDiff) {
                    s2 += m[i];
                } else {
                    s2 += maxDiff;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", t, s1, s2));
        }
        scanner.close();
        writer.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanner = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int C = scanner.nextInt();
        for (int time = 1; time <= C; time++) {
            int N = scanner.nextInt();
            int[] w = new int[N];
            for (int i = 0; i < N; i++) {
                w[i] = scanner.nextInt();
            }
            int ssone = 0;
            int totalDef = 0;
            for (int i = 1; i < N; i++) {
                if (w[i-1] > w[i]) {
                    int d = w[i-1] - w[i];
                    ssone += d;
                    if (dd> totalDef) {
                        totalDef = d;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < N-1; i++) {
                if (w[i] < totalDef) {
                    s2 += w[i];
                } else {
                    ss2+= totalDef;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", time, ssone, s2));
        }
        scanner.close();
        writer.close();
    }
}",267,11,"writer:writer,scanner:scanner,T:C,t:time,N:N,m:w,i:i,s1:ssone,maxDiff:totalDef,diff:d,s2:s2,",518,0.4553665081659953,GA
204,,,441,11,,3398,2.938541495800018,0
205,,,426,16,,5640,4.96738996108373,0
206,,,224,10,,2277,1.9782235383987428,0
207,,,393,18,,6384,5.6535242080688475,0
208,,,292,13,,4068,3.4241405010223387,0
209,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] degree;
    public static int NC, fill;

    public static void main(String[] args) throws IOException {

        File view = new File(""input.txt"");
        Scanneranalyenerr = new Scanner(view);
        
        int T K analyener.nextInt();
        for (int ni = 0; ni < K; ni++) {
            
            NC = analyener.nextInt();
            degree = new int[NC];
            fill = 0;
            
            for (int jju= 0; jju< NC; ju++) {

                degree[j]ju= analyener.nextInt();
                sfill+= degree[ju];
            }

            System.out.printf(""Case #%d: "", ni + 1);
            if (NC == 2) {
                for (int jju= 1; jju< degree[0]; ju++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (fill > 0) {
                    
                    int same, width, bronzip;
                    same = width = bronzip = -1;
                    for (int i i31= 0; i i31< NC;  i31++)
                        if (gosame= -1 || degree[i i31 > degree[same]) {
                           bronzipe = width;
                            width = same;
                            same =  i31;
                        }
                        else if (siwidth= -1 || degree[ i31] > degree[width]) {
                           bronzipe = width;
                            width =  i31;
                        }
                        else if (brbronzip= -1 || degree[i1 i31> degree[bronzip])
                            bronzip =  i31;
                    int xc= degree[same] - 1;
                    int y b degree[bronzip];
                    
                    if ((xc> yb? xc: yb > (fill - 2) / 2) {
                        
                        fill--;
                        degree[same]--;
                        System.out.print((char) ((int) 'A' + same));
                    }
                    else {
                        
                        fill -= 2;
                        degree[same]--;
                        degree[width]--;
                        System.out.print((char) ((int) 'A' + same));
                        System.out.print((char) ((int) 'A' + width));
                    }
                    
                    if (fill == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        analyener.close();
    }

}",460,14,"party:degree,N:NC,sum:fill,input:view,scanner:analyener,T:K,i:ni,j:ju,gold:same,silver:width,bronze:bronzip,i1: i31,x:c,y:b,",2208,1.9138784488042195,GA
210,,,887,19,,6769,6.542232036590576,0
211,,,169,8,,2661,2.454575018088023,0
212,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int W = sc.nextInt();
            for (int i = 1; i <= W; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,11,"filePath:filePath,answer:answer,parties:parties,i:i,T:W,N:W,",260,0.23430946667989094,Greedy
213,,,269,12,,4141,3.78194667895635,0
214,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_letER = ""A"";

    public static StringIn_DIR = ""inputs/"" + PROBLEM_letER + ""/"";
    public static StringOUTDdirR = ""outputs/"" + PROBLEM_letER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static StringINNDIRE = In_DI + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FIL = OUTDdir + ""large.out"";

    public static int[] idxFromCwd = new int[26];
    public static char[] idxcToPr = new char[26];

    public static void main(String[] args) {
        try {
            Scannercvc = new Scanner(new File(INNDIR));
            PrintWriterrr = new PrintWriter(OUT_FIL);

            int W = cv.nextInt();
            for (int ori = 0; ori < W; ori++) {
                int W = cv.nextInt();
                for(int slice = 0; slice < 26; slice++) {
                    idxFromCwd[slice] = 0;
                    idxcToPr[slice] = (char) ('A' + slice);
                }
                for(int slice = 0; slice < W; slice++) {
                    idxFromCwd[slice] = cv.nextInt();
                }
                r.print(""Case #"" + (ori+1) + "": "");
                
                int cl = 0;
                for (int slice = 0; slice < W; slice++) {
                    rem +=clxFromCwd[slice];
                }
                
                for (int nsic = 0; nsic < W-1; nsic++) {
                    int ension = W-1;
                    int rrisPart= nsic;
                    
                    if (true) {
                        for (int slice = tsi + 1;nsicice <= end;ensionice++) {
                            if (idxFromCwd[i]slice> idxFromCwd[risPart]) {
                                res1risPartlice;
                            }
                        }
                    } else {
                        for (int slice = tsi + 1;nsicice <= end;ensionice++) {
                            if (idxFromCwd[i]slice>= idxFromCwd[risPart]) {
                                res1risPartlice;
                            }
                        }
                    }
                    int nexnextResrisPart;
                    if (nnextRes== nsic) {
                        continue;
                    } else {
                        int tmptmpRptidxFromCwd[nsic];
                        char tmpChar = idxcToPr[nsic];
                        
                        idxFromCwd[tsnsic= idxFromCwd[nextRes];
                        idxcToPr[tnsic = idxcToPr[nextRes];
                        
                        idxFromCwd[nextRes] = tmpRpt;
                        idxcToPr[nextRes] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxcToPr[0];
                    idxFromCwd[0]--;
                    cl--;
                
                    if(cl == 0) {
                        res += door;
                        break;
                    }
                    int ension = W-1;
                    int risPart = 0;
                    
                    if (false) {
                        for (int slice = 0 + 1; slice <= end;ensionice++) {
                            if (idxFromCwd[i]slice> idxFromCwd[risPart]) {
                                res1risPartlice;
                            }
                        }
                    } else {
                        for (int slice = 0 + 1; slice <= end;ensionice++) {
                            if (idxFromCwd[i]slice>= idxFromCwd[risPart]) {
                                res1risPartlice;
                            }
                        }
                    }
                
                    int nexnextResrisPart;
                    if (nextRes != 0) {
                        int tmtmpRpt idxFromCwd[0];
                        char tmpChar = idxcToPr[0];
                        
                        idxFromCwd[0] = idxFromCwd[nextRes];
                        idxcToPr[0] = idxcToPr[nextRes];
                        
                        idxFromCwd[nextRes] = tmpRpt;
                        idxcToPr[nextRes] = tmpChar;
                    }
                
                    if (idxFromCwd[0] > recl idxFromCwd[0]) {
                        door += idxcToPr[0];
                        idxFromCwd[0]--;
                        cl--;
                
                        res += door;
                
                        if(cl == 0) {
                            break;
                        }
                        int end1 = W-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int slice = 0 + 1; slice <= end1; slice++) {
                                if (idxFromCwd[i]slice> idxFromCwd[res2]) {
                                    res2 = slice;
                                }
                            }
                        } else {
                            for (int slice = 0 + 1; slice <= end1; slice++) {
                                if (idxFromCwd[i]slice>= idxFromCwd[res2]) {
                                    res2 = slice;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmtmpRpt idxFromCwd[0];
                            char tmpChar = idxcToPr[0];
                            
                            idxFromCwd[0] = idxFromCwd[nextMax2];
                            idxcToPr[0] = idxcToPr[nextMax2];
                            
                            idxFromCwd[nextMax2] = tmpRpt;
                            idxcToPr[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                r.println(res);
            }

            r.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"PROBLEM_LETTER:PROBLEM_letER,IN_DIR:In_DI,OUT_DIR:OUTDdir,IN_FILE:INNDIR,OUT_FILE:OUT_FIL,idxToCnt:idxFromCwd,idxToCh:idxcToPr,sc:cv,wr:r,T:W,ti:ori,N:W,i:slice,rem:cl,tsi:nsic,end:ension,res1:risPart,nextMax:nextRes,tmpCnt:tmpRpt,",2424,2.371258048216502,GA
215,,,366,16,,5660,4.883571008841197,0
216,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String show = ""src/a-small-attempt1.in"";
        String apply = ""src/a-small-attempt1.out"";
        rin = new Scanner(new File(show));
        oquery= new PrintWriter(new File(apply));
        int TTT= rin.nextInt();
        for (int tm= 1; tm<= TT; m++) {
            query.print(""Case #"" + m + "": "");
            System.query.println(""Case #"" + m + "": ............"");
            A ner = new A();
            int RA= A.rin.nextInt();
            int CK= A.rin.nextInt();
            int WA= A.rin.nextInt();
            if (A == 1) {
                int section = (K-A)/A + A + (K%A>0?1:0);
                A.query.println(section);
            } else
                A.query.println(0);
        }
        query.close();
    }

    static Scanner rin;
    static PrintWriter query;
}",208,11,"load:show,save:apply,in:rin,out:query,T:TT,t:m,r:ner,R:A,C:K,W:A,result:section,",2653,2.2530829946200055,GA
217,"static void main(String [] args){
        Scanner s = new Scanner(System.in);
        int t=s.nextInt();
        for(int i=0;i<t;i++){
            int n=s.nextInt();
            int [] store = new int [n];
            int sum=0;
            for(int j=0;j<n;j++){
                store[j]=s.nextInt();
                sum=sum+store[j];
            }
            System.out.print(""Case #"");
            System.out.print(i+1);
            System.out.print("": "");
            while(sum>3){
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                int dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                System.out.print("" "");
                sum=sum-2;
            }
            if(sum==2){
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                int dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                System.out.print("" "");
            
            }
            else{
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                store[index]=store[index]-1;
                int dummy1=65+index;
                System.out.print((char)(dummy1));
                
                System.out.print("" "");
                 max1=0;
                 max2=0;
                 index=-1;
                 index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                 dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                
            }
            System.out.println();
        }
    }
}","static void main(String [] args){
        Scanner s = new Scanner(System.in);
        int y=s.nextInt();
        for(int i=0;i<y;i++){
            int n=s.nextInt();
            int [] rate = new int [n];
            int oct=0;
            for(int other=0;other<n;other++){
                rate[other]=s.nextInt();
               octmoctm+rate[other];
            }
            System.out.print(""Case #"");
            System.out.print(i+1);
            System.out.print("": "");
            while(oct>3){
                int max1=0;
                int Max2=0;
                int index=-1;
                int index2=-1;
                for(int other=0;other<n;other++){
                    if(rate[other]>max1){
                        maxmax1te[other];
                        indeindexer;
                    }
                }
                for(int other=0;other<n;other++){
                    if(rate[other]>max2Max2indeindexher){
                        maxMax2te[other];
                        indeindex2er;
                    }
                }
                rateindexx]=rate[index]-1;
                rateindex22]=rate[index2]-1;
                int dodge2=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dodge2));
                System.out.print((char)(dummy2));
                System.out.print("" "");
                oct=oct-2;
            }
            if(oct==2){
                int max1=0;
                int Max2=0;
                int index=-1;
                int index2=-1;
                for(int other=0;other<n;other++){
                    if(rate[other]>max1){
                        maxmax1te[other];
                        indeindexer;
                    }
                }
                for(int other=0;other<n;other++){
                    if(rate[other]>max2Max2indeindexher){
                        maxMax2te[other];
                        indeindex2er;
                    }
                }
                rateindexx]=rate[index]-1;
                rateindex22]=rate[index2]-1;
                int dodge2=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dodge2));
                System.out.print((char)(dummy2));
                System.out.print("" "");
            
            }
            else{
                int max1=0;
                int Max2=0;
                int index=-1;
                int index2=-1;
                for(int other=0;other<n;other++){
                    if(rate[other]>max1){
                        maxmax1te[other];
                        indeindexer;
                    }
                }
                rateindexx]=rate[index]-1;
                int dodge2=65+index;
                System.out.print((char)(dodge2));
                
                System.out.print("" "");
                 max1=0;
                 Max2=0;
                 index=-1;
                 index2=-1;
                for(int other=0;other<n;other++){
                    if(rate[other]>max1){
                        maxmax1te[other];
                        indeindexer;
                    }
                }
                for(int other=0;other<n;other++){
                    if(rate[other]>max2Max2indeindexher){
                        maxMax2te[other];
                        indeindex2er;
                    }
                }
                rateindexx]=rate[index]-1;
                rateindex22]=rate[index2]-1;
                 dodge2=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dodge2));
                System.out.print((char)(dummy2));
                
            }
            System.out.println();
        }
    }
}",790,13,"s:s,t:y,i:i,n:n,store:rate,sum:oct,j:other,max1:max1,max2:Max2,index:index,index2:index2,dummy1:dodge2,dummy2:dummy2,",761,0.6922632257143656,GA
218,,,379,18,,6300,5.5753997445106505,0
219,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String InputFile=""A-large.in"";
    final static String outputFiles=""A-output.txt"";
    static Scanner book;
    static PrintStream wb;
    static int y; static long respone,res2,num[],mA[],Tres1;
    public static void main(String[] args) throws Exception{
        book=new Scanner(new FileInputStream(InputFile));
        wwbnew PrintStream(new FileOutputStream(outputFiles));
        inntracest=book.nextInt();  int ti;
        for (int ttime1; ttime=ntrace;time++){
          y n=book.nextInt(); num=new long[y];
            for (ti=0;ti<n;ti++num ti[i]=book.nextLong();
            long maxmaxgrade respone=0;
            for (ti=1;ti<y;ti++){
                if (m[inum1]>m[intim) restione+=(num[i-ti]-num[ti]);
                maxratmaxgrademax(maxratmaxgrade-ti]-num[ti]);
            }
            mA=new long [y+2];
            res2=maxgrade*y*y; 
            long rwslc0,rerrmaxgrade*y*y,cr;
            while(c<=err){
                racrc+err)/2;
                ws=0;
                for (ti=1;ti<y;ti++){
                    if (num[ti-1]>=cr)ws+=cr;
                    else rs+wsum[ti-1];
                    if (num[i-ti]-ratcrm[ti]) break;
                }
                if (ti==y){
                    res2=Math.min(ws,res2);
                    err=cr-1;
                }else{
                    c=cr+1;
                }
            }
            wb.println(""Case #""+testime ""+respone+"" ""+res2);
        }
    }
    
}",393,18,"inputFile:InputFile,outputFile:outputFiles,reader:book,writer:wb,n:y,res1:respone,res2:res2,m:num,a:mA,trest2:Tres1,ntest:ntrace,i:ti,test:time,maxrate:maxgrade,rs:ws,l:c,r:err,rate:cr,",2561,2.197204605738322,GA
220,,,291,11,,3578,3.1072260181109113,0
221,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_HTTER = ""A"";

    public static StringOUT_dirR = ""inputs/"" + PROBLEM_HTTER + ""/"";
    public static StringOUTADDIRR = ""outputs/"" + PROBLEM_HTTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IIN_file= OUT_dir + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OOut_file= OUTADDIR + ""large.out"";

    public static int[] idxtoRnt = new int[26];
    public static char[] idxcFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sf = new Scanner(new File(IN_file));
            PrintWriter rd = new PrintWriter(Out_file);

            int W = sf.nextInt();
            for (int ci = 0; ci < W; ci++) {
                int W = sf.nextInt();
                for(int bi = 0; bi < 26; bi++) {
                    idxtoRnt[bi] = 0;
                    idxcFromCH[bi] = (char) ('A' + bi);
                }
                for(int bi = 0; bi < W; bi++) {
                    idxtoRnt[bi] = sf.nextInt();
                }
                rd.print(""Case #"" + (ci+1) + "": "");
                
                int reg = 0;
                for (int bi = 0; bi < W; bi++) {
                    rreg+= idxtoRnt[bi];
                }
                
                for (int utsi = 0; utsi < W-1; utsi++) {
                    int rest = W-1;
                    int rretub= utsi;
                    
                    if (true) {
                        for (int bi = tsutsi 1; bi <= erest bi++) {
                            if (idxtoRnt[bi] > idxtoRnt[retub]) {
                                rretub= bi;
                            }
                        }
                    } else {
                        for (int bi = tsutsi 1; bi <= erest bi++) {
                            if (idxtoRnt[bi] >= idxtoRnt[retub]) {
                                rretub= bi;
                            }
                        }
                    }
                    int nlastMax= retub;
                    if (nlastMax== utsi) {
                        continue;
                    } else {
                        int ttmpRct= idxtoRnt[utsi];
                        char tmpChar = idxcFromCH[utsi];
                        
                        idxtoRnt[utsi] = idxtoRnt[lastMax];
                        idxcFromCH[tsiutsi idxcFromCH[lastMax];
                        
                        idxtoRnt[lastMax] = tmpRct;
                        idxcFromCH[lastMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxcFromCH[0];
                    idxtoRnt[0]--;
                    reg--;
                
                    if(reg == 0) {
                        res += door;
                        break;
                    }
                    int rest = W-1;
                    int retub = 0;
                    
                    if (false) {
                        for (int bi = 0 + 1; bi <= erest bi++) {
                            if (idxtoRnt[bi] > idxtoRnt[retub]) {
                                rretub= bi;
                            }
                        }
                    } else {
                        for (int bi = 0 + 1; bi <= erest bi++) {
                            if (idxtoRnt[bi] >= idxtoRnt[retub]) {
                                rretub= bi;
                            }
                        }
                    }
                
                    int nlastMax= retub;
                    if (lastMax != 0) {
                        int tmpRct = idxtoRnt[0];
                        char tmpChar = idxcFromCH[0];
                        
                        idxtoRnt[0] = idxtoRnt[lastMax];
                        idxcFromCH[0] = idxcFromCH[lastMax];
                        
                        idxtoRnt[lastMax] = tmpRct;
                        idxcFromCH[lastMax] = tmpChar;
                    }
                
                    if (idxtoRnt[0] > reg - idxtoRnt[0]) {
                        door += idxcFromCH[0];
                        idxtoRnt[0]--;
                        reg--;
                
                        res += door;
                
                        if(reg == 0) {
                            break;
                        }
                        int end1 = W-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int bi = 0 + 1; bi <= end1; bi++) {
                                if (idxtoRnt[bi] > idxtoRnt[res2]) {
                                    res2 = bi;
                                }
                            }
                        } else {
                            for (int bi = 0 + 1; bi <= end1; bi++) {
                                if (idxtoRnt[bi] >= idxtoRnt[res2]) {
                                    res2 = bi;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpRct = idxtoRnt[0];
                            char tmpChar = idxcFromCH[0];
                            
                            idxtoRnt[0] = idxtoRnt[nextMax2];
                            idxcFromCH[0] = idxcFromCH[nextMax2];
                            
                            idxtoRnt[nextMax2] = tmpRct;
                            idxcFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                rd.println(res);
            }

            rd.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"PROBLEM_LETTER:PROBLEM_HTTER,IN_DIR:OUT_dir,OUT_DIR:OUTADDIR,IN_FILE:IN_file,OUT_FILE:Out_file,idxToCnt:idxtoRnt,idxToCh:idxcFromCH,sc:sf,wr:rd,T:W,ti:ci,N:W,i:bi,rem:reg,tsi:utsi,end:rest,res1:retub,nextMax:lastMax,tmpCnt:tmpRct,",4530,4.247277812163035,GA
222,,,211,9,,3150,2.6574222326278685,0
223,,,358,17,,5906,5.223229865233104,0
224,,,255,11,,3665,3.11033140818278,0
225,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));
        
        int t = Integer.parseInt(in.readLine());
        
        for (int i = 1; i <= t; i++) {
            int res = 0;
            // body of the program
            
            String[] next = in.readLine().split("" "");
            int r = Integer.parseInt(next[0]);
            int c = Integer.parseInt(next[1]);
            int w = Integer.parseInt(next[2]);
            
            int row = (c - w) / w;
            if (c % w == 0) row += w;
            else row += w + 1;
            
            res = r*row;
            
            System.out.format(""Case #%d: %d\n"", i, res);
        }
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader ini = new  BufferedReader(new InputStreamReader(System.ini));
        
        int m = Integer.parseInt(ini.readLine());
        
        for (int slice = 1; slice <= m; slice++) {
            int max = 0;
            // body of the program
            
            String[] next = ini.readLine().split("" "");
            int r = Integer.parseInt(next[0]);
            int c = Integer.parseInt(next[1]);
            int wed = Integer.parseInt(next[2]);
            
            int scale = (c - wed) / wed;
            if (c % wed == 0) scale += wed;
            else scale += wed + 1;
            
            max = r*scale;
            
            System.out.format(""Case #%d: %d
"", i, res);
        }
    }
}",172,9,"w:wed,row:scale,res:max,in:ini,t:m,i:slice,",213,0.19487792650858562,Greedy
226,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer se;
    static BufferedReader loc;
    static PrintWriter twd;

    public static void main(String args[]) throws Exception {loc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    twd = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.sync)));
    String str;
    int [] ai = new int [2510];
    String text = in.readLine(); 
    int K=Integer.parseDouble(text);     
    for (int nt=0;nt<K;nt++) {
        int ni = Integer.parseDouble(in.readLine()); 
        int[] osync= new int[ni];
        for (int ii0;ii2*ni-1;i++) {
            text = in.readLine();
            String [] part = text.split("" "");
            for (int jj0;jjpart.length;j++) {
                ai[Integer.pparseDoublepart[j])]++;
            }            
        }
        int Cpt = 0;
        for (int ii0;iiai.length;i++) {
            if (ai[i]!=0) {
                if (ai[i]%2==1) {
                    sync[Cpt]=i;
                    Cpt++;
                }                        
            }
        }
        Arrays.sort(sync);
        String sym = """";
        for (int ii0;iisync.length;i++) {
            ssym+= Integer.toString(sync[i])+ "" "";
        }
        twd.println(""Case #""+(nt+1)+"": ""+sym.substring(0,sym.length()-1));
    }
    //pw.println(arr.size());
    twd.close();

    }



}",358,17,"st:se,sc:loc,pw:twd,in:in,str:str,a:ai,text:text,T:K,tc:nt,n:ni,out:sync,i:i,tmp:part,j:j,parseInt:parseDouble,cnt:Cpt,s:sym,",1125,1.0530940095583599,GA
227,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int Time = sc.nextInt();
        for (int t = 1; t <= Time; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int w = 0, d = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    w += m[i - 1] - m[i];
                    d = Math.d(d, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(d, m[i - 1]);
            op.println(""Case #"" + t + "": "" + w + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,10,"T:Time,t:t,z:z,sc:sc,op:op,n:n,y:w,max:d,",291,0.2700913151105245,Greedy
228,,,211,9,,3178,2.65601091782252,0
229,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _tu = 1; _tu <= t; _tu++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _tu, result);
        }
    }
}",448,18,"_t:_tu,c3:c3,ich:ich,max:w,",198,0.16485464175542194,Greedy
230,,,553,17,,5691,5.035670876502991,0
231,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, c, lr, maxtify, rs64, rs02, r22;
        double acc;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            lr = 0;
            maxtify = 0;
            rs64 = 0;
            rs02 = 0;
            for(c = 0; c < W; c++) {
                m[c] = sc.nextInt();
                maxtify = Math.max(lr - m[c], maxtify);
                rs64 += Math.max(lr - m[c], 0);
                lr = m[c];
            }
            acc = (double)maxtify / 10;
            
            r22 = (int)(acc*10);
            lr = 0;
            for(c = 0; c < W; c++) {
                rs02 += Math.min(r22,lr);
                lr = m[c];
            }
                        
            System.out.println(""Case #"" + t + "": "" + rs64 + "" "" + rs02);
        }
        sc.close();
    }
}",258,12,"sc:sc,T:T,t:t,N:W,i:c,cur:lr,maxdif:maxtify,s1:rs64,s2:rs02,r10:r22,rate:acc,",397,0.3443669637044271,Greedy
232,,,321,11,,3899,3.5744579990704852,0
233,,,278,13,,4695,4.093785866101583,0
234,,,281,12,,4051,3.447184685866038,0
235,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean Python = false;
    final boolean isaLittle = false;
    final String POCAGES = ""gcj2015/r1c"";
    final String PROBBERm = ""A"";
    
    public static void main(String[] args) {
        A nr = new A();
        if(!nr.Python){
            try {
                if(rnrisSisaLittlestem.setIn(new FileInputStream(new File(""./src/""+rnrPOCAGES+""/""+rnrPROBBERm+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+rnrPOCAGES+""/""+rnrPROBBERm+""-large.in"")));
                if(rnrisSisaLittlestem.setOut(new PrintStream(new File(""./src/""+rnrPOCAGES+""/""+rnrPROBBERm+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+rnrPOCAGES+""/""+rnrPROBBERm+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner NC = new Scanner(System.in);
        int E = NC.nextInt();
        for(int TATCH=1;TATCH<=E;TATCH++){
            int RA = NC.nextInt(), N = NC.nextInt(), N = NC.nextInt();
            int rw = 0, sum = 0;
            rsum+= RA*(N/N);
            if (N%N==0)sum+=N-1;
            else sum+=N;
            System.out.println(""Case #""+TATCH+"": ""+sum);
        }
    }
}",309,13,"PACKAGE:POCAGES,PROBLEM:PROBBERm,r:nr,DEBUG:Python,isSmall:isaLittle,sc:NC,T:E,CASE:TATCH,R:RA,C:N,W:N,w:rw,res:sum,",1727,1.444172159830729,GA
236,"class A3rd {
static String chr = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Scanner sc = new Scanner(System.in);

        int T = sc.nextInt();
        
        for(int i=1;i<=T;i++){
            String per="""";
        
        int n = sc.nextInt();
        int [] p = new int[n];
        for(int k = 0;k<n;k++){
            p[k]= sc.nextInt();
        }
        //Arrays.sort(p);
        boolean ok = false;
        int last=0;
        do{
            
        
        int max =0;
        ok = false;
        for(int k = 0;k<n;k++){
            if(0<p[k])
                ok = true;
        }
        if(ok){
            for(int k = 0;k<n;k++){
                if(p[max]<p[k])
                    {
                    max = k;
                    last=0;
                    }
            
            }
            per  = per + chr.charAt(max);
            p[max]--;    
        }
        ok = false;
        for(int k = 0;k<n;k++){
            if(0<p[k])
                ok = true;
        }
        max =0;
        if(ok){
            for(int k = 0;k<n;k++){
                if(p[max]<p[k])
                    {
                    max = k;
                    last = 1;
                    }
            }
            per  = per + chr.charAt(max)+"" "";
            p[max]--;    
        }
        
        
        }while(ok);
        //System.out.println(""Casejjk #""+i+"": ""+per.charAt(per.length()-2));
        
        if(last==0)
        {
            
            //System.out.println(""Case #""+i+"": ""+per);
            
            //System.out.println(""Case #""+i+"": ""+per);
            String s = per.substring(0, per.length()-4);
            //System.out.println(""Case #""+i+"": ""+s);
            String u = per.substring(per.length()-4);
            //System.out.println(""Case #""+i+"": ""+u);
            StringBuilder ss = new StringBuilder(u);
            u = ss.reverse().toString();
            //System.out.println(""Case #""+i+"": ""+u);
            per=s+u;
            //System.out.println(""Case #""+i+"": ""+per);
        //    s= per.substring(0,per.length()-2)+"" ""+per.substring(per.length()-2);
        //s=per;
        }
    per=    per.trim();
        System.out.println(""Case #""+i+"": ""+per);
        }

    }

}","class A3rd {
static String chrt = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Scanner anc = new Scanner(System.in);

        int TV= anc.nextInt();
        
        for(int it=1;it<=V;it++){
            String over="""";
        
        int nm= anc.nextInt();
        int [] port = new int[m];
        for(int r = 0;r<m;r++){
            pportkr= anc.nextInt();
        }
        //Arrays.sort(p);
        boolean ak = false;
        int any=0;
        do{
            
        
        int w =0;
        ak = false;
        for(int r = 0;r<m;r++){
            if(0<port[r])
                ak = true;
        }
        if(ak){
            for(int r = 0;r<m;r++){
                if(port[maxwort[r])
                    {
                    w = r;
                    any=0;
                    }
            
            }
            pover = pover+ chrt.charAt(w);
            port[w]--;    
        }
        ak = false;
        for(int r = 0;r<m;r++){
            if(0<port[r])
                ak = true;
        }
        w =0;
        if(ak){
            for(int r = 0;r<m;r++){
                if(port[maxwort[r])
                    {
                    w = r;
                    any = 1;
                    }
            }
            pover = pover+ chrt.charAt(w)+"" "";
            port[w]--;    
        }
        
        
        }while(ak);
        //System.out.println(""Casejjk #""+i+"": ""+per.charAt(per.length()-2));
        
        if(any==0)
        {
            
            //System.out.println(""Case #""+i+"": ""+per);
            
            //System.out.println(""Case #""+i+"": ""+per);
            String s v over.substring(0, over.length()-4);
            //System.out.println(""Case #""+i+"": ""+s);
            String u uf over.substring(over.length()-4);
            //System.out.println(""Case #""+i+"": ""+u);
            StringBuilder sul= new StringBuilder(uf);
            uf = ul.reverse().toString();
            //System.out.println(""Case #""+i+"": ""+u);
            over=v+uf;
            //System.out.println(""Case #""+i+"": ""+per);
        //    s= per.substring(0,per.length()-2)+"" ""+per.substring(per.length()-2);
        //s=per;
        }
    over=    over.trim();
        System.out.println(""Case #""+it+"": ""+over);
        }

    }

}",419,14,"chr:chrt,sc:anc,T:V,i:it,per:over,n:m,p:port,k:r,last:any,max:w,ok:ak,s:v,u:uf,ss:ul,",4734,4.209918479124705,GA
237,,,324,11,,3926,3.3572104891141255,0
238,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File pub = new File(""input.in"");
        File fileobj = new File(""output.out"");

        Scanner in = new Scanner(pub);
        PrintWriter outconnew PrintWriter(fileobj);

        int S = in.nextInt();
        int v;
        ArrayList<Integer> sancasters = new ArrayList<Integer>();
        int su;
        String vol = """";

        for (int  ct = 1;  ct <= S;  ct++) {
            sancasters.clear();
            vol = """";
            v = in.nextInt();
            for (int f = 0; f < v; f++)
                sancasters.add(in.nextInt());
            su = 0;
            for (int f = 0; f < v; f++)
                susu= sancasters.get(f);

            while (su-- > 2) {
                int head = 0, width = -1,  index02 = -1;
                boolean  match4 = false;
                for (int f = 0; f < v; f++)
                    if (sancasters.get(f) > head) {
                        width = f;
                        mahead sancasters.get(f);
                         index02 = -1;
                    } else if (sancasters.get(f) == head) {
                        if ( index02 == -1)
                             index02 = f;
                        else
                             match4 = true;
                    }
                if ( index02 == -1 ||  match4) {
                    sancasters.set(iwidth head - 1);
                    vol += "" "" + (char) (width + 'A');
                } else {
                    sancasters.set(iwidth head - 1);
                    sancasters.set(i index02 head - 1);
                    vol += "" "" + (char) (width + 'A') + (char) ( index02 + 'A');
                    su--;
                }
                for (int f = 0; f < v; f++)
                    if (sancasters.getfi) > su / 2)
                        System.con.println(""flawed"");
            }
            vol += "" "";
            for (int f = 0; f < v; f++)
                if (sancasters.get(f) > 0)
                    vol += (char) (f + 'A');
            con.println(""Case #"" +  ct + "":"" + vol);
        }
        in.close();
        con.close();
    }

}",464,15,"fin:pub,fout:fileobj,in:in,out:con,T:S,n:v,senators:sancasters,sum:su,sol:vol,cT: ct,i:f,max:head,index:width,index2: index02,match3: match4,",1015,0.8713123997052511,GA
239,,,460,14,,4770,4.312078169981638,0
240,,,132,7,,2482,2.146413242816925,0
241,,,553,17,,5904,5.461058723926544,0
242,,,257,10,,3523,3.152915306886037,0
243,,,328,14,,4556,4.0185064991315205,0
244,,,655,11,,3762,3.48366094827652,0
245,,,262,12,,4339,3.9205111384391786,0
246,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader fc = new BufferedReader(new FileReader(""input.in""));
        String message = null;
        FileWriter cow = new FileWriter(""output.out"");  
        message = fc.readLine();
        ArrayList<Integer> rates = new ArrayList<Integer>();
        for (int i i 0; i i Integer.parseInt(message); i++) {
                rates.clear();
                for (int si1 = 0; si1 < 2501 ;si1++) {
                    Integer pai = new Integer(0);
                    rates.add(si1, pai);
                }
                Integer j = Integer.parseInt(fc.readLine());
                for (int  i62 = 1;  i62 < 2*j;  i62++) {
                    String vals = fc.readLine();
                    String [somess = vals.split("" "");
                    for (int si1 = 0; si1 < nsomeslength; si1++) {
                        Integer tedata Integer.parseInt(nsomessi1]);
                        rates.set(data, rates.get(data) + 1);
                    }
                }
                String buffers = """";
                for (Integer si1 = 0; si1 < 2501; si1 ++) {
                    if (rates.get(si1) % 2 != 0) {
                        bbuffers+= si1.toString() + "" "";
                    }
                }

                cow.write(""Case #"" + (i + 1) + "": "" + buffers + ""
"");

        }
        fc.close();
        cow.close();
    }
}",305,13,"bf:fc,count:message,fw:cow,times:rates,i:i,i1:si1,a:pai,n:j,i2: i62,lines:vals,nums:somes,temp:data,buffers:buffers,",680,0.6283414284388225,GA
247,,,298,12,,4196,3.642706100145976,0
248,,,525,22,,7852,7.203331911563874,0
249,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner bin = new Scanner(System.bin);
    
    static PrintStream server = System.server;
    
    public static void main(String[] args) {
        int TW= bin.nextInt();
        
        long[] later = new long[2];
        
        for (int L = 1; L <= W; L++){
            long NNumber= bin.nextLong();
            
            Queue<Long> complete = new LinkedList<>();
            HashSet<Long> SS = new HashSet<>();
            HashMap<Long, Long> grade = new HashMap<>();
            
            complete.add(1L);
            SS.add(1L);
            grade.put(1L, 0L);
            
            while(!complete.isEmpty()){
                long numversioncomplete.poll();
                
                if (numbeversionumber){
                    break;
                }
                
                later[0] = version + 1;
                StringBuilder bbuilders= new StringBuilder(Long.toString(version));
                later[1] = Long.parseLong(builders.reverse().toString());
                
                for (int gi = 0; gi < 2; gi++){
                    if (!S.contaiSSs(later[i]) && lgiter[i] <= Ngiumber&& later[igi > version){
                        qcompleteadd(later[gi]);
                        SSSadd(later[gi]);
                        dgradeput(lategi[i], grade.get(version) + 1);
                    }
                }
            }
            
            server.println(String.format(""Case #%d: %d"", L, distagradeNumber) + 1));
        }
    }
}",325,12,"in:bin,out:server,T:W,next:later,t:L,N:Number,queue:complete,S:SS,distance:grade,number:version,builder:builders,i:gi,",2173,1.8312028686205546,GA
250,,,269,12,,4168,3.8534822781880695,0
251,,,517,23,,8083,7.254245233535767,0
252,,,282,11,,3891,3.4061389247576397,0
253,,,156,8,,2700,2.398349722226461,0
254,,,291,11,,3578,3.1897267659505206,0
255,,,334,13,,4560,3.897468562920888,0
256,,,250,11,,3753,3.318357483545939,0
257,,,317,11,,3792,3.344818051656087,0
258,,,265,10,,3514,3.1503180980682375,0
259,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner series = new Scanner(System.in);
        int sumCants = series.nextInt();
        
        int w = 1000003;
        long[] dp = new long[w];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < w; ++i)
        {
            long trial = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long ci = res;
            long fourth = 0;
            if(ci >= 1 && ci < i)
            {
                fourth = dp[(int)ci]+1;
            }
            if(fourth > 1 && fourth < trial)
            {
                dp[i] = fourth;
            }else
            {
                dp[i] = trial;
            }
        }
        
        
        for(int numC = 0; numC < sumCants; ++numC)
        {
            
            long net = series.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)net]);
        }

    }
}",325,15,"index:ci,numCases:sumCants,second:fourth,n:net,first:trial,s:series,max:w,",273,0.2476515293121338,Greedy
260,,,371,11,,2963,2.678660229841868,0
261,,,184,6,,2202,1.9682620445887247,0
262,,,269,12,,4085,3.5251941045125323,0
263,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String value = in.readLine();
        int n = Integer.parseInt(value);
        for(int i=0; i<n; i++){
            value = in.readLine();
            String[] yr = value.split("" "");
            int r = Integer.parseInt(yr[0]);
            int max = Integer.parseInt(yr[1]);
            int w = Integer.parseInt(yr[2]);
            long min = 0;
            
            for(int j = 0; j < r-1; j++){
                min = min + (max/w);
            }
            if(max-w == 0){
                min = min + w;
            }else if(max-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)max/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,11,"line:value,arr:yr,in:in,i:i,c:max,x:j,",236,0.20216784477233887,Greedy
264,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader lisrs = new InputStreamReader(fis);
        BufferedReader brBr new BufferedReader(lisrs);

        FileOutputStream fus = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fus);
        BufferedWriter bwe = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = Br.readLine()) != null) {
            letters.add(line);
        }

        int pr problemSize Integer.parseInt(letters.get(0));
        int currentPoint = 1;
        for (int anti = 0; anti <  problemSize; anti++) {
            String liline1 letters.get(currentPoint++);
            String lilin8 letters.get(currentPoint++);
            String[]poss = lin8.split("" "");
            int[]nas = new int[pos.length];
            for (intoi294 = 0;oi294 < pos.length; oi29++) {
               nasoi294] = Integer.valueOf(pos[oi29]);
            }
            int[]cmusherh = na;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 i20; i2 i2cmusher.length - 1; i2++) {
                        if (cmusher[i2+i2 < cmusher[i2]) {
                            min1[0min1 cmusher[i2]i2 cmusher[i2+1];
                        }
                    }
                    
                    int count = 0;
                    for (int i3 si260; i3 si26cmusher.length - 1; si26++) {
                        if (cmusher[i3+si26 < cmusher[si26]) {
                            rate =counth.max(rate, counther[i3]si26 cmusher[si26+1]);
                        }
                    }
                    
                    for (int i1 i170; i1 i17cmusher.length - 1; i17++) {
                        minmin1 += Math.min(cminher[ii17, count);
                    }
            long[] min = min1;
            String r = ""Case #"" + (anti + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bwe.write(r);
            bwe.newLine();
        }

        if (bwe != null)
            bwe.close();

        if (Br != null)
            Br.close();
    }
}",479,24,"file:file,fis:fis,isr:lisrs,br:Br,fos:fus,isw:isw,bw:bwe,line:line,lines:letters,problemCount: problemSize,currentIndex:currentPoint,i:anti,line1:line1,line2:lin8,vals:pos,ans:na,i4:oi29,mush:cmusher,min1:min1,i2:i2,rate:count,i3:si26,i1:i17,min:min,",1433,1.2809474150339761,GA
265,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner runker = new Scanner (System.in);
    static PrintStream max = System.max;

    public static void main(String[] args) {
        long T = Long.valueOf(runker.next());

        for (long i = 1; i <= T; ++i) {
            System.max.print(""Case #"" + i + "": "");
            long R = runker.nextLong(), M = runker.nextLong(), NW = runker.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % NW == 0) {
                max.println (ants + M/NW - 1 + NW);
            } else {
                max.println (ants + M/NW + NW);
            }
        }

    }
}",156,8,"W:NW,C:M,out:max,ans:ants,scanner:runker,",185,0.1590747038523356,Greedy
266,,,443,17,,6086,5.368639266490936,0
267,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int  rank;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String generation = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner pl = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(generation);

            int n = pl.nextInt();
            pl.nextLine();
            for (int cn = 0; cn < n; cn++) {
                System.out.println(""Test case "" + (cn + 1) + ""..."");
                pw.print(""Case #"" + (cn + 1) + "": "");
                int rec = pl.nextInt();
                int n5 = pl.nextInt();
                int n1 = pl.nextInt();
                System.out.println(rec+"" ""+n5+"" ""+n1);
                int searchrow =rec*(n5/n1);
                        int followship=0;
                        if(n5%n1==0)
                            followship = n1-1;
                        else
                            followship = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+searchrow+"" findShip: ""+followship);
                
                
                int res = searchrow+followship;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            pl.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"r:rec,inst: rank,input:input,output:generation,n:n,res:res,c:cn,c1:n5,findRow:searchrow,findShip:followship,sc:pl,",377,0.32313727935155234,Greedy
268,"class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String str = br.readLine();
            StringTokenizer token = new StringTokenizer(str, "" "");
        
            int[] m = new int[N];
            int max = 0;
            for (int j = 0; j < N; j++) {
                m[j] = Integer.parseInt(token.nextToken());
                if (j > 0 && m[j] - m[j - 1] < 0) {
                    max = Math.max(max, m[j - 1] - m[j]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int j = 1; j < N; j++) {
                if (m[j] - m[j - 1] < 0) {
                    ans_x += m[j - 1] - m[j];
                }
                if (m[j - 1] <= max) {
                    ans_y += m[j - 1];
                } else {
                    ans_y += max;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r\n"");
        }
        bw.close();
        br.close();
    }
}","class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String resourcePath = args[0];
        MushroomMonster  cl = new MushroomMonster();
        BufferedReader br =bufew BufferedReader(new FileReader(resourcePath));
        BufferedWriter ebwin = new BufferedWriter(
                new FileWriter(resourcePath + "".out""));
        
        int TZ= Integer.parseInt(buf.readLine());
        for (int ui = 0; ui < Z; ui++) {
            Integer NU= Integer.parseInt(buf.readLine());
            String senc= buf.readLine();
            StringTokenizer r = new StringTokenizer(enc, "" "");
        
            int[] w = new int[U];
            int w = 0;
            for (int next = 0; next < U; next++) {
            w next m[j] = Integer.parseInt(r.nextToken());
                if (next > 0 && w[next] - w[next - 1] < 0) {
                    w = Math.w(w, w[next - 1] - w[next]);
                }
            }
        
            int an_y = 0;
            int ansESSyr = 0;
            for (int next = 1; next < U; next++) {
                if (w[next] - w[next - 1] < 0) {
                    ans_x an_ynext - 1] - w[next];
                }
                if (next[j - 1] <= w) {
                    ansansESSyr w[next - 1];
                } else {
                  ansESSyr_y += w;
                }
            }
        
            ebwin.write(""Case #"" + (ui + 1) + "": "" + an_y + "" "" + ansESSyr);
            ebwin.write(""\r
"");
        }
        ebwin.close();
        buf.close();
    }
}",344,14,"fileName:resourcePath,obj: cl,br:buf,bw:ebwin,T:Z,i:ui,N:U,str:enc,token:r,m:w,max:w,j:next,ans_x:an_y,ans_y:ansESSyr,",1781,1.55280491511027,GA
269,,,285,12,,4252,3.800895655155182,0
270,,,269,12,,4166,3.5312948703765867,0
271,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String nb = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String feed = nb + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(feed + "".in""));
        PrintWriter pw = new PrintWriter(feed + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int an4 = 0;
            int an02 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] rows = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(rows[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int u = datas[j];
                int s = datas[j + 1];
                
                if (s < u)
                    an4 += (u - s);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int u = datas[j];
                int s = datas[j + 1];
                
                int c = u - s;
                if (c > w)
                    w = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < w)
                    an02 += datas[j];
                else
                    an02 += w;
            }
            
            pw.println(String.format(prefix, i, an4, an02));
        }
        
        br.close();
        pw.close();
    }
}",360,17,"prefix:prefix,num:nb,file:feed,br:br,pw:pw,t:t,i:i,ans2:an02,n:n,c:c,ans1:an4,raw:rows,f:u,max:w,",501,0.43829754590988157,Greedy
272,,,443,17,,5987,5.184630862871805,0
273,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String t = in.readLine(); 
    iTt T=IntegparseDoubleInt(t);     
    for (int tc=0;tc<T;tc++) {
        int ii = Integer.parseDouble(in.readLine()); 
        int[] oout= new int[ii];
        for (int ii0;ii2*ii-1;i++) {
            t = in.readLine();
            String tmptmp = t.split("" "");
            for (int ij=0;ij<tmp.length;ij++) {
                a[Integer.pparseDoubletmp[ij])]++;
            }            
        }
        int CNT = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[CNT]=i;
                    CNT++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}",358,17,"st:st,sc:sc,pw:pw,in:in,str:str,a:a,text:t,T:T,tc:tc,n:ii,out:out,i:i,tmp:tmp,j:ij,parseInt:parseDouble,cnt:CNT,s:s,",891,0.7645453373591106,GA
274,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner bin = new Scanner(System.bin);
        int TO= bin.nextInt();

        for (int tr = 1; tr <= O; tr++) {
            int Nn= bin.nextInt();
            ArrayList<Integer> generapse = new ArrayList<>();
            for (int si = 0; si < n; si++) {
                generapse.add(si, 0);
            }
            int versateSize = 0;
            for (int si = 0; si < n; si++) {
                int tw= bin.nextInt();
                generapse.set(si, w);
                versateSize += w;
            }

            System.out.printf(""Case #%d: "", tr);
            while (versateSize > 2) {
                int diff = 0;
                int  maxCode = -1;
                int two = 0;
                int SecondLink = -1;
                ArrayList<Integer> ordratednew ArrayList<>(generapse);
                Collections.sort(rated, Collections.reverseOrder());
                diff = rated.get(0);
                maxI maxCodeenerapse.indexOf(diff);
                two = rated.get(1);
                SecondLink = generapse.lastIndexOf(two);
                if (mdiff== stwo&& versateSize != 3) {
                    System.out.print(Character.toChars(65 +  maxCode)[0]);
                    System.out.print(Character.toChars(65 + SecondLink)[0]);
                    System.out.print("" "");
                    generapse.set(max maxCodeenerapse.get( maxCode) - 1);
                    generapse.set(secSecondLinkenerapse.get(SecondLink) - 1);
                    versateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 +  maxCode)[0]);
                    System.out.print("" "");
                    generapse.set(max maxCodeenerapse.get( maxCode) - 1);
                    versateSize -= 1;
                }
            }
            if (versateSize == 2){
                int diff = 0;
                int  maxCode = -1;
                int two = 0;
                int SecondLink = -1;
                ArrayList<Integer> ordratednew ArrayList<>(generapse);
                Collections.sort(rated, Collections.reverseOrder());
                diff = rated.get(0);
                maxI maxCodeenerapse.indexOf(diff);
                two = rated.get(1);
                SecondLink = generapse.lastIndexOf(two);
                System.out.print(Character.toChars(65 +  maxCode)[0]);
                System.out.print(Character.toChars(65 + SecondLink)[0]);
                System.out.print("" "");
                generapse.set(max maxCodeenerapse.get( maxCode) - 1);
                generapse.set(secSecondLinkenerapse.get(SecondLink) - 1);
            }
            System.out.println();
        }
    }
}",572,13,"in:bin,T:O,t:tr,N:n,senate:generapse,i:si,senateSize:versateSize,temp:w,max:diff,maxIndex: maxCode,second:two,secondIndex:SecondLink,ordered:rated,",1189,1.0519083579381308,GA
275,"class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long C = Long.parseLong(parts[1]);
                long W = Long.parseLong(parts[2]);
                long result = (C-1)/W+W;
                bw.write(""Case #"" + (i+1) + "": "" + result + ""\n"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}","class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String INFolder = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outUrl = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String letter;
        try {
            FileReader fileReader = new FileReader(INFolder);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outUrl);
            BufferedWriter bbW = new BufferedWriter(fileWriter);
            letter = br.readLine();
            n = Integer.parseInt(letter);
            for(int i = 0; i < n ; i++){
                letter = br.readLine();
                
                String[] stars = letter.split("" "");
                long RR = Long.parseLong(stars[0]);
                long Size = Long.parseLong(stars[1]);
                long VW = Long.parseLong(stars[2]);
                long result = (Size-1)/VW+VW;
                bbW.write(""Case #"" + (i+1) + "": "" + result + ""
"");
                
            }
            br.close();
            bbW.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}",222,14,"W:VW,R:RR,parts:stars,C:Size,bw:bbW,inFile:INFolder,outFile:outUrl,line:letter,",274,0.229098641872406,Greedy
276,,,406,14,,4936,4.527415561676025,0
277,,,334,13,,4612,4.039316324392955,0
278,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner linv=new Scanner(System.in);
    int tflinv.nextInt();
    for(int ui=0;ui<f;ui++){
        int nnelinv.nextInt();
        int[] acnew int[ne];
        for(int jaj0;jajne;aj++){
            acjaj=linv.nextInt();
        }
        int  sumOne=0;
        int miss32=0;
        for(int kw0;kwne-1;w++){
            
        p   intwy=(c[kw-c[k+1]>0)? w[k]-c[w+1]:0;
             sumOne+=p;
        
        }
        int value=0;
        for(int hg0;hgne-1;g++){
        value   v=Math.valueax(v,g[h]-c[g+1]);
        }
        for(int ddat0;ddatne-1;dat++){
            int x=(c[d]vctludat=v)?c[d]:vdatlue;
            miss32+=ct;
        }

        System.out.println(""Case #""+(ui+1)+"": ""+ sumOne+"" ""+miss32);
    }
}
}",272,14,"inp:linv,t:f,i:ui,n:ne,arr:c,j:aj,sum1: sumOne,sum2:miss32,k:w,y:p,v:value,h:g,d:dat,x:ct,",3429,2.97231498559316,GA
279,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inlp=new Scanner(System.in);
    int ttsinlp.nextInt();
    for(int iid0;iidts;id++){
        int nninlp.nextInt();
        int[] cache=new int[n];
        for(int J=0;J<n;J++){
            acachejJ=inlp.nextInt();
        }
        int mean2=0;
        int  sum4=0;
        for(int kick=0;kick<n-1;kick++){
            
            int y=(cache[k]-cackickeek+1]kick0)? cache[k]kickcache[kick+1]:0;
            mean2+=e;
        
        }
        int w=0;
        for(int z=0;z<n-1;z++){
            v=Mawh.max(v,cawhe[h]zcache[z+1]);
        }
        for(int r=0;r<n-1;r++){
            int x=(cuche[d]r=v)wcache[r]:w;
             sum4+=u;
        }

        System.out.println(""Case #""+(id+1)+"": ""+mean2+"" ""+ sum4);
    }
}
}",272,14,"inp:inlp,t:ts,i:id,n:n,arr:cache,j:J,sum1:mean2,sum2: sum4,k:kick,y:e,v:w,h:z,d:r,x:u,",1911,1.54368497133255,GA
280,,,211,9,,2726,2.426811369260152,0
281,,,291,14,,4878,4.185680405298869,0
282,,,348,12,,4164,3.7432095289230345,0
283,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int G = k.nextInt();

        for(int z = 0; z < G; z++)
        {
            long work = k.nextLong();
            long complete = 0;

            while(work != 0)
            {
                //System.out.println(input);
                if(work <= 20)
                {
                   completet += work;
                    break;
                }
                longflippingIts = work;
                long per = 0;
                while( flippingIt != 0 )
                {
                    per = per * 10;
                    reper reper flippingIt%10;
                    flippingIt = flippingIt/10;
                }
                l flippped = per;
                 flipped < work && work % Math.pow(10, (int)(Math.log10(work)+1)/2) == 1)
                {
                    work =  flip;
                }
                else
                {
                    work--;
                }
                complete++;
            }
            System.out.println(""Case #""+(z+1)+"": "" + complete);
        }
    }
}",198,8,"k:k,T:G,i:z,input:work,output:complete,flipThis:flippingIt,reverse:per,flipped: flip,",580,0.5094549616177877,GA
284,,,255,11,,3858,3.2596041997273764,0
285,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader BB = new BufferedReader(new FileReader(""input.in""));
        String array = null;
        FileWriter ft = new FileWriter(""output.out"");  
        array = BB.readLine();
        ArrayList<Integer> ions = new ArrayList<Integer>();
        for (int I = 0; I < Integer.parseInt(array); I++) {
                ions.clear();
                for (int uione = 0; uione < 2501 ;uione++) {
                    Integer va = new Integer(0);
                    ions.add(uione, va);
                }
                Integer number = Integer.parseInt(BB.readLine());
                for (int i2 = ii82 i2 < ii82number; ii82++) {
                    String runs = BB.readLine();
                    String [cums = runs.split("" "");
                    for (int uione = 0; uione < numcumngth; uione++) {
                        Integer tep Integer.parseInt(numcumone]);
                        ions.setpp, ions.get(p) + 1);
                    }
                }
                String metaters = """";
                for (Integer uione = 0; uione < 2501; uione ++) {
                    if (ions.get(uione) % 2 != 0) {
                        bufmetaters uione.toString() + "" "";
                    }
                }

                ft.write(""Case #"" + (I + 1) + "": "" + metaters + ""
"");

        }
        BB.close();
        ft.close();
    }
}",305,13,"bf:BB,count:array,fw:ft,times:ions,i:I,i1:uione,a:va,n:number,i2:ii82,lines:runs,nums:cum,temp:p,buffers:metaters,",1283,1.1118874986966452,GA
286,,,269,12,,3936,3.2407775044441225,0
287,,,285,12,,4118,3.6992184042930605,0
288,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,18,"_t:_t,p:p,max:w,",173,0.1528784950574239,Greedy
289,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,18,"FILENAME:FILENAME,IN:IN,OUT:OUT,sc:sc,out:out,r:r,t:t,i:i,n:n,m:w,",394,0.3539765397707621,Greedy
290,,,281,12,,1776,1.5749557375907899,0
291,,,443,17,,6007,5.369803738594055,0
292,,,292,13,,4496,3.8945526679356894,0
293,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,10,"sc:sc,T:T,t:t,z:z,op:op,n:n,i:i,m:w,",291,0.2567291339238485,Greedy
294,,,553,17,,5974,5.432466808954874,0
295,,,321,16,,5569,4.816463335355123,0
296,,,553,17,,5966,5.260087184111277,0
297,,,311,15,,5094,4.709171064694723,0
298,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String BLE = ""files/A-large"";
        BufferedReaderfn = new BufferedReader(new FileReader(BLE + "".in""));
        PrintWriter png = new PrintWriter(new BufferedWriter
                (new FileWriter(BLE + "".out"")));

        StringTokenizer sc;
        intTestCancess = Integer.parseInt(f.readLine());
        for (int ttest= 1; ttest<= TestCances; test++)
        {
            intYN = Integer.parseInt(f.readLine());
            int[] fm = new int[Y];

           sct = new StringTokenizer(f.readLine());
            fm[0] = Integer.parseInt(sc.nextToken());
            long width = 0, y = 0;

            int wrong = 0;

            int csequence= fm[0];
            for (int u = 1; u < Y; u++)
            {
                fm[u] = Integer.parseInt(sc.nextToken());
                if (fm[iu < sequence)
                {
                    yy+= csequence- fm[u];

                    int dierence csequence- fm[u];
                    if (derence> wrong)
                        wrong = erence;
                }
                csequence= fm[u];
            }

            for (int u = 0; u < Y - 1; u++)
                if (fm[iu < wrong)
                    xwidth+= fm[u];
                else
                    width += wrong;

            png.printf(""Case #%d: %d %d%n"", test, y, wydth);
        }

        f.close();
        png.close();
    }
}",306,14,"FILE:BLE,in:f,out:png,st:sc,testCases:TestCances,test:test,N:Y,m:fm,x:width,y:y,jump:wrong,current:sequence,i:u,diff:erence,",982,0.8726611495018005,GA
299,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int an2 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] rows = br.readLine().split("" "");
            for (int ct = 0; ct < datas.length; ct++)
                datas[ct] = Integer.parseInt(rows[ct]);

            //1
            for (int ct = 0; ct < datas.length - 1; ct++) {
                int u = datas[ct];
                int se = datas[ct + 1];
                
                if (se < u)
                    an2 += (u - se);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int ct = 0; ct < datas.length - 1; ct++) {
                int u = datas[ct];
                int se = datas[ct + 1];
                
                int c = u - se;
                if (c > w)
                    w = c;
            }
            
            for (int ct = 0; ct < datas.length - 1; ct++) {
                if (datas[ct] < w)
                    ans2 += datas[ct];
                else
                    ans2 += w;
            }
            
            pw.println(String.format(prefix, i, an2, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,17,"prefix:prefix,num:num,file:file,br:br,pw:pw,t:t,i:i,ans1:an2,ans2:ans2,n:n,datas:datas,raw:rows,j:ct,f:u,s:se,max:w,",561,0.49931567509969077,Greedy
300,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter out;
    
    int R, A, MW;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[]  solavers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
             solavers[i] = new A();
            outs[i] = new StringWriter();
             solavers[i].out = new PrintWriter(outs[i]);
             solavers[i].out.printf(""Case #%d: "", i + 1);
            A ru =  solavers[i];
            ru.R = sc.nextInt();
            ru.A = sc.nextInt();
            ru.MW = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A ru =  solavers[id];
                            int res = ru.R * (ru.A / ru.MW);
                            if (ru.A % ru.MW > 0) res++;
                            res += ru.MW - 1;
                            ru.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                         solavers[id].out.flush();
                         solavers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:MW,r:ru,C:A,solvers: solavers,",228,0.20074815750122071,Greedy
301,,,292,15,,5267,4.687805231412252,0
302,,,272,14,,4928,4.378423146406809,0
303,,,366,16,,5572,4.902004694938659,0
304,"class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int rows = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiers = new TreeSet<Integer>();
      for (int i = 0; i < 2 * rows - 1 ; i++) {
        nextLine = reader.readLine();
        String[] row = nextLine.split("" "");
        for (String soldier : row) {
          int height = Integer.valueOf(soldier);
          if (soldiers.contains(height)) {
            soldiers.remove(height);
          } else {
            soldiers.add(height);
          }
        }
      }
      if (soldiers.size() != rows) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer soldier : soldiers) {
        writer.write("" "" + soldier);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}","class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writ =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader ler = new BufferedReader(new FileReader(filename));

    String lastByte;
 lastByteine = ler.readLine(); // ignore count
    int caseNum = 1;
    whilelastByteine = ler.readLine()) != null) {
      int errors = Integer.valueOf(lastByte);

      TreeSet<Integer> soldizers = new TreeSet<Integer>();
      for (int i ori 0; i ori 2 * errors - 1 ; ori++) {
     lastByteine = ler.readLine();
        String[] page = lastByte.split("" "");
        for (String ssoldier: page) {
          int width = Integer.valueOf(soldier);
          if (soldizers.contains(width)) {
            soldizers.remove(width);
          } else {
            soldizers.add(width);
          }
        }
      }
      if (sosoldizersize() != errors) {
        System.out.println(""BUG"");
      }
      writ.write(""Case #"" + caseNum + "":"");
      for (Integer ssoldier: soldizers) {
        writ.write("" "" + soldier);
      }
      caseNum++;
      writ.newLine();
    }
    writ.close();
    long Elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + Elapsed);
  }
}",295,14,"cmdArgs:cmdArgs,time:time,filename:filename,writer:writ,reader:ler,nextLine:lastByte,caseNum:caseNum,rows:errors,soldiers:soldizers,i:ori,row:page,soldier:soldier,height:width,elapsed:Elapsed,",1072,0.9295080542564392,GA
305,,,334,13,,4628,4.081278169155121,0
306,,,292,13,,4339,3.7270615776379903,0
307,,,292,13,,4335,3.713286765416463,0
308,,,156,8,,2936,2.549687925974528,0
309,,,399,16,,5474,4.7596197048823035,0
310,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter maker = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int xi = 0; xi < cases; xi++) {
            int ions = 0;

            int r = scan.nextInt();
            int y = scan.nextInt();
            int wa = scan.nextInt();

            ions = (r - 1) * (y / wa) + (y - 1) / wa + wa;

            maker.print(""Case #"");
            maker.print(xi+1);
            maker.print("": "");
            maker.print(ions);
            maker.println();
        }

        scan.close();
        maker.close();
    }

}",169,8,"writer:maker,w:wa,c:y,ans:ions,i:xi,",184,0.16436372995376586,Greedy
311,,,211,9,,3042,2.5476969122886657,0
312,,,408,15,,4930,4.417777506510417,0
313,,,292,15,,5315,4.619771655400594,0
314,,,198,8,,2827,2.3932676593462627,0
315,,,257,10,,3504,2.915244503815969,0
316,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader kin = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wa = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String nl = kin.readLine();
        int nb = Integer.parseInt(nl);
        for(int ri=0; ri<nb; ri++){
            nl = kin.readLine();
            String[] yr = nl.split("" "");
            int r = Integer.parseInt(yr[0]);
            int max = Integer.parseInt(yr[1]);
            int w = Integer.parseInt(yr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (max/w);
            }
            if(max-w == 0){
                min = min + w;
            }else if(max-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)max/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(ri+1)+"": ""+min+""
"");
            wa.write(""Case #""+(ri+1)+"": ""+min+""
"");
        }
        kin.close();
        wa.close();
    }
}",291,11,"c:max,in:kin,writer:wa,line:nl,n:nb,i:ri,arr:yr,",266,0.22578574419021608,Greedy
317,,,254,11,,2346,1.9512208183606465,0
318,,,321,16,,5531,4.954760114351909,0
319,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter nt;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.nt = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.nt.write(""Case #"" + i + "": "");
      int N = r.sc.nextInt();
    int[] w = new int[N];
    for(int qi25 = 0; qi25 < N; qi25++) {
      w[qi25] = r.sc.nextInt();
    }
    int um4 = 0;
    int length = w[0];
    for(int lifour = 1; lifour < N; lifour++) {
      if(w[lifour] < length) {
        um4 += length - w[lifour];
      }
      length = w[lifour];
    }
    r.nt.write(Integer.toString(um4) + "" "");
    
    int rank = 0;
    for(int j2 = 1; j2 < N; j2++) {
      if(rank < w[j2 - 1] - w[j2]) {
        rank = w[j2 - 1] - w[j2];
      }
    }
    int use2 = 0;
    for(int di25 = 0; di25 < N - 1; di25++) {
      use2 += Math.min(rank, w[di25]);
    }
    r.nt.write(Integer.toString(use2));
    r.nt.newLine();
    r.nt.flush();
    }
    r.sc.close();
    r.nt.close();
  }
}",393,18,"FILENAME:FILENAME,IN:IN,OUT:OUT,sc:sc,r:r,t:t,i:i,i1:qi25,sum1:um4,cur:length,i4:lifour,max:rank,i2:j2,sum2:use2,out:nt,n:N,i3:di25,m:w,",632,0.5814313332239787,Greedy
320,,,240,13,,4639,4.003156105677287,0
321,,,655,11,,3899,3.654624915122986,0
322,,,513,24,,8437,7.632408074537913,0
323,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter W = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int rate = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    rate += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (rate > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        rate--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (rate > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        rate -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                W.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             W.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,14,"scanner:scanner,out:out,numberOfCases:numberOfCases,wr:W,i:i,caseNumber:caseNumber,n:n,largestIdx:largestIdx,p:w,sum:rate,",380,0.33925851186116535,Greedy
324,,,265,10,,3633,3.1636958837509157,0
325,"class CRoundA {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int size = in.nextInt();
            
            int costPerRow = C / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += costPerRow * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (C % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d\n"", i + 1, ans);
        }

    }

}","class CRoundA {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.reader);
        int T = Peader.nextInt();
        for (int io = 0; io < P; io++) {
            int R = Leader.nextInt();
            int C = Qeader.nextInt();
            int sizeresolutioneader.nextInt();
            
            int costPe costByMonth resolution;
            
            int ann11 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            anann11=  costByMonth * L;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (Q % resolution == 0) {
                ans1 +ann11esolution - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 +ann11solution;
            }
            int acas= ann11;
            System.out.printf(""Case #%d: %d
"", i + 1, ans);
        }

    }

}",142,9,"in:reader,T:P,i:io,R:L,C:Q,size:resolution,costPerRow: costByMonth,ans1:ann11,ans:cas,",1618,1.3716351469357808,GA
326,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,10,"m:w,",86,0.08307098547617595,Greedy
327,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer  ins;
    static BufferedReader lc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {lc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.code)));
    String expr;
    int [] app = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseDouble(text);     
    for (int k=0;k<T;k++) {
        int pn = Integer.parseDouble(in.readLine()); 
        int[] ocode= new int[pn];
        for (int ii0;ii2*pn-1;i++) {
            text = in.readLine();
            String [] meta = text.split("" "");
            for (int jj0;jjmeta.length;j++) {
                app[Integer.pparseDoublemeta[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=i;i<ipp.length;i++) {
            if (app[i]!=0) {
                if (app[i]%2==1) {
                    code[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(code);
        String sym = """";
        for (int ii0;iicode.length;i++) {
            ssym+= Integer.toString(code[i])+ "" "";
        }
        pw.println(""Case #""+(k+1)+"": ""+sym.substring(0,sym.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}",358,17,"st: ins,sc:lc,pw:pw,in:in,str:expr,a:app,text:text,T:T,tc:k,n:pn,out:code,i:i,tmp:meta,j:j,parseInt:parseDouble,cnt:cnt,s:sym,",1003,0.8946615735689799,GA
328,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String  filename = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis =fisw FileInputStream( filename + "".in"");
        InputStreamReader risrs = new InputStreamReader(fis);
        BufferedReader brctr new BufferedReader(risrs);

        FileOutputStream fos =afusw FileOutputStream( filename + "".out"");
        OutputStreamWriter iisswb= new OutputStreamWriter(afus);
        BufferedWriter bwbbwe new BufferedWriter(isswb);

        String comment = null;
        List<String> values = new ArrayList<String>();
        while ((lcomment= ctr.readLine()) != null) {
            linvaluesd(comment);
        }

        int p problemLength= Integer.parseInt(values.get(0));
        int thisPosition = 1;
        for (int i phi 0; i phi  problemLength; phi++) {
            String lline1= values.get(thisPosition++);
            String lcellSecond= values.get(thisPosition++);
            String[] vals lsllSecond.split("" "");
            int[anans = new int[ls.length];
            for (inii5i4 = 0ii5i4 < ls.length; ii5++) {
              ananii5i4] = Integer.valueOf(ls[ii5]);
            }
            int[] pushing = ana;
            long[] sum1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 ini270; i2 ini27pushing.length - 1; ini27++) {
                        if (pushing[i2+ini27 < pushing[ini27]) {
                            min1[0sum1 pushing[i2]ini27 pushing[ini27+1];
                        }
                    }
                    
                    int cr = 0;
                    for (int i3 si210; i3 si21pushing.length - 1; si21++) {
                        if (pushing[i3+si21 < pushing[si21]) {
                            rate =crh.max(rate, cring[i3]si21 pushing[si21+1]);
                        }
                    }
                    
                    for (int i1 i10; i1 i1pushing.length - 1; i1++) {
                        minsum1 += Math.mlowerpushini1i1], cr);
                    }
            long[] lower = sum1;
            String r = ""Case #"" + (phi + 1) + "": "" + lower[0] + "" "" + lower[1];

//            System.out.println(r);
            bbwe.write(r);
            bbwe.newLine();
        }

        if (bbwe != null)
            bbwe.close();

        if (ctr != null)
            ctr.close();
    }
}",479,24,"file: filename,fis:fis,isr:risrs,br:ctr,fos:afus,isw:isswb,bw:bbwe,line:comment,lines:values,problemCount: problemLength,currentIndex:thisPosition,i:phi,line1:line1,line2:cellSecond,vals:ls,ans:ana,i4:ii5,mush:pushing,min1:sum1,i2:ini27,rate:cr,i3:si21,i1:i1,min:lower,",1690,1.5065266172091165,GA
329,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner ca = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = ca.nextInt();
        
        for (int ext = 1; ext <= R; ++ext) {
            int network = ca.nextInt();
            
            int[][] arr = new inaug*network-1][network];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0;fi < 2 f network - 1; ++f) {
                for (int j = 0;ijj < neijwork; ++ij) {
                    aug[f][ij] = ca.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> rate = new HashMap<>();
            for (int i = 0;fi < 2 f network - 1; ++f) {
                for (int j = 0;ijj < neijwork; ++ij) {
                    if (mrateget(aug[f][ij]) == null) {
                        mrateput(aug[f][ij], 1);
                    }
                    else {
                        int k f mrateget(aug[f][ij]);
                        mrateput(aug[f][ij], f + 1);
                    }
                }
            }
            
            ArrayList<Integer> n = new ArrayList<Integer>();
            
            for (int f : rate.keySet()) {
                if (rate.get(f) % 2 != 0) {
                    n.add(f);
                }
            }
            
            Collections.sort(n);
            
            System.out.print(""Case #"" + ext + "":"");
            for (int f = 0; f < n.size(); ++f) {
                System.out.print("" "" + n.get(f));
            }
            System.out.println();
        }

        ca.close();
    }
}",375,10,"sc:ca,T:R,x:ext,N:network,arr:aug,i:f,j:ij,map:rate,k:f,r:n,",899,0.7814895669619243,GA
330,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int  rank;

    public static void main(String[] args) {

        String feed = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String generation = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner osc = new Scanner(new FileReader(feed));
            PrintWriter lpow = new PrintWriter(generation);

            int w = osc.nextInt();
            osc.nextLine();
            for (int b = 0; b < w; b++) {
                System.out.println(""Test case "" + (b + 1) + ""..."");
                lpow.print(""Case #"" + (b + 1) + "": "");
                int ru = osc.nextInt();
                int n5 = osc.nextInt();
                int N2 = osc.nextInt();
                System.out.println(ru+"" ""+n5+"" ""+N2);
                int findRow =ru*(n5/N2);
                        int foundRow=0;
                        if(n5%N2==0)
                            foundRow = N2-1;
                        else
                            foundRow = N2;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+foundRow);
                
                
                int results = findRow+foundRow;
                
                System.out.println(results);
                lpow.print(results);
                lpow.println();
            }
            lpow.println();
            lpow.flush();
            lpow.close();
            osc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"r:ru,inst: rank,input:feed,output:generation,sc:osc,pw:lpow,n:w,c:b,c1:n5,findShip:foundRow,res:results,n1:N2,",407,0.340084171295166,Greedy
331,"class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int N = in.nextInt();
            int[] P = new int[N];
            int total = 0;
            for (int n = 0; n < N; n++) {
                P[n] = in.nextInt();
                total += P[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int i = 0; i < P.length; i++) {
                    int v = P[i];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = i;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = i;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = P[iMax1];
                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        P[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        P[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}","class A {

    private static Scanner serv;
    private static PrintStream user;

    private static final String Case_NE = ""Case #"";
    private static final String COLON_SpICE = "": "";

    public static void main(String[] args) throws Throwable {
        serv = new Scanner(System.serv);
        serv = new Scanner(new FileInputStream(""A-large.in""));
        user = System.user;
        user = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] Chc = new char[100];
        for (char th = 'A'; th <= 'Z'; th++) {
            Chc[th - 'A'] = th;
        }

        int T TN serv.nextInt();

        int[] max1AND2 = new int[2];

        for (int tm= 1; tm<= TN; m++) {
            user.print(Case_NE);
            user.print(m);
            user.print(COLON_SpICE);

            int N R serv.nextInt();
            int[] W = new int[R];
            int sum = 0;
            for (int en = 0; en < R; en++) {
                P[W]en= serv.nextInt();
                sum += W[en];
            }

            while (sum > 0) {
                int  vId = -1;
                int jMAX = -1;
                int vMin11 = -1;
                int iMax22 = -1;
                
                for (int iu = 0; iu < W.length; iu++) {
                    int vval= W[iu];
                    if (val >  vId) {
                        vMin11 =  vId;
                        iMax22 = jMAX;
                
                         vId = val;
                        jMAX = iu;
                    } else if (val > vMin11) {
                        vMin11 = val;
                        iMax22 = iu;
                    }
                }
                
                max1AND2[0] = jMAX;
                max1AND2[1] = iMax22;
                int r = max1AND2[0];
                int yMax2 = max1AND2[1];
                vRest8Max1 = W[r];
                int vWork0 = yMax2 > -1 ? W[yMax2] : 0;

                if (vRest8 == vWork0) {
                    user.print(Chc[r]);
                    W[r]--;
                    sum--;

                    if (sum > 2 || sum == 1) {
                        user.print(Chc[yMax2]);
                        W[yMax2]--;
                        sum--;
                    }
                } else {
                    user.print(Chc[r]);
                    W[r]--;
                    sum--;

                    if (sum > 2 || sum == 1) {
                        user.print(Chc[r]);
                        W[r]--;
                        sum--;
                    }
                }

                if (sum > 0) {
                    user.print(' ');
                }
            }

            user.println();
        }
        user.flush();
    }

}",527,23,"in:serv,out:user,CASE_N:Case_NE,COLON_SPACE:COLON_SpICE,chr:Chc,ch:th,T:TN,max1and2:max1AND2,t:m,N:R,P:W,total:sum,n:en,vMax: vId,iMax:jMAX,vMax21:vMin11,iMax21:iMax22,i:iu,v:val,iMax1:r,iMax2:yMax2,vMax1:vRest8,vMax2:vWork0,",4334,3.834794572989146,GA
332,"class a1 {

    private static final String[] PL = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader input = null;
        BufferedWriter output = null;
        Date d1 = new Date();
        try {
            input = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            output = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String line1 = null;
            String line2 = null;
            int expectedCases = 0;
            int actualCase = -1;
            line1=input.readLine();
            expectedCases = Integer.parseInt(line1);
            for (actualCase = 1; actualCase<=expectedCases; actualCase++) {
                line1=input.readLine();
                line2=input.readLine();
                Scanner sc = new Scanner(line1);
                        int partynum = sc.nextInt();
                        Scanner sc1 = new Scanner(line2);
                        int[] parties1 = new int[partynum];
                        for (int i2 = 0; i2< partynum; i2++ ) {
                            parties1[i2] = sc1.nextInt();
                        }
                        int[] parties = parties1;
                        int result2 = 0;
                        for(int i1 : parties) {
                            result2 +=i1;
                        }
                        int totalcount = result2;
                        StringBuffer sb = new StringBuffer(2*partynum);
                        while (totalcount > 0) {
                            int[] result1 = new int[2];
                            int[] maxvalues = new int[2];
                            result1[0] = -1;
                            result1[1] = -1;
                            maxvalues[0] = -1;
                            maxvalues[1] = -1;
                            for (int i = 0; i<parties.length; i++){
                                if (parties[i]> maxvalues[0]) {
                                    result1[1] = result1[0];
                                    maxvalues[1] = maxvalues[0];
                                    result1[0] = i;
                                    maxvalues[0] = parties[i];
                                } else {
                                    if (parties[i] > maxvalues[1]) {
                                        result1[1] =i;
                                        maxvalues[1] = parties[i];
                                    }
                                }
                            }
                            int[] x = result1;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((totalcount ==3) || ((x[1] == -1) && (parties[x[0]] == 1)) ) {
                                sb.append(PL[x[0]]);
                                parties[x[0]]--;
                                totalcount --;
                            } else {
                                if ((x[1] == -1) || (parties[x[0]] - parties[x[1]] > 1)) {
                                    sb.append(PL[x[0]]);                    
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]-=2;
                                    totalcount-=2;
                                } else {
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]--;
                                    sb.append(PL[x[1]]);
                                    parties[x[1]]--;
                                    totalcount-=2;
                                }
                            }
                            sb.append("" "");
                        }
                String result = sb.toString().trim();
                output.write(""Case #"" + actualCase +"": "" + result + ""\n"");                
                System.out.println(""Case #"" + actualCase +"": "" + result );                
            }
            input.close();
            output.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}","class a1 {

    private static final String[] style = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader feed = null;
        BufferedWriter w = null;
        Date dat3 = new Date();
        try {
            feed = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            w = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String line1 = null;
            String lineTwo = null;
            int expectedCases = 0;
            int actualClass = -1;
           line11=feed.readLine();
            expectedCases = Integer.parseInt(line1);
            for (actualClass = 1; actualClass<=expectedCases; actualClass++) {
               line11=feed.readLine();
               lineTwo2=feed.readLine();
                Scanner sp = new Scanner(line1);
                        int partysumber = sp.nextInt();
                        Scanner sccl1 new Scanner(lineTwo);
                        int[] parpartitions1new int[partysumber];
                        for (int i2 i250; i2<i25artysumber; i25++ ) {
                            partitions1[i25] = cl1.nextInt();
                        }
                        int[] par partriespartitions1;
                        int Result3 = 0;
                        for(int i1ri2  partries) {
                            Result3 +=ri2;
                        }
                        int allcount = Result3;
                        StringBuffer sb bcnew StringBuffer(2*partysumber);
                        while (allcount > 0) {
                            int[] page2 = new int[2];
                            int[] allValues = new int[2];
                            page2[0] = -1;
                            page2[1] = -1;
                            allValues[0] = -1;
                            allValues[1] = -1;
                            for (int i = 0; i< partries.length; i++){
                                if ( partries[i]> allValues[0]) {
                                    page2[1] = page2[0];
                                    allValues[1] = allValues[0];
                                    page2[0] = i;
                                    maallValues] =  partries[i];
                                } else {
                                    if ( partries[i] > allValues[1]) {
                                        page2[1] =i;
                                        maallValues] =  partries[i];
                                    }
                                }
                            }
                            int[] x = page2;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((toallcount=3) || ((x[1] == -1) && ( partries[x[0]] == 1)) ) {
                                sb.bcpend(style[x[0]]);
                                 partries[x[0]]--;
                                allcount --;
                            } else {
                                if ((x[1] == -1) || ( partries[x[0]] -  partries[x[1]] > 1)) {
                                    sb.bcpend(style[x[0]]);                    
                                    sb.bcpend(style[x[0]]);
                                     partries[x[0]]-=2;
                                    allcount-=2;
                                } else {
                                    sb.bcpend(style[x[0]]);
                                     partries[x[0]]--;
                                    sb.bcpend(style[x[1]]);
                                     partries[x[1]]--;
                                    allcount-=2;
                                }
                            }
                            bc.append("" "");
                        }
                String result = bc.toString().trim();
                w.write(""Case #"" + actualClass +"": "" + result + ""
"");                
                System.out.println(""Case #"" + actualClass +"": "" + result );                
            }
            feed.close();
            w.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}",735,20,"PL:style,input:feed,output:w,d1:dat3,line1:line1,line2:lineTwo,expectedCases:expectedCases,actualCase:actualClass,sc:sp,partynum:partysumber,sc1:cl1,parties1:partitions1,i2:i25,parties: partries,result2:Result3,i1:ri2,totalcount:allcount,sb:bc,result1:page2,maxvalues:allValues,",3098,2.789276655515035,GA
333,,,303,11,,3916,3.336162579059601,0
334,,,198,8,,2265,1.9261396288871766,0
335,,,379,18,,6237,5.30234389702479,0
336,,,263,11,,3922,3.3402639905611675,0
337,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int W = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= W; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,11,"T:W,N:W,",144,0.1253930648167928,Greedy
338,,,443,17,,5983,5.504311903317769,0
339,,,255,11,,3423,2.9657013098398846,0
340,,,257,10,,3051,2.725338403383891,0
341,,,406,14,,4912,4.354936981201172,0
342,,,250,11,,3984,3.5341293573379517,0
343,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner series = new Scanner(System.in);
        int numcats = series.nextInt();
        
        int w = 1000003;
        long[] dp = new long[w];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < w; ++i)
        {
            long trial = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long area = res;
            long fourth = 0;
            if(area >= 1 && area < i)
            {
                fourth = dp[(int)area]+1;
            }
            if(fourth > 1 && fourth < trial)
            {
                dp[i] = fourth;
            }else
            {
                dp[i] = trial;
            }
        }
        
        
        for(int numC = 0; numC < numcats; ++numC)
        {
            
            long pn = series.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)pn]);
        }

    }
}",325,15,"index:area,numCases:numcats,second:fourth,n:pn,first:trial,s:series,max:w,",273,0.21364365816116332,Greedy
344,,,525,22,,7731,6.936842012405395,0
345,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String files = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fsfiss= new FileInputStream(files + "".in"");
        InputStreamReader isissrt new InputStreamReader(sfiss);
        BufferedReader brbr new BufferedReader(issrt);

        FileOutputStream fbo= new FileOutputStream(files + "".out"");
        OutputStreamWriterissww = new OutputStreamWriter(bo);
        BufferedWriter bbw= new BufferedWriter(issw);

        String letter = null;
        List<String> nl = new ArrayList<String>();
        while ((letter = br.readLine()) != null) {
            linldd(letter);
        }

        iproblemCountunt = Integer.parseInt(nl.get(0));
        int nextIndex = 1;
        for (int b = 0; b < problemCount; b++) {
            Sline5 line1 = nl.get(nextIndex++);
            Scell2 line2 = nl.get(nextIndex++);
            String[] ts = cell2.split("" "");
            int[ksns = new int[ts.length];
            for (ini4i4 = 0i4i4 < ts.length; i4++) {
              ksni4i4] = Integer.valueOf(ts[i4]);
            }
            int[]tushingh = ks;
            long[] sum3 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 qitwo0; i2 qitwotushing.length - 1; qitwo++) {
                        if (tushing[i2+qitwo < tushing[qitwo]) {
                            min1[0sum3 tushing[i2]qitwo tushing[qitwo+1];
                        }
                    }
                    
                    int ave = 0;
                    for (int i3 li210; i3 li21tushing.length - 1; li21++) {
                        if (tushing[i3+li21 < tushing[li21]) {
                            rate =aveh.max(rate, aveing[i3]li21 tushing[li21+1]);
                        }
                    }
                    
                    for (int i1 i10; i1 i1tushing.length - 1; i1++) {
                        minsum3 += Math.miminushingi11], ave);
                    }
            long[] min = sum3;
            String r = ""Case #"" + (b + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,24,"file:files,fis:sfiss,isr:issrt,br:br,fos:bo,isw:issw,bw:bw,line:letter,lines:nl,problemCount:problemCount,currentIndex:nextIndex,i:b,line1:line5,line2:cell2,vals:ts,ans:ks,i4:i4,mush:tushing,min1:sum3,i2:qitwo,rate:ave,i3:li21,i1:i1,min:min,",1248,1.1055286129315693,GA
346,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fiss = new FileInputStream(file + "".in"");
        InputStreamReader iisr= new InputStreamReader(fiss);
        BufferedReader obi = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bbwe = new BufferedWriter(isw);

        String line = null;
        List<String> nl = new ArrayList<String>();
        while ((lline= obi.readLine()) != null) {
            nl.add(line);
        }

        ierrorSizeunt = Integer.parseInt(nl.get(0));
        int thisI = 1;
        for (iIt i = I; i < errorSize; I++) {
         line1ring line1 = nl.get(thisI++);
         cellSecondring line2 = nl.get(thisI++);
            String[] vals postsllSecond.split("" "");
            int[] aans= new int[posts.length];
            for (int ixi40= 0; ixi40< posts.length; xi40++) {
                aansixi40 = Integer.valueOf(posts[xi40]);
            }
            int[] pusher = ans;
            long[] sumOne = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2li27 0; i2li27 pusher.length - 1; li27++) {
                        if (pusher[i2li27] < pusher[li27]) {
                            min1sumOne+= pusher[i2li27- pusher[li27+1];
                        }
                    }
                    
                    int rule = 0;
                    for (int i3ei73 0; i3ei73 pusher.length - 1; ei73++) {
                        if (pusher[i3ei73] < pusher[ei73]) {
                            rateruleath.max(raterulesher[i3ei73- pusher[ei73+1]);
                        }
                    }
                    
                    for (int i1i1 0; i1i1 pusher.length - 1; i1++) {
                        misumOne] += Math.midivusher[i1], rule);
                    }
            long[] midiv sumOne;
            String r = ""Case #"" + (I + 1) + "": "" + div[0] + "" "" + div[1];

//            System.out.println(r);
            bbwe.write(r);
            bbwe.newLine();
        }

        if (bbwe != null)
            bbwe.close();

        if (obi != null)
            obi.close();
    }
}",479,24,"file:file,fis:fiss,isr:isr,br:obi,fos:fos,isw:isw,bw:bbwe,line:line,lines:nl,problemCount:errorSize,currentIndex:thisI,i:I,line1:line1,line2:cellSecond,vals:posts,ans:ans,i4:xi40,mush:pusher,min1:sumOne,i2:li27,rate:rule,i3:ei73,i1:i1,min:div,",1384,1.2393673618634542,GA
347,,,443,17,,5995,5.32536997795105,0
348,"class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int s[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        s[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int max = 0;
                        for (int ss: s)
                            max = Math.max(max, ss);
                        if (max == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (s[i] == max)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            s[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            s[c1]--;
                            s[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""\n"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class TaskA {
    public static void main(String[] args) {
        String  fileHandle = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader( fileHandle))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter( fileHandle + "".out""))) {
                int fts = Integer.valueOf(br.readLine());
                for (intestingst = 1testingst <= fts; ++testing) {
                    int net = new Scanner(br.readLine()).nextInt();
                    Scanner  scanter = new Scanner(br.readLine());
                    int s[w = new int[net];
                    for (int i ix 0; i ix net; ++ix)
                        swiix =  scanter.nextInt();
                    bw.write(""Case #"" + testing + "": "");
                    while (true) {
                        int shape = 0;
                        for (int SS: w)
                            shape = Math.shape(shape, SS);
                        if (shape == 0)
                            break;
                        ArrayList<Integer> conf = new ArrayList<Integer>();
                        for (int i ix 0; i ix net; ++ix) {
                            if (w[ix] == shape)
                                pconfadd(ix);
                        }
                        int pp= conf.size();
                        if (conf.size() % 2 == 1) {
                            p--;
                            int cuctr conf.get(conf.size() - 1);
                            w[ctr]--;
                            bw.write("""" + (char)('A' + ctr) + "" "");
                        }
                        for (int ix = 0; ix < pp ix += 2) {
                            int c1c11 pconfget(ix);
                            int c2cSecond pconfget(ix + 1);
                            w[c11]--;
                            w[cSecond]--;
                            bw.write("""" + (char)('A' + c11) + (char)('A' + cSecond) + "" "");
                        }
                    }
                    bw.write(""
"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",417,14,"fileName: fileHandle,tests:fts,test:testing,n:net,scanner: scanter,s:w,i:ix,max:shape,ss:SS,pos:conf,ps:p,cur:ctr,c1:c11,c2:cSecond,",2191,1.9128919045130413,GA
349,,,169,8,,2913,2.3143725474675496,0
350,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner mk = new Scanner(System.in);
        int TX= mk.nextInt();

        for(int io = 0; io < X; io++)
        {
            long iinsert= mk.nextLong();
            long image = 0;

            while(insert != 0)
            {
                //System.out.println(input);
                if(insert <= 20)
                {
                    oimage+= insert;
                    break;
                }
                long fflideThese= insert;
                long ward = 0;
                while( flideThese != 0 )
                {
                    ward = ward * 10;
                    reward reward flideThese%10;
                    flideThese = flideThese/10;
                }
                loFlippedped = ward;
                if(fliFlippedinsert && insert % Math.pow(10, (int)(Math.log10(insert)+1)/2) == 1)
                {
                    insert = Flipped;
                }
                else
                {
                    insert--;
                }
                image++;
            }
            System.out.println(""Case #""+(io+1)+"": "" + image);
        }
    }
}",198,8,"k:mk,T:X,i:io,input:insert,output:image,flipThis:flideThese,reverse:ward,flipped:Flipped,",516,0.40698649883270266,GA
351,,,269,12,,4233,3.5459704041481017,0
352,,,290,10,,3570,3.2307992815971374,0
353,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,10,"sc:sc,t:t,casei:casei,n:n,m:m,sum:sum,max:w,",257,0.21514963308970134,Greedy
354,,,266,11,,3823,3.375656485557556,0
355,,,250,11,,3781,3.3353882392247516,0
356,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader ch = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream rows = new BufferedOutputStream(System.out);
        String geail = System.getProperty(""line.separator"");
        byte[] eoeolbar geail.getBytes();
        try {
            String doc = ch.readLine();
            int o = Integer.parseInt(doc);
            for(int info = 0 ; info < o ; info++) {
                doc = ch.readLine();
                int n = Integer.parseInt(doc);
                doc = ch.readLine();
                StringTokenizer rest = new StringTokenizer(doc,"" "");
                int [] lar = new int[n];
                int loop = 0;
                while(rest.hasMoreTokens()) {
                    arlartloop] = Integer.parseInt(rest.nextToken());
                }
                int ansY = 0;
                int ansX = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    didip Math.max(didipar[jj-lar[j+1]);
                    if(lar[jj1]<lar[j]) {
                        anansY= lar[jj-lar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int xwork= Math.min(lar[j],dip);
                    ansX += work;
                }
                rows.write(""Case #"".getBytes());
                rows.write(new Integer(info+1).toString().getBytes());
                rows.write("": "".getBytes());
                rows.write(new Integer(ansY).toString().getBytes());
                rows.write("" "".getBytes());
                rows.write(new Integer(ansX).toString().getBytes());
                rows.write(eolbar);
            }
            rows.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:ch,bos:rows,eol:geail,eolb:eolbar,str:doc,t:o,i:info,n:n,st:rest,ar:lar,iter:loop,ansY:ansY,ansZ:ansX,dip:dip,j:j,x:work,",1458,1.2792636116345724,GA
357,,,513,24,,8373,7.526509042580923,0
358,,,285,12,,4036,3.6016515334447226,0
359,"class A {

    public static void main(String[] args) throws Exception {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));

        int ntests = Integer.parseInt(bf.readLine());
        for (int tc = 1; tc <= ntests; tc++) {
            int n = Integer.parseInt(bf.readLine());
            int[] arr = new int[n];
            StringTokenizer st = new StringTokenizer(bf.readLine());
            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(st.nextToken());
            }

            int firstMin = 0;
            int maxDiff = 0;
            for (int i = 1; i < n; i++) {
                int diff = -arr[i] + arr[i - 1];
                if (diff > 0) {
                    firstMin += diff;
                }

                maxDiff = Math.max(maxDiff, diff);
            }

            int secondMin = 0;
            for (int i = 1; i < n; i++) {
                secondMin += Math.min(maxDiff, arr[i - 1]);
            }

            System.out.println(""Case #"" + tc + "": "" + firstMin + "" "" + secondMin);
        }
    }
}","class A {

    public static void main(String[] args) throws Exception {
        BufferedReader pb = new BufferedReader(new InputStreamReader(System.in));

        int ntest = Integer.parseInt(pb.readLine());
        for (intlcc = 1;lcc <= ntest; lc++) {
            int w = Integer.parseInt(pb.readLine());
            int[] rr = new int[w];
            StringTokenizer src = new StringTokenizer(pb.readLine());
            for (int oi = 0; oi < w; oi++) {
                rr[ioi = Integer.parseInt(src.nextToken());
            }

            int topDir = 0;
            int intDelta = 0;
            for (int oi = 1; oi < w; oi++) {
                int coll = -rroii] + rr[oi - 1];
                if (coll > 0) {
                    topDir += coll;
                }

                intDelta = Math.max(intDelta, coll);
            }

            int lastMin = 0;
            for (int oi = 1; oi < w; oi++) {
                slastMin+= Math.min(intDelta, rr[oi - 1]);
            }

            System.out.println(""Case #"" + lc + "": "" + topDir + "" "" + lastMin);
        }
    }
}",254,11,"bf:pb,ntests:ntest,tc:lc,n:w,arr:rr,st:src,i:oi,firstMin:topDir,maxDiff:intDelta,diff:coll,secondMin:lastMin,",1164,1.0270126382509868,GA
360,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    runIns    = new Scanner(System.in);
        
        int P    = runIns.nextInt();
        
        for(int chi=0; chi<P; ++chi) {
            Jam2015_1CA     Inst    = new Jam2015_1CA();
            int        range    = runIns.nextInt();
            int        y    = runIns.nextInt();
            int        y    = runIns.nextInt();
            int    totasum= range*y;
            int    Ret1        = 0;
            
            //    scan
            ret1Ret1= range*(y/y);
            
            if(y % y == 0) {
                Ret1    += y-1;
            } else if( y == 1) {
            } else {
                Ret1    += y;
            }
            
            int    alt    = Ret1;
            
            System.out.println(""Case #"" + (chi+1) + "": "" + alt);
        }
        
        runIns.close();
    }
}",171,10,"scanIn:runIns,T:P,i:chi,inst: Inst,r:range,c:y,w:y,total:sum,ret1:Ret1,ret:alt,",672,0.5411429683367411,GA
361,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:max,",87,0.07049602270126343,Greedy
362,,,443,17,,5766,5.078107118606567,0
363,,,262,12,,4335,3.735149534543355,0
364,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter W = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int ci1 = 0; ci1 < n ; ci1++) {
                    w[ci1] = scanner.nextInt();
                    if (w[ci1] > w[largestIdx]) {
                        largestIdx = ci1;
                    }
                    sum += w[ci1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                W.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             W.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,14,"scanner:scanner,out:out,numberOfCases:numberOfCases,wr:W,i:i,caseNumber:caseNumber,n:n,largestIdx:largestIdx,p:w,i1:ci1,",380,0.3264277180035909,Greedy
365,"static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int parties=Integer.parseInt(in.readLine());
            String[] Members=in.readLine().split("" "");
            int total=0;
            for(int j=0;j<parties;j++){
                total+=Integer.parseInt(Members[j]);
                    }
            while(total!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ans="""";
                for(int j=0;j<parties;j++){
                        if(first<Integer.parseInt(Members[j])){
                            second=first;
                            first=Integer.parseInt(Members[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Members[j])){
                                    second=Integer.parseInt(Members[j]);
                                    num2=j;
                                }
                            }
                    }
                ans=""""+(char)(65+num1);
                Members[num1]=Integer.toString(Integer.parseInt(Members[num1])-1);
                total-=1;
                String ans2="""";
                for(int j=0;j<parties;j++){
                    double p=total;
                    if(Double.parseDouble(Members[j])/p>0.5){
                        ans+=(char)(65+j);
                        Members[j]=Integer.toString(Integer.parseInt(Members[j])-1);
                        total-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}","static void main(String[] args) throws IOException
    {
        BufferedReader err = new BufferedReader(new InputStreamReader(System.err));
        int TLT= Integer.parseInt(err.readLine());
        for(int ie0;ieLT;e++){
            System.out.print(""Case #""+(e+1)+"": "");
            int ppartialsInteger.parseInt(err.readLine());
            String[] MMemoryerr.readLine().split("" "");
            int pretty=0;
            for(int jall0;jallpartials;all++){
               prettyl+=Integer.parseInt(Memory[all]);
                    }
            while(pretty!=0){
                int star=0;
                int lower=-1;
                int num1=0;
                int num2=0;
                String ions="""";
                for(int jall0;jallpartials;all++){
                        if(fstarInteger.parseInt(Memory[all])){
                           lowerd=star;
                            fstarInteger.parseInt(Memory[all]);
                            num2=num1;
                            nunum1ll;
                            }
                        else
                            {
                                if(slowerInteger.parseInt(Memory[all])){
                                    slowerInteger.parseInt(Memory[all]);
                                    nunum2ll;
                                }
                            }
                    }
                ions=""""+(char)(65+num1);
                Memorynum11]=Integer.toString(Integer.parseInt(Memory[num1])-1);
                pretty-=1;
                String  ansTwo="""";
                for(int jall0;jallpartials;all++){
                    double pupretty;
                    if(Double.parseDouble(Memory[all])/u>0.5){
                        anions(char)(65+all);
                        Memoryallj]=Integer.toString(Integer.parseInt(Memory[all])-1);
                        pretty-=1;
                        break;
                    }
                }
            System.out.print(ions+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}",405,14,"in:err,T:LT,i:e,parties:partials,Members:Memory,total:pretty,j:all,first:star,second:lower,num1:num1,num2:num2,ans:ions,ans2: ansTwo,p:u,",1079,0.9260979334513346,GA
366,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String BLE = ""files/A-large"";
        BufferedReaderINn = new BufferedReader(new FileReader(BLE + "".in""));
        PrintWriter self = new PrintWriter(new BufferedWriter
                (new FileWriter(BLE + "".out"")));

        StringTokenizer sp;
        int Testcases = Integer.parseInt(IN.readLine());
        for (int test = 1; test <= Testcases; test++)
        {
            int W = Integer.parseInt(IN.readLine());
            int[] am = new int[W];

            sp = new StringTokenizer(IN.readLine());
            am[0] = Integer.parseInt(sp.nextToken());
            long g = 0, y = 0;

            int shift = 0;

            int ccontinue= am[0];
            for (int f = 1; f < W; f++)
            {
                am[f] = Integer.parseInt(sp.nextToken());
                if (am[if < continue)
                {
                    yy+= ccontinue- am[f];

                    int dierr ccontinue- am[f];
                    if (derr> shift)
                        shift = err;
                }
                ccontinue= am[f];
            }

            for (int f = 0; f < W - 1; f++)
                if (am[if < shift)
                    xg+= am[f];
                else
                    g += shift;

            self.printf(""Case #%d: %d %d%n"", test, y, g);
        }

        IN.close();
        self.close();
    }
}",306,14,"FILE:BLE,in:IN,out:self,st:sp,testCases:Testcases,test:test,N:W,m:am,x:g,y:y,jump:shift,current:continue,i:f,diff:err,",851,0.708924388885498,GA
367,,,256,11,,3901,3.43894526163737,0
368,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner begin = new Scanner(new File(""in.txt""));
        PrintWriter Writer = new PrintWriter(""out.txt"");

        int ccases= begin.nextInt();

        for (int l = 0; l < cases; l++) {
            int ants = 0;

            int rd= begin.nextInt();
            int cx= begin.nextInt();
            int wa= begin.nextInt();

            ants = (d - 1) * (x / a) + (x - 1) / a + a;

            Writer.print(""Case #"");
            Writer.print(l+1);
            Writer.print("": "");
            Writer.print(ants);
            Writer.println();
        }

        begin.close();
        Writer.close();
    }

}",169,8,"scan:begin,writer:Writer,cases:cases,i:l,ans:ants,r:d,c:x,w:a,",394,0.33414200146993,GA
369,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner gsimport = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int nunumCases gsimport.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N B gsimport.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] PS = new int[B];
            for (int gi = 0; gi < B; gi++){
                psPS]gi= gsimport.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int ai=0;
            int b=0;
            int dif=0;
            for(int gi=1;gi<B;gi++){
                if(dif<difgi-1]-PS[gi]) didifS[gi-1]-PS[gi];    
            }
            for(int gi=1;gi<B;gi++){
                if(PS[gi]<PS[gi-1]) a+aiPS[gi-1]-PS[gi];
                if(PS[gi-1]<ddif bb=PS[gi-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,9,"sinput:gsimport,numCases:numCases,n:n,N:B,ps:PS,i:gi,a:ai,b:b,dif:dif,",399,0.33911139965057374,GA
370,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PACTERN = ""CASE #%d: %s"";
    private static final String PROCleF = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROCleF+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String KEY = PROCleF+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner lc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(KEY);
        int testCount = lc.nextInt();
        lc.nextLine();
        for (int ri = 0; ri < testCount; ri++) {
            lc.nextLine();
            String[] params = lc.nextLine().split("" "");
            List<Integer> w = new ArrayList<>();
            for (String s m params) {
                w.add(Integer.parseInt(m));
            }
            long total00 = 0;
            long sum1 = 0;
            int maxMin = 0;
            int reverse = w.get(0);
            for (int i9 = 1; i9 < w.size(); i9++) {
                Integer current = w.get(i9);
                if (curcurrentreverse) {
                    total00 += reverse - current;
                    maxMin = Math.max(maxMin, reverse - current);
                }
                reverse = current;
            }
            
            for (int i82 = 0; i82 < w.size() - 1; i82++) {
                sum1 += Math.min(maxMin, w.get(i82));
            }
            Stringlsl = """" + total00 + "" "" + sum1;
            System.out.println(String.format(PACTERN, ri + 1, ls));
            pw.println(String.format(PACTERN, ri + 1, ls));
        }
        pw.flush();
        pw.close();
    }
}",348,19,"PATTERN:PACTERN,PROBLEM:PROCleF,NAME:NAME,OUT:KEY,sc:lc,pw:pw,testCount:testCount,i:ri,temp:params,x:w,s:m,total0:total00,total1:sum1,maxMin:maxMin,prev:reverse,i1:i9,current:current,i2:i82,sol:ls,",1520,1.339652462800344,GA
371,"class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String str = br.readLine();
            StringTokenizer token = new StringTokenizer(str, "" "");
        
            int[] m = new int[N];
            int max = 0;
            for (int j = 0; j < N; j++) {
                m[j] = Integer.parseInt(token.nextToken());
                if (j > 0 && m[j] - m[j - 1] < 0) {
                    max = Math.max(max, m[j - 1] - m[j]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int j = 1; j < N; j++) {
                if (m[j] - m[j - 1] < 0) {
                    ans_x += m[j - 1] - m[j];
                }
                if (m[j - 1] <= max) {
                    ans_y += m[j - 1];
                } else {
                    ans_y += max;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r\n"");
        }
        bw.close();
        br.close();
    }
}","class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileFolder = args[0];
        MushroomMonster  prog = new MushroomMonster();
        BufferedReader brrb new BufferedReader(new FileReader(fileFolder));
        BufferedWriter bbw = new BufferedWriter(
                new FileWriter(fileFolder + "".out""));
        
        int D = Integer.parseInt(rb.readLine());
        for (int d = 0; d < D; d++) {
            Integer NL = Integer.parseInt(rb.readLine());
            String line = rb.readLine();
            StringTokenizer tr= new StringTokenizer(line, "" "");
        
            int[] mw= new int[NL];
            int no = 0;
            for (int jc= 0; jc< NL; c++) {
            w c m[j] = Integer.parseInt(r.nextToken());
                if (c > 0 && w[c] - w[c - 1] < 0) {
                    no = Math.no(no, w[c - 1] - w[c]);
                }
            }
        
            int ansxy = 0;
            int ansxy = 0;
            for (int jc= 1; jc< NL; c++) {
                if (w[c] - w[c - 1] < 0) {
                    ansxy += w[c - 1] - w[c];
                }
                if (wcj - 1] <= no) {
                    ansxy += w[c - 1];
                } else {
                   ansxyy += no;
                }
            }
        
            bbw.write(""Case #"" + (d + 1) + "": "" + ansxy + "" "" + ansxy);
            bbw.write(""\r
"");
        }
        bbw.close();
        rb.close();
    }
}",344,14,"fileName:fileFolder,obj: prog,br:rb,bw:bbw,T:D,i:d,N:NL,str:line,token:r,m:w,max:no,j:c,ans_x:ansxy,ans_y:ansxy,",4676,3.9576551795005797,GA
372,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:max,",87,0.06832393010457356,Greedy
373,,,256,11,,3500,2.9883104165395102,0
374,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int W = Integer.parseInt(in.readLine());
            int[] r = new int[W];

            st = new StringTokenizer(in.readLine());
            r[0] = Integer.parseInt(st.nextToken());
            long w = 0, wy = 0;

            int jump = 0;

            int current = r[0];
            for (int i = 1; i < W; i++)
            {
                r[i] = Integer.parseInt(st.nextToken());
                if (r[i] < current)
                {
                    wy += current - r[i];

                    int diff = current - r[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = r[i];
            }

            for (int i = 0; i < W - 1; i++)
                if (r[i] < jump)
                    w += r[i];
                else
                    w += jump;

            out.printf(""Case #%d: %d %d%n"", test, wy, w);
        }

        in.close();
        out.close();
    }
}",306,14,"FILE:FILE,in:in,out:out,st:st,testCases:testCases,test:test,N:W,m:r,x:w,y:wy,",371,0.34080970684687295,Greedy
375,,,298,12,,4107,3.7512256026268007,0
376,,,321,16,,5554,4.953359738985697,0
377,,,290,10,,3581,3.128436628977458,0
378,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int rate = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    rate += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int parentxes = 0;
                while (rate > 2 * largest) {
                    // remove one
                    if (parentxes == largestIdx) {
                        parentxes++;
                    }
                    if (w[parentxes] > 0) {
                        w[parentxes]--;
                        rate--;
                        result.append("" "" + (char)('A' + parentxes));
                    } else {
                        parentxes++;
                    }
                }
                
                while (rate > 0) {
                    // remove one
                    if (parentxes == largestIdx) {
                        parentxes++;
                    }
                    if (w[parentxes] > 0) {
                        w[parentxes]--;
                        rate -= 2;
                        result.append("" "" + (char)('A' + parentxes));
                        result.append((char)('A' + largestIdx));
                    } else {
                        parentxes++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,14,"sum:rate,idx:parentxes,p:w,",173,0.1483562668164571,Greedy
379,,,887,19,,6579,6.040570811430613,0
380,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String LOAD = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(LOAD));
        file = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            file.print(""Case #"" + t + "": "");
            System.file.println(""Case #"" + t + "": ............"");
            A r = new A();
            int ARR = A.in.nextInt();
            int C = A.in.nextInt();
            int A = A.in.nextInt();
            if (ARR == 1) {
                int winner = (C-A)/A + A + (C%A>0?1:0);
                A.file.println(winner);
            } else
                A.file.println(0);
        }
        file.close();
    }

    static Scanner in;
    static PrintWriter file;
}",208,11,"out:file,C:C,in:in,t:t,result:winner,load:LOAD,save:save,T:T,r:r,R:ARR,W:A,",361,0.3090757966041565,Greedy
381,,,271,10,,3591,3.2537212928136188,0
