Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1272,2.154384970664980,Beam
1,"class CRoundA {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int size = in.nextInt();
            
            int costPerRow = C / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += costPerRow * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (C % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d\n"", i + 1, ans);
        }

    }

}","class CRoundA {

    public static void main(String[] args) {
        Scanner inf = new Scanner(System.inf);
        int T = inf.nextInt();
        for (int i = 0; i < T; i++) {
            int R = inf.nextInt();
            int CA = inf.nextInt();
            int size = inf.nextInt();
            
            int CostPerCol = CA / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += CostPerCol * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (CA % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d
"", i + 1, ans);
        }

    }

}",142,11,"costPerRow:CostPerCol,C:CA,in:inf,",800,1.328969919681550,Beam
2,,,887,27,,1752,3.7669522444407100,0
3,,,250,11,,559,1.0348947803179400,0
4,,,291,13,,3597,6.485391430060070,0
5,,,263,13,,683,1.2582552671432500,0
6,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.3697141885757450,Beam
7,,,262,14,,652,1.172387150923410,0
8,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.24438246885935500,Beam
9,,,334,15,,1179,2.4574538389841700,0
10,"class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int c = in.nextInt();
                int w = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(c%w, 1)+w + c/w-1;
                if (r > 1) ans1 += (r-1)*(c/w);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""\n"");
                out.write(""Case #"" + cas + "": "" + ans + ""\n"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int u = in.nextInt();
                int wa = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(u%wa, 1)+wa + u/wa-1;
                if (r > 1) ans1 += (r-1)*(u/wa);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""
"");
                out.write(""Case #"" + cas + "": "" + ans + ""
"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",241,15,"w:wa,c:u,",373,0.6640925765037540,Beam
11,,,311,17,,2189,3.8255005717277500,0
12,,,269,13,,4386,8.35165334145228,0
13,,,326,14,,4899,8.973329826196030,0
14,,,306,16,,5240,9.998058712482450,0
15,,,298,16,,4527,8.177182261149090,0
16,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner se = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = se.nextInt();
        
        for (int x = 1; x <= R; ++x) {
            int W = se.nextInt();
            
            int[][] yr = new int[2*W-1][W];
            
            // 2 * N - 1 line with N numbers
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    yr[c][c] = se.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> mp = new HashMap<>();
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    if (mp.get(yr[c][c]) == null) {
                        mp.put(yr[c][c], 1);
                    }
                    else {
                        int w = mp.get(yr[c][c]);
                        mp.put(yr[c][c], w + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int c : mp.keySet()) {
                if (mp.get(c) % 2 != 0) {
                    r.add(c);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int c = 0; c < r.size(); ++c) {
                System.out.print("" "" + r.get(c));
            }
            System.out.println();
        }

        se.close();
    }
}",375,12,"N:W,i:c,arr:yr,T:R,k:w,map:mp,j:c,sc:se,",2785,5.357164637247720,Beam
17,,,500,19,,8100,14.671167385578200,0
18,,,264,15,,5383,9.584695382912950,0
19,,,269,13,,4390,8.448070140679680,0
20,,,605,21,,9889,16.279890978336300,0
21,,,655,16,,2071,4.089659190177920,0
22,,,326,14,,5209,9.546725455919900,0
23,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.9495203614234920,Beam
24,,,285,14,,5147,8.532372605800630,0
25,,,735,24,,11446,19.12898168563840,0
26,,,282,13,,990,1.7012380838394200,0
27,,,419,16,,5953,11.34197670618690,0
28,,,149,10,,2233,3.0230974038442000,0
29,,,517,26,,1902,3.7253998438517300,0
30,,,272,16,,5472,7.460631267229720,0
31,,,255,13,,1427,3.04281200170517,0
32,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7432517608006800,Beam
33,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2481,4.331373810768130,Beam
34,,,211,11,,2760,4.549506107966110,0
35,,,134,9,,1613,2.0960029284159300,0
36,,,478,22,,11842,20.21301639477410,0
37,,,328,16,,5302,9.385431090990700,0
38,,,525,23,,13594,24.57491793235140,0
39,,,215,12,,3639,6.011535791556040,0
40,,,254,13,,951,1.672352627913160,0
41,,,790,14,,4837,10.419563575585700,0
42,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int TEST=1;TEST<=T;TEST++){
            int N = sc.nextInt(), N = sc.nextInt(), NW = sc.nextInt();
            int w = 0, Rs = 0;
            Rs += N*(N/NW);
            if (N%NW==0)Rs+=NW-1;
            else Rs+=NW;
            System.out.println(""Case #""+TEST+"": ""+Rs);
        }
    }
}",309,11,"C:N,W:NW,R:N,res:Rs,CASE:TEST,",1179,2.007317507267000,Beam
43,,,326,14,,4837,8.891231473286950,0
44,,,273,11,,2299,4.184109346071880,0
45,,,334,12,,3688,7.358392981688180,0
46,,,349,19,,862,1.4981696963310200,0
47,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long gain = 0;
                while( flippingWhatever != 0 )
                {
                    gain = gain * 10;
                    gain = gain + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = gain;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:gain,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",2021,3.7129958271980300,Beam
48,,,273,11,,2426,4.365850571791330,0
49,,,618,26,,10684,18.969659161567700,0
50,,,302,15,,2636,4.389512244860330,0
51,,,328,16,,3876,7.200512266159060,0
52,,,262,14,,3504,6.093813526630400,0
53,,,278,15,,5171,8.424425137043000,0
54,,,292,16,,4589,8.28547118504842,0
55,,,393,16,,5098,9.481150046984360,0
56,,,468,20,,4301,8.285496079921720,0
57,,,418,13,,3938,9.511945394674940,0
58,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.2793355147043860,Beam
59,,,311,17,,2608,4.41280564069748,0
60,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0592233935991900,Beam
61,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int c = 0;c<w.length;c++)
                    if(w[c]<=a[0]&&w[c]>0&&c!=a[1]){
                        w[c]--;
                        gg=gg+(char)(c+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(w[a[1]]-2!=0){
                w[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    w[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               w[a[2]]--;
                w[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,k:c,",709,1.3690909266471900,Beam
62,,,363,16,,6077,10.694900671641000,0
63,,,272,16,,2967,4.45245813926061,0
64,,,349,19,,6231,11.04162674744920,0
65,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.24799391428629600,Beam
66,,,735,24,,11167,18.77488573392230,0
67,,,272,16,,5948,8.700882256031040,0
68,,,290,12,,894,1.583704900741580,0
69,,,169,10,,2419,3.3040318131446800,0
70,,,618,26,,10739,18.51624939441680,0
71,,,887,27,,1778,3.7633562445640600,0
72,"class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int N = Integer.parseInt(br.readLine());
            int[][] vrst = new int[2*N-1][N];
            for(int j=0;j<2*N-1;j++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<N;k++) {
                    //System.out.println(""""+j+k);
                    vrst[j][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*N-1;i1++){
                for(int j = 0;j<N;j++){
                    bool[vrst[i1][j]]=!bool[vrst[i1][j]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""\n"");
            pw.write(""Case #""+(i+1)+"": ""+a+""\n"");

        }
        pw.close();
    }
}","class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int W = Integer.parseInt(br.readLine());
            int[][] cvste = new int[2*W-1][W];
            for(int dj=0;dj<2*W-1;dj++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<W;k++) {
                    //System.out.println(""""+j+k);
                    cvste[dj][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*W-1;i1++){
                for(int dj = 0;dj<W;dj++){
                    bool[cvste[i1][dj]]=!bool[cvste[i1][dj]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""
"");
            pw.write(""Case #""+(i+1)+"": ""+a+""
"");

        }
        pw.close();
    }
}",399,18,"N:W,j:dj,vrst:cvste,",1334,2.638281512260440,Beam
73,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ras2 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                if (w < f)
                    ras2 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < size)
                    ans2 += rows[j];
                else
                    ans2 += size;
            }
            
            pw.println(String.format(print, i, ras2, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:size,prefix:print,s:w,ans1:ras2,",2956,5.166134746869410,Beam
74,,,355,19,,6640,12.651608153184300,0
75,"class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int w = reader.nextInt();
            int answer = c / w;
            answer *= r;
            answer += w - 1;
            if(c % w > 0){
                answer++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + answer);
        }
        reader.close();
    }

}","class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int wed = reader.nextInt();
            int grade = c / wed;
            grade *= r;
            grade += wed - 1;
            if(c % wed > 0){
                grade++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + grade);
        }
        reader.close();
    }

}",134,9,"w:wed,answer:grade,",404,0.9044358968734740,Beam
76,,,334,15,,5426,13.52890412012740,0
77,,,272,16,,5945,10.697352159023300,0
78,,,295,15,,672,1.5325473864873300,0
79,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner isprint = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = isprint.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int A = isprint.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] char = new int[A];
            for (int i = 0; i < A; i++){
                char[i] = isprint.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<A;i++){
                if(dif<char[i-1]-char[i]) dif=char[i-1]-char[i];    
            }
            for(int i=1;i<A;i++){
                if(char[i]<char[i-1]) a+=char[i-1]-char[i];
                if(char[i-1]<dif) b+=char[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,11,"ps:char,N:A,sinput:isprint,",869,2.1403809984525000,Beam
80,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.5305254220962520,Beam
81,,,256,13,,608,1.4503671407699600,0
82,,,358,18,,6516,13.72093536456430,0
83,,,260,13,,4186,8.470692654450740,0
84,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.424227237701416,Beam
85,,,132,9,,1704,3.105098263422650,0
86,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int seed = 1; seed <= T; seed++) {
            int B = in.nextInt();
            int WC = in.nextInt();
            int[][] M = new int[B][WC];
            for (int i = 0; i < B; i++) {
                String S = in.next();
                for (int j = 0; j < WC; j++) {
                    char w = S.charAt(j);
                    if (w == '.')
                        M[i][j] = EMPTY;
                    else if (w == '<')
                        M[i][j] = LEFT;
                    else if (w == '>')
                        M[i][j] = RIGHT;
                    else if (w == 'v')
                        M[i][j] = DOWN;
                    else if (w == '^')
                        M[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < B; r++) {
                for (int w = 0; w < WC; w++) {
                    if (M[r][w] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int anc = w + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < B && 0 <= anc && anc < WC) {
                            if (M[nr][anc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            anc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[M[r][w]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}",513,26,"R:B,C:WC,c:w,zz:seed,nc:anc,G:M,",5801,13.64655636549000,Beam
87,,,292,16,,4155,9.264349448680880,0
88,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.4196942369143170,Beam
89,,,553,21,,5798,13.187053783734600,0
90,,,295,15,,3429,7.917631681760150,0
91,,,269,16,,5849,11.465960037708300,0
92,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,2.246006961663560,Beam
93,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.22729732195536300,Beam
94,,,349,19,,5458,12.275674823919900,0
95,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int c = 0; c < N; c++) {
                slated.add(c, 0);
            }
            int equateSize = 0;
            for (int c = 0; c < N; c++) {
                int w = r.nextInt();
                slated.set(c, w);
                equateSize += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondaryCount = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondaryCount = slated.lastIndexOf(second);
                if (max == second && equateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondaryCount)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondaryCount, slated.get(secondaryCount) - 1);
                    equateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateSize -= 1;
                }
            }
            if (equateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondaryCount = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondaryCount = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondaryCount)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondaryCount, slated.get(secondaryCount) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateSize,temp:w,secondIndex:secondaryCount,i:c,in:r,",3277,9.22637087504069,Beam
96,,,326,14,,4837,11.26614404519400,0
97,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,1.0293115536371900,Beam
98,,,418,13,,4434,13.201643959681200,0
99,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.4938681403795880,Beam
100,"class A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(
                        System.in
                        )));
        StringBuilder builder;
        long dp[] = new long[1000005];
        dp[0] = dp[1] = 1;
        for (int i = 2; i < 20; i++) {
            dp[i] = i;
        }

        for (int i = 20; i < dp.length; i++) {
            int iLength = Integer.toString(i).length();
            builder = new StringBuilder();
            builder.append(i);
            int rev = Integer.parseInt(builder.reverse().toString());
            int revLength = Integer.toString(rev).length();
            if (rev < dp.length && rev < i && iLength == revLength) {
                dp[i] = Math.min(dp[i-1], dp[rev]) + 1;
            } else {
                dp[i] = dp[i-1] + 1;
            }
        }

        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt();
            System.out.printf(""Case #%d: %d\n"", t, dp[N]);
        }
    }
}","class A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(
                        System.in
                        )));
        StringBuilder builder;
        long dp[] = new long[1000005];
        dp[0] = dp[1] = 1;
        for (int i = 2; i < 20; i++) {
            dp[i] = i;
        }

        for (int i = 20; i < dp.length; i++) {
            int iWidth = Integer.toString(i).length();
            builder = new StringBuilder();
            builder.append(i);
            int rev = Integer.parseInt(builder.reverse().toString());
            int revLength = Integer.toString(rev).length();
            if (rev < dp.length && rev < i && iWidth == revLength) {
                dp[i] = Math.min(dp[i-1], dp[rev]) + 1;
            } else {
                dp[i] = dp[i-1] + 1;
            }
        }

        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt();
            System.out.printf(""Case #%d: %d
"", t, dp[N]);
        }
    }
}",271,12,"iLength:iWidth,",81,0.1540505568186440,Beam
101,,,309,11,,1954,4.2528069893519100,0
102,,,273,11,,798,1.8042086442311600,0
103,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,0.9385614434878030,Beam
104,,,406,19,,1024,2.483678877353670,0
105,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] smatch = new int[n];
                    for (int i = 0; i < n; i++) {
                        smatch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int comment = smatch[i] - smatch[i + 1];
                        if (comment > 0) {
                            first += comment;
                        }
                    }
                    
                    int[] comment = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        comment[i] = smatch[i] - smatch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, comment[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, smatch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] smatch = new int[n];
                for (int i = 0; i < n; i++) {
                    smatch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int comment = smatch[i] - smatch[i + 1];
                    if (comment > 0) {
                        first += comment;
                    }
                }
                
                int[] comment = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    comment[i] = smatch[i] - smatch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, comment[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, smatch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:smatch,diff:comment,i4:i22,",1182,4.163790233929950,Beam
106,,,265,12,,3360,6.681207744280500,0
107,"class A {

    public static void main(String [] args) throws IOException {
        String inputFile = ""src/A-small-1.in"";
        Scanner in = new Scanner(new File(inputFile));
        PrintStream out = new PrintStream(inputFile.substring(0, inputFile.length()-2)+""out"");
        int cases = in.nextInt();
        for (int cs = 1; cs <= cases; cs++) {
            long n = in.nextLong();
            A a = new A(n);
            String ans = ""Case #""+cs+"": ""+a.minSteps;
            out.println(ans);
            System.out.println(ans);
        }
        out.close();
        in.close();
    }
    
    TreeMap<Long, Integer> queue = new TreeMap<>();
    HashMap<Long,Integer> seen = new HashMap<>();
    int minSteps = Integer.MAX_VALUE;
    
    public A(long n) {
        queue.put(n, 1);
        while(!queue.isEmpty()) {
            Entry<Long, Integer> e = queue.pollFirstEntry();
            long v = e.getKey();
            int s = e.getValue();
            if (v == 1) {
                minSteps = Math.min(s, minSteps);
                continue;
            }
            if (s >= minSteps) { continue; }
            {
                Integer ps = seen.get(v-1);
                if (ps == null || ps > s+1) {
                    queue.put(v-1, s+1);
                    seen.put(v-1, s+1);
                }
            }
            if (v % 10 != 0) {
                long vr = Long.parseLong(new StringBuilder(Long.toString(v)).reverse().toString());
                if (vr < v){
                    Integer ps = seen.get(vr);
                    if (ps == null || ps > s+1) {
                        queue.put(vr, s+1);
                        seen.put(vr, s+1);
                    }
                }
            }
        }
    }
}","class A {

    public static void main(String [] args) throws IOException {
        String inputFile = ""src/A-small-1.in"";
        Scanner win = new Scanner(new File(inputFile));
        PrintStream w = new PrintStream(inputFile.substring(0, inputFile.length()-2)+""out"");
        int rooms = win.nextInt();
        for (int rs = 1; rs <= rooms; rs++) {
            long r = win.nextLong();
            A c = new A(r);
            String nas = ""Case #""+rs+"": ""+c.minStepd;
            w.println(nas);
            System.w.println(nas);
        }
        w.close();
        win.close();
    }
    
    TreeMap<Long, Integer> delay = new TreeMap<>();
    HashMap<Long,Integer> kept = new HashMap<>();
    int minStepd = Integer.MAX_VALUE;
    
    public A(long r) {
        delay.put(r, 1);
        while(!delay.isEmpty()) {
            Entry<Long, Integer> e = delay.pollFirstEntry();
            long v = e.getKey();
            int s = e.getValue();
            if (v == 1) {
                minStepd = Math.min(s, minStepd);
                continue;
            }
            if (s >= minStepd) { continue; }
            {
                Integer pers = kept.get(v-1);
                if (pers == null || pers > s+1) {
                    delay.put(v-1, s+1);
                    kept.put(v-1, s+1);
                }
            }
            if (v % 10 != 0) {
                long lr = Long.parseLong(new StringBuilder(Long.toString(v)).reverse().toString());
                if (lr < v){
                    Integer pers = kept.get(lr);
                    if (pers == null || pers > s+1) {
                        delay.put(lr, s+1);
                        kept.put(lr, s+1);
                    }
                }
            }
        }
    }
}",417,18,"ans:nas,n:r,out:w,a:c,cases:rooms,cs:rs,in:win,ps:pers,queue:delay,minSteps:minStepd,seen:kept,vr:lr,",2915,6.886766493320470,Beam
108,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException n) {
                n.printStackTrace();
            }
        }
        Scanner ser = new Scanner(System.in);
        int N = ser.nextInt();
        for(int TEST=1;TEST<=N;TEST++){
            int N = ser.nextInt(), E = ser.nextInt(), NW = ser.nextInt();
            int E = 0, Rs = 0;
            Rs += N*(E/NW);
            if (E%NW==0)Rs+=NW-1;
            else Rs+=NW;
            System.out.println(""Case #""+TEST+"": ""+Rs);
        }
    }
}",309,11,"C:E,R:N,CASE:TEST,W:NW,res:Rs,sc:ser,T:N,r:m,e:n,",1737,3.5404662688573200,Beam
109,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.4994054873784400,Beam
110,,,619,14,,4333,10.538774673144000,0
111,,,406,19,,7999,17.736365071932500,0
112,,,393,19,,7051,12.087989294529000,0
113,,,285,14,,4837,8.21883718172709,0
114,,,292,15,,5776,10.171764465173100,0
115,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0661829352378800,Beam
116,,,419,16,,1737,3.3675673882166500,0
117,,,292,17,,2644,4.80786296526591,0
118,,,260,11,,2512,4.79981749455134,0
119,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException n) {
                n.printStackTrace();
            }
        }
        Scanner sq = new Scanner(System.in);
        int M = sq.nextInt();
        for(int SCasing=1;SCasing<=M;SCasing++){
            int N = sq.nextInt(), P = sq.nextInt(), NW = sq.nextInt();
            int P = 0, ares = 0;
            ares += N*(P/NW);
            if (P%NW==0)ares+=NW-1;
            else ares+=NW;
            System.out.println(""Case #""+SCasing+"": ""+ares);
        }
    }
}",309,11,"C:P,R:N,W:NW,res:ares,CASE:SCasing,sc:sq,T:M,r:m,e:n,",1737,2.9985044519106500,Beam
120,,,406,19,,1024,1.8851725061734500,0
121,,,241,15,,3096,5.108394591013590,0
122,,,211,11,,807,1.2818941394488000,0
123,,,321,13,,4093,7.348947366078690,0
124,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.808507251739502,Beam
125,,,262,14,,2419,4.568599331378940,0
126,,,298,16,,4434,8.15934250752131,0
127,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5867195208867390,Beam
128,,,311,17,,1351,2.35813223918279,0
129,,,544,17,,5858,12.242823171615600,0
130,,,366,17,,900,1.5792878230412800,0
131,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int trials = scan.nextInt();

        for (int i = 0; i < trials; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int u = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (u / time) + (u - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"w:time,ans:ants,c:u,cases:trials,",1086,1.5096712112426800,Beam
132,,,366,17,,1334,2.3832985043525700,0
133,,,269,13,,4045,7.70968314409256,0
134,,,371,12,,621,1.2788509925206500,0
135,,,256,13,,927,1.7844585696856200,0
136,,,308,12,,745,1.437177296479540,0
137,,,262,14,,652,1.161117152373000,0
138,,,468,14,,3504,7.943460015455880,0
139,,,200,10,,1489,2.066417666276300,0
140,,,790,14,,4806,10.797273961703000,0
141,"class a1 {

    private static final String[] PL = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader input = null;
        BufferedWriter output = null;
        Date d1 = new Date();
        try {
            input = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            output = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String line1 = null;
            String line2 = null;
            int expectedCases = 0;
            int actualCase = -1;
            line1=input.readLine();
            expectedCases = Integer.parseInt(line1);
            for (actualCase = 1; actualCase<=expectedCases; actualCase++) {
                line1=input.readLine();
                line2=input.readLine();
                Scanner sc = new Scanner(line1);
                        int partynum = sc.nextInt();
                        Scanner sc1 = new Scanner(line2);
                        int[] parties1 = new int[partynum];
                        for (int i2 = 0; i2< partynum; i2++ ) {
                            parties1[i2] = sc1.nextInt();
                        }
                        int[] parties = parties1;
                        int result2 = 0;
                        for(int i1 : parties) {
                            result2 +=i1;
                        }
                        int totalcount = result2;
                        StringBuffer sb = new StringBuffer(2*partynum);
                        while (totalcount > 0) {
                            int[] result1 = new int[2];
                            int[] maxvalues = new int[2];
                            result1[0] = -1;
                            result1[1] = -1;
                            maxvalues[0] = -1;
                            maxvalues[1] = -1;
                            for (int i = 0; i<parties.length; i++){
                                if (parties[i]> maxvalues[0]) {
                                    result1[1] = result1[0];
                                    maxvalues[1] = maxvalues[0];
                                    result1[0] = i;
                                    maxvalues[0] = parties[i];
                                } else {
                                    if (parties[i] > maxvalues[1]) {
                                        result1[1] =i;
                                        maxvalues[1] = parties[i];
                                    }
                                }
                            }
                            int[] x = result1;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((totalcount ==3) || ((x[1] == -1) && (parties[x[0]] == 1)) ) {
                                sb.append(PL[x[0]]);
                                parties[x[0]]--;
                                totalcount --;
                            } else {
                                if ((x[1] == -1) || (parties[x[0]] - parties[x[1]] > 1)) {
                                    sb.append(PL[x[0]]);                    
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]-=2;
                                    totalcount-=2;
                                } else {
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]--;
                                    sb.append(PL[x[1]]);
                                    parties[x[1]]--;
                                    totalcount-=2;
                                }
                            }
                            sb.append("" "");
                        }
                String result = sb.toString().trim();
                output.write(""Case #"" + actualCase +"": "" + result + ""\n"");                
                System.out.println(""Case #"" + actualCase +"": "" + result );                
            }
            input.close();
            output.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}","class a1 {

    private static final String[] PP = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader feed = null;
        BufferedWriter w = null;
        Date d1 = new Date();
        try {
            feed = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            w = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String lineOne = null;
            String rowB = null;
            int expectedCases = 0;
            int actuallyChild = -1;
            lineOne=feed.readLine();
            expectedCases = Integer.parseInt(lineOne);
            for (actuallyChild = 1; actuallyChild<=expectedCases; actuallyChild++) {
                lineOne=feed.readLine();
                rowB=feed.readLine();
                Scanner soc = new Scanner(lineOne);
                        int size = soc.nextInt();
                        Scanner sc1 = new Scanner(rowB);
                        int[] partials1 = new int[size];
                        for (int itwo = 0; itwo< size; itwo++ ) {
                            partials1[itwo] = sc1.nextInt();
                        }
                        int[] pages = partials1;
                        int resultCount = 0;
                        for(int i1 : pages) {
                            resultCount +=i1;
                        }
                        int foundcount = resultCount;
                        StringBuffer nb = new StringBuffer(2*size);
                        while (foundcount > 0) {
                            int[] Result4 = new int[2];
                            int[] allvalues = new int[2];
                            Result4[0] = -1;
                            Result4[1] = -1;
                            allvalues[0] = -1;
                            allvalues[1] = -1;
                            for (int i = 0; i<pages.length; i++){
                                if (pages[i]> allvalues[0]) {
                                    Result4[1] = Result4[0];
                                    allvalues[1] = allvalues[0];
                                    Result4[0] = i;
                                    allvalues[0] = pages[i];
                                } else {
                                    if (pages[i] > allvalues[1]) {
                                        Result4[1] =i;
                                        allvalues[1] = pages[i];
                                    }
                                }
                            }
                            int[] x = Result4;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((foundcount ==3) || ((x[1] == -1) && (pages[x[0]] == 1)) ) {
                                nb.append(PP[x[0]]);
                                pages[x[0]]--;
                                foundcount --;
                            } else {
                                if ((x[1] == -1) || (pages[x[0]] - pages[x[1]] > 1)) {
                                    nb.append(PP[x[0]]);                    
                                    nb.append(PP[x[0]]);
                                    pages[x[0]]-=2;
                                    foundcount-=2;
                                } else {
                                    nb.append(PP[x[0]]);
                                    pages[x[0]]--;
                                    nb.append(PP[x[1]]);
                                    pages[x[1]]--;
                                    foundcount-=2;
                                }
                            }
                            nb.append("" "");
                        }
                String result = nb.toString().trim();
                w.write(""Case #"" + actuallyChild +"": "" + result + ""
"");                
                System.out.println(""Case #"" + actuallyChild +"": "" + result );                
            }
            feed.close();
            w.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}",735,24,"parties1:partials1,parties:pages,partynum:size,result2:resultCount,i2:itwo,line2:rowB,actualCase:actuallyChild,PL:PP,maxvalues:allvalues,result1:Result4,totalcount:foundcount,sb:nb,sc:soc,input:feed,line1:lineOne,output:w,",10626,18.035437087218000,Beam
142,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,",2270,4.180940584341690,Beam
143,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,",2301,3.778568160533910,Beam
144,,,468,14,,1055,2.317279374599460,0
145,,,406,19,,1024,1.618466079235080,0
146,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException n) {
                n.printStackTrace();
            }
        }
        Scanner sq = new Scanner(System.in);
        int M = sq.nextInt();
        for(int SCasing=1;SCasing<=M;SCasing++){
            int N = sq.nextInt(), P = sq.nextInt(), NW = sq.nextInt();
            int P = 0, ares = 0;
            ares += N*(P/NW);
            if (P%NW==0)ares+=NW-1;
            else ares+=NW;
            System.out.println(""Case #""+SCasing+"": ""+ares);
        }
    }
}",309,11,"C:P,R:N,W:NW,res:ares,CASE:SCasing,sc:sq,T:M,r:m,e:n,",1737,2.9095583319664000,Beam
147,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.2876158277193700,Beam
148,,,321,18,,6960,11.693081347147600,0
149,,,269,16,,5830,9.649096298217770,0
150,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.5146147012710570,Beam
151,,,348,14,,3492,6.583811056613920,0
152,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6459403196970620,Beam
153,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,1.7903244853019700,Beam
154,,,269,16,,5812,9.708685656388600,0
155,,,321,13,,4372,7.940317058563230,0
156,,,265,12,,617,1.0637996474901800,0
157,,,406,16,,6077,11.694168070952100,0
158,,,256,13,,4237,7.748001801967620,0
159,,,393,19,,2359,4.220806729793550,0
160,,,149,10,,2109,2.7708197037378900,0
161,,,281,14,,3907,6.792920072873430,0
162,,,406,16,,1272,2.5976948459943100,0
163,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] ymutch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            ymutch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = ymutch[iu22] - ymutch[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = ymutch[i3] - ymutch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, ymutch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] ymutch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            ymutch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = ymutch[iu22] - ymutch[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = ymutch[i3] - ymutch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, ymutch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] ymutch = new int[n];
                    for (int i = 0; i < n; i++) {
                        ymutch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int stuff = ymutch[i] - ymutch[i + 1];
                        if (stuff > 0) {
                            first += stuff;
                        }
                    }
                    
                    int[] stuff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        stuff[i] = ymutch[i] - ymutch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, stuff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, ymutch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] ymutch = new int[n];
                for (int i = 0; i < n; i++) {
                    ymutch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int stuff = ymutch[i] - ymutch[i + 1];
                    if (stuff > 0) {
                        first += stuff;
                    }
                }
                
                int[] stuff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    stuff[i] = ymutch[i] - ymutch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, stuff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, ymutch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:ymutch,i4:iu22,diff:stuff,",1044,2.4792807857195500,Beam
164,,,375,12,,3670,6.723913590113320,0
165,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                slated.add(i, 0);
            }
            int equateOrg = 0;
            for (int i = 0; i < N; i++) {
                int w = r.nextInt();
                slated.set(i, w);
                equateOrg += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateOrg > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (max == second && equateOrg != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateOrg -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateOrg -= 1;
                }
            }
            if (equateOrg == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateOrg,temp:w,in:r,",1856,4.025873251756030,Beam
166,,,215,12,,3114,5.264161161581680,0
167,,,406,19,,1024,1.9514421979586300,0
168,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int c = 0; c < Integer.parseInt(count); c++) {
                times.clear();
                for (int i91 = 0; i91 < 2501 ;i91++) {
                    Integer r = new Integer(0);
                    times.add(i91, r);
                }
                Integer w = Integer.parseInt(bf.readLine());
                for (int itwo = 1; itwo < 2*w; itwo++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i91 = 0; i91 < nums.length; i91++) {
                        Integer temp = Integer.parseInt(nums[i91]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i91 = 0; i91 < 2501; i91 ++) {
                    if (times.get(i91) % 2 != 0) {
                        buffers += i91.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (c + 1) + "": "" + buffers + ""
"");

        }
        bf.close();
        fw.close();
    }
}",305,15,"n:w,a:r,i1:i91,i:c,i2:itwo,",2728,5.286389072736100,Beam
169,,,171,10,,2419,3.824160055319470,0
170,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6691409111022950,Beam
171,,,348,14,,3895,7.4913716316223100,0
172,,,290,12,,617,1.122060724099480,0
173,,,527,25,,16400,30.42810215950010,0
174,"class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder output = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int numTests = Integer.parseInt(br.readLine());
                    int test;
                    String [] testSplit;
                    int [] mush;
                    
                    // Loop through each test
                    for (int testCounter = 0; testCounter < numTests; ++testCounter) {
                        test=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mush= new int[test];
                        for(int s=0;s<test;s++)
                        {
                            mush[s]=Integer.parseInt(testSplit[s]);
                        }
                        int out1=0,out2=0;
                        int currentDiff=0,maxDiff=0;
                        out1=0;
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s]<mush[s-1])
                            {
                                currentDiff=mush[s-1]-mush[s];
                                out1+=currentDiff;
                                maxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;
                                
                            }
                        }
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s-1]<maxDiff)
                            {
                                out2+=mush[s-1];
                                
                            }
                            else
                            {
                                out2+=maxDiff;
                            }
                        }
                        System.out.println(""Case #""+(testCounter+1)+"": ""+out1+"" ""+out2);
        //                System.out.println(""Done"");
                        output.append(""Case #"").append((testCounter+1)).append("": "").append(out1+"" ""+out2);
                        output.append(""\n"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( output.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}","class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder letter = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int NumFables = Integer.parseInt(br.readLine());
                    int train;
                    String [] testSplit;
                    int [] mUSH;
                    
                    // Loop through each test
                    for (int matchCount = 0; matchCount < NumFables; ++matchCount) {
                        train=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mUSH= new int[train];
                        for(int n=0;n<train;n++)
                        {
                            mUSH[n]=Integer.parseInt(testSplit[n]);
                        }
                        int inPart=0,in=0;
                        int currentLength=0,out=0;
                        inPart=0;
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n]<mUSH[n-1])
                            {
                                currentLength=mUSH[n-1]-mUSH[n];
                                inPart+=currentLength;
                                out=(out<currentLength)?currentLength:out;
                                
                            }
                        }
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n-1]<out)
                            {
                                in+=mUSH[n-1];
                                
                            }
                            else
                            {
                                in+=out;
                            }
                        }
                        System.out.println(""Case #""+(matchCount+1)+"": ""+inPart+"" ""+in);
        //                System.out.println(""Done"");
                        letter.append(""Case #"").append((matchCount+1)).append("": "").append(inPart+"" ""+in);
                        letter.append(""
"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( letter.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}",443,17,"mush:mUSH,currentDiff:currentLength,maxDiff:out,s:n,test:train,testCounter:matchCount,output:letter,out2:in,out1:inPart,numTests:NumFables,",4186,7.95596311489741,Beam
175,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6836002628008530,Beam
176,,,298,16,,776,1.430254832903540,0
177,,,334,15,,5302,11.00710216363270,0
178,,,639,21,,6964,13.971959046522800,0
179,,,321,18,,1906,3.573415692647300,0
180,,,334,15,,5116,9.981260923544570,0
181,,,358,18,,6764,12.0026149392128,0
182,,,423,7,,917,1.6592388232549000,0
183,,,291,15,,4340,7.308089129130050,0
184,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.42711395025253300,Beam
185,,,291,13,,4062,7.380479383468630,0
186,,,262,14,,3442,6.53230322599411,0
187,,,256,13,,4423,7.831907590230310,0
188,,,292,17,,1338,2.3364627639452600,0
189,,,295,15,,672,1.2244163314501400,0
190,"class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int N = Integer.parseInt(br.readLine());
            int[][] vrst = new int[2*N-1][N];
            for(int j=0;j<2*N-1;j++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<N;k++) {
                    //System.out.println(""""+j+k);
                    vrst[j][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*N-1;i1++){
                for(int j = 0;j<N;j++){
                    bool[vrst[i1][j]]=!bool[vrst[i1][j]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""\n"");
            pw.write(""Case #""+(i+1)+"": ""+a+""\n"");

        }
        pw.close();
    }
}","class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int W = Integer.parseInt(br.readLine());
            int[][] cvste = new int[2*W-1][W];
            for(int dj=0;dj<2*W-1;dj++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<W;k++) {
                    //System.out.println(""""+j+k);
                    cvste[dj][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*W-1;i1++){
                for(int dj = 0;dj<W;dj++){
                    bool[cvste[i1][dj]]=!bool[cvste[i1][dj]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""
"");
            pw.write(""Case #""+(i+1)+"": ""+a+""
"");

        }
        pw.close();
    }
}",399,18,"N:W,j:dj,vrst:cvste,",1334,2.5131940881411200,Beam
191,,,169,10,,2419,3.2036709666252100,0
192,,,266,13,,2565,4.359187046686810,0
193,,,420,19,,7084,11.729236888885500,0
194,,,366,17,,900,1.4590330402056400,0
195,,,273,11,,3173,5.71293519337972,0
196,,,291,12,,3721,6.902137287457780,0
197,,,281,14,,4589,8.007457172870640,0
198,,,358,16,,5302,9.908428863684340,0
199,,,278,15,,3105,5.175867426395420,0
200,,,618,26,,10842,19.240910478433000,0
201,,,406,17,,5322,11.375516160329200,0
202,,,349,19,,5784,10.14732803106310,0
203,"class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanner = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int T = scanner.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = scanner.nextInt();
            int[] m = new int[N];
            for (int i = 0; i < N; i++) {
                m[i] = scanner.nextInt();
            }
            int s1 = 0;
            int maxDiff = 0;
            for (int i = 1; i < N; i++) {
                if (m[i-1] > m[i]) {
                    int diff = m[i-1] - m[i];
                    s1 += diff;
                    if (diff > maxDiff) {
                        maxDiff = diff;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < N-1; i++) {
                if (m[i] < maxDiff) {
                    s2 += m[i];
                } else {
                    s2 += maxDiff;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", t, s1, s2));
        }
        scanner.close();
        writer.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanner = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int T = scanner.nextInt();
        for (int t = 1; t <= T; t++) {
            int R = scanner.nextInt();
            int[] w = new int[R];
            for (int i = 0; i < R; i++) {
                w[i] = scanner.nextInt();
            }
            int s1 = 0;
            int maxDiff = 0;
            for (int i = 1; i < R; i++) {
                if (w[i-1] > w[i]) {
                    int diff = w[i-1] - w[i];
                    s1 += diff;
                    if (diff > maxDiff) {
                        maxDiff = diff;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < R-1; i++) {
                if (w[i] < maxDiff) {
                    s2 += w[i];
                } else {
                    s2 += maxDiff;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", t, s1, s2));
        }
        scanner.close();
        writer.close();
    }
}",267,13,"m:w,N:R,",525,0.8970946073532100,Beam
204,,,441,13,,3969,8.135672171910600,0
205,,,426,18,,3963,8.090842191378280,0
206,,,224,11,,3070,5.812695833047230,0
207,,,393,16,,5084,9.490960927804310,0
208,,,292,16,,4589,8.240286040306090,0
209,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int MN, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner planning = new Scanner(input);
        
        int T = planning.nextInt();
        for (int c = 0; c < T; c++) {
            
            MN = planning.nextInt();
            participant = new int[MN];
            max = 0;
            
            for (int r = 0; r < MN; r++) {

                participant[r] = planning.nextInt();
                max += participant[r];
            }

            System.out.printf(""Case #%d: "", c + 1);
            if (MN == 2) {
                for (int r = 1; r < participant[0]; r++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int i1 = 0; i1 < MN; i1++)
                        if (apple == -1 || participant[i1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = i1;
                        }
                        else if (cream == -1 || participant[i1] > participant[cream]) {
                            brence = cream;
                            cream = i1;
                        }
                        else if (brence == -1 || participant[i1] > participant[brence])
                            brence = i1;
                    int xi = participant[apple] - 1;
                    int w = participant[brence];
                    
                    if ((xi > w ? xi : w) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        planning.close();
    }

}",460,16,"sum:max,gold:apple,party:participant,silver:cream,bronze:brence,N:MN,x:xi,scanner:planning,y:w,j:r,i:c,",4930,10.146455057462100,Beam
210,,,887,27,,1754,3.8509421984354700,0
211,,,169,10,,2388,3.383150911331180,0
212,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.30684328079223600,Beam
213,,,269,16,,845,1.4331934849421200,0
214,,,887,27,,6700,12.829227081934600,0
215,,,366,17,,900,1.295634146531420,0
216,,,208,12,,2039,2.836567203203840,0
217,,,790,14,,4837,10.585943814118700,0
218,,,379,17,,6896,12.046116956075000,0
219,,,393,19,,1493,2.6105698307355200,0
220,,,291,13,,4062,7.259652014573420,0
221,,,887,27,,1585,3.298893717924750,0
222,,,211,11,,2698,4.293184979756670,0
223,,,358,16,,5302,10.5960223197937,0
224,,,255,13,,1861,4.339886053403220,0
225,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));
        
        int t = Integer.parseInt(in.readLine());
        
        for (int i = 1; i <= t; i++) {
            int res = 0;
            // body of the program
            
            String[] next = in.readLine().split("" "");
            int r = Integer.parseInt(next[0]);
            int c = Integer.parseInt(next[1]);
            int w = Integer.parseInt(next[2]);
            
            int row = (c - w) / w;
            if (c % w == 0) row += w;
            else row += w + 1;
            
            res = r*row;
            
            System.out.format(""Case #%d: %d\n"", i, res);
        }
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));
        
        int t = Integer.parseInt(in.readLine());
        
        for (int i = 1; i <= t; i++) {
            int res = 0;
            // body of the program
            
            String[] then = in.readLine().split("" "");
            int r = Integer.parseInt(then[0]);
            int m = Integer.parseInt(then[1]);
            int wed = Integer.parseInt(then[2]);
            
            int scale = (m - wed) / wed;
            if (m % wed == 0) scale += wed;
            else scale += wed + 1;
            
            res = r*scale;
            
            System.out.format(""Case #%d: %d
"", i, res);
        }
    }
}",172,11,"w:wed,row:scale,c:m,next:then,",1241,1.9130198955535900,Beam
226,,,358,16,,838,1.6018171826998400,0
227,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.3639858643213910,Beam
228,,,211,11,,807,1.3194623708725000,0
229,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.4087817152341210,Beam
230,,,553,21,,907,1.7431023279825800,0
231,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, c1, s2, r10;
        double frequency;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            c1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                c1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            frequency = (double)maxdif / 10;
            
            r10 = (int)(frequency*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + c1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:frequency,m:w,s1:c1,",1148,2.038513998190560,Beam
232,,,321,13,,4093,7.063152929147080,0
233,,,278,15,,801,1.306303036212920,0
234,,,281,14,,5209,8.779707117875420,0
235,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int TATCH=1;TATCH<=T;TATCH++){
            int N = sc.nextInt(), N = sc.nextInt(), WF = sc.nextInt();
            int w = 0, res = 0;
            res += N*(N/WF);
            if (N%WF==0)res+=WF-1;
            else res+=WF;
            System.out.println(""Case #""+TATCH+"": ""+res);
        }
    }
}",309,11,"R:N,C:N,W:WF,CASE:TATCH,",962,1.6275933067003900,Beam
236,,,419,16,,2853,5.3272130211194400,0
237,,,324,13,,3814,6.683049952983860,0
238,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter line = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int diff;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            diff = 0;
            for (int chi = 0; chi < w; chi++)
                diff += judges.get(chi);

            while (diff-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    diff--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > diff / 2)
                        System.line.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            line.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        line.close();
    }

}",464,17,"senators:judges,sum:diff,i:chi,index2:slice1,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:line,",5085,9.82800753513972,Beam
239,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int W, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scan = new Scanner(input);
        
        int T = scan.nextInt();
        for (int mi = 0; mi < T; mi++) {
            
            W = scan.nextInt();
            participant = new int[W];
            max = 0;
            
            for (int r = 0; r < W; r++) {

                participant[r] = scan.nextInt();
                max += participant[r];
            }

            System.out.printf(""Case #%d: "", mi + 1);
            if (W == 2) {
                for (int r = 1; r < participant[0]; r++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (apple == -1 || participant[i1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = i1;
                        }
                        else if (cream == -1 || participant[i1] > participant[cream]) {
                            brence = cream;
                            cream = i1;
                        }
                        else if (brence == -1 || participant[i1] > participant[brence])
                            brence = i1;
                    int xi = participant[apple] - 1;
                    int w = participant[brence];
                    
                    if ((xi > w ? xi : w) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scan.close();
    }

}",460,16,"gold:apple,sum:max,party:participant,silver:cream,bronze:brence,N:W,j:r,y:w,x:xi,i:mi,scanner:scan,",4899,9.931613949934640,Beam
240,,,132,9,,1701,2.0742422461509700,0
241,,,553,21,,907,1.7185723622640000,0
242,,,257,11,,807,1.510476537545520,0
243,,,328,16,,1241,2.3402071634928400,0
244,,,655,16,,2015,3.9444801926612900,0
245,,,262,14,,652,1.0756557703018200,0
246,,,305,15,,799,1.3616884430249500,0
247,,,298,16,,4527,7.415346129735310,0
248,,,525,23,,13541,24.141548375288600,0
249,,,325,14,,4797,8.910463015238440,0
250,,,269,16,,845,1.4735967715581300,0
251,,,517,26,,12380,23.423416352272000,0
252,,,282,13,,4416,7.568866340319320,0
253,,,156,10,,2202,2.695335853099820,0
254,,,291,13,,4248,7.746637686093650,0
255,,,334,15,,5581,11.176660712560000,0
256,,,250,11,,838,1.5313650687535600,0
257,,,317,12,,3691,6.910333510239920,0
258,,,265,12,,894,1.519438874721530,0
259,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.1798544963200890,Beam
260,,,371,12,,900,1.8206628918647800,0
261,,,184,9,,1706,2.9957117835680600,0
262,,,269,16,,845,1.4276350180308000,0
263,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7374295353889470,Beam
264,,,479,25,,2689,5.133931310971580,0
265,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream max = System.max;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.max.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), M = scanner.nextLong(), A = scanner.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % A == 0) {
                max.println (ants + M/A - 1 + A);
            } else {
                max.println (ants + M/A + A);
            }
        }

    }
}",156,10,"W:A,ans:ants,C:M,out:max,",1107,1.5564266284306800,Beam
266,,,443,17,,2490,4.670585838953650,0
267,,,292,16,,4155,7.417108023166660,0
268,,,344,15,,772,1.363788334528610,0
269,,,285,14,,4837,8.341460200150810,0
270,,,269,16,,5830,9.864184113343560,0
271,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans = 0;
            int ansalt = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                if (size < w)
                    ans += (w - size);
            }
            
            //2
            int now = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                int c = w - size;
                if (c > now)
                    now = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < now)
                    ansalt += rows[j];
                else
                    ansalt += now;
            }
            
            pw.println(String.format(print, i, ans, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:now,s:size,prefix:print,ans2:ansalt,ans1:ans,f:w,",4308,7.517432554562890,Beam
272,,,443,17,,3251,6.141544918219250,0
273,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,4.6832544247309400,Beam
274,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                slated.add(i, 0);
            }
            int equateOrg = 0;
            for (int i = 0; i < N; i++) {
                int w = r.nextInt();
                slated.set(i, w);
                equateOrg += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateOrg > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (max == second && equateOrg != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateOrg -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateOrg -= 1;
                }
            }
            if (equateOrg == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateOrg,temp:w,in:r,",1856,4.021668191750850,Beam
275,,,222,16,,4174,6.749380421638490,0
276,"class Main {
    public static final String ALPHABET[] = {
        ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""
    };
    public static void main(String[] args) throws Exception {
        // set up scanner and iterate over test cases
        Scanner scanner = new Scanner(new FileInputStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.in""));
        PrintStream output = new PrintStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.out"");
        int T = scanner.nextInt();
        for (int t = 1; t <= T; ++t) {
            // get parameters
            int N = scanner.nextInt();
            int[] parties = new int[N];
            int senatorsCount = 0;
            for (int n = 0; n < N; ++n)
                senatorsCount += (parties[n] = scanner.nextInt());
            // solve problem
            output.print(""Case #"" + t + "":"");
            while (senatorsCount > 0) {
                // find largest party / parties
                int maxC1 = 0;
                int maxC2 = 0;
                int maxI1 = 0;
                int maxI2 = 0;
                for (int party = 0; party < N; ++party)
                    if (parties[party] > maxC1) {
                        maxC2 = maxC1;
                        maxI2 = maxI1;
                        maxC1 = parties[party];
                        maxI1 = party;
                    }
                    else if (parties[party] == maxC1 || parties[party] > maxC2) {
                        maxC2 = parties[party];
                        maxI2 = party;
                    }
                // remove at least one senator
                output.print("" "" + ALPHABET[maxI1]);
                --maxC1;
                --parties[maxI1];
                --senatorsCount;
                // decide if a second senator should leave
                if (maxC1 > maxC2) {
                    // remove 2nd senator from this party
                    output.print(ALPHABET[maxI1]);
                    --maxC1;
                    --parties[maxI1];
                    --senatorsCount;
                }
                else if (senatorsCount == 1 || 2 * maxC2 > senatorsCount) {
                    // remove 2nd senator from 2nd party
                    output.print(ALPHABET[maxI2]);
                    --maxC2;
                    --parties[maxI2];
                    --senatorsCount;
                }
            }
            output.println();
        }
        output.close();
        System.out.println(""finished"");
    }
}","class Main {
    public static final String ALPHABET[] = {
        ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""
    };
    public static void main(String[] args) throws Exception {
        // set up scanner and iterate over test cases
        Scanner scanner = new Scanner(new FileInputStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.in""));
        PrintStream output = new PrintStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.out"");
        int R = scanner.nextInt();
        for (int t = 1; t <= R; ++t) {
            // get parameters
            int W = scanner.nextInt();
            int[] games = new int[W];
            int encersSize = 0;
            for (int c = 0; c < W; ++c)
                encersSize += (games[c] = scanner.nextInt());
            // solve problem
            output.print(""Case #"" + t + "":"");
            while (encersSize > 0) {
                // find largest party / parties
                int maxC1 = 0;
                int maxC2 = 0;
                int maxI1 = 0;
                int maxC12 = 0;
                for (int currency = 0; currency < W; ++currency)
                    if (games[currency] > maxC1) {
                        maxC2 = maxC1;
                        maxC12 = maxI1;
                        maxC1 = games[currency];
                        maxI1 = currency;
                    }
                    else if (games[currency] == maxC1 || games[currency] > maxC2) {
                        maxC2 = games[currency];
                        maxC12 = currency;
                    }
                // remove at least one senator
                output.print("" "" + ALPHABET[maxI1]);
                --maxC1;
                --games[maxI1];
                --encersSize;
                // decide if a second senator should leave
                if (maxC1 > maxC2) {
                    // remove 2nd senator from this party
                    output.print(ALPHABET[maxI1]);
                    --maxC1;
                    --games[maxI1];
                    --encersSize;
                }
                else if (encersSize == 1 || 2 * maxC2 > encersSize) {
                    // remove 2nd senator from 2nd party
                    output.print(ALPHABET[maxC12]);
                    --maxC2;
                    --games[maxC12];
                    --encersSize;
                }
            }
            output.println();
        }
        output.close();
        System.out.println(""finished"");
    }
}",406,16,"senatorsCount:encersSize,N:W,n:c,parties:games,T:R,party:currency,maxI2:maxC12,",3938,7.576070308685300,Beam
277,,,334,15,,5178,10.172466297944400,0
278,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int ii=0;ii<t;ii++){
        int c=inp.nextInt();
        int[] br=new int[c];
        for(int j=0;j<c;j++){
            br[j]=inp.nextInt();
        }
        int mean1=0;
        int miss2=0;
        for(int key=0;key<c-1;key++){
            
            int y=(br[key]-br[key+1]>0)? br[key]-br[key+1]:0;
            mean1+=y;
        
        }
        int w=0;
        for(int r=0;r<c-1;r++){
            w=Math.max(w,br[r]-br[r+1]);
        }
        for(int c=0;c<c-1;c++){
            int x=(br[c]<=w)?br[c]:w;
            miss2+=x;
        }

        System.out.println(""Case #""+(ii+1)+"": ""+mean1+"" ""+miss2);
    }
}
}",272,16,"sum1:mean1,sum2:miss2,h:r,arr:br,k:key,d:c,v:w,n:c,i:ii,",4735,6.783613991737370,Beam
279,,,272,16,,4910,7.211978713671370,0
280,,,211,11,,3008,5.067978429794310,0
281,,,291,15,,3372,5.589340380827590,0
282,,,348,14,,3895,7.337277440230050,0
283,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long gain = 0;
                while( flippingWhatever != 0 )
                {
                    gain = gain * 10;
                    gain = gain + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = gain;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:gain,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",2021,3.6381845315297400,Beam
284,,,255,13,,2946,6.612319485346480,0
285,,,305,15,,799,1.49221484263738,0
286,,,269,16,,5865,10.12117840051650,0
287,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.171402382850650,Beam
288,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.4081096728642780,Beam
289,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.2453376849492390,Beam
290,,,281,14,,5209,8.880273552735650,0
291,,,443,17,,2583,4.744660667578380,0
292,,,292,15,,4180,7.661643016338350,0
293,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.36711782614390100,Beam
294,,,553,21,,1663,3.225130001703900,0
295,,,321,18,,6952,11.773703356583900,0
296,,,553,21,,907,1.7413463950157200,0
297,,,311,17,,6608,10.7391859014829,0
298,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.8014024933179220,Beam
299,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans = 0;
            int ansalt = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                if (size < w)
                    ans += (w - size);
            }
            
            //2
            int now = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                int c = w - size;
                if (c > now)
                    now = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < now)
                    ansalt += rows[j];
                else
                    ansalt += now;
            }
            
            pw.println(String.format(print, i, ans, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:now,prefix:print,s:size,ans2:ansalt,ans1:ans,f:w,",4308,7.580302015940350,Beam
300,,,544,17,,5844,12.200943541526800,0
301,,,292,17,,2157,3.7718183755874600,0
302,,,272,16,,5945,8.864301013946530,0
303,,,366,17,,6139,10.752092611789700,0
304,,,295,15,,672,1.287227209409080,0
305,,,334,15,,5581,11.214529514312700,0
306,,,292,16,,4155,7.515931463241580,0
307,,,292,15,,2866,5.173116942246760,0
308,,,156,10,,2449,3.4061559240023300,0
309,,,399,18,,6232,11.920893700917600,0
310,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int trials = scan.nextInt();

        for (int i = 0; i < trials; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int u = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (u / time) + (u - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"w:time,ans:ants,c:u,cases:trials,",1086,1.488559405008950,Beam
311,,,211,11,,2791,4.567967359224960,0
312,,,408,17,,6067,11.866575980186500,0
313,,,292,17,,6868,11.966930143038400,0
314,,,198,10,,2190,4.011129605770110,0
315,,,257,11,,807,1.4668928424517300,0
316,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7357289830843610,Beam
317,,,254,13,,655,1.124333413441980,0
318,,,321,18,,953,1.7451353748639400,0
319,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.24818650086720800,Beam
320,,,240,13,,1694,2.816570158799490,0
321,,,655,16,,2046,4.469408750534060,0
322,,,513,26,,16189,27.881111216545100,0
323,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.909908143679301,Beam
324,,,265,12,,617,1.057243283589680,0
325,,,142,11,,2423,4.0032958626747100,0
326,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.37159108320872000,Beam
327,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,4.70339655081431,Beam
328,,,479,25,,2445,4.795209848880770,0
329,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner cc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = cc.nextInt();
        
        for (int x = 1; x <= R; ++x) {
            int W = cc.nextInt();
            
            int[][] yr = new int[2*W-1][W];
            
            // 2 * N - 1 line with N numbers
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    yr[c][c] = cc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> mp = new HashMap<>();
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    if (mp.get(yr[c][c]) == null) {
                        mp.put(yr[c][c], 1);
                    }
                    else {
                        int w = mp.get(yr[c][c]);
                        mp.put(yr[c][c], w + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int c : mp.keySet()) {
                if (mp.get(c) % 2 != 0) {
                    r.add(c);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int c = 0; c < r.size(); ++c) {
                System.out.print("" "" + r.get(c));
            }
            System.out.println();
        }

        cc.close();
    }
}",375,12,"N:W,i:c,arr:yr,T:R,k:w,map:mp,j:c,sc:cc,",2754,5.028202962875370,Beam
330,,,292,16,,4155,7.388717492421470,0
331,,,527,25,,16400,30.13754060268400,0
332,"class a1 {

    private static final String[] PL = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader input = null;
        BufferedWriter output = null;
        Date d1 = new Date();
        try {
            input = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            output = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String line1 = null;
            String line2 = null;
            int expectedCases = 0;
            int actualCase = -1;
            line1=input.readLine();
            expectedCases = Integer.parseInt(line1);
            for (actualCase = 1; actualCase<=expectedCases; actualCase++) {
                line1=input.readLine();
                line2=input.readLine();
                Scanner sc = new Scanner(line1);
                        int partynum = sc.nextInt();
                        Scanner sc1 = new Scanner(line2);
                        int[] parties1 = new int[partynum];
                        for (int i2 = 0; i2< partynum; i2++ ) {
                            parties1[i2] = sc1.nextInt();
                        }
                        int[] parties = parties1;
                        int result2 = 0;
                        for(int i1 : parties) {
                            result2 +=i1;
                        }
                        int totalcount = result2;
                        StringBuffer sb = new StringBuffer(2*partynum);
                        while (totalcount > 0) {
                            int[] result1 = new int[2];
                            int[] maxvalues = new int[2];
                            result1[0] = -1;
                            result1[1] = -1;
                            maxvalues[0] = -1;
                            maxvalues[1] = -1;
                            for (int i = 0; i<parties.length; i++){
                                if (parties[i]> maxvalues[0]) {
                                    result1[1] = result1[0];
                                    maxvalues[1] = maxvalues[0];
                                    result1[0] = i;
                                    maxvalues[0] = parties[i];
                                } else {
                                    if (parties[i] > maxvalues[1]) {
                                        result1[1] =i;
                                        maxvalues[1] = parties[i];
                                    }
                                }
                            }
                            int[] x = result1;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((totalcount ==3) || ((x[1] == -1) && (parties[x[0]] == 1)) ) {
                                sb.append(PL[x[0]]);
                                parties[x[0]]--;
                                totalcount --;
                            } else {
                                if ((x[1] == -1) || (parties[x[0]] - parties[x[1]] > 1)) {
                                    sb.append(PL[x[0]]);                    
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]-=2;
                                    totalcount-=2;
                                } else {
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]--;
                                    sb.append(PL[x[1]]);
                                    parties[x[1]]--;
                                    totalcount-=2;
                                }
                            }
                            sb.append("" "");
                        }
                String result = sb.toString().trim();
                output.write(""Case #"" + actualCase +"": "" + result + ""\n"");                
                System.out.println(""Case #"" + actualCase +"": "" + result );                
            }
            input.close();
            output.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}","class a1 {

    private static final String[] PP = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader feed = null;
        BufferedWriter config = null;
        Date d1 = new Date();
        try {
            feed = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            config = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String lineOne = null;
            String rowB = null;
            int expectedCases = 0;
            int actuallyChild = -1;
            lineOne=feed.readLine();
            expectedCases = Integer.parseInt(lineOne);
            for (actuallyChild = 1; actuallyChild<=expectedCases; actuallyChild++) {
                lineOne=feed.readLine();
                rowB=feed.readLine();
                Scanner soc = new Scanner(lineOne);
                        int size = soc.nextInt();
                        Scanner sc1 = new Scanner(rowB);
                        int[] partials1 = new int[size];
                        for (int itwo = 0; itwo< size; itwo++ ) {
                            partials1[itwo] = sc1.nextInt();
                        }
                        int[] pages = partials1;
                        int resultCount = 0;
                        for(int i1 : pages) {
                            resultCount +=i1;
                        }
                        int foundcount = resultCount;
                        StringBuffer nb = new StringBuffer(2*size);
                        while (foundcount > 0) {
                            int[] Result4 = new int[2];
                            int[] allvalues = new int[2];
                            Result4[0] = -1;
                            Result4[1] = -1;
                            allvalues[0] = -1;
                            allvalues[1] = -1;
                            for (int i = 0; i<pages.length; i++){
                                if (pages[i]> allvalues[0]) {
                                    Result4[1] = Result4[0];
                                    allvalues[1] = allvalues[0];
                                    Result4[0] = i;
                                    allvalues[0] = pages[i];
                                } else {
                                    if (pages[i] > allvalues[1]) {
                                        Result4[1] =i;
                                        allvalues[1] = pages[i];
                                    }
                                }
                            }
                            int[] x = Result4;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((foundcount ==3) || ((x[1] == -1) && (pages[x[0]] == 1)) ) {
                                nb.append(PP[x[0]]);
                                pages[x[0]]--;
                                foundcount --;
                            } else {
                                if ((x[1] == -1) || (pages[x[0]] - pages[x[1]] > 1)) {
                                    nb.append(PP[x[0]]);                    
                                    nb.append(PP[x[0]]);
                                    pages[x[0]]-=2;
                                    foundcount-=2;
                                } else {
                                    nb.append(PP[x[0]]);
                                    pages[x[0]]--;
                                    nb.append(PP[x[1]]);
                                    pages[x[1]]--;
                                    foundcount-=2;
                                }
                            }
                            nb.append("" "");
                        }
                String result = nb.toString().trim();
                config.write(""Case #"" + actuallyChild +"": "" + result + ""
"");                
                System.out.println(""Case #"" + actuallyChild +"": "" + result );                
            }
            feed.close();
            config.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}",735,24,"parties1:partials1,parties:pages,partynum:size,result2:resultCount,i2:itwo,line2:rowB,actualCase:actuallyChild,PL:PP,maxvalues:allvalues,result1:Result4,totalcount:foundcount,sb:nb,sc:soc,input:feed,line1:lineOne,output:config,",10626,17.959940322240200,Beam
333,,,303,12,,2530,4.717493569850920,0
334,,,198,10,,2451,4.3607279976209,0
335,,,379,17,,6738,11.653901342550900,0
336,,,263,13,,683,1.1958470622698500,0
337,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.4108673175175990,Beam
338,,,443,17,,1540,2.9494980613390600,0
339,,,255,13,,2915,6.228179804484050,0
340,,,257,11,,807,1.4493818918863900,0
341,,,406,17,,5322,10.949904318650600,0
342,,,250,11,,2822,5.058605726559960,0
343,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.1795333703358970,Beam
344,,,525,23,,13540,23.94618627230330,0
345,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int numberSum = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int index = 0; index < numberSum; index++) {
            String line1 = letters.get(currentIndex++);
            String cellTwo = letters.get(currentIndex++);
            String[] array = cellTwo.split("" "");
            int[] ans = new int[array.length];
            for (int i94 = 0; i94 < array.length; i94++) {
                ans[i94] = Integer.valueOf(array[i94]);
            }
            int[] boss = ans;
            long[] lockOne = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int li27 = 0; li27 < boss.length - 1; li27++) {
                        if (boss[li27+1] < boss[li27]) {
                            lockOne[0] += boss[li27] - boss[li27+1];
                        }
                    }
                    
                    int size = 0;
                    for (int i3 = 0; i3 < boss.length - 1; i3++) {
                        if (boss[i3+1] < boss[i3]) {
                            size = Math.max(size, boss[i3] - boss[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < boss.length - 1; i1++) {
                        lockOne[1] += Math.pos(boss[i1], size);
                    }
            long[] pos = lockOne;
            String r = ""Case #"" + (index + 1) + "": "" + pos[0] + "" "" + pos[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:boss,rate:size,min1:lockOne,lines:letters,i4:i94,vals:array,i2:li27,problemCount:numberSum,min:pos,line2:cellTwo,i:index,",6221,11.842553075154600,Beam
346,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int numberSum = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int v = 0; v < numberSum; v++) {
            String line1 = letters.get(currentIndex++);
            String cellTwo = letters.get(currentIndex++);
            String[] arr = cellTwo.split("" "");
            int[] arr = new int[arr.length];
            for (int i94 = 0; i94 < arr.length; i94++) {
                arr[i94] = Integer.valueOf(arr[i94]);
            }
            int[] Mill = arr;
            long[] lock2 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int li27 = 0; li27 < Mill.length - 1; li27++) {
                        if (Mill[li27+1] < Mill[li27]) {
                            lock2[0] += Mill[li27] - Mill[li27+1];
                        }
                    }
                    
                    int rated = 0;
                    for (int li26 = 0; li26 < Mill.length - 1; li26++) {
                        if (Mill[li26+1] < Mill[li26]) {
                            rated = Math.max(rated, Mill[li26] - Mill[li26+1]);
                        }
                    }
                    
                    for (int xi01 = 0; xi01 < Mill.length - 1; xi01++) {
                        lock2[1] += Math.pos(Mill[xi01], rated);
                    }
            long[] pos = lock2;
            String r = ""Case #"" + (v + 1) + "": "" + pos[0] + "" "" + pos[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:Mill,rate:rated,lines:letters,min1:lock2,i2:li27,i3:li26,ans:arr,min:pos,i4:i94,vals:arr,line2:cellTwo,i1:xi01,problemCount:numberSum,i:v,",7018,12.969460380077400,Beam
347,,,443,17,,5695,10.355857872963000,0
348,"class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int s[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        s[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int max = 0;
                        for (int ss: s)
                            max = Math.max(max, ss);
                        if (max == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (s[i] == max)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            s[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            s[c1]--;
                            s[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""\n"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int r = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int w[] = new int[r];
                    for (int i = 0; i < r; ++i)
                        w[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int last = 0;
                        for (int ss: w)
                            last = Math.last(last, ss);
                        if (last == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < r; ++i) {
                            if (w[i] == last)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            w[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            w[c1]--;
                            w[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""
"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",417,19,"max:last,s:w,n:r,",1705,3.103770975271860,Beam
349,,,169,10,,2419,3.2067989786466000,0
350,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long gain = 0;
                while( flippingWhatever != 0 )
                {
                    gain = gain * 10;
                    gain = gain + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = gain;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:gain,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",2021,3.6065092126528400,Beam
351,,,269,16,,5615,9.018524781862900,0
352,,,290,12,,617,1.099609343210860,0
353,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,0.7609913388888040,Beam
354,,,266,13,,4054,7.502433196703590,0
355,,,250,11,,807,1.4738108356793700,0
356,,,420,19,,7084,12.713453523318000,0
357,,,513,26,,16413,28.42695759534840,0
358,,,285,14,,5209,8.902508596579230,0
359,,,254,13,,951,1.592932609717050,0
360,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.1924561341603600,Beam
361,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.49367158810297600,Beam
362,,,443,17,,1509,2.8778456966082300,0
363,,,262,14,,652,1.1611795703570000,0
364,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.9259236454963680,Beam
365,"static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int parties=Integer.parseInt(in.readLine());
            String[] Members=in.readLine().split("" "");
            int total=0;
            for(int j=0;j<parties;j++){
                total+=Integer.parseInt(Members[j]);
                    }
            while(total!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ans="""";
                for(int j=0;j<parties;j++){
                        if(first<Integer.parseInt(Members[j])){
                            second=first;
                            first=Integer.parseInt(Members[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Members[j])){
                                    second=Integer.parseInt(Members[j]);
                                    num2=j;
                                }
                            }
                    }
                ans=""""+(char)(65+num1);
                Members[num1]=Integer.toString(Integer.parseInt(Members[num1])-1);
                total-=1;
                String ans2="""";
                for(int j=0;j<parties;j++){
                    double p=total;
                    if(Double.parseDouble(Members[j])/p>0.5){
                        ans+=(char)(65+j);
                        Members[j]=Integer.toString(Integer.parseInt(Members[j])-1);
                        total-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}","static void main(String[] args) throws IOException
    {
        BufferedReader out = new BufferedReader(new InputStreamReader(System.out));
        int T = Integer.parseInt(out.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int partsials=Integer.parseInt(out.readLine());
            String[] Players=out.readLine().split("" "");
            int no=0;
            for(int j=0;j<partsials;j++){
                no+=Integer.parseInt(Players[j]);
                    }
            while(no!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ants="""";
                for(int j=0;j<partsials;j++){
                        if(first<Integer.parseInt(Players[j])){
                            second=first;
                            first=Integer.parseInt(Players[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Players[j])){
                                    second=Integer.parseInt(Players[j]);
                                    num2=j;
                                }
                            }
                    }
                ants=""""+(char)(65+num1);
                Players[num1]=Integer.toString(Integer.parseInt(Players[num1])-1);
                no-=1;
                String ans2="""";
                for(int j=0;j<partsials;j++){
                    double p=no;
                    if(Double.parseDouble(Players[j])/p>0.5){
                        ants+=(char)(65+j);
                        Players[j]=Integer.toString(Integer.parseInt(Players[j])-1);
                        no-=1;
                        break;
                    }
                }
            System.out.print(ants+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}",405,15,"parties:partsials,Members:Players,total:no,ans:ants,in:out,",2481,4.902713604768120,Beam
366,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.8143587549527490,Beam
367,,,256,13,,3064,5.900469203790030,0
368,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,1.0538758238156600,Beam
369,,,260,11,,2512,4.8882395307223,0
370,,,348,21,,7870,13.694846522808100,0
371,,,344,15,,1144,2.0412490208943700,0
372,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.5169438521067300,Beam
373,,,256,13,,927,1.764233108361560,0
374,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.8087577064832050,Beam
375,,,298,16,,776,1.4250539660453800,0
376,,,321,18,,1444,2.625726079940800,0
377,,,290,12,,3633,6.783644429842630,0
378,,,406,17,,5260,11.663945786158200,0
379,,,887,27,,6962,14.512019570668500,0
380,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.9613539218902590,Beam
381,,,271,12,,3175,5.223320313294730,0
382,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.778411595026652,Beam
383,"class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int N = in.nextInt();
            int[] P = new int[N];
            int total = 0;
            for (int n = 0; n < N; n++) {
                P[n] = in.nextInt();
                total += P[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int i = 0; i < P.length; i++) {
                    int v = P[i];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = i;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = i;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = P[iMax1];
                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        P[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        P[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}","class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int R = in.nextInt();
            int[] W = new int[R];
            int total = 0;
            for (int n = 0; n < R; n++) {
                W[n] = in.nextInt();
                total += W[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int c = 0; c < W.length; c++) {
                    int v = W[c];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = c;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = c;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = W[iMax1];
                int vMax2 = iMax2 > -1 ? W[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    W[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        W[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    W[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        W[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}",527,25,"P:W,N:R,i:c,",2419,4.5787755131721500,Beam
384,,,200,10,,2233,3.321043407917020,0
385,,,887,27,,6688,13.920807421207400,0
386,,,340,10,,2395,4.5932110746701600,0
387,,,285,14,,5209,9.021346986293790,0
388,,,426,18,,3560,7.193710247675580,0
389,,,655,16,,2583,5.649294098218280,0
390,,,553,21,,1373,2.547362768650060,0
391,,,344,15,,1789,3.1045256932576500,0
392,,,887,27,,1721,3.6613832235336300,0
393,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0775887529055300,Beam
394,,,298,16,,1179,2.1428709268569900,0
395,,,271,12,,3167,5.405776274204250,0
396,,,386,18,,1377,2.3814764817555700,0
397,,,408,17,,5523,10.293009344736700,0
398,,,290,12,,617,1.136294428507490,0
399,,,254,13,,4311,7.786174142360690,0
400,,,278,15,,5165,8.785008370876310,0
401,,,291,12,,3721,6.94704342285792,0
402,,,326,14,,4899,8.579817998409270,0
403,,,325,14,,4795,8.887843561172490,0
404,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,1.0015294233957900,Beam
405,,,241,15,,3514,6.207678198814390,0
406,,,256,13,,4356,7.7824214418729100,0
407,,,735,24,,11331,19.33540932337440,0
408,,,256,13,,3427,6.472448325157170,0
409,,,334,15,,1179,2.4433385213216100,0
410,,,295,16,,838,1.4681028445561700,0
411,,,887,27,,6546,13.719436093171400,0
412,,,375,12,,3522,6.639242001374560,0
413,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,",2270,4.364151906967160,Beam
414,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long counter = queue.poll();
                
                if (counter == W){
                    break;
                }
                
                next[0] = counter + 1;
                StringBuilder builder = new StringBuilder(Long.toString(counter));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= W && next[i] > counter){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(counter) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,number:counter,",402,0.7817663113276160,Beam
415,,,265,12,,3393,5.869820324579880,0
416,,,298,16,,776,1.4210377057393400,0
417,,,254,13,,655,1.1530579408009800,0
418,,,334,15,,1179,2.4554423610369400,0
419,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    queryIn    = new Scanner(System.in);
        
        int W    = queryIn.nextInt();
        
        for(int index=0; index<W; ++index) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        row    = queryIn.nextInt();
            int        a    = queryIn.nextInt();
            int        row    = queryIn.nextInt();
            int    total    = row*a;
            int    ref2        = 0;
            
            //    scan
            ref2    = row*(a/row);
            
            if(a % row == 0) {
                ref2    += row-1;
            } else if( row == 1) {
            } else {
                ref2    += row;
            }
            
            int    continue    = ref2;
            
            System.out.println(""Case #"" + (index+1) + "": "" + continue);
        }
        
        queryIn.close();
    }
}",171,10,"w:row,c:a,ret1:ref2,r:row,i:index,ret:continue,scanIn:queryIn,T:W,",2109,3.3704269925753300,Beam
420,,,326,14,,2140,4.000735672314960,0
421,,,443,17,,1540,3.0234236160914100,0
422,,,211,11,,3008,4.962264712651570,0
423,,,366,17,,900,1.5444266200065600,0
424,,,269,16,,5816,9.789216828346250,0
425,,,655,16,,2086,4.5399374723434400,0
426,,,358,18,,6784,12.032396399974800,0
427,,,290,12,,617,1.138574739297230,0
428,,,169,10,,2109,2.9829209009806300,0
429,,,256,13,,927,1.7725828448931400,0
430,,,368,14,,4837,8.776699475447340,0
431,,,605,21,,8441,14.067652193705200,0
432,,,417,18,,3845,7.5620609521865800,0
433,,,211,11,,2760,4.409087510903680,0
434,,,311,17,,2127,3.625940676530200,0
435,,,423,7,,919,1.658245289325710,0
436,,,418,13,,4434,10.241648387908900,0
437,,,406,19,,1024,1.9172761599222800,0
438,,,258,14,,5147,9.38503990570704,0
439,,,250,11,,838,1.5493982632954900,0
440,,,375,12,,1978,3.731971553961440,0
441,,,513,26,,16247,29.015628310044600,0
442,,,363,16,,6077,10.7673104763031,0
443,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter line = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int diff;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            diff = 0;
            for (int chi = 0; chi < w; chi++)
                diff += judges.get(chi);

            while (diff-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    diff--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > diff / 2)
                        System.line.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            line.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        line.close();
    }

}",464,17,"senators:judges,sum:diff,index2:slice1,i:chi,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:line,",5085,9.65069411198298,Beam
444,,,393,16,,4927,8.875795018672940,0
445,,,348,14,,3895,6.848322228590650,0
446,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException n) {
                n.printStackTrace();
            }
        }
        Scanner enc = new Scanner(System.in);
        int N = enc.nextInt();
        for(int SCasing=1;SCasing<=N;SCasing++){
            int N = enc.nextInt(), E = enc.nextInt(), NW = enc.nextInt();
            int w = 0, Rs = 0;
            Rs += N*(E/NW);
            if (E%NW==0)Rs+=NW-1;
            else Rs+=NW;
            System.out.println(""Case #""+SCasing+"": ""+Rs);
        }
    }
}",309,11,"C:E,R:N,W:NW,res:Rs,CASE:SCasing,sc:enc,T:N,r:m,e:n,",1737,2.8335970044136000,Beam
447,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.1537999391555800,Beam
448,,,269,13,,3982,7.002893241246540,0
449,,,527,25,,16245,30.890335122744200,0
450,,,448,16,,4139,8.139619135856630,0
451,,,298,16,,776,1.4160319169362400,0
452,,,334,15,,1551,3.226450248559320,0
453,,,273,11,,1043,1.9452432592709900,0
454,,,265,12,,617,1.074402379989620,0
455,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.9282260616620380,Beam
456,,,317,12,,3371,6.1460061033566800,0
457,,,290,12,,3633,6.610870965321860,0
458,,,468,14,,1055,2.668786688645680,0
459,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ras2 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                if (w < f)
                    ras2 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < size)
                    ans2 += rows[j];
                else
                    ans2 += size;
            }
            
            pw.println(String.format(print, i, ras2, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:size,prefix:print,s:w,ans1:ras2,",2956,5.2315440972646100,Beam
460,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.31522499322891200,Beam
461,,,208,12,,2323,3.884608232975010,0
462,,,406,16,,1303,2.600341002146400,0
463,,,291,15,,4048,6.844135765234630,0
464,,,187,12,,3411,4.706954415639240,0
465,,,292,15,,3704,6.5729344646136000,0
466,,,326,14,,5209,9.30169107913971,0
467,,,308,12,,2016,3.9091646035512300,0
468,,,348,14,,3523,6.524076187610630,0
469,,,366,17,,900,1.558155353864030,0
470,,,250,11,,1985,3.545044112205510,0
471,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5663494189580280,Beam
472,,,334,12,,3360,6.46396770477295,0
473,,,344,15,,1144,1.9883718450864200,0
474,,,345,16,,861,1.4557337125142400,0
475,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int NR = Integer.parseInt(st.nextToken());
            int M = Integer.parseInt(st.nextToken());
            int DW = Integer.parseInt(st.nextToken());

            if (DW == M)
                out.println(DW+NR-1);
            else if (M < 2*DW)
                out.println(NR+DW);
            else if (M == 2*DW)
                out.println(2*NR-1+DW);
            else {
                int diff = M%DW;
                if (diff == 0) {
                    out.println((M*NR)/DW-1+DW);
                }
                else {
                    out.println((M/DW)*NR+DW);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}",273,11,"W:DW,rem:diff,C:M,R:NR,",1273,2.2398555159568800,Beam
476,,,443,17,,2273,4.321952617168430,0
477,"static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int parties=Integer.parseInt(in.readLine());
            String[] Members=in.readLine().split("" "");
            int total=0;
            for(int j=0;j<parties;j++){
                total+=Integer.parseInt(Members[j]);
                    }
            while(total!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ans="""";
                for(int j=0;j<parties;j++){
                        if(first<Integer.parseInt(Members[j])){
                            second=first;
                            first=Integer.parseInt(Members[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Members[j])){
                                    second=Integer.parseInt(Members[j]);
                                    num2=j;
                                }
                            }
                    }
                ans=""""+(char)(65+num1);
                Members[num1]=Integer.toString(Integer.parseInt(Members[num1])-1);
                total-=1;
                String ans2="""";
                for(int j=0;j<parties;j++){
                    double p=total;
                    if(Double.parseDouble(Members[j])/p>0.5){
                        ans+=(char)(65+j);
                        Members[j]=Integer.toString(Integer.parseInt(Members[j])-1);
                        total-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}","static void main(String[] args) throws IOException
    {
        BufferedReader out = new BufferedReader(new InputStreamReader(System.out));
        int T = Integer.parseInt(out.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int partsials=Integer.parseInt(out.readLine());
            String[] Players=out.readLine().split("" "");
            int no=0;
            for(int j=0;j<partsials;j++){
                no+=Integer.parseInt(Players[j]);
                    }
            while(no!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ants="""";
                for(int j=0;j<partsials;j++){
                        if(first<Integer.parseInt(Players[j])){
                            second=first;
                            first=Integer.parseInt(Players[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Players[j])){
                                    second=Integer.parseInt(Players[j]);
                                    num2=j;
                                }
                            }
                    }
                ants=""""+(char)(65+num1);
                Players[num1]=Integer.toString(Integer.parseInt(Players[num1])-1);
                no-=1;
                String ans2="""";
                for(int j=0;j<partsials;j++){
                    double p=no;
                    if(Double.parseDouble(Players[j])/p>0.5){
                        ants+=(char)(65+j);
                        Players[j]=Integer.toString(Integer.parseInt(Players[j])-1);
                        no-=1;
                        break;
                    }
                }
            System.out.print(ants+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}",405,15,"parties:partsials,Members:Players,total:no,ans:ants,in:out,",2481,4.886868067582450,Beam
478,,,291,15,,2578,4.35655130147934,0
479,,,448,20,,8665,17.093108693758600,0
480,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int io=0;io<1000001;io++)
      grade[io]=UNTEEN;
    Queue<Integer> qu=new LinkedList<Integer>();
    grade[1]=1;
    qu.add(1);
    while(!qu.isEmpty()){
      int current=qu.poll();
      int dx=grade[current];
    
      int sequence=current+1;
      if(sequence<1000001 && grade[sequence]==UNTEEN){
        int nt=dx+1;
        grade[sequence]=nt;
        qu.add(sequence);
      }
    int ne = current;
    int continue=0;
    while(ne>0){
      continue=10*continue+(ne%10);
      ne/=10;
    }
      sequence=continue;
      if(sequence<1000001 && grade[sequence]==UNTEEN){
        int nt=dx+1;
        grade[sequence]=nt;
        qu.add(sequence);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int devices=sen.nextInt();

    for(int ot=0;ot<devices;ot++){
      int ne=sen.nextInt();
      System.out.println(""Case #""+(ot+1)+"": ""+grade[ne]);
    }
  }

  private static int[] grade;
  private static final int UNTEEN=-1;
}",302,15,"distance:grade,scanner:sen,n:ne,UNSEEN:UNTEEN,cases:devices,t:ot,i:io,next:sequence,d:dx,q:qu,nd:nt,result:continue,",2512,4.262151877085370,Beam
481,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.5217536926269530,Beam
482,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.755461593468984,Beam
483,,,273,11,,2113,3.8743470191955600,0
484,,,292,17,,6850,11.977829440434800,0
485,,,1850,30,,5355,12.236476814746900,0
486,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] trial = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < trial.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(trial[i1]));
                if(i1 == trial.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}",325,16,"test:trial,",218,0.420760707060496,Beam
487,,,417,18,,3845,7.612291061878210,0
488,,,464,17,,5358,10.318244918187500,0
489,,,272,16,,5932,8.658565882841750,0
490,,,298,16,,4558,8.281143248081210,0
491,,,200,10,,745,1.082901950677240,0
492,,,418,13,,3938,9.479972473780320,0
493,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.3538063804308570,Beam
494,"class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] R = new int[N + 1];
            R[0] = sc.nextInt();
            int[] P = new int[N + 1];
            P[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                P[i + 1] = (P[i] + R[i] - S[i]) / 2;
                R[i + 1] = (R[i] + S[i] - P[i]) / 2;
                S[i + 1] = (P[i] + S[i] - R[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (R[N] == 1) {
                System.out.println(r[N]);
            } else if (P[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}","class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] RN = new int[N + 1];
            RN[0] = sc.nextInt();
            int[] PA = new int[N + 1];
            PA[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                PA[i + 1] = (PA[i] + RN[i] - S[i]) / 2;
                RN[i + 1] = (RN[i] + S[i] - PA[i]) / 2;
                S[i + 1] = (PA[i] + S[i] - RN[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (RN[i] < 0 || PA[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (RN[N] == 1) {
                System.out.println(r[N]);
            } else if (PA[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}",619,14,"R:RN,P:PA,",476,0.9011075576146440,Beam
495,"class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int s[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        s[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int max = 0;
                        for (int ss: s)
                            max = Math.max(max, ss);
                        if (max == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (s[i] == max)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            s[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            s[c1]--;
                            s[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""\n"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int w[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        w[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int r = 0;
                        for (int ss: w)
                            r = Math.r(r, ss);
                        if (r == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (w[i] == r)
                                pos.add(i);
                        }
                        int planes = pos.size();
                        if (pos.size() % 2 == 1) {
                            planes--;
                            int cur = pos.get(pos.size() - 1);
                            w[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < planes; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            w[c1]--;
                            w[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""
"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",417,19,"s:w,max:r,ps:planes,",1341,2.459466294447580,Beam
496,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7815813302993780,Beam
497,,,420,19,,7084,12.50750614007310,0
498,,,211,11,,559,0.9232454657554630,0
499,,,344,15,,4927,8.656949647267660,0
500,,,291,12,,621,1.1393732706705700,0
501,,,169,10,,2140,3.0784514705340100,0
502,,,525,23,,13511,23.718970064322200,0
503,,,345,16,,5989,10.41481287876770,0
504,,,406,16,,1272,2.5792646686236100,0
505,,,379,17,,2581,4.553493293126420,0
506,,,255,13,,1892,4.43655221859614,0
507,,,298,16,,4868,8.867264691988630,0
508,,,292,15,,4180,7.785975754261020,0
509,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.36217925548553500,Beam
510,,,349,19,,5178,9.303742078940070,0
511,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.2430612842241900,Beam
512,,,156,10,,2419,2.945525590578720,0
513,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ras2 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                if (w < f)
                    ras2 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < size)
                    ans2 += rows[j];
                else
                    ans2 += size;
            }
            
            pw.println(String.format(print, i, ras2, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:size,prefix:print,s:w,ans1:ras2,",2956,5.229692463080090,Beam
514,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6821239511171980,Beam
515,,,393,16,,5212,9.351910189787550,0
516,,,273,11,,2485,4.148995578289030,0
517,,,418,13,,4062,8.50918015241623,0
518,,,328,16,,5302,9.455750743548080,0
519,,,479,25,,2689,5.150076488653820,0
520,,,423,7,,919,1.6622950116793300,0
521,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.23573854366938300,Beam
522,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter line = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int diff;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            diff = 0;
            for (int chi = 0; chi < w; chi++)
                diff += judges.get(chi);

            while (diff-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    diff--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > diff / 2)
                        System.line.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            line.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        line.close();
    }

}",464,17,"senators:judges,sum:diff,index2:slice1,i:chi,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:line,",5085,9.774374576409660,Beam
523,,,132,9,,1345,1.6873499234517400,0
524,"class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int w = reader.nextInt();
            int answer = c / w;
            answer *= r;
            answer += w - 1;
            if(c % w > 0){
                answer++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + answer);
        }
        reader.close();
    }

}","class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int sw = reader.nextInt();
            int grade = c / sw;
            grade *= r;
            grade += sw - 1;
            if(c % sw > 0){
                grade++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + grade);
        }
        reader.close();
    }

}",134,9,"answer:grade,w:sw,",404,0.5331921100616460,Beam
525,"class B {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; ++t) {
            int n = in.nextInt();
            long m = in.nextLong();
            boolean[][] b = new boolean[n][n];
            long[] sum = new long[n];
            sum[0] = 1;
            b[0][n - 1] = true;
            --m;
            int cur = 1;
            while (m > 0 && cur < n - 1) {
                b[cur][n - 1] = true;
                b[0][cur] = true;
                --m;
                sum[cur]++;
                for (int prev = cur - 1; prev > 0; --prev) {
                    if (m >= sum[prev]) {
                        b[prev][cur] = true;
                        m -= sum[prev];
                        sum[cur] += sum[prev];
                    }
                }
                ++cur;
            }

            if (m > 0) {
                System.out.println(""Case #"" + t + "": IMPOSSIBLE"");
            } else {
                System.out.println(""Case #"" + t + "": POSSIBLE"");
                for (int i = 0; i < n; ++i) {
                    for (int j = 0; j < n; ++j) {
                        System.out.print(b[i][j] ? 1 : 0);
                    }
                    System.out.println();
                }
            }
        }
    }
}","class B {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; ++t) {
            int n = in.nextInt();
            long m = in.nextLong();
            boolean[][] b = new boolean[n][n];
            long[] u = new long[n];
            u[0] = 1;
            b[0][n - 1] = true;
            --m;
            int rev = 1;
            while (m > 0 && rev < n - 1) {
                b[rev][n - 1] = true;
                b[0][rev] = true;
                --m;
                u[rev]++;
                for (int reverse = rev - 1; reverse > 0; --reverse) {
                    if (m >= u[reverse]) {
                        b[reverse][rev] = true;
                        m -= u[reverse];
                        u[rev] += u[reverse];
                    }
                }
                ++rev;
            }

            if (m > 0) {
                System.out.println(""Case #"" + t + "": IMPOSSIBLE"");
            } else {
                System.out.println(""Case #"" + t + "": POSSIBLE"");
                for (int i = 0; i < n; ++i) {
                    for (int j = 0; j < n; ++j) {
                        System.out.print(b[i][j] ? 1 : 0);
                    }
                    System.out.println();
                }
            }
        }
    }
}",324,13,"prev:reverse,sum:u,cur:rev,",1024,1.8116660912831600,Beam
526,,,263,13,,683,1.1956383148829100,0
527,,,366,17,,1334,2.2667325735092200,0
528,,,386,18,,7280,12.328839627901700,0
529,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.23322856028874700,Beam
530,,,208,12,,2039,3.1462796568870500,0
531,,,149,10,,2202,2.738976836204530,0
532,,,360,19,,6929,11.116827086607600,0
533,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.36660131613413500,Beam
534,,,328,16,,5333,9.925861477851870,0
535,,,324,13,,3814,6.876857693990070,0
536,,,553,21,,4056,7.429734830061590,0
537,"class p1 
{
  static int ans=0;
  public static void main (String[]args)throws IOException
  {
    Scanner s=new Scanner (new File(""A-small-attempt0 (2).in""));
    PrintWriter out=new PrintWriter(new FileWriter(""out.txt""));
    //Scanner s=new Scanner (new File(""in.txt""));  
    int cases=s.nextInt();
    
    long max=1000000;
    long best []=new long[(int)max+1];
    Arrays.fill (best,max+1);
    best[0]=0;
    for (int x=1;x<=max;x++)
    {
      long a = x;
        while (a%10==0)
          a/=10;
        String b="""";
        int temp1=(int)Math.log10(a);
        for (int x1=0;x1<=temp1;x1++)
        {
          b+=a%10;
          a/=10;
        }
    long temp=Long.parseLong(b);
      if(x%10!=0&&temp<=x)
        best[x]=Math.min(best[(int)temp]+1,best[x-1]+1);
      else
        best[x]=best[x-1]+1;
    }
    
    for (int tt=0;tt<cases;tt++)
    {
      long n=s.nextLong(); 
      out.println (""Case #""+(tt+1)+"": ""+(best[(int)n]));
      System.out.println (""Case #""+(tt+1)+"": ""+(best[(int)n]));
    }
    out.close();
    s.close();
  }
}","class p1 
{
  static int ans=0;
  public static void main (String[]args)throws IOException
  {
    Scanner s=new Scanner (new File(""A-small-attempt0 (2).in""));
    PrintWriter out=new PrintWriter(new FileWriter(""out.txt""));
    //Scanner s=new Scanner (new File(""in.txt""));  
    int cases=s.nextInt();
    
    long max=1000000;
    long diff []=new long[(int)max+1];
    Arrays.fill (diff,max+1);
    diff[0]=0;
    for (int x=1;x<=max;x++)
    {
      long c = x;
        while (c%10==0)
          c/=10;
        String b="""";
        int temp1=(int)Math.log10(c);
        for (int x1=0;x1<=temp1;x1++)
        {
          b+=c%10;
          c/=10;
        }
    long w=Long.parseLong(b);
      if(x%10!=0&&w<=x)
        diff[x]=Math.min(diff[(int)w]+1,diff[x-1]+1);
      else
        diff[x]=diff[x-1]+1;
    }
    
    for (int tt=0;tt<cases;tt++)
    {
      long n=s.nextLong(); 
      out.println (""Case #""+(tt+1)+"": ""+(diff[(int)n]));
      System.out.println (""Case #""+(tt+1)+"": ""+(diff[(int)n]));
    }
    out.close();
    s.close();
  }
}",330,14,"best:diff,temp:w,a:c,",1135,2.0873502016067500,Beam
538,,,317,12,,3371,5.9366927941640200,0
539,,,265,12,,1417,2.3646509806315100,0
540,,,156,10,,2201,3.024777042865750,0
541,,,295,15,,3110,5.722405461470290,0
542,,,544,17,,5878,12.388081530729900,0
543,"class Task1 {
    public static void main(String[] args) throws FileNotFoundException {
        File file = new File(""D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/A-large.in"");
        PrintStream out = new PrintStream(new FileOutputStream(""D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/A-large.out""));
        System.setOut(out);
        
        Scanner sc = new Scanner(file);
        int T = sc.nextInt();
        int[] result1 = new int[T];
        int[] result2 = new int[T];
        
        for (int i = 0; i < T; ++i)
        {
            int N = sc.nextInt();
            result2[1] = 0;
            result2[i] = 0;
            int eatTempo = 0;
            int[] pieces = new int[N];
            pieces[0] = sc.nextInt();
            for (int j = 1; j < N; ++j)
            {
                pieces[j] = sc.nextInt();
                result1[i] += Math.max(0, pieces[j - 1] - pieces[j]);
                eatTempo = Math.max(eatTempo, pieces[j - 1] - pieces[j]);
            }
            
            for (int j = 0; j < N - 1; ++j)
                result2[i] += Math.min(eatTempo, pieces[j]);
        }
        sc.close();
        
        for (int i = 0; i < T; ++i)
            System.out.println(String.format(""Case #%d: %d %d"", i + 1, result1[i], result2[i]));
    }
}


/*
Problem


*/","class Task1 {
    public static void main(String[] args) throws FileNotFoundException {
        File file = new File(""D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/A-large.in"");
        PrintStream out = new PrintStream(new FileOutputStream(""D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/A-large.out""));
        System.setOut(out);
        
        Scanner sc = new Scanner(file);
        int W = sc.nextInt();
        int[] catch2 = new int[W];
        int[] search4 = new int[W];
        
        for (int k = 0; k < W; ++k)
        {
            int W = sc.nextInt();
            search4[1] = 0;
            search4[k] = 0;
            int packTempa = 0;
            int[] workers = new int[W];
            workers[0] = sc.nextInt();
            for (int c = 1; c < W; ++c)
            {
                workers[c] = sc.nextInt();
                catch2[k] += Math.max(0, workers[c - 1] - workers[c]);
                packTempa = Math.max(packTempa, workers[c - 1] - workers[c]);
            }
            
            for (int c = 0; c < W - 1; ++c)
                search4[k] += Math.min(packTempa, workers[c]);
        }
        sc.close();
        
        for (int k = 0; k < W; ++k)
            System.out.println(String.format(""Case #%d: %d %d"", k + 1, catch2[k], search4[k]));
    }
}


/*
Problem


*/",306,13,"pieces:workers,eatTempo:packTempa,result2:search4,result1:catch2,i:k,T:W,N:W,j:c,",2450,4.862337136268620,Beam
544,,,311,17,,6730,12.462185231844600,0
545,,,500,19,,7956,14.870671772956800,0
546,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,4.715650486946110,Beam
547,,,303,12,,2701,4.995637464523320,0
548,,,321,18,,6952,11.863441356023200,0
549,"class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String str = br.readLine();
            StringTokenizer token = new StringTokenizer(str, "" "");
        
            int[] m = new int[N];
            int max = 0;
            for (int j = 0; j < N; j++) {
                m[j] = Integer.parseInt(token.nextToken());
                if (j > 0 && m[j] - m[j - 1] < 0) {
                    max = Math.max(max, m[j - 1] - m[j]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int j = 1; j < N; j++) {
                if (m[j] - m[j - 1] < 0) {
                    ans_x += m[j - 1] - m[j];
                }
                if (m[j - 1] <= max) {
                    ans_y += m[j - 1];
                } else {
                    ans_y += max;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r\n"");
        }
        bw.close();
        br.close();
    }
}","class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String arr = br.readLine();
            StringTokenizer r = new StringTokenizer(arr, "" "");
        
            int[] w = new int[N];
            int count = 0;
            for (int c = 0; c < N; c++) {
                w[c] = Integer.parseInt(r.nextToken());
                if (c > 0 && w[c] - w[c - 1] < 0) {
                    count = Math.count(count, w[c - 1] - w[c]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int c = 1; c < N; c++) {
                if (w[c] - w[c - 1] < 0) {
                    ans_x += w[c - 1] - w[c];
                }
                if (w[c - 1] <= count) {
                    ans_y += w[c - 1];
                } else {
                    ans_y += count;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r
"");
        }
        bw.close();
        br.close();
    }
}",344,15,"max:count,m:w,token:r,j:c,str:arr,",2281,3.925864628950760,Beam
550,,,249,11,,2791,4.854737504323320,0
551,,,149,10,,2109,2.7927852789561000,0
552,,,334,15,,1179,2.4576659560203600,0
553,,,655,16,,2433,5.197616283098860,0
554,,,305,15,,5232,10.016449141502400,0
555,,,358,16,,1241,2.3990075389544200,0
556,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,sw,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            sw = sc.nextInt();
            irez = c/sw;
            irez *=r;
            irez +=sw-1;
            if(c%sw > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,w:sw,",466,0.6277007460594180,Beam
557,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7611340641975400,Beam
558,,,426,18,,3467,6.80894212325414,0
559,,,325,16,,5891,10.449394277731600,0
560,,,265,12,,617,0.9889216144879660,0
561,,,479,25,,8176,14.718133052190100,0
562,,,281,14,,745,1.3288158933321600,0
563,,,345,16,,5941,10.12879781325660,0
564,,,479,25,,2720,4.735670244693760,0
565,,,326,14,,5209,8.736316418647770,0
566,,,344,15,,2066,3.596722439924880,0
567,,,330,16,,5705,11.795388726393400,0
568,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.2210737943649300,Beam
569,,,292,15,,4180,7.768556940555570,0
570,,,254,13,,951,1.6842501680056300,0
571,,,321,18,,6952,11.582648507754000,0
572,,,328,16,,5302,9.795200649897260,0
573,,,328,16,,4806,8.861881069342300,0
574,,,298,16,,3318,5.787334477901460,0
575,,,426,18,,4304,8.634761953353880,0
576,,,358,18,,915,1.6384188373883600,0
577,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.28318364222844400,Beam
578,,,544,17,,5470,11.380557485421500,0
579,,,281,14,,5023,8.796392345428470,0
580,,,257,11,,3008,5.653730527559920,0
581,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ansalt = 0;
            int n = Integer.parseInt(br.readLine());
            int[] opera = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < opera.length; j++)
                opera[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < opera.length - 1; j++) {
                int f = opera[j];
                int w = opera[j + 1];
                
                if (w < f)
                    ans1 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < opera.length - 1; j++) {
                int f = opera[j];
                int w = opera[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < opera.length - 1; j++) {
                if (opera[j] < size)
                    ansalt += opera[j];
                else
                    ansalt += size;
            }
            
            pw.println(String.format(prefix, i, ans1, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:opera,max:size,s:w,ans2:ansalt,",2218,3.988076837857560,Beam
582,,,326,14,,4837,8.975424110889440,0
583,,,386,18,,7600,13.621958112716700,0
584,,,321,13,,4434,7.81387718518575,0
585,,,263,13,,4434,7.8554158210754400,0
586,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String rap = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) rap += ""
"";
      rap += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(rap);
  }
}",187,12,"res:rap,",156,0.2226816972096760,Beam
587,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter r = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                r.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             r.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,wr:r,",652,1.4381308595339500,Beam
588,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.24187988837560000,Beam
589,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.27953907251358000,Beam
590,,,443,17,,2583,4.935942490895590,0
591,,,200,10,,2233,3.358273140589400,0
592,,,132,9,,1688,2.0528917868932100,0
593,,,260,11,,2512,4.886256686846420,0
595,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,m,w,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            m =sc.nextInt();
            w = sc.nextInt();
            irez = m/w;
            irez *=r;
            irez +=w-1;
            if(m%w > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,c:m,",281,0.3778272827466330,Beam
596,,,305,15,,1198,2.2545138637224800,0
597,,,517,26,,8920,16.11712662378950,0
598,,,291,15,,3068,5.19535071849823,0
599,,,257,11,,1055,1.9742203632990500,0
600,,,300,13,,3768,6.388454516728720,0
601,,,379,17,,1353,2.3897542039553300,0
602,,,655,16,,2312,5.181975217660270,0
603,,,366,17,,900,1.577042313416800,0
604,"class A {
    public static void main(String[] args) throws Exception {
        BufferedReader in = new BufferedReader(new FileReader(""A.in""));
        PrintStream out = new PrintStream(""A.out"");

        int t = Integer.parseInt(in.readLine());
        for(int i = 0; i < t; i++) {
            int n = Integer.parseInt(in.readLine());
            String[] arr = in.readLine().split("" "");
            int[] a = new int[n];
            for(int j = 0; j < n; j++) {
                a[j] = Integer.parseInt(arr[j]);
            }
            int tot = 0;
            int max = 0;
            for(int j = 0; j < n - 1; j++) {
                if(a[j] > a[j + 1]) {
                    tot += a[j] - a[j + 1];
                }
                max = Math.max(max, a[j] - a[j + 1]);
            }
            long tot2 = Long.MAX_VALUE >> 1;
            for(int j = 0; j <= 100000; j++) {
                boolean works = true;
                long temptot = 0;
                for(int k = 0; k < n - 1; k++) {
                    if(a[k] <= j) {
                        temptot += a[k];
                    } else {
                        temptot += j;
                    }
                    if(j < a[k] - a[k + 1]) {
                        works = false;
                    }
                }
                if(works) {
                    tot2 = Math.min(tot2, temptot);
                }
            }
            out.println(""Case #"" + (i + 1) + "": "" + tot + "" "" + tot2);
        }
    }
}","class A {
    public static void main(String[] args) throws Exception {
        BufferedReader r = new BufferedReader(new FileReader(""A.in""));
        PrintStream out = new PrintStream(""A.out"");

        int t = Integer.parseInt(r.readLine());
        for(int i = 0; i < t; i++) {
            int n = Integer.parseInt(r.readLine());
            String[] arr = r.readLine().split("" "");
            int[] w = new int[n];
            for(int j = 0; j < n; j++) {
                w[j] = Integer.parseInt(arr[j]);
            }
            int tot = 0;
            int max = 0;
            for(int j = 0; j < n - 1; j++) {
                if(w[j] > w[j + 1]) {
                    tot += w[j] - w[j + 1];
                }
                max = Math.max(max, w[j] - w[j + 1]);
            }
            long tot2 = Long.MAX_VALUE >> 1;
            for(int j = 0; j <= 100000; j++) {
                boolean works = true;
                long temptot = 0;
                for(int k = 0; k < n - 1; k++) {
                    if(w[k] <= j) {
                        temptot += w[k];
                    } else {
                        temptot += j;
                    }
                    if(j < w[k] - w[k + 1]) {
                        works = false;
                    }
                }
                if(works) {
                    tot2 = Math.min(tot2, temptot);
                }
            }
            out.println(""Case #"" + (i + 1) + "": "" + tot + "" "" + tot2);
        }
    }
}",360,16,"a:w,in:r,",466,0.893473748366038,Beam
605,,,366,17,,6108,10.577736866474200,0
606,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2481,4.429353626569110,Beam
607,,,291,12,,3721,6.737441428502400,0
608,,,263,13,,683,1.2041142543156900,0
609,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.1722295880317690,Beam
610,,,358,16,,5116,9.527633885542550,0
611,,,290,12,,3325,6.140705037117000,0
612,,,348,14,,3548,6.666361304124200,0
613,,,132,9,,1914,2.334955704212190,0
614,,,605,21,,9495,15.79754677216210,0
615,,,363,16,,6046,10.94502705335620,0
616,,,256,13,,927,1.6815776546796200,0
617,,,887,27,,1585,3.323908205827080,0
618,,,282,13,,3831,6.045432992776240,0
619,,,290,12,,3695,6.396021715799970,0
620,,,367,20,,5340,9.60736790895462,0
621,,,255,13,,962,2.1693614721298200,0
622,,,291,15,,708,1.1800909241040500,0
623,,,269,13,,4390,8.13900311390559,0
624,,,257,11,,559,1.0352017641067500,0
625,,,211,11,,2791,4.511111378669740,0
626,,,265,12,,894,1.5378913799921700,0
627,,,187,12,,3535,5.013025164604190,0
628,,,348,14,,3895,7.409877049922940,0
629,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,m,w,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            m =sc.nextInt();
            w = sc.nextInt();
            irez = m/w;
            irez *=r;
            irez +=w-1;
            if(m%w > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,c:m,",280,0.3812584439913430,Beam
630,,,379,17,,6826,11.859382796287500,0
631,,,655,16,,2578,5.438176588217420,0
632,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int caseSum = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < caseSum; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int init = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < init) {
                    total0 += init - current;
                    maxMin = Math.max(maxMin, init - current);
                }
                init = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"pw:jpow,prev:init,testCount:caseSum,",1408,2.460147674878440,Beam
633,,,358,18,,6417,11.139469611644700,0
634,,,132,9,,1705,2.0438576022783900,0
635,,,348,14,,3883,7.288738441467290,0
636,,,345,16,,5987,10.219880831241600,0
637,,,406,16,,869,1.7405240337053900,0
638,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.2765819072723390,Beam
639,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.9194958170255030,Beam
640,,,250,11,,559,0.9945639212926230,0
641,,,156,10,,2419,2.8951162854830400,0
642,,,292,16,,4155,7.46645811398824,0
643,,,464,17,,5358,10.458045184612300,0
644,,,358,18,,915,1.6428213119506800,0
645,,,334,15,,5271,10.889543267091100,0
646,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cr = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cr) {
        sum1 += cr - w[i4];
      }
      cr = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,cur:cr,",433,0.8378924290339150,Beam
647,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner cc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = cc.nextInt();
        
        for (int x = 1; x <= R; ++x) {
            int W = cc.nextInt();
            
            int[][] yr = new int[2*W-1][W];
            
            // 2 * N - 1 line with N numbers
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    yr[c][c] = cc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> mp = new HashMap<>();
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    if (mp.get(yr[c][c]) == null) {
                        mp.put(yr[c][c], 1);
                    }
                    else {
                        int w = mp.get(yr[c][c]);
                        mp.put(yr[c][c], w + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int c : mp.keySet()) {
                if (mp.get(c) % 2 != 0) {
                    r.add(c);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int c = 0; c < r.size(); ++c) {
                System.out.print("" "" + r.get(c));
            }
            System.out.println();
        }

        cc.close();
    }
}",375,12,"N:W,i:c,arr:yr,T:R,k:w,map:mp,j:c,sc:cc,",2754,5.3493247628212000,Beam
648,,,418,13,,4062,8.944528675079350,0
649,,,269,13,,4418,8.795963017145790,0
650,,,257,11,,2791,5.123791952927910,0
651,,,290,12,,925,1.7335786064465800,0
652,,,330,14,,4905,9.339499127864840,0
653,,,292,16,,4589,8.15182690223058,0
654,,,393,16,,5520,9.97608903646469,0
655,,,379,17,,6892,12.05586885213850,0
656,,,269,16,,5809,9.382961289087930,0
657,"class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int w = reader.nextInt();
            int answer = c / w;
            answer *= r;
            answer += w - 1;
            if(c % w > 0){
                answer++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + answer);
        }
        reader.close();
    }

}","class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int sw = reader.nextInt();
            int grade = c / sw;
            grade *= r;
            grade += sw - 1;
            if(c % sw > 0){
                grade++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + grade);
        }
        reader.close();
    }

}",134,9,"answer:grade,w:sw,",404,0.533047366142273,Beam
658,"class AMush {

    
    public static void main (String [] args){
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int t=0; t<T; t++){
            int n = sc.nextInt();
            int[] data = new int[n];
            for (int i=0; i<n; i++){
                data[i] = sc.nextInt();
            }
            int n1 = data.length;
            int sum1 = 0;
            int sum2 = 0;
            int rate = 0;
            for (int i=1; i<n1; i++){
                int dm = data[i-1] - data[i];
                if (dm > 0){
                    sum1 += dm;
                    rate = (rate < dm) ? dm : rate;
                }            
            }
            
            for (int i=0; i<n1-1; i++){
                int dm = (data[i] < rate) ? data[i] : rate;
                sum2 += dm;
            }
            System.out.println(""Case #""+(t+1)+"": ""+sum1+"" ""+sum2);
        }
        
    }
}","class AMush {

    
    public static void main (String [] args){
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int t=0; t<T; t++){
            int n = sc.nextInt();
            int[] data = new int[n];
            for (int i=0; i<n; i++){
                data[i] = sc.nextInt();
            }
            int n1 = data.length;
            int count = 0;
            int sum2 = 0;
            int rank = 0;
            for (int i=1; i<n1; i++){
                int wm = data[i-1] - data[i];
                if (wm > 0){
                    count += wm;
                    rank = (rank < wm) ? wm : rank;
                }            
            }
            
            for (int i=0; i<n1-1; i++){
                int wm = (data[i] < rank) ? data[i] : rank;
                sum2 += wm;
            }
            System.out.println(""Case #""+(t+1)+"": ""+count+"" ""+sum2);
        }
        
    }
}",240,13,"rate:rank,sum1:count,dm:wm,",1319,2.243238925933840,Beam
659,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.2860883037249250,Beam
660,,,321,18,,6922,11.624535572528800,0
661,,,265,12,,3701,6.364757605393730,0
662,,,527,25,,16400,28.421767954031600,0
663,,,211,11,,838,1.4128835320472700,0
664,,,317,12,,3385,6.453044048945110,0
665,,,311,17,,6660,11.694493055343600,0
666,,,311,17,,1351,2.346667671203610,0
667,,,443,17,,5241,9.593556344509130,0
668,,,295,15,,1064,2.021482006708780,0
669,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException ignore) {
                ignore.printStackTrace();
            }
        }
        Scanner sh = new Scanner(System.in);
        int D = sh.nextInt();
        for(int TATE=1;TATE<=D;TATE++){
            int N = sh.nextInt(), E = sh.nextInt(), NW = sh.nextInt();
            int E = 0, ares = 0;
            ares += N*(E/NW);
            if (E%NW==0)ares+=NW-1;
            else ares+=NW;
            System.out.println(""Case #""+TATE+"": ""+ares);
        }
    }
}",309,11,"C:E,R:N,W:NW,res:ares,CASE:TATE,sc:sh,T:D,r:m,e:ignore,",1737,3.011104182402290,Beam
670,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,4.550613367557530,Beam
671,,,132,9,,1688,2.0135658701260900,0
672,,,292,16,,4155,7.431040859222410,0
673,,,260,11,,2512,4.7668095906575500,0
674,,,426,18,,3560,7.016044716040290,0
675,,,256,13,,927,1.7533510406812000,0
676,,,525,23,,13511,23.015177448590600,0
677,,,426,18,,3560,7.199058361848200,0
678,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",993,1.8154250184694900,Beam
679,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.36700249910354600,Beam
680,"class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int width = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / width;
                        int res = limit + width-1;
                        
                        int fin = res * row;
                        int left = cells % width;
                        //System.out.println(left);
                        if(left != 0 && width != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}","class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int age = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / age;
                        int rates = limit + age-1;
                        
                        int fin = rates * row;
                        int left = cells % age;
                        //System.out.println(left);
                        if(left != 0 && age != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}",236,16,"width:age,res:rates,",373,0.655073082447052,Beam
681,,,156,10,,2233,2.698587222894030,0
682,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                slated.add(i, 0);
            }
            int equateOrg = 0;
            for (int i = 0; i < N; i++) {
                int w = r.nextInt();
                slated.set(i, w);
                equateOrg += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateOrg > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (max == second && equateOrg != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateOrg -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateOrg -= 1;
                }
            }
            if (equateOrg == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateOrg,temp:w,in:r,",1856,4.0499827067057300,Beam
683,,,132,9,,1099,1.3742615461349500,0
684,,,348,14,,3883,7.140234394868220,0
685,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",993,1.737907632191980,Beam
686,,,285,14,,5209,8.702862803141280,0
687,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner innb=new Scanner(System.in);
    int t=innb.nextInt();
    for(int i=0;i<t;i++){
        int c=innb.nextInt();
        int[] art=new int[c];
        for(int r=0;r<c;r++){
            art[r]=innb.nextInt();
        }
        int mean1=0;
        int missTwo=0;
        for(int key=0;key<c-1;key++){
            
            int y=(art[key]-art[key+1]>0)? art[key]-art[key+1]:0;
            mean1+=y;
        
        }
        int w=0;
        for(int r=0;r<c-1;r++){
            w=Math.max(w,art[r]-art[r+1]);
        }
        for(int c=0;c<c-1;c++){
            int x=(art[c]<=w)?art[c]:w;
            missTwo+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+mean1+"" ""+missTwo);
    }
}
}",272,16,"sum1:mean1,sum2:missTwo,h:r,k:key,arr:art,inp:innb,d:c,v:w,n:c,j:r,",5132,7.286340955893200,Beam
688,,,156,10,,2174,3.0292524099350000,0
689,,,262,14,,652,1.1593912641207400,0
690,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[n]);
    }
  }

  private static int[] grade;
  private static final int UNSEEN=-1;
}",302,15,"distance:grade,",63,0.1188463568687440,Beam
691,,,735,24,,11295,18.781227815151200,0
692,,,278,15,,5216,9.063480484485630,0
693,,,269,13,,4382,8.258405836423240,0
694,,,300,13,,3455,5.6958774129549700,0
695,,,211,11,,807,1.3220810572306300,0
696,,,308,12,,1830,3.589068035284680,0
697,,,790,14,,4837,10.95814259449640,0
698,,,281,14,,1117,2.0092784643173200,0
699,,,619,14,,4333,8.244623287518820,0
700,,,478,22,,11842,20.47930106719340,0
701,,,224,11,,807,1.5446431040763900,0
702,,,317,12,,3416,6.490852570533750,0
703,,,418,13,,4062,8.709001843134560,0
704,,,263,13,,4434,7.864140470822650,0
705,,,420,19,,7084,12.358654562632200,0
706,,,211,11,,2760,4.30139867067337,0
707,"static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int parties=Integer.parseInt(in.readLine());
            String[] Members=in.readLine().split("" "");
            int total=0;
            for(int j=0;j<parties;j++){
                total+=Integer.parseInt(Members[j]);
                    }
            while(total!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ans="""";
                for(int j=0;j<parties;j++){
                        if(first<Integer.parseInt(Members[j])){
                            second=first;
                            first=Integer.parseInt(Members[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Members[j])){
                                    second=Integer.parseInt(Members[j]);
                                    num2=j;
                                }
                            }
                    }
                ans=""""+(char)(65+num1);
                Members[num1]=Integer.toString(Integer.parseInt(Members[num1])-1);
                total-=1;
                String ans2="""";
                for(int j=0;j<parties;j++){
                    double p=total;
                    if(Double.parseDouble(Members[j])/p>0.5){
                        ans+=(char)(65+j);
                        Members[j]=Integer.toString(Integer.parseInt(Members[j])-1);
                        total-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}","static void main(String[] args) throws IOException
    {
        BufferedReader out = new BufferedReader(new InputStreamReader(System.out));
        int T = Integer.parseInt(out.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int partsials=Integer.parseInt(out.readLine());
            String[] Players=out.readLine().split("" "");
            int no=0;
            for(int j=0;j<partsials;j++){
                no+=Integer.parseInt(Players[j]);
                    }
            while(no!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ants="""";
                for(int j=0;j<partsials;j++){
                        if(first<Integer.parseInt(Players[j])){
                            second=first;
                            first=Integer.parseInt(Players[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Players[j])){
                                    second=Integer.parseInt(Players[j]);
                                    num2=j;
                                }
                            }
                    }
                ants=""""+(char)(65+num1);
                Players[num1]=Integer.toString(Integer.parseInt(Players[num1])-1);
                no-=1;
                String ans2="""";
                for(int j=0;j<partsials;j++){
                    double p=no;
                    if(Double.parseDouble(Players[j])/p>0.5){
                        ants+=(char)(65+j);
                        Players[j]=Integer.toString(Integer.parseInt(Players[j])-1);
                        no-=1;
                        break;
                    }
                }
            System.out.print(ants+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}",405,15,"parties:partsials,Members:Players,total:no,ans:ants,in:out,",2481,4.8066036383311000,Beam
708,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,m,w,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            m =sc.nextInt();
            w = sc.nextInt();
            irez = m/w;
            irez *=r;
            irez +=w-1;
            if(m%w > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,c:m,",280,0.37371782064437900,Beam
709,,,366,17,,6139,10.60065339008970,0
710,,,348,14,,3554,6.715603939692180,0
711,,,408,15,,5114,10.396454079945900,0
712,,,187,13,,1803,2.4070762395858800,0
713,,,379,17,,2244,4.002943774064380,0
714,"class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String str = br.readLine();
            StringTokenizer token = new StringTokenizer(str, "" "");
        
            int[] m = new int[N];
            int max = 0;
            for (int j = 0; j < N; j++) {
                m[j] = Integer.parseInt(token.nextToken());
                if (j > 0 && m[j] - m[j - 1] < 0) {
                    max = Math.max(max, m[j - 1] - m[j]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int j = 1; j < N; j++) {
                if (m[j] - m[j - 1] < 0) {
                    ans_x += m[j - 1] - m[j];
                }
                if (m[j - 1] <= max) {
                    ans_y += m[j - 1];
                } else {
                    ans_y += max;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r\n"");
        }
        bw.close();
        br.close();
    }
}","class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String char = br.readLine();
            StringTokenizer r = new StringTokenizer(char, "" "");
        
            int[] w = new int[N];
            int count = 0;
            for (int c = 0; c < N; c++) {
                w[c] = Integer.parseInt(r.nextToken());
                if (c > 0 && w[c] - w[c - 1] < 0) {
                    count = Math.count(count, w[c - 1] - w[c]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int c = 1; c < N; c++) {
                if (w[c] - w[c - 1] < 0) {
                    ans_x += w[c - 1] - w[c];
                }
                if (w[c - 1] <= count) {
                    ans_y += w[c - 1];
                } else {
                    ans_y += count;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r
"");
        }
        bw.close();
        br.close();
    }
}",344,15,"max:count,m:w,token:r,j:c,str:char,",1973,3.4349487980206800,Beam
715,,,417,18,,3845,7.678007499376930,0
716,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.24579217036565100,Beam
717,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"count:sum,num:width,row:cur,i:c,height:width,kk:ctx,in:r,",2044,3.969660480817160,Beam
718,"class A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(
                        System.in
                        )));
        StringBuilder builder;
        long dp[] = new long[1000005];
        dp[0] = dp[1] = 1;
        for (int i = 2; i < 20; i++) {
            dp[i] = i;
        }

        for (int i = 20; i < dp.length; i++) {
            int iLength = Integer.toString(i).length();
            builder = new StringBuilder();
            builder.append(i);
            int rev = Integer.parseInt(builder.reverse().toString());
            int revLength = Integer.toString(rev).length();
            if (rev < dp.length && rev < i && iLength == revLength) {
                dp[i] = Math.min(dp[i-1], dp[rev]) + 1;
            } else {
                dp[i] = dp[i-1] + 1;
            }
        }

        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt();
            System.out.printf(""Case #%d: %d\n"", t, dp[N]);
        }
    }
}","class A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(
                        System.in
                        )));
        StringBuilder builder;
        long dp[] = new long[1000005];
        dp[0] = dp[1] = 1;
        for (int i = 2; i < 20; i++) {
            dp[i] = i;
        }

        for (int i = 20; i < dp.length; i++) {
            int iWidth = Integer.toString(i).length();
            builder = new StringBuilder();
            builder.append(i);
            int rev = Integer.parseInt(builder.reverse().toString());
            int revLength = Integer.toString(rev).length();
            if (rev < dp.length && rev < i && iWidth == revLength) {
                dp[i] = Math.min(dp[i-1], dp[rev]) + 1;
            } else {
                dp[i] = dp[i-1] + 1;
            }
        }

        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt();
            System.out.printf(""Case #%d: %d
"", t, dp[N]);
        }
    }
}",271,12,"iLength:iWidth,",81,0.14019103447596200,Beam
719,,,269,16,,5809,9.774938384691870,0
720,,,417,18,,3814,7.732628198464710,0
721,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.5239672382672630,Beam
722,,,291,15,,4045,7.067386575539910,0
723,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner rc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = rc.nextInt();
        
        for (int x = 1; x <= R; ++x) {
            int W = rc.nextInt();
            
            int[][] yr = new int[2*W-1][W];
            
            // 2 * N - 1 line with N numbers
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    yr[c][c] = rc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> mp = new HashMap<>();
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    if (mp.get(yr[c][c]) == null) {
                        mp.put(yr[c][c], 1);
                    }
                    else {
                        int w = mp.get(yr[c][c]);
                        mp.put(yr[c][c], w + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int c : mp.keySet()) {
                if (mp.get(c) % 2 != 0) {
                    r.add(c);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int c = 0; c < r.size(); ++c) {
                System.out.print("" "" + r.get(c));
            }
            System.out.println();
        }

        rc.close();
    }
}",375,12,"N:W,i:c,arr:yr,T:R,k:w,map:mp,j:c,sc:rc,",2785,5.393524527549740,Beam
724,"class A {

    public static void main(String [] args) throws IOException {
        String inputFile = ""src/A-small-1.in"";
        Scanner in = new Scanner(new File(inputFile));
        PrintStream out = new PrintStream(inputFile.substring(0, inputFile.length()-2)+""out"");
        int cases = in.nextInt();
        for (int cs = 1; cs <= cases; cs++) {
            long n = in.nextLong();
            A a = new A(n);
            String ans = ""Case #""+cs+"": ""+a.minSteps;
            out.println(ans);
            System.out.println(ans);
        }
        out.close();
        in.close();
    }
    
    TreeMap<Long, Integer> queue = new TreeMap<>();
    HashMap<Long,Integer> seen = new HashMap<>();
    int minSteps = Integer.MAX_VALUE;
    
    public A(long n) {
        queue.put(n, 1);
        while(!queue.isEmpty()) {
            Entry<Long, Integer> e = queue.pollFirstEntry();
            long v = e.getKey();
            int s = e.getValue();
            if (v == 1) {
                minSteps = Math.min(s, minSteps);
                continue;
            }
            if (s >= minSteps) { continue; }
            {
                Integer ps = seen.get(v-1);
                if (ps == null || ps > s+1) {
                    queue.put(v-1, s+1);
                    seen.put(v-1, s+1);
                }
            }
            if (v % 10 != 0) {
                long vr = Long.parseLong(new StringBuilder(Long.toString(v)).reverse().toString());
                if (vr < v){
                    Integer ps = seen.get(vr);
                    if (ps == null || ps > s+1) {
                        queue.put(vr, s+1);
                        seen.put(vr, s+1);
                    }
                }
            }
        }
    }
}","class A {

    public static void main(String [] args) throws IOException {
        String inputFile = ""src/A-small-1.in"";
        Scanner login = new Scanner(new File(inputFile));
        PrintStream plain = new PrintStream(inputFile.substring(0, inputFile.length()-2)+""out"");
        int rooms = login.nextInt();
        for (int cells = 1; cells <= rooms; cells++) {
            long fn = login.nextLong();
            A acha = new A(fn);
            String ants = ""Case #""+cells+"": ""+acha.minSteps;
            plain.println(ants);
            System.plain.println(ants);
        }
        plain.close();
        login.close();
    }
    
    TreeMap<Long, Integer> queue = new TreeMap<>();
    HashMap<Long,Integer> registered = new HashMap<>();
    int minSteps = Integer.MAX_VALUE;
    
    public A(long fn) {
        queue.put(fn, 1);
        while(!queue.isEmpty()) {
            Entry<Long, Integer> e = queue.pollFirstEntry();
            long r = e.getKey();
            int c = e.getValue();
            if (r == 1) {
                minSteps = Math.min(c, minSteps);
                continue;
            }
            if (c >= minSteps) { continue; }
            {
                Integer PS = registered.get(r-1);
                if (PS == null || PS > c+1) {
                    queue.put(r-1, c+1);
                    registered.put(r-1, c+1);
                }
            }
            if (r % 10 != 0) {
                long ver = Long.parseLong(new StringBuilder(Long.toString(r)).reverse().toString());
                if (ver < r){
                    Integer PS = registered.get(ver);
                    if (PS == null || PS > c+1) {
                        queue.put(ver, c+1);
                        registered.put(ver, c+1);
                    }
                }
            }
        }
    }
}",417,18,"a:acha,ans:ants,n:fn,out:plain,in:login,cases:rooms,cs:cells,ps:PS,v:r,s:c,seen:registered,vr:ver,",2915,5.794216442108150,Beam
725,,,406,19,,7193,13.318900108337400,0
726,,,468,14,,3287,7.067288978894550,0
727,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int max = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<max; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}",187,12,"col:max,",32,0.03693210283915200,Beam
728,,,290,12,,617,1.0958337704340600,0
729,,,264,15,,1904,3.4666664282480900,0
730,,,443,17,,5014,10.27207534313200,0
731,,,303,12,,2530,4.65498647292455,0
732,,,317,12,,3342,6.162158171335860,0
733,"class AMush {

    
    public static void main (String [] args){
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int t=0; t<T; t++){
            int n = sc.nextInt();
            int[] data = new int[n];
            for (int i=0; i<n; i++){
                data[i] = sc.nextInt();
            }
            int n1 = data.length;
            int sum1 = 0;
            int sum2 = 0;
            int rate = 0;
            for (int i=1; i<n1; i++){
                int dm = data[i-1] - data[i];
                if (dm > 0){
                    sum1 += dm;
                    rate = (rate < dm) ? dm : rate;
                }            
            }
            
            for (int i=0; i<n1-1; i++){
                int dm = (data[i] < rate) ? data[i] : rate;
                sum2 += dm;
            }
            System.out.println(""Case #""+(t+1)+"": ""+sum1+"" ""+sum2);
        }
        
    }
}","class AMush {

    
    public static void main (String [] args){
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int t=0; t<T; t++){
            int n = sc.nextInt();
            int[] data = new int[n];
            for (int i=0; i<n; i++){
                data[i] = sc.nextInt();
            }
            int n1 = data.length;
            int count = 0;
            int sum2 = 0;
            int rank = 0;
            for (int i=1; i<n1; i++){
                int wm = data[i-1] - data[i];
                if (wm > 0){
                    count += wm;
                    rank = (rank < wm) ? wm : rank;
                }            
            }
            
            for (int i=0; i<n1-1; i++){
                int wm = (data[i] < rank) ? data[i] : rank;
                sum2 += wm;
            }
            System.out.println(""Case #""+(t+1)+"": ""+count+"" ""+sum2);
        }
        
    }
}",240,13,"rate:rank,sum1:count,dm:wm,",1319,2.300115247567500,Beam
734,,,406,19,,1024,1.8579792340596500,0
735,,,326,14,,4837,8.880999600887300,0
736,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    queryIn    = new Scanner(System.in);
        
        int C    = queryIn.nextInt();
        
        for(int in=0; in<C; ++in) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        row    = queryIn.nextInt();
            int        a    = queryIn.nextInt();
            int        row    = queryIn.nextInt();
            int    total    = row*a;
            int    ref2        = 0;
            
            //    scan
            ref2    = row*(a/row);
            
            if(a % row == 0) {
                ref2    += row-1;
            } else if( row == 1) {
            } else {
                ref2    += row;
            }
            
            int    continue    = ref2;
            
            System.out.println(""Case #"" + (in+1) + "": "" + continue);
        }
        
        queryIn.close();
    }
}",171,10,"w:row,c:a,ret1:ref2,r:row,i:in,ret:continue,scanIn:queryIn,T:C,",2109,3.198301577568050,Beam
737,,,292,15,,3973,7.173428058624270,0
738,,,292,16,,4155,7.557778970400490,0
739,,,406,19,,7999,15.097926644484200,0
740,,,408,17,,1240,2.4474321007728600,0
741,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ras2 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                if (w < f)
                    ras2 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < size)
                    ans2 += rows[j];
                else
                    ans2 += size;
            }
            
            pw.println(String.format(print, i, ras2, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:size,prefix:print,s:w,ans1:ras2,",2956,5.125657598177590,Beam
742,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        re    = scanIn.nextInt();
            int        u    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = re*u;
            int    ret1        = 0;
            
            //    scan
            ret1    = re*(u/k);
            
            if(u % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,c:u,r:re,",807,1.2401055614153500,Beam
743,,,169,10,,2109,3.008332622051240,0
744,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.3668615142504370,Beam
745,,,326,14,,5023,9.409701387087500,0
746,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner laneChan = null;
        int width;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        width = s.nextInt();
        s.nextLine();
        for (int c = 0; c < width; c++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] lakeValues = new int[currentSize];
            line = s.nextLine();
            laneChan = new Scanner(line);
            int j = 0;
            while (laneChan.hasNextInt()) {
                lakeValues[j] = laneChan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastapestSize = 0;
            for (int w = 1; w < currentSize; w++) {
                if (lakeValues[w] < lakeValues[w - 1]) {
                    firstMethod += lakeValues[w - 1] - lakeValues[w];
                    fastapestSize = Math.max(fastapestSize, lakeValues[w - 1] - lakeValues[w]);
                }
            }
            int secondMethod = 0;
            for (int w = 0; w < currentSize - 1; w++) {
                if (lakeValues[w] > fastapestSize) {
                    secondMethod += fastapestSize;
                } else {
                    secondMethod += lakeValues[w];
                }
            }
            printer.print(""Case #"" + (c + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}",328,16,"fastestRate:fastapestSize,size:width,i:c,m:w,plateValues:lakeValues,lineScan:laneChan,",3132,5.874416200319930,Beam
747,,,263,13,,993,1.8032003402710000,0
748,,,265,12,,617,1.0576080242792800,0
749,,,272,16,,841,1.2529662370681800,0
750,,,281,14,,5209,9.256175617376960,0
751,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner isprint = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = isprint.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int A = isprint.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] char = new int[A];
            for (int i = 0; i < A; i++){
                char[i] = isprint.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<A;i++){
                if(dif<char[i-1]-char[i]) dif=char[i-1]-char[i];    
            }
            for(int i=1;i<A;i++){
                if(char[i]<char[i-1]) a+=char[i-1]-char[i];
                if(char[i-1]<dif) b+=char[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,11,"ps:char,N:A,sinput:isprint,",869,1.6063383261362700,Beam
752,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner isprint = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = isprint.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int W = isprint.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] char = new int[W];
            for (int c = 0; c < W; c++){
                char[c] = isprint.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int c=1;c<W;c++){
                if(dif<char[c-1]-char[c]) dif=char[c-1]-char[c];    
            }
            for(int c=1;c<W;c++){
                if(char[c]<char[c-1]) a+=char[c-1]-char[c];
                if(char[c-1]<dif) b+=char[c-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,11,"ps:char,sinput:isprint,i:c,N:W,",1303,2.3857257962226900,Beam
753,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7968562444051110,Beam
754,,,291,12,,3411,6.349649441242220,0
755,,,269,13,,4394,8.327447255452480,0
756,,,256,13,,3427,6.444390205542250,0
757,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter line = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int diff;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            diff = 0;
            for (int chi = 0; chi < w; chi++)
                diff += judges.get(chi);

            while (diff-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    diff--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > diff / 2)
                        System.line.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            line.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        line.close();
    }

}",464,17,"senators:judges,sum:diff,i:chi,index2:slice1,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:line,",5085,9.982914837201440,Beam
758,,,272,16,,5851,8.77322739760081,0
759,,,211,11,,3008,4.800070242087050,0
760,,,317,14,,745,1.3228597482045500,0
761,,,256,13,,608,1.1798222661018400,0
762,,,393,16,,5202,9.858465548356370,0
763,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.367115310827891,Beam
764,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.224737826983130,Beam
765,,,272,16,,5948,8.613557902971900,0
766,,,358,16,,838,1.5441757122675600,0
767,,,255,13,,2574,5.869727063179020,0
768,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sh = new Scanner(System.in);
        int P = sh.nextInt();
        for(int TASE=1;TASE<=P;TASE++){
            int N = sh.nextInt(), w = sh.nextInt(), VW = sh.nextInt();
            int w = 0, Rs = 0;
            Rs += N*(w/VW);
            if (w%VW==0)Rs+=VW-1;
            else Rs+=VW;
            System.out.println(""Case #""+TASE+"": ""+Rs);
        }
    }
}",309,11,"C:w,R:N,W:VW,res:Rs,sc:sh,CASE:TASE,T:P,",1489,2.5953519543012000,Beam
769,,,305,15,,1198,2.2583578268686900,0
770,,,334,15,,1179,2.461731986204780,0
771,,,468,14,,3566,7.591780511538190,0
772,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bonce;
                    gold = silver = bonce = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bonce = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bonce = silver;
                            silver = i1;
                        }
                        else if (bonce == -1 || party[i1] > party[bonce])
                            bonce = i1;
                    int c = party[gold] - 1;
                    int w = party[bonce];
                    
                    if ((c > w ? c : w) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}",460,16,"y:w,x:c,bronze:bonce,",1210,2.8291683077812200,Beam
773,,,321,18,,6952,11.584930006663000,0
774,,,282,13,,990,1.687546682357790,0
775,,,298,16,,1210,2.196859280268350,0
776,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int TN = Integer.parseInt(line);
            for(int i=0;i<TN;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>size){
                            size=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=size){
                        b=b+size;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,T:TN,",497,1.0156549533208200,Beam
777,,,199,10,,993,1.4223783055941300,0
778,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.8122186899185180,Beam
779,,,291,15,,4048,7.156805590788520,0
780,,,544,17,,5919,12.324978033701600,0
781,,,325,14,,4793,8.809221541881560,0
782,,,418,13,,4434,10.42572724421820,0
783,,,406,19,,1024,1.9339447657267300,0
784,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,m,w,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            m =sc.nextInt();
            w = sc.nextInt();
            irez = m/w;
            irez *=r;
            irez +=w-1;
            if(m%w > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,c:m,",280,0.3835649291674300,Beam
785,,,353,16,,1582,3.118882735570270,0
786,"class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int c = in.nextInt();
                int w = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(c%w, 1)+w + c/w-1;
                if (r > 1) ans1 += (r-1)*(c/w);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""\n"");
                out.write(""Case #"" + cas + "": "" + ans + ""\n"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int u = in.nextInt();
                int wa = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(u%wa, 1)+wa + u/wa-1;
                if (r > 1) ans1 += (r-1)*(u/wa);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""
"");
                out.write(""Case #"" + cas + "": "" + ans + ""
"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",241,15,"w:wa,c:u,",373,0.6607940713564560,Beam
787,,,256,13,,3449,6.534410758813220,0
788,,,295,16,,5116,8.640584290027620,0
789,,,399,18,,6263,12.1697766939799,0
790,,,321,18,,6956,11.71106685400010,0
791,,,256,13,,3303,6.475081328550970,0
792,,,887,27,,1585,3.4702526489893600,0
793,,,790,14,,4837,10.911449972788500,0
794,,,327,16,,1146,2.138493994871780,0
795,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.849240783850352,Beam
796,,,255,13,,1923,4.615316979090370,0
797,,,340,10,,2519,5.213159934679670,0
798,,,325,14,,4797,9.09027041196823,0
799,,,305,15,,5158,9.250954894224800,0
800,,,300,13,,3766,6.293106579780580,0
801,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), M = scanner.nextLong(), A = scanner.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % A == 0) {
                out.println (ants + M/A - 1 + A);
            } else {
                out.println (ants + M/A + A);
            }
        }

    }
}",156,10,"ans:ants,W:A,C:M,",708,0.9901463786760970,Beam
802,,,328,16,,5302,9.850175174077350,0
803,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.1814022183418270,Beam
804,,,420,19,,7084,13.773386816183700,0
805,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.4209734439849900,Beam
806,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int M = Integer.parseInt(st.nextToken());
            int P = Integer.parseInt(st.nextToken());

            if (P == M)
                out.println(P+R-1);
            else if (M < 2*P)
                out.println(R+P);
            else if (M == 2*P)
                out.println(2*R-1+P);
            else {
                int rem = M%P;
                if (rem == 0) {
                    out.println((M*R)/P-1+P);
                }
                else {
                    out.println((M/P)*R+P);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}",273,11,"W:P,C:M,",305,0.7032360474268600,Beam
807,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader yr = new BufferedReader(new FileReader(args[0]));
        PrintWriter print = new PrintWriter(args[1], ""UTF-8"");

        int M = Integer.parseInt(yr.readLine());
        for (int i = 1; i <= M; ++i) {
            print.print(""Case #""+i+"": "");            

            StringTokenizer start = new StringTokenizer(yr.readLine());
            int A = Integer.parseInt(start.nextToken());
            int VC = Integer.parseInt(start.nextToken());
            int Q = Integer.parseInt(start.nextToken());

            if (Q == VC)
                print.println(Q+A-1);
            else if (VC < 2*Q)
                print.println(A+Q);
            else if (VC == 2*Q)
                print.println(2*A-1+Q);
            else {
                int rev = VC%Q;
                if (rev == 0) {
                    print.println((VC*A)/Q-1+Q);
                }
                else {
                    print.println((VC/Q)*A+Q);
                }
            }
        }

        print.flush();
        print.close();

        System.exit(0);
    }
}",273,11,"W:Q,rem:rev,C:VC,R:A,out:print,br:yr,st:start,t:i,T:M,",2441,5.575856904188790,Beam
808,,,211,11,,2760,5.673401812712350,0
809,,,224,11,,2760,6.199360680580140,0
810,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner laneChan = null;
        int width;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        width = s.nextInt();
        s.nextLine();
        for (int c = 0; c < width; c++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] lakeValues = new int[currentSize];
            line = s.nextLine();
            laneChan = new Scanner(line);
            int j = 0;
            while (laneChan.hasNextInt()) {
                lakeValues[j] = laneChan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastapestSize = 0;
            for (int w = 1; w < currentSize; w++) {
                if (lakeValues[w] < lakeValues[w - 1]) {
                    firstMethod += lakeValues[w - 1] - lakeValues[w];
                    fastapestSize = Math.max(fastapestSize, lakeValues[w - 1] - lakeValues[w]);
                }
            }
            int secondMethod = 0;
            for (int w = 0; w < currentSize - 1; w++) {
                if (lakeValues[w] > fastapestSize) {
                    secondMethod += fastapestSize;
                } else {
                    secondMethod += lakeValues[w];
                }
            }
            printer.print(""Case #"" + (c + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}",328,16,"fastestRate:fastapestSize,size:width,i:c,m:w,plateValues:lakeValues,lineScan:laneChan,",3132,7.301467764377590,Beam
811,,,525,23,,13608,33.08346336285270,0
812,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.7989427606264750,Beam
813,,,553,21,,1373,3.567119526863100,0
814,,,544,17,,5914,16.764145624637600,0
815,,,790,14,,4837,14.455194826920800,0
816,,,305,15,,799,1.942542024453480,0
817,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int W, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanning = new Scanner(input);
        
        int B = scanning.nextInt();
        for (int i = 0; i < B; i++) {
            
            W = scanning.nextInt();
            participant = new int[W];
            max = 0;
            
            for (int r = 0; r < W; r++) {

                participant[r] = scanning.nextInt();
                max += participant[r];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (W == 2) {
                for (int r = 1; r < participant[0]; r++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (apple == -1 || participant[i1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = i1;
                        }
                        else if (cream == -1 || participant[i1] > participant[cream]) {
                            brence = cream;
                            cream = i1;
                        }
                        else if (brence == -1 || participant[i1] > participant[brence])
                            brence = i1;
                    int xi = participant[apple] - 1;
                    int w = participant[brence];
                    
                    if ((xi > w ? xi : w) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanning.close();
    }

}",460,16,"gold:apple,sum:max,party:participant,silver:cream,bronze:brence,N:W,j:r,y:w,x:xi,scanner:scanning,T:B,",4899,12.62253270149230,Beam
818,,,544,17,,5913,16.341280535856900,0
819,,,303,12,,2809,6.433745813369750,0
820,,,406,16,,1272,3.3701082626978600,0
821,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A ir = new A();
        if(!ir.DEBUG){
            try {
                if(ir.isSmall)System.setIn(new FileInputStream(new File(""./src/""+ir.PACKAGE+""/""+ir.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+ir.PACKAGE+""/""+ir.PROBLEM+""-large.in"")));
                if(ir.isSmall)System.setOut(new PrintStream(new File(""./src/""+ir.PACKAGE+""/""+ir.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+ir.PACKAGE+""/""+ir.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner com = new Scanner(System.in);
        int L = com.nextInt();
        for(int TASE=1;TASE<=L;TASE++){
            int M = com.nextInt(), N = com.nextInt(), NW = com.nextInt();
            int w = 0, Rs = 0;
            Rs += M*(N/NW);
            if (N%NW==0)Rs+=NW-1;
            else Rs+=NW;
            System.out.println(""Case #""+TASE+"": ""+Rs);
        }
    }
}",309,11,"W:NW,C:N,R:M,res:Rs,CASE:TASE,T:L,sc:com,r:ir,",1582,3.333404735724130,Beam
822,,,208,12,,2039,4.411899622281390,0
823,"class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int w = reader.nextInt();
            int answer = c / w;
            answer *= r;
            answer += w - 1;
            if(c % w > 0){
                answer++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + answer);
        }
        reader.close();
    }

}","class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int wed = reader.nextInt();
            int grade = c / wed;
            grade *= r;
            grade += wed - 1;
            if(c % wed > 0){
                grade++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + grade);
        }
        reader.close();
    }

}",134,9,"w:wed,answer:grade,",404,0.8679472605387370,Beam
824,,,478,22,,12092,28.104042450587000,0
825,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.4085567673047400,Beam
826,,,254,13,,655,1.5281482140223200,0
827,,,272,16,,4184,7.205369965235390,0
828,,,639,21,,7966,21.489760553836800,0
829,,,298,16,,776,1.6614653746287000,0
830,,,290,12,,617,1.5064620494842500,0
831,,,406,17,,5260,14.625484645366700,0
832,,,309,11,,1954,3.901990779240930,0
833,,,211,11,,807,1.3711807370185900,0
834,,,290,12,,617,1.2068036317825300,0
835,,,358,18,,6750,11.860945280393000,0
836,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.2370397925376900,Beam
837,,,887,27,,1964,4.155162008603410,0
838,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.106800377368930,Beam
839,,,295,16,,5178,8.86879898707072,0
840,,,468,20,,8990,17.284322786331200,0
841,,,887,27,,6688,14.05232493877410,0
842,,,285,14,,4837,8.50448300043742,0
843,,,303,12,,2511,4.743676042556760,0
844,,,258,14,,5147,9.390567763646440,0
845,,,250,11,,559,1.0341062545776400,0
846,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader worker = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(worker.readLine());
        for(int count=1;count<=testCases;count++){
            String result="""";
            worker.readLine();
            String char[] = worker.readLine().split("" "");
            
            int n = Integer.MIN_VALUE;
            int key = 0;
            int result0 = 0;
            for(int i = 0; i<char.length-1;i++){
                int idTwo=Integer.parseInt(char[i+1]);
                int e2 = Integer.parseInt(char[i]);
                if((idTwo-e2)<0) key+=-(idTwo-e2);
                if(-(idTwo-e2)>n) n = -(idTwo-e2);
            }
            for(int i = 0; i<char.length-1;i++){
                int e2 = Integer.parseInt(char[i]);
                if(e2>=n) result0 = result0+n;
                else if(e2<n) result0 = result0+e2;
            }
            writer.write(""Case #""+count+"": ""+key+"" ""+result0+""
"");
        }
        worker.close();
        writer.close();

    }

}",316,15,"max:n,i2:idTwo,index:count,result1:key,result2:result0,str:char,i1:e2,reader:worker,",3137,7.580636370182040,Beam
847,,,280,13,,2853,6.41418092250824,0
848,,,317,12,,3647,9.485185356934870,0
849,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    queryIn    = new Scanner(System.in);
        
        int C    = queryIn.nextInt();
        
        for(int in=0; in<C; ++in) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        row    = queryIn.nextInt();
            int        a    = queryIn.nextInt();
            int        row    = queryIn.nextInt();
            int    total    = row*a;
            int    ref2        = 0;
            
            //    scan
            ref2    = row*(a/row);
            
            if(a % row == 0) {
                ref2    += row-1;
            } else if( row == 1) {
            } else {
                ref2    += row;
            }
            
            int    continue    = ref2;
            
            System.out.println(""Case #"" + (in+1) + "": "" + continue);
        }
        
        queryIn.close();
    }
}",171,10,"w:row,c:a,ret1:ref2,r:row,i:in,ret:continue,scanIn:queryIn,T:C,",2109,3.7857283035914100,Beam
850,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.9087454120318100,Beam
851,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,1.5791739265124000,Beam
852,,,269,13,,4382,10.675222078959100,0
853,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException ignore) {
                ignore.printStackTrace();
            }
        }
        Scanner sh = new Scanner(System.in);
        int D = sh.nextInt();
        for(int TATE=1;TATE<=D;TATE++){
            int N = sh.nextInt(), E = sh.nextInt(), NW = sh.nextInt();
            int E = 0, ares = 0;
            ares += N*(E/NW);
            if (E%NW==0)ares+=NW-1;
            else ares+=NW;
            System.out.println(""Case #""+TATE+"": ""+ares);
        }
    }
}",309,11,"C:E,R:N,W:NW,res:ares,CASE:TATE,sc:sh,T:D,r:m,e:ignore,",1737,3.5571898500124600,Beam
854,,,500,19,,8834,20.79180125395460,0
855,,,266,13,,3798,8.795412572224940,0
856,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream fits = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String div = r.readLine();
            int count = Integer.parseInt(div);
            for(int i = 0 ; i < count ; i++) {
                div = r.readLine();
                int w = Integer.parseInt(div);
                div = r.readLine();
                StringTokenizer c = new StringTokenizer(div,"" "");
                int [] art = new int[w];
                int seed = 0;
                while(c.hasMoreTokens()) {
                    art[seed++] = Integer.parseInt(c.nextToken());
                }
                int ansYY = 0;
                int annY = 0;
                int d = 0;
                for(int key = 0 ; key < w-1 ; key++) {
                    d = Math.max(d,art[key]-art[key+1]);
                    if(art[key+1]<art[key]) {
                        ansYY += art[key]-art[key+1];
                    }
                }
                for(int key = 0 ; key < w-1 ; key++) {
                    int x = Math.min(art[key],d);
                    annY += x;
                }
                fits.write(""Case #"".getBytes());
                fits.write(new Integer(i+1).toString().getBytes());
                fits.write("": "".getBytes());
                fits.write(new Integer(ansYY).toString().getBytes());
                fits.write("" "".getBytes());
                fits.write(new Integer(annY).toString().getBytes());
                fits.write(eolb);
            }
            fits.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"iter:seed,ansY:ansYY,dip:d,ansZ:annY,ar:art,st:c,str:div,j:key,t:count,bos:fits,br:r,n:w,",6449,14.579784266154000,Beam
857,,,278,15,,801,1.667158051331840,0
858,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int TATCH=1;TATCH<=T;TATCH++){
            int N = sc.nextInt(), N = sc.nextInt(), WF = sc.nextInt();
            int w = 0, res = 0;
            res += N*(N/WF);
            if (N%WF==0)res+=WF-1;
            else res+=WF;
            System.out.println(""Case #""+TATCH+"": ""+res);
        }
    }
}",309,11,"C:N,R:N,W:WF,CASE:TATCH,",962,1.9878856897354100,Beam
859,,,340,10,,2668,6.411761875947320,0
860,,,345,16,,6009,12.796458180745400,0
861,,,292,17,,6895,14.658636049429600,0
862,,,371,12,,1241,3.008378501733140,0
863,,,328,16,,4589,10.454149091243700,0
864,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.4568711638450600,Beam
865,,,330,16,,6077,15.09866265853250,0
866,,,371,12,,1241,3.160973596572880,0
867,,,386,18,,5105,11.223747436205500,0
868,,,371,12,,3349,8.58180046081543,0
869,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,5.824915730953220,Beam
870,,,290,12,,3384,7.088596260547640,0
871,,,393,16,,4590,10.002718683083900,0
872,,,330,16,,6077,15.412010149161000,0
873,,,285,14,,5209,10.507621443271600,0
874,,,208,12,,2039,4.0721220890680900,0
875,,,311,17,,6702,13.438461593786900,0
876,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.0839773178100600,Beam
877,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int TN = Integer.parseInt(line);
            for(int i=0;i<TN;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>size){
                            size=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=size){
                        b=b+size;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,T:TN,",497,1.0802184065183000,Beam
878,,,324,13,,4434,7.9213325460751900,0
879,,,280,13,,3163,5.7242753267288200,0
880,,,149,10,,2109,2.739080286026000,0
881,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.35858004887898800,Beam
882,,,256,13,,3409,6.601719943682350,0
883,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.2187490940094000,Beam
884,,,250,11,,3163,5.811889390150710,0
885,,,262,14,,652,1.1855197548866300,0
886,,,291,13,,4062,7.543881277243300,0
887,,,328,16,,5302,9.908241601785020,0
888,,,408,17,,1944,3.8396345178286200,0
889,,,271,12,,3171,5.698461973667150,0
890,,,334,15,,1179,2.365102199713390,0
891,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7778377215067550,Beam
892,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.17337134679158500,Beam
893,,,334,15,,5054,10.045786241690300,0
894,,,269,13,,4394,8.32632356484731,0
895,,,211,11,,559,0.8877645015716550,0
896,,,393,16,,4927,9.172755002975460,0
897,,,298,16,,4527,8.26882803440094,0
898,,,553,21,,5499,10.647281932830800,0
899,"class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int rows = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiers = new TreeSet<Integer>();
      for (int i = 0; i < 2 * rows - 1 ; i++) {
        nextLine = reader.readLine();
        String[] row = nextLine.split("" "");
        for (String soldier : row) {
          int height = Integer.valueOf(soldier);
          if (soldiers.contains(height)) {
            soldiers.remove(height);
          } else {
            soldiers.add(height);
          }
        }
      }
      if (soldiers.size() != rows) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer soldier : soldiers) {
        writer.write("" "" + soldier);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}","class B {
  
  public static void main(String mdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String stem = mdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(stem + ""-output.txt"", ""UTF-8""));
    BufferedReader slice = new BufferedReader(new FileReader(stem));

    String firstFile;
    firstFile = slice.readLine(); // ignore count
    int caseNum = 1;
    while ((firstFile = slice.readLine()) != null) {
      int checks = Integer.valueOf(firstFile);

      TreeSet<Integer> soldries = new TreeSet<Integer>();
      for (int li = 0; li < 2 * checks - 1 ; li++) {
        firstFile = slice.readLine();
        String[] r = firstFile.split("" "");
        for (String oldica : r) {
          int width = Integer.valueOf(oldica);
          if (soldries.contains(width)) {
            soldries.remove(width);
          } else {
            soldries.add(width);
          }
        }
      }
      if (soldries.size() != checks) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer oldica : soldries) {
        writer.write("" "" + oldica);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}",295,15,"height:width,row:r,rows:checks,i:li,soldiers:soldries,soldier:oldica,reader:slice,nextLine:firstFile,cmdArgs:mdArgs,filename:stem,",2118,4.197228364149730,Beam
900,,,273,11,,2969,5.420005635420480,0
901,,,256,13,,3108,5.675969652334850,0
902,,,405,15,,5178,10.12745108207070,0
903,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.24665077527364100,Beam
904,,,250,11,,2791,4.991651304562890,0
905,,,250,11,,2791,4.9593721230824800,0
906,,,317,12,,3414,6.489173312981920,0
907,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.5316524108250940,Beam
908,,,291,13,,4062,7.4947442531585700,0
909,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,1.0216267506281500,Beam
910,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.8450841267903650,Beam
911,,,271,12,,2882,4.8402774532636,0
912,,,330,16,,6077,12.71932367881140,0
913,"class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int w = reader.nextInt();
            int answer = c / w;
            answer *= r;
            answer += w - 1;
            if(c % w > 0){
                answer++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + answer);
        }
        reader.close();
    }

}","class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int sw = reader.nextInt();
            int grade = c / sw;
            grade *= r;
            grade += sw - 1;
            if(c % sw > 0){
                grade++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + grade);
        }
        reader.close();
    }

}",134,9,"answer:grade,w:sw,",404,0.5396864374478660,Beam
914,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7814781467119850,Beam
915,,,262,14,,652,1.135163680712380,0
916,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.17369097471237200,Beam
917,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,1.8213743249575300,Beam
918,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.275009548664093,Beam
919,"class A {

    public static void main(String [] args) throws IOException {
        String inputFile = ""src/A-small-1.in"";
        Scanner in = new Scanner(new File(inputFile));
        PrintStream out = new PrintStream(inputFile.substring(0, inputFile.length()-2)+""out"");
        int cases = in.nextInt();
        for (int cs = 1; cs <= cases; cs++) {
            long n = in.nextLong();
            A a = new A(n);
            String ans = ""Case #""+cs+"": ""+a.minSteps;
            out.println(ans);
            System.out.println(ans);
        }
        out.close();
        in.close();
    }
    
    TreeMap<Long, Integer> queue = new TreeMap<>();
    HashMap<Long,Integer> seen = new HashMap<>();
    int minSteps = Integer.MAX_VALUE;
    
    public A(long n) {
        queue.put(n, 1);
        while(!queue.isEmpty()) {
            Entry<Long, Integer> e = queue.pollFirstEntry();
            long v = e.getKey();
            int s = e.getValue();
            if (v == 1) {
                minSteps = Math.min(s, minSteps);
                continue;
            }
            if (s >= minSteps) { continue; }
            {
                Integer ps = seen.get(v-1);
                if (ps == null || ps > s+1) {
                    queue.put(v-1, s+1);
                    seen.put(v-1, s+1);
                }
            }
            if (v % 10 != 0) {
                long vr = Long.parseLong(new StringBuilder(Long.toString(v)).reverse().toString());
                if (vr < v){
                    Integer ps = seen.get(vr);
                    if (ps == null || ps > s+1) {
                        queue.put(vr, s+1);
                        seen.put(vr, s+1);
                    }
                }
            }
        }
    }
}","class A {

    public static void main(String [] args) throws IOException {
        String inputFile = ""src/A-small-1.in"";
        Scanner login = new Scanner(new File(inputFile));
        PrintStream plain = new PrintStream(inputFile.substring(0, inputFile.length()-2)+""out"");
        int rooms = login.nextInt();
        for (int cells = 1; cells <= rooms; cells++) {
            long num = login.nextLong();
            A acha = new A(num);
            String ants = ""Case #""+cells+"": ""+acha.minSteps;
            plain.println(ants);
            System.plain.println(ants);
        }
        plain.close();
        login.close();
    }
    
    TreeMap<Long, Integer> stack = new TreeMap<>();
    HashMap<Long,Integer> registered = new HashMap<>();
    int minSteps = Integer.MAX_VALUE;
    
    public A(long num) {
        stack.put(num, 1);
        while(!stack.isEmpty()) {
            Entry<Long, Integer> e = stack.pollFirstEntry();
            long r = e.getKey();
            int c = e.getValue();
            if (r == 1) {
                minSteps = Math.min(c, minSteps);
                continue;
            }
            if (c >= minSteps) { continue; }
            {
                Integer PS = registered.get(r-1);
                if (PS == null || PS > c+1) {
                    stack.put(r-1, c+1);
                    registered.put(r-1, c+1);
                }
            }
            if (r % 10 != 0) {
                long rb = Long.parseLong(new StringBuilder(Long.toString(r)).reverse().toString());
                if (rb < r){
                    Integer PS = registered.get(rb);
                    if (PS == null || PS > c+1) {
                        stack.put(rb, c+1);
                        registered.put(rb, c+1);
                    }
                }
            }
        }
    }
}",417,18,"a:acha,ans:ants,n:num,out:plain,in:login,cases:rooms,cs:cells,ps:PS,v:r,s:c,seen:registered,queue:stack,vr:rb,",2884,5.713240877787270,Beam
920,,,443,17,,2583,4.96643586953481,0
921,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.582107424736023,Beam
922,,,303,12,,2530,4.709899036089580,0
923,,,260,11,,2512,4.656517545382180,0
924,,,184,9,,652,1.1444633881251000,0
925,,,291,12,,1489,2.7476624568303400,0
926,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,",2270,4.3871790329615300,Beam
927,,,254,13,,655,1.094187116622930,0
928,,,200,10,,2233,3.2744837323824600,0
929,,,240,13,,2426,3.8955105106035900,0
930,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String rap = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) rap += ""
"";
      rap += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(rap);
  }
}",187,12,"res:rap,",156,0.22136159737904900,Beam
931,,,281,14,,4589,7.979254865646360,0
932,,,605,21,,9317,15.82114847501120,0
933,,,281,14,,745,1.3566595435142500,0
934,,,379,17,,6932,12.691520953178400,0
935,,,292,17,,6850,12.070332936445900,0
936,,,156,10,,2202,2.7043105244636500,0
937,,,200,10,,497,0.6848721345265710,0
938,,,311,17,,1351,2.1946476101875300,0
939,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[n]);
    }
  }

  private static int[] grade;
  private static final int UNSEEN=-1;
}",302,15,"distance:grade,",63,0.11276498238245600,Beam
940,,,211,11,,807,1.2318243980407700,0
941,,,285,14,,4837,8.300473654270170,0
942,,,321,18,,953,1.7603546301523800,0
943,,,271,12,,3171,5.690939390659330,0
944,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.2383615136146500,Beam
945,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int u = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (u / time) + (u - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"w:time,ans:ants,c:u,",745,1.079307786623640,Beam
946,,,260,13,,4186,6.831923091411590,0
947,,,358,18,,915,1.538939114411670,0
948,,,292,15,,3166,5.600132691860200,0
949,,,292,16,,4155,7.299650351206460,0
950,,,344,15,,772,1.345418683687850,0
951,,,281,14,,745,1.3088628013928700,0
952,,,306,16,,5550,10.239781391620600,0
953,,,256,13,,927,1.7505862236022900,0
954,,,406,17,,5322,11.222816439469700,0
955,,,292,15,,2566,4.764454913139340,0
956,,,345,16,,3499,6.068277116616570,0
957,,,406,19,,7999,15.466584853331200,0
958,,,326,14,,4899,9.167256518205010,0
959,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.3773641069730120,Beam
960,,,330,16,,6077,12.773219954967500,0
961,,,266,13,,3586,6.570257433255510,0
962,,,525,23,,13600,24.4214444120725,0
963,,,443,17,,1602,3.1806607683499700,0
964,,,334,12,,3933,7.950461200873060,0
965,,,302,15,,2636,4.414181470870970,0
966,,,417,18,,3845,7.776008272171020,0
967,,,184,9,,1706,3.072205452124280,0
968,,,355,19,,939,1.5700498342514000,0
969,,,655,16,,2071,4.326917846997580,0
970,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.43033370971679700,Beam
971,,,292,15,,1904,3.9762184699376400,0
972,,,334,15,,5302,13.446640308698000,0
973,,,553,21,,1373,3.3000891764958700,0
974,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.7007313330968220,Beam
975,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int io=0;io<1000001;io++)
      grade[io]=UNTEEN;
    Queue<Integer> qu=new LinkedList<Integer>();
    grade[1]=1;
    qu.add(1);
    while(!qu.isEmpty()){
      int current=qu.poll();
      int dx=grade[current];
    
      int sequence=current+1;
      if(sequence<1000001 && grade[sequence]==UNTEEN){
        int nt=dx+1;
        grade[sequence]=nt;
        qu.add(sequence);
      }
    int ne = current;
    int continue=0;
    while(ne>0){
      continue=10*continue+(ne%10);
      ne/=10;
    }
      sequence=continue;
      if(sequence<1000001 && grade[sequence]==UNTEEN){
        int nt=dx+1;
        grade[sequence]=nt;
        qu.add(sequence);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int devices=sen.nextInt();

    for(int ot=0;ot<devices;ot++){
      int ne=sen.nextInt();
      System.out.println(""Case #""+(ot+1)+"": ""+grade[ne]);
    }
  }

  private static int[] grade;
  private static final int UNTEEN=-1;
}",302,15,"distance:grade,scanner:sen,n:ne,UNSEEN:UNTEEN,cases:devices,t:ot,i:io,next:sequence,d:dx,q:qu,nd:nt,result:continue,",2512,5.505861095587410,Beam
976,,,358,16,,5333,13.306733194987000,0
977,,,735,24,,11418,25.871669864654500,0
978,,,132,9,,1099,2.069799848397570,0
979,,,269,16,,5816,12.15953949689870,0
980,,,326,14,,4093,9.884547595183050,0
981,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter r = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int skip;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            skip = 0;
            for (int chi = 0; chi < w; chi++)
                skip += judges.get(chi);

            while (skip-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    skip--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > skip / 2)
                        System.r.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            r.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        r.close();
    }

}",464,17,"senators:judges,sum:skip,index2:slice1,i:chi,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:r,",5085,12.98674011627830,Beam
982,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), M = scanner.nextLong(), A = scanner.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % A == 0) {
                out.println (ants + M/A - 1 + A);
            } else {
                out.println (ants + M/A + A);
            }
        }

    }
}",156,10,"ans:ants,W:A,C:M,",708,1.421218168735500,Beam
983,,,349,19,,1325,3.0736746827761300,0
984,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.20963776111602800,Beam
985,,,280,13,,3132,7.126096491018930,0
986,,,334,15,,1179,3.024019006888070,0
987,,,386,18,,939,2.0514892578125,0
988,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int problemCount = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = letters.get(currentIndex++);
            String line2 = letters.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] lull = ans;
            long[] sum11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int anti96 = 0; anti96 < lull.length - 1; anti96++) {
                        if (lull[anti96+1] < lull[anti96]) {
                            sum11[0] += lull[anti96] - lull[anti96+1];
                        }
                    }
                    
                    int length = 0;
                    for (int i3 = 0; i3 < lull.length - 1; i3++) {
                        if (lull[i3+1] < lull[i3]) {
                            length = Math.max(length, lull[i3] - lull[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < lull.length - 1; i1++) {
                        sum11[1] += Math.min(lull[i1], length);
                    }
            long[] min = sum11;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:lull,rate:length,i2:anti96,lines:letters,min1:sum11,",2957,7.213944760958350,Beam
989,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[n]);
    }
  }

  private static int[] grade;
  private static final int UNSEEN=-1;
}",302,15,"distance:grade,",63,0.1827092965443930,Beam
990,,,292,17,,6868,14.135706464449600,0
991,,,280,13,,3132,6.617155957221990,0
992,,,311,17,,6664,14.460548599561100,0
993,,,291,12,,3721,8.664948157469430,0
994,,,291,13,,3969,8.845327281951910,0
995,,,393,16,,5520,12.353146119912500,0
996,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Len = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Len[j] = sc.nextInt();
                    sum += Len[j];
                    Len[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Len[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Len[j] > 0) {
                                answer.append(parties[0]);
                                Len[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,Pi:Len,",342,0.8771288673082990,Beam
997,,,326,14,,4837,10.995088664690700,0
998,,,269,13,,4414,10.623460602760300,0
999,,,655,16,,2071,5.559711686770120,0
1000,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader browser = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter besw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = browser.readLine()) != null) {
            letters.add(line);
        }

        int numberSum = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int index = 0; index < numberSum; index++) {
            String line1 = letters.get(currentIndex++);
            String cellTwo = letters.get(currentIndex++);
            String[] array = cellTwo.split("" "");
            int[] cons = new int[array.length];
            for (int i94 = 0; i94 < array.length; i94++) {
                cons[i94] = Integer.valueOf(array[i94]);
            }
            int[] boss = cons;
            long[] lock2 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int li27 = 0; li27 < boss.length - 1; li27++) {
                        if (boss[li27+1] < boss[li27]) {
                            lock2[0] += boss[li27] - boss[li27+1];
                        }
                    }
                    
                    int rated = 0;
                    for (int anti323 = 0; anti323 < boss.length - 1; anti323++) {
                        if (boss[anti323+1] < boss[anti323]) {
                            rated = Math.max(rated, boss[anti323] - boss[anti323+1]);
                        }
                    }
                    
                    for (int xi01 = 0; xi01 < boss.length - 1; xi01++) {
                        lock2[1] += Math.count(boss[xi01], rated);
                    }
            long[] count = lock2;
            String r = ""Case #"" + (index + 1) + "": "" + count[0] + "" "" + count[1];

//            System.out.println(r);
            besw.write(r);
            besw.newLine();
        }

        if (besw != null)
            besw.close();

        if (browser != null)
            browser.close();
    }
}",479,25,"mush:boss,rate:rated,min1:lock2,min:count,lines:letters,vals:array,i4:i94,i2:li27,i3:anti323,problemCount:numberSum,line2:cellTwo,ans:cons,i:index,i1:xi01,bw:besw,br:browser,",7365,17.26784462928770,Beam
1001,,,132,9,,1523,2.600079341729480,0
1002,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.5403539299964900,Beam
1003,,,269,16,,2769,5.594459668795270,0
1004,,,169,10,,2171,3.982063619295760,0
1005,,,325,14,,4797,9.378572273254400,0
1006,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6549060026804610,Beam
1007,,,525,23,,13594,25.825256526470200,0
1008,,,328,16,,5302,9.961529723803200,0
1009,"class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int N = Integer.parseInt(br.readLine());
            int[][] vrst = new int[2*N-1][N];
            for(int j=0;j<2*N-1;j++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<N;k++) {
                    //System.out.println(""""+j+k);
                    vrst[j][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*N-1;i1++){
                for(int j = 0;j<N;j++){
                    bool[vrst[i1][j]]=!bool[vrst[i1][j]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""\n"");
            pw.write(""Case #""+(i+1)+"": ""+a+""\n"");

        }
        pw.close();
    }
}","class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int W = Integer.parseInt(br.readLine());
            int[][] cvste = new int[2*W-1][W];
            for(int dj=0;dj<2*W-1;dj++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<W;k++) {
                    //System.out.println(""""+j+k);
                    cvste[dj][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*W-1;i1++){
                for(int dj = 0;dj<W;dj++){
                    bool[cvste[i1][dj]]=!bool[cvste[i1][dj]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""
"");
            pw.write(""Case #""+(i+1)+"": ""+a+""
"");

        }
        pw.close();
    }
}",399,18,"N:W,j:dj,vrst:cvste,",1303,2.6624608357747400,Beam
1010,,,525,23,,13512,25.05606057246530,0
1011,,,285,14,,5209,9.231077297528580,0
1012,,,250,11,,2791,5.098954431215920,0
1013,,,363,16,,2140,4.0508696357409200,0
1014,,,324,13,,4434,8.189328893025720,0
1015,,,527,25,,10711,18.24995197057720,0
1016,,,366,17,,6139,10.932851719856300,0
1017,,,269,16,,845,1.4636952877044700,0
1018,,,406,17,,5322,14.299473683039300,0
1019,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.3097237865130100,Beam
1020,,,525,23,,13555,35.23680706818900,0
1021,,,399,18,,6263,16.560533579190600,0
1022,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A rc = new A();
        if(!rc.DEBUG){
            try {
                if(rc.isSmall)System.setIn(new FileInputStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-large.in"")));
                if(rc.isSmall)System.setOut(new PrintStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException fe) {
                fe.printStackTrace();
            }
        }
        Scanner app = new Scanner(System.in);
        int N = app.nextInt();
        for(int TATE=1;TATE<=N;TATE++){
            int M = app.nextInt(), N = app.nextInt(), N = app.nextInt();
            int w = 0, Rs = 0;
            Rs += M*(N/N);
            if (N%N==0)Rs+=N-1;
            else Rs+=N;
            System.out.println(""Case #""+TATE+"": ""+Rs);
        }
    }
}",309,11,"W:N,R:M,C:N,sc:app,res:Rs,CASE:TATE,T:N,r:rc,e:fe,",1737,3.9220149318377200,Beam
1023,,,295,15,,3099,7.3441279848416600,0
1024,,,525,23,,13567,34.63155769904450,0
1025,,,417,18,,3845,10.426796980698900,0
1026,,,328,16,,2977,7.10849064985911,0
1027,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int caseSum = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < caseSum; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int init = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < init) {
                    total0 += init - current;
                    maxMin = Math.max(maxMin, init - current);
                }
                init = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"pw:jpow,prev:init,testCount:caseSum,",1408,3.045501927534740,Beam
1028,,,478,22,,11798,27.89539249340690,0
1029,,,349,19,,862,1.8861622214317300,0
1030,,,156,10,,2205,4.757997727394100,0
1031,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter r = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                r.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             r.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,wr:r,",652,1.9750276605288200,Beam
1032,,,500,19,,7960,19.81687549352650,0
1033,,,360,19,,6984,15.195426034927400,0
1034,,,443,17,,5371,11.497983666261000,0
1035,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.8486762007077540,Beam
1036,"class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int rows = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiers = new TreeSet<Integer>();
      for (int i = 0; i < 2 * rows - 1 ; i++) {
        nextLine = reader.readLine();
        String[] row = nextLine.split("" "");
        for (String soldier : row) {
          int height = Integer.valueOf(soldier);
          if (soldiers.contains(height)) {
            soldiers.remove(height);
          } else {
            soldiers.add(height);
          }
        }
      }
      if (soldiers.size() != rows) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer soldier : soldiers) {
        writer.write("" "" + soldier);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}","class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int checks = Integer.valueOf(nextLine);

      TreeSet<Integer> soldries = new TreeSet<Integer>();
      for (int li = 0; li < 2 * checks - 1 ; li++) {
        nextLine = reader.readLine();
        String[] r = nextLine.split("" "");
        for (String oldica : r) {
          int width = Integer.valueOf(oldica);
          if (soldries.contains(width)) {
            soldries.remove(width);
          } else {
            soldries.add(width);
          }
        }
      }
      if (soldries.size() != checks) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer oldica : soldries) {
        writer.write("" "" + oldica);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}",295,15,"height:width,row:r,rows:checks,i:li,soldiers:soldries,soldier:oldica,",1706,3.5255182862281800,Beam
1037,,,271,12,,3171,5.786903981367750,0
1038,,,280,13,,3163,5.963756028811140,0
1039,,,257,11,,2946,5.637729950745900,0
1040,,,156,10,,2202,2.8004498799641900,0
1041,,,302,15,,2884,6.127003113428750,0
1042,,,292,17,,2551,5.625548684597020,0
1043,,,325,16,,6077,14.889191615581500,0
1044,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long gain = 0;
                while( flippingWhatever != 0 )
                {
                    gain = gain * 10;
                    gain = gain + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = gain;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:gain,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",2021,4.768815231323240,Beam
1045,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,1.1703631321589200,Beam
1046,,,187,13,,2093,4.088533441225690,0
1047,,,348,14,,3548,8.776487457752230,0
1048,,,326,14,,4837,11.618056480089800,0
1049,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.9565147320429490,Beam
1050,,,272,16,,5829,8.923821226755780,0
1051,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.9511797587076820,Beam
1052,,,345,16,,5989,10.621854301293700,0
1053,,,553,21,,5779,11.089306139946000,0
1054,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.67969810962677,Beam
1055,,,321,13,,4372,8.434781801700590,0
1056,,,417,18,,3845,7.819347778956100,0
1057,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[n]);
    }
  }

  private static int[] grade;
  private static final int UNSEEN=-1;
}",302,15,"distance:grade,",63,0.11998969713846800,Beam
1058,"class A {

    public static void main(String [] args) throws IOException {
        String inputFile = ""src/A-small-1.in"";
        Scanner in = new Scanner(new File(inputFile));
        PrintStream out = new PrintStream(inputFile.substring(0, inputFile.length()-2)+""out"");
        int cases = in.nextInt();
        for (int cs = 1; cs <= cases; cs++) {
            long n = in.nextLong();
            A a = new A(n);
            String ans = ""Case #""+cs+"": ""+a.minSteps;
            out.println(ans);
            System.out.println(ans);
        }
        out.close();
        in.close();
    }
    
    TreeMap<Long, Integer> queue = new TreeMap<>();
    HashMap<Long,Integer> seen = new HashMap<>();
    int minSteps = Integer.MAX_VALUE;
    
    public A(long n) {
        queue.put(n, 1);
        while(!queue.isEmpty()) {
            Entry<Long, Integer> e = queue.pollFirstEntry();
            long v = e.getKey();
            int s = e.getValue();
            if (v == 1) {
                minSteps = Math.min(s, minSteps);
                continue;
            }
            if (s >= minSteps) { continue; }
            {
                Integer ps = seen.get(v-1);
                if (ps == null || ps > s+1) {
                    queue.put(v-1, s+1);
                    seen.put(v-1, s+1);
                }
            }
            if (v % 10 != 0) {
                long vr = Long.parseLong(new StringBuilder(Long.toString(v)).reverse().toString());
                if (vr < v){
                    Integer ps = seen.get(vr);
                    if (ps == null || ps > s+1) {
                        queue.put(vr, s+1);
                        seen.put(vr, s+1);
                    }
                }
            }
        }
    }
}","class A {

    public static void main(String [] args) throws IOException {
        String inputFile = ""src/A-small-1.in"";
        Scanner login = new Scanner(new File(inputFile));
        PrintStream plain = new PrintStream(inputFile.substring(0, inputFile.length()-2)+""out"");
        int rooms = login.nextInt();
        for (int cells = 1; cells <= rooms; cells++) {
            long num = login.nextLong();
            A acha = new A(num);
            String ants = ""Case #""+cells+"": ""+acha.minSteps;
            plain.println(ants);
            System.plain.println(ants);
        }
        plain.close();
        login.close();
    }
    
    TreeMap<Long, Integer> stack = new TreeMap<>();
    HashMap<Long,Integer> registered = new HashMap<>();
    int minSteps = Integer.MAX_VALUE;
    
    public A(long num) {
        stack.put(num, 1);
        while(!stack.isEmpty()) {
            Entry<Long, Integer> e = stack.pollFirstEntry();
            long r = e.getKey();
            int c = e.getValue();
            if (r == 1) {
                minSteps = Math.min(c, minSteps);
                continue;
            }
            if (c >= minSteps) { continue; }
            {
                Integer PS = registered.get(r-1);
                if (PS == null || PS > c+1) {
                    stack.put(r-1, c+1);
                    registered.put(r-1, c+1);
                }
            }
            if (r % 10 != 0) {
                long vr = Long.parseLong(new StringBuilder(Long.toString(r)).reverse().toString());
                if (vr < r){
                    Integer PS = registered.get(vr);
                    if (PS == null || PS > c+1) {
                        stack.put(vr, c+1);
                        registered.put(vr, c+1);
                    }
                }
            }
        }
    }
}",417,18,"a:acha,ans:ants,n:num,out:plain,in:login,cases:rooms,cs:cells,ps:PS,v:r,s:c,seen:registered,queue:stack,",2760,5.538546892007190,Beam
1059,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.9981543103853860,Beam
1060,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.28387192885081000,Beam
1061,,,479,25,,8254,15.196746695041700,0
1062,,,321,18,,953,1.7506662368774400,0
1063,,,386,18,,7233,13.238510163625100,0
1064,,,735,24,,11365,19.91468491156900,0
1065,,,260,11,,2512,4.864743435382840,0
1066,,,340,10,,2308,4.38142850001653,0
1067,,,345,16,,5988,10.347224986553200,0
1068,,,360,19,,6987,12.232649405797300,0
1069,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.22620298465093000,Beam
1070,,,200,10,,714,1.0033637603124000,0
1071,,,406,17,,5570,11.912157352765400,0
1072,,,292,15,,5393,9.583475637435910,0
1073,,,406,16,,1272,2.5762073477109300,0
1074,,,272,16,,5813,8.835751728216810,0
1075,,,224,11,,3070,5.792448921998340,0
1076,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.735704755783081,Beam
1077,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.162159975369770,Beam
1078,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException n) {
                n.printStackTrace();
            }
        }
        Scanner enc = new Scanner(System.in);
        int N = enc.nextInt();
        for(int SCasing=1;SCasing<=N;SCasing++){
            int N = enc.nextInt(), E = enc.nextInt(), NW = enc.nextInt();
            int w = 0, Rs = 0;
            Rs += N*(E/NW);
            if (E%NW==0)Rs+=NW-1;
            else Rs+=NW;
            System.out.println(""Case #""+SCasing+"": ""+Rs);
        }
    }
}",309,11,"C:E,R:N,W:NW,res:Rs,CASE:SCasing,sc:enc,T:N,r:m,e:n,",1737,3.1223851641019200,Beam
1079,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int problemCount = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = letters.get(currentIndex++);
            String line2 = letters.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] lull = ans;
            long[] sum11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int anti96 = 0; anti96 < lull.length - 1; anti96++) {
                        if (lull[anti96+1] < lull[anti96]) {
                            sum11[0] += lull[anti96] - lull[anti96+1];
                        }
                    }
                    
                    int length = 0;
                    for (int i3 = 0; i3 < lull.length - 1; i3++) {
                        if (lull[i3+1] < lull[i3]) {
                            length = Math.max(length, lull[i3] - lull[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < lull.length - 1; i1++) {
                        sum11[1] += Math.min(lull[i1], length);
                    }
            long[] min = sum11;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:lull,rate:length,i2:anti96,lines:letters,min1:sum11,",2957,5.748289410273230,Beam
1080,,,262,14,,3504,6.417799532413480,0
1081,,,200,10,,714,1.0324714303016700,0
1082,,,321,13,,4093,7.306257132689160,0
1083,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.4318838675816850,Beam
1084,,,321,13,,4093,7.270279812812810,0
1085,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int TATCH=1;TATCH<=T;TATCH++){
            int N = sc.nextInt(), N = sc.nextInt(), WF = sc.nextInt();
            int w = 0, res = 0;
            res += N*(N/WF);
            if (N%WF==0)res+=WF-1;
            else res+=WF;
            System.out.println(""Case #""+TATCH+"": ""+res);
        }
    }
}",309,11,"R:N,C:N,W:WF,CASE:TATCH,",962,1.668295979499820,Beam
1086,,,309,11,,1954,3.479033128420510,0
1087,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,1.0413960655530300,Beam
1088,,,292,16,,4155,7.633206756909690,0
1089,,,281,14,,4589,7.781550884246830,0
1090,,,408,15,,5156,10.113127438227300,0
1091,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Len = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Len[j] = sc.nextInt();
                    sum += Len[j];
                    Len[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Len[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Len[j] > 0) {
                                answer.append(parties[0]);
                                Len[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,Pi:Len,",342,0.6753323634465540,Beam
1092,,,478,22,,11718,20.170457355181400,0
1093,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int TN = Integer.parseInt(line);
            for(int i=0;i<TN;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>size){
                            size=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=size){
                        b=b+size;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,T:TN,",497,1.0160114208857200,Beam
1094,,,262,14,,3504,6.651311051845550,0
1095,"class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int c = in.nextInt();
                int w = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(c%w, 1)+w + c/w-1;
                if (r > 1) ans1 += (r-1)*(c/w);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""\n"");
                out.write(""Case #"" + cas + "": "" + ans + ""\n"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int u = in.nextInt();
                int wa = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(u%wa, 1)+wa + u/wa-1;
                if (r > 1) ans1 += (r-1)*(u/wa);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""
"");
                out.write(""Case #"" + cas + "": "" + ans + ""
"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",241,15,"w:wa,c:u,",373,0.6508635958035790,Beam
1096,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int ii=0;ii<t;ii++){
        int c=inp.nextInt();
        int[] br=new int[c];
        for(int j=0;j<c;j++){
            br[j]=inp.nextInt();
        }
        int mean1=0;
        int miss2=0;
        for(int b=0;b<c-1;b++){
            
            int key=(br[b]-br[b+1]>0)? br[b]-br[b+1]:0;
            mean1+=key;
        
        }
        int w=0;
        for(int r=0;r<c-1;r++){
            w=Math.max(w,br[r]-br[r+1]);
        }
        for(int c=0;c<c-1;c++){
            int x=(br[c]<=w)?br[c]:w;
            miss2+=x;
        }

        System.out.println(""Case #""+(ii+1)+"": ""+mean1+"" ""+miss2);
    }
}
}",272,16,"sum1:mean1,sum2:miss2,arr:br,h:r,k:b,y:key,d:c,v:w,n:c,i:ii,",4856,7.315931423505150,Beam
1097,,,426,18,,3560,7.255131653944650,0
1098,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.1867108305295300,Beam
1099,,,334,15,,1892,4.010120618343350,0
1100,,,464,17,,5296,10.758870959281900,0
1101,,,255,13,,1489,3.5203112324078900,0
1102,,,386,18,,7643,13.87040807803470,0
1103,,,887,27,,6702,14.128535032272300,0
1104,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner isprint = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = isprint.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int A = isprint.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] char = new int[A];
            for (int i = 0; i < A; i++){
                char[i] = isprint.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<A;i++){
                if(dif<char[i-1]-char[i]) dif=char[i-1]-char[i];    
            }
            for(int i=1;i<A;i++){
                if(char[i]<char[i-1]) a+=char[i-1]-char[i];
                if(char[i-1]<dif) b+=char[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,11,"ps:char,N:A,sinput:isprint,",869,1.513776993751530,Beam
1105,,,292,15,,5776,10.274000716209400,0
1106,,,328,16,,5302,10.005807622273800,0
1107,,,334,15,,807,1.6880736033121700,0
1108,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        re    = scanIn.nextInt();
            int        u    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = re*u;
            int    ret1        = 0;
            
            //    scan
            ret1    = re*(u/k);
            
            if(u % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,c:u,r:re,",807,1.2827621499697400,Beam
1109,,,272,16,,4436,6.675629305839540,0
1110,,,334,15,,1179,2.4695090850194300,0
1111,,,291,15,,4048,7.250198670228320,0
1112,,,134,9,,1954,2.734995416800180,0
1113,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0953532497088100,Beam
1114,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.24836430549621600,Beam
1115,,,266,13,,4052,7.648717081546780,0
1116,,,262,14,,3504,6.692010867595670,0
1117,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] Parties = new char[26];
        for (int init = 0; init < Parties.length; init++) Parties[init] = (char)('A' + init);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int W = sc.nextInt();
            for (int init = 1; init <= W; init++) {
                answer.append(""Case #"" + init + "":"");
                int W = sc.nextInt();
                int[] Pri = new int[W];
                int count = 0;
                for (int n = 0; n < W; n++) {
                    Pri[n] = sc.nextInt();
                    count += Pri[n];
                    Pri[n] *= 2;
                }
                while (count > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    count--;
                    for (int n = 0; n < W; n++) {
                        if (Pri[n] > count) {
                            if (flag == 0) {
                                answer.append(Parties[n]);
                                Pri[n] -= 2;
                                flag = 1;
                            } else {
                                answer.append(Parties[n]);
                                Pri[n] -= 2;
                                count--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int n = 0; n < W; n++) {
                            if (Pri[n] > 0) {
                                answer.append(Parties[0]);
                                Pri[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,sum:count,T:W,i:init,Pi:Pri,parties:Parties,j:n,",2574,5.553950055440270,Beam
1118,,,321,18,,953,1.759086263179780,0
1119,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.240251084168750,Beam
1120,,,359,15,,3411,6.313904571533200,0
1121,,,282,13,,4083,7.331931169827780,0
1122,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0891414205233300,Beam
1123,,,211,11,,3008,4.987928136189780,0
1124,,,468,20,,8997,18.191265519460000,0
1125,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int max = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<max; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}",187,12,"col:max,",32,0.03784079154332480,Beam
1126,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,m,w,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            m =sc.nextInt();
            w = sc.nextInt();
            irez = m/w;
            irez *=r;
            irez +=w-1;
            if(m%w > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,c:m,",280,0.38513864676157600,Beam
1127,,,311,17,,2189,3.860047173500060,0
1128,,,790,14,,4837,11.283840103944100,0
1129,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0930897871653200,Beam
1130,,,349,19,,5322,9.68854888677597,0
1131,,,348,14,,3517,6.787811732292180,0
1132,,,273,11,,2417,4.400209760665890,0
1133,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.29170573949813800,Beam
1134,,,371,12,,3380,6.778710651397710,0
1135,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException n) {
                n.printStackTrace();
            }
        }
        Scanner enc = new Scanner(System.in);
        int N = enc.nextInt();
        for(int SCasing=1;SCasing<=N;SCasing++){
            int N = enc.nextInt(), E = enc.nextInt(), NW = enc.nextInt();
            int w = 0, Rs = 0;
            Rs += N*(E/NW);
            if (E%NW==0)Rs+=NW-1;
            else Rs+=NW;
            System.out.println(""Case #""+SCasing+"": ""+Rs);
        }
    }
}",309,11,"C:E,R:N,W:NW,res:Rs,CASE:SCasing,sc:enc,T:N,r:m,e:n,",1737,3.1094692230224600,Beam
1136,,,263,13,,683,1.2357234438260400,0
1137,,,500,19,,8668,16.10285242795940,0
1138,,,328,16,,1241,2.3606094479560900,0
1139,,,527,25,,16400,30.763267028331800,0
1140,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.24745901823043800,Beam
1141,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,1.90378227631251,Beam
1142,,,468,14,,3411,7.3666022698084500,0
1143,,,348,14,,3548,6.792904114723210,0
1144,,,478,22,,11286,19.788826847076400,0
1145,,,367,20,,935,1.7293669859568300,0
1146,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0918264746666000,Beam
1147,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lill = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lill[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = lill[iu22] - lill[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = lill[i3] - lill[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lill[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lill = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lill[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = lill[iu22] - lill[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = lill[i3] - lill[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lill[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] lill = new int[n];
                    for (int i = 0; i < n; i++) {
                        lill[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int stuff = lill[i] - lill[i + 1];
                        if (stuff > 0) {
                            first += stuff;
                        }
                    }
                    
                    int[] stuff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        stuff[i] = lill[i] - lill[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, stuff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, lill[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] lill = new int[n];
                for (int i = 0; i < n; i++) {
                    lill[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int stuff = lill[i] - lill[i + 1];
                    if (stuff > 0) {
                        first += stuff;
                    }
                }
                
                int[] stuff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    stuff[i] = lill[i] - lill[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, stuff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, lill[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:lill,i4:iu22,diff:stuff,",1044,2.4977107723554000,Beam
1148,,,358,18,,6782,11.979749266306600,0
1149,,,355,19,,939,1.5792345722516400,0
1150,,,513,26,,16192,28.41292442480720,0
1151,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.39913643995920800,Beam
1152,,,358,16,,5023,9.576042640209200,0
1153,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.2551455219586700,Beam
1154,,,326,14,,4837,9.088429967562360,0
1155,,,132,9,,1919,2.5085911631584200,0
1156,,,306,13,,2047,4.254922680060070,0
1158,,,479,25,,2979,5.838113152980810,0
1159,,,448,20,,9347,17.51630840698880,0
1160,,,280,13,,3101,5.450138235092160,0
1161,,,219,14,,647,1.1160763223966000,0
1162,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.9503520131111150,Beam
1163,,,393,19,,7057,12.500319643815400,0
1164,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.2463249882062300,Beam
1165,,,321,18,,953,1.7720139861106900,0
1166,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner cc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = cc.nextInt();
        
        for (int x = 1; x <= R; ++x) {
            int W = cc.nextInt();
            
            int[][] yr = new int[2*W-1][W];
            
            // 2 * N - 1 line with N numbers
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    yr[c][c] = cc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> mp = new HashMap<>();
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    if (mp.get(yr[c][c]) == null) {
                        mp.put(yr[c][c], 1);
                    }
                    else {
                        int w = mp.get(yr[c][c]);
                        mp.put(yr[c][c], w + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int c : mp.keySet()) {
                if (mp.get(c) % 2 != 0) {
                    r.add(c);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int c = 0; c < r.size(); ++c) {
                System.out.print("" "" + r.get(c));
            }
            System.out.println();
        }

        cc.close();
    }
}",375,12,"N:W,i:c,arr:yr,T:R,k:w,map:mp,j:c,sc:cc,",2754,5.414641825358070,Beam
1167,,,240,13,,460,0.774445668856303,0
1168,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.3605656901995340,Beam
1169,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.30810825030009000,Beam
1170,,,306,16,,5302,9.932298624515530,0
1171,,,605,21,,10027,17.238696316878000,0
1172,,,272,16,,5918,8.753358789285020,0
1173,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,1.0511160254478500,Beam
1174,,,273,11,,798,1.490724217891690,0
1175,,,262,14,,3504,6.64989093542099,0
1176,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6845529556274420,Beam
1177,,,291,13,,4062,7.552646084626520,0
1178,,,311,17,,2189,3.8058565219243400,0
1179,,,290,12,,617,1.1534336407979300,0
1180,,,349,19,,4503,8.014991116523740,0
1181,,,255,13,,2946,6.8932718396186800,0
1182,,,348,14,,3895,7.541433350245160,0
1183,,,366,17,,900,1.6029321114222200,0
1184,,,272,16,,5851,8.97957112789154,0
1185,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,1.9014851808548000,Beam
1186,,,271,12,,3167,5.522682352860770,0
1187,,,265,12,,3389,5.853874226411180,0
1188,,,426,18,,2602,5.273111418883010,0
1189,,,281,14,,1117,2.0339424053827900,0
1190,,,358,18,,915,1.6506859143575000,0
1191,,,419,16,,6077,11.552926659584000,0
1192,,,250,11,,807,1.513471790154780,0
1193,,,306,13,,1396,2.8514264702796900,0
1194,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,1.8720256090164200,Beam
1195,,,273,11,,553,1.0160117387771600,0
1196,,,269,16,,5848,10.110112937291500,0
1197,,,292,17,,6832,11.935143367449400,0
1198,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader worker = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(worker.readLine());
        for(int count=1;count<=testCases;count++){
            String result="""";
            worker.readLine();
            String char[] = worker.readLine().split("" "");
            
            int n = Integer.MIN_VALUE;
            int key = 0;
            int result0 = 0;
            for(int i = 0; i<char.length-1;i++){
                int idTwo=Integer.parseInt(char[i+1]);
                int e2 = Integer.parseInt(char[i]);
                if((idTwo-e2)<0) key+=-(idTwo-e2);
                if(-(idTwo-e2)>n) n = -(idTwo-e2);
            }
            for(int i = 0; i<char.length-1;i++){
                int e2 = Integer.parseInt(char[i]);
                if(e2>=n) result0 = result0+n;
                else if(e2<n) result0 = result0+e2;
            }
            writer.write(""Case #""+count+"": ""+key+"" ""+result0+""
"");
        }
        worker.close();
        writer.close();

    }

}",316,15,"max:n,i2:idTwo,index:count,result1:key,result2:result0,str:char,i1:e2,reader:worker,",3137,5.941706113020580,Beam
1199,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int ref = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, ref);
                sum += ref;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:ref,max:w,",462,0.7523234804471330,Beam
1200,,,406,19,,7999,15.293728439013200,0
1201,,,448,20,,9560,18.21290770371760,0
1202,,,257,11,,2884,5.168592170874280,0
1203,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] PG = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        PG[i][j] = EMPTY;
                    else if (c == '<')
                        PG[i][j] = LEFT;
                    else if (c == '>')
                        PG[i][j] = RIGHT;
                    else if (c == 'v')
                        PG[i][j] = DOWN;
                    else if (c == '^')
                        PG[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (PG[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (PG[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[PG[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}",513,26,"G:PG,",80,0.15103198687235500,Beam
1204,"class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] R = new int[N + 1];
            R[0] = sc.nextInt();
            int[] P = new int[N + 1];
            P[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                P[i + 1] = (P[i] + R[i] - S[i]) / 2;
                R[i + 1] = (R[i] + S[i] - P[i]) / 2;
                S[i + 1] = (P[i] + S[i] - R[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (R[N] == 1) {
                System.out.println(r[N]);
            } else if (P[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}","class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] RN = new int[N + 1];
            RN[0] = sc.nextInt();
            int[] PA = new int[N + 1];
            PA[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                PA[i + 1] = (PA[i] + RN[i] - S[i]) / 2;
                RN[i + 1] = (RN[i] + S[i] - PA[i]) / 2;
                S[i + 1] = (PA[i] + S[i] - RN[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (RN[i] < 0 || PA[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (RN[N] == 1) {
                System.out.println(r[N]);
            } else if (PA[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}",619,14,"R:RN,P:PA,",476,0.914121945699056,Beam
1205,,,262,14,,2698,4.916239889462790,0
1206,,,325,14,,4797,9.021533866723380,0
1207,,,330,16,,5302,10.5960023244222,0
1208,,,295,15,,3110,5.738488725821180,0
1209,,,334,15,,1179,2.4507540663083400,0
1210,,,325,14,,4789,8.802366427580520,0
1211,,,348,21,,7953,13.633927750587500,0
1212,"class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int width = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / width;
                        int res = limit + width-1;
                        
                        int fin = res * row;
                        int left = cells % width;
                        //System.out.println(left);
                        if(left != 0 && width != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}","class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int age = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / age;
                        int ris = limit + age-1;
                        
                        int fin = ris * row;
                        int left = cells % age;
                        //System.out.println(left);
                        if(left != 0 && age != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}",236,16,"width:age,res:ris,",373,0.621095863978068,Beam
1213,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.17189868688583400,Beam
1214,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream max = System.max;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.max.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), M = scanner.nextLong(), A = scanner.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % A == 0) {
                max.println (ants + M/A - 1 + A);
            } else {
                max.println (ants + M/A + A);
            }
        }

    }
}",156,10,"W:A,ans:ants,C:M,out:max,",1107,1.533768860499060,Beam
1215,,,262,14,,1024,1.8382294376691200,0
1216,,,187,13,,1230,1.6419780611991900,0
1217,,,292,15,,5703,10.35762064854300,0
1218,,,273,11,,798,1.4889249324798600,0
1219,,,292,16,,4589,8.415582342942560,0
1220,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6851581374804180,Beam
1221,,,257,11,,3070,5.520380123456320,0
1222,,,406,19,,1024,1.9578704873720800,0
1223,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int ii=0;ii<t;ii++){
        int r=inp.nextInt();
        int[] art=new int[r];
        for(int j=0;j<r;j++){
            art[j]=inp.nextInt();
        }
        int mean1=0;
        int miss32=0;
        for(int key=0;key<r-1;key++){
            
            int y=(art[key]-art[key+1]>0)? art[key]-art[key+1]:0;
            mean1+=y;
        
        }
        int w=0;
        for(int r=0;r<r-1;r++){
            w=Math.max(w,art[r]-art[r+1]);
        }
        for(int c=0;c<r-1;c++){
            int x=(art[c]<=w)?art[c]:w;
            miss32+=x;
        }

        System.out.println(""Case #""+(ii+1)+"": ""+mean1+"" ""+miss32);
    }
}
}",272,16,"sum1:mean1,sum2:miss32,h:r,arr:art,k:key,d:c,v:w,n:r,i:ii,",4742,7.140986013412480,Beam
1224,,,426,18,,3560,7.136454192797340,0
1225,,,256,13,,4089,7.120680296421050,0
1226,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"count:sum,num:width,row:cur,i:c,height:width,kk:ctx,in:r,",2044,3.9013770898183200,Beam
1227,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.1968645493189500,Beam
1228,,,735,24,,10817,18.37586522102360,0
1229,,,325,16,,5891,11.38456635872520,0
1230,,,478,22,,11748,20.696388081709500,0
1231,,,417,18,,4310,8.626882994174960,0
1232,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.609913154443105,Beam
1233,,,325,16,,6077,12.142853768666600,0
1234,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.2035406748453800,Beam
1235,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.091717537244160,Beam
1236,,,345,16,,861,1.5245545148849500,0
1237,,,265,12,,617,1.0844551563262900,0
1238,,,281,14,,5023,9.27853656609853,0
1239,,,240,13,,2184,3.706323969364170,0
1240,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                slated.add(i, 0);
            }
            int equateOrg = 0;
            for (int i = 0; i < N; i++) {
                int w = r.nextInt();
                slated.set(i, w);
                equateOrg += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateOrg > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (max == second && equateOrg != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateOrg -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateOrg -= 1;
                }
            }
            if (equateOrg == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateOrg,temp:w,in:r,",1856,4.139434719085690,Beam
1241,,,292,16,,4155,7.575361879666650,0
1242,,,553,21,,5207,10.00271521806720,0
1243,,,553,21,,907,1.7543106079101600,0
1244,,,334,15,,1179,2.48666037718455,0
1245,,,328,16,,5302,9.630326994260150,0
1246,,,278,11,,3073,5.3669559796651200,0
1247,,,441,13,,4155,8.559228571256000,0
1248,,,887,27,,6546,13.600130887826300,0
1249,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[n]);
    }
  }

  private static int[] grade;
  private static final int UNSEEN=-1;
}",302,15,"distance:grade,",63,0.12032546997070300,Beam
1250,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int dir = current - m[i];
                    if (dir > jump)
                        jump = dir;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    width += m[i];
                else
                    width += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,diff:dir,",528,0.9797300895055140,Beam
1251,,,295,15,,3389,6.335877625147500,0
1252,,,292,17,,2157,3.9339548269907600,0
1253,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int c=inp.nextInt();
        int[] fr=new int[c];
        for(int j=0;j<c;j++){
            fr[j]=inp.nextInt();
        }
        int mean1=0;
        int miss32=0;
        for(int kick=0;kick<c-1;kick++){
            
            int y=(fr[kick]-fr[kick+1]>0)? fr[kick]-fr[kick+1]:0;
            mean1+=y;
        
        }
        int w=0;
        for(int r=0;r<c-1;r++){
            w=Math.max(w,fr[r]-fr[r+1]);
        }
        for(int d=0;d<c-1;d++){
            int x=(fr[d]<=w)?fr[d]:w;
            miss32+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+mean1+"" ""+miss32);
    }
}
}",272,16,"arr:fr,sum1:mean1,sum2:miss32,h:r,k:kick,v:w,n:c,",3926,5.789448424180350,Beam
1254,,,334,15,,5147,10.786842652161900,0
1255,,,475,18,,7937,14.731432684262600,0
1256,"class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder output = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int numTests = Integer.parseInt(br.readLine());
                    int test;
                    String [] testSplit;
                    int [] mush;
                    
                    // Loop through each test
                    for (int testCounter = 0; testCounter < numTests; ++testCounter) {
                        test=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mush= new int[test];
                        for(int s=0;s<test;s++)
                        {
                            mush[s]=Integer.parseInt(testSplit[s]);
                        }
                        int out1=0,out2=0;
                        int currentDiff=0,maxDiff=0;
                        out1=0;
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s]<mush[s-1])
                            {
                                currentDiff=mush[s-1]-mush[s];
                                out1+=currentDiff;
                                maxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;
                                
                            }
                        }
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s-1]<maxDiff)
                            {
                                out2+=mush[s-1];
                                
                            }
                            else
                            {
                                out2+=maxDiff;
                            }
                        }
                        System.out.println(""Case #""+(testCounter+1)+"": ""+out1+"" ""+out2);
        //                System.out.println(""Done"");
                        output.append(""Case #"").append((testCounter+1)).append("": "").append(out1+"" ""+out2);
                        output.append(""\n"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( output.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}","class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader bl = null;
                StringBuilder letter = new StringBuilder();
                try {
                     // String buffer for storing the output
                    bl = new BufferedReader(new FileReader(inputFile));
                    int NumFables = Integer.parseInt(bl.readLine());
                    int train;
                    String [] testSplit;
                    int [] mUSH;
                    
                    // Loop through each test
                    for (int matchCount = 0; matchCount < NumFables; ++matchCount) {
                        train=Integer.parseInt(bl.readLine());
                        
                        testSplit=(bl.readLine()).split("" "");
                        mUSH= new int[train];
                        for(int n=0;n<train;n++)
                        {
                            mUSH[n]=Integer.parseInt(testSplit[n]);
                        }
                        int inPart=0,in=0;
                        int currentLength=0,out=0;
                        inPart=0;
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n]<mUSH[n-1])
                            {
                                currentLength=mUSH[n-1]-mUSH[n];
                                inPart+=currentLength;
                                out=(out<currentLength)?currentLength:out;
                                
                            }
                        }
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n-1]<out)
                            {
                                in+=mUSH[n-1];
                                
                            }
                            else
                            {
                                in+=out;
                            }
                        }
                        System.out.println(""Case #""+(matchCount+1)+"": ""+inPart+"" ""+in);
        //                System.out.println(""Done"");
                        letter.append(""Case #"").append((matchCount+1)).append("": "").append(inPart+"" ""+in);
                        letter.append(""
"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( letter.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}",443,17,"mush:mUSH,currentDiff:currentLength,maxDiff:out,s:n,test:train,testCounter:matchCount,output:letter,out2:in,out1:inPart,numTests:NumFables,br:bl,",4310,8.285093808174130,Beam
1257,,,255,13,,2946,6.680910964806870,0
1258,,,269,13,,4414,8.719049255053200,0
1259,"class B {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; ++t) {
            int n = in.nextInt();
            long m = in.nextLong();
            boolean[][] b = new boolean[n][n];
            long[] sum = new long[n];
            sum[0] = 1;
            b[0][n - 1] = true;
            --m;
            int cur = 1;
            while (m > 0 && cur < n - 1) {
                b[cur][n - 1] = true;
                b[0][cur] = true;
                --m;
                sum[cur]++;
                for (int prev = cur - 1; prev > 0; --prev) {
                    if (m >= sum[prev]) {
                        b[prev][cur] = true;
                        m -= sum[prev];
                        sum[cur] += sum[prev];
                    }
                }
                ++cur;
            }

            if (m > 0) {
                System.out.println(""Case #"" + t + "": IMPOSSIBLE"");
            } else {
                System.out.println(""Case #"" + t + "": POSSIBLE"");
                for (int i = 0; i < n; ++i) {
                    for (int j = 0; j < n; ++j) {
                        System.out.print(b[i][j] ? 1 : 0);
                    }
                    System.out.println();
                }
            }
        }
    }
}","class B {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; ++t) {
            int n = in.nextInt();
            long m = in.nextLong();
            boolean[][] b = new boolean[n][n];
            long[] u = new long[n];
            u[0] = 1;
            b[0][n - 1] = true;
            --m;
            int rev = 1;
            while (m > 0 && rev < n - 1) {
                b[rev][n - 1] = true;
                b[0][rev] = true;
                --m;
                u[rev]++;
                for (int reverse = rev - 1; reverse > 0; --reverse) {
                    if (m >= u[reverse]) {
                        b[reverse][rev] = true;
                        m -= u[reverse];
                        u[rev] += u[reverse];
                    }
                }
                ++rev;
            }

            if (m > 0) {
                System.out.println(""Case #"" + t + "": IMPOSSIBLE"");
            } else {
                System.out.println(""Case #"" + t + "": POSSIBLE"");
                for (int i = 0; i < n; ++i) {
                    for (int j = 0; j < n; ++j) {
                        System.out.print(b[i][j] ? 1 : 0);
                    }
                    System.out.println();
                }
            }
        }
    }
}",324,13,"prev:reverse,sum:u,cur:rev,",1024,1.8741092284520500,Beam
1260,,,295,15,,672,1.2697939197222400,0
1261,,,305,15,,1198,2.2274918794632000,0
1262,,,321,18,,6952,11.436234406630200,0
1263,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.35469451745351200,Beam
1264,,,443,17,,2811,5.4474425435066200,0
1265,,,292,16,,4155,7.570406723022460,0
1266,,,250,11,,2667,4.401841600735980,0
1267,,,311,17,,6708,11.332390411694800,0
1268,,,184,9,,435,0.7090922355651860,0
1269,,,406,19,,7999,15.347621846199000,0
1270,,,311,17,,2127,3.7439616441726700,0
1271,,,256,13,,4050,7.1336559653282200,0
1272,,,208,12,,2044,3.43367395401001,0
1273,,,406,19,,7937,15.123115134239200,0
1274,,,311,17,,6708,12.306307685375200,0
1275,,,224,11,,1272,2.466001256306970,0
1276,,,250,11,,559,1.027704362074530,0
1277,,,328,16,,2357,4.546642072995500,0
1278,,,321,18,,6952,11.90198129415510,0
1279,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader worker = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(worker.readLine());
        for(int count=1;count<=testCases;count++){
            String result="""";
            worker.readLine();
            String char[] = worker.readLine().split("" "");
            
            int n = Integer.MIN_VALUE;
            int key = 0;
            int result0 = 0;
            for(int i = 0; i<char.length-1;i++){
                int idTwo=Integer.parseInt(char[i+1]);
                int e2 = Integer.parseInt(char[i]);
                if((idTwo-e2)<0) key+=-(idTwo-e2);
                if(-(idTwo-e2)>n) n = -(idTwo-e2);
            }
            for(int i = 0; i<char.length-1;i++){
                int e2 = Integer.parseInt(char[i]);
                if(e2>=n) result0 = result0+n;
                else if(e2<n) result0 = result0+e2;
            }
            writer.write(""Case #""+count+"": ""+key+"" ""+result0+""
"");
        }
        worker.close();
        writer.close();

    }

}",316,15,"max:n,i2:idTwo,index:count,result1:key,result2:result0,str:char,i1:e2,reader:worker,",3137,6.122340591748560,Beam
1280,,,305,15,,5232,9.369977331161500,0
1281,,,156,10,,2202,2.752859612305960,0
1282,,,305,15,,5232,10.04371908903120,0
1283,,,325,14,,4793,8.985801362991330,0
1284,,,735,24,,11387,19.547643800576500,0
1285,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner is = new Scanner(System.is);
        int T = is.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = is.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int c = 0; c < N; c++) {
                slated.add(c, 0);
            }
            int equateSize = 0;
            for (int c = 0; c < N; c++) {
                int w = is.nextInt();
                slated.set(c, w);
                equateSize += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateSize > 2) {
                int step = 0;
                int rightAddress = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> expected = new ArrayList<>(slated);
                Collections.sort(expected, Collections.reverseOrder());
                step = expected.get(0);
                rightAddress = slated.indexOf(step);
                second = expected.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (step == second && equateSize != 3) {
                    System.out.print(Character.toChars(65 + rightAddress)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(rightAddress, slated.get(rightAddress) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + rightAddress)[0]);
                    System.out.print("" "");
                    slated.set(rightAddress, slated.get(rightAddress) - 1);
                    equateSize -= 1;
                }
            }
            if (equateSize == 2){
                int step = 0;
                int rightAddress = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> expected = new ArrayList<>(slated);
                Collections.sort(expected, Collections.reverseOrder());
                step = expected.get(0);
                rightAddress = slated.indexOf(step);
                second = expected.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + rightAddress)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(rightAddress, slated.get(rightAddress) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateSize,temp:w,i:c,maxIndex:rightAddress,max:step,ordered:expected,in:is,",3957,8.25375104745229,Beam
1286,,,355,19,,6653,11.235685400168100,0
1287,,,406,19,,1024,1.9453826904296900,0
1288,,,375,12,,3715,7.027379449208580,0
1289,,,358,16,,838,1.5141897519429500,0
1290,,,448,20,,9640,17.6496586004893,0
1291,,,306,13,,2884,5.616114513079330,0
1292,,,735,24,,11449,19.80386228164040,0
1293,,,281,14,,5209,8.955931508541110,0
1294,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0540046016375200,Beam
1295,,,366,17,,6139,10.386297150452900,0
1296,,,321,18,,6952,11.568079809347800,0
1297,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.191718014081320,Beam
1298,,,328,16,,5302,9.80067998568217,0
1299,,,418,13,,3969,9.599323916435240,0
1300,,,500,19,,8840,15.794072779019700,0
1301,,,525,23,,13588,25.325023047129300,0
1302,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,1.9185038169225100,Beam
1303,,,417,18,,3845,7.538092760245010,0
1304,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.4111367702484130,Beam
1305,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int sumCased = s.nextInt();
        
        int max = 1000003;
        long[] ip = new long[max];
        ip[1] = 1;
        ip[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long count = ip[i-1] + 1;
            char[] trial = String.valueOf((long) i).toCharArray();
            long res = 0;
            long sum = 1;
            for(int i01 = 0; i01 < trial.length; ++i01)
            {
                int nom = Integer.valueOf(String.valueOf(trial[i01]));
                if(i01 == trial.length-1 && nom == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += nom * sum;
                sum *= 10;
            }
            long index = res;
            long sea = 0;
            if(index >= 1 && index < i)
            {
                sea = ip[(int)index]+1;
            }
            if(sea > 1 && sea < count)
            {
                ip[i] = sea;
            }else
            {
                ip[i] = count;
            }
        }
        
        
        for(int numB = 0; numB < sumCased; ++numB)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numB+1);
            System.out.print("": "");
            System.out.println(ip[(int)n]);
        }

    }
}",325,16,"test:trial,mult:sum,numCases:sumCased,dp:ip,numC:numB,second:sea,first:count,i1:i01,tmp:nom,",4992,9.332612164815270,Beam
1306,,,345,16,,1260,2.1130325833956400,0
1307,,,171,10,,2233,3.4709996501604700,0
1308,,,328,16,,5302,9.87767697572708,0
1309,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] trial = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < trial.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(trial[i1]));
                if(i1 == trial.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}",325,16,"test:trial,",218,0.4313774307568870,Beam
1310,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.36531875928243,Beam
1311,,,605,21,,9297,15.50183957417810,0
1312,,,187,13,,2093,2.7291457335154200,0
1313,,,260,13,,4248,7.2236114859581000,0
1314,,,544,17,,4333,8.977749423185990,0
1315,,,366,17,,5612,9.352840288480120,0
1316,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int MN, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner planning = new Scanner(input);
        
        int T = planning.nextInt();
        for (int c = 0; c < T; c++) {
            
            MN = planning.nextInt();
            participant = new int[MN];
            max = 0;
            
            for (int r = 0; r < MN; r++) {

                participant[r] = planning.nextInt();
                max += participant[r];
            }

            System.out.printf(""Case #%d: "", c + 1);
            if (MN == 2) {
                for (int r = 1; r < participant[0]; r++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int i1 = 0; i1 < MN; i1++)
                        if (apple == -1 || participant[i1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = i1;
                        }
                        else if (cream == -1 || participant[i1] > participant[cream]) {
                            brence = cream;
                            cream = i1;
                        }
                        else if (brence == -1 || participant[i1] > participant[brence])
                            brence = i1;
                    int xi = participant[apple] - 1;
                    int w = participant[brence];
                    
                    if ((xi > w ? xi : w) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        planning.close();
    }

}",460,16,"sum:max,gold:apple,party:participant,silver:cream,bronze:brence,N:MN,x:xi,scanner:planning,y:w,j:r,i:c,",4930,10.148999798297900,Beam
1317,,,198,10,,2205,3.9717495242754600,0
1318,,,254,13,,655,1.1473926266034400,0
1319,,,525,23,,13561,23.460577070713000,0
1320,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream fits = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String div = r.readLine();
            int count = Integer.parseInt(div);
            for(int c = 0 ; c < count ; c++) {
                div = r.readLine();
                int w = Integer.parseInt(div);
                div = r.readLine();
                StringTokenizer c = new StringTokenizer(div,"" "");
                int [] art = new int[w];
                int seed = 0;
                while(c.hasMoreTokens()) {
                    art[seed++] = Integer.parseInt(c.nextToken());
                }
                int annYY = 0;
                int ANST = 0;
                int pop = 0;
                for(int k = 0 ; k < w-1 ; k++) {
                    pop = Math.max(pop,art[k]-art[k+1]);
                    if(art[k+1]<art[k]) {
                        annYY += art[k]-art[k+1];
                    }
                }
                for(int k = 0 ; k < w-1 ; k++) {
                    int x = Math.min(art[k],pop);
                    ANST += x;
                }
                fits.write(""Case #"".getBytes());
                fits.write(new Integer(c+1).toString().getBytes());
                fits.write("": "".getBytes());
                fits.write(new Integer(annYY).toString().getBytes());
                fits.write("" "".getBytes());
                fits.write(new Integer(ANST).toString().getBytes());
                fits.write(eolb);
            }
            fits.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"iter:seed,dip:pop,ansY:annYY,ar:art,ansZ:ANST,st:c,str:div,j:k,t:count,bos:fits,br:r,n:w,i:c,",6666,11.971760865052500,Beam
1321,,,393,19,,7049,12.40388810634610,0
1322,,,290,12,,617,1.1351104378700300,0
1323,,,328,16,,5302,9.73872184753418,0
1324,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.176285243034360,Beam
1325,,,278,15,,5137,8.563269193967180,0
1326,,,420,19,,7084,12.778219902515400,0
1327,,,348,14,,3517,6.703413665294650,0
1328,,,367,20,,935,1.7220244844754500,0
1329,,,132,9,,1704,2.2851859092712400,0
1330,,,311,17,,6739,12.479404064019500,0
1331,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.5266846537590030,Beam
1332,,,379,17,,2244,4.033549427986150,0
1333,,,280,13,,3132,5.724896558125810,0
1334,,,605,21,,9824,16.682633010546400,0
1335,,,423,7,,676,1.459493350982670,0
1336,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int caseSum = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < caseSum; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int init = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < init) {
                    total0 += init - current;
                    maxMin = Math.max(maxMin, init - current);
                }
                init = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"pw:jpow,prev:init,testCount:caseSum,",1408,2.511569078763330,Beam
1337,,,553,21,,5765,11.019206408659600,0
1338,,,267,13,,4005,6.698628024260200,0
1339,,,479,25,,8216,15.514688563346900,0
1340,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,sw,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            sw = sc.nextInt();
            irez = c/sw;
            irez *=r;
            irez +=sw-1;
            if(c%sw > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,w:sw,",466,0.6277802069981890,Beam
1341,,,262,14,,993,1.8102903405825300,0
1342,,,328,16,,3256,6.244348414738970,0
1343,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5888008912404380,Beam
1344,,,406,16,,1272,2.6361747940381400,0
1345,,,292,17,,6868,12.165136166413600,0
1346,,,321,13,,4093,7.525015155474350,0
1347,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int Rs = A.in.nextInt();
            int C = A.in.nextInt();
            int B = A.in.nextInt();
            if (Rs == 1) {
                int result = (C-B)/B + B + (C%B>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:B,R:Rs,",518,0.8808238625526430,Beam
1348,"class a1 {

    private static final String[] PL = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader input = null;
        BufferedWriter output = null;
        Date d1 = new Date();
        try {
            input = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            output = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String line1 = null;
            String line2 = null;
            int expectedCases = 0;
            int actualCase = -1;
            line1=input.readLine();
            expectedCases = Integer.parseInt(line1);
            for (actualCase = 1; actualCase<=expectedCases; actualCase++) {
                line1=input.readLine();
                line2=input.readLine();
                Scanner sc = new Scanner(line1);
                        int partynum = sc.nextInt();
                        Scanner sc1 = new Scanner(line2);
                        int[] parties1 = new int[partynum];
                        for (int i2 = 0; i2< partynum; i2++ ) {
                            parties1[i2] = sc1.nextInt();
                        }
                        int[] parties = parties1;
                        int result2 = 0;
                        for(int i1 : parties) {
                            result2 +=i1;
                        }
                        int totalcount = result2;
                        StringBuffer sb = new StringBuffer(2*partynum);
                        while (totalcount > 0) {
                            int[] result1 = new int[2];
                            int[] maxvalues = new int[2];
                            result1[0] = -1;
                            result1[1] = -1;
                            maxvalues[0] = -1;
                            maxvalues[1] = -1;
                            for (int i = 0; i<parties.length; i++){
                                if (parties[i]> maxvalues[0]) {
                                    result1[1] = result1[0];
                                    maxvalues[1] = maxvalues[0];
                                    result1[0] = i;
                                    maxvalues[0] = parties[i];
                                } else {
                                    if (parties[i] > maxvalues[1]) {
                                        result1[1] =i;
                                        maxvalues[1] = parties[i];
                                    }
                                }
                            }
                            int[] x = result1;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((totalcount ==3) || ((x[1] == -1) && (parties[x[0]] == 1)) ) {
                                sb.append(PL[x[0]]);
                                parties[x[0]]--;
                                totalcount --;
                            } else {
                                if ((x[1] == -1) || (parties[x[0]] - parties[x[1]] > 1)) {
                                    sb.append(PL[x[0]]);                    
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]-=2;
                                    totalcount-=2;
                                } else {
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]--;
                                    sb.append(PL[x[1]]);
                                    parties[x[1]]--;
                                    totalcount-=2;
                                }
                            }
                            sb.append("" "");
                        }
                String result = sb.toString().trim();
                output.write(""Case #"" + actualCase +"": "" + result + ""\n"");                
                System.out.println(""Case #"" + actualCase +"": "" + result );                
            }
            input.close();
            output.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}","class a1 {

    private static final String[] PP = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader feed = null;
        BufferedWriter w = null;
        Date d1 = new Date();
        try {
            feed = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            w = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String lineOne = null;
            String rowB = null;
            int expectedCodes = 0;
            int actuallyChild = -1;
            lineOne=feed.readLine();
            expectedCodes = Integer.parseInt(lineOne);
            for (actuallyChild = 1; actuallyChild<=expectedCodes; actuallyChild++) {
                lineOne=feed.readLine();
                rowB=feed.readLine();
                Scanner soc = new Scanner(lineOne);
                        int size = soc.nextInt();
                        Scanner sc1 = new Scanner(rowB);
                        int[] partials1 = new int[size];
                        for (int itwo = 0; itwo< size; itwo++ ) {
                            partials1[itwo] = sc1.nextInt();
                        }
                        int[] pages = partials1;
                        int resultCount = 0;
                        for(int IFirst : pages) {
                            resultCount +=IFirst;
                        }
                        int foundcount = resultCount;
                        StringBuffer nb = new StringBuffer(2*size);
                        while (foundcount > 0) {
                            int[] Result4 = new int[2];
                            int[] allvalues = new int[2];
                            Result4[0] = -1;
                            Result4[1] = -1;
                            allvalues[0] = -1;
                            allvalues[1] = -1;
                            for (int i = 0; i<pages.length; i++){
                                if (pages[i]> allvalues[0]) {
                                    Result4[1] = Result4[0];
                                    allvalues[1] = allvalues[0];
                                    Result4[0] = i;
                                    allvalues[0] = pages[i];
                                } else {
                                    if (pages[i] > allvalues[1]) {
                                        Result4[1] =i;
                                        allvalues[1] = pages[i];
                                    }
                                }
                            }
                            int[] x = Result4;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((foundcount ==3) || ((x[1] == -1) && (pages[x[0]] == 1)) ) {
                                nb.append(PP[x[0]]);
                                pages[x[0]]--;
                                foundcount --;
                            } else {
                                if ((x[1] == -1) || (pages[x[0]] - pages[x[1]] > 1)) {
                                    nb.append(PP[x[0]]);                    
                                    nb.append(PP[x[0]]);
                                    pages[x[0]]-=2;
                                    foundcount-=2;
                                } else {
                                    nb.append(PP[x[0]]);
                                    pages[x[0]]--;
                                    nb.append(PP[x[1]]);
                                    pages[x[1]]--;
                                    foundcount-=2;
                                }
                            }
                            nb.append("" "");
                        }
                String result = nb.toString().trim();
                w.write(""Case #"" + actuallyChild +"": "" + result + ""
"");                
                System.out.println(""Case #"" + actuallyChild +"": "" + result );                
            }
            feed.close();
            w.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}",735,24,"parties1:partials1,parties:pages,partynum:size,result2:resultCount,i2:itwo,line2:rowB,actualCase:actuallyChild,PL:PP,maxvalues:allvalues,result1:Result4,totalcount:foundcount,sb:nb,sc:soc,input:feed,line1:lineOne,output:w,i1:IFirst,expectedCases:expectedCodes,",11087,18.98178333044050,Beam
1349,,,443,17,,1901,3.5948204437891600,0
1350,,,255,13,,1489,3.522239943345390,0
1351,,,544,17,,5640,11.261519622802700,0
1352,,,250,11,,2791,4.828586916128800,0
1353,,,305,15,,799,1.5264389038085900,0
1354,,,655,16,,2086,4.591667787233990,0
1355,,,281,14,,745,1.34730357726415,0
1356,,,317,12,,3385,6.424753510952000,0
1357,,,426,18,,3961,8.14196782509486,0
1358,"class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long C = Long.parseLong(parts[1]);
                long W = Long.parseLong(parts[2]);
                long result = (C-1)/W+W;
                bw.write(""Case #"" + (i+1) + "": "" + result + ""\n"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}","class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long C = Long.parseLong(parts[1]);
                long M = Long.parseLong(parts[2]);
                long grade = (C-1)/M+M;
                bw.write(""Case #"" + (i+1) + "": "" + grade + ""
"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}",222,16,"W:M,result:grade,",466,0.8326986352602640,Beam
1359,,,257,11,,1272,2.3911790370941200,0
1360,,,349,19,,1997,3.569032597541810,0
1361,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String rap = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) rap += ""
"";
      rap += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(rap);
  }
}",187,12,"res:rap,",156,0.228899089495341,Beam
1362,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner innv=new Scanner(System.in);
    int t=innv.nextInt();
    for(int i=0;i<t;i++){
        int c=innv.nextInt();
        int[] br=new int[c];
        for(int j=0;j<c;j++){
            br[j]=innv.nextInt();
        }
        int parse2=0;
        int miss32=0;
        for(int key=0;key<c-1;key++){
            
            int y=(br[key]-br[key+1]>0)? br[key]-br[key+1]:0;
            parse2+=y;
        
        }
        int w=0;
        for(int r=0;r<c-1;r++){
            w=Math.max(w,br[r]-br[r+1]);
        }
        for(int d=0;d<c-1;d++){
            int x=(br[d]<=w)?br[d]:w;
            miss32+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+parse2+"" ""+miss32);
    }
}
}",272,16,"sum1:parse2,sum2:miss32,h:r,k:key,arr:br,inp:innv,v:w,n:c,",4407,6.633039267857870,Beam
1363,,,344,15,,4375,7.5448776642481500,0
1364,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.231536626815800,Beam
1365,,,184,9,,1706,3.0182985226313300,0
1366,,,426,18,,3961,8.099602170785270,0
1367,,,292,15,,3704,6.974644525845850,0
1368,,,291,13,,3814,6.662878076235450,0
1369,,,269,13,,4394,8.247678244113920,0
1370,,,426,18,,3529,6.723012145360310,0
1371,,,305,15,,5228,9.112945838769280,0
1372,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int trials = scan.nextInt();

        for (int i = 0; i < trials; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int u = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (u / time) + (u - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"w:time,ans:ants,c:u,cases:trials,",1086,1.5383576591809600,Beam
1373,,,358,16,,838,1.6000364581743900,0
1374,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner s = new Scanner (System.in);
    static PrintStream writer = System.writer;

    public static void main(String[] args) {
        long U = Long.valueOf(s.next());

        for (long k = 1; k <= U; ++k) {
            System.writer.print(""Case #"" + k + "": "");
            long RS = s.nextLong(), RW = s.nextLong(), P = s.nextLong();
            
            long ions = (RS - 1) * RW;
            
            if (RW % P == 0) {
                writer.println (ions + RW/P - 1 + P);
            } else {
                writer.println (ions + RW/P + P);
            }
        }

    }
}",156,10,"C:RW,W:P,R:RS,scanner:s,ans:ions,out:writer,T:U,i:k,",1990,2.8456615845362300,Beam
1375,,,292,16,,4155,7.616728357474010,0
1376,,,291,12,,621,1.1624685327212000,0
1377,,,241,15,,3231,5.844887200991310,0
1378,,,262,14,,652,1.1994375864664700,0
1379,,,358,18,,915,1.6630433956782000,0
1380,,,330,14,,4707,8.976309494177500,0
1381,,,292,17,,6868,11.848044661680900,0
1382,,,269,16,,5848,10.219992911815600,0
1383,,,199,10,,993,1.4507576862971000,0
1384,,,527,25,,10711,18.07363979816440,0
1385,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",993,1.836859126885730,Beam
1386,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int c = 0; c < Integer.parseInt(count); c++) {
                times.clear();
                for (int i91 = 0; i91 < 2501 ;i91++) {
                    Integer r = new Integer(0);
                    times.add(i91, r);
                }
                Integer w = Integer.parseInt(bf.readLine());
                for (int itwo = 1; itwo < 2*w; itwo++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i91 = 0; i91 < nums.length; i91++) {
                        Integer temp = Integer.parseInt(nums[i91]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i91 = 0; i91 < 2501; i91 ++) {
                    if (times.get(i91) % 2 != 0) {
                        buffers += i91.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (c + 1) + "": "" + buffers + ""
"");

        }
        bf.close();
        fw.close();
    }
}",305,15,"n:w,a:r,i:c,i1:i91,i2:itwo,",2728,5.353325355052950,Beam
1387,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,1.9116264184316000,Beam
1388,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long gain = 0;
                while( flippingWhatever != 0 )
                {
                    gain = gain * 10;
                    gain = gain + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = gain;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:gain,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",2021,3.783115573724110,Beam
1389,,,255,13,,931,2.1892340143521600,0
1390,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.276014498869580,Beam
1391,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int TATCH=1;TATCH<=T;TATCH++){
            int N = sc.nextInt(), N = sc.nextInt(), WF = sc.nextInt();
            int w = 0, res = 0;
            res += N*(N/WF);
            if (N%WF==0)res+=WF-1;
            else res+=WF;
            System.out.println(""Case #""+TATCH+"": ""+res);
        }
    }
}",309,11,"R:N,C:N,W:WF,CASE:TATCH,",962,1.7330411394437200,Beam
1392,,,171,10,,2202,3.4443945487340300,0
1393,,,269,16,,5830,9.74907733599345,0
1394,,,468,20,,2569,4.913654907544450,0
1395,,,290,12,,617,1.1526094118754100,0
1396,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner canNER = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(canNER.next());

        for (long ii = 1; ii <= T; ++ii) {
            System.out.print(""Case #"" + ii + "": "");
            long R = canNER.nextLong(), N = canNER.nextLong(), A = canNER.nextLong();
            
            long ants = (R - 1) * N;
            
            if (N % A == 0) {
                out.println (ants + N/A - 1 + A);
            } else {
                out.println (ants + N/A + A);
            }
        }

    }
}",156,10,"C:N,ans:ants,W:A,scanner:canNER,i:ii,",1382,1.983896589279180,Beam
1397,,,263,13,,683,1.2350518703460700,0
1398,,,260,11,,2512,4.876233625411990,0
1399,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader cr = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter besw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = cr.readLine()) != null) {
            letters.add(line);
        }

        int numberSum = Integer.parseInt(letters.get(0));
        int reportedLoop = 1;
        for (int index = 0; index < numberSum; index++) {
            String line1 = letters.get(reportedLoop++);
            String cellTwo = letters.get(reportedLoop++);
            String[] array = cellTwo.split("" "");
            int[] lan = new int[array.length];
            for (int i94 = 0; i94 < array.length; i94++) {
                lan[i94] = Integer.valueOf(array[i94]);
            }
            int[] boss = lan;
            long[] lockOne = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int li27 = 0; li27 < boss.length - 1; li27++) {
                        if (boss[li27+1] < boss[li27]) {
                            lockOne[0] += boss[li27] - boss[li27+1];
                        }
                    }
                    
                    int rest = 0;
                    for (int li26 = 0; li26 < boss.length - 1; li26++) {
                        if (boss[li26+1] < boss[li26]) {
                            rest = Math.max(rest, boss[li26] - boss[li26+1]);
                        }
                    }
                    
                    for (int xiOne = 0; xiOne < boss.length - 1; xiOne++) {
                        lockOne[1] += Math.count(boss[xiOne], rest);
                    }
            long[] count = lockOne;
            String r = ""Case #"" + (index + 1) + "": "" + count[0] + "" "" + count[1];

//            System.out.println(r);
            besw.write(r);
            besw.newLine();
        }

        if (besw != null)
            besw.close();

        if (cr != null)
            cr.close();
    }
}",479,25,"mush:boss,rate:rest,min1:lockOne,min:count,currentIndex:reportedLoop,lines:letters,i2:li27,i3:li26,i4:i94,vals:array,problemCount:numberSum,line2:cellTwo,ans:lan,i:index,i1:xiOne,bw:besw,br:cr,",7315,14.075889305273700,Beam
1400,,,265,12,,3393,5.92769273519516,0
1401,,,305,15,,5220,9.51089341243108,0
1402,,,224,11,,807,1.5715946316719100,0
1403,,,291,12,,621,1.1481911698977200,0
1404,,,290,12,,617,1.1512529333432500,0
1405,,,363,16,,869,1.60762011607488,0
1406,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0808244069417300,Beam
1407,,,250,11,,559,1.0071567058563200,0
1408,,,553,21,,5169,9.766147744655610,0
1409,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[n]);
    }
  }

  private static int[] grade;
  private static final int UNSEEN=-1;
}",302,15,"distance:grade,",63,0.1165112853050230,Beam
1410,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.06408740679423,Beam
1411,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.40329713026682500,Beam
1412,,,426,18,,3961,7.918318792184190,0
1413,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int numberSum = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int i = 0; i < numberSum; i++) {
            String line1 = letters.get(currentIndex++);
            String cellTwo = letters.get(currentIndex++);
            String[] array = cellTwo.split("" "");
            int[] ans = new int[array.length];
            for (int i94 = 0; i94 < array.length; i94++) {
                ans[i94] = Integer.valueOf(array[i94]);
            }
            int[] boss = ans;
            long[] lockOne = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int li27 = 0; li27 < boss.length - 1; li27++) {
                        if (boss[li27+1] < boss[li27]) {
                            lockOne[0] += boss[li27] - boss[li27+1];
                        }
                    }
                    
                    int size = 0;
                    for (int li26 = 0; li26 < boss.length - 1; li26++) {
                        if (boss[li26+1] < boss[li26]) {
                            size = Math.max(size, boss[li26] - boss[li26+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < boss.length - 1; i1++) {
                        lockOne[1] += Math.count(boss[i1], size);
                    }
            long[] count = lockOne;
            String r = ""Case #"" + (i + 1) + "": "" + count[0] + "" "" + count[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:boss,rate:size,min1:lockOne,min:count,lines:letters,i4:i94,vals:array,i2:li27,problemCount:numberSum,i3:li26,line2:cellTwo,",6274,12.160128358999900,Beam
1414,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.24579222202301000,Beam
1415,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String rev = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int ow = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=ow) {
           min++;
        }
      }

      if (i != 1) rev += ""
"";
      rev += ""Case #"" + i + "": "" + (min+ow-1);
    }
    System.out.println(rev);
  }
}",187,12,"w:ow,res:rev,",745,1.042249568303430,Beam
1416,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans = 0;
            int ansalt = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                if (size < w)
                    ans += (w - size);
            }
            
            //2
            int now = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                int c = w - size;
                if (c > now)
                    now = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < now)
                    ansalt += rows[j];
                else
                    ansalt += now;
            }
            
            pw.println(String.format(print, i, ans, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:now,s:size,prefix:print,ans2:ansalt,ans1:ans,f:w,",4308,7.6531436483065300,Beam
1417,,,418,13,,4341,10.5677286028862,0
1418,,,266,13,,3459,6.263491888840990,0
1419,,,321,18,,6922,11.650089863936100,0
1420,,,211,11,,559,0.9248855153719580,0
1421,,,655,16,,2046,4.582744117577870,0
1422,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,4.745455423990890,Beam
1423,,,330,14,,4617,8.602309652169550,0
1424,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter line = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int diff;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            diff = 0;
            for (int chi = 0; chi < w; chi++)
                diff += judges.get(chi);

            while (diff-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    diff--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > diff / 2)
                        System.line.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            line.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        line.close();
    }

}",464,17,"senators:judges,sum:diff,i:chi,index2:slice1,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:line,",5085,10.046461530526500,Beam
1425,,,367,20,,935,1.7367586056391400,0
1426,,,513,26,,16500,28.161885046958900,0
1427,,,375,12,,3404,6.717725082238520,0
1428,,,211,11,,2760,4.771453865369160,0
1429,,,273,11,,798,1.492561153570810,0
1430,,,169,10,,2109,3.0342328548431400,0
1431,,,211,11,,807,1.3391846100489300,0
1432,"class Solution {

    public static void main(String[] args) throws Exception {
        Solution r = new Solution();
        Scanner sc = new Scanner(new FileReader(""input.txt""));
        PrintWriter pw = new PrintWriter(new FileWriter(""output.txt""));
        
        int caseCnt = sc.nextInt();
        
        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
            pw.print(""Case #"" + (caseNum + 1) + "": "");
        
            int R = sc.nextInt();
            int C = sc.nextInt();
            int res = 0;
            String board[] = new String[R];
            sc.nextLine();
            for (int i = 0; i < R; i++) {
                board[i] = sc.nextLine();
            }
            int max = 101;
            int dirX[] = {-1, 1, 0, 0};
            int dirY[] = {0, 0, 1, -1};
            String dir = ""^v><"";
            boolean possible = true;
            for (int i = 0; i < R && possible; i++) {
                for (int j = 0; j < C && possible; j++) {
                    int curDir = dir.indexOf(board[i].charAt(j));
                    int curX = i;
                    int curY = j;
                    boolean reachEnd = false;
                    if (curDir >= 0) {
                        for (int k = 0; k < max; k++) {
                            curX = curX + dirX[curDir];
                            curY = curY + dirY[curDir];
                            if (curX < R && curX >= 0 && curY < C && curY >= 0) {
                                if (board[curX].charAt(curY) != '.')
                                    break;
                            } else {
                                reachEnd = true;
                                break;
                            }
                        }
                        if (reachEnd) {
                            possible = false;
                            for (int d = 0; d < 4 && !possible; d++) {
                                curX = i;
                                curY = j;
                                for (int k = 0; k < max; k++) {
                                    curX = curX + dirX[d];
                                    curY = curY + dirY[d];
                                    if (curX < R && curX >= 0 && curY < C && curY >= 0) {
                                        if (board[curX].charAt(curY) != '.') {
                                            possible = true;
                                            res++;
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!possible) {
                pw.println(""IMPOSSIBLE"");
            } else {
                pw.println(res);
            }
        }
        
        pw.flush();
        pw.close();
        sc.close();
    }
}","class Solution {

    public static void main(String[] args) throws Exception {
        Solution r = new Solution();
        Scanner sc = new Scanner(new FileReader(""input.txt""));
        PrintWriter p = new PrintWriter(new FileWriter(""output.txt""));
        
        int caseCnt = sc.nextInt();
        
        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
            p.print(""Case #"" + (caseNum + 1) + "": "");
        
            int W = sc.nextInt();
            int C = sc.nextInt();
            int res = 0;
            String board[] = new String[W];
            sc.nextLine();
            for (int i = 0; i < W; i++) {
                board[i] = sc.nextLine();
            }
            int max = 101;
            int dirX[] = {-1, 1, 0, 0};
            int dirY[] = {0, 0, 1, -1};
            String dir = ""^v><"";
            boolean possible = true;
            for (int i = 0; i < W && possible; i++) {
                for (int j = 0; j < C && possible; j++) {
                    int curDir = dir.indexOf(board[i].charAt(j));
                    int curX = i;
                    int curY = j;
                    boolean reachEnd = false;
                    if (curDir >= 0) {
                        for (int k = 0; k < max; k++) {
                            curX = curX + dirX[curDir];
                            curY = curY + dirY[curDir];
                            if (curX < W && curX >= 0 && curY < C && curY >= 0) {
                                if (board[curX].charAt(curY) != '.')
                                    break;
                            } else {
                                reachEnd = true;
                                break;
                            }
                        }
                        if (reachEnd) {
                            possible = false;
                            for (int d = 0; d < 4 && !possible; d++) {
                                curX = i;
                                curY = j;
                                for (int k = 0; k < max; k++) {
                                    curX = curX + dirX[d];
                                    curY = curY + dirY[d];
                                    if (curX < W && curX >= 0 && curY < C && curY >= 0) {
                                        if (board[curX].charAt(curY) != '.') {
                                            possible = true;
                                            res++;
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!possible) {
                p.println(""IMPOSSIBLE"");
            } else {
                p.println(res);
            }
        }
        
        p.flush();
        p.close();
        sc.close();
    }
}",525,23,"R:W,pw:p,",678,1.2496495087941500,Beam
1433,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5912156939506530,Beam
1434,,,302,15,,2636,4.455832795302070,0
1435,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.5288553436597190,Beam
1436,,,479,25,,1156,2.2856566031773900,0
1437,,,393,19,,1462,2.5992055614789300,0
1438,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6820985039075220,Beam
1439,,,334,12,,3357,6.804252131779990,0
1440,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A rc = new A();
        if(!rc.DEBUG){
            try {
                if(rc.isSmall)System.setIn(new FileInputStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-large.in"")));
                if(rc.isSmall)System.setOut(new PrintStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException fe) {
                fe.printStackTrace();
            }
        }
        Scanner app = new Scanner(System.in);
        int N = app.nextInt();
        for(int CEase=1;CEase<=N;CEase++){
            int M = app.nextInt(), N = app.nextInt(), N = app.nextInt();
            int w = 0, Rs = 0;
            Rs += M*(N/N);
            if (N%N==0)Rs+=N-1;
            else Rs+=N;
            System.out.println(""Case #""+CEase+"": ""+Rs);
        }
    }
}",309,11,"W:N,R:M,C:N,sc:app,res:Rs,CASE:CEase,T:N,r:rc,e:fe,",1737,3.0751267313957200,Beam
1441,,,291,13,,3318,5.835937623182930,0
1442,,,262,14,,3504,6.7472049474716200,0
1443,,,655,16,,2371,6.055932128429410,0
1444,,,269,13,,4394,8.461172827084860,0
1445,,,317,12,,3414,6.534984727700550,0
1446,,,358,18,,1351,2.4237589120864900,0
1447,,,278,15,,5521,9.53822359641393,0
1448,,,358,18,,915,1.624582576751710,0
1449,,,366,17,,6077,10.663256140550000,0
1450,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.9439785639444990,Beam
1451,,,426,18,,3560,7.297939586639400,0
1452,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.9758272091547650,Beam
1453,,,306,13,,2946,5.889409804344180,0
1454,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.9573392232259120,Beam
1455,,,500,19,,8364,15.501464267571800,0
1456,,,321,18,,2242,4.052510058879850,0
1457,,,417,18,,3845,7.563506893316900,0
1458,,,199,10,,1117,1.6260051369667100,0
1459,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.9255176583925880,Beam
1460,,,187,13,,2124,2.7908129493395500,0
1461,,,328,16,,1241,2.3327738563219700,0
1462,,,211,11,,559,0.9357109705607100,0
1463,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.2493490735689800,Beam
1464,,,149,10,,2109,2.8135388414065000,0
1465,,,290,12,,3602,6.692599054177600,0
1466,,,330,16,,5581,10.945313986142500,0
1467,,,295,15,,3099,5.961745798587800,0
1468,"class Solution {

    public static void main(String[] args) throws Exception {
        Solution r = new Solution();
        Scanner sc = new Scanner(new FileReader(""input.txt""));
        PrintWriter pw = new PrintWriter(new FileWriter(""output.txt""));
        
        int caseCnt = sc.nextInt();
        
        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
            pw.print(""Case #"" + (caseNum + 1) + "": "");
        
            int R = sc.nextInt();
            int C = sc.nextInt();
            int res = 0;
            String board[] = new String[R];
            sc.nextLine();
            for (int i = 0; i < R; i++) {
                board[i] = sc.nextLine();
            }
            int max = 101;
            int dirX[] = {-1, 1, 0, 0};
            int dirY[] = {0, 0, 1, -1};
            String dir = ""^v><"";
            boolean possible = true;
            for (int i = 0; i < R && possible; i++) {
                for (int j = 0; j < C && possible; j++) {
                    int curDir = dir.indexOf(board[i].charAt(j));
                    int curX = i;
                    int curY = j;
                    boolean reachEnd = false;
                    if (curDir >= 0) {
                        for (int k = 0; k < max; k++) {
                            curX = curX + dirX[curDir];
                            curY = curY + dirY[curDir];
                            if (curX < R && curX >= 0 && curY < C && curY >= 0) {
                                if (board[curX].charAt(curY) != '.')
                                    break;
                            } else {
                                reachEnd = true;
                                break;
                            }
                        }
                        if (reachEnd) {
                            possible = false;
                            for (int d = 0; d < 4 && !possible; d++) {
                                curX = i;
                                curY = j;
                                for (int k = 0; k < max; k++) {
                                    curX = curX + dirX[d];
                                    curY = curY + dirY[d];
                                    if (curX < R && curX >= 0 && curY < C && curY >= 0) {
                                        if (board[curX].charAt(curY) != '.') {
                                            possible = true;
                                            res++;
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!possible) {
                pw.println(""IMPOSSIBLE"");
            } else {
                pw.println(res);
            }
        }
        
        pw.flush();
        pw.close();
        sc.close();
    }
}","class Solution {

    public static void main(String[] args) throws Exception {
        Solution r = new Solution();
        Scanner sc = new Scanner(new FileReader(""input.txt""));
        PrintWriter pw = new PrintWriter(new FileWriter(""output.txt""));
        
        int caseCnt = sc.nextInt();
        
        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
            pw.print(""Case #"" + (caseNum + 1) + "": "");
        
            int W = sc.nextInt();
            int C = sc.nextInt();
            int res = 0;
            String board[] = new String[W];
            sc.nextLine();
            for (int i = 0; i < W; i++) {
                board[i] = sc.nextLine();
            }
            int max = 101;
            int dirX[] = {-1, 1, 0, 0};
            int dirY[] = {0, 0, 1, -1};
            String dir = ""^v><"";
            boolean possible = true;
            for (int i = 0; i < W && possible; i++) {
                for (int j = 0; j < C && possible; j++) {
                    int curDir = dir.indexOf(board[i].charAt(j));
                    int curX = i;
                    int curY = j;
                    boolean reachEnd = false;
                    if (curDir >= 0) {
                        for (int k = 0; k < max; k++) {
                            curX = curX + dirX[curDir];
                            curY = curY + dirY[curDir];
                            if (curX < W && curX >= 0 && curY < C && curY >= 0) {
                                if (board[curX].charAt(curY) != '.')
                                    break;
                            } else {
                                reachEnd = true;
                                break;
                            }
                        }
                        if (reachEnd) {
                            possible = false;
                            for (int d = 0; d < 4 && !possible; d++) {
                                curX = i;
                                curY = j;
                                for (int k = 0; k < max; k++) {
                                    curX = curX + dirX[d];
                                    curY = curY + dirY[d];
                                    if (curX < W && curX >= 0 && curY < C && curY >= 0) {
                                        if (board[curX].charAt(curY) != '.') {
                                            possible = true;
                                            res++;
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!possible) {
                pw.println(""IMPOSSIBLE"");
            } else {
                pw.println(res);
            }
        }
        
        pw.flush();
        pw.close();
        sc.close();
    }
}",525,23,"R:W,",217,0.42471261421839400,Beam
1469,,,330,16,,5891,12.32619477113090,0
1470,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,m,w,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            m =sc.nextInt();
            w = sc.nextInt();
            irez = m/w;
            irez *=r;
            irez +=w-1;
            if(m%w > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,c:m,",280,0.39782888094584100,Beam
1471,,,258,14,,4558,8.472146642208100,0
1472,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String filePath = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanin = new Scanner(new File(filePath));
        
        int R = scanin.nextInt();
        for (int c = 0; c < R; c++)
        {
            int W = scanin.nextInt();
            int[] lin = new int[W];
            for (int c = 0; c < W; c++)
            {
                lin[c] = scanin.nextInt();
            }
            long log = 0;
            int stop = 0;        
            for (int i31 = 0; i31 < lin.length; i31++)
            {
                if (lin[i31] > stop)
                {
                    stop = lin[i31];
                }
                else
                {
                    log += (stop - lin[i31]);
                    stop = lin[i31];
                }
            }
            
            long count = log;
            // max difference is at least 1 rate
            int axDelta = 0;
            long outRh = 0;
            for (int ini22 = 0; ini22 < lin.length - 1; ini22++)
            {
                if ( (lin[ini22] - lin[ini22+1] > axDelta))
                {
                    axDelta = (lin[ini22] - lin[ini22+1]);
                }
            }
            
            long weight = axDelta;
            for (int i31 = 0; i31 < lin.length - 1; i31 ++)
            {
                outRh += Math.min(weight, lin[i31]);
            }
            long w = outRh;
            
            System.log.println(""Case #"" + (c+1) + "": "" + count + "" "" + w);
        }
        
        scanin.close();
    }

}",321,18,"N:W,j:c,i2:ini22,T:R,i:c,rate:weight,scanner:scanin,in:lin,maxDiff:axDelta,i1:i31,y:count,out:log,out1:outRh,z:w,start:stop,fileName:filePath,",6906,12.933664659659100,Beam
1473,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,m,w,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            m =sc.nextInt();
            w = sc.nextInt();
            irez = m/w;
            irez *=r;
            irez +=w-1;
            if(m%w > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,c:m,",280,0.38991207679112800,Beam
1474,,,887,27,,6546,14.102001476287800,0
1475,,,295,15,,1064,2.006266709168750,0
1476,,,265,12,,617,1.056607973575590,0
1477,,,132,9,,1706,2.1982698758443200,0
1478,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] cmush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            cmush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = cmush[iu22] - cmush[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = cmush[i3] - cmush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, cmush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] cmush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            cmush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = cmush[iu22] - cmush[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = cmush[i3] - cmush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, cmush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] cmush = new int[n];
                    for (int i = 0; i < n; i++) {
                        cmush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int stuff = cmush[i] - cmush[i + 1];
                        if (stuff > 0) {
                            first += stuff;
                        }
                    }
                    
                    int[] stuff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        stuff[i] = cmush[i] - cmush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, stuff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, cmush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] cmush = new int[n];
                for (int i = 0; i < n; i++) {
                    cmush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int stuff = cmush[i] - cmush[i + 1];
                    if (stuff > 0) {
                        first += stuff;
                    }
                }
                
                int[] stuff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    stuff[i] = cmush[i] - cmush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, stuff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, cmush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:cmush,i4:iu22,diff:stuff,",1044,2.531087330977120,Beam
1479,,,265,12,,617,1.081414286295570,0
1480,,,326,14,,4341,8.006333080927530,0
1481,,,334,15,,1179,2.4002702593803400,0
1482,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int caseSum = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < caseSum; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int init = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < init) {
                    total0 += init - current;
                    maxMin = Math.max(maxMin, init - current);
                }
                init = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"pw:jpow,prev:init,testCount:caseSum,",1408,2.4280645728111300,Beam
1483,,,211,11,,2791,4.468770448366800,0
1484,,,363,16,,3225,5.7638652443885800,0
1485,,,544,17,,4081,8.682142134507500,0
1486,,,358,18,,915,1.6465234359105400,0
1487,,,479,25,,8232,15.210894433657300,0
1488,,,250,11,,2791,4.9380484898885100,0
1489,"static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int parties=Integer.parseInt(in.readLine());
            String[] Members=in.readLine().split("" "");
            int total=0;
            for(int j=0;j<parties;j++){
                total+=Integer.parseInt(Members[j]);
                    }
            while(total!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ans="""";
                for(int j=0;j<parties;j++){
                        if(first<Integer.parseInt(Members[j])){
                            second=first;
                            first=Integer.parseInt(Members[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Members[j])){
                                    second=Integer.parseInt(Members[j]);
                                    num2=j;
                                }
                            }
                    }
                ans=""""+(char)(65+num1);
                Members[num1]=Integer.toString(Integer.parseInt(Members[num1])-1);
                total-=1;
                String ans2="""";
                for(int j=0;j<parties;j++){
                    double p=total;
                    if(Double.parseDouble(Members[j])/p>0.5){
                        ans+=(char)(65+j);
                        Members[j]=Integer.toString(Integer.parseInt(Members[j])-1);
                        total-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}","static void main(String[] args) throws IOException
    {
        BufferedReader out = new BufferedReader(new InputStreamReader(System.out));
        int T = Integer.parseInt(out.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int partials=Integer.parseInt(out.readLine());
            String[] Players=out.readLine().split("" "");
            int no=0;
            for(int j=0;j<partials;j++){
                no+=Integer.parseInt(Players[j]);
                    }
            while(no!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ants="""";
                for(int j=0;j<partials;j++){
                        if(first<Integer.parseInt(Players[j])){
                            second=first;
                            first=Integer.parseInt(Players[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Players[j])){
                                    second=Integer.parseInt(Players[j]);
                                    num2=j;
                                }
                            }
                    }
                ants=""""+(char)(65+num1);
                Players[num1]=Integer.toString(Integer.parseInt(Players[num1])-1);
                no-=1;
                String ans2="""";
                for(int j=0;j<partials;j++){
                    double p=no;
                    if(Double.parseDouble(Players[j])/p>0.5){
                        ants+=(char)(65+j);
                        Players[j]=Integer.toString(Integer.parseInt(Players[j])-1);
                        no-=1;
                        break;
                    }
                }
            System.out.print(ants+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}",405,15,"parties:partials,Members:Players,total:no,ans:ants,in:out,",2481,4.948053081830340,Beam
1490,,,367,20,,935,1.7204843004544600,0
1491,,,443,17,,1602,3.175741390387220,0
1492,,,273,11,,553,1.004496200879420,0
1493,,,311,17,,6708,12.005055260658300,0
1494,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Len = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Len[j] = sc.nextInt();
                    sum += Len[j];
                    Len[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Len[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Len[j] > 0) {
                                answer.append(parties[0]);
                                Len[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,Pi:Len,",342,0.7290979385375980,Beam
1495,,,393,19,,5366,9.529711679617570,0
1496,,,272,16,,4429,6.423621165752410,0
1497,,,553,21,,1373,2.5197894891103100,0
1498,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] smatch = new int[n];
                    for (int i = 0; i < n; i++) {
                        smatch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int comment = smatch[i] - smatch[i + 1];
                        if (comment > 0) {
                            first += comment;
                        }
                    }
                    
                    int[] comment = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        comment[i] = smatch[i] - smatch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, comment[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, smatch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] smatch = new int[n];
                for (int i = 0; i < n; i++) {
                    smatch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int comment = smatch[i] - smatch[i + 1];
                    if (comment > 0) {
                        first += comment;
                    }
                }
                
                int[] comment = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    comment[i] = smatch[i] - smatch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, comment[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, smatch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:smatch,diff:comment,i4:i22,",1182,2.5314207355181400,Beam
1499,,,443,17,,1901,3.0890523393948900,0
1500,,,254,13,,655,0.9557628671328230,0
1501,,,281,14,,4961,8.623127647240960,0
1502,,,426,18,,3560,7.293611303965250,0
1503,,,291,13,,3597,6.667214814821880,0
1504,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.575096333026886,Beam
1505,,,250,11,,559,0.9949524879455570,0
1506,,,406,16,,6077,11.770187644163800,0
1507,,,263,13,,683,1.2156165480613700,0
1508,,,366,17,,900,1.5531194686889600,0
1509,,,348,14,,3523,6.745132366816200,0
1510,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader worker = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(worker.readLine());
        for(int count=1;count<=testCases;count++){
            String result="""";
            worker.readLine();
            String char[] = worker.readLine().split("" "");
            
            int n = Integer.MIN_VALUE;
            int key = 0;
            int result0 = 0;
            for(int i = 0; i<char.length-1;i++){
                int idTwo=Integer.parseInt(char[i+1]);
                int e2 = Integer.parseInt(char[i]);
                if((idTwo-e2)<0) key+=-(idTwo-e2);
                if(-(idTwo-e2)>n) n = -(idTwo-e2);
            }
            for(int i = 0; i<char.length-1;i++){
                int e2 = Integer.parseInt(char[i]);
                if(e2>=n) result0 = result0+n;
                else if(e2<n) result0 = result0+e2;
            }
            writer.write(""Case #""+count+"": ""+key+"" ""+result0+""
"");
        }
        worker.close();
        writer.close();

    }

}",316,15,"max:n,i2:idTwo,index:count,result1:key,result2:result0,str:char,i1:e2,reader:worker,",3137,5.99051658709844,Beam
1511,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.3085945884386700,Beam
1512,,,295,15,,3409,6.092149726549780,0
1513,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.207342811425530,Beam
1514,,,358,18,,915,1.5907137910525000,0
1515,,,269,16,,845,1.48730411529541,0
1516,,,887,27,,6546,13.99606198867160,0
1517,,,544,17,,5425,10.949310052394900,0
1518,,,292,16,,4155,7.395784997940060,0
1519,"class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder output = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int numTests = Integer.parseInt(br.readLine());
                    int test;
                    String [] testSplit;
                    int [] mush;
                    
                    // Loop through each test
                    for (int testCounter = 0; testCounter < numTests; ++testCounter) {
                        test=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mush= new int[test];
                        for(int s=0;s<test;s++)
                        {
                            mush[s]=Integer.parseInt(testSplit[s]);
                        }
                        int out1=0,out2=0;
                        int currentDiff=0,maxDiff=0;
                        out1=0;
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s]<mush[s-1])
                            {
                                currentDiff=mush[s-1]-mush[s];
                                out1+=currentDiff;
                                maxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;
                                
                            }
                        }
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s-1]<maxDiff)
                            {
                                out2+=mush[s-1];
                                
                            }
                            else
                            {
                                out2+=maxDiff;
                            }
                        }
                        System.out.println(""Case #""+(testCounter+1)+"": ""+out1+"" ""+out2);
        //                System.out.println(""Done"");
                        output.append(""Case #"").append((testCounter+1)).append("": "").append(out1+"" ""+out2);
                        output.append(""\n"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( output.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}","class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File input = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader ab = null;
                StringBuilder letter = new StringBuilder();
                try {
                     // String buffer for storing the output
                    ab = new BufferedReader(new FileReader(input));
                    int NumFables = Integer.parseInt(ab.readLine());
                    int train;
                    String [] casePart;
                    int [] lush;
                    
                    // Loop through each test
                    for (int matchCount = 0; matchCount < NumFables; ++matchCount) {
                        train=Integer.parseInt(ab.readLine());
                        
                        casePart=(ab.readLine()).split("" "");
                        lush= new int[train];
                        for(int n=0;n<train;n++)
                        {
                            lush[n]=Integer.parseInt(casePart[n]);
                        }
                        int intPart=0,in3=0;
                        int currentLength=0,out=0;
                        intPart=0;
                        for(int n=train-1;n>0;n--)
                        {
                            if(lush[n]<lush[n-1])
                            {
                                currentLength=lush[n-1]-lush[n];
                                intPart+=currentLength;
                                out=(out<currentLength)?currentLength:out;
                                
                            }
                        }
                        for(int n=train-1;n>0;n--)
                        {
                            if(lush[n-1]<out)
                            {
                                in3+=lush[n-1];
                                
                            }
                            else
                            {
                                in3+=out;
                            }
                        }
                        System.out.println(""Case #""+(matchCount+1)+"": ""+intPart+"" ""+in3);
        //                System.out.println(""Done"");
                        letter.append(""Case #"").append((matchCount+1)).append("": "").append(intPart+"" ""+in3);
                        letter.append(""
"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( letter.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}",443,17,"mush:lush,currentDiff:currentLength,maxDiff:out,s:n,test:train,testCounter:matchCount,output:letter,out1:intPart,numTests:NumFables,out2:in3,testSplit:casePart,br:ab,inputFile:input,",4516,8.576238512992860,Beam
1520,,,375,12,,619,1.1403966546058700,0
1521,,,325,14,,4797,8.650096992651620,0
1522,,,321,18,,6952,12.088233315944700,0
1523,,,379,17,,2244,3.954510200023650,0
1524,,,262,14,,652,1.1657147685686700,0
1525,,,408,17,,2004,3.9200767715772000,0
1526,,,291,15,,4045,7.138655606905620,0
1527,,,348,14,,3548,6.761053363482160,0
1528,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] cmush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            cmush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = cmush[iu22] - cmush[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = cmush[i3] - cmush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, cmush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] cmush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            cmush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = cmush[iu22] - cmush[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = cmush[i3] - cmush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, cmush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] cmush = new int[n];
                    for (int i = 0; i < n; i++) {
                        cmush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int stuff = cmush[i] - cmush[i + 1];
                        if (stuff > 0) {
                            first += stuff;
                        }
                    }
                    
                    int[] stuff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        stuff[i] = cmush[i] - cmush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, stuff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, cmush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] cmush = new int[n];
                for (int i = 0; i < n; i++) {
                    cmush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int stuff = cmush[i] - cmush[i + 1];
                    if (stuff > 0) {
                        first += stuff;
                    }
                }
                
                int[] stuff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    stuff[i] = cmush[i] - cmush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, stuff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, cmush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:cmush,i4:iu22,diff:stuff,",1044,2.4882129510243700,Beam
1529,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int caseii = 1; caseii <= t; caseii++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, diff);
                sum += diff;
            }

            int rev = 0;
            for (int i = 1; i < n; i++) {
                rev += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"ret:rev,max:w,casei:caseii,",892,1.4603575150171900,Beam
1530,,,291,15,,708,1.2059780359268200,0
1531,,,478,22,,11842,20.815154461065900,0
1532,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long gain = 0;
                while( flippingWhatever != 0 )
                {
                    gain = gain * 10;
                    gain = gain + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = gain;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:gain,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",2021,3.7172708829244000,Beam
1533,,,255,13,,2915,6.643834129969280,0
1534,,,348,14,,3777,7.0517722527186100,0
1535,,,393,19,,979,1.7031758268674200,0
1536,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",993,1.8157378355662000,Beam
1537,,,292,17,,2157,3.931562836964930,0
1538,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0963821490605700,Beam
1539,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",993,1.8313101967175800,Beam
1540,,,298,16,,1179,2.108205997943880,0
1541,,,366,17,,900,1.5390474637349400,0
1542,,,464,17,,5358,10.185845764478000,0
1543,,,468,20,,1610,3.0228148261706000,0
1544,,,311,17,,2189,3.8262658437093100,0
1545,,,479,25,,8300,15.69904420375820,0
1546,,,224,11,,807,1.569289211432140,0
1547,,,448,16,,3839,7.971820823351540,0
1548,,,256,13,,3405,6.483322755495710,0
1549,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.2857091307640100,Beam
1550,,,468,14,,3566,7.799074240525560,0
1551,,,363,16,,869,1.6099227348963400,0
1552,,,291,13,,3969,7.34952160914739,0
1553,,,169,10,,2202,3.182368191083270,0
1554,,,271,12,,3171,5.730432001749680,0
1555,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",637,1.0573464552561400,Beam
1556,,,262,14,,652,1.1848335941632600,0
1557,,,273,11,,798,1.4889189839363100,0
1558,,,355,19,,6618,11.225398910045600,0
1559,,,330,16,,5302,11.056660115718800,0
1560,,,292,17,,6209,11.181604309876800,0
1561,,,250,11,,3070,5.4345695575078300,0
1562,,,156,10,,2202,2.779946506023410,0
1563,,,290,12,,617,1.1504709521929400,0
1564,,,419,16,,5705,11.155649761358900,0
1565,,,255,13,,1458,3.434503444035850,0
1566,,,306,13,,931,1.852959688504540,0
1567,,,292,16,,4589,8.372639954090120,0
1568,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.4212720036506650,Beam
1569,,,169,10,,2419,3.4639984488487200,0
1570,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.8228719274202980,Beam
1571,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,1.0495608647664400,Beam
1572,,,271,12,,3171,5.731954081853230,0
1573,,,266,13,,4019,7.429995242754620,0
1574,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner laneChan = null;
        int width;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        width = s.nextInt();
        s.nextLine();
        for (int c = 0; c < width; c++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] lakeValues = new int[currentSize];
            line = s.nextLine();
            laneChan = new Scanner(line);
            int j = 0;
            while (laneChan.hasNextInt()) {
                lakeValues[j] = laneChan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastapestSize = 0;
            for (int w = 1; w < currentSize; w++) {
                if (lakeValues[w] < lakeValues[w - 1]) {
                    firstMethod += lakeValues[w - 1] - lakeValues[w];
                    fastapestSize = Math.max(fastapestSize, lakeValues[w - 1] - lakeValues[w]);
                }
            }
            int secondMethod = 0;
            for (int w = 0; w < currentSize - 1; w++) {
                if (lakeValues[w] > fastapestSize) {
                    secondMethod += fastapestSize;
                } else {
                    secondMethod += lakeValues[w];
                }
            }
            printer.print(""Case #"" + (c + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}",328,16,"fastestRate:fastapestSize,size:width,i:c,m:w,plateValues:lakeValues,lineScan:laneChan,",3132,5.943895316123960,Beam
1575,,,241,15,,3518,6.326312629381820,0
1576,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader worker = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(worker.readLine());
        for(int count=1;count<=testCases;count++){
            String result="""";
            worker.readLine();
            String char[] = worker.readLine().split("" "");
            
            int n = Integer.MIN_VALUE;
            int key = 0;
            int result0 = 0;
            for(int i = 0; i<char.length-1;i++){
                int idTwo=Integer.parseInt(char[i+1]);
                int e2 = Integer.parseInt(char[i]);
                if((idTwo-e2)<0) key+=-(idTwo-e2);
                if(-(idTwo-e2)>n) n = -(idTwo-e2);
            }
            for(int i = 0; i<char.length-1;i++){
                int e2 = Integer.parseInt(char[i]);
                if(e2>=n) result0 = result0+n;
                else if(e2<n) result0 = result0+e2;
            }
            writer.write(""Case #""+count+"": ""+key+"" ""+result0+""
"");
        }
        worker.close();
        writer.close();

    }

}",316,15,"max:n,i2:idTwo,index:count,result1:key,result2:result0,str:char,i1:e2,reader:worker,",3137,6.231310041745500,Beam
1577,,,448,16,,3864,8.15289443731308,0
1578,,,280,13,,3163,5.732231688499450,0
1579,,,368,14,,4837,9.06524445215861,0
1580,,,321,18,,6960,12.133457016944900,0
1581,,,387,15,,5240,10.135540711879700,0
1582,,,224,11,,3070,5.664112603664400,0
1583,,,655,16,,2186,4.6281013011932400,0
1584,,,513,26,,16087,28.405231507619200,0
1585,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long gain = 0;
                while( flippingWhatever != 0 )
                {
                    gain = gain * 10;
                    gain = gain + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = gain;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:gain,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",2021,3.7534732381502800,Beam
1586,,,618,26,,10734,19.370154027144100,0
1587,,,254,13,,655,1.156483562787370,0
1588,,,358,18,,915,1.6594125707944200,0
1589,,,311,17,,6712,12.241704189777400,0
1590,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,",2270,4.474483609199520,Beam
1591,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] trial = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < trial.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(trial[i1]));
                if(i1 == trial.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}",325,16,"test:trial,",218,0.4374645511309310,Beam
1592,,,605,21,,9867,17.21213239034020,0
1593,,,317,12,,3385,6.385505159695940,0
1594,,,417,19,,6898,12.755789987246200,0
1595,,,262,14,,3721,6.967268045743310,0
1596,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.18045368194580100,Beam
1597,,,292,16,,4155,7.556698608398440,0
1598,,,330,16,,6077,12.43031086921690,0
1599,,,280,13,,2791,4.886641629536950,0
1600,,,417,18,,3845,7.758938988049830,0
1601,,,187,13,,1987,2.601736052831010,0
1602,,,426,18,,3560,7.261982301870980,0
1603,,,406,16,,6077,11.898643891016600,0
1604,,,418,13,,4062,9.13924386103948,0
1605,,,366,17,,1334,2.1798916618029300,0
1606,,,263,13,,683,1.1550925175348900,0
1607,,,326,14,,1086,1.9118188619613600,0
1608,,,132,9,,1915,2.26233438650767,0
1609,,,132,9,,1529,1.83954758644104,0
1610,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.39874897003173800,Beam
1611,,,443,17,,2811,5.389038173357650,0
1612,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,0.7671404759089150,Beam
1613,,,266,13,,3950,7.035988656679790,0
1614,,,256,13,,3427,6.603506509462990,0
1615,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans = 0;
            int ansalt = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                if (size < w)
                    ans += (w - size);
            }
            
            //2
            int now = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                int c = w - size;
                if (c > now)
                    now = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < now)
                    ansalt += rows[j];
                else
                    ansalt += now;
            }
            
            pw.println(String.format(print, i, ans, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:now,s:size,prefix:print,ans2:ansalt,ans1:ans,f:w,",4308,7.5155202627182000,Beam
1616,,,292,16,,4155,7.347489062945050,0
1617,,,327,16,,1146,2.1207892735799200,0
1618,,,184,9,,1892,3.3072505831718400,0
1619,,,256,13,,608,1.1149682561556500,0
1620,,,308,12,,1210,2.55187908411026,0
1621,,,265,12,,3697,6.24631545941035,0
1622,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,",2270,4.448245716094970,Beam
1623,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.5260718981424970,Beam
1624,,,349,19,,862,1.5263886133829800,0
1625,,,334,15,,1954,4.120945715904240,0
1626,,,262,14,,1148,2.083806494871780,0
1627,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String c;
        try {
            c = r.readLine();
            int case_index = Integer.parseInt(c);
            for (int ctx = 0; ctx < case_index; ctx++) {
                c = r.readLine();
                int width = Integer.parseInt(c);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    c = r.readLine();
                    String[] width = c.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,s:c,case_num:case_index,",2594,5.054262014230090,Beam
1628,,,393,16,,5084,9.68836669921875,0
1629,,,171,10,,2419,3.849787485599520,0
1630,,,256,13,,4170,7.4073047757148700,0
1631,,,417,18,,3845,7.782158235708870,0
1632,,,468,14,,3566,7.746480361620590,0
1633,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.2039638082186400,Beam
1634,,,272,16,,5813,8.588387695948280,0
1635,,,527,25,,16214,31.19920748869580,0
1636,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.43484676281611100,Beam
1637,,,327,16,,744,1.4158114075660700,0
1638,,,316,15,,4212,8.011179264386500,0
1639,,,281,14,,1086,1.920276165008550,0
1640,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,1.0176571329434700,Beam
1641,,,358,18,,915,1.628896951675420,0
1642,,,292,16,,4155,6.874696791172030,0
1643,,,281,14,,4961,8.158043185869850,0
1644,"class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int rows = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiers = new TreeSet<Integer>();
      for (int i = 0; i < 2 * rows - 1 ; i++) {
        nextLine = reader.readLine();
        String[] row = nextLine.split("" "");
        for (String soldier : row) {
          int height = Integer.valueOf(soldier);
          if (soldiers.contains(height)) {
            soldiers.remove(height);
          } else {
            soldiers.add(height);
          }
        }
      }
      if (soldiers.size() != rows) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer soldier : soldiers) {
        writer.write("" "" + soldier);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}","class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader slice = new BufferedReader(new FileReader(filename));

    String nextFile;
    nextFile = slice.readLine(); // ignore count
    int caseNum = 1;
    while ((nextFile = slice.readLine()) != null) {
      int checks = Integer.valueOf(nextFile);

      TreeSet<Integer> soldries = new TreeSet<Integer>();
      for (int li = 0; li < 2 * checks - 1 ; li++) {
        nextFile = slice.readLine();
        String[] r = nextFile.split("" "");
        for (String oldica : r) {
          int width = Integer.valueOf(oldica);
          if (soldries.contains(width)) {
            soldries.remove(width);
          } else {
            soldries.add(width);
          }
        }
      }
      if (soldries.size() != checks) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer oldica : soldries) {
        writer.write("" "" + oldica);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}",295,15,"height:width,row:r,rows:checks,i:li,soldiers:soldries,soldier:oldica,reader:slice,nextLine:nextFile,",1954,3.9577407081921900,Beam
1645,,,273,11,,553,1.028660233815510,0
1646,,,324,13,,4248,8.004090404510500,0
1647,,,257,11,,807,1.5398978193601000,0
1648,,,266,13,,2781,5.158347078164420,0
1649,,,240,12,,3048,5.515177714824680,0
1650,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int c=0;c<t;c++){
        int n=inp.nextInt();
        int[] img=new int[n];
        for(int j=0;j<n;j++){
            img[j]=inp.nextInt();
        }
        int mean1=0;
        int miss32=0;
        for(int kick=0;kick<n-1;kick++){
            
            int y=(img[kick]-img[kick+1]>0)? img[kick]-img[kick+1]:0;
            mean1+=y;
        
        }
        int w=0;
        for(int r=0;r<n-1;r++){
            w=Math.max(w,img[r]-img[r+1]);
        }
        for(int c=0;c<n-1;c++){
            int x=(img[c]<=w)?img[c]:w;
            miss32+=x;
        }

        System.out.println(""Case #""+(c+1)+"": ""+mean1+"" ""+miss32);
    }
}
}",272,16,"arr:img,h:r,sum1:mean1,sum2:miss32,k:kick,d:c,v:w,i:c,",4263,6.297858254114790,Beam
1651,"class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int s[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        s[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int max = 0;
                        for (int ss: s)
                            max = Math.max(max, ss);
                        if (max == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (s[i] == max)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            s[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            s[c1]--;
                            s[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""\n"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int r = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int w[] = new int[r];
                    for (int i = 0; i < r; ++i)
                        w[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int std = 0;
                        for (int ss: w)
                            std = Math.std(std, ss);
                        if (std == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < r; ++i) {
                            if (w[i] == std)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            w[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            w[c1]--;
                            w[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""
"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",417,19,"max:std,s:w,n:r,",1705,3.191349478562670,Beam
1652,"class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int width = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / width;
                        int res = limit + width-1;
                        
                        int fin = res * row;
                        int left = cells % width;
                        //System.out.println(left);
                        if(left != 0 && width != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}","class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int age = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / age;
                        int ris = limit + age-1;
                        
                        int fin = ris * row;
                        int left = cells % age;
                        //System.out.println(left);
                        if(left != 0 && age != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}",236,16,"width:age,res:ris,",373,0.6602996230125430,Beam
1653,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.1978548804918900,Beam
1654,,,211,11,,559,0.9156300107638040,0
1655,,,525,23,,13589,24.249792313575700,0
1656,,,368,14,,4837,9.039735194047290,0
1657,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.944971517721812,Beam
1658,,,241,15,,3518,6.18923358519872,0
1659,,,367,20,,5493,10.095707726478600,0
1660,,,348,14,,3523,6.679515147209170,0
1661,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int TN = Integer.parseInt(line);
            for(int i=0;i<TN;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>size){
                            size=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=size){
                        b=b+size;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,T:TN,",497,1.0155321796735100,Beam
1662,,,272,16,,4162,6.161906055609390,0
1663,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long info0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int rev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < rev) {
                    info0 += rev - current;
                    maxMin = Math.max(maxMin, rev - current);
                }
                rev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + info0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"prev:rev,pw:jpow,total0:info0,",1468,2.5546907941500300,Beam
1664,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxidifer, c1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxidifer = 0;
            c1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxidifer = Math.max(cur - w[i], maxidifer);
                c1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxidifer / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + c1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"maxdif:maxidifer,rate:rank,m:w,s1:c1,",1427,2.588680855433150,Beam
1665,,,280,13,,3132,5.604842054843900,0
1666,,,215,12,,3521,5.9184848189353900,0
1667,,,326,14,,4837,8.846250156561530,0
1668,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader worker = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(worker.readLine());
        for(int count=1;count<=testCases;count++){
            String result="""";
            worker.readLine();
            String char[] = worker.readLine().split("" "");
            
            int n = Integer.MIN_VALUE;
            int key = 0;
            int result0 = 0;
            for(int i = 0; i<char.length-1;i++){
                int idTwo=Integer.parseInt(char[i+1]);
                int e2 = Integer.parseInt(char[i]);
                if((idTwo-e2)<0) key+=-(idTwo-e2);
                if(-(idTwo-e2)>n) n = -(idTwo-e2);
            }
            for(int i = 0; i<char.length-1;i++){
                int e2 = Integer.parseInt(char[i]);
                if(e2>=n) result0 = result0+n;
                else if(e2<n) result0 = result0+e2;
            }
            writer.write(""Case #""+count+"": ""+key+"" ""+result0+""
"");
        }
        worker.close();
        writer.close();

    }

}",316,15,"max:n,i2:idTwo,index:count,result1:key,result2:result0,str:char,i1:e2,reader:worker,",3137,5.845903809865320,Beam
1669,,,326,14,,5209,9.62403400739034,0
1670,,,264,15,,5010,9.111738216876980,0
1671,,,483,20,,8889,15.138982196648900,0
1672,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int c = 0; c < Integer.parseInt(count); c++) {
                times.clear();
                for (int i91 = 0; i91 < 2501 ;i91++) {
                    Integer r = new Integer(0);
                    times.add(i91, r);
                }
                Integer w = Integer.parseInt(bf.readLine());
                for (int itwo = 1; itwo < 2*w; itwo++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i91 = 0; i91 < nums.length; i91++) {
                        Integer temp = Integer.parseInt(nums[i91]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i91 = 0; i91 < 2501; i91 ++) {
                    if (times.get(i91) % 2 != 0) {
                        buffers += i91.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (c + 1) + "": "" + buffers + ""
"");

        }
        bf.close();
        fw.close();
    }
}",305,15,"n:w,a:r,i:c,i1:i91,i2:itwo,",2728,5.312096512317660,Beam
1673,,,262,14,,652,1.183120361963910,0
1674,,,292,17,,6895,12.104587690035500,0
1675,,,358,16,,5302,9.807609864075980,0
1676,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] party;
    public static int W, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            W = scanner.nextInt();
            party = new int[W];
            sum = 0;
            
            for (int j = 0; j < W; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (W == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int c = party[gold] - 1;
                    int w = party[bronze];
                    
                    if ((c > w ? c : w) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}",460,16,"y:w,x:c,N:W,",1303,3.0241551836331700,Beam
1677,,,326,14,,1117,2.0734519998232500,0
1678,,,269,16,,845,1.442012604077660,0
1679,"class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int N = in.nextInt();
            int[] P = new int[N];
            int total = 0;
            for (int n = 0; n < N; n++) {
                P[n] = in.nextInt();
                total += P[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int i = 0; i < P.length; i++) {
                    int v = P[i];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = i;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = i;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = P[iMax1];
                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        P[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        P[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}","class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int R = in.nextInt();
            int[] W = new int[R];
            int total = 0;
            for (int n = 0; n < R; n++) {
                W[n] = in.nextInt();
                total += W[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int iMin41 = -1;
                int iMax21 = -1;
                
                for (int c = 0; c < W.length; c++) {
                    int v = W[c];
                    if (v > vMax) {
                        iMin41 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = c;
                    } else if (v > iMin41) {
                        iMin41 = v;
                        iMax21 = c;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = W[iMax1];
                int vMax2 = iMax2 > -1 ? W[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    W[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        W[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    W[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        W[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}",527,25,"P:W,N:R,i:c,vMax21:iMin41,",3411,6.401527750492100,Beam
1680,,,267,13,,4027,6.686102267106370,0
1681,,,305,15,,1171,2.1895805478096000,0
1682,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long effect = 0;
                while( flippingWhatever != 0 )
                {
                    effect = effect * 10;
                    effect = effect + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = effect;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:effect,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",1928,3.478762491544090,Beam
1683,,,240,13,,460,0.7903581778208420,0
1684,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner rc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = rc.nextInt();
        
        for (int x = 1; x <= R; ++x) {
            int W = rc.nextInt();
            
            int[][] yr = new int[2*W-1][W];
            
            // 2 * N - 1 line with N numbers
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    yr[c][c] = rc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> mp = new HashMap<>();
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    if (mp.get(yr[c][c]) == null) {
                        mp.put(yr[c][c], 1);
                    }
                    else {
                        int w = mp.get(yr[c][c]);
                        mp.put(yr[c][c], w + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int c : mp.keySet()) {
                if (mp.get(c) % 2 != 0) {
                    r.add(c);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int c = 0; c < r.size(); ++c) {
                System.out.print("" "" + r.get(c));
            }
            System.out.println();
        }

        rc.close();
    }
}",375,12,"N:W,i:c,arr:yr,T:R,k:w,map:mp,j:c,sc:rc,",2785,5.252474852403010,Beam
1685,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader c = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = c.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = c.readLine();
                int R = Integer.parseInt(line);
                line = c.readLine();
                String [] tokenenos = line.split("" "");                
                int [] W = new int [R];
                for (int k=0;k<R;k++){
                    W[k]= Integer.parseInt(tokenenos[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<R-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>max){
                            max=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<R-1;k++){
                    if (W[k]>=max){
                        b=b+max;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            c.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"tokens:tokenenos,N:R,V:W,in:c,",1706,3.488041349252070,Beam
1686,,,326,14,,4837,8.731266995271050,0
1687,,,544,17,,5640,11.092527151107800,0
1688,,,291,13,,3721,6.654843636353810,0
1689,,,321,18,,1413,2.4559664885203000,0
1690,,,305,15,,799,1.4570155461629200,0
1691,,,406,19,,1520,2.787196652094520,0
1692,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, c1, s2, r10;
        double frequency;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            c1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                c1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            frequency = (double)maxdif / 10;
            
            r10 = (int)(frequency*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + c1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:frequency,m:w,s1:c1,",1148,2.031223396460220,Beam
1693,,,269,13,,4382,7.777791281541190,0
1694,,,345,16,,861,1.3365587989489200,0
1695,,,387,15,,5240,9.191984883944190,0
1696,,,406,19,,1024,1.7694075147310900,0
1697,,,358,18,,915,1.52245481411616,0
1698,,,132,9,,1900,2.2429692149162300,0
1699,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5485771020253500,Beam
1700,,,300,13,,3767,5.895387224356330,0
1701,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans = 0;
            int ansalt = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                if (size < w)
                    ans += (w - size);
            }
            
            //2
            int now = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                int c = w - size;
                if (c > now)
                    now = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < now)
                    ansalt += rows[j];
                else
                    ansalt += now;
            }
            
            pw.println(String.format(print, i, ans, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:now,s:size,prefix:print,ans2:ansalt,ans1:ans,f:w,",4308,7.3587994774182600,Beam
1702,,,306,13,,931,1.8315161188443500,0
1703,,,887,27,,1585,3.253827329476670,0
1704,,,298,16,,4527,7.906683373451230,0
1705,,,292,15,,2566,4.591617675622300,0
1706,,,290,12,,617,1.0937513351440400,0
1707,,,790,14,,4837,10.160487902164500,0
1708,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int caseii = 1; caseii <= t; caseii++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, diff);
                sum += diff;
            }

            int rev = 0;
            for (int i = 1; i < n; i++) {
                rev += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"ret:rev,max:w,casei:caseii,",892,1.4300187508265200,Beam
1709,,,344,15,,4890,8.078747034072880,0
1710,,,308,12,,745,1.4058055003484100,0
1711,,,211,11,,559,0.860572365919749,0
1712,,,272,16,,5948,8.278411813577020,0
1713,,,460,16,,5302,10.288244911034900,0
1714,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.6719016869862870,Beam
1715,,,290,12,,3602,6.065105410416920,0
1716,,,735,24,,11549,19.309278031190200,0
1717,,,367,20,,5618,10.258986671765600,0
1718,,,290,12,,3446,5.851508212089540,0
1719,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int problemCount = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = letters.get(currentIndex++);
            String line2 = letters.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] lull = ans;
            long[] sum1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int anti96 = 0; anti96 < lull.length - 1; anti96++) {
                        if (lull[anti96+1] < lull[anti96]) {
                            sum1[0] += lull[anti96] - lull[anti96+1];
                        }
                    }
                    
                    int rest = 0;
                    for (int i3 = 0; i3 < lull.length - 1; i3++) {
                        if (lull[i3+1] < lull[i3]) {
                            rest = Math.max(rest, lull[i3] - lull[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < lull.length - 1; i1++) {
                        sum1[1] += Math.min(lull[i1], rest);
                    }
            long[] min = sum1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:lull,min1:sum1,rate:rest,lines:letters,i2:anti96,",2802,5.330942138036090,Beam
1720,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.23927547136942500,Beam
1721,,,263,13,,683,1.2210628628730800,0
1722,,,406,17,,4898,10.436888897419000,0
1723,,,358,18,,6784,11.569624610741900,0
1724,,,291,13,,3814,6.789666152000430,0
1725,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.2740570147832240,Beam
1726,"class b {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Scanner input = new Scanner(System.in);
        int numCases = input.nextInt();
         
        for (int n = 0; n < numCases; n++){
            
            int b = input.nextInt();
            int m = input.nextInt();
            
            int[][] test = new int[b][b];
            int[] road = new int[b];
            
            for(int i = 0;i<b;i++)
                road[i]=1;
                
            int ans=0,tmp=0,t=0,br=0;
            for(int i = b-2;i>=0;i--)
            {     
                tmp=ans;
                t=0;
                br=i;
                for(int j = b-1;j>i;j--)
                {
                    ans+=road[j];
                    t+=road[j];
                    test[i][j]=1;
                    if(t>=m)
                        break;
                }
                road[i]=ans-tmp;
                if(t>=m)
                    break;

            }
            
            if(t>=m){
            System.out.printf(""Case #%d: POSSIBLE\n"", n + 1);
            if(t>m)
            {int tt=0;
                for(int i = br+1;i<b;i++){
                    tt+=road[i];
                    if(tt>m){
                        test[br][i]=0;
                        tt-=road[i];
                    }
                }
                    
            }
            int pos=0;
            for(int i = b-1;i>=0;i--){
                int tm=0;
                for(int j = 0;j<b;j++)
                    tm+=test[i][j];
                if(tm>0)
                    pos=i;
            }
            for(int i = 0;i<pos;i++)
            {
                test[i][i+1]=1;
            }
            for(int i = 0;i<b;i++){
                for(int j = 0;j<b;j++)
                    System.out.printf(""%d"",test[i][j]);
                System.out.println();
                }
            }
            else
                System.out.printf(""Case #%d: IMPOSSIBLE\n"", n + 1);    

        }
    }

}","class p {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Scanner input = new Scanner(System.in);
        int numCases = input.nextInt();
         
        for (int n = 0; n < numCases; n++){
            
            int p = input.nextInt();
            int m = input.nextInt();
            
            int[][] test = new int[p][p];
            int[] arc = new int[p];
            
            for(int c = 0;c<p;c++)
                arc[c]=1;
                
            int ans=0,tar=0,t=0,arr=0;
            for(int c = p-2;c>=0;c--)
            {     
                tar=ans;
                t=0;
                arr=c;
                for(int v = p-1;v>c;v--)
                {
                    ans+=arc[v];
                    t+=arc[v];
                    test[c][v]=1;
                    if(t>=m)
                        break;
                }
                arc[c]=ans-tar;
                if(t>=m)
                    break;

            }
            
            if(t>=m){
            System.out.printf(""Case #%d: POSSIBLE
"", n + 1);
            if(t>m)
            {int pp=0;
                for(int c = arr+1;c<p;c++){
                    pp+=arc[c];
                    if(pp>m){
                        test[arr][c]=0;
                        pp-=arc[c];
                    }
                }
                    
            }
            int pp=0;
            for(int c = p-1;c>=0;c--){
                int tm=0;
                for(int v = 0;v<p;v++)
                    tm+=test[c][v];
                if(tm>0)
                    pp=c;
            }
            for(int c = 0;c<pp;c++)
            {
                test[c][c+1]=1;
            }
            for(int c = 0;c<p;c++){
                for(int v = 0;v<p;v++)
                    System.out.printf(""%d"",test[c][v]);
                System.out.println();
                }
            }
            else
                System.out.printf(""Case #%d: IMPOSSIBLE
"", n + 1);    

        }
    }

}",475,18,"tt:pp,road:arc,b:p,br:arr,tmp:tar,i:c,pos:pp,j:v,",5209,9.699161791801450,Beam
1727,,,295,16,,5240,8.333389083544410,0
1728,,,292,16,,4155,7.153598972161610,0
1729,,,256,13,,4357,7.484863416353860,0
1730,,,256,13,,3130,5.798638355731960,0
1731,,,134,9,,1613,2.105639370282490,0
1732,,,366,17,,5953,10.222852063179000,0
1733,,,328,16,,5302,9.644024197260540,0
1734,,,211,11,,1489,2.3765429496765100,0
1735,,,255,13,,1489,3.456621829668680,0
1736,"class Main {
    public static final String ALPHABET[] = {
        ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""
    };
    public static void main(String[] args) throws Exception {
        // set up scanner and iterate over test cases
        Scanner scanner = new Scanner(new FileInputStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.in""));
        PrintStream output = new PrintStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.out"");
        int T = scanner.nextInt();
        for (int t = 1; t <= T; ++t) {
            // get parameters
            int N = scanner.nextInt();
            int[] parties = new int[N];
            int senatorsCount = 0;
            for (int n = 0; n < N; ++n)
                senatorsCount += (parties[n] = scanner.nextInt());
            // solve problem
            output.print(""Case #"" + t + "":"");
            while (senatorsCount > 0) {
                // find largest party / parties
                int maxC1 = 0;
                int maxC2 = 0;
                int maxI1 = 0;
                int maxI2 = 0;
                for (int party = 0; party < N; ++party)
                    if (parties[party] > maxC1) {
                        maxC2 = maxC1;
                        maxI2 = maxI1;
                        maxC1 = parties[party];
                        maxI1 = party;
                    }
                    else if (parties[party] == maxC1 || parties[party] > maxC2) {
                        maxC2 = parties[party];
                        maxI2 = party;
                    }
                // remove at least one senator
                output.print("" "" + ALPHABET[maxI1]);
                --maxC1;
                --parties[maxI1];
                --senatorsCount;
                // decide if a second senator should leave
                if (maxC1 > maxC2) {
                    // remove 2nd senator from this party
                    output.print(ALPHABET[maxI1]);
                    --maxC1;
                    --parties[maxI1];
                    --senatorsCount;
                }
                else if (senatorsCount == 1 || 2 * maxC2 > senatorsCount) {
                    // remove 2nd senator from 2nd party
                    output.print(ALPHABET[maxI2]);
                    --maxC2;
                    --parties[maxI2];
                    --senatorsCount;
                }
            }
            output.println();
        }
        output.close();
        System.out.println(""finished"");
    }
}","class Main {
    public static final String ALPHABET[] = {
        ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""
    };
    public static void main(String[] args) throws Exception {
        // set up scanner and iterate over test cases
        Scanner scanner = new Scanner(new FileInputStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.in""));
        PrintStream output = new PrintStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.out"");
        int R = scanner.nextInt();
        for (int t = 1; t <= R; ++t) {
            // get parameters
            int W = scanner.nextInt();
            int[] games = new int[W];
            int encersSize = 0;
            for (int c = 0; c < W; ++c)
                encersSize += (games[c] = scanner.nextInt());
            // solve problem
            output.print(""Case #"" + t + "":"");
            while (encersSize > 0) {
                // find largest party / parties
                int maxC1 = 0;
                int maxC2 = 0;
                int maxI1 = 0;
                int maxC12 = 0;
                for (int currency = 0; currency < W; ++currency)
                    if (games[currency] > maxC1) {
                        maxC2 = maxC1;
                        maxC12 = maxI1;
                        maxC1 = games[currency];
                        maxI1 = currency;
                    }
                    else if (games[currency] == maxC1 || games[currency] > maxC2) {
                        maxC2 = games[currency];
                        maxC12 = currency;
                    }
                // remove at least one senator
                output.print("" "" + ALPHABET[maxI1]);
                --maxC1;
                --games[maxI1];
                --encersSize;
                // decide if a second senator should leave
                if (maxC1 > maxC2) {
                    // remove 2nd senator from this party
                    output.print(ALPHABET[maxI1]);
                    --maxC1;
                    --games[maxI1];
                    --encersSize;
                }
                else if (encersSize == 1 || 2 * maxC2 > encersSize) {
                    // remove 2nd senator from 2nd party
                    output.print(ALPHABET[maxC12]);
                    --maxC2;
                    --games[maxC12];
                    --encersSize;
                }
            }
            output.println();
        }
        output.close();
        System.out.println(""finished"");
    }
}",406,16,"senatorsCount:encersSize,N:W,n:c,parties:games,T:R,party:currency,maxI2:maxC12,",3938,7.715274651845300,Beam
1737,,,184,9,,1892,3.335258968671160,0
1738,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.4063171029090880,Beam
1739,,,419,16,,6077,11.093182929356900,0
1740,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",637,1.0195451378822300,Beam
1741,,,156,10,,2202,2.6743117213249200,0
1742,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ansalt = 0;
            int n = Integer.parseInt(br.readLine());
            int[] opera = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < opera.length; j++)
                opera[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < opera.length - 1; j++) {
                int f = opera[j];
                int w = opera[j + 1];
                
                if (w < f)
                    ans1 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < opera.length - 1; j++) {
                int f = opera[j];
                int w = opera[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < opera.length - 1; j++) {
                if (opera[j] < size)
                    ansalt += opera[j];
                else
                    ansalt += size;
            }
            
            pw.println(String.format(prefix, i, ans1, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:opera,max:size,s:w,ans2:ansalt,",2218,3.749810981750490,Beam
1743,,,317,12,,3402,6.024261264006300,0
1744,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader arr = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter Pwb = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(arr.readLine());
        for (int start = 1; start <= t; start++) {
            int an2 = 0;
            int ansalt = 0;
            int nc = Integer.parseInt(arr.readLine());
            int[] operAS = new int[nc];
            String[] rows = arr.readLine().split("" "");
            for (int j = 0; j < operAS.length; j++)
                operAS[j] = Integer.parseInt(rows[j]);

            //1
            for (int j = 0; j < operAS.length - 1; j++) {
                int form = operAS[j];
                int size = operAS[j + 1];
                
                if (size < form)
                    an2 += (form - size);
            }
            
            //2
            int k = Integer.MIN_VALUE;
            for (int j = 0; j < operAS.length - 1; j++) {
                int form = operAS[j];
                int size = operAS[j + 1];
                
                int count = form - size;
                if (count > k)
                    k = count;
            }
            
            for (int j = 0; j < operAS.length - 1; j++) {
                if (operAS[j] < k)
                    ansalt += operAS[j];
                else
                    ansalt += k;
            }
            
            Pwb.println(String.format(print, start, an2, ansalt));
        }
        
        arr.close();
        Pwb.close();
    }
}",360,19,"raw:rows,c:count,max:k,ans1:an2,n:nc,f:form,s:size,ans2:ansalt,datas:operAS,prefix:print,i:start,pw:Pwb,br:arr,",6592,11.769281232357000,Beam
1745,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long Rs = scanner.nextLong(), M = scanner.nextLong(), A = scanner.nextLong();
            
            long ants = (Rs - 1) * M;
            
            if (M % A == 0) {
                out.println (ants + M/A - 1 + A);
            } else {
                out.println (ants + M/A + A);
            }
        }

    }
}",156,10,"W:A,ans:ants,C:M,R:Rs,",1138,1.5292062719663000,Beam
1746,,,171,10,,2419,3.5916161219279000,0
1747,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7439527948697410,Beam
1748,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.051361072063450,Beam
1749,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] party;
    public static int W, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            W = scanner.nextInt();
            party = new int[W];
            sum = 0;
            
            for (int j = 0; j < W; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (W == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int c = party[gold] - 1;
                    int w = party[bronze];
                    
                    if ((c > w ? c : w) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}",460,16,"y:w,x:c,N:W,",1303,3.007900023460390,Beam
1750,,,371,12,,900,1.786882205804190,0
1751,,,399,18,,6263,12.01554202636080,0
1752,,,448,16,,3994,7.964500633875530,0
1753,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.30544506311416600,Beam
1754,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int TATCH=1;TATCH<=T;TATCH++){
            int N = sc.nextInt(), N = sc.nextInt(), WF = sc.nextInt();
            int w = 0, res = 0;
            res += N*(N/WF);
            if (N%WF==0)res+=WF-1;
            else res+=WF;
            System.out.println(""Case #""+TATCH+"": ""+res);
        }
    }
}",309,11,"R:N,C:N,W:WF,CASE:TATCH,",962,1.6672060171763100,Beam
1755,"class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int s[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        s[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int max = 0;
                        for (int ss: s)
                            max = Math.max(max, ss);
                        if (max == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (s[i] == max)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            s[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            s[c1]--;
                            s[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""\n"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int w[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        w[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int r = 0;
                        for (int ss: w)
                            r = Math.r(r, ss);
                        if (r == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (w[i] == r)
                                pos.add(i);
                        }
                        int c = pos.size();
                        if (pos.size() % 2 == 1) {
                            c--;
                            int cur = pos.get(pos.size() - 1);
                            w[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < c; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            w[c1]--;
                            w[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""
"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",417,19,"s:w,max:r,ps:c,",1341,2.4198130408922800,Beam
1756,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner isprint = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = isprint.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int W = isprint.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] char = new int[W];
            for (int c = 0; c < W; c++){
                char[c] = isprint.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int c=1;c<W;c++){
                if(dif<char[c-1]-char[c]) dif=char[c-1]-char[c];    
            }
            for(int c=1;c<W;c++){
                if(char[c]<char[c-1]) a+=char[c-1]-char[c];
                if(char[c-1]<dif) b+=char[c-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,11,"ps:char,sinput:isprint,i:c,N:W,",1303,2.2998613635699000,Beam
1757,,,426,18,,3560,6.82668297290802,0
1758,,,224,11,,807,1.4625535090764400,0
1759,,,292,16,,4589,7.9077241063118000,0
1760,,,278,15,,3229,5.3003484090169300,0
1761,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter line = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int diff;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            diff = 0;
            for (int chi = 0; chi < w; chi++)
                diff += judges.get(chi);

            while (diff-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    diff--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > diff / 2)
                        System.line.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            line.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        line.close();
    }

}",464,17,"senators:judges,sum:diff,i:chi,index2:slice1,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:line,",5085,9.725552487373350,Beam
1762,,,265,12,,3391,5.611966208616890,0
1763,,,334,15,,1179,2.3971171657244400,0
1764,"class A {

    public static void main(String[] args) throws IOException {
        Scanner s = new Scanner(new File(""a.in""));
        BufferedWriter out = new BufferedWriter(new FileWriter(""a.out""));
        int T = s.nextInt();
        for (int t = 1; t <= T; t++) {
            out.write(""Case #""+t+"": ""); 
            int N = s.nextInt();
            int[] parties = new int[N];
            int sum=0;
            for(int i=0; i<N; i++){
                parties[i]=s.nextInt();
                sum+=parties[i];
            }
            while(sum>0){
                int differentParties=0;
                int max=0;
                int iMax=-1;
                for(int i=0; i<N; i++){
                    if(parties[i]>0)
                        differentParties++;
                    if(parties[i]>max){
                        max=parties[i];
                        iMax=i;
                    }
                }
                if(differentParties==2){
                    for(int i=0; i<N; i++){
                        if(parties[i]>0){
                            out.write(""""+(char)('A'+i));
                            parties[i]--;
                            sum--;
                        }
                    }
                }else{
                    out.write(""""+(char)('A'+iMax));
                    parties[iMax]--;
                    sum--;
                }
                out.write("" "");
            }
            out.write(""\n"");
        }
        out.close();    
    }
}","class A {

    public static void main(String[] args) throws IOException {
        Scanner r = new Scanner(new File(""a.in""));
        BufferedWriter log = new BufferedWriter(new FileWriter(""a.out""));
        int T = r.nextInt();
        for (int t = 1; t <= T; t++) {
            log.write(""Case #""+t+"": ""); 
            int W = r.nextInt();
            int[] partsys = new int[W];
            int cost=0;
            for(int c=0; c<W; c++){
                partsys[c]=r.nextInt();
                cost+=partsys[c];
            }
            while(cost>0){
                int differentParties=0;
                int wrap=0;
                int iDec=-1;
                for(int c=0; c<W; c++){
                    if(partsys[c]>0)
                        differentParties++;
                    if(partsys[c]>wrap){
                        wrap=partsys[c];
                        iDec=c;
                    }
                }
                if(differentParties==2){
                    for(int c=0; c<W; c++){
                        if(partsys[c]>0){
                            log.write(""""+(char)('A'+c));
                            partsys[c]--;
                            cost--;
                        }
                    }
                }else{
                    log.write(""""+(char)('A'+iDec));
                    partsys[iDec]--;
                    cost--;
                }
                log.write("" "");
            }
            log.write(""
"");
        }
        log.close();    
    }
}",321,13,"parties:partsys,N:W,i:c,s:r,sum:cost,max:wrap,out:log,iMax:iDec,",3163,5.715096720059710,Beam
1765,,,132,9,,1693,2.0270163138707500,0
1766,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6551850120226540,Beam
1767,,,375,12,,619,1.1468087593714400,0
1768,,,790,14,,4837,10.373825351397200,0
1769,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5708545486132300,Beam
1770,"class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int c = in.nextInt();
                int w = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(c%w, 1)+w + c/w-1;
                if (r > 1) ans1 += (r-1)*(c/w);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""\n"");
                out.write(""Case #"" + cas + "": "" + ans + ""\n"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int u = in.nextInt();
                int wa = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(u%wa, 1)+wa + u/wa-1;
                if (r > 1) ans1 += (r-1)*(u/wa);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""
"");
                out.write(""Case #"" + cas + "": "" + ans + ""
"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",241,15,"w:wa,c:u,",373,0.6532590866088870,Beam
1771,,,292,17,,6895,11.8766433040301,0
1772,,,211,11,,807,1.2847903966903700,0
1773,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.9121787627538050,Beam
1774,,,265,12,,3360,5.575176390012110,0
1775,,,360,19,,6931,11.662361677487700,0
1776,,,790,14,,4837,10.584538133939100,0
1777,,,285,14,,5147,8.833632469177250,0
1778,,,291,12,,900,1.6065450350443500,0
1779,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int H = Integer.parseInt(st.nextToken());
            int P = Integer.parseInt(st.nextToken());

            if (P == H)
                out.println(P+R-1);
            else if (H < 2*P)
                out.println(R+P);
            else if (H == 2*P)
                out.println(2*R-1+P);
            else {
                int rem = H%P;
                if (rem == 0) {
                    out.println((H*R)/P-1+P);
                }
                else {
                    out.println((H/P)*R+P);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}",273,11,"C:H,W:P,",423,0.7440481901168820,Beam
1780,,,317,14,,4837,8.473616095383960,0
1781,,,291,15,,3068,5.13756060997645,0
1782,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7811751365661620,Beam
1783,,,295,16,,4992,8.159221092859900,0
1784,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int c = 0; c < Integer.parseInt(count); c++) {
                times.clear();
                for (int i91 = 0; i91 < 2501 ;i91++) {
                    Integer r = new Integer(0);
                    times.add(i91, r);
                }
                Integer w = Integer.parseInt(bf.readLine());
                for (int itwo = 1; itwo < 2*w; itwo++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i91 = 0; i91 < nums.length; i91++) {
                        Integer temp = Integer.parseInt(nums[i91]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i91 = 0; i91 < 2501; i91 ++) {
                    if (times.get(i91) % 2 != 0) {
                        buffers += i91.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (c + 1) + "": "" + buffers + ""
"");

        }
        bf.close();
        fw.close();
    }
}",305,15,"n:w,a:r,i1:i91,i:c,i2:itwo,",2728,4.972225522995000,Beam
1785,,,655,16,,2318,5.8557663559913600,0
1786,,,269,13,,4394,8.219278717041020,0
1787,,,256,13,,4429,7.4659631172816000,0
1788,,,790,14,,4837,10.61760854323710,0
1789,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.2241689920425400,Beam
1790,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7171608209609990,Beam
1791,"class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int s[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        s[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int max = 0;
                        for (int ss: s)
                            max = Math.max(max, ss);
                        if (max == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (s[i] == max)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            s[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            s[c1]--;
                            s[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""\n"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int r = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int w[] = new int[r];
                    for (int i = 0; i < r; ++i)
                        w[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int end = 0;
                        for (int ss: w)
                            end = Math.end(end, ss);
                        if (end == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < r; ++i) {
                            if (w[i] == end)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            w[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            w[c1]--;
                            w[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""
"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",417,19,"max:end,s:w,n:r,",1705,3.0417062123616500,Beam
1792,,,211,11,,559,0.8893680731455490,0
1793,,,291,13,,3814,6.7455529769261700,0
1794,,,250,11,,2884,5.08646879196167,0
1795,,,272,16,,5948,8.576221807797750,0
1796,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.1029781381289200,Beam
1797,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String c = null;
        FileWriter fw = new FileWriter(""output.out"");  
        c = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(c); i++) {
                times.clear();
                for (int i91 = 0; i91 < 2501 ;i91++) {
                    Integer r = new Integer(0);
                    times.add(i91, r);
                }
                Integer w = Integer.parseInt(bf.readLine());
                for (int uitwo = 1; uitwo < 2*w; uitwo++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i91 = 0; i91 < nums.length; i91++) {
                        Integer temp = Integer.parseInt(nums[i91]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i91 = 0; i91 < 2501; i91 ++) {
                    if (times.get(i91) % 2 != 0) {
                        buffers += i91.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""
"");

        }
        bf.close();
        fw.close();
    }
}",305,15,"n:w,a:r,i1:i91,count:c,i2:uitwo,",2972,5.416646011670430,Beam
1798,,,132,9,,1900,2.293235007921860,0
1799,,,292,16,,4155,7.3394649744033800,0
1800,,,256,13,,681,1.168750007947290,0
1801,,,262,14,,652,1.1471686482429500,0
1802,,,325,16,,6077,11.00985940694810,0
1803,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,0.6934439341227210,Beam
1804,,,344,15,,2475,3.9830419500668800,0
1805,,,211,11,,2605,3.8461425224940000,0
1806,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.735049823919932,Beam
1807,,,132,9,,1552,1.8069867650667800,0
1808,,,406,16,,1272,2.366599945227310,0
1809,,,349,19,,5755,9.573624376455940,0
1810,,,553,21,,907,1.6571807940801000,0
1811,"static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int parties=Integer.parseInt(in.readLine());
            String[] Members=in.readLine().split("" "");
            int total=0;
            for(int j=0;j<parties;j++){
                total+=Integer.parseInt(Members[j]);
                    }
            while(total!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ans="""";
                for(int j=0;j<parties;j++){
                        if(first<Integer.parseInt(Members[j])){
                            second=first;
                            first=Integer.parseInt(Members[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Members[j])){
                                    second=Integer.parseInt(Members[j]);
                                    num2=j;
                                }
                            }
                    }
                ans=""""+(char)(65+num1);
                Members[num1]=Integer.toString(Integer.parseInt(Members[num1])-1);
                total-=1;
                String ans2="""";
                for(int j=0;j<parties;j++){
                    double p=total;
                    if(Double.parseDouble(Members[j])/p>0.5){
                        ans+=(char)(65+j);
                        Members[j]=Integer.toString(Integer.parseInt(Members[j])-1);
                        total-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}","static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int PARTials=Integer.parseInt(in.readLine());
            String[] Players=in.readLine().split("" "");
            int no=0;
            for(int j=0;j<PARTials;j++){
                no+=Integer.parseInt(Players[j]);
                    }
            while(no!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int umtwo=0;
                String ans="""";
                for(int j=0;j<PARTials;j++){
                        if(first<Integer.parseInt(Players[j])){
                            second=first;
                            first=Integer.parseInt(Players[j]);
                            umtwo=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Players[j])){
                                    second=Integer.parseInt(Players[j]);
                                    umtwo=j;
                                }
                            }
                    }
                ans=""""+(char)(65+num1);
                Players[num1]=Integer.toString(Integer.parseInt(Players[num1])-1);
                no-=1;
                String ans2="""";
                for(int j=0;j<PARTials;j++){
                    double p=no;
                    if(Double.parseDouble(Players[j])/p>0.5){
                        ans+=(char)(65+j);
                        Players[j]=Integer.toString(Integer.parseInt(Players[j])-1);
                        no-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}",405,15,"parties:PARTials,Members:Players,total:no,num2:umtwo,",1954,3.753286151091260,Beam
1812,,,386,18,,7280,12.090817284584000,0
1813,,,418,13,,4062,9.161879909038540,0
1814,,,271,12,,3171,5.496033457914990,0
1815,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.35807507832845100,Beam
1816,,,132,9,,1705,1.9999485572179200,0
1817,,,790,14,,4837,10.52142430941260,0
1818,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7875247081120810,Beam
1819,,,448,16,,4149,8.135023899873100,0
1820,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,",2270,4.3289099852244100,Beam
1821,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.24041752020518000,Beam
1822,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner ScanNER = new Scanner (System.in);
    static PrintStream print = System.print;

    public static void main(String[] args) {
        long WT = Long.valueOf(ScanNER.next());

        for (long index = 1; index <= WT; ++index) {
            System.print.print(""Case #"" + index + "": "");
            long B = ScanNER.nextLong(), N = ScanNER.nextLong(), Length = ScanNER.nextLong();
            
            long ants = (B - 1) * N;
            
            if (N % Length == 0) {
                print.println (ants + N/Length - 1 + Length);
            } else {
                print.println (ants + N/Length + Length);
            }
        }

    }
}",156,10,"W:Length,C:N,ans:ants,out:print,scanner:ScanNER,R:B,i:index,T:WT,",1986,2.7131107529004400,Beam
1823,,,334,15,,5426,10.502486713727300,0
1824,,,132,9,,1690,1.9522116263707500,0
1825,,,393,19,,1493,2.522187336285910,0
1826,,,298,16,,776,1.37571386496226,0
1827,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int problemCount = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = letters.get(currentIndex++);
            String line2 = letters.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] lull = ans;
            long[] sum11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int anti96 = 0; anti96 < lull.length - 1; anti96++) {
                        if (lull[anti96+1] < lull[anti96]) {
                            sum11[0] += lull[anti96] - lull[anti96+1];
                        }
                    }
                    
                    int length = 0;
                    for (int i3 = 0; i3 < lull.length - 1; i3++) {
                        if (lull[i3+1] < lull[i3]) {
                            length = Math.max(length, lull[i3] - lull[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < lull.length - 1; i1++) {
                        sum11[1] += Math.min(lull[i1], length);
                    }
            long[] min = sum11;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:lull,rate:length,i2:anti96,lines:letters,min1:sum11,",2957,5.587713066736860,Beam
1828,,,387,15,,5240,9.946547337373100,0
1829,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int trials = scan.nextInt();

        for (int i = 0; i < trials; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int u = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (u / time) + (u - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"w:time,ans:ants,c:u,cases:trials,",1086,1.4773923993110700,Beam
1830,,,295,15,,3429,6.328022642930350,0
1831,,,263,13,,4341,7.637076040109000,0
1832,"static void main(String [] args){
        Scanner s = new Scanner(System.in);
        int t=s.nextInt();
        for(int i=0;i<t;i++){
            int n=s.nextInt();
            int [] store = new int [n];
            int sum=0;
            for(int j=0;j<n;j++){
                store[j]=s.nextInt();
                sum=sum+store[j];
            }
            System.out.print(""Case #"");
            System.out.print(i+1);
            System.out.print("": "");
            while(sum>3){
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                int dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                System.out.print("" "");
                sum=sum-2;
            }
            if(sum==2){
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                int dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                System.out.print("" "");
            
            }
            else{
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                store[index]=store[index]-1;
                int dummy1=65+index;
                System.out.print((char)(dummy1));
                
                System.out.print("" "");
                 max1=0;
                 max2=0;
                 index=-1;
                 index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                 dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                
            }
            System.out.println();
        }
    }
}","static void main(String [] args){
        Scanner r = new Scanner(System.in);
        int t=r.nextInt();
        for(int i=0;i<t;i++){
            int c=r.nextInt();
            int [] draw = new int [c];
            int count=0;
            for(int w=0;w<c;w++){
                draw[w]=r.nextInt();
                count=count+draw[w];
            }
            System.out.print(""Case #"");
            System.out.print(i+1);
            System.out.print("": "");
            while(count>3){
                int ax2=0;
                int x0=0;
                int match=-1;
                int index2=-1;
                for(int w=0;w<c;w++){
                    if(draw[w]>ax2){
                        ax2=draw[w];
                        match=w;
                    }
                }
                for(int w=0;w<c;w++){
                    if(draw[w]>x0 && match!=w){
                        x0=draw[w];
                        index2=w;
                    }
                }
                draw[match]=draw[match]-1;
                draw[index2]=draw[index2]-1;
                int dodgeArt=65+match;
                int dummy2=65+index2;
                System.out.print((char)(dodgeArt));
                System.out.print((char)(dummy2));
                System.out.print("" "");
                count=count-2;
            }
            if(count==2){
                int ax2=0;
                int x0=0;
                int match=-1;
                int index2=-1;
                for(int w=0;w<c;w++){
                    if(draw[w]>ax2){
                        ax2=draw[w];
                        match=w;
                    }
                }
                for(int w=0;w<c;w++){
                    if(draw[w]>x0 && match!=w){
                        x0=draw[w];
                        index2=w;
                    }
                }
                draw[match]=draw[match]-1;
                draw[index2]=draw[index2]-1;
                int dodgeArt=65+match;
                int dummy2=65+index2;
                System.out.print((char)(dodgeArt));
                System.out.print((char)(dummy2));
                System.out.print("" "");
            
            }
            else{
                int ax2=0;
                int x0=0;
                int match=-1;
                int index2=-1;
                for(int w=0;w<c;w++){
                    if(draw[w]>ax2){
                        ax2=draw[w];
                        match=w;
                    }
                }
                draw[match]=draw[match]-1;
                int dodgeArt=65+match;
                System.out.print((char)(dodgeArt));
                
                System.out.print("" "");
                 ax2=0;
                 x0=0;
                 match=-1;
                 index2=-1;
                for(int w=0;w<c;w++){
                    if(draw[w]>ax2){
                        ax2=draw[w];
                        match=w;
                    }
                }
                for(int w=0;w<c;w++){
                    if(draw[w]>x0 && match!=w){
                        x0=draw[w];
                        index2=w;
                    }
                }
                draw[match]=draw[match]-1;
                draw[index2]=draw[index2]-1;
                 dodgeArt=65+match;
                int dummy2=65+index2;
                System.out.print((char)(dodgeArt));
                System.out.print((char)(dummy2));
                
            }
            System.out.println();
        }
    }
}",790,14,"j:w,n:c,index:match,max2:x0,store:draw,max1:ax2,s:r,dummy1:dodgeArt,sum:count,",3876,8.342061750094100,Beam
1833,,,255,13,,2915,6.378337299823760,0
1834,,,256,13,,3497,6.480258222421010,0
1835,,,281,14,,4837,8.105996346473690,0
1836,,,292,17,,6913,11.929297836621600,0
1837,,,406,19,,1954,3.474719746907550,0
1838,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,0.9964689493179320,Beam
1839,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException n) {
                n.printStackTrace();
            }
        }
        Scanner sq = new Scanner(System.in);
        int M = sq.nextInt();
        for(int SCasing=1;SCasing<=M;SCasing++){
            int N = sq.nextInt(), P = sq.nextInt(), NW = sq.nextInt();
            int P = 0, ares = 0;
            ares += N*(P/NW);
            if (P%NW==0)ares+=NW-1;
            else ares+=NW;
            System.out.println(""Case #""+SCasing+"": ""+ares);
        }
    }
}",309,11,"C:P,R:N,W:NW,res:ares,CASE:SCasing,sc:sq,T:M,r:m,e:n,",1737,2.9493351499239600,Beam
1840,,,292,15,,1511,2.7030988494555200,0
1841,,,292,15,,4977,8.928862659136450,0
1842,,,330,16,,6077,12.10366632938390,0
1843,,,419,16,,1272,2.3984885811805700,0
1844,,,298,16,,776,1.3969738562901800,0
1845,,,291,15,,3800,6.274513618151350,0
1846,,,527,25,,10763,17.49216831922530,0
1847,,,280,13,,3163,5.497158900896710,0
1848,,,326,14,,4124,7.122776965300240,0
1849,,,291,13,,4372,7.1065819501876800,0
1850,"class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int c = in.nextInt();
                int w = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(c%w, 1)+w + c/w-1;
                if (r > 1) ans1 += (r-1)*(c/w);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""\n"");
                out.write(""Case #"" + cas + "": "" + ans + ""\n"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int kin = 1; kin <= t; kin++){
                
                int r = in.nextInt();
                int v = in.nextInt();
                int u = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(v%u, 1)+u + v/u-1;
                if (r > 1) ans1 += (r-1)*(v/u);
                int ans = ans1;
                System.out.print(""Case #"" + kin + "": "" + ans + ""
"");
                out.write(""Case #"" + kin + "": "" + ans + ""
"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",241,15,"w:u,c:v,cas:kin,",838,1.406471049785610,Beam
1851,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter wpwb = new PrintWriter(file + "".out"");
        
        int tt = Integer.parseInt(br.readLine());
        for (int start = 1; start <= tt; start++) {
            int an4 = 0;
            int an02 = 0;
            int nc = Integer.parseInt(br.readLine());
            int[] rows = new int[nc];
            String[] array = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(array[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int form = rows[j];
                int size = rows[j + 1];
                
                if (size < form)
                    an4 += (form - size);
            }
            
            //2
            int always = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int form = rows[j];
                int size = rows[j + 1];
                
                int count = form - size;
                if (count > always)
                    always = count;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < always)
                    an02 += rows[j];
                else
                    an02 += always;
            }
            
            wpwb.println(String.format(print, start, an4, an02));
        }
        
        br.close();
        wpwb.close();
    }
}",360,19,"ans2:an02,c:count,datas:rows,f:form,max:always,pw:wpwb,prefix:print,s:size,ans1:an4,raw:array,i:start,n:nc,t:tt,",6627,11.743121655782100,Beam
1852,,,334,15,,1179,2.3779563228289300,0
1853,,,371,12,,900,1.779237198829650,0
1854,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0482494632403100,Beam
1855,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0515902082125300,Beam
1856,,,317,12,,3342,5.9946614623069800,0
1857,"class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int N = Integer.parseInt(br.readLine());
            int[][] vrst = new int[2*N-1][N];
            for(int j=0;j<2*N-1;j++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<N;k++) {
                    //System.out.println(""""+j+k);
                    vrst[j][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*N-1;i1++){
                for(int j = 0;j<N;j++){
                    bool[vrst[i1][j]]=!bool[vrst[i1][j]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""\n"");
            pw.write(""Case #""+(i+1)+"": ""+a+""\n"");

        }
        pw.close();
    }
}","class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int W = Integer.parseInt(br.readLine());
            int[][] cvste = new int[2*W-1][W];
            for(int dj=0;dj<2*W-1;dj++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<W;k++) {
                    //System.out.println(""""+j+k);
                    cvste[dj][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*W-1;i1++){
                for(int dj = 0;dj<W;dj++){
                    bool[cvste[i1][dj]]=!bool[cvste[i1][dj]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""
"");
            pw.write(""Case #""+(i+1)+"": ""+a+""
"");

        }
        pw.close();
    }
}",399,18,"N:W,j:dj,vrst:cvste,",1303,2.512025225162510,Beam
1858,,,500,19,,8685,15.609030520916000,0
1859,,,240,13,,2426,3.7878366351127600,0
1860,,,269,16,,5830,9.294288575649260,0
1861,,,406,19,,7999,14.85759651263560,0
1862,,,426,18,,3961,7.7468626221021000,0
1863,,,340,10,,2668,4.854502630233770,0
1864,,,527,25,,16369,29.27172909975050,0
1865,,,271,12,,3093,4.9859090407689400,0
1866,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int w = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[w];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int c = 0 ; c < w-1 ; c++) {
                    dip = Math.max(dip,ar[c]-ar[c+1]);
                    if(ar[c+1]<ar[c]) {
                        ansY += ar[c]-ar[c+1];
                    }
                }
                for(int c = 0 ; c < w-1 ; c++) {
                    int x = Math.min(ar[c],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:w,j:c,",1272,2.2352022409439100,Beam
1867,,,334,15,,807,1.6215803503990200,0
1868,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.30272448460261000,Beam
1869,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter line = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int diff;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            diff = 0;
            for (int chi = 0; chi < w; chi++)
                diff += judges.get(chi);

            while (diff-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    diff--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > diff / 2)
                        System.line.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            line.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        line.close();
    }

}",464,17,"senators:judges,sum:diff,index2:slice1,i:chi,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:line,",5085,9.66143890619278,Beam
1870,,,169,10,,2388,3.2207347631454500,0
1871,,,479,25,,2538,4.827692139148710,0
1872,,,387,15,,5240,10.329268519083700,0
1873,,,464,17,,5358,10.09119195540750,0
1874,,,375,12,,3706,6.652356696128850,0
1875,,,348,21,,7890,12.861017481486000,0
1876,,,330,14,,4707,8.63046381076177,0
1877,,,605,21,,9314,14.91886556148530,0
1878,,,208,12,,2039,3.261228895187380,0
1879,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int max = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<max; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}",187,12,"col:max,",32,0.036622734864552800,Beam
1880,,,379,17,,4297,7.2897922913233400,0
1881,,,265,12,,617,1.040087072054550,0
1882,,,134,9,,1892,2.501733855406440,0
1883,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long counter = queue.poll();
                
                if (counter == W){
                    break;
                }
                
                next[0] = counter + 1;
                StringBuilder builder = new StringBuilder(Long.toString(counter));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= W && next[i] > counter){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(counter) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,number:counter,",402,0.7660408695538840,Beam
1884,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == W){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= W && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,",156,0.31215452353159600,Beam
1885,,,306,13,,2946,5.547788321971890,0
1886,,,306,16,,5550,10.102343940734900,0
1887,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int problemCount = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = letters.get(currentIndex++);
            String line2 = letters.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] lull = ans;
            long[] sum11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int anti96 = 0; anti96 < lull.length - 1; anti96++) {
                        if (lull[anti96+1] < lull[anti96]) {
                            sum11[0] += lull[anti96] - lull[anti96+1];
                        }
                    }
                    
                    int length = 0;
                    for (int i3 = 0; i3 < lull.length - 1; i3++) {
                        if (lull[i3+1] < lull[i3]) {
                            length = Math.max(length, lull[i3] - lull[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < lull.length - 1; i1++) {
                        sum11[1] += Math.min(lull[i1], length);
                    }
            long[] min = sum11;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:lull,rate:length,i2:anti96,lines:letters,min1:sum11,",2957,5.4348282297452300,Beam
1888,,,240,12,,3433,5.829369147618610,0
1889,,,281,14,,4589,7.920198404788970,0
1890,,,386,18,,1377,2.409140415986380,0
1891,,,187,12,,3535,4.865760783354440,0
1892,,,393,19,,1907,3.271947968006130,0
1893,,,386,18,,7282,12.319383263588000,0
1894,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.8995301763216650,Beam
1895,,,291,12,,621,1.0842209855715400,0
1896,,,321,13,,4093,7.060910677909850,0
1897,,,290,12,,617,1.0836939970652300,0
1898,,,211,11,,2791,4.350282128651940,0
1899,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String c = null;
        FileWriter fw = new FileWriter(""output.out"");  
        c = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(c); i++) {
                times.clear();
                for (int i91 = 0; i91 < 2501 ;i91++) {
                    Integer r = new Integer(0);
                    times.add(i91, r);
                }
                Integer w = Integer.parseInt(bf.readLine());
                for (int uitwo = 1; uitwo < 2*w; uitwo++) {
                    String lines = bf.readLine();
                    String []cums = lines.split("" "");
                    for (int i91 = 0; i91 < cums.length; i91++) {
                        Integer temp = Integer.parseInt(cums[i91]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i91 = 0; i91 < 2501; i91 ++) {
                    if (times.get(i91) % 2 != 0) {
                        buffers += i91.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""
"");

        }
        bf.close();
        fw.close();
    }
}",305,15,"n:w,a:r,i1:i91,count:c,i2:uitwo,nums:cums,",2999,5.434223651885990,Beam
1900,,,321,18,,4021,7.145623183250430,0
1901,,,887,27,,6546,13.637437291940100,0
1902,,,513,26,,16704,28.516944483916000,0
1903,,,295,15,,672,1.2472176512082400,0
1904,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream fits = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String div = r.readLine();
            int ot = Integer.parseInt(div);
            for(int index = 0 ; index < ot ; index++) {
                div = r.readLine();
                int w = Integer.parseInt(div);
                div = r.readLine();
                StringTokenizer c = new StringTokenizer(div,"" "");
                int [] art = new int[w];
                int seed = 0;
                while(c.hasMoreTokens()) {
                    art[seed++] = Integer.parseInt(c.nextToken());
                }
                int ansYY = 0;
                int annY = 0;
                int ans = 0;
                for(int k = 0 ; k < w-1 ; k++) {
                    ans = Math.max(ans,art[k]-art[k+1]);
                    if(art[k+1]<art[k]) {
                        ansYY += art[k]-art[k+1];
                    }
                }
                for(int k = 0 ; k < w-1 ; k++) {
                    int x = Math.min(art[k],ans);
                    annY += x;
                }
                fits.write(""Case #"".getBytes());
                fits.write(new Integer(index+1).toString().getBytes());
                fits.write("": "".getBytes());
                fits.write(new Integer(ansYY).toString().getBytes());
                fits.write("" "".getBytes());
                fits.write(new Integer(annY).toString().getBytes());
                fits.write(eolb);
            }
            fits.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"iter:seed,ansY:ansYY,dip:ans,ansZ:annY,ar:art,st:c,str:div,j:k,t:ot,bos:fits,i:index,br:r,n:w,",6666,11.673181887467700,Beam
1905,,,379,17,,1353,2.343232027689620,0
1906,,,265,12,,617,1.0524033904075600,0
1907,,,328,16,,3876,7.169629561901090,0
1908,"class a1 {

    private static final String[] PL = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader input = null;
        BufferedWriter output = null;
        Date d1 = new Date();
        try {
            input = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            output = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String line1 = null;
            String line2 = null;
            int expectedCases = 0;
            int actualCase = -1;
            line1=input.readLine();
            expectedCases = Integer.parseInt(line1);
            for (actualCase = 1; actualCase<=expectedCases; actualCase++) {
                line1=input.readLine();
                line2=input.readLine();
                Scanner sc = new Scanner(line1);
                        int partynum = sc.nextInt();
                        Scanner sc1 = new Scanner(line2);
                        int[] parties1 = new int[partynum];
                        for (int i2 = 0; i2< partynum; i2++ ) {
                            parties1[i2] = sc1.nextInt();
                        }
                        int[] parties = parties1;
                        int result2 = 0;
                        for(int i1 : parties) {
                            result2 +=i1;
                        }
                        int totalcount = result2;
                        StringBuffer sb = new StringBuffer(2*partynum);
                        while (totalcount > 0) {
                            int[] result1 = new int[2];
                            int[] maxvalues = new int[2];
                            result1[0] = -1;
                            result1[1] = -1;
                            maxvalues[0] = -1;
                            maxvalues[1] = -1;
                            for (int i = 0; i<parties.length; i++){
                                if (parties[i]> maxvalues[0]) {
                                    result1[1] = result1[0];
                                    maxvalues[1] = maxvalues[0];
                                    result1[0] = i;
                                    maxvalues[0] = parties[i];
                                } else {
                                    if (parties[i] > maxvalues[1]) {
                                        result1[1] =i;
                                        maxvalues[1] = parties[i];
                                    }
                                }
                            }
                            int[] x = result1;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((totalcount ==3) || ((x[1] == -1) && (parties[x[0]] == 1)) ) {
                                sb.append(PL[x[0]]);
                                parties[x[0]]--;
                                totalcount --;
                            } else {
                                if ((x[1] == -1) || (parties[x[0]] - parties[x[1]] > 1)) {
                                    sb.append(PL[x[0]]);                    
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]-=2;
                                    totalcount-=2;
                                } else {
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]--;
                                    sb.append(PL[x[1]]);
                                    parties[x[1]]--;
                                    totalcount-=2;
                                }
                            }
                            sb.append("" "");
                        }
                String result = sb.toString().trim();
                output.write(""Case #"" + actualCase +"": "" + result + ""\n"");                
                System.out.println(""Case #"" + actualCase +"": "" + result );                
            }
            input.close();
            output.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}","class a1 {

    private static final String[] PP = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader feed = null;
        BufferedWriter outer = null;
        Date d1 = new Date();
        try {
            feed = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            outer = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String lineOne = null;
            String rowB = null;
            int expectedCases = 0;
            int actuallyChild = -1;
            lineOne=feed.readLine();
            expectedCases = Integer.parseInt(lineOne);
            for (actuallyChild = 1; actuallyChild<=expectedCases; actuallyChild++) {
                lineOne=feed.readLine();
                rowB=feed.readLine();
                Scanner soc = new Scanner(lineOne);
                        int size = soc.nextInt();
                        Scanner sc1 = new Scanner(rowB);
                        int[] partialsOne = new int[size];
                        for (int itwo = 0; itwo< size; itwo++ ) {
                            partialsOne[itwo] = sc1.nextInt();
                        }
                        int[] pages = partialsOne;
                        int resultCount = 0;
                        for(int i1 : pages) {
                            resultCount +=i1;
                        }
                        int foundcount = resultCount;
                        StringBuffer nb = new StringBuffer(2*size);
                        while (foundcount > 0) {
                            int[] Result4 = new int[2];
                            int[] allvalues = new int[2];
                            Result4[0] = -1;
                            Result4[1] = -1;
                            allvalues[0] = -1;
                            allvalues[1] = -1;
                            for (int i = 0; i<pages.length; i++){
                                if (pages[i]> allvalues[0]) {
                                    Result4[1] = Result4[0];
                                    allvalues[1] = allvalues[0];
                                    Result4[0] = i;
                                    allvalues[0] = pages[i];
                                } else {
                                    if (pages[i] > allvalues[1]) {
                                        Result4[1] =i;
                                        allvalues[1] = pages[i];
                                    }
                                }
                            }
                            int[] x = Result4;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((foundcount ==3) || ((x[1] == -1) && (pages[x[0]] == 1)) ) {
                                nb.append(PP[x[0]]);
                                pages[x[0]]--;
                                foundcount --;
                            } else {
                                if ((x[1] == -1) || (pages[x[0]] - pages[x[1]] > 1)) {
                                    nb.append(PP[x[0]]);                    
                                    nb.append(PP[x[0]]);
                                    pages[x[0]]-=2;
                                    foundcount-=2;
                                } else {
                                    nb.append(PP[x[0]]);
                                    pages[x[0]]--;
                                    nb.append(PP[x[1]]);
                                    pages[x[1]]--;
                                    foundcount-=2;
                                }
                            }
                            nb.append("" "");
                        }
                String result = nb.toString().trim();
                outer.write(""Case #"" + actuallyChild +"": "" + result + ""
"");                
                System.out.println(""Case #"" + actuallyChild +"": "" + result );                
            }
            feed.close();
            outer.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}",735,24,"parties1:partialsOne,parties:pages,partynum:size,result2:resultCount,i2:itwo,line2:rowB,actualCase:actuallyChild,PL:PP,maxvalues:allvalues,result1:Result4,totalcount:foundcount,sb:nb,sc:soc,input:feed,line1:lineOne,output:outer,",10626,17.34659333626430,Beam
1909,,,254,13,,4112,6.944542316595710,0
1910,,,544,17,,5914,12.079095192750300,0
1911,,,290,12,,617,1.11544322570165,0
1912,,,262,14,,652,1.1517000118891400,0
1913,,,735,24,,11549,19.493658232688900,0
1914,,,269,16,,5823,9.456145326296490,0
1915,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6519940972328190,Beam
1916,,,353,16,,5302,10.112941733996100,0
1917,,,443,17,,5241,9.209854249159500,0
1918,,,256,13,,2611,4.864176364739740,0
1919,,,399,18,,6263,11.496519136428800,0
1920,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner laneChan = null;
        int width;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        width = s.nextInt();
        s.nextLine();
        for (int c = 0; c < width; c++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] lakeValues = new int[currentSize];
            line = s.nextLine();
            laneChan = new Scanner(line);
            int j = 0;
            while (laneChan.hasNextInt()) {
                lakeValues[j] = laneChan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastapestSize = 0;
            for (int w = 1; w < currentSize; w++) {
                if (lakeValues[w] < lakeValues[w - 1]) {
                    firstMethod += lakeValues[w - 1] - lakeValues[w];
                    fastapestSize = Math.max(fastapestSize, lakeValues[w - 1] - lakeValues[w]);
                }
            }
            int secondMethod = 0;
            for (int w = 0; w < currentSize - 1; w++) {
                if (lakeValues[w] > fastapestSize) {
                    secondMethod += fastapestSize;
                } else {
                    secondMethod += lakeValues[w];
                }
            }
            printer.print(""Case #"" + (c + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}",328,16,"fastestRate:fastapestSize,size:width,i:c,m:w,plateValues:lakeValues,lineScan:laneChan,",3132,5.729178071022030,Beam
1921,,,240,13,,2184,3.6031622886657700,0
1922,,,292,16,,4155,7.35051722129186,0
1923,,,240,13,,1564,2.4655736605326300,0
1924,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int W, average;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            W = scanner.nextInt();
            participant = new int[W];
            average = 0;
            
            for (int c = 0; c < W; c++) {

                participant[c] = scanner.nextInt();
                average += participant[c];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (W == 2) {
                for (int c = 1; c < participant[0]; c++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (average > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int ri1 = 0; ri1 < W; ri1++)
                        if (apple == -1 || participant[ri1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = ri1;
                        }
                        else if (cream == -1 || participant[ri1] > participant[cream]) {
                            brence = cream;
                            cream = ri1;
                        }
                        else if (brence == -1 || participant[ri1] > participant[brence])
                            brence = ri1;
                    int x = participant[apple] - 1;
                    int y = participant[brence];
                    
                    if ((x > y ? x : y) > (average - 2) / 2) {
                        
                        average--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        average -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (average == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}",460,16,"sum:average,gold:apple,silver:cream,party:participant,bronze:brence,N:W,j:c,i1:ri1,",4124,8.265590461095170,Beam
1925,,,184,9,,621,1.0457181215286300,0
1926,,,655,16,,2071,4.145992656548820,0
1927,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7962743481000260,Beam
1928,,,420,19,,7084,12.452035101254800,0
1929,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.4014655311902360,Beam
1930,,,525,23,,13588,24.00939065615340,0
1931,,,321,18,,2979,5.368473347028100,0
1932,,,290,12,,3633,6.561582012971240,0
1933,,,513,26,,16192,26.98491734266280,0
1934,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,1.9229990283648200,Beam
1935,,,257,11,,2791,4.513144028186800,0
1936,,,334,15,,5023,10.058815062046100,0
1937,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5785360495249430,Beam
1938,,,256,8,,1489,2.6530386249224300,0
1939,,,328,16,,5302,7.966445934772490,0
1940,,,348,14,,3895,7.085786994298300,0
1941,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.9543585817019150,Beam
1942,,,171,10,,2233,3.472196614742280,0
1943,,,358,16,,1241,2.3209639310836800,0
1944,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7358567476272580,Beam
1945,,,393,19,,7052,11.823356330394700,0
1946,,,171,10,,2419,3.733828051884970,0
1947,,,348,14,,3548,6.487314852078760,0
1948,,,619,14,,4333,8.112003862857820,0
1949,,,292,16,,4155,7.286267908414210,0
1950,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.8742568333943680,Beam
1951,,,187,13,,1987,2.4800939202308700,0
1952,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.2984733064969380,Beam
1953,,,479,25,,1809,3.307789858182270,0
1954,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,4.47054382165273,Beam
1955,,,479,25,,8287,14.732944552103700,0
1956,,,358,18,,6770,11.51259104013440,0
1957,,,418,13,,3814,8.727196343739830,0
1958,,,478,22,,11842,20.024432746569300,0
1959,,,500,19,,8692,16.121281667550400,0
1960,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7898412426312760,Beam
1961,,,257,11,,1055,1.9229980985323600,0
1962,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.23506548007329300,Beam
1963,,,500,19,,8675,15.20168463786440,0
1964,,,254,13,,655,1.0613046844800300,0
1965,,,281,14,,1117,1.8671109795570400,0
1966,,,572,15,,5218,8.94375276962916,0
1967,,,358,16,,5240,9.395966831843060,0
1968,"class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder output = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int numTests = Integer.parseInt(br.readLine());
                    int test;
                    String [] testSplit;
                    int [] mush;
                    
                    // Loop through each test
                    for (int testCounter = 0; testCounter < numTests; ++testCounter) {
                        test=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mush= new int[test];
                        for(int s=0;s<test;s++)
                        {
                            mush[s]=Integer.parseInt(testSplit[s]);
                        }
                        int out1=0,out2=0;
                        int currentDiff=0,maxDiff=0;
                        out1=0;
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s]<mush[s-1])
                            {
                                currentDiff=mush[s-1]-mush[s];
                                out1+=currentDiff;
                                maxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;
                                
                            }
                        }
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s-1]<maxDiff)
                            {
                                out2+=mush[s-1];
                                
                            }
                            else
                            {
                                out2+=maxDiff;
                            }
                        }
                        System.out.println(""Case #""+(testCounter+1)+"": ""+out1+"" ""+out2);
        //                System.out.println(""Done"");
                        output.append(""Case #"").append((testCounter+1)).append("": "").append(out1+"" ""+out2);
                        output.append(""\n"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( output.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}","class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader bl = null;
                StringBuilder letter = new StringBuilder();
                try {
                     // String buffer for storing the output
                    bl = new BufferedReader(new FileReader(inputFile));
                    int NumFables = Integer.parseInt(bl.readLine());
                    int train;
                    String [] testSplit;
                    int [] mUSH;
                    
                    // Loop through each test
                    for (int matchCount = 0; matchCount < NumFables; ++matchCount) {
                        train=Integer.parseInt(bl.readLine());
                        
                        testSplit=(bl.readLine()).split("" "");
                        mUSH= new int[train];
                        for(int n=0;n<train;n++)
                        {
                            mUSH[n]=Integer.parseInt(testSplit[n]);
                        }
                        int inPart=0,in=0;
                        int currentLength=0,out=0;
                        inPart=0;
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n]<mUSH[n-1])
                            {
                                currentLength=mUSH[n-1]-mUSH[n];
                                inPart+=currentLength;
                                out=(out<currentLength)?currentLength:out;
                                
                            }
                        }
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n-1]<out)
                            {
                                in+=mUSH[n-1];
                                
                            }
                            else
                            {
                                in+=out;
                            }
                        }
                        System.out.println(""Case #""+(matchCount+1)+"": ""+inPart+"" ""+in);
        //                System.out.println(""Done"");
                        letter.append(""Case #"").append((matchCount+1)).append("": "").append(inPart+"" ""+in);
                        letter.append(""
"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( letter.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}",443,17,"mush:mUSH,currentDiff:currentLength,maxDiff:out,s:n,test:train,testCounter:matchCount,output:letter,out2:in,out1:inPart,numTests:NumFables,br:bl,",4310,8.012184198697410,Beam
1969,,,149,10,,2109,2.7200639327367100,0
1970,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.41437038977940900,Beam
1971,"class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String str = br.readLine();
            StringTokenizer token = new StringTokenizer(str, "" "");
        
            int[] m = new int[N];
            int max = 0;
            for (int j = 0; j < N; j++) {
                m[j] = Integer.parseInt(token.nextToken());
                if (j > 0 && m[j] - m[j - 1] < 0) {
                    max = Math.max(max, m[j - 1] - m[j]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int j = 1; j < N; j++) {
                if (m[j] - m[j - 1] < 0) {
                    ans_x += m[j - 1] - m[j];
                }
                if (m[j - 1] <= max) {
                    ans_y += m[j - 1];
                } else {
                    ans_y += max;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r\n"");
        }
        bw.close();
        br.close();
    }
}","class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String char = br.readLine();
            StringTokenizer r = new StringTokenizer(char, "" "");
        
            int[] w = new int[N];
            int count = 0;
            for (int c = 0; c < N; c++) {
                w[c] = Integer.parseInt(r.nextToken());
                if (c > 0 && w[c] - w[c - 1] < 0) {
                    count = Math.count(count, w[c - 1] - w[c]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int c = 1; c < N; c++) {
                if (w[c] - w[c - 1] < 0) {
                    ans_x += w[c - 1] - w[c];
                }
                if (w[c - 1] <= count) {
                    ans_y += w[c - 1];
                } else {
                    ans_y += count;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r
"");
        }
        bw.close();
        br.close();
    }
}",344,15,"max:count,m:w,token:r,j:c,str:char,",1942,3.2805083552996300,Beam
1972,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.35811837911605800,Beam
1973,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int w = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[w];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int c = 0 ; c < w-1 ; c++) {
                    dip = Math.max(dip,ar[c]-ar[c+1]);
                    if(ar[c+1]<ar[c]) {
                        ansY += ar[c]-ar[c+1];
                    }
                }
                for(int c = 0 ; c < w-1 ; c++) {
                    int x = Math.min(ar[c],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:w,j:c,",1272,2.2259710907936100,Beam
1974,,,305,15,,799,1.4590474446614600,0
1975,,,250,11,,2760,4.7718252261479700,0
1976,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6686895847320560,Beam
1977,,,393,19,,1493,2.5450103441874200,0
1978,,,256,13,,3427,6.1559577544530200,0
1979,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader yr = new BufferedReader(new FileReader(args[0]));
        PrintWriter temp = new PrintWriter(args[1], ""UTF-8"");

        int B = Integer.parseInt(yr.readLine());
        for (int i = 1; i <= B; ++i) {
            temp.print(""Case #""+i+"": "");            

            StringTokenizer est = new StringTokenizer(yr.readLine());
            int A = Integer.parseInt(est.nextToken());
            int P = Integer.parseInt(est.nextToken());
            int TW = Integer.parseInt(est.nextToken());

            if (TW == P)
                temp.println(TW+A-1);
            else if (P < 2*TW)
                temp.println(A+TW);
            else if (P == 2*TW)
                temp.println(2*A-1+TW);
            else {
                int rev = P%TW;
                if (rev == 0) {
                    temp.println((P*A)/TW-1+TW);
                }
                else {
                    temp.println((P/TW)*A+TW);
                }
            }
        }

        temp.flush();
        temp.close();

        System.exit(0);
    }
}",273,11,"W:TW,rem:rev,R:A,out:temp,br:yr,C:P,t:i,T:B,st:est,",2453,4.228634536266330,Beam
1980,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] smatch = new int[n];
                    for (int i = 0; i < n; i++) {
                        smatch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int comment = smatch[i] - smatch[i + 1];
                        if (comment > 0) {
                            first += comment;
                        }
                    }
                    
                    int[] comment = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        comment[i] = smatch[i] - smatch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, comment[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, smatch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] smatch = new int[n];
                for (int i = 0; i < n; i++) {
                    smatch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int comment = smatch[i] - smatch[i + 1];
                    if (comment > 0) {
                        first += comment;
                    }
                }
                
                int[] comment = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    comment[i] = smatch[i] - smatch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, comment[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, smatch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:smatch,diff:comment,i4:i22,",1182,2.799077876408900,Beam
1981,,,262,14,,652,1.1481371720631900,0
1982,,,311,17,,6720,11.831962351004300,0
1983,,,295,15,,2738,4.962765785058340,0
1984,,,303,12,,2732,4.853531185785930,0
1985,,,306,16,,4961,9.014869221051530,0
1986,,,334,15,,5054,9.807378363609310,0
1987,,,290,12,,3633,6.608016649882000,0
1988,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.1946235259374000,Beam
1989,,,887,27,,1585,3.4163476506869,0
1990,,,328,16,,5271,9.004530374209090,0
1991,,,262,14,,652,1.0266574501991300,0
1992,,,260,11,,2512,4.395687937736510,0
1993,,,273,11,,829,1.3411136547724400,0
1994,,,200,10,,1551,2.05899879137675,0
1995,,,262,14,,3504,6.0920055945714300,0
1996,"class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder output = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int numTests = Integer.parseInt(br.readLine());
                    int test;
                    String [] testSplit;
                    int [] mush;
                    
                    // Loop through each test
                    for (int testCounter = 0; testCounter < numTests; ++testCounter) {
                        test=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mush= new int[test];
                        for(int s=0;s<test;s++)
                        {
                            mush[s]=Integer.parseInt(testSplit[s]);
                        }
                        int out1=0,out2=0;
                        int currentDiff=0,maxDiff=0;
                        out1=0;
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s]<mush[s-1])
                            {
                                currentDiff=mush[s-1]-mush[s];
                                out1+=currentDiff;
                                maxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;
                                
                            }
                        }
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s-1]<maxDiff)
                            {
                                out2+=mush[s-1];
                                
                            }
                            else
                            {
                                out2+=maxDiff;
                            }
                        }
                        System.out.println(""Case #""+(testCounter+1)+"": ""+out1+"" ""+out2);
        //                System.out.println(""Done"");
                        output.append(""Case #"").append((testCounter+1)).append("": "").append(out1+"" ""+out2);
                        output.append(""\n"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( output.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}","class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader bl = null;
                StringBuilder letter = new StringBuilder();
                try {
                     // String buffer for storing the output
                    bl = new BufferedReader(new FileReader(inputFile));
                    int NumFables = Integer.parseInt(bl.readLine());
                    int train;
                    String [] testSplit;
                    int [] mUSH;
                    
                    // Loop through each test
                    for (int matchCount = 0; matchCount < NumFables; ++matchCount) {
                        train=Integer.parseInt(bl.readLine());
                        
                        testSplit=(bl.readLine()).split("" "");
                        mUSH= new int[train];
                        for(int n=0;n<train;n++)
                        {
                            mUSH[n]=Integer.parseInt(testSplit[n]);
                        }
                        int inPart=0,in=0;
                        int currentLength=0,out=0;
                        inPart=0;
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n]<mUSH[n-1])
                            {
                                currentLength=mUSH[n-1]-mUSH[n];
                                inPart+=currentLength;
                                out=(out<currentLength)?currentLength:out;
                                
                            }
                        }
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n-1]<out)
                            {
                                in+=mUSH[n-1];
                                
                            }
                            else
                            {
                                in+=out;
                            }
                        }
                        System.out.println(""Case #""+(matchCount+1)+"": ""+inPart+"" ""+in);
        //                System.out.println(""Done"");
                        letter.append(""Case #"").append((matchCount+1)).append("": "").append(inPart+"" ""+in);
                        letter.append(""
"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( letter.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}",443,17,"mush:mUSH,currentDiff:currentLength,maxDiff:out,s:n,test:train,testCounter:matchCount,output:letter,out2:in,out1:inPart,numTests:NumFables,br:bl,",4310,7.8937065203984600,Beam
1997,,,311,17,,6700,11.353815058867100,0
1998,,,200,10,,714,0.9859015226364140,0
1999,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long counter = queue.poll();
                
                if (counter == W){
                    break;
                }
                
                next[0] = counter + 1;
                StringBuilder builder = new StringBuilder(Long.toString(counter));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= W && next[i] > counter){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(counter) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,number:counter,",402,0.7596941153208420,Beam
2000,,,363,16,,5581,10.103640294075000,0
2001,,,255,13,,1489,3.436278752485910,0
2002,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.41624817848205600,Beam
2003,,,358,18,,915,1.6078769008318600,0
2004,,,208,12,,2318,3.7285200238227800,0
2005,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String c;
        try {
            c = r.readLine();
            int case_num = Integer.parseInt(c);
            for (int ctx = 0; ctx < case_num; ctx++) {
                c = r.readLine();
                int width = Integer.parseInt(c);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    c = r.readLine();
                    String[] width = c.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String anc = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        anc = anc + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+anc);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,s:c,ans:anc,",2625,5.050466454029080,Beam
2006,,,200,10,,2233,3.0627729614575700,0
2007,,,298,16,,4620,8.072516103585560,0
2008,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"count:sum,num:width,row:cur,i:c,height:width,kk:ctx,in:r,",2270,4.2986852924029000,Beam
2009,,,273,11,,553,0.9775723934173580,0
2010,,,478,22,,11842,20.124271162351000,0
2011,,,406,16,,1272,2.12909015417099,0
2012,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] smatch = new int[n];
                    for (int i = 0; i < n; i++) {
                        smatch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int comment = smatch[i] - smatch[i + 1];
                        if (comment > 0) {
                            first += comment;
                        }
                    }
                    
                    int[] comment = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        comment[i] = smatch[i] - smatch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, comment[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, smatch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] smatch = new int[n];
                for (int i = 0; i < n; i++) {
                    smatch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int comment = smatch[i] - smatch[i + 1];
                    if (comment > 0) {
                        first += comment;
                    }
                }
                
                int[] comment = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    comment[i] = smatch[i] - smatch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, comment[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, smatch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:smatch,diff:comment,i4:i22,",1182,2.519124750296280,Beam
2013,,,363,16,,869,1.2838807582855200,0
2014,,,618,26,,10742,18.44997012615200,0
2015,,,290,12,,617,1.0953003764152500,0
2016,"class CRoundA {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int size = in.nextInt();
            
            int costPerRow = C / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += costPerRow * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (C % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d\n"", i + 1, ans);
        }

    }

}","class CRoundA {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int R = in.nextInt();
            int CA = in.nextInt();
            int size = in.nextInt();
            
            int CostPerCol = CA / size;
            
            int an2 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            an2 += CostPerCol * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (CA % size == 0) {
                an2 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                an2 += size;
            }
            int ans = an2;
            System.out.printf(""Case #%d: %d
"", i + 1, ans);
        }

    }

}",142,11,"costPerRow:CostPerCol,C:CA,ans1:an2,",831,1.339461867014570,Beam
2017,,,241,15,,3234,5.360053312778470,0
2018,,,426,18,,3560,6.997515924771630,0
2019,,,790,14,,4837,10.331924410661100,0
2020,,,334,15,,1179,2.406292430559790,0
2021,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,4.577091574668880,Beam
2022,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7954590996106470,Beam
2023,,,290,12,,617,1.1086688796679200,0
2024,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cr = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cr) {
        sum1 += cr - w[i4];
      }
      cr = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,cur:cr,",433,0.8013748486836750,Beam
2025,,,386,18,,7465,12.921788271268200,0
2026,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0562280972798700,Beam
2027,,,406,19,,1024,1.887037491798400,0
2028,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int Rs = A.in.nextInt();
            int C = A.in.nextInt();
            int B = A.in.nextInt();
            if (Rs == 1) {
                int result = (C-B)/B + B + (C%B>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:B,R:Rs,",518,0.8155342698097230,Beam
2029,,,358,18,,5784,9.801997236410780,0
2030,,,406,19,,1024,1.900760285059610,0
2031,,,278,15,,801,1.3376575549443600,0
2032,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner laneChan = null;
        int width;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        width = s.nextInt();
        s.nextLine();
        for (int c = 0; c < width; c++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] lakeValues = new int[currentSize];
            line = s.nextLine();
            laneChan = new Scanner(line);
            int j = 0;
            while (laneChan.hasNextInt()) {
                lakeValues[j] = laneChan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastapestSize = 0;
            for (int w = 1; w < currentSize; w++) {
                if (lakeValues[w] < lakeValues[w - 1]) {
                    firstMethod += lakeValues[w - 1] - lakeValues[w];
                    fastapestSize = Math.max(fastapestSize, lakeValues[w - 1] - lakeValues[w]);
                }
            }
            int secondMethod = 0;
            for (int w = 0; w < currentSize - 1; w++) {
                if (lakeValues[w] > fastapestSize) {
                    secondMethod += fastapestSize;
                } else {
                    secondMethod += lakeValues[w];
                }
            }
            printer.print(""Case #"" + (c + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}",328,16,"fastestRate:fastapestSize,size:width,i:c,m:w,plateValues:lakeValues,lineScan:laneChan,",3132,5.762618907292680,Beam
2033,,,417,18,,3845,7.444557885328930,0
2034,,,308,12,,776,1.610349162419640,0
2035,,,236,16,,4403,7.4074431697527600,0
2036,,,790,14,,4837,10.417589835325900,0
2037,,,256,13,,927,1.6709334055582700,0
2038,"class Main {
    public static final String ALPHABET[] = {
        ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""
    };
    public static void main(String[] args) throws Exception {
        // set up scanner and iterate over test cases
        Scanner scanner = new Scanner(new FileInputStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.in""));
        PrintStream output = new PrintStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.out"");
        int T = scanner.nextInt();
        for (int t = 1; t <= T; ++t) {
            // get parameters
            int N = scanner.nextInt();
            int[] parties = new int[N];
            int senatorsCount = 0;
            for (int n = 0; n < N; ++n)
                senatorsCount += (parties[n] = scanner.nextInt());
            // solve problem
            output.print(""Case #"" + t + "":"");
            while (senatorsCount > 0) {
                // find largest party / parties
                int maxC1 = 0;
                int maxC2 = 0;
                int maxI1 = 0;
                int maxI2 = 0;
                for (int party = 0; party < N; ++party)
                    if (parties[party] > maxC1) {
                        maxC2 = maxC1;
                        maxI2 = maxI1;
                        maxC1 = parties[party];
                        maxI1 = party;
                    }
                    else if (parties[party] == maxC1 || parties[party] > maxC2) {
                        maxC2 = parties[party];
                        maxI2 = party;
                    }
                // remove at least one senator
                output.print("" "" + ALPHABET[maxI1]);
                --maxC1;
                --parties[maxI1];
                --senatorsCount;
                // decide if a second senator should leave
                if (maxC1 > maxC2) {
                    // remove 2nd senator from this party
                    output.print(ALPHABET[maxI1]);
                    --maxC1;
                    --parties[maxI1];
                    --senatorsCount;
                }
                else if (senatorsCount == 1 || 2 * maxC2 > senatorsCount) {
                    // remove 2nd senator from 2nd party
                    output.print(ALPHABET[maxI2]);
                    --maxC2;
                    --parties[maxI2];
                    --senatorsCount;
                }
            }
            output.println();
        }
        output.close();
        System.out.println(""finished"");
    }
}","class Main {
    public static final String ALPHABET[] = {
        ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""
    };
    public static void main(String[] args) throws Exception {
        // set up scanner and iterate over test cases
        Scanner scanner = new Scanner(new FileInputStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.in""));
        PrintStream output = new PrintStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.out"");
        int R = scanner.nextInt();
        for (int t = 1; t <= R; ++t) {
            // get parameters
            int W = scanner.nextInt();
            int[] games = new int[W];
            int encersSize = 0;
            for (int c = 0; c < W; ++c)
                encersSize += (games[c] = scanner.nextInt());
            // solve problem
            output.print(""Case #"" + t + "":"");
            while (encersSize > 0) {
                // find largest party / parties
                int maxC1 = 0;
                int maxC2 = 0;
                int maxI1 = 0;
                int maxC12 = 0;
                for (int currency = 0; currency < W; ++currency)
                    if (games[currency] > maxC1) {
                        maxC2 = maxC1;
                        maxC12 = maxI1;
                        maxC1 = games[currency];
                        maxI1 = currency;
                    }
                    else if (games[currency] == maxC1 || games[currency] > maxC2) {
                        maxC2 = games[currency];
                        maxC12 = currency;
                    }
                // remove at least one senator
                output.print("" "" + ALPHABET[maxI1]);
                --maxC1;
                --games[maxI1];
                --encersSize;
                // decide if a second senator should leave
                if (maxC1 > maxC2) {
                    // remove 2nd senator from this party
                    output.print(ALPHABET[maxI1]);
                    --maxC1;
                    --games[maxI1];
                    --encersSize;
                }
                else if (encersSize == 1 || 2 * maxC2 > encersSize) {
                    // remove 2nd senator from 2nd party
                    output.print(ALPHABET[maxC12]);
                    --maxC2;
                    --games[maxC12];
                    --encersSize;
                }
            }
            output.println();
        }
        output.close();
        System.out.println(""finished"");
    }
}",406,16,"senatorsCount:encersSize,N:W,n:c,parties:games,T:R,party:currency,maxI2:maxC12,",3938,7.574491190910340,Beam
2039,,,479,25,,2720,5.10093564192454,0
2040,"class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int N = Integer.parseInt(br.readLine());
            int[][] vrst = new int[2*N-1][N];
            for(int j=0;j<2*N-1;j++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<N;k++) {
                    //System.out.println(""""+j+k);
                    vrst[j][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*N-1;i1++){
                for(int j = 0;j<N;j++){
                    bool[vrst[i1][j]]=!bool[vrst[i1][j]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""\n"");
            pw.write(""Case #""+(i+1)+"": ""+a+""\n"");

        }
        pw.close();
    }
}","class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int W = Integer.parseInt(br.readLine());
            int[][] cvste = new int[2*W-1][W];
            for(int dj=0;dj<2*W-1;dj++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<W;k++) {
                    //System.out.println(""""+j+k);
                    cvste[dj][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*W-1;i1++){
                for(int dj = 0;dj<W;dj++){
                    bool[cvste[i1][dj]]=!bool[cvste[i1][dj]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""
"");
            pw.write(""Case #""+(i+1)+"": ""+a+""
"");

        }
        pw.close();
    }
}",399,18,"N:W,j:dj,vrst:cvste,",1334,2.5680026133855200,Beam
2041,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0555730740229300,Beam
2042,,,281,14,,1117,1.9786044081052100,0
2043,,,358,18,,6610,11.020626151561700,0
2044,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), M = scanner.nextLong(), A = scanner.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % A == 0) {
                out.println (ants + M/A - 1 + A);
            } else {
                out.println (ants + M/A + A);
            }
        }

    }
}",156,10,"ans:ants,W:A,C:M,",708,0.9681095083554590,Beam
2045,,,308,12,,745,1.41296226978302,0
2046,,,305,15,,1167,2.108646361033120,0
2047,,,790,14,,4837,10.626232135295900,0
2048,,,169,10,,2388,3.234282330671950,0
2049,,,790,14,,5209,10.976676694552100,0
2050,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                slated.add(i, 0);
            }
            int equateOrg = 0;
            for (int i = 0; i < N; i++) {
                int w = r.nextInt();
                slated.set(i, w);
                equateOrg += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateOrg > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (max == second && equateOrg != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateOrg -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateOrg -= 1;
                }
            }
            if (equateOrg == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateOrg,temp:w,in:r,",1856,3.881079975763960,Beam
2051,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int caseSum = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < caseSum; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int init = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < init) {
                    total0 += init - current;
                    maxMin = Math.max(maxMin, init - current);
                }
                init = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"pw:jpow,prev:init,testCount:caseSum,",1408,2.304734265804290,Beam
2052,,,256,13,,608,1.0988748987515800,0
2053,,,478,22,,11718,19.84611623287200,0
2054,,,269,13,,4390,8.137141144275670,0
2055,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, char, maxdif, c1, s2, d22;
        double race;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            char = 0;
            maxdif = 0;
            c1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(char - w[i], maxdif);
                c1 += Math.max(char - w[i], 0);
                char = w[i];
            }
            race = (double)maxdif / 10;
            
            d22 = (int)(race*10);
            char = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(d22,char);
                char = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + c1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"cur:char,r10:d22,rate:race,m:w,s1:c1,",2295,4.074346864223480,Beam
2056,,,419,16,,6077,11.114550240834600,0
2057,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdifer, s1, s2, r22;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdifer = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdifer = Math.max(cur - w[i], maxdifer);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdifer / 10;
            
            r22 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r22,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"maxdif:maxdifer,rate:rank,m:w,r10:r22,",1706,3.0406246980031300,Beam
2058,,,311,17,,6753,11.740044144789400,0
2059,,,355,19,,1416,2.3037978728612300,0
2060,,,386,18,,939,1.6222931146621700,0
2061,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.4946003556251530,Beam
2062,,,358,18,,915,1.5753132740656500,0
2063,,,254,13,,655,1.0863737384478300,0
2064,,,255,13,,1396,3.125740945339200,0
2065,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int testSum = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testSum; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int init = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < init) {
                    total0 += init - current;
                    maxMin = Math.max(maxMin, init - current);
                }
                init = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"pw:jpow,prev:init,testCount:testSum,",1408,2.3729376554489100,Beam
2066,,,254,13,,951,1.652992339928950,0
2067,,,368,14,,5209,9.618611538410190,0
2068,,,256,13,,681,1.1670390208562200,0
2069,,,265,12,,617,1.0020642518997200,0
2070,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.23236578702926600,Beam
2071,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,0.7230316559473670,Beam
2072,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int p = current;
    int result=0;
    while(p>0){
      result=10*result+(p%10);
      p/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int cases=sen.nextInt();

    for(int t=0;t<cases;t++){
      int p=sen.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[p]);
    }
  }

  private static int[] grade;
  private static final int UNSEEN=-1;
}",302,15,"scanner:sen,distance:grade,n:p,",714,1.1546260555585200,Beam
2073,,,525,23,,13594,23.90171523094180,0
2074,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int w = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[w];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int c = 0 ; c < w-1 ; c++) {
                    dip = Math.max(dip,ar[c]-ar[c+1]);
                    if(ar[c+1]<ar[c]) {
                        ansY += ar[c]-ar[c+1];
                    }
                }
                for(int c = 0 ; c < w-1 ; c++) {
                    int x = Math.min(ar[c],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:w,j:c,",1272,2.23218652009964,Beam
2075,,,306,16,,5240,9.75924422343572,0
2076,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[n]);
    }
  }

  private static int[] grade;
  private static final int UNSEEN=-1;
}",302,15,"distance:grade,",63,0.11830257972081500,Beam
2077,"class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder output = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int numTests = Integer.parseInt(br.readLine());
                    int test;
                    String [] testSplit;
                    int [] mush;
                    
                    // Loop through each test
                    for (int testCounter = 0; testCounter < numTests; ++testCounter) {
                        test=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mush= new int[test];
                        for(int s=0;s<test;s++)
                        {
                            mush[s]=Integer.parseInt(testSplit[s]);
                        }
                        int out1=0,out2=0;
                        int currentDiff=0,maxDiff=0;
                        out1=0;
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s]<mush[s-1])
                            {
                                currentDiff=mush[s-1]-mush[s];
                                out1+=currentDiff;
                                maxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;
                                
                            }
                        }
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s-1]<maxDiff)
                            {
                                out2+=mush[s-1];
                                
                            }
                            else
                            {
                                out2+=maxDiff;
                            }
                        }
                        System.out.println(""Case #""+(testCounter+1)+"": ""+out1+"" ""+out2);
        //                System.out.println(""Done"");
                        output.append(""Case #"").append((testCounter+1)).append("": "").append(out1+"" ""+out2);
                        output.append(""\n"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( output.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}","class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder letter = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int numFables = Integer.parseInt(br.readLine());
                    int train;
                    String [] testSplit;
                    int [] mUSH;
                    
                    // Loop through each test
                    for (int matchCount = 0; matchCount < numFables; ++matchCount) {
                        train=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mUSH= new int[train];
                        for(int n=0;n<train;n++)
                        {
                            mUSH[n]=Integer.parseInt(testSplit[n]);
                        }
                        int inPart=0,in=0;
                        int currentLength=0,out=0;
                        inPart=0;
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n]<mUSH[n-1])
                            {
                                currentLength=mUSH[n-1]-mUSH[n];
                                inPart+=currentLength;
                                out=(out<currentLength)?currentLength:out;
                                
                            }
                        }
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n-1]<out)
                            {
                                in+=mUSH[n-1];
                                
                            }
                            else
                            {
                                in+=out;
                            }
                        }
                        System.out.println(""Case #""+(matchCount+1)+"": ""+inPart+"" ""+in);
        //                System.out.println(""Done"");
                        letter.append(""Case #"").append((matchCount+1)).append("": "").append(inPart+"" ""+in);
                        letter.append(""
"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( letter.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}",443,17,"mush:mUSH,currentDiff:currentLength,maxDiff:out,s:n,test:train,testCounter:matchCount,output:letter,out2:in,out1:inPart,numTests:numFables,",4186,7.733060542742410,Beam
2078,,,262,14,,1024,1.7804048816363000,0
2079,,,302,13,,2250,3.847776202360790,0
2080,,,269,16,,845,1.419485322634380,0
2081,,,406,19,,1024,1.8706841746966000,0
2082,,,265,12,,617,1.03726038535436,0
2083,,,406,19,,7999,14.983446598053000,0
2084,,,273,11,,553,0.9848207473754880,0
2085,,,544,17,,5844,11.861424922943100,0
2086,,,327,16,,744,1.358687404791510,0
2087,,,290,12,,617,1.1032286961873400,0
2088,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader worker = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(worker.readLine());
        for(int count=1;count<=testCases;count++){
            String result="""";
            worker.readLine();
            String char[] = worker.readLine().split("" "");
            
            int n = Integer.MIN_VALUE;
            int key = 0;
            int result0 = 0;
            for(int i = 0; i<char.length-1;i++){
                int idTwo=Integer.parseInt(char[i+1]);
                int e2 = Integer.parseInt(char[i]);
                if((idTwo-e2)<0) key+=-(idTwo-e2);
                if(-(idTwo-e2)>n) n = -(idTwo-e2);
            }
            for(int i = 0; i<char.length-1;i++){
                int e2 = Integer.parseInt(char[i]);
                if(e2>=n) result0 = result0+n;
                else if(e2<n) result0 = result0+e2;
            }
            writer.write(""Case #""+count+"": ""+key+"" ""+result0+""
"");
        }
        worker.close();
        writer.close();

    }

}",316,15,"max:n,i2:idTwo,index:count,result1:key,result2:result0,str:char,i1:e2,reader:worker,",3137,5.989601246515910,Beam
2089,,,420,19,,7084,11.638849035898800,0
2090,,,423,7,,919,1.6210569143295300,0
2091,,,443,17,,2490,4.520972184340160,0
2092,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.3945155739784240,Beam
2093,,,887,27,,1585,3.30159699122111,0
2094,,,256,13,,927,1.667618211110430,0
2095,,,464,17,,5358,10.307407633463500,0
2096,,,544,17,,5844,11.680687042077400,0
2097,,,263,13,,4248,7.073794563611350,0
2098,,,334,15,,1179,2.2275993545850100,0
2099,,,500,19,,8638,15.635958417256700,0
2100,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int numberSum = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int i = 0; i < numberSum; i++) {
            String line1 = letters.get(currentIndex++);
            String cellTwo = letters.get(currentIndex++);
            String[] array = cellTwo.split("" "");
            int[] ins = new int[array.length];
            for (int i94 = 0; i94 < array.length; i94++) {
                ins[i94] = Integer.valueOf(array[i94]);
            }
            int[] boss = ins;
            long[] lockOne = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int anti96 = 0; anti96 < boss.length - 1; anti96++) {
                        if (boss[anti96+1] < boss[anti96]) {
                            lockOne[0] += boss[anti96] - boss[anti96+1];
                        }
                    }
                    
                    int rest = 0;
                    for (int li26 = 0; li26 < boss.length - 1; li26++) {
                        if (boss[li26+1] < boss[li26]) {
                            rest = Math.max(rest, boss[li26] - boss[li26+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < boss.length - 1; i1++) {
                        lockOne[1] += Math.pos(boss[i1], rest);
                    }
            long[] pos = lockOne;
            String r = ""Case #"" + (i + 1) + "": "" + pos[0] + "" "" + pos[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:boss,rate:rest,min1:lockOne,lines:letters,i4:i94,vals:array,i2:anti96,problemCount:numberSum,min:pos,line2:cellTwo,i3:li26,ans:ins,",6629,12.307067994276700,Beam
2101,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner laneChan = null;
        int width;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        width = s.nextInt();
        s.nextLine();
        for (int c = 0; c < width; c++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] lakeValues = new int[currentSize];
            line = s.nextLine();
            laneChan = new Scanner(line);
            int j = 0;
            while (laneChan.hasNextInt()) {
                lakeValues[j] = laneChan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastapestSize = 0;
            for (int w = 1; w < currentSize; w++) {
                if (lakeValues[w] < lakeValues[w - 1]) {
                    firstMethod += lakeValues[w - 1] - lakeValues[w];
                    fastapestSize = Math.max(fastapestSize, lakeValues[w - 1] - lakeValues[w]);
                }
            }
            int secondMethod = 0;
            for (int w = 0; w < currentSize - 1; w++) {
                if (lakeValues[w] > fastapestSize) {
                    secondMethod += fastapestSize;
                } else {
                    secondMethod += lakeValues[w];
                }
            }
            printer.print(""Case #"" + (c + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}",328,16,"fastestRate:fastapestSize,size:width,i:c,m:w,plateValues:lakeValues,lineScan:laneChan,",3132,5.732244781653090,Beam
2102,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7312726418177290,Beam
2103,"class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int rows = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiers = new TreeSet<Integer>();
      for (int i = 0; i < 2 * rows - 1 ; i++) {
        nextLine = reader.readLine();
        String[] row = nextLine.split("" "");
        for (String soldier : row) {
          int height = Integer.valueOf(soldier);
          if (soldiers.contains(height)) {
            soldiers.remove(height);
          } else {
            soldiers.add(height);
          }
        }
      }
      if (soldiers.size() != rows) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer soldier : soldiers) {
        writer.write("" "" + soldier);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}","class B {
  
  public static void main(String mdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String stem = mdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(stem + ""-output.txt"", ""UTF-8""));
    BufferedReader slice = new BufferedReader(new FileReader(stem));

    String firstFile;
    firstFile = slice.readLine(); // ignore count
    int caseNum = 1;
    while ((firstFile = slice.readLine()) != null) {
      int checks = Integer.valueOf(firstFile);

      TreeSet<Integer> soldries = new TreeSet<Integer>();
      for (int li = 0; li < 2 * checks - 1 ; li++) {
        firstFile = slice.readLine();
        String[] r = firstFile.split("" "");
        for (String oldica : r) {
          int width = Integer.valueOf(oldica);
          if (soldries.contains(width)) {
            soldries.remove(width);
          } else {
            soldries.add(width);
          }
        }
      }
      if (soldries.size() != checks) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer oldica : soldries) {
        writer.write("" "" + oldica);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}",295,15,"height:width,row:r,rows:checks,i:li,soldiers:soldries,soldier:oldica,reader:slice,nextLine:firstFile,cmdArgs:mdArgs,filename:stem,",2118,4.065480482578280,Beam
2104,,,292,17,,6581,11.122902528444900,0
2105,,,256,13,,3405,6.258276426792150,0
2106,,,260,13,,3969,6.483188688755040,0
2107,,,281,14,,4837,8.468489448229470,0
2108,"class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder output = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int numTests = Integer.parseInt(br.readLine());
                    int test;
                    String [] testSplit;
                    int [] mush;
                    
                    // Loop through each test
                    for (int testCounter = 0; testCounter < numTests; ++testCounter) {
                        test=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mush= new int[test];
                        for(int s=0;s<test;s++)
                        {
                            mush[s]=Integer.parseInt(testSplit[s]);
                        }
                        int out1=0,out2=0;
                        int currentDiff=0,maxDiff=0;
                        out1=0;
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s]<mush[s-1])
                            {
                                currentDiff=mush[s-1]-mush[s];
                                out1+=currentDiff;
                                maxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;
                                
                            }
                        }
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s-1]<maxDiff)
                            {
                                out2+=mush[s-1];
                                
                            }
                            else
                            {
                                out2+=maxDiff;
                            }
                        }
                        System.out.println(""Case #""+(testCounter+1)+"": ""+out1+"" ""+out2);
        //                System.out.println(""Done"");
                        output.append(""Case #"").append((testCounter+1)).append("": "").append(out1+"" ""+out2);
                        output.append(""\n"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( output.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}","class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder letter = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int NumFables = Integer.parseInt(br.readLine());
                    int train;
                    String [] testSplit;
                    int [] mUSH;
                    
                    // Loop through each test
                    for (int matchCount = 0; matchCount < NumFables; ++matchCount) {
                        train=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mUSH= new int[train];
                        for(int n=0;n<train;n++)
                        {
                            mUSH[n]=Integer.parseInt(testSplit[n]);
                        }
                        int inPart=0,in=0;
                        int currentLength=0,out=0;
                        inPart=0;
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n]<mUSH[n-1])
                            {
                                currentLength=mUSH[n-1]-mUSH[n];
                                inPart+=currentLength;
                                out=(out<currentLength)?currentLength:out;
                                
                            }
                        }
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n-1]<out)
                            {
                                in+=mUSH[n-1];
                                
                            }
                            else
                            {
                                in+=out;
                            }
                        }
                        System.out.println(""Case #""+(matchCount+1)+"": ""+inPart+"" ""+in);
        //                System.out.println(""Done"");
                        letter.append(""Case #"").append((matchCount+1)).append("": "").append(inPart+"" ""+in);
                        letter.append(""
"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( letter.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}",443,17,"mush:mUSH,currentDiff:currentLength,maxDiff:out,s:n,test:train,testCounter:matchCount,output:letter,out2:in,out1:inPart,numTests:NumFables,",4186,7.680354754130050,Beam
2109,,,419,16,,6077,11.148326539993300,0
2110,,,419,16,,1303,2.4765194098154700,0
2111,,,256,13,,1021,1.746945317586260,0
2112,"class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] R = new int[N + 1];
            R[0] = sc.nextInt();
            int[] P = new int[N + 1];
            P[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                P[i + 1] = (P[i] + R[i] - S[i]) / 2;
                R[i + 1] = (R[i] + S[i] - P[i]) / 2;
                S[i + 1] = (P[i] + S[i] - R[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (R[N] == 1) {
                System.out.println(r[N]);
            } else if (P[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}","class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] RN = new int[N + 1];
            RN[0] = sc.nextInt();
            int[] PA = new int[N + 1];
            PA[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                PA[i + 1] = (PA[i] + RN[i] - S[i]) / 2;
                RN[i + 1] = (RN[i] + S[i] - PA[i]) / 2;
                S[i + 1] = (PA[i] + S[i] - RN[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (RN[i] < 0 || PA[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (RN[N] == 1) {
                System.out.println(r[N]);
            } else if (PA[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}",619,14,"R:RN,P:PA,",476,0.8782971938451130,Beam
2113,,,417,18,,3845,7.477293229103090,0
2114,,,406,17,,5260,10.893593263626100,0
2115,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.1994631886482200,Beam
2116,"class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int rows = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiers = new TreeSet<Integer>();
      for (int i = 0; i < 2 * rows - 1 ; i++) {
        nextLine = reader.readLine();
        String[] row = nextLine.split("" "");
        for (String soldier : row) {
          int height = Integer.valueOf(soldier);
          if (soldiers.contains(height)) {
            soldiers.remove(height);
          } else {
            soldiers.add(height);
          }
        }
      }
      if (soldiers.size() != rows) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer soldier : soldiers) {
        writer.write("" "" + soldier);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}","class B {
  
  public static void main(String mdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String stem = mdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(stem + ""-output.txt"", ""UTF-8""));
    BufferedReader slice = new BufferedReader(new FileReader(stem));

    String firstFile;
    firstFile = slice.readLine(); // ignore count
    int caseNum = 1;
    while ((firstFile = slice.readLine()) != null) {
      int checks = Integer.valueOf(firstFile);

      TreeSet<Integer> soldries = new TreeSet<Integer>();
      for (int li = 0; li < 2 * checks - 1 ; li++) {
        firstFile = slice.readLine();
        String[] r = firstFile.split("" "");
        for (String oldica : r) {
          int width = Integer.valueOf(oldica);
          if (soldries.contains(width)) {
            soldries.remove(width);
          } else {
            soldries.add(width);
          }
        }
      }
      if (soldries.size() != checks) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer oldica : soldries) {
        writer.write("" "" + oldica);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}",295,15,"height:width,row:r,rows:checks,i:li,soldiers:soldries,soldier:oldica,reader:slice,nextLine:firstFile,cmdArgs:mdArgs,filename:stem,",2118,4.004555412133540,Beam
2117,,,211,11,,2760,4.268317437171940,0
2118,,,132,9,,1437,1.7411184390385900,0
2119,,,257,11,,2884,5.149816207091010,0
2120,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.1973021984100300,Beam
2121,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7881939133008320,Beam
2122,,,265,12,,3391,5.5534608920415200,0
2123,,,266,13,,3582,6.126624842484790,0
2124,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.172514263788860,Beam
2125,,,464,17,,5358,10.195101694266000,0
2126,,,344,15,,772,1.3281593044598900,0
2127,,,292,17,,6787,11.336641538143200,0
2128,,,292,15,,5796,9.538361664613090,0
2129,,,525,23,,13519,22.848968148231500,0
2130,,,468,20,,9000,16.743848450978600,0
2131,,,317,12,,3402,6.088125272591910,0
2132,,,334,15,,5426,10.420838284492500,0
2133,,,419,16,,2853,5.29066238005956,0
2134,,,265,12,,617,1.044889235496520,0
2135,,,348,14,,3517,6.371944510936740,0
2136,,,326,14,,4899,8.58976184129715,0
2137,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.17541510661443100,Beam
2138,,,366,17,,6139,10.358541433016500,0
2139,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException n) {
                n.printStackTrace();
            }
        }
        Scanner sq = new Scanner(System.in);
        int M = sq.nextInt();
        for(int SCasing=1;SCasing<=M;SCasing++){
            int N = sq.nextInt(), P = sq.nextInt(), NW = sq.nextInt();
            int P = 0, ares = 0;
            ares += N*(P/NW);
            if (P%NW==0)ares+=NW-1;
            else ares+=NW;
            System.out.println(""Case #""+SCasing+"": ""+ares);
        }
    }
}",309,11,"C:P,R:N,W:NW,res:ares,CASE:SCasing,sc:sq,T:M,r:m,e:n,",1737,2.952543012301130,Beam
2140,,,184,9,,1892,3.248148675759630,0
2141,,,393,19,,1493,2.5112972418467200,0
2142,,,292,17,,3007,5.233963191509250,0
2143,,,263,13,,993,1.7673850933710700,0
2144,,,328,16,,5302,9.761517842610680,0
2145,,,262,14,,3504,6.364236323038740,0
2146,,,292,16,,4155,7.0863365491231300,0
2147,,,334,15,,1179,2.362376419703170,0
2148,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));
        
        int t = Integer.parseInt(in.readLine());
        
        for (int i = 1; i <= t; i++) {
            int res = 0;
            // body of the program
            
            String[] next = in.readLine().split("" "");
            int r = Integer.parseInt(next[0]);
            int c = Integer.parseInt(next[1]);
            int w = Integer.parseInt(next[2]);
            
            int row = (c - w) / w;
            if (c % w == 0) row += w;
            else row += w + 1;
            
            res = r*row;
            
            System.out.format(""Case #%d: %d\n"", i, res);
        }
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));
        
        int t = Integer.parseInt(in.readLine());
        
        for (int i = 1; i <= t; i++) {
            int res = 0;
            // body of the program
            
            String[] then = in.readLine().split("" "");
            int r = Integer.parseInt(then[0]);
            int m = Integer.parseInt(then[1]);
            int wed = Integer.parseInt(then[2]);
            
            int scale = (m - wed) / wed;
            if (m % wed == 0) scale += wed;
            else scale += wed + 1;
            
            res = r*scale;
            
            System.out.format(""Case #%d: %d
"", i, res);
        }
    }
}",172,11,"w:wed,row:scale,c:m,next:then,",1241,1.8430757761001600,Beam
2149,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                slated.add(i, 0);
            }
            int equateOrg = 0;
            for (int i = 0; i < N; i++) {
                int w = r.nextInt();
                slated.set(i, w);
                equateOrg += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateOrg > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (max == second && equateOrg != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateOrg -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateOrg -= 1;
                }
            }
            if (equateOrg == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateOrg,temp:w,in:r,",1856,3.8779537161191300,Beam
2150,,,149,10,,2233,2.7526790579160100,0
2151,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.3395734906196590,Beam
2152,,,269,13,,4394,8.001170786221820,0
2153,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6279591202735900,Beam
2154,,,250,11,,2450,4.169794515768690,0
2155,,,327,16,,744,1.30386727253596,0
2156,,,443,17,,5241,9.629922501246140,0
2157,"class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String str = br.readLine();
            StringTokenizer token = new StringTokenizer(str, "" "");
        
            int[] m = new int[N];
            int max = 0;
            for (int j = 0; j < N; j++) {
                m[j] = Integer.parseInt(token.nextToken());
                if (j > 0 && m[j] - m[j - 1] < 0) {
                    max = Math.max(max, m[j - 1] - m[j]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int j = 1; j < N; j++) {
                if (m[j] - m[j - 1] < 0) {
                    ans_x += m[j - 1] - m[j];
                }
                if (m[j - 1] <= max) {
                    ans_y += m[j - 1];
                } else {
                    ans_y += max;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r\n"");
        }
        bw.close();
        br.close();
    }
}","class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String char = br.readLine();
            StringTokenizer r = new StringTokenizer(char, "" "");
        
            int[] w = new int[N];
            int count = 0;
            for (int c = 0; c < N; c++) {
                w[c] = Integer.parseInt(r.nextToken());
                if (c > 0 && w[c] - w[c - 1] < 0) {
                    count = Math.count(count, w[c - 1] - w[c]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int c = 1; c < N; c++) {
                if (w[c] - w[c - 1] < 0) {
                    ans_x += w[c - 1] - w[c];
                }
                if (w[c - 1] <= count) {
                    ans_y += w[c - 1];
                } else {
                    ans_y += count;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r
"");
        }
        bw.close();
        br.close();
    }
}",344,15,"max:count,m:w,token:r,j:c,str:char,",2281,3.76609069108963,Beam
2158,,,269,16,,5816,9.47020359436671,0
2159,,,327,16,,1146,2.0524755279223100,0
2160,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.9505170305569970,Beam
2161,,,198,10,,2451,4.283352255821230,0
2162,,,281,14,,745,1.291589331626890,0
2163,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int mix = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, mix);
                sum += mix;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:mix,max:w,",462,0.7345911860466000,Beam
2164,,,292,15,,1511,2.6814944903055800,0
2165,,,278,15,,5213,8.744410447279610,0
2166,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ansalt = 0;
            int n = Integer.parseInt(br.readLine());
            int[] opera = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < opera.length; j++)
                opera[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < opera.length - 1; j++) {
                int f = opera[j];
                int w = opera[j + 1];
                
                if (w < f)
                    ans1 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < opera.length - 1; j++) {
                int f = opera[j];
                int w = opera[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < opera.length - 1; j++) {
                if (opera[j] < size)
                    ansalt += opera[j];
                else
                    ansalt += size;
            }
            
            pw.println(String.format(prefix, i, ans1, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:opera,max:size,s:w,ans2:ansalt,",2218,3.78833061059316,Beam
2167,,,426,18,,3961,7.695713512102760,0
2168,"class ProblemB {
    public static void main (String[] args) throws FileNotFoundException {

        FileReader file = new FileReader(""B-large.in"");
        Scanner in = new Scanner(file);
        PrintWriter out = new PrintWriter(""output.txt"");

        int t = in.nextInt();

        for(int b = 1; b<=t; b++) {
            int n = in.nextInt();
            int[] a = new int[2501];
            int[] result = new int[n];
            int k = 0;
            for (int i = 0; i < ((2 * n - 1) * n); i++) {
                a[in.nextInt()] += 1;

            }

            for(int j = 0; j<a.length; j++)
            {
                if(!((a[j] % 2)== 0))
                {
                    result[k] = j;
                    k++;
                }

            }
            String output ="""";
            for(int s = 0; s<result.length; s++)
            {
                output += "" "" + result[s];
            }
            out.println(""Case #"" + b +"":"" + output);
        }

        in.close();
        out.close();
    }
}","class ProblemB {
    public static void main (String[] args) throws FileNotFoundException {

        FileReader file = new FileReader(""B-large.in"");
        Scanner r = new Scanner(file);
        PrintWriter out = new PrintWriter(""output.txt"");

        int t = r.nextInt();

        for(int b = 1; b<=t; b++) {
            int w = r.nextInt();
            int[] a = new int[2501];
            int[] diff = new int[w];
            int k = 0;
            for (int i = 0; i < ((2 * w - 1) * w); i++) {
                a[r.nextInt()] += 1;

            }

            for(int j = 0; j<a.length; j++)
            {
                if(!((a[j] % 2)== 0))
                {
                    diff[k] = j;
                    k++;
                }

            }
            String output ="""";
            for(int s = 0; s<diff.length; s++)
            {
                output += "" "" + diff[s];
            }
            out.println(""Case #"" + b +"":"" + output);
        }

        r.close();
        out.close();
    }
}",246,15,"n:w,result:diff,in:r,",1133,1.8883934020996100,Beam
2169,,,290,12,,617,1.0973666032155400,0
2170,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSeKEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSeKEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSeKEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int cases=sen.nextInt();

    for(int t=0;t<cases;t++){
      int n=sen.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[n]);
    }
  }

  private static int[] grade;
  private static final int UNSeKEN=-1;
}",302,15,"scanner:sen,distance:grade,UNSEEN:UNSeKEN,",683,1.1178621848424300,Beam
2171,,,500,19,,8685,15.389604286352800,0
2172,,,479,25,,8218,14.48701765537260,0
2173,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    queryIn    = new Scanner(System.in);
        
        int C    = queryIn.nextInt();
        
        for(int index=0; index<C; ++index) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        row    = queryIn.nextInt();
            int        a    = queryIn.nextInt();
            int        row    = queryIn.nextInt();
            int    total    = row*a;
            int    ref2        = 0;
            
            //    scan
            ref2    = row*(a/row);
            
            if(a % row == 0) {
                ref2    += row-1;
            } else if( row == 1) {
            } else {
                ref2    += row;
            }
            
            int    continue    = ref2;
            
            System.out.println(""Case #"" + (index+1) + "": "" + continue);
        }
        
        queryIn.close();
    }
}",171,10,"w:row,c:a,ret1:ref2,r:row,i:index,ret:continue,scanIn:queryIn,T:C,",2109,3.1593820889790900,Beam
2174,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6381308197975160,Beam
2175,,,300,13,,3766,5.9970635890960700,0
2176,,,132,9,,1702,1.988014034430190,0
2177,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.2054934859275800,Beam
2178,,,257,11,,2450,4.406166076660160,0
2179,,,517,26,,1871,3.6934845169385300,0
2180,,,266,13,,3305,5.896909936269120,0
2181,"class CounterCulture {

    /**
     * @param args
     */
    public static void main(String[] args) throws IOException {
        CounterCulture instance = new CounterCulture();
        BufferedReader br = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"", ""UTF-8"");
        
        
        int MAX = 1000001;
        
        int[] res = new int[MAX];
        
        res[1] = 1;
        
        for(int i=2;i<MAX;++i) {
            int r = Integer.parseInt(new StringBuffer(new Integer(i).toString()).reverse().toString());
            int r_r = Integer.parseInt(new StringBuffer(new Integer(r).toString()).reverse().toString());
            if(r<i && i == r_r) {
                res[i] = Math.min(res[i-1], res[r])+1;
            }
            else
                res[i] = res[i-1]+1;
        }
        
        
        
        try {
            String line = br.readLine();
            
            int t = Integer.parseInt(line);
            
            for(int i=1;i<=t;++i) {
                int n = Integer.parseInt(br.readLine());
                
                writer.print(""Case #"" + new Integer(i).toString() + "": "" + res[n]);
                
                if(i<t)
                    writer.println();
            }
        } finally {
            br.close();
            writer.close();
        }
    }

}","class CounterCulture {

    /**
     * @param args
     */
    public static void main(String[] args) throws IOException {
        CounterCulture instance = new CounterCulture();
        BufferedReader br = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter w = new PrintWriter(""out.txt"", ""UTF-8"");
        
        
        int RR = 1000001;
        
        int[] res = new int[RR];
        
        res[1] = 1;
        
        for(int c=2;c<RR;++c) {
            int r = Integer.parseInt(new StringBuffer(new Integer(c).toString()).reverse().toString());
            int r_r = Integer.parseInt(new StringBuffer(new Integer(r).toString()).reverse().toString());
            if(r<c && c == r_r) {
                res[c] = Math.min(res[c-1], res[r])+1;
            }
            else
                res[c] = res[c-1]+1;
        }
        
        
        
        try {
            String line = br.readLine();
            
            int t = Integer.parseInt(line);
            
            for(int c=1;c<=t;++c) {
                int c = Integer.parseInt(br.readLine());
                
                w.print(""Case #"" + new Integer(c).toString() + "": "" + res[c]);
                
                if(c<t)
                    w.println();
            }
        } finally {
            br.close();
            w.close();
        }
    }

}",303,12,"writer:w,i:c,n:c,MAX:RR,",1146,2.0343674381574000,Beam
2182,,,295,15,,1064,1.8710286696751900,0
2183,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.020701241493230,Beam
2184,,,281,14,,5209,8.461588327089950,0
2185,,,478,22,,11774,19.374340037504800,0
2186,,,358,16,,838,1.5308634003003400,0
2187,,,269,13,,4382,7.818919920921330,0
2188,,,262,14,,3504,6.464029506842300,0
2189,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int c=0;c<t;c++){
        int n=inp.nextInt();
        int[] img=new int[n];
        for(int j=0;j<n;j++){
            img[j]=inp.nextInt();
        }
        int mean2=0;
        int miss32=0;
        for(int kick=0;kick<n-1;kick++){
            
            int y=(img[kick]-img[kick+1]>0)? img[kick]-img[kick+1]:0;
            mean2+=y;
        
        }
        int w=0;
        for(int r=0;r<n-1;r++){
            w=Math.max(w,img[r]-img[r+1]);
        }
        for(int c=0;c<n-1;c++){
            int x=(img[c]<=w)?img[c]:w;
            miss32+=x;
        }

        System.out.println(""Case #""+(c+1)+"": ""+mean2+"" ""+miss32);
    }
}
}",272,16,"arr:img,sum1:mean2,sum2:miss32,h:r,k:kick,d:c,v:w,i:c,",4285,6.0043674071629800,Beam
2190,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int N = Integer.parseInt(st.nextToken());
            int N = Integer.parseInt(st.nextToken());

            if (N == N)
                out.println(N+R-1);
            else if (N < 2*N)
                out.println(R+N);
            else if (N == 2*N)
                out.println(2*R-1+N);
            else {
                int rem = N%N;
                if (rem == 0) {
                    out.println((N*R)/N-1+N);
                }
                else {
                    out.println((N/N)*R+N);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}",273,11,"C:N,W:N,",423,0.738817286491394,Beam
2191,,,553,21,,6464,11.702321072419500,0
2192,,,517,26,,8920,16.040561672051700,0
2193,,,269,16,,5615,8.867772563298540,0
2194,,,262,14,,993,1.6955633799235000,0
2195,,,328,16,,1241,2.2572094599405900,0
2196,,,305,15,,5228,9.122805166244510,0
2197,,,417,18,,3845,7.460585633913680,0
2198,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                slated.add(i, 0);
            }
            int equateOrg = 0;
            for (int i = 0; i < N; i++) {
                int w = r.nextInt();
                slated.set(i, w);
                equateOrg += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateOrg > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (max == second && equateOrg != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateOrg -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateOrg -= 1;
                }
            }
            if (equateOrg == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateOrg,temp:w,in:r,",1856,3.813092950979870,Beam
2199,,,246,15,,5262,8.816471258799230,0
2200,,,618,26,,10739,18.050492024421700,0
2201,,,311,17,,2515,4.215254906813300,0
2202,,,265,12,,617,1.0470313429832500,0
2203,,,358,18,,6741,11.468960587183600,0
2204,,,306,13,,2946,5.604940819740300,0
2205,,,326,14,,4899,8.614032860596980,0
2206,,,324,13,,4248,7.6384928822517400,0
2207,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader yr = new BufferedReader(new FileReader(args[0]));
        PrintWriter print = new PrintWriter(args[1], ""UTF-8"");

        int M = Integer.parseInt(yr.readLine());
        for (int i = 1; i <= M; ++i) {
            print.print(""Case #""+i+"": "");            

            StringTokenizer start = new StringTokenizer(yr.readLine());
            int A = Integer.parseInt(start.nextToken());
            int VC = Integer.parseInt(start.nextToken());
            int Q = Integer.parseInt(start.nextToken());

            if (Q == VC)
                print.println(Q+A-1);
            else if (VC < 2*Q)
                print.println(A+Q);
            else if (VC == 2*Q)
                print.println(2*A-1+Q);
            else {
                int rev = VC%Q;
                if (rev == 0) {
                    print.println((VC*A)/Q-1+Q);
                }
                else {
                    print.println((VC/Q)*A+Q);
                }
            }
        }

        print.flush();
        print.close();

        System.exit(0);
    }
}",273,11,"W:Q,rem:rev,C:VC,R:A,out:print,br:yr,st:start,t:i,T:M,",2441,4.258810420831040,Beam
2208,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int cell = sc.nextInt();
      int ow = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<cell; k+=ow) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+ow-1);
    }
    System.out.println(res);
  }
}",187,12,"w:ow,col:cell,",621,0.8301778197288510,Beam
2209,,,358,18,,6688,11.63003086646400,0
2210,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans = 0;
            int ansalt = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                if (size < w)
                    ans += (w - size);
            }
            
            //2
            int now = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                int c = w - size;
                if (c > now)
                    now = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < now)
                    ansalt += rows[j];
                else
                    ansalt += now;
            }
            
            pw.println(String.format(print, i, ans, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:now,s:size,prefix:print,ans2:ansalt,ans1:ans,f:w,",4308,7.316827623049420,Beam
2211,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int trials = scan.nextInt();

        for (int i = 0; i < trials; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int u = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (u / time) + (u - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"w:time,ans:ants,c:u,cases:trials,",1086,1.4393780867258700,Beam
2212,,,572,15,,5218,10.309829334418000,0
2213,,,790,14,,4837,10.220101698239600,0
2214,,,605,21,,9812,15.719288798173300,0
2215,,,460,16,,5302,10.822068079312600,0
2216,,,311,17,,2965,4.975045879681910,0
2217,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int li=0;li<1000001;li++)
      grade[li]=UnSeKEN;
    Queue<Integer> w=new LinkedList<Integer>();
    grade[1]=1;
    w.add(1);
    while(!w.isEmpty()){
      int current=w.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nc=d+1;
        grade[next]=nc;
        w.add(next);
      }
    int c = current;
    int result=0;
    while(c>0){
      result=10*result+(c%10);
      c/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nc=d+1;
        grade[next]=nc;
        w.add(next);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int places=sen.nextInt();

    for(int ot=0;ot<places;ot++){
      int c=sen.nextInt();
      System.out.println(""Case #""+(ot+1)+"": ""+grade[c]);
    }
  }

  private static int[] grade;
  private static final int UnSeKEN=-1;
}",302,15,"distance:grade,scanner:sen,n:c,UNSEEN:UnSeKEN,i:li,cases:places,t:ot,q:w,nd:nc,",1861,2.9836933851242100,Beam
2218,,,345,16,,861,1.4529821515083300,0
2219,,,257,11,,2698,4.903146513303120,0
2220,,,420,19,,7084,12.241794923941300,0
2221,,,306,13,,2946,5.600419489542640,0
2222,,,517,26,,1871,3.7770740429560300,0
2223,,,321,18,,6952,11.305014197031700,0
2224,,,281,14,,745,1.2947061657905600,0
2225,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.497054922580719,Beam
2226,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.3526127537091570,Beam
2227,,,348,14,,3523,6.380400486787160,0
2228,,,306,13,,931,1.795812185605370,0
2229,,,265,12,,3391,5.540511544545490,0
2230,,,198,10,,2205,3.90206036567688,0
2231,,,292,16,,4155,6.995846800009410,0
2232,,,358,18,,6680,11.51561514933900,0
2233,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.2091098467508950,Beam
2234,,,387,15,,5240,10.199277396996800,0
2235,,,169,10,,2202,2.9180721004804000,0
2236,,,269,13,,4382,7.981886339187620,0
2237,,,260,11,,2512,4.365529576937360,0
2238,"class Solution {

    public static void main(String[] args) throws Exception {
        Solution r = new Solution();
        Scanner sc = new Scanner(new FileReader(""input.txt""));
        PrintWriter pw = new PrintWriter(new FileWriter(""output.txt""));
        
        int caseCnt = sc.nextInt();
        
        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
            pw.print(""Case #"" + (caseNum + 1) + "": "");
        
            int R = sc.nextInt();
            int C = sc.nextInt();
            int res = 0;
            String board[] = new String[R];
            sc.nextLine();
            for (int i = 0; i < R; i++) {
                board[i] = sc.nextLine();
            }
            int max = 101;
            int dirX[] = {-1, 1, 0, 0};
            int dirY[] = {0, 0, 1, -1};
            String dir = ""^v><"";
            boolean possible = true;
            for (int i = 0; i < R && possible; i++) {
                for (int j = 0; j < C && possible; j++) {
                    int curDir = dir.indexOf(board[i].charAt(j));
                    int curX = i;
                    int curY = j;
                    boolean reachEnd = false;
                    if (curDir >= 0) {
                        for (int k = 0; k < max; k++) {
                            curX = curX + dirX[curDir];
                            curY = curY + dirY[curDir];
                            if (curX < R && curX >= 0 && curY < C && curY >= 0) {
                                if (board[curX].charAt(curY) != '.')
                                    break;
                            } else {
                                reachEnd = true;
                                break;
                            }
                        }
                        if (reachEnd) {
                            possible = false;
                            for (int d = 0; d < 4 && !possible; d++) {
                                curX = i;
                                curY = j;
                                for (int k = 0; k < max; k++) {
                                    curX = curX + dirX[d];
                                    curY = curY + dirY[d];
                                    if (curX < R && curX >= 0 && curY < C && curY >= 0) {
                                        if (board[curX].charAt(curY) != '.') {
                                            possible = true;
                                            res++;
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!possible) {
                pw.println(""IMPOSSIBLE"");
            } else {
                pw.println(res);
            }
        }
        
        pw.flush();
        pw.close();
        sc.close();
    }
}","class Solution {

    public static void main(String[] args) throws Exception {
        Solution r = new Solution();
        Scanner sc = new Scanner(new FileReader(""input.txt""));
        PrintWriter p = new PrintWriter(new FileWriter(""output.txt""));
        
        int caseCnt = sc.nextInt();
        
        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
            p.print(""Case #"" + (caseNum + 1) + "": "");
        
            int W = sc.nextInt();
            int C = sc.nextInt();
            int res = 0;
            String board[] = new String[W];
            sc.nextLine();
            for (int i = 0; i < W; i++) {
                board[i] = sc.nextLine();
            }
            int max = 101;
            int dirX[] = {-1, 1, 0, 0};
            int dirY[] = {0, 0, 1, -1};
            String dir = ""^v><"";
            boolean possible = true;
            for (int i = 0; i < W && possible; i++) {
                for (int j = 0; j < C && possible; j++) {
                    int curDir = dir.indexOf(board[i].charAt(j));
                    int curX = i;
                    int curY = j;
                    boolean reachEnd = false;
                    if (curDir >= 0) {
                        for (int k = 0; k < max; k++) {
                            curX = curX + dirX[curDir];
                            curY = curY + dirY[curDir];
                            if (curX < W && curX >= 0 && curY < C && curY >= 0) {
                                if (board[curX].charAt(curY) != '.')
                                    break;
                            } else {
                                reachEnd = true;
                                break;
                            }
                        }
                        if (reachEnd) {
                            possible = false;
                            for (int d = 0; d < 4 && !possible; d++) {
                                curX = i;
                                curY = j;
                                for (int k = 0; k < max; k++) {
                                    curX = curX + dirX[d];
                                    curY = curY + dirY[d];
                                    if (curX < W && curX >= 0 && curY < C && curY >= 0) {
                                        if (board[curX].charAt(curY) != '.') {
                                            possible = true;
                                            res++;
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!possible) {
                p.println(""IMPOSSIBLE"");
            } else {
                p.println(res);
            }
        }
        
        p.flush();
        p.close();
        sc.close();
    }
}",525,23,"R:W,pw:p,",678,1.1172224005063400,Beam
2239,,,169,10,,2295,2.850267453988390,0
2240,,,200,10,,714,0.9188079476356510,0
2241,,,328,16,,5302,9.372991339365640,0
2242,,,393,19,,979,1.6415945053100600,0
2243,,,200,10,,2233,3.118892800807950,0
2244,,,280,13,,3163,5.626044491926830,0
2245,,,281,14,,4961,8.730774998664860,0
2246,,,271,12,,3228,5.663986508051550,0
2247,,,132,9,,1906,2.252194857597350,0
2248,,,308,12,,1830,3.586441151301070,0
2249,,,348,14,,3883,6.646691807111110,0
2250,,,292,15,,2566,4.232643858591720,0
2251,,,419,16,,1737,3.0630698720614100,0
2252,,,254,13,,951,1.5094394445419300,0
2253,,,406,19,,1024,1.7383395473162300,0
2254,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] r=new int[n];
        for(int j=0;j<n;j++){
            r[j]=inp.nextInt();
        }
        int parse8=0;
        int miss32=0;
        for(int k=0;k<n-1;k++){
            
            int y=(r[k]-r[k+1]>0)? r[k]-r[k+1]:0;
            parse8+=y;
        
        }
        int w=0;
        for(int r=0;r<n-1;r++){
            w=Math.max(w,r[r]-r[r+1]);
        }
        for(int c=0;c<n-1;c++){
            int x=(r[c]<=w)?r[c]:w;
            miss32+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+parse8+"" ""+miss32);
    }
}
}",272,16,"sum1:parse8,sum2:miss32,h:r,d:c,v:w,arr:r,",3272,4.590019373099010,Beam
2255,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] fr=new int[n];
        for(int j=0;j<n;j++){
            fr[j]=inp.nextInt();
        }
        int mean01=0;
        int miss32=0;
        for(int kick=0;kick<n-1;kick++){
            
            int y=(fr[kick]-fr[kick+1]>0)? fr[kick]-fr[kick+1]:0;
            mean01+=y;
        
        }
        int w=0;
        for(int r=0;r<n-1;r++){
            w=Math.max(w,fr[r]-fr[r+1]);
        }
        for(int c=0;c<n-1;c++){
            int x=(fr[c]<=w)?fr[c]:w;
            miss32+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+mean01+"" ""+miss32);
    }
}
}",272,16,"arr:fr,sum1:mean01,sum2:miss32,h:r,k:kick,v:w,d:c,",3802,5.317782656351730,Beam
2256,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int RA = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[RA][C];
            for (int i = 0; i < RA; i++) {
                String S = in.next();
                for (int dj = 0; dj < C; dj++) {
                    char w = S.charAt(dj);
                    if (w == '.')
                        G[i][dj] = EMPTY;
                    else if (w == '<')
                        G[i][dj] = LEUP;
                    else if (w == '>')
                        G[i][dj] = RIGHT;
                    else if (w == 'v')
                        G[i][dj] = DOWN;
                    else if (w == '^')
                        G[i][dj] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < RA; r++) {
                for (int w = 0; w < C; w++) {
                    if (G[r][w] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = w + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < RA && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][w]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEUP = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}",513,26,"R:RA,c:w,j:dj,LEFT:LEUP,",3372,5.823156348864240,Beam
2257,,,265,12,,617,1.022997295856480,0
2258,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7677049199740090,Beam
2259,,,290,12,,617,1.0742000182469700,0
2260,,,393,19,,979,1.6255245923996000,0
2261,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.29536325534184800,Beam
2262,,,460,16,,5302,10.646292984485600,0
2263,"class Main {
    public static final String ALPHABET[] = {
        ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""
    };
    public static void main(String[] args) throws Exception {
        // set up scanner and iterate over test cases
        Scanner scanner = new Scanner(new FileInputStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.in""));
        PrintStream output = new PrintStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.out"");
        int T = scanner.nextInt();
        for (int t = 1; t <= T; ++t) {
            // get parameters
            int N = scanner.nextInt();
            int[] parties = new int[N];
            int senatorsCount = 0;
            for (int n = 0; n < N; ++n)
                senatorsCount += (parties[n] = scanner.nextInt());
            // solve problem
            output.print(""Case #"" + t + "":"");
            while (senatorsCount > 0) {
                // find largest party / parties
                int maxC1 = 0;
                int maxC2 = 0;
                int maxI1 = 0;
                int maxI2 = 0;
                for (int party = 0; party < N; ++party)
                    if (parties[party] > maxC1) {
                        maxC2 = maxC1;
                        maxI2 = maxI1;
                        maxC1 = parties[party];
                        maxI1 = party;
                    }
                    else if (parties[party] == maxC1 || parties[party] > maxC2) {
                        maxC2 = parties[party];
                        maxI2 = party;
                    }
                // remove at least one senator
                output.print("" "" + ALPHABET[maxI1]);
                --maxC1;
                --parties[maxI1];
                --senatorsCount;
                // decide if a second senator should leave
                if (maxC1 > maxC2) {
                    // remove 2nd senator from this party
                    output.print(ALPHABET[maxI1]);
                    --maxC1;
                    --parties[maxI1];
                    --senatorsCount;
                }
                else if (senatorsCount == 1 || 2 * maxC2 > senatorsCount) {
                    // remove 2nd senator from 2nd party
                    output.print(ALPHABET[maxI2]);
                    --maxC2;
                    --parties[maxI2];
                    --senatorsCount;
                }
            }
            output.println();
        }
        output.close();
        System.out.println(""finished"");
    }
}","class Main {
    public static final String ALPHABET[] = {
        ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""
    };
    public static void main(String[] args) throws Exception {
        // set up scanner and iterate over test cases
        Scanner scanner = new Scanner(new FileInputStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.in""));
        PrintStream output = new PrintStream(
            ""C:\\Users\\Stefan\\Downloads\\A-large.out"");
        int R = scanner.nextInt();
        for (int t = 1; t <= R; ++t) {
            // get parameters
            int W = scanner.nextInt();
            int[] games = new int[W];
            int encersCount = 0;
            for (int c = 0; c < W; ++c)
                encersCount += (games[c] = scanner.nextInt());
            // solve problem
            output.print(""Case #"" + t + "":"");
            while (encersCount > 0) {
                // find largest party / parties
                int maxC1 = 0;
                int maxC2 = 0;
                int maxI1 = 0;
                int maxI2 = 0;
                for (int currency = 0; currency < W; ++currency)
                    if (games[currency] > maxC1) {
                        maxC2 = maxC1;
                        maxI2 = maxI1;
                        maxC1 = games[currency];
                        maxI1 = currency;
                    }
                    else if (games[currency] == maxC1 || games[currency] > maxC2) {
                        maxC2 = games[currency];
                        maxI2 = currency;
                    }
                // remove at least one senator
                output.print("" "" + ALPHABET[maxI1]);
                --maxC1;
                --games[maxI1];
                --encersCount;
                // decide if a second senator should leave
                if (maxC1 > maxC2) {
                    // remove 2nd senator from this party
                    output.print(ALPHABET[maxI1]);
                    --maxC1;
                    --games[maxI1];
                    --encersCount;
                }
                else if (encersCount == 1 || 2 * maxC2 > encersCount) {
                    // remove 2nd senator from 2nd party
                    output.print(ALPHABET[maxI2]);
                    --maxC2;
                    --games[maxI2];
                    --encersCount;
                }
            }
            output.println();
        }
        output.close();
        System.out.println(""finished"");
    }
}",406,16,"N:W,n:c,senatorsCount:encersCount,parties:games,T:R,party:currency,",3566,7.036363474527990,Beam
2264,,,200,10,,745,1.0262292861938500,0
2265,,,328,16,,5302,9.410433606306710,0
2266,,,263,13,,3504,5.90918531815211,0
2267,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int c=0;c<t;c++){
        int r=inp.nextInt();
        int[] img=new int[r];
        for(int j=0;j<r;j++){
            img[j]=inp.nextInt();
        }
        int mean1=0;
        int missTwo=0;
        for(int key=0;key<r-1;key++){
            
            int y=(img[key]-img[key+1]>0)? img[key]-img[key+1]:0;
            mean1+=y;
        
        }
        int w=0;
        for(int r=0;r<r-1;r++){
            w=Math.max(w,img[r]-img[r+1]);
        }
        for(int c=0;c<r-1;c++){
            int x=(img[c]<=w)?img[c]:w;
            missTwo+=x;
        }

        System.out.println(""Case #""+(c+1)+"": ""+mean1+"" ""+missTwo);
    }
}
}",272,16,"arr:img,sum1:mean1,sum2:missTwo,h:r,k:key,d:c,v:w,n:r,i:c,",4713,6.569901013374330,Beam
2268,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int NR = Integer.parseInt(st.nextToken());
            int M = Integer.parseInt(st.nextToken());
            int DW = Integer.parseInt(st.nextToken());

            if (DW == M)
                out.println(DW+NR-1);
            else if (M < 2*DW)
                out.println(NR+DW);
            else if (M == 2*DW)
                out.println(2*NR-1+DW);
            else {
                int diff = M%DW;
                if (diff == 0) {
                    out.println((M*NR)/DW-1+DW);
                }
                else {
                    out.println((M/DW)*NR+DW);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}",273,11,"W:DW,rem:diff,C:M,R:NR,",1273,2.2453974882761600,Beam
2269,,,358,18,,6800,11.593267714977300,0
2270,,,200,10,,2233,3.1917832096417700,0
2271,,,478,22,,11752,19.539876409371700,0
2272,,,169,10,,2202,3.003452467918400,0
2273,,,278,15,,2522,4.185339093208310,0
2274,"class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int s[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        s[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int max = 0;
                        for (int ss: s)
                            max = Math.max(max, ss);
                        if (max == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (s[i] == max)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            s[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            s[c1]--;
                            s[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""\n"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int w[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        w[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int r = 0;
                        for (int ss: w)
                            r = Math.r(r, ss);
                        if (r == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (w[i] == r)
                                pos.add(i);
                        }
                        int c = pos.size();
                        if (pos.size() % 2 == 1) {
                            c--;
                            int cur = pos.get(pos.size() - 1);
                            w[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < c; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            w[c1]--;
                            w[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""
"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",417,19,"s:w,max:r,ps:c,",1341,2.443707764148710,Beam
2275,,,262,14,,3504,6.326348062356310,0
2276,,,256,13,,990,1.712561051050820,0
2277,,,478,22,,11718,19.506934905052200,0
2278,,,273,11,,553,0.9585906744003300,0
2279,,,544,17,,5851,11.549562068780300,0
2280,,,358,16,,838,1.5396372437477100,0
2281,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6508397936820980,Beam
2282,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, c1, s2, r10;
        double frequency;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            c1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                c1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            frequency = (double)maxdif / 10;
            
            r10 = (int)(frequency*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + c1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:frequency,m:w,s1:c1,",1179,2.0682429313659700,Beam
2283,,,334,15,,4744,9.491147784392040,0
2284,,,426,18,,3560,6.8253689726193700,0
2285,,,553,21,,907,1.634674815336860,0
2286,,,305,15,,1167,2.10675018231074,0
2287,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.1798734267552700,Beam
2288,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.715525221824646,Beam
2289,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.3490064382553100,Beam
2290,,,278,15,,801,1.2999249656995100,0
2291,,,198,10,,2205,3.871262272199000,0
2292,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lill = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lill[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = lill[iu22] - lill[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = lill[i3] - lill[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lill[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lill = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lill[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = lill[iu22] - lill[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = lill[i3] - lill[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lill[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] lill = new int[n];
                    for (int i = 0; i < n; i++) {
                        lill[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int stuff = lill[i] - lill[i + 1];
                        if (stuff > 0) {
                            first += stuff;
                        }
                    }
                    
                    int[] stuff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        stuff[i] = lill[i] - lill[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, stuff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, lill[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] lill = new int[n];
                for (int i = 0; i < n; i++) {
                    lill[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int stuff = lill[i] - lill[i + 1];
                    if (stuff > 0) {
                        first += stuff;
                    }
                }
                
                int[] stuff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    stuff[i] = lill[i] - lill[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, stuff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, lill[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:lill,i4:iu22,diff:stuff,",1044,2.4062503457069400,Beam
2293,,,406,17,,5322,11.037134885788000,0
2294,,,278,15,,801,1.287593960762020,0
2295,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.3893102765083310,Beam
2296,,,265,12,,3391,5.53719212214152,0
2297,,,266,13,,3957,6.895077939828240,0
2298,,,479,25,,2689,4.968946878115340,0
2299,"class Solution {

    public static void main(String[] args) throws Exception {
        Solution r = new Solution();
        Scanner sc = new Scanner(new FileReader(""input.txt""));
        PrintWriter pw = new PrintWriter(new FileWriter(""output.txt""));
        
        int caseCnt = sc.nextInt();
        
        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
            pw.print(""Case #"" + (caseNum + 1) + "": "");
        
            int R = sc.nextInt();
            int C = sc.nextInt();
            int res = 0;
            String board[] = new String[R];
            sc.nextLine();
            for (int i = 0; i < R; i++) {
                board[i] = sc.nextLine();
            }
            int max = 101;
            int dirX[] = {-1, 1, 0, 0};
            int dirY[] = {0, 0, 1, -1};
            String dir = ""^v><"";
            boolean possible = true;
            for (int i = 0; i < R && possible; i++) {
                for (int j = 0; j < C && possible; j++) {
                    int curDir = dir.indexOf(board[i].charAt(j));
                    int curX = i;
                    int curY = j;
                    boolean reachEnd = false;
                    if (curDir >= 0) {
                        for (int k = 0; k < max; k++) {
                            curX = curX + dirX[curDir];
                            curY = curY + dirY[curDir];
                            if (curX < R && curX >= 0 && curY < C && curY >= 0) {
                                if (board[curX].charAt(curY) != '.')
                                    break;
                            } else {
                                reachEnd = true;
                                break;
                            }
                        }
                        if (reachEnd) {
                            possible = false;
                            for (int d = 0; d < 4 && !possible; d++) {
                                curX = i;
                                curY = j;
                                for (int k = 0; k < max; k++) {
                                    curX = curX + dirX[d];
                                    curY = curY + dirY[d];
                                    if (curX < R && curX >= 0 && curY < C && curY >= 0) {
                                        if (board[curX].charAt(curY) != '.') {
                                            possible = true;
                                            res++;
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!possible) {
                pw.println(""IMPOSSIBLE"");
            } else {
                pw.println(res);
            }
        }
        
        pw.flush();
        pw.close();
        sc.close();
    }
}","class Solution {

    public static void main(String[] args) throws Exception {
        Solution r = new Solution();
        Scanner sc = new Scanner(new FileReader(""input.txt""));
        PrintWriter pw = new PrintWriter(new FileWriter(""output.txt""));
        
        int caseCnt = sc.nextInt();
        
        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
            pw.print(""Case #"" + (caseNum + 1) + "": "");
        
            int W = sc.nextInt();
            int C = sc.nextInt();
            int res = 0;
            String board[] = new String[W];
            sc.nextLine();
            for (int i = 0; i < W; i++) {
                board[i] = sc.nextLine();
            }
            int max = 101;
            int dirX[] = {-1, 1, 0, 0};
            int dirY[] = {0, 0, 1, -1};
            String dir = ""^v><"";
            boolean possible = true;
            for (int i = 0; i < W && possible; i++) {
                for (int j = 0; j < C && possible; j++) {
                    int curDir = dir.indexOf(board[i].charAt(j));
                    int verXL = i;
                    int curY = j;
                    boolean reachEnd = false;
                    if (curDir >= 0) {
                        for (int k = 0; k < max; k++) {
                            verXL = verXL + dirX[curDir];
                            curY = curY + dirY[curDir];
                            if (verXL < W && verXL >= 0 && curY < C && curY >= 0) {
                                if (board[verXL].charAt(curY) != '.')
                                    break;
                            } else {
                                reachEnd = true;
                                break;
                            }
                        }
                        if (reachEnd) {
                            possible = false;
                            for (int d = 0; d < 4 && !possible; d++) {
                                verXL = i;
                                curY = j;
                                for (int k = 0; k < max; k++) {
                                    verXL = verXL + dirX[d];
                                    curY = curY + dirY[d];
                                    if (verXL < W && verXL >= 0 && curY < C && curY >= 0) {
                                        if (board[verXL].charAt(curY) != '.') {
                                            possible = true;
                                            res++;
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!possible) {
                pw.println(""IMPOSSIBLE"");
            } else {
                pw.println(res);
            }
        }
        
        pw.flush();
        pw.close();
        sc.close();
    }
}",525,23,"R:W,curX:verXL,",739,1.3049808382988000,Beam
2300,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.043645699818930,Beam
2301,,,386,18,,7595,13.163943998018900,0
2302,,,348,14,,3548,6.445240600903830,0
2303,,,366,17,,900,1.51913161277771,0
2304,,,399,18,,6263,11.555787932872800,0
2305,,,366,17,,900,1.5096651117006900,0
2306,,,553,21,,5356,9.410747202237450,0
2307,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.2638786951700850,Beam
2308,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,0.9305675268173220,Beam
2309,,,291,13,,3969,6.527485585212710,0
2310,,,257,11,,559,1.0040313442548100,0
2311,,,321,13,,4093,6.7834513505299900,0
2312,,,544,17,,3770,7.098612753550210,0
2313,,,256,13,,927,1.7127411484718300,0
2314,,,326,14,,5209,9.183219659328460,0
2315,,,366,17,,5984,10.002216219902000,0
2316,,,478,22,,11842,19.703266485532100,0
2317,,,240,12,,3499,6.0614555676778200,0
2318,,,281,14,,745,1.1771498680114700,0
2319,,,460,16,,5302,10.05997124115630,0
2320,,,240,12,,3345,5.723545217514040,0
2321,,,419,16,,2109,3.9197471340497300,0
2322,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream fits = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String div = r.readLine();
            int count = Integer.parseInt(div);
            for(int c = 0 ; c < count ; c++) {
                div = r.readLine();
                int w = Integer.parseInt(div);
                div = r.readLine();
                StringTokenizer c = new StringTokenizer(div,"" "");
                int [] art = new int[w];
                int seed = 0;
                while(c.hasMoreTokens()) {
                    art[seed++] = Integer.parseInt(c.nextToken());
                }
                int ansYY = 0;
                int ANST = 0;
                int pop = 0;
                for(int k = 0 ; k < w-1 ; k++) {
                    pop = Math.max(pop,art[k]-art[k+1]);
                    if(art[k+1]<art[k]) {
                        ansYY += art[k]-art[k+1];
                    }
                }
                for(int k = 0 ; k < w-1 ; k++) {
                    int x = Math.min(art[k],pop);
                    ANST += x;
                }
                fits.write(""Case #"".getBytes());
                fits.write(new Integer(c+1).toString().getBytes());
                fits.write("": "".getBytes());
                fits.write(new Integer(ansYY).toString().getBytes());
                fits.write("" "".getBytes());
                fits.write(new Integer(ANST).toString().getBytes());
                fits.write(eolb);
            }
            fits.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"iter:seed,dip:pop,ansY:ansYY,ansZ:ANST,ar:art,st:c,str:div,t:count,j:k,bos:fits,br:r,n:w,i:c,",6666,11.588797346750900,Beam
2323,,,269,16,,5722,9.077964599927270,0
2324,,,187,13,,827,1.0450353423754400,0
2325,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int MN, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner planning = new Scanner(input);
        
        int T = planning.nextInt();
        for (int c = 0; c < T; c++) {
            
            MN = planning.nextInt();
            participant = new int[MN];
            max = 0;
            
            for (int r = 0; r < MN; r++) {

                participant[r] = planning.nextInt();
                max += participant[r];
            }

            System.out.printf(""Case #%d: "", c + 1);
            if (MN == 2) {
                for (int r = 1; r < participant[0]; r++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int i1 = 0; i1 < MN; i1++)
                        if (apple == -1 || participant[i1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = i1;
                        }
                        else if (cream == -1 || participant[i1] > participant[cream]) {
                            brence = cream;
                            cream = i1;
                        }
                        else if (brence == -1 || participant[i1] > participant[brence])
                            brence = i1;
                    int xi = participant[apple] - 1;
                    int w = participant[brence];
                    
                    if ((xi > w ? xi : w) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        planning.close();
    }

}",460,16,"sum:max,gold:apple,party:participant,silver:cream,bronze:brence,N:MN,x:xi,scanner:planning,y:w,j:r,i:c,",4930,9.728016273180650,Beam
2326,,,262,14,,3070,5.452949233849840,0
2327,,,330,16,,6046,11.845535651842800,0
2328,,,349,19,,5018,8.0938827196757,0
2329,,,345,16,,5953,9.700693778196970,0
2330,,,334,15,,1179,2.1378177920977300,0
2331,,,258,14,,4837,7.986281565825140,0
2332,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cr = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cr) {
        sum1 += cr - w[i4];
      }
      cr = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,cur:cr,",433,0.7813425103823340,Beam
2333,,,544,17,,5935,11.967902421951300,0
2334,,,321,18,,953,1.6625870903333000,0
2335,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.1680319825808200,Beam
2336,,,544,17,,5907,11.977227103710200,0
2337,"class B
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader in  = new BufferedReader(new FileReader(""B.in""));
        BufferedWriter out = new BufferedWriter(new FileWriter(""B.out""));

        int T = Integer.parseInt(in.readLine());
        for(int t=1;t<=T;t++)
        {
            StringTokenizer st = new StringTokenizer(in.readLine());
            int N = Integer.parseInt(st.nextToken());
            int K = Integer.parseInt(st.nextToken());

            st = new StringTokenizer(in.readLine());
            double[] P = new double[N];
            for(int i=0;i<N;i++)
                P[i] = Double.parseDouble(st.nextToken());

            double[][] tt = new double[N][N];
            double[][] tf = new double[N][N];
            double[][] ft = new double[N][N];
            double[][] ff = new double[N][N];
            for(int i=0;i<N;i++)
                for(int j=0;j<N;j++)
                {
                    tt[i][j] =      P[i]  *      P[j];
                    tf[i][j] =      P[i]  * (1 - P[j]);
                    ft[i][j] = (1 - P[i]) *      P[j];
                    ff[i][j] = (1 - P[i]) * (1 - P[j]);
                }

            double ans = 0;
            for(int i=0;i<(1 << N);i++)
            {
                int num = 0;
                for(int j=0;j<N;j++)
                    if((i & (1 << j)) != 0)
                        num++;

                if(num == K)
                {
                    double[] prob = new double[K+1];
                    prob[0] = 1;

                    for(int j=0;j<N;j++)
                        if((i & (1 << j)) != 0)
                        {
                            double[] temp = new double[K+1];
                            temp[0] = prob[0] * (1 - P[j]);
                            for(int a=1;a<=K;a++)
                                temp[a] = prob[a] * (1-P[j]) + prob[a-1] * P[j];
                            prob = temp;
                        }
                    ans = Math.max(ans, prob[K/2]);
                }
            }

            out.write(""Case #""+t+"": "");
            out.write(""""+ans);
            out.write(""\n"");
        }

        in .close();
        out.close();
    }
}","class B
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader in  = new BufferedReader(new FileReader(""B.in""));
        BufferedWriter out = new BufferedWriter(new FileWriter(""B.out""));

        int T = Integer.parseInt(in.readLine());
        for(int t=1;t<=T;t++)
        {
            StringTokenizer st = new StringTokenizer(in.readLine());
            int N = Integer.parseInt(st.nextToken());
            int Ak = Integer.parseInt(st.nextToken());

            st = new StringTokenizer(in.readLine());
            double[] W = new double[N];
            for(int i=0;i<N;i++)
                W[i] = Double.parseDouble(st.nextToken());

            double[][] tt = new double[N][N];
            double[][] tf = new double[N][N];
            double[][] ft = new double[N][N];
            double[][] ff = new double[N][N];
            for(int i=0;i<N;i++)
                for(int j=0;j<N;j++)
                {
                    tt[i][j] =      W[i]  *      W[j];
                    tf[i][j] =      W[i]  * (1 - W[j]);
                    ft[i][j] = (1 - W[i]) *      W[j];
                    ff[i][j] = (1 - W[i]) * (1 - W[j]);
                }

            double ans = 0;
            for(int i=0;i<(1 << N);i++)
            {
                int num = 0;
                for(int j=0;j<N;j++)
                    if((i & (1 << j)) != 0)
                        num++;

                if(num == Ak)
                {
                    double[] prob = new double[Ak+1];
                    prob[0] = 1;

                    for(int j=0;j<N;j++)
                        if((i & (1 << j)) != 0)
                        {
                            double[] temp = new double[Ak+1];
                            temp[0] = prob[0] * (1 - W[j]);
                            for(int a=1;a<=Ak;a++)
                                temp[a] = prob[a] * (1-W[j]) + prob[a-1] * W[j];
                            prob = temp;
                        }
                    ans = Math.max(ans, prob[Ak/2]);
                }
            }

            out.write(""Case #""+t+"": "");
            out.write(""""+ans);
            out.write(""
"");
        }

        in .close();
        out.close();
    }
}",605,21,"P:W,K:Ak,",582,0.9621315479278570,Beam
2338,,,334,12,,3360,6.296486131350200,0
2339,,,266,13,,3305,5.722813697656000,0
2340,,,271,12,,3099,5.037338999907180,0
2341,,,393,16,,5512,9.5144171277682,0
2342,,,265,12,,617,1.018163506189980,0
2343,,,358,18,,6680,11.444262317816400,0
2344,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Len = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Len[j] = sc.nextInt();
                    sum += Len[j];
                    Len[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Len[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Len[j] > 0) {
                                answer.append(parties[0]);
                                Len[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,Pi:Len,",342,0.6981866161028540,Beam
2345,,,330,16,,6046,12.284802321593000,0
2346,,,355,19,,6517,10.398360280195900,0
2347,,,311,17,,6717,11.298716032505000,0
2348,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.2664952953656520,Beam
2349,,,345,16,,861,1.4011601169904100,0
2350,,,291,15,,708,1.1365252057711300,0
2351,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.1833069403966300,Beam
2352,,,344,15,,2097,3.494487988948820,0
2353,,,273,11,,1043,1.8230248928070100,0
2354,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter line = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int diff;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            diff = 0;
            for (int chi = 0; chi < w; chi++)
                diff += judges.get(chi);

            while (diff-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    diff--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > diff / 2)
                        System.line.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            line.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        line.close();
    }

}",464,17,"senators:judges,sum:diff,index2:slice1,i:chi,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:line,",5085,9.26005554596583,Beam
2355,,,292,16,,4155,6.907236548264820,0
2356,,,273,11,,553,0.9603194952011110,0
2357,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.22887014945348100,Beam
2358,,,250,11,,3008,5.1849969307581600,0
2359,,,321,13,,4093,7.046827681859340,0
2360,,,295,15,,3099,5.637678480148320,0
2361,,,358,18,,915,1.5316985328992200,0
2362,,,169,10,,2109,2.8014120221138,0
2363,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ras2 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                if (w < f)
                    ras2 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < size)
                    ans2 += rows[j];
                else
                    ans2 += size;
            }
            
            pw.println(String.format(print, i, ras2, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:size,prefix:print,s:w,ans1:ras2,",2956,4.92133088906606,Beam
2364,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ras2 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                if (w < f)
                    ras2 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < size)
                    ans2 += rows[j];
                else
                    ans2 += size;
            }
            
            pw.println(String.format(print, i, ras2, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:size,prefix:print,s:w,ans1:ras2,",2956,4.988073670864110,Beam
2365,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5573086142539980,Beam
2366,,,256,13,,681,1.1539742867151900,0
2367,,,254,13,,951,1.5568323254585300,0
2368,,,271,12,,2884,4.240728724002840,0
2369,,,360,19,,6967,11.365980545679700,0
2370,,,263,13,,683,1.189657735824590,0
2371,,,387,15,,5240,9.63917289574941,0
2372,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",993,1.7344699025154100,Beam
2373,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream max = System.max;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.max.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), M = scanner.nextLong(), NW = scanner.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % NW == 0) {
                max.println (ants + M/NW - 1 + NW);
            } else {
                max.println (ants + M/NW + NW);
            }
        }

    }
}",156,10,"W:NW,ans:ants,C:M,out:max,",1107,1.4823538541793800,Beam
2374,,,281,14,,745,1.285063672065740,0
2375,,,406,17,,5322,10.984835724035900,0
2376,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int numberSum = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int i = 0; i < numberSum; i++) {
            String line1 = letters.get(currentIndex++);
            String cellTwo = letters.get(currentIndex++);
            String[] array = cellTwo.split("" "");
            int[] ins = new int[array.length];
            for (int i94 = 0; i94 < array.length; i94++) {
                ins[i94] = Integer.valueOf(array[i94]);
            }
            int[] boss = ins;
            long[] lockOne = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int anti96 = 0; anti96 < boss.length - 1; anti96++) {
                        if (boss[anti96+1] < boss[anti96]) {
                            lockOne[0] += boss[anti96] - boss[anti96+1];
                        }
                    }
                    
                    int rest = 0;
                    for (int li26 = 0; li26 < boss.length - 1; li26++) {
                        if (boss[li26+1] < boss[li26]) {
                            rest = Math.max(rest, boss[li26] - boss[li26+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < boss.length - 1; i1++) {
                        lockOne[1] += Math.pos(boss[i1], rest);
                    }
            long[] pos = lockOne;
            String r = ""Case #"" + (i + 1) + "": "" + pos[0] + "" "" + pos[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:boss,rate:rest,min1:lockOne,lines:letters,i4:i94,vals:array,i2:anti96,problemCount:numberSum,min:pos,line2:cellTwo,i3:li26,ans:ins,",6629,12.022439618905400,Beam
2377,,,255,13,,962,2.1421884377797400,0
2378,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0341813127199800,Beam
2379,,,366,17,,900,1.504282029469810,0
2380,,,443,17,,1540,2.8520050406456000,0
2381,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int li=0;li<1000001;li++)
      grade[li]=UnSeKEN;
    Queue<Integer> w=new LinkedList<Integer>();
    grade[1]=1;
    w.add(1);
    while(!w.isEmpty()){
      int current=w.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nc=d+1;
        grade[next]=nc;
        w.add(next);
      }
    int c = current;
    int result=0;
    while(c>0){
      result=10*result+(c%10);
      c/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nc=d+1;
        grade[next]=nc;
        w.add(next);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int places=sen.nextInt();

    for(int ot=0;ot<places;ot++){
      int c=sen.nextInt();
      System.out.println(""Case #""+(ot+1)+"": ""+grade[c]);
    }
  }

  private static int[] grade;
  private static final int UnSeKEN=-1;
}",302,15,"distance:grade,scanner:sen,n:c,UNSEEN:UnSeKEN,i:li,cases:places,t:ot,q:w,nd:nc,",1861,2.9477033694585200,Beam
2382,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream max = System.max;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.max.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), M = scanner.nextLong(), NW = scanner.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % NW == 0) {
                max.println (ants + M/NW - 1 + NW);
            } else {
                max.println (ants + M/NW + NW);
            }
        }

    }
}",156,10,"W:NW,ans:ants,C:M,out:max,",1107,1.4900412440300000,Beam
2383,,,321,18,,2304,3.911903134981790,0
2384,,,334,15,,1179,2.2824546655019100,0
2385,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int W, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanning = new Scanner(input);
        
        int X = scanning.nextInt();
        for (int i = 0; i < X; i++) {
            
            W = scanning.nextInt();
            participant = new int[W];
            max = 0;
            
            for (int r = 0; r < W; r++) {

                participant[r] = scanning.nextInt();
                max += participant[r];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (W == 2) {
                for (int r = 1; r < participant[0]; r++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (apple == -1 || participant[i1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = i1;
                        }
                        else if (cream == -1 || participant[i1] > participant[cream]) {
                            brence = cream;
                            cream = i1;
                        }
                        else if (brence == -1 || participant[i1] > participant[brence])
                            brence = i1;
                    int xi = participant[apple] - 1;
                    int w = participant[brence];
                    
                    if ((xi > w ? xi : w) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanning.close();
    }

}",460,16,"gold:apple,sum:max,party:participant,silver:cream,bronze:brence,N:W,j:r,y:w,x:xi,scanner:scanning,T:X,",4899,9.419516623020170,Beam
2386,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int W, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scan = new Scanner(input);
        
        int T = scan.nextInt();
        for (int i = 0; i < T; i++) {
            
            W = scan.nextInt();
            participant = new int[W];
            max = 0;
            
            for (int r = 0; r < W; r++) {

                participant[r] = scan.nextInt();
                max += participant[r];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (W == 2) {
                for (int r = 1; r < participant[0]; r++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (apple == -1 || participant[i1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = i1;
                        }
                        else if (cream == -1 || participant[i1] > participant[cream]) {
                            brence = cream;
                            cream = i1;
                        }
                        else if (brence == -1 || participant[i1] > participant[brence])
                            brence = i1;
                    int xi = participant[apple] - 1;
                    int w = participant[brence];
                    
                    if ((xi > w ? xi : w) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scan.close();
    }

}",460,16,"gold:apple,sum:max,party:participant,silver:cream,bronze:brence,N:W,j:r,y:w,x:xi,scanner:scan,",4651,9.115389585495000,Beam
2387,,,358,18,,915,1.5204033811887100,0
2388,,,263,13,,683,1.153217045466110,0
2389,,,330,14,,4825,8.942634491125740,0
2390,,,292,17,,6868,11.423068944613100,0
2391,,,250,11,,838,1.4648730238278700,0
2392,,,311,17,,2127,3.563523451487220,0
2393,,,448,16,,3643,7.195989263057710,0
2394,,,250,11,,2884,5.0099489212036100,0
2395,,,263,13,,4434,7.858056298891700,0
2396,,,464,17,,5358,9.952415986855820,0
2397,,,408,17,,5518,10.616179339091000,0
2398,,,406,16,,1303,2.5371018012364700,0
2399,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.8933525204658510,Beam
2400,,,262,14,,3504,6.4392662445704100,0
2401,,,265,12,,3389,5.462855080763500,0
2402,,,171,10,,2202,3.2802553534507800,0
2403,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String r="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    r=r+c+"" "";
                width[c]=0;
            }
            r=r.trim();
            System.out.println(""Case #""+i+"": ""+r);
        }
    }
}",285,14,"heights:width,k:c,j:dj,s:r,",1892,3.1748682777086900,Beam
2404,,,887,27,,6702,12.79983330965040,0
2405,,,363,16,,5798,10.418658792972600,0
2406,,,418,13,,4434,9.49416735569636,0
2407,,,263,13,,3814,6.33693885008494,0
2408,,,298,16,,4248,7.32553198337555,0
2409,,,211,11,,2760,4.248492856820420,0
2410,,,265,12,,617,1.0211209495862300,0
2411,,,419,16,,2109,3.8905428409576400,0
2412,,,325,16,,6015,10.861722870667800,0
2413,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,1.7589427431424500,Beam
2414,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7527586460113530,Beam
2415,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,m,w,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            m =sc.nextInt();
            w = sc.nextInt();
            irez = m/w;
            irez *=r;
            irez +=w-1;
            if(m%w > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,c:m,",280,0.35097633600235000,Beam
2416,,,295,15,,3429,6.202871163686120,0
2417,,,655,16,,2509,6.074166329701740,0
2418,,,187,13,,2124,2.656411286195120,0
2419,,,292,16,,4155,7.084566970666250,0
2420,,,345,16,,861,1.3982022126515700,0
2421,,,349,19,,862,1.4087963183720900,0
2422,,,269,13,,4394,7.856992797056830,0
2423,,,298,16,,776,1.3231156150500000,0
2424,,,305,15,,799,1.4039825995763100,0
2425,,,517,26,,1871,3.6006269892056800,0
2426,,,326,14,,4837,8.463775527477260,0
2427,,,290,12,,3379,5.526102825005850,0
2428,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"count:sum,num:width,row:cur,i:c,height:width,kk:ctx,in:r,",2044,3.7100832581520100,Beam
2429,,,553,21,,1373,2.439198092619580,0
2430,,,281,14,,745,1.2525649825731900,0
2431,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long X = scanner.nextLong(), N = scanner.nextLong(), A = scanner.nextLong();
            
            long ants = (X - 1) * N;
            
            if (N % A == 0) {
                out.println (ants + N/A - 1 + A);
            } else {
                out.println (ants + N/A + A);
            }
        }

    }
}",156,10,"C:N,ans:ants,W:A,R:X,",1138,1.5119979500770600,Beam
2432,,,349,19,,5603,9.29896337588628,0
2433,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                slated.add(i, 0);
            }
            int equateOrg = 0;
            for (int i = 0; i < N; i++) {
                int w = r.nextInt();
                slated.set(i, w);
                equateOrg += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateOrg > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (max == second && equateOrg != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateOrg -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateOrg -= 1;
                }
            }
            if (equateOrg == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateOrg,temp:w,in:r,",1856,3.7617340803146400,Beam
2434,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int numberSum = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int k = 0; k < numberSum; k++) {
            String line1 = letters.get(currentIndex++);
            String line2 = letters.get(currentIndex++);
            String[] arr = line2.split("" "");
            int[] arr = new int[arr.length];
            for (int i94 = 0; i94 < arr.length; i94++) {
                arr[i94] = Integer.valueOf(arr[i94]);
            }
            int[] arr = arr;
            long[] lock2 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int li27 = 0; li27 < arr.length - 1; li27++) {
                        if (arr[li27+1] < arr[li27]) {
                            lock2[0] += arr[li27] - arr[li27+1];
                        }
                    }
                    
                    int frequency = 0;
                    for (int i26 = 0; i26 < arr.length - 1; i26++) {
                        if (arr[i26+1] < arr[i26]) {
                            frequency = Math.max(frequency, arr[i26] - arr[i26+1]);
                        }
                    }
                    
                    for (int i91 = 0; i91 < arr.length - 1; i91++) {
                        lock2[1] += Math.pos(arr[i91], frequency);
                    }
            long[] pos = lock2;
            String r = ""Case #"" + (k + 1) + "": "" + pos[0] + "" "" + pos[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:arr,rate:frequency,min1:lock2,lines:letters,i3:i26,i2:li27,ans:arr,min:pos,i4:i94,vals:arr,problemCount:numberSum,i1:i91,i:k,",6798,12.035968883832300,Beam
2435,,,256,13,,3365,6.093382505575820,0
2436,,,306,16,,5302,9.309399286905920,0
2437,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long gain = 0;
                while( flippingWhatever != 0 )
                {
                    gain = gain * 10;
                    gain = gain + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = gain;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:gain,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",2021,3.510833470026650,Beam
2438,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,4.268723861376440,Beam
2439,,,224,11,,2791,4.858263130982720,0
2440,,,328,16,,5302,8.982631206512450,0
2441,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] smatch = new int[n];
                    for (int i = 0; i < n; i++) {
                        smatch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int comment = smatch[i] - smatch[i + 1];
                        if (comment > 0) {
                            first += comment;
                        }
                    }
                    
                    int[] comment = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        comment[i] = smatch[i] - smatch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, comment[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, smatch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] smatch = new int[n];
                for (int i = 0; i < n; i++) {
                    smatch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int comment = smatch[i] - smatch[i + 1];
                    if (comment > 0) {
                        first += comment;
                    }
                }
                
                int[] comment = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    comment[i] = smatch[i] - smatch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, comment[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, smatch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:smatch,diff:comment,i4:i22,",1182,2.619530026117960,Beam
2442,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner isprint = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = isprint.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int A = isprint.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] char = new int[A];
            for (int i = 0; i < A; i++){
                char[i] = isprint.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<A;i++){
                if(dif<char[i-1]-char[i]) dif=char[i-1]-char[i];    
            }
            for(int i=1;i<A;i++){
                if(char[i]<char[i-1]) a+=char[i-1]-char[i];
                if(char[i-1]<dif) b+=char[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,11,"ps:char,N:A,sinput:isprint,",869,1.4846783439318300,Beam
2443,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7424278219540910,Beam
2444,,,316,15,,4204,7.416058405240380,0
2445,,,325,14,,4789,8.438989253838860,0
2446,"class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int width = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / width;
                        int res = limit + width-1;
                        
                        int fin = res * row;
                        int left = cells % width;
                        //System.out.println(left);
                        if(left != 0 && width != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}","class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int age = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / age;
                        int rates = limit + age-1;
                        
                        int fin = rates * row;
                        int left = cells % age;
                        //System.out.println(left);
                        if(left != 0 && age != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}",236,16,"width:age,res:rates,",373,0.6103956778844200,Beam
2447,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.40204620361328100,Beam
2448,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int caseSum = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < caseSum; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int init = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < init) {
                    total0 += init - current;
                    maxMin = Math.max(maxMin, init - current);
                }
                init = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"pw:jpow,prev:init,testCount:caseSum,",1408,2.313810161749520,Beam
2449,,,790,14,,4837,10.230154263973200,0
2450,,,292,17,,6841,11.067195868492100,0
2451,,,282,13,,2102,3.2542065580685900,0
2452,,,790,14,,4837,10.027087787787100,0
2453,,,240,12,,3849,6.162931378682460,0
2454,,,265,12,,925,1.5142345825831100,0
2455,,,479,25,,2720,4.997894855340320,0
2456,,,790,14,,4713,9.898900425434110,0
2457,,,475,18,,7937,14.394772668679600,0
2458,,,311,17,,2189,3.6155387004216500,0
2459,,,271,12,,3171,5.370363358656570,0
2460,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.3965340773264570,Beam
2461,,,371,12,,1892,3.4779579997062700,0
2462,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader arr = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter besw = new BufferedWriter(isw);

        String letter = null;
        List<String> letters = new ArrayList<String>();
        while ((letter = arr.readLine()) != null) {
            letters.add(letter);
        }

        int numberSum = Integer.parseInt(letters.get(0));
        int reportedLoop = 1;
        for (int u = 0; u < numberSum; u++) {
            String line1 = letters.get(reportedLoop++);
            String cellTwo = letters.get(reportedLoop++);
            String[] array = cellTwo.split("" "");
            int[] lan = new int[array.length];
            for (int piFour = 0; piFour < array.length; piFour++) {
                lan[piFour] = Integer.valueOf(array[piFour]);
            }
            int[] boss = lan;
            long[] lockOne = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int li27 = 0; li27 < boss.length - 1; li27++) {
                        if (boss[li27+1] < boss[li27]) {
                            lockOne[0] += boss[li27] - boss[li27+1];
                        }
                    }
                    
                    int rest = 0;
                    for (int anti323 = 0; anti323 < boss.length - 1; anti323++) {
                        if (boss[anti323+1] < boss[anti323]) {
                            rest = Math.max(rest, boss[anti323] - boss[anti323+1]);
                        }
                    }
                    
                    for (int iu8 = 0; iu8 < boss.length - 1; iu8++) {
                        lockOne[1] += Math.count(boss[iu8], rest);
                    }
            long[] count = lockOne;
            String r = ""Case #"" + (u + 1) + "": "" + count[0] + "" "" + count[1];

//            System.out.println(r);
            besw.write(r);
            besw.newLine();
        }

        if (besw != null)
            besw.close();

        if (arr != null)
            arr.close();
    }
}",479,25,"mush:boss,rate:rest,min1:lockOne,min:count,currentIndex:reportedLoop,vals:array,i4:piFour,lines:letters,i2:li27,i3:anti323,problemCount:numberSum,ans:lan,i1:iu8,line2:cellTwo,i:u,bw:besw,br:arr,line:letter,",7431,13.351261313756300,Beam
2463,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7054439425468450,Beam
2464,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int W, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scan = new Scanner(input);
        
        int T = scan.nextInt();
        for (int mi = 0; mi < T; mi++) {
            
            W = scan.nextInt();
            participant = new int[W];
            max = 0;
            
            for (int r = 0; r < W; r++) {

                participant[r] = scan.nextInt();
                max += participant[r];
            }

            System.out.printf(""Case #%d: "", mi + 1);
            if (W == 2) {
                for (int r = 1; r < participant[0]; r++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (apple == -1 || participant[i1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = i1;
                        }
                        else if (cream == -1 || participant[i1] > participant[cream]) {
                            brence = cream;
                            cream = i1;
                        }
                        else if (brence == -1 || participant[i1] > participant[brence])
                            brence = i1;
                    int xi = participant[apple] - 1;
                    int w = participant[brence];
                    
                    if ((xi > w ? xi : w) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scan.close();
    }

}",460,16,"gold:apple,sum:max,party:participant,silver:cream,bronze:brence,N:W,j:r,y:w,x:xi,i:mi,scanner:scan,",4899,9.533192431926730,Beam
2465,,,271,12,,3171,5.424983815352120,0
2466,,,295,15,,1064,1.9146687150001500,0
2467,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,0.7312278588612870,Beam
2468,"class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int c = in.nextInt();
                int w = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(c%w, 1)+w + c/w-1;
                if (r > 1) ans1 += (r-1)*(c/w);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""\n"");
                out.write(""Case #"" + cas + "": "" + ans + ""\n"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int u = in.nextInt();
                int wa = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(u%wa, 1)+wa + u/wa-1;
                if (r > 1) ans1 += (r-1)*(u/wa);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""
"");
                out.write(""Case #"" + cas + "": "" + ans + ""
"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",241,15,"w:wa,c:u,",373,0.6325100143750510,Beam
2469,,,295,15,,672,1.2254956245422400,0
2470,,,468,20,,9015,17.164667240778600,0
2471,,,269,13,,4390,7.85679505666097,0
2472,,,348,14,,3548,6.2285621921221400,0
2473,,,257,11,,1055,1.818176531791690,0
2474,,,272,16,,841,1.1612817923227900,0
2475,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,0.7347444295883180,Beam
2476,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,0.7372146606445310,Beam
2477,,,272,16,,5906,8.504303336143490,0
2478,,,311,17,,6748,11.792000595728600,0
2479,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int W = in.nextInt();
        int n;
        ArrayList<Integer> queens = new ArrayList<Integer>();
        int match;
        String sol = """";

        for (int cR = 1; cR <= W; cR++) {
            queens.clear();
            sol = """";
            n = in.nextInt();
            for (int si = 0; si < n; si++)
                queens.add(in.nextInt());
            match = 0;
            for (int si = 0; si < n; si++)
                match += queens.get(si);

            while (match-- > 2) {
                int max = 0, info = -1, index2 = -1;
                boolean match3 = false;
                for (int si = 0; si < n; si++)
                    if (queens.get(si) > max) {
                        info = si;
                        max = queens.get(si);
                        index2 = -1;
                    } else if (queens.get(si) == max) {
                        if (index2 == -1)
                            index2 = si;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    queens.set(info, max - 1);
                    sol += "" "" + (char) (info + 'A');
                } else {
                    queens.set(info, max - 1);
                    queens.set(index2, max - 1);
                    sol += "" "" + (char) (info + 'A') + (char) (index2 + 'A');
                    match--;
                }
                for (int si = 0; si < n; si++)
                    if (queens.get(si) > match / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int si = 0; si < n; si++)
                if (queens.get(si) > 0)
                    sol += (char) (si + 'A');
            out.println(""Case #"" + cR + "":"" + sol);
        }
        in.close();
        out.close();
    }

}",464,17,"senators:queens,T:W,cT:cR,i:si,sum:match,index:info,",3070,6.0927807529767400,Beam
2480,,,269,16,,5847,9.291604153315230,0
2481,,,199,10,,993,1.3516788482666000,0
2482,,,393,16,,5084,9.243059686819710,0
2483,,,254,13,,951,1.6103939533233600,0
2484,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader worker = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(worker.readLine());
        for(int count=1;count<=testCases;count++){
            String result="""";
            worker.readLine();
            String char[] = worker.readLine().split("" "");
            
            int n = Integer.MIN_VALUE;
            int key = 0;
            int result0 = 0;
            for(int i = 0; i<char.length-1;i++){
                int idTwo=Integer.parseInt(char[i+1]);
                int e2 = Integer.parseInt(char[i]);
                if((idTwo-e2)<0) key+=-(idTwo-e2);
                if(-(idTwo-e2)>n) n = -(idTwo-e2);
            }
            for(int i = 0; i<char.length-1;i++){
                int e2 = Integer.parseInt(char[i]);
                if(e2>=n) result0 = result0+n;
                else if(e2<n) result0 = result0+e2;
            }
            writer.write(""Case #""+count+"": ""+key+"" ""+result0+""
"");
        }
        worker.close();
        writer.close();

    }

}",316,15,"max:n,i2:idTwo,index:count,result1:key,result2:result0,str:char,i1:e2,reader:worker,",3137,5.918064618110660,Beam
2485,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int M = Integer.parseInt(st.nextToken());
            int P = Integer.parseInt(st.nextToken());

            if (P == M)
                out.println(P+R-1);
            else if (M < 2*P)
                out.println(R+P);
            else if (M == 2*P)
                out.println(2*R-1+P);
            else {
                int rem = M%P;
                if (rem == 0) {
                    out.println((M*R)/P-1+P);
                }
                else {
                    out.println((M/P)*R+P);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}",273,11,"W:P,C:M,",305,0.5181205987930300,Beam
2486,,,334,12,,3387,6.753099477291110,0
2487,,,265,12,,3393,5.677949547767640,0
2488,,,525,23,,13518,22.648779555161800,0
2489,,,298,16,,1179,1.8010839422543800,0
2490,,,479,25,,2658,4.461711144447330,0
2491,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7069797515869140,Beam
2492,,,256,13,,3099,5.642389965057370,0
2493,,,379,17,,2244,3.7909204721450800,0
2494,,,655,16,,2346,5.753439851601920,0
2495,,,306,13,,1117,2.1335816740989700,0
2496,,,240,12,,3433,5.752924199899040,0
2497,,,305,15,,799,1.3865890185038200,0
2498,,,735,24,,11419,18.512862145900700,0
2499,,,265,12,,617,1.0037216107050600,0
2500,,,479,25,,2751,5.024220176537830,0
2501,,,419,16,,4713,8.516982388496400,0
2502,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int testSum = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testSum; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int init = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < init) {
                    total0 += init - current;
                    maxMin = Math.max(maxMin, init - current);
                }
                init = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"pw:jpow,prev:init,testCount:testSum,",1408,2.3468093117078100,Beam
2503,,,172,11,,2791,4.148375221093500,0
2504,,,142,11,,2425,3.8670774539311700,0
2505,,,224,11,,807,1.4732563654581700,0
2506,,,292,17,,6922,11.051484644413000,0
2507,"class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder output = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int numTests = Integer.parseInt(br.readLine());
                    int test;
                    String [] testSplit;
                    int [] mush;
                    
                    // Loop through each test
                    for (int testCounter = 0; testCounter < numTests; ++testCounter) {
                        test=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mush= new int[test];
                        for(int s=0;s<test;s++)
                        {
                            mush[s]=Integer.parseInt(testSplit[s]);
                        }
                        int out1=0,out2=0;
                        int currentDiff=0,maxDiff=0;
                        out1=0;
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s]<mush[s-1])
                            {
                                currentDiff=mush[s-1]-mush[s];
                                out1+=currentDiff;
                                maxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;
                                
                            }
                        }
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s-1]<maxDiff)
                            {
                                out2+=mush[s-1];
                                
                            }
                            else
                            {
                                out2+=maxDiff;
                            }
                        }
                        System.out.println(""Case #""+(testCounter+1)+"": ""+out1+"" ""+out2);
        //                System.out.println(""Done"");
                        output.append(""Case #"").append((testCounter+1)).append("": "").append(out1+"" ""+out2);
                        output.append(""\n"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( output.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}","class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader bl = null;
                StringBuilder letter = new StringBuilder();
                try {
                     // String buffer for storing the output
                    bl = new BufferedReader(new FileReader(inputFile));
                    int NumFables = Integer.parseInt(bl.readLine());
                    int train;
                    String [] testSplit;
                    int [] mUSH;
                    
                    // Loop through each test
                    for (int matchCount = 0; matchCount < NumFables; ++matchCount) {
                        train=Integer.parseInt(bl.readLine());
                        
                        testSplit=(bl.readLine()).split("" "");
                        mUSH= new int[train];
                        for(int n=0;n<train;n++)
                        {
                            mUSH[n]=Integer.parseInt(testSplit[n]);
                        }
                        int inPart=0,in=0;
                        int currentLength=0,out=0;
                        inPart=0;
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n]<mUSH[n-1])
                            {
                                currentLength=mUSH[n-1]-mUSH[n];
                                inPart+=currentLength;
                                out=(out<currentLength)?currentLength:out;
                                
                            }
                        }
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n-1]<out)
                            {
                                in+=mUSH[n-1];
                                
                            }
                            else
                            {
                                in+=out;
                            }
                        }
                        System.out.println(""Case #""+(matchCount+1)+"": ""+inPart+"" ""+in);
        //                System.out.println(""Done"");
                        letter.append(""Case #"").append((matchCount+1)).append("": "").append(inPart+"" ""+in);
                        letter.append(""
"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( letter.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}",443,17,"mush:mUSH,currentDiff:currentLength,maxDiff:out,s:n,test:train,testCounter:matchCount,output:letter,out2:in,out1:inPart,numTests:NumFables,br:bl,",4310,7.3770200649897300,Beam
2508,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] smatch = new int[n];
                    for (int i = 0; i < n; i++) {
                        smatch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int comment = smatch[i] - smatch[i + 1];
                        if (comment > 0) {
                            first += comment;
                        }
                    }
                    
                    int[] comment = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        comment[i] = smatch[i] - smatch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, comment[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, smatch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] smatch = new int[n];
                for (int i = 0; i < n; i++) {
                    smatch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int comment = smatch[i] - smatch[i + 1];
                    if (comment > 0) {
                        first += comment;
                    }
                }
                
                int[] comment = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    comment[i] = smatch[i] - smatch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, comment[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, smatch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:smatch,diff:comment,i4:i22,",1182,2.7387808005015100,Beam
2509,,,358,16,,5302,10.282532699902900,0
2510,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,4.54297902584076,Beam
2511,,,292,16,,4155,6.760224282741550,0
2512,,,317,12,,3371,5.532193613052370,0
2513,,,324,13,,4248,7.030667980511980,0
2514,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] smatch = new int[n];
                    for (int i = 0; i < n; i++) {
                        smatch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int comment = smatch[i] - smatch[i + 1];
                        if (comment > 0) {
                            first += comment;
                        }
                    }
                    
                    int[] comment = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        comment[i] = smatch[i] - smatch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, comment[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, smatch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] smatch = new int[n];
                for (int i = 0; i < n; i++) {
                    smatch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int comment = smatch[i] - smatch[i + 1];
                    if (comment > 0) {
                        first += comment;
                    }
                }
                
                int[] comment = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    comment[i] = smatch[i] - smatch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, comment[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, smatch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:smatch,diff:comment,i4:i22,",1182,2.8084402759869900,Beam
2515,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,1.8666325608889300,Beam
2516,,,265,12,,3701,6.2231598178545600,0
2517,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int N = Integer.parseInt(st.nextToken());
            int N = Integer.parseInt(st.nextToken());

            if (N == N)
                out.println(N+R-1);
            else if (N < 2*N)
                out.println(R+N);
            else if (N == 2*N)
                out.println(2*R-1+N);
            else {
                int rem = N%N;
                if (rem == 0) {
                    out.println((N*R)/N-1+N);
                }
                else {
                    out.println((N/N)*R+N);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}",273,11,"C:N,W:N,",423,0.7549386103947960,Beam
2518,,,132,9,,1558,1.9760128537813800,0
2519,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSeKEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSeKEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSeKEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int cases=sen.nextInt();

    for(int t=0;t<cases;t++){
      int n=sen.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[n]);
    }
  }

  private static int[] grade;
  private static final int UNSeKEN=-1;
}",302,15,"scanner:sen,distance:grade,UNSEEN:UNSeKEN,",683,1.1497050205866500,Beam
2520,"class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int N = Integer.parseInt(br.readLine());
            int[][] vrst = new int[2*N-1][N];
            for(int j=0;j<2*N-1;j++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<N;k++) {
                    //System.out.println(""""+j+k);
                    vrst[j][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*N-1;i1++){
                for(int j = 0;j<N;j++){
                    bool[vrst[i1][j]]=!bool[vrst[i1][j]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""\n"");
            pw.write(""Case #""+(i+1)+"": ""+a+""\n"");

        }
        pw.close();
    }
}","class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader r;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) r = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else r = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(r.readLine());
        for(int i = 0; i < T; i++){
            int W = Integer.parseInt(r.readLine());
            int[][] vrst = new int[2*W-1][W];
            for(int dj=0;dj<2*W-1;dj++){
                String[] tab =r.readLine().split("" "");

                for(int k=0;k<W;k++) {
                    //System.out.println(""""+j+k);
                    vrst[dj][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*W-1;i1++){
                for(int dj = 0;dj<W;dj++){
                    bool[vrst[i1][dj]]=!bool[vrst[i1][dj]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""
"");
            pw.write(""Case #""+(i+1)+"": ""+a+""
"");

        }
        pw.close();
    }
}",399,18,"N:W,j:dj,br:r,",1334,2.6214476188023900,Beam
2521,,,211,11,,2791,4.422459077835080,0
2522,,,513,26,,16331,28.196906328201300,0
2523,,,269,16,,5729,9.281538756688440,0
2524,,,292,17,,6922,12.054198829333000,0
2525,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int TN = Integer.parseInt(line);
            for(int i=0;i<TN;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>size){
                            size=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=size){
                        b=b+size;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,T:TN,",497,0.9796603878339130,Beam
2526,,,311,17,,2131,3.597527273495990,0
2527,,,266,13,,3305,5.782171698411310,0
2528,,,224,11,,2791,4.946040387948350,0
2529,,,291,12,,3411,6.189229234059650,0
2530,,,250,11,,2791,4.87428435087204,0
2531,,,419,16,,2853,5.370517901579540,0
2532,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6600629051526390,Beam
2533,,,655,16,,1810,4.192621235052740,0
2534,,,308,12,,714,1.4498111645380700,0
2535,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7667712926864620,Beam
2536,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader worker = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(worker.readLine());
        for(int count=1;count<=testCases;count++){
            String result="""";
            worker.readLine();
            String char[] = worker.readLine().split("" "");
            
            int n = Integer.MIN_VALUE;
            int key = 0;
            int result0 = 0;
            for(int i = 0; i<char.length-1;i++){
                int idTwo=Integer.parseInt(char[i+1]);
                int e2 = Integer.parseInt(char[i]);
                if((idTwo-e2)<0) key+=-(idTwo-e2);
                if(-(idTwo-e2)>n) n = -(idTwo-e2);
            }
            for(int i = 0; i<char.length-1;i++){
                int e2 = Integer.parseInt(char[i]);
                if(e2>=n) result0 = result0+n;
                else if(e2<n) result0 = result0+e2;
            }
            writer.write(""Case #""+count+"": ""+key+"" ""+result0+""
"");
        }
        worker.close();
        writer.close();

    }

}",316,15,"max:n,i2:idTwo,index:count,result1:key,result2:result0,str:char,i1:e2,reader:worker,",3137,5.838588321208950,Beam
2537,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner s = new Scanner (System.in);
    static PrintStream writer = System.writer;

    public static void main(String[] args) {
        long U = Long.valueOf(s.next());

        for (long k = 1; k <= U; ++k) {
            System.writer.print(""Case #"" + k + "": "");
            long RS = s.nextLong(), RW = s.nextLong(), P = s.nextLong();
            
            long ions = (RS - 1) * RW;
            
            if (RW % P == 0) {
                writer.println (ions + RW/P - 1 + P);
            } else {
                writer.println (ions + RW/P + P);
            }
        }

    }
}",156,10,"C:RW,W:P,R:RS,scanner:s,ans:ions,out:writer,T:U,i:k,",1990,2.7057883103688600,Beam
2538,,,887,27,,1585,3.2816886862119000,0
2539,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int NR = Integer.parseInt(st.nextToken());
            int M = Integer.parseInt(st.nextToken());
            int DW = Integer.parseInt(st.nextToken());

            if (DW == M)
                out.println(DW+NR-1);
            else if (M < 2*DW)
                out.println(NR+DW);
            else if (M == 2*DW)
                out.println(2*NR-1+DW);
            else {
                int diff = M%DW;
                if (diff == 0) {
                    out.println((M*NR)/DW-1+DW);
                }
                else {
                    out.println((M/DW)*NR+DW);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}",273,11,"W:DW,rem:diff,C:M,R:NR,",1273,2.1635951161384600,Beam
2541,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",126,0.22574613094329800,Beam
2542,,,500,19,,8835,15.31601031223930,0
2543,,,479,25,,2720,5.188570324579870,0
2544,,,334,15,,1179,2.3866396943728100,0
2545,,,406,19,,1520,2.790062737464910,0
2546,,,308,12,,745,1.392779783407850,0
2547,,,326,14,,4899,8.404768828550970,0
2548,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int r = in.nextInt();
            int yr[] = new int[r];
            int ma = 0;
            int w = 0;
            for (int c = 0; c < r; c++) {
                yr[c] = in.nextInt();
                if (c > 0) {
                    ma = Math.max(ma, yr[c - 1] - yr[c]);
                    if (yr[c] < yr[c-1]){
                        w += yr[c - 1] - yr[c];
                    }
                }
            }
            
            int s = 0;
            for (int c = 1; c < r; c++) {
                if (yr[c - 1] >= ma) {
                    s += ma;
                } else {
                    s += yr[c - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"ar:yr,i:c,f:w,n:r,",1322,2.125355776151020,Beam
2549,,,257,11,,1334,2.3381614963213600,0
2550,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,0.72353036403656,Beam
2551,,,317,12,,3404,5.915802228450780,0
2552,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.070370920499170,Beam
2553,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ras2 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                if (w < f)
                    ras2 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < size)
                    ans2 += rows[j];
                else
                    ans2 += size;
            }
            
            pw.println(String.format(print, i, ras2, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:size,prefix:print,s:w,ans1:ras2,",2956,4.929202310244240,Beam
2554,,,290,12,,3398,6.48004461924235,0
2555,,,406,16,,6046,11.538886121908800,0
2556,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                slated.add(i, 0);
            }
            int equateOrg = 0;
            for (int i = 0; i < N; i++) {
                int w = r.nextInt();
                slated.set(i, w);
                equateOrg += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateOrg > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (max == second && equateOrg != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateOrg -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateOrg -= 1;
                }
            }
            if (equateOrg == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateOrg,temp:w,in:r,",1856,3.847933804988860,Beam
2557,,,187,13,,2018,2.58784552415212,0
2558,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner innp=new Scanner(System.in);
    int t=innp.nextInt();
    for(int i=0;i<t;i++){
        int c=innp.nextInt();
        int[] br=new int[c];
        for(int j=0;j<c;j++){
            br[j]=innp.nextInt();
        }
        int parse2=0;
        int miss32=0;
        for(int key=0;key<c-1;key++){
            
            int y=(br[key]-br[key+1]>0)? br[key]-br[key+1]:0;
            parse2+=y;
        
        }
        int w=0;
        for(int r=0;r<c-1;r++){
            w=Math.max(w,br[r]-br[r+1]);
        }
        for(int d=0;d<c-1;d++){
            int x=(br[d]<=w)?br[d]:w;
            miss32+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+parse2+"" ""+miss32);
    }
}
}",272,16,"sum1:parse2,sum2:miss32,h:r,k:key,arr:br,inp:innp,v:w,n:c,",4407,6.2270347317059800,Beam
2559,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7258602420488990,Beam
2560,,,334,15,,1892,3.8462885777155600,0
2561,,,464,17,,5358,10.197826838493300,0
2562,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.717681614557902,Beam
2563,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int dir = current - m[i];
                    if (dir > jump)
                        jump = dir;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    width += m[i];
                else
                    width += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,diff:dir,",528,0.9437023599942530,Beam
2564,,,262,14,,3380,6.045821932951610,0
2565,,,386,18,,7280,12.237152242660500,0
2566,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.2320816953976950,Beam
2567,,,292,15,,5630,9.660527189572650,0
2568,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int TN = Integer.parseInt(line);
            for(int i=0;i<TN;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>size){
                            size=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=size){
                        b=b+size;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,T:TN,",497,0.9748708128929140,Beam
2569,"class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int width = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / width;
                        int res = limit + width-1;
                        
                        int fin = res * row;
                        int left = cells % width;
                        //System.out.println(left);
                        if(left != 0 && width != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}","class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int age = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / age;
                        int ris = limit + age-1;
                        
                        int fin = ris * row;
                        int left = cells % age;
                        //System.out.println(left);
                        if(left != 0 && age != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}",236,16,"width:age,res:ris,",373,0.623971966902415,Beam
2570,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7404229601224260,Beam
2571,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int c = 0;c<w.length;c++)
                    if(w[c]<=a[0]&&w[c]>0&&c!=a[1]){
                        w[c]--;
                        gg=gg+(char)(c+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(w[a[1]]-2!=0){
                w[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    w[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               w[a[2]]--;
                w[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,k:c,",709,1.3246183792750000,Beam
2572,,,639,21,,9330,18.050958796342200,0
2573,,,224,11,,3070,5.333630470434830,0
2574,,,264,15,,1904,3.304078265031180,0
2575,,,250,11,,559,0.9545789321263630,0
2576,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner laneChan = null;
        int width;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        width = s.nextInt();
        s.nextLine();
        for (int c = 0; c < width; c++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] lakeValues = new int[currentSize];
            line = s.nextLine();
            laneChan = new Scanner(line);
            int j = 0;
            while (laneChan.hasNextInt()) {
                lakeValues[j] = laneChan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastapestSize = 0;
            for (int w = 1; w < currentSize; w++) {
                if (lakeValues[w] < lakeValues[w - 1]) {
                    firstMethod += lakeValues[w - 1] - lakeValues[w];
                    fastapestSize = Math.max(fastapestSize, lakeValues[w - 1] - lakeValues[w]);
                }
            }
            int secondMethod = 0;
            for (int w = 0; w < currentSize - 1; w++) {
                if (lakeValues[w] > fastapestSize) {
                    secondMethod += fastapestSize;
                } else {
                    secondMethod += lakeValues[w];
                }
            }
            printer.print(""Case #"" + (c + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}",328,16,"fastestRate:fastapestSize,size:width,i:c,m:w,plateValues:lakeValues,lineScan:laneChan,",3132,5.469438095887500,Beam
2577,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",962,1.6290735006332400,Beam
2578,,,358,16,,5302,9.306173519293470,0
2579,,,317,14,,5209,8.786171952883400,0
2580,,,306,13,,1117,2.072325611114500,0
2581,,,366,17,,900,1.4641916871070900,0
2582,,,257,11,,1272,2.1983972549438500,0
2583,,,325,16,,6077,11.126478870709700,0
2584,,,553,21,,6142,10.757166186968500,0
2585,,,292,17,,2157,3.6702465573946600,0
2586,,,366,17,,900,1.4959274808565800,0
2587,,,132,9,,1898,2.2652844270070400,0
2588,,,379,17,,6892,11.585877533753700,0
2589,,,256,13,,4089,6.791475244363150,0
2590,,,399,18,,6263,11.379842372735300,0
2591,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.3012112855911260,Beam
2592,,,291,12,,621,1.0812530676523800,0
2593,,,330,16,,6077,12.155241477489500,0
2594,,,386,18,,939,1.6142345507939700,0
2595,,,393,16,,5084,9.293304749329880,0
2596,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int W = in.nextInt();
        int n;
        ArrayList<Integer> queens = new ArrayList<Integer>();
        int match;
        String sol = """";

        for (int cR = 1; cR <= W; cR++) {
            queens.clear();
            sol = """";
            n = in.nextInt();
            for (int si = 0; si < n; si++)
                queens.add(in.nextInt());
            match = 0;
            for (int si = 0; si < n; si++)
                match += queens.get(si);

            while (match-- > 2) {
                int max = 0, path = -1, index2 = -1;
                boolean match3 = false;
                for (int si = 0; si < n; si++)
                    if (queens.get(si) > max) {
                        path = si;
                        max = queens.get(si);
                        index2 = -1;
                    } else if (queens.get(si) == max) {
                        if (index2 == -1)
                            index2 = si;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    queens.set(path, max - 1);
                    sol += "" "" + (char) (path + 'A');
                } else {
                    queens.set(path, max - 1);
                    queens.set(index2, max - 1);
                    sol += "" "" + (char) (path + 'A') + (char) (index2 + 'A');
                    match--;
                }
                for (int si = 0; si < n; si++)
                    if (queens.get(si) > match / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int si = 0; si < n; si++)
                if (queens.get(si) > 0)
                    sol += (char) (si + 'A');
            out.println(""Case #"" + cR + "":"" + sol);
        }
        in.close();
        out.close();
    }

}",464,17,"senators:queens,T:W,cT:cR,i:si,sum:match,index:path,",3070,6.060350366433460,Beam
2597,,,328,16,,4124,7.337472784519200,0
2598,,,308,12,,1830,3.542347955703740,0
2599,,,321,13,,4093,7.105793384710950,0
2600,,,256,13,,4415,7.199681258201600,0
2601,,,500,19,,8857,15.633644262949600,0
2602,,,513,26,,16312,28.135768107573200,0
2603,,,321,18,,6952,11.35203641653060,0
2604,,,308,12,,1520,2.9660061955452000,0
2605,,,358,18,,6776,11.439922436078400,0
2606,,,386,18,,1377,1.9957143227259300,0
2607,,,544,17,,5273,9.271061285336810,0
2608,,,366,17,,6139,10.335433014233900,0
2609,,,358,18,,6782,11.476931818326300,0
2610,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String c;
        try {
            c = r.readLine();
            int case_num = Integer.parseInt(c);
            for (int ctx = 0; ctx < case_num; ctx++) {
                c = r.readLine();
                int width = Integer.parseInt(c);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    c = r.readLine();
                    String[] width = c.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String anc = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        anc = anc + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+anc);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,s:c,ans:anc,",2625,4.93733750184377,Beam
2611,,,344,15,,772,1.314703353246050,0
2612,,,358,18,,915,1.580329382419590,0
2613,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A ir = new A();
        if(!ir.DEBUG){
            try {
                if(ir.isSmall)System.setIn(new FileInputStream(new File(""./src/""+ir.PACKAGE+""/""+ir.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+ir.PACKAGE+""/""+ir.PROBLEM+""-large.in"")));
                if(ir.isSmall)System.setOut(new PrintStream(new File(""./src/""+ir.PACKAGE+""/""+ir.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+ir.PACKAGE+""/""+ir.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner com = new Scanner(System.in);
        int L = com.nextInt();
        for(int TASE=1;TASE<=L;TASE++){
            int M = com.nextInt(), N = com.nextInt(), NW = com.nextInt();
            int w = 0, Rs = 0;
            Rs += M*(N/NW);
            if (N%NW==0)Rs+=NW-1;
            else Rs+=NW;
            System.out.println(""Case #""+TASE+"": ""+Rs);
        }
    }
}",309,11,"W:NW,C:N,R:M,res:Rs,CASE:TASE,T:L,sc:com,r:ir,",1582,2.672836438814800,Beam
2614,,,443,17,,5014,9.989839752515160,0
2615,,,326,14,,1086,1.9583121856053700,0
2616,,,321,18,,6952,11.395658779144300,0
2617,,,345,16,,861,1.4071618795394900,0
2618,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int dir = current - m[i];
                    if (dir > jump)
                        jump = dir;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    width += m[i];
                else
                    width += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,diff:dir,",528,0.9304543534914650,Beam
2619,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5548444430033370,Beam
2620,,,419,16,,1303,2.416654674212140,0
2621,,,184,9,,1892,3.028990856806440,0
2622,,,298,16,,3690,6.3464541355768800,0
2623,,,448,16,,3858,7.678298393885300,0
2624,,,553,21,,1373,2.5025093158086100,0
2625,,,513,26,,16198,26.930203096071900,0
2626,,,256,13,,4429,7.470039467016860,0
2627,,,619,14,,4333,7.813566903273270,0
2628,,,292,17,,6922,11.74944635629650,0
2629,,,292,15,,5776,9.64323050181071,0
2630,,,240,13,,460,0.7455879012743630,0
2631,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner r = new Scanner(System.in);
        int W = r.nextInt();

        for(int c = 0; c < W; c++)
        {
            long input = r.nextLong();
            long effect = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    effect += input;
                    break;
                }
                long flippingWhatever = input;
                long edit = 0;
                while( flippingWhatever != 0 )
                {
                    edit = edit * 10;
                    edit = edit + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long Flipping = edit;
                if(Flipping < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = Flipping;
                }
                else
                {
                    input--;
                }
                effect++;
            }
            System.out.println(""Case #""+(c+1)+"": "" + effect);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:edit,flipped:Flipping,k:r,output:effect,i:c,T:W,",2097,3.6849698861440000,Beam
2632,,,358,18,,6634,11.291312742233300,0
2633,,,266,13,,3582,6.022958521048230,0
2634,,,263,13,,4310,7.431724083423620,0
2635,"class CRoundA {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int size = in.nextInt();
            
            int costPerRow = C / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += costPerRow * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (C % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d\n"", i + 1, ans);
        }

    }

}","class CRoundA {

    public static void main(String[] args) {
        Scanner inner = new Scanner(System.inner);
        int T = inner.nextInt();
        for (int i = 0; i < T; i++) {
            int R = inner.nextInt();
            int CA = inner.nextInt();
            int size = inner.nextInt();
            
            int CostPerCol = CA / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += CostPerCol * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (CA % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d
"", i + 1, ans);
        }

    }

}",142,11,"costPerRow:CostPerCol,C:CA,in:inner,",800,1.2692288915316300,Beam
2636,,,271,12,,3167,5.205894128481550,0
2637,,,281,14,,3907,6.533691024780270,0
2638,,,298,16,,1210,2.0417707522710200,0
2639,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.877281371752421,Beam
2640,,,358,16,,838,1.472754677136740,0
2641,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ansalt = 0;
            int n = Integer.parseInt(br.readLine());
            int[] opera = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < opera.length; j++)
                opera[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < opera.length - 1; j++) {
                int f = opera[j];
                int w = opera[j + 1];
                
                if (w < f)
                    ans1 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < opera.length - 1; j++) {
                int f = opera[j];
                int w = opera[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < opera.length - 1; j++) {
                if (opera[j] < size)
                    ansalt += opera[j];
                else
                    ansalt += size;
            }
            
            pw.println(String.format(prefix, i, ans1, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:opera,max:size,s:w,ans2:ansalt,",2218,3.658535667260490,Beam
2642,,,386,18,,7477,12.34259536266330,0
2643,,,464,17,,5358,9.42993715206782,0
2644,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,3.7196330626805600,Beam
2645,,,240,13,,460,0.6337462147076920,0
2646,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.22420427004496300,Beam
2647,,,295,15,,672,1.022049848238630,0
2648,,,544,17,,3770,7.266097855567930,0
2649,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5690154631932580,Beam
2650,,,321,13,,4093,6.846025693416600,0
2651,,,328,16,,5302,8.843965045611060,0
2652,,,500,19,,8857,15.608736185232800,0
2653,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.899538767337799,Beam
2654,,,328,16,,2357,4.2129293044408200,0
2655,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7664182345072430,Beam
2656,"class TaskA {
    public static Scanner in = new Scanner(System.in);
    
    public static void main(String[] args){
        int numOfCases = in.nextInt();
        for(int i = 0 ; i < numOfCases; i++){
            int n = in.nextInt();
            int[] partyNum = new int[n];
            System.out.print(""Case #"" + (i+1) + "": "");
            
            int k =0;
            for(int j = 0 ;j  < n ; j++){
                partyNum[j] = in.nextInt();
                k+= partyNum[j];
            }
            int max = 0;
            while( max != 1){
                max = 0;
                int maxIdx1 = -1;
                int maxIdx2 = -1;
                for(int j = 0; j < n ; j++){
                    if(partyNum[j] == max && max != 0){
                        maxIdx2 = j;
                    }
                    if(partyNum[j] > max){
                        maxIdx2 = -1;
                        max = partyNum[j];
                        maxIdx1 = j;
                    }
                    
                }
                if(max != 1) {
                    partyNum[maxIdx1]--;
                    if(maxIdx2 != -1){
                        partyNum[maxIdx2]--;
                        System.out.print((char)(65 + maxIdx2));
                    }
                    System.out.print((char)(65 + maxIdx1) + "" "");
                }
            }
            int cnt = 3;
            while(cnt > 2){
                cnt = 0;
                for(int j = 0; j < n ; j++){
                    if(partyNum[j] == 1) cnt++; 
                }
                if(cnt > 2){
                    for(int j = 0 ; j < n; j++){
                        if(partyNum[j] == 1) {
                            System.out.print((char)(65 + j) + "" "");
                            partyNum[j]--;
                            break;
                        }
                    }
                }
            }
            for(int j = 0; j < n ; j++){
                if(partyNum[j] == 1) {
                    System.out.print((char)(65 + j));
                }
            }
            System.out.println();
            

        }

    }
}","class TaskA {
    public static Scanner in = new Scanner(System.in);
    
    public static void main(String[] args){
        int numOfCases = in.nextInt();
        for(int i = 0 ; i < numOfCases; i++){
            int n = in.nextInt();
            int[] companyNum = new int[n];
            System.out.print(""Case #"" + (i+1) + "": "");
            
            int k =0;
            for(int j = 0 ;j  < n ; j++){
                companyNum[j] = in.nextInt();
                k+= companyNum[j];
            }
            int w = 0;
            while( w != 1){
                w = 0;
                int maxIdx1 = -1;
                int maxIdx2 = -1;
                for(int j = 0; j < n ; j++){
                    if(companyNum[j] == w && w != 0){
                        maxIdx2 = j;
                    }
                    if(companyNum[j] > w){
                        maxIdx2 = -1;
                        w = companyNum[j];
                        maxIdx1 = j;
                    }
                    
                }
                if(w != 1) {
                    companyNum[maxIdx1]--;
                    if(maxIdx2 != -1){
                        companyNum[maxIdx2]--;
                        System.out.print((char)(65 + maxIdx2));
                    }
                    System.out.print((char)(65 + maxIdx1) + "" "");
                }
            }
            int cnt = 3;
            while(cnt > 2){
                cnt = 0;
                for(int j = 0; j < n ; j++){
                    if(companyNum[j] == 1) cnt++; 
                }
                if(cnt > 2){
                    for(int j = 0 ; j < n; j++){
                        if(companyNum[j] == 1) {
                            System.out.print((char)(65 + j) + "" "");
                            companyNum[j]--;
                            break;
                        }
                    }
                }
            }
            for(int j = 0; j < n ; j++){
                if(companyNum[j] == 1) {
                    System.out.print((char)(65 + j));
                }
            }
            System.out.println();
            

        }

    }
}",441,13,"max:w,partyNum:companyNum,",373,0.8015597939491270,Beam
2657,,,255,13,,2946,5.847948773701990,0
2658,,,224,11,,2791,4.679904401302340,0
2659,,,306,13,,621,1.194753110408780,0
2660,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException n) {
                n.printStackTrace();
            }
        }
        Scanner enc = new Scanner(System.in);
        int N = enc.nextInt();
        for(int SCasing=1;SCasing<=N;SCasing++){
            int N = enc.nextInt(), E = enc.nextInt(), NW = enc.nextInt();
            int w = 0, Rs = 0;
            Rs += N*(E/NW);
            if (E%NW==0)Rs+=NW-1;
            else Rs+=NW;
            System.out.println(""Case #""+SCasing+"": ""+Rs);
        }
    }
}",309,11,"C:E,R:N,W:NW,res:Rs,CASE:SCasing,sc:enc,T:N,r:m,e:n,",1737,2.9163737535476700,Beam
2661,,,655,16,,2071,4.032835114002230,0
2662,,,295,15,,1064,1.9272783319155400,0
2663,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int ref = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, ref);
                sum += ref;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:ref,max:w,",462,0.7431931217511500,Beam
2664,,,306,13,,931,1.7801328420639000,0
2665,"class Solution {

    public static void main(String[] args) throws Exception {
        Solution r = new Solution();
        Scanner sc = new Scanner(new FileReader(""input.txt""));
        PrintWriter pw = new PrintWriter(new FileWriter(""output.txt""));
        
        int caseCnt = sc.nextInt();
        
        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
            pw.print(""Case #"" + (caseNum + 1) + "": "");
        
            int R = sc.nextInt();
            int C = sc.nextInt();
            int res = 0;
            String board[] = new String[R];
            sc.nextLine();
            for (int i = 0; i < R; i++) {
                board[i] = sc.nextLine();
            }
            int max = 101;
            int dirX[] = {-1, 1, 0, 0};
            int dirY[] = {0, 0, 1, -1};
            String dir = ""^v><"";
            boolean possible = true;
            for (int i = 0; i < R && possible; i++) {
                for (int j = 0; j < C && possible; j++) {
                    int curDir = dir.indexOf(board[i].charAt(j));
                    int curX = i;
                    int curY = j;
                    boolean reachEnd = false;
                    if (curDir >= 0) {
                        for (int k = 0; k < max; k++) {
                            curX = curX + dirX[curDir];
                            curY = curY + dirY[curDir];
                            if (curX < R && curX >= 0 && curY < C && curY >= 0) {
                                if (board[curX].charAt(curY) != '.')
                                    break;
                            } else {
                                reachEnd = true;
                                break;
                            }
                        }
                        if (reachEnd) {
                            possible = false;
                            for (int d = 0; d < 4 && !possible; d++) {
                                curX = i;
                                curY = j;
                                for (int k = 0; k < max; k++) {
                                    curX = curX + dirX[d];
                                    curY = curY + dirY[d];
                                    if (curX < R && curX >= 0 && curY < C && curY >= 0) {
                                        if (board[curX].charAt(curY) != '.') {
                                            possible = true;
                                            res++;
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!possible) {
                pw.println(""IMPOSSIBLE"");
            } else {
                pw.println(res);
            }
        }
        
        pw.flush();
        pw.close();
        sc.close();
    }
}","class Solution {

    public static void main(String[] args) throws Exception {
        Solution r = new Solution();
        Scanner sc = new Scanner(new FileReader(""input.txt""));
        PrintWriter p = new PrintWriter(new FileWriter(""output.txt""));
        
        int caseCnt = sc.nextInt();
        
        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {
            p.print(""Case #"" + (caseNum + 1) + "": "");
        
            int W = sc.nextInt();
            int C = sc.nextInt();
            int res = 0;
            String board[] = new String[W];
            sc.nextLine();
            for (int i = 0; i < W; i++) {
                board[i] = sc.nextLine();
            }
            int max = 101;
            int dirX[] = {-1, 1, 0, 0};
            int dirY[] = {0, 0, 1, -1};
            String dir = ""^v><"";
            boolean possible = true;
            for (int i = 0; i < W && possible; i++) {
                for (int j = 0; j < C && possible; j++) {
                    int curDir = dir.indexOf(board[i].charAt(j));
                    int curX = i;
                    int curY = j;
                    boolean reachEnd = false;
                    if (curDir >= 0) {
                        for (int k = 0; k < max; k++) {
                            curX = curX + dirX[curDir];
                            curY = curY + dirY[curDir];
                            if (curX < W && curX >= 0 && curY < C && curY >= 0) {
                                if (board[curX].charAt(curY) != '.')
                                    break;
                            } else {
                                reachEnd = true;
                                break;
                            }
                        }
                        if (reachEnd) {
                            possible = false;
                            for (int d = 0; d < 4 && !possible; d++) {
                                curX = i;
                                curY = j;
                                for (int k = 0; k < max; k++) {
                                    curX = curX + dirX[d];
                                    curY = curY + dirY[d];
                                    if (curX < W && curX >= 0 && curY < C && curY >= 0) {
                                        if (board[curX].charAt(curY) != '.') {
                                            possible = true;
                                            res++;
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!possible) {
                p.println(""IMPOSSIBLE"");
            } else {
                p.println(res);
            }
        }
        
        p.flush();
        p.close();
        sc.close();
    }
}",525,23,"R:W,pw:p,",678,1.1759922782580100,Beam
2666,,,479,25,,8273,14.769443833828000,0
2667,,,300,13,,3767,6.071170918146770,0
2668,,,262,14,,652,1.1270793199539200,0
2669,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String c;
        try {
            c = r.readLine();
            int case_num = Integer.parseInt(c);
            for (int ctx = 0; ctx < case_num; ctx++) {
                c = r.readLine();
                int width = Integer.parseInt(c);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    c = r.readLine();
                    String[] width = c.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String anc = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        anc = anc + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+anc);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,s:c,ans:anc,",2625,4.952330255508420,Beam
2670,,,419,16,,6015,11.162174665927900,0
2671,,,200,10,,745,1.0209924618403100,0
2672,,,443,17,,827,1.5365425229072600,0
2673,,,655,16,,2046,4.264748418331150,0
2674,,,290,12,,617,1.0604082226753200,0
2675,,,334,15,,1179,2.3108081420262700,0
2676,,,200,10,,714,0.9914681553840640,0
2677,,,291,15,,708,1.14870236714681,0
2678,,,224,11,,1117,2.055654990673070,0
2679,,,290,12,,3691,6.088358263174690,0
2680,,,406,19,,7999,14.350132445494300,0
2681,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A rc = new A();
        if(!rc.DEBUG){
            try {
                if(rc.isSmall)System.setIn(new FileInputStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-large.in"")));
                if(rc.isSmall)System.setOut(new PrintStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+rc.PACKAGE+""/""+rc.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException fe) {
                fe.printStackTrace();
            }
        }
        Scanner app = new Scanner(System.in);
        int N = app.nextInt();
        for(int TATE=1;TATE<=N;TATE++){
            int M = app.nextInt(), N = app.nextInt(), N = app.nextInt();
            int w = 0, Rs = 0;
            Rs += M*(N/N);
            if (N%N==0)Rs+=N-1;
            else Rs+=N;
            System.out.println(""Case #""+TATE+"": ""+Rs);
        }
    }
}",309,11,"W:N,R:M,C:N,sc:app,res:Rs,CASE:TATE,T:N,r:rc,e:fe,",1737,2.859674282868700,Beam
2682,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.3431971430778500,Beam
2683,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,sw,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            sw = sc.nextInt();
            irez = c/sw;
            irez *=r;
            irez +=sw-1;
            if(c%sw > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,w:sw,",466,0.5977966785430910,Beam
2684,,,417,18,,3845,7.312441110610960,0
2685,,,156,10,,2202,2.627107032140100,0
2686,,,326,14,,5209,9.163672359784440,0
2687,"class A {
    public static void main(String[] args) throws Exception {
        BufferedReader in = new BufferedReader(new FileReader(""A.in""));
        PrintStream out = new PrintStream(""A.out"");

        int t = Integer.parseInt(in.readLine());
        for(int i = 0; i < t; i++) {
            int n = Integer.parseInt(in.readLine());
            String[] arr = in.readLine().split("" "");
            int[] a = new int[n];
            for(int j = 0; j < n; j++) {
                a[j] = Integer.parseInt(arr[j]);
            }
            int tot = 0;
            int max = 0;
            for(int j = 0; j < n - 1; j++) {
                if(a[j] > a[j + 1]) {
                    tot += a[j] - a[j + 1];
                }
                max = Math.max(max, a[j] - a[j + 1]);
            }
            long tot2 = Long.MAX_VALUE >> 1;
            for(int j = 0; j <= 100000; j++) {
                boolean works = true;
                long temptot = 0;
                for(int k = 0; k < n - 1; k++) {
                    if(a[k] <= j) {
                        temptot += a[k];
                    } else {
                        temptot += j;
                    }
                    if(j < a[k] - a[k + 1]) {
                        works = false;
                    }
                }
                if(works) {
                    tot2 = Math.min(tot2, temptot);
                }
            }
            out.println(""Case #"" + (i + 1) + "": "" + tot + "" "" + tot2);
        }
    }
}","class A {
    public static void main(String[] args) throws Exception {
        BufferedReader r = new BufferedReader(new FileReader(""A.in""));
        PrintStream out = new PrintStream(""A.out"");

        int t = Integer.parseInt(r.readLine());
        for(int i = 0; i < t; i++) {
            int n = Integer.parseInt(r.readLine());
            String[] arr = r.readLine().split("" "");
            int[] w = new int[n];
            for(int j = 0; j < n; j++) {
                w[j] = Integer.parseInt(arr[j]);
            }
            int tot = 0;
            int max = 0;
            for(int j = 0; j < n - 1; j++) {
                if(w[j] > w[j + 1]) {
                    tot += w[j] - w[j + 1];
                }
                max = Math.max(max, w[j] - w[j + 1]);
            }
            long tot2 = Long.MAX_VALUE >> 1;
            for(int j = 0; j <= 100000; j++) {
                boolean works = true;
                long temptot = 0;
                for(int k = 0; k < n - 1; k++) {
                    if(w[k] <= j) {
                        temptot += w[k];
                    } else {
                        temptot += j;
                    }
                    if(j < w[k] - w[k + 1]) {
                        works = false;
                    }
                }
                if(works) {
                    tot2 = Math.min(tot2, temptot);
                }
            }
            out.println(""Case #"" + (i + 1) + "": "" + tot + "" "" + tot2);
        }
    }
}",360,16,"a:w,in:r,",466,0.8684630235036210,Beam
2688,,,240,13,,2426,3.834505041440330,0
2689,,,311,17,,6734,11.658351520697300,0
2690,,,200,10,,1706,2.307796847820280,0
2691,,,420,19,,7084,11.446237444877600,0
2692,,,321,13,,4093,7.177775764465330,0
2693,,,330,16,,5705,11.101376756032300,0
2694,,,281,14,,745,1.275078006585440,0
2695,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,4.424273165067040,Beam
2696,"class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder output = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int numTests = Integer.parseInt(br.readLine());
                    int test;
                    String [] testSplit;
                    int [] mush;
                    
                    // Loop through each test
                    for (int testCounter = 0; testCounter < numTests; ++testCounter) {
                        test=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mush= new int[test];
                        for(int s=0;s<test;s++)
                        {
                            mush[s]=Integer.parseInt(testSplit[s]);
                        }
                        int out1=0,out2=0;
                        int currentDiff=0,maxDiff=0;
                        out1=0;
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s]<mush[s-1])
                            {
                                currentDiff=mush[s-1]-mush[s];
                                out1+=currentDiff;
                                maxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;
                                
                            }
                        }
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s-1]<maxDiff)
                            {
                                out2+=mush[s-1];
                                
                            }
                            else
                            {
                                out2+=maxDiff;
                            }
                        }
                        System.out.println(""Case #""+(testCounter+1)+"": ""+out1+"" ""+out2);
        //                System.out.println(""Done"");
                        output.append(""Case #"").append((testCounter+1)).append("": "").append(out1+"" ""+out2);
                        output.append(""\n"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( output.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}","class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder letter = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int NumFables = Integer.parseInt(br.readLine());
                    int train;
                    String [] testSplit;
                    int [] mUSH;
                    
                    // Loop through each test
                    for (int matchCount = 0; matchCount < NumFables; ++matchCount) {
                        train=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mUSH= new int[train];
                        for(int n=0;n<train;n++)
                        {
                            mUSH[n]=Integer.parseInt(testSplit[n]);
                        }
                        int inPart=0,in=0;
                        int currentLength=0,out=0;
                        inPart=0;
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n]<mUSH[n-1])
                            {
                                currentLength=mUSH[n-1]-mUSH[n];
                                inPart+=currentLength;
                                out=(out<currentLength)?currentLength:out;
                                
                            }
                        }
                        for(int n=train-1;n>0;n--)
                        {
                            if(mUSH[n-1]<out)
                            {
                                in+=mUSH[n-1];
                                
                            }
                            else
                            {
                                in+=out;
                            }
                        }
                        System.out.println(""Case #""+(matchCount+1)+"": ""+inPart+"" ""+in);
        //                System.out.println(""Done"");
                        letter.append(""Case #"").append((matchCount+1)).append("": "").append(inPart+"" ""+in);
                        letter.append(""
"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( letter.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}",443,17,"mush:mUSH,currentDiff:currentLength,maxDiff:out,s:n,test:train,testCounter:matchCount,output:letter,out2:in,out1:inPart,numTests:NumFables,",4186,7.584874578317010,Beam
2697,,,443,17,,1901,3.4378039518992100,0
2698,,,386,18,,7600,13.131673908233600,0
2699,,,317,14,,745,1.2596819082895900,0
2700,,,292,15,,5383,9.271661245822910,0
2701,,,544,17,,5842,11.055457739035300,0
2702,,,269,16,,845,1.3143792549769100,0
2703,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.21328035593032800,Beam
2704,,,334,15,,1179,2.224267776807150,0
2705,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int caseSum = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < caseSum; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int init = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < init) {
                    total0 += init - current;
                    maxMin = Math.max(maxMin, init - current);
                }
                init = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"pw:jpow,prev:init,testCount:caseSum,",1408,2.1667341073354100,Beam
2706,,,211,11,,2791,4.019561473528540,0
2707,,,257,11,,3070,5.181563142935440,0
2708,"class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long C = Long.parseLong(parts[1]);
                long W = Long.parseLong(parts[2]);
                long result = (C-1)/W+W;
                bw.write(""Case #"" + (i+1) + "": "" + result + ""\n"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}","class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long D = Long.parseLong(parts[1]);
                long RW = Long.parseLong(parts[2]);
                long result = (D-1)/RW+RW;
                bw.write(""Case #"" + (i+1) + "": "" + result + ""
"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}",222,16,"W:RW,C:D,",311,0.4870596130688990,Beam
2709,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.6182879209518430,Beam
2710,,,171,10,,2233,3.260014200210570,0
2711,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int li=0;li<1000001;li++)
      grade[li]=UnSeKEN;
    Queue<Integer> w=new LinkedList<Integer>();
    grade[1]=1;
    w.add(1);
    while(!w.isEmpty()){
      int current=w.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nc=d+1;
        grade[next]=nc;
        w.add(next);
      }
    int c = current;
    int result=0;
    while(c>0){
      result=10*result+(c%10);
      c/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nc=d+1;
        grade[next]=nc;
        w.add(next);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int places=sen.nextInt();

    for(int ot=0;ot<places;ot++){
      int c=sen.nextInt();
      System.out.println(""Case #""+(ot+1)+"": ""+grade[c]);
    }
  }

  private static int[] grade;
  private static final int UnSeKEN=-1;
}",302,15,"distance:grade,scanner:sen,n:c,UNSEEN:UnSeKEN,i:li,cases:places,t:ot,q:w,nd:nc,",1861,2.8646267533302300,Beam
2712,,,292,17,,6895,11.50837899049120,0
2713,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int c = 0; c < Integer.parseInt(count); c++) {
                times.clear();
                for (int i91 = 0; i91 < 2501 ;i91++) {
                    Integer r = new Integer(0);
                    times.add(i91, r);
                }
                Integer w = Integer.parseInt(bf.readLine());
                for (int itwo = 1; itwo < 2*w; itwo++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i91 = 0; i91 < nums.length; i91++) {
                        Integer temp = Integer.parseInt(nums[i91]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String comperers = """";
                for (Integer i91 = 0; i91 < 2501; i91 ++) {
                    if (times.get(i91) % 2 != 0) {
                        comperers += i91.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (c + 1) + "": "" + comperers + ""
"");

        }
        bf.close();
        fw.close();
    }
}",305,15,"buffers:comperers,n:w,a:r,i:c,i1:i91,i2:itwo,",2879,5.358814016977950,Beam
2714,,,264,15,,1149,2.03128467798233,0
2715,,,255,13,,962,2.1078935980796800,0
2716,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5597151041030880,Beam
2717,,,479,25,,1840,3.3521018505096400,0
2718,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.4843852162361150,Beam
2719,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.22732004324595100,Beam
2720,,,349,19,,5321,8.867163387934370,0
2721,,,281,14,,4961,8.294187994798020,0
2722,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7854277928670250,Beam
2723,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0262449900309200,Beam
2724,,,344,15,,1142,1.8861250042915300,0
2725,"class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int s[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        s[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int max = 0;
                        for (int ss: s)
                            max = Math.max(max, ss);
                        if (max == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (s[i] == max)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            s[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            s[c1]--;
                            s[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""\n"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int r = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int w[] = new int[r];
                    for (int i = 0; i < r; ++i)
                        w[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int size = 0;
                        for (int ss: w)
                            size = Math.size(size, ss);
                        if (size == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < r; ++i) {
                            if (w[i] == size)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            w[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            w[c1]--;
                            w[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""
"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",417,19,"max:size,s:w,n:r,",1705,2.9559013485908500,Beam
2726,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long gain = 0;
                while( flippingWhatever != 0 )
                {
                    gain = gain * 10;
                    gain = gain + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = gain;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:gain,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",2021,3.4885655522346500,Beam
2727,"static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int parties=Integer.parseInt(in.readLine());
            String[] Members=in.readLine().split("" "");
            int total=0;
            for(int j=0;j<parties;j++){
                total+=Integer.parseInt(Members[j]);
                    }
            while(total!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ans="""";
                for(int j=0;j<parties;j++){
                        if(first<Integer.parseInt(Members[j])){
                            second=first;
                            first=Integer.parseInt(Members[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Members[j])){
                                    second=Integer.parseInt(Members[j]);
                                    num2=j;
                                }
                            }
                    }
                ans=""""+(char)(65+num1);
                Members[num1]=Integer.toString(Integer.parseInt(Members[num1])-1);
                total-=1;
                String ans2="""";
                for(int j=0;j<parties;j++){
                    double p=total;
                    if(Double.parseDouble(Members[j])/p>0.5){
                        ans+=(char)(65+j);
                        Members[j]=Integer.toString(Integer.parseInt(Members[j])-1);
                        total-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}","static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int partials=Integer.parseInt(in.readLine());
            String[] Players=in.readLine().split("" "");
            int no=0;
            for(int j=0;j<partials;j++){
                no+=Integer.parseInt(Players[j]);
                    }
            while(no!=0){
                int first=0;
                int second=-1;
                int numone=0;
                int num2=0;
                String ans="""";
                for(int j=0;j<partials;j++){
                        if(first<Integer.parseInt(Players[j])){
                            second=first;
                            first=Integer.parseInt(Players[j]);
                            num2=numone;
                            numone=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Players[j])){
                                    second=Integer.parseInt(Players[j]);
                                    num2=j;
                                }
                            }
                    }
                ans=""""+(char)(65+numone);
                Players[numone]=Integer.toString(Integer.parseInt(Players[numone])-1);
                no-=1;
                String ans2="""";
                for(int j=0;j<partials;j++){
                    double p=no;
                    if(Double.parseDouble(Players[j])/p>0.5){
                        ans+=(char)(65+j);
                        Players[j]=Integer.toString(Integer.parseInt(Players[j])-1);
                        no-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}",405,15,"parties:partials,Members:Players,total:no,num1:numone,",1923,3.6334851225217200,Beam
2728,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxidifer, c1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxidifer = 0;
            c1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxidifer = Math.max(cur - w[i], maxidifer);
                c1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxidifer / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + c1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"maxdif:maxidifer,rate:rank,m:w,s1:c1,",1427,2.4718756079673800,Beam
2729,,,325,16,,6077,11.147781670093500,0
2730,,,282,13,,3521,5.584990394115450,0
2731,,,619,14,,4333,7.879465468724570,0
2732,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.17074305216471400,Beam
2733,,,386,18,,7315,12.384765915075900,0
2734,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7128364205360410,Beam
2735,"class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int s[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        s[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int max = 0;
                        for (int ss: s)
                            max = Math.max(max, ss);
                        if (max == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (s[i] == max)
                                pos.add(i);
                        }
                        int ps = pos.size();
                        if (pos.size() % 2 == 1) {
                            ps--;
                            int cur = pos.get(pos.size() - 1);
                            s[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < ps; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            s[c1]--;
                            s[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""\n"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class TaskA {
    public static void main(String[] args) {
        String fileName = ""A-large.in"";
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + "".out""))) {
                int tests = Integer.valueOf(br.readLine());
                for (int test = 1; test <= tests; ++test) {
                    int n = new Scanner(br.readLine()).nextInt();
                    Scanner scanner = new Scanner(br.readLine());
                    int w[] = new int[n];
                    for (int i = 0; i < n; ++i)
                        w[i] = scanner.nextInt();
                    bw.write(""Case #"" + test + "": "");
                    while (true) {
                        int r = 0;
                        for (int ss: w)
                            r = Math.r(r, ss);
                        if (r == 0)
                            break;
                        ArrayList<Integer> pos = new ArrayList<Integer>();
                        for (int i = 0; i < n; ++i) {
                            if (w[i] == r)
                                pos.add(i);
                        }
                        int c = pos.size();
                        if (pos.size() % 2 == 1) {
                            c--;
                            int cur = pos.get(pos.size() - 1);
                            w[cur]--;
                            bw.write("""" + (char)('A' + cur) + "" "");
                        }
                        for (int i = 0; i < c; i += 2) {
                            int c1 = pos.get(i);
                            int c2 = pos.get(i + 1);
                            w[c1]--;
                            w[c2]--;
                            bw.write("""" + (char)('A' + c1) + (char)('A' + c2) + "" "");
                        }
                    }
                    bw.write(""
"");
                }
                bw.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",417,19,"s:w,max:r,ps:c,",1341,2.409793980916340,Beam
2736,,,269,13,,4394,8.097328893343610,0
2737,,,325,14,,4797,8.591690758864080,0
2738,,,298,16,,776,1.3419187545776400,0
2739,,,321,18,,3838,6.608980162938440,0
2740,,,468,14,,1551,3.7776122530301400,0
2741,,,345,16,,861,1.4308837095896400,0
2742,,,250,11,,2822,4.7337149500846900,0
2743,,,368,14,,4837,8.8273832599322,0
2744,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int TA=Integer.parseInt(text);     
    for (int tc=0;tc<TA;tc++) {
        int d = Integer.parseInt(in.readLine()); 
        int[] w = new int[d];
        for (int vi=0;vi<2*d-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}",358,16,"out:w,a:r,i:vi,n:d,T:TA,",2605,4.666646150747940,Beam
2745,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter line = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int diff;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            diff = 0;
            for (int chi = 0; chi < w; chi++)
                diff += judges.get(chi);

            while (diff-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    diff--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > diff / 2)
                        System.line.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            line.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        line.close();
    }

}",464,17,"senators:judges,sum:diff,index2:slice1,i:chi,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:line,",5085,9.583052166303000,Beam
2746,,,295,16,,4806,7.939984929561620,0
2747,,,240,13,,460,0.7311417023340860,0
2748,,,278,15,,5109,7.863488805294040,0
2749,,,273,11,,829,1.3993576844533300,0
2750,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,1.9948736747105900,Beam
2751,,,330,16,,6015,11.70802499850590,0
2752,,,282,13,,2935,4.648877441883090,0
2753,,,393,19,,1462,2.3962371905644700,0
2754,,,366,17,,900,1.5162850975990300,0
2755,,,224,11,,807,1.489493687947590,0
2756,,,358,18,,6790,11.60820151567460,0
2757,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long X = scanner.nextLong(), N = scanner.nextLong(), A = scanner.nextLong();
            
            long ants = (X - 1) * N;
            
            if (N % A == 0) {
                out.println (ants + N/A - 1 + A);
            } else {
                out.println (ants + N/A + A);
            }
        }

    }
}",156,10,"C:N,ans:ants,W:A,R:X,",1138,1.5403482953707400,Beam
2758,,,417,18,,3845,7.136905185381570,0
2759,,,517,26,,1258,2.5311149756113700,0
2760,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.1882592995961500,Beam
2761,,,224,11,,2760,4.951008474826810,0
2762,,,302,13,,2010,3.433652091026310,0
2763,,,269,16,,5830,9.394507241249080,0
2764,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Len = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Len[j] = sc.nextInt();
                    sum += Len[j];
                    Len[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Len[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Len[j] > 0) {
                                answer.append(parties[0]);
                                Len[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,Pi:Len,",342,0.6940747419993080,Beam
2765,,,460,16,,5302,10.738749965031900,0
2766,,,790,14,,5209,10.810509924093900,0
2767,,,290,12,,617,1.0689412395159400,0
2768,,,460,16,,5302,10.43241266409560,0
2769,,,366,17,,900,1.5133385101954100,0
2770,,,290,12,,617,1.0749979893366500,0
2771,,,321,18,,6932,11.173169656594600,0
2772,,,420,19,,7084,12.169433426857000,0
2773,,,344,15,,772,1.3095258752505000,0
2774,,,393,16,,5520,9.714259537061060,0
2775,,,366,17,,6139,9.982436847686770,0
2776,"class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] R = new int[N + 1];
            R[0] = sc.nextInt();
            int[] P = new int[N + 1];
            P[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                P[i + 1] = (P[i] + R[i] - S[i]) / 2;
                R[i + 1] = (R[i] + S[i] - P[i]) / 2;
                S[i + 1] = (P[i] + S[i] - R[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (R[N] == 1) {
                System.out.println(r[N]);
            } else if (P[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}","class A {
    static String[] c = new String[13];
    static String[] y = new String[13];
    static String[] ts = new String[13];

    public static void main(String[] args) {
        c[0] = ""R"";
        y[0] = ""P"";
        ts[0] = ""S"";
        for (int m = 0; m < 12; m++) {
            if (c[m].compareTo(y[m]) < 0) {
                y[m + 1] = c[m] + y[m];
            } else {
                y[m + 1] = y[m] + c[m];
            }

            if (c[m].compareTo(ts[m]) < 0) {
                c[m + 1] = c[m] + ts[m];
            } else {
                c[m + 1] = ts[m] + c[m];
            }

            if (ts[m].compareTo(y[m]) < 0) {
                ts[m + 1] = ts[m] + y[m];
            } else {
                ts[m + 1] = y[m] + ts[m];
            }
        }

        Scanner sci = new Scanner(System.in);
        int numcasing = sci.nextInt();
        for (int CaseCut = 1; CaseCut <= numcasing; CaseCut++) {
            int Y = sci.nextInt();

            int[] NR = new int[Y + 1];
            NR[0] = sci.nextInt();
            int[] Y = new int[Y + 1];
            Y[0] = sci.nextInt();
            int[] O = new int[Y + 1];
            O[0] = sci.nextInt();

            for (int m = 0; m < Y; m++) {
                Y[m + 1] = (Y[m] + NR[m] - O[m]) / 2;
                NR[m + 1] = (NR[m] + O[m] - Y[m]) / 2;
                O[m + 1] = (Y[m] + O[m] - NR[m]) / 2;
            }

            System.out.print(""Case #"" + CaseCut + "": "");
            boolean possibility = true;
            for (int m = 0; m <= Y; m++) {
                if (NR[m] < 0 || Y[m] < 0 || O[m] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possibility = false;
                    break;
                }
            }
            if (!possibility) {
                continue;
            }
            if (NR[Y] == 1) {
                System.out.println(c[Y]);
            } else if (Y[Y] == 1) {
                System.out.println(y[Y]);
            } else {
                System.out.println(ts[Y]);
            }
        }
        sci.close();
    }
}",619,14,"R:NR,S:O,N:Y,P:Y,caseNum:CaseCut,r:c,s:ts,i:m,p:y,numCases:numcasing,possible:possibility,sc:sci,",4055,7.439462955792750,Beam
2777,,,483,20,,8887,14.135892299811000,0
2778,,,330,16,,5891,11.41677063703540,0
2779,"class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanner = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int T = scanner.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = scanner.nextInt();
            int[] m = new int[N];
            for (int i = 0; i < N; i++) {
                m[i] = scanner.nextInt();
            }
            int s1 = 0;
            int maxDiff = 0;
            for (int i = 1; i < N; i++) {
                if (m[i-1] > m[i]) {
                    int diff = m[i-1] - m[i];
                    s1 += diff;
                    if (diff > maxDiff) {
                        maxDiff = diff;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < N-1; i++) {
                if (m[i] < maxDiff) {
                    s2 += m[i];
                } else {
                    s2 += maxDiff;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", t, s1, s2));
        }
        scanner.close();
        writer.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanner = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int T = scanner.nextInt();
        for (int t = 1; t <= T; t++) {
            int R = scanner.nextInt();
            int[] w = new int[R];
            for (int i = 0; i < R; i++) {
                w[i] = scanner.nextInt();
            }
            int s1 = 0;
            int maxDiff = 0;
            for (int i = 1; i < R; i++) {
                if (w[i-1] > w[i]) {
                    int diff = w[i-1] - w[i];
                    s1 += diff;
                    if (diff > maxDiff) {
                        maxDiff = diff;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < R-1; i++) {
                if (w[i] < maxDiff) {
                    s2 += w[i];
                } else {
                    s2 += maxDiff;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", t, s1, s2));
        }
        scanner.close();
        writer.close();
    }
}",267,13,"m:w,N:R,",525,0.8341843207677210,Beam
2780,,,544,17,,5345,10.213964200019800,0
2781,,,250,11,,559,0.987706434726715,0
2782,,,285,14,,4837,7.979540419578550,0
2783,,,572,15,,5157,10.073147996266700,0
2784,,,330,16,,6077,11.932307104269700,0
2785,"class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File inputFile = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader br = null;
                StringBuilder output = new StringBuilder();
                try {
                     // String buffer for storing the output
                    br = new BufferedReader(new FileReader(inputFile));
                    int numTests = Integer.parseInt(br.readLine());
                    int test;
                    String [] testSplit;
                    int [] mush;
                    
                    // Loop through each test
                    for (int testCounter = 0; testCounter < numTests; ++testCounter) {
                        test=Integer.parseInt(br.readLine());
                        
                        testSplit=(br.readLine()).split("" "");
                        mush= new int[test];
                        for(int s=0;s<test;s++)
                        {
                            mush[s]=Integer.parseInt(testSplit[s]);
                        }
                        int out1=0,out2=0;
                        int currentDiff=0,maxDiff=0;
                        out1=0;
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s]<mush[s-1])
                            {
                                currentDiff=mush[s-1]-mush[s];
                                out1+=currentDiff;
                                maxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;
                                
                            }
                        }
                        for(int s=test-1;s>0;s--)
                        {
                            if(mush[s-1]<maxDiff)
                            {
                                out2+=mush[s-1];
                                
                            }
                            else
                            {
                                out2+=maxDiff;
                            }
                        }
                        System.out.println(""Case #""+(testCounter+1)+"": ""+out1+"" ""+out2);
        //                System.out.println(""Done"");
                        output.append(""Case #"").append((testCounter+1)).append("": "").append(out1+"" ""+out2);
                        output.append(""\n"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFile = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writer = null;
                try
                {
                    writer = new BufferedWriter( new FileWriter(outputFile ));
                    writer.write( output.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writer != null)
                        writer.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}","class Monstor {

    public static void main(String[] args) {
        Monstor r = new Monstor();
        File File = new File(""/Users/aganavin/Desktop/A-large.in"");
                BufferedReader wr = null;
                StringBuilder letter = new StringBuilder();
                try {
                     // String buffer for storing the output
                    wr = new BufferedReader(new FileReader(File));
                    int NumFables = Integer.parseInt(wr.readLine());
                    int train;
                    String [] casePart;
                    int [] mess;
                    
                    // Loop through each test
                    for (int matchCount = 0; matchCount < NumFables; ++matchCount) {
                        train=Integer.parseInt(wr.readLine());
                        
                        casePart=(wr.readLine()).split("" "");
                        mess= new int[train];
                        for(int n=0;n<train;n++)
                        {
                            mess[n]=Integer.parseInt(casePart[n]);
                        }
                        int intPart=0,in3=0;
                        int currentLength=0,total=0;
                        intPart=0;
                        for(int n=train-1;n>0;n--)
                        {
                            if(mess[n]<mess[n-1])
                            {
                                currentLength=mess[n-1]-mess[n];
                                intPart+=currentLength;
                                total=(total<currentLength)?currentLength:total;
                                
                            }
                        }
                        for(int n=train-1;n>0;n--)
                        {
                            if(mess[n-1]<total)
                            {
                                in3+=mess[n-1];
                                
                            }
                            else
                            {
                                in3+=total;
                            }
                        }
                        System.out.println(""Case #""+(matchCount+1)+"": ""+intPart+"" ""+in3);
        //                System.out.println(""Done"");
                        letter.append(""Case #"").append((matchCount+1)).append("": "").append(intPart+"" ""+in3);
                        letter.append(""
"");
                    }
                } catch (Exception e) {
        //            System.out.println(e);
                }
                File outputFILE = new File(""/Users/aganavin/Desktop/output1.out"");
                BufferedWriter writers = null;
                try
                {
                    writers = new BufferedWriter( new FileWriter(outputFILE ));
                    writers.write( letter.toString());
                
                }
                catch ( IOException e)
                {
                }
                finally
                {
                    try
                    {
                        if ( writers != null)
                        writers.close( );
                    }
                    catch ( IOException e)
                    {
                    }
                }

    }
}",443,17,"mush:mess,s:n,maxDiff:total,currentDiff:currentLength,test:train,testCounter:matchCount,output:letter,out1:intPart,numTests:NumFables,testSplit:casePart,out2:in3,br:wr,inputFile:File,writer:writers,outputFile:outputFILE,",4814,8.528915723164880,Beam
2786,,,262,14,,2419,4.252950465679170,0
2787,,,334,15,,807,1.6119221329689000,0
2788,,,200,10,,714,1.0048654278119400,0
2789,,,479,25,,8210,14.507356401284500,0
2790,,,273,11,,2659,4.6324114044507300,0
2791,,,327,16,,4554,8.47235765059789,0
2792,,,317,12,,617,1.1202612320582100,0
2793,,,254,13,,951,1.610989260673520,0
2794,,,324,13,,4248,7.618197472890220,0
2795,,,260,11,,2512,4.54662055571874,0
2796,,,334,15,,1892,3.6295763810475700,0
2797,,,468,14,,3287,6.84013634522756,0
2798,,,406,16,,869,1.6727437893549600,0
2799,,,260,11,,2512,4.5507516423861200,0
2800,,,464,17,,5358,9.958209669590000,0
2801,,,418,13,,4434,9.84554082552592,0
2802,,,291,13,,4248,6.820203006267550,0
2803,,,426,18,,3560,6.8425704598426800,0
2804,,,257,11,,2977,5.149185530344650,0
2805,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7020564238230390,Beam
2806,,,344,15,,2475,4.202190621693930,0
2807,,,292,15,,5630,9.707995009422300,0
2808,,,263,13,,683,1.140055243174240,0
2809,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                slated.add(i, 0);
            }
            int equateOrg = 0;
            for (int i = 0; i < N; i++) {
                int w = r.nextInt();
                slated.set(i, w);
                equateOrg += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateOrg > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (max == second && equateOrg != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateOrg -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateOrg -= 1;
                }
            }
            if (equateOrg == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateOrg,temp:w,in:r,",1856,3.8341497858365400,Beam
2810,,,298,16,,1210,2.0884568134943600,0
2811,,,292,17,,6850,11.203030133247400,0
2812,,,256,13,,4357,7.396523201465610,0
2813,,,295,15,,1095,1.99813072681427,0
2814,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.23489755392074600,Beam
2815,,,419,16,,6077,10.758341614405300,0
2816,,,321,18,,6960,10.994519849618300,0
2817,,,264,15,,1842,3.227246073881790,0
2818,,,211,11,,2760,4.354957016309100,0
2819,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2481,4.304379955927530,Beam
2820,,,500,19,,8360,15.27386173804600,0
2821,,,619,14,,4582,8.250834878285730,0
2822,,,260,11,,2512,4.632722886403400,0
2823,,,325,14,,5105,8.991458626588190,0
2824,,,292,16,,4155,6.849902228514350,0
2825,,,311,17,,1743,2.7866171677907300,0
2826,"class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int N = Integer.parseInt(br.readLine());
            int[][] vrst = new int[2*N-1][N];
            for(int j=0;j<2*N-1;j++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<N;k++) {
                    //System.out.println(""""+j+k);
                    vrst[j][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*N-1;i1++){
                for(int j = 0;j<N;j++){
                    bool[vrst[i1][j]]=!bool[vrst[i1][j]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""\n"");
            pw.write(""Case #""+(i+1)+"": ""+a+""\n"");

        }
        pw.close();
    }
}","class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int W = Integer.parseInt(br.readLine());
            int[][] cvste = new int[2*W-1][W];
            for(int dj=0;dj<2*W-1;dj++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<W;k++) {
                    //System.out.println(""""+j+k);
                    cvste[dj][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*W-1;i1++){
                for(int dj = 0;dj<W;dj++){
                    bool[cvste[i1][dj]]=!bool[cvste[i1][dj]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""
"");
            pw.write(""Case #""+(i+1)+"": ""+a+""
"");

        }
        pw.close();
    }
}",399,18,"N:W,j:dj,vrst:cvste,",1303,2.366820498307550,Beam
2827,,,887,27,,1916,4.112134063243870,0
2828,,,326,14,,4899,8.334879271189370,0
2829,,,375,12,,3715,6.873317313194280,0
2830,,,735,24,,11483,18.72517702182130,0
2831,,,325,14,,4770,8.76033569574356,0
2832,,,272,16,,4582,6.346557482083640,0
2833,,,317,12,,617,1.1104825099309300,0
2834,,,278,11,,3042,5.016821169853210,0
2835,,,325,16,,5891,10.804064146677700,0
2836,,,300,13,,3768,6.034996831417080,0
2837,,,325,14,,4797,8.602759997049970,0
2838,,,292,15,,4180,7.493870441118880,0
2839,,,211,11,,559,0.882714593410492,0
2840,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7165476083755490,Beam
2841,,,250,11,,559,0.9749806523323060,0
2842,,,272,16,,4681,6.505329203605650,0
2843,,,393,19,,979,1.651404571533200,0
2844,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] smatch = new int[n];
                    for (int i = 0; i < n; i++) {
                        smatch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int comment = smatch[i] - smatch[i + 1];
                        if (comment > 0) {
                            first += comment;
                        }
                    }
                    
                    int[] comment = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        comment[i] = smatch[i] - smatch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, comment[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, smatch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] smatch = new int[n];
                for (int i = 0; i < n; i++) {
                    smatch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int comment = smatch[i] - smatch[i + 1];
                    if (comment > 0) {
                        first += comment;
                    }
                }
                
                int[] comment = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    comment[i] = smatch[i] - smatch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, comment[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, smatch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:smatch,diff:comment,i4:i22,",1182,2.783450722694400,Beam
2845,"class A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(
                        System.in
                        )));
        StringBuilder builder;
        long dp[] = new long[1000005];
        dp[0] = dp[1] = 1;
        for (int i = 2; i < 20; i++) {
            dp[i] = i;
        }

        for (int i = 20; i < dp.length; i++) {
            int iLength = Integer.toString(i).length();
            builder = new StringBuilder();
            builder.append(i);
            int rev = Integer.parseInt(builder.reverse().toString());
            int revLength = Integer.toString(rev).length();
            if (rev < dp.length && rev < i && iLength == revLength) {
                dp[i] = Math.min(dp[i-1], dp[rev]) + 1;
            } else {
                dp[i] = dp[i-1] + 1;
            }
        }

        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt();
            System.out.printf(""Case #%d: %d\n"", t, dp[N]);
        }
    }
}","class A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(
                        System.in
                        )));
        StringBuilder builder;
        long dp[] = new long[1000005];
        dp[0] = dp[1] = 1;
        for (int i = 2; i < 20; i++) {
            dp[i] = i;
        }

        for (int i = 20; i < dp.length; i++) {
            int iWidth = Integer.toString(i).length();
            builder = new StringBuilder();
            builder.append(i);
            int rev = Integer.parseInt(builder.reverse().toString());
            int revLength = Integer.toString(rev).length();
            if (rev < dp.length && rev < i && iWidth == revLength) {
                dp[i] = Math.min(dp[i-1], dp[rev]) + 1;
            } else {
                dp[i] = dp[i-1] + 1;
            }
        }

        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt();
            System.out.printf(""Case #%d: %d
"", t, dp[N]);
        }
    }
}",271,12,"iLength:iWidth,",81,0.13768484592437700,Beam
2846,,,269,16,,845,1.4322946349779800,0
2847,,,156,10,,2419,2.999161656697590,0
2848,,,360,19,,7058,12.310071889559400,0
2849,,,269,13,,4394,8.04602636496226,0
2850,,,240,12,,3042,5.116099190711980,0
2851,,,256,13,,4415,7.309416985511780,0
2852,,,334,15,,807,1.545007860660550,0
2853,,,443,17,,2811,5.151411668459570,0
2854,,,420,19,,7084,11.931985370318100,0
2855,,,655,16,,2294,4.853307310740150,0
2856,,,443,17,,5241,9.176180358727770,0
2857,,,263,13,,4372,7.537188398838040,0
2858,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7495258450508120,Beam
2859,,,334,15,,1179,2.261192786693570,0
2860,,,211,11,,2760,4.296961025396980,0
2861,,,255,13,,1830,4.005982502301530,0
2862,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter line = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int diff;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            diff = 0;
            for (int chi = 0; chi < w; chi++)
                diff += judges.get(chi);

            while (diff-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    diff--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > diff / 2)
                        System.line.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            line.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        line.close();
    }

}",464,17,"senators:judges,sum:diff,i:chi,index2:slice1,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:line,",5085,9.58919430176417,Beam
2863,,,250,11,,1489,2.566551605860390,0
2864,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,0.7453441460927330,Beam
2865,,,198,10,,2205,3.8272034605344100,0
2866,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.4088688254356380,Beam
2867,,,149,10,,2388,3.1321380933125800,0
2868,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int N = Integer.parseInt(st.nextToken());
            int N = Integer.parseInt(st.nextToken());

            if (N == N)
                out.println(N+R-1);
            else if (N < 2*N)
                out.println(R+N);
            else if (N == 2*N)
                out.println(2*R-1+N);
            else {
                int rem = N%N;
                if (rem == 0) {
                    out.println((N*R)/N-1+N);
                }
                else {
                    out.println((N/N)*R+N);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}",273,11,"C:N,W:N,",423,0.7252277612686160,Beam
2869,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"count:sum,num:width,row:cur,i:c,height:width,kk:ctx,in:r,",2044,3.8159356117248500,Beam
2870,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner rc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = rc.nextInt();
        
        for (int x = 1; x <= R; ++x) {
            int W = rc.nextInt();
            
            int[][] yr = new int[2*W-1][W];
            
            // 2 * N - 1 line with N numbers
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    yr[c][c] = rc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> mp = new HashMap<>();
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    if (mp.get(yr[c][c]) == null) {
                        mp.put(yr[c][c], 1);
                    }
                    else {
                        int w = mp.get(yr[c][c]);
                        mp.put(yr[c][c], w + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int c : mp.keySet()) {
                if (mp.get(c) % 2 != 0) {
                    r.add(c);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int c = 0; c < r.size(); ++c) {
                System.out.print("" "" + r.get(c));
            }
            System.out.println();
        }

        rc.close();
    }
}",375,12,"N:W,i:c,arr:yr,T:R,k:w,map:mp,j:c,sc:rc,",2785,5.179077982902530,Beam
2871,,,393,16,,5086,9.339383478959400,0
2872,,,443,17,,5695,9.960379679997760,0
2873,,,266,13,,4055,7.110171115398410,0
2874,,,215,12,,3329,5.269729137420650,0
2875,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lill = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lill[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = lill[iu22] - lill[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = lill[i3] - lill[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lill[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lill = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lill[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int stuff = lill[iu22] - lill[iu22 + 1];
                            if (stuff > 0) {
                                first += stuff;
                            }
                        }
                        
                        int[] stuff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            stuff[i3] = lill[i3] - lill[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, stuff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lill[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] lill = new int[n];
                    for (int i = 0; i < n; i++) {
                        lill[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int stuff = lill[i] - lill[i + 1];
                        if (stuff > 0) {
                            first += stuff;
                        }
                    }
                    
                    int[] stuff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        stuff[i] = lill[i] - lill[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, stuff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, lill[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] lill = new int[n];
                for (int i = 0; i < n; i++) {
                    lill[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int stuff = lill[i] - lill[i + 1];
                    if (stuff > 0) {
                        first += stuff;
                    }
                }
                
                int[] stuff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    stuff[i] = lill[i] - lill[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, stuff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, lill[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:lill,i4:iu22,diff:stuff,",1044,2.4346046527226800,Beam
2876,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    queryIn    = new Scanner(System.in);
        
        int C    = queryIn.nextInt();
        
        for(int in=0; in<C; ++in) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        row    = queryIn.nextInt();
            int        a    = queryIn.nextInt();
            int        row    = queryIn.nextInt();
            int    total    = row*a;
            int    ref2        = 0;
            
            //    scan
            ref2    = row*(a/row);
            
            if(a % row == 0) {
                ref2    += row-1;
            } else if( row == 1) {
            } else {
                ref2    += row;
            }
            
            int    continue    = ref2;
            
            System.out.println(""Case #"" + (in+1) + "": "" + continue);
        }
        
        queryIn.close();
    }
}",171,10,"w:row,c:a,ret1:ref2,r:row,i:in,ret:continue,scanIn:queryIn,T:C,",2109,3.2117647369702700,Beam
2877,,,132,9,,1697,2.0513029019037900,0
2878,,,348,14,,3492,6.386720033486680,0
2879,,,448,16,,4176,8.069122505187990,0
2880,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] smatch = new int[n];
                    for (int i = 0; i < n; i++) {
                        smatch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int comment = smatch[i] - smatch[i + 1];
                        if (comment > 0) {
                            first += comment;
                        }
                    }
                    
                    int[] comment = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        comment[i] = smatch[i] - smatch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, comment[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, smatch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] smatch = new int[n];
                for (int i = 0; i < n; i++) {
                    smatch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int comment = smatch[i] - smatch[i + 1];
                    if (comment > 0) {
                        first += comment;
                    }
                }
                
                int[] comment = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    comment[i] = smatch[i] - smatch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, comment[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, smatch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:smatch,diff:comment,i4:i22,",1182,2.7391685088475500,Beam
2881,"class A1 {

    public static void main(String[] args) throws Exception {

        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        int[] C = new int[1000001]; // min counts
        for (int i = 0; i < C.length; i++)
            C[i] = i;
        for (int n = 2; n <= C.length; n++) {
            C[n] = Math.min(C[n], C[n - 1] + 1);
            int r = Integer.parseInt(new StringBuilder(String.valueOf(n)).reverse().toString());
            if (r > n)
                C[r] = Math.min(C[r], C[n] + 1);
        }
        
        int T = Integer.parseInt(in.readLine());
        for (int t = 1; t <= T; t++) {
            int N = Integer.parseInt(in.readLine());
            out.println(""Case #"" + t + "": "" + C[N]);
        }
        out.close();
    }

}","class A1 {

    public static void main(String[] args) throws Exception {

        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        int[] C = new int[1000001]; // min counts
        for (int i = 0; i < C.length; i++)
            C[i] = i;
        for (int w = 2; w <= C.length; w++) {
            C[w] = Math.min(C[w], C[w - 1] + 1);
            int r = Integer.parseInt(new StringBuilder(String.valueOf(w)).reverse().toString());
            if (r > w)
                C[r] = Math.min(C[r], C[w] + 1);
        }
        
        int T = Integer.parseInt(in.readLine());
        for (int t = 1; t <= T; t++) {
            int N = Integer.parseInt(in.readLine());
            out.println(""Case #"" + t + "": "" + C[N]);
        }
        out.close();
    }

}",249,11,"n:w,",218,0.34477274417877200,Beam
2882,,,254,13,,3921,6.347898288567860,0
2883,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String file = in.readLine();
        int n = Integer.parseInt(file);
        for(int i=0; i<n; i++){
            file = in.readLine();
            String[] arr = file.split("" "");
            int ar = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int ow = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int id = 0; id < ar-1; id++){
                min = min + (p/ow);
            }
            if(p-ow == 0){
                min = min + ow;
            }else if(p-ow < ow){
                min = ow + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)ow));
                min = min + ow - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:ow,c:p,r:ar,x:id,line:file,",2047,3.5149228453636200,Beam
2884,,,255,13,,2946,6.3474042296409600,0
2885,,,327,16,,1146,2.0620786786079400,0
2886,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] wp = new long[max];
        wp[1] = 1;
        wp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = wp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = wp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                wp[i] = second;
            }else
            {
                wp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(wp[(int)n]);
        }

    }
}",325,16,"dp:wp,",94,0.17183502515157100,Beam
2887,,,328,16,,5302,9.393041841189070,0
2888,,,187,13,,2310,3.0172186215718600,0
2889,,,366,17,,900,1.4485308488210000,0
2890,,,211,11,,559,0.8412115136782330,0
2891,,,334,12,,3685,6.872763172785440,0
2892,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.40099114576975500,Beam
2893,,,262,14,,993,1.637296978632610,0
2894,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long counter = queue.poll();
                
                if (counter == W){
                    break;
                }
                
                next[0] = counter + 1;
                StringBuilder builder = new StringBuilder(Long.toString(counter));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= W && next[i] > counter){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(counter) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,number:counter,",402,0.7349464178085330,Beam
2895,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7089780648549400,Beam
2896,,,208,12,,2313,3.495022201538090,0
2897,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int N = Integer.parseInt(st.nextToken());
            int N = Integer.parseInt(st.nextToken());

            if (N == N)
                out.println(N+R-1);
            else if (N < 2*N)
                out.println(R+N);
            else if (N == 2*N)
                out.println(2*R-1+N);
            else {
                int rem = N%N;
                if (rem == 0) {
                    out.println((N*R)/N-1+N);
                }
                else {
                    out.println((N/N)*R+N);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}",273,11,"C:N,W:N,",423,0.7090369264284770,Beam
2898,,,256,13,,1021,1.6520234902699800,0
2899,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.2593825340271000,Beam
2900,,,441,13,,3969,7.791946856180830,0
2901,,,305,15,,5184,9.401507290204370,0
2902,,,292,15,,1904,3.3621177434921300,0
2903,,,257,11,,559,0.9793052275975550,0
2904,,,527,25,,16400,28.83709723552070,0
2905,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[n]);
    }
  }

  private static int[] grade;
  private static final int UNSEEN=-1;
}",302,15,"distance:grade,",63,0.11878703832626300,Beam
2906,,,334,15,,5178,9.712783082326250,0
2907,,,348,14,,3548,6.487778194745380,0
2908,,,418,13,,4093,9.04038550456365,0
2909,,,290,12,,3263,5.789773122469580,0
2910,,,269,13,,4045,7.19702756802241,0
2911,,,735,24,,11233,17.68598754008610,0
2912,,,417,18,,3845,7.086384495099390,0
2913,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5500312407811480,Beam
2914,,,298,16,,4527,7.82052356004715,0
2915,,,256,13,,927,1.7028554479281100,0
2916,,,326,14,,1086,1.9638394872347500,0
2917,,,200,10,,2233,3.24093211889267,0
2918,"class B
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader in  = new BufferedReader(new FileReader(""B.in""));
        BufferedWriter out = new BufferedWriter(new FileWriter(""B.out""));

        int T = Integer.parseInt(in.readLine());
        for(int t=1;t<=T;t++)
        {
            StringTokenizer st = new StringTokenizer(in.readLine());
            int N = Integer.parseInt(st.nextToken());
            int K = Integer.parseInt(st.nextToken());

            st = new StringTokenizer(in.readLine());
            double[] P = new double[N];
            for(int i=0;i<N;i++)
                P[i] = Double.parseDouble(st.nextToken());

            double[][] tt = new double[N][N];
            double[][] tf = new double[N][N];
            double[][] ft = new double[N][N];
            double[][] ff = new double[N][N];
            for(int i=0;i<N;i++)
                for(int j=0;j<N;j++)
                {
                    tt[i][j] =      P[i]  *      P[j];
                    tf[i][j] =      P[i]  * (1 - P[j]);
                    ft[i][j] = (1 - P[i]) *      P[j];
                    ff[i][j] = (1 - P[i]) * (1 - P[j]);
                }

            double ans = 0;
            for(int i=0;i<(1 << N);i++)
            {
                int num = 0;
                for(int j=0;j<N;j++)
                    if((i & (1 << j)) != 0)
                        num++;

                if(num == K)
                {
                    double[] prob = new double[K+1];
                    prob[0] = 1;

                    for(int j=0;j<N;j++)
                        if((i & (1 << j)) != 0)
                        {
                            double[] temp = new double[K+1];
                            temp[0] = prob[0] * (1 - P[j]);
                            for(int a=1;a<=K;a++)
                                temp[a] = prob[a] * (1-P[j]) + prob[a-1] * P[j];
                            prob = temp;
                        }
                    ans = Math.max(ans, prob[K/2]);
                }
            }

            out.write(""Case #""+t+"": "");
            out.write(""""+ans);
            out.write(""\n"");
        }

        in .close();
        out.close();
    }
}","class B
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader in  = new BufferedReader(new FileReader(""B.in""));
        BufferedWriter out = new BufferedWriter(new FileWriter(""B.out""));

        int T = Integer.parseInt(in.readLine());
        for(int t=1;t<=T;t++)
        {
            StringTokenizer st = new StringTokenizer(in.readLine());
            int N = Integer.parseInt(st.nextToken());
            int Ak = Integer.parseInt(st.nextToken());

            st = new StringTokenizer(in.readLine());
            double[] W = new double[N];
            for(int i=0;i<N;i++)
                W[i] = Double.parseDouble(st.nextToken());

            double[][] tt = new double[N][N];
            double[][] tf = new double[N][N];
            double[][] ft = new double[N][N];
            double[][] ff = new double[N][N];
            for(int i=0;i<N;i++)
                for(int j=0;j<N;j++)
                {
                    tt[i][j] =      W[i]  *      W[j];
                    tf[i][j] =      W[i]  * (1 - W[j]);
                    ft[i][j] = (1 - W[i]) *      W[j];
                    ff[i][j] = (1 - W[i]) * (1 - W[j]);
                }

            double ans = 0;
            for(int i=0;i<(1 << N);i++)
            {
                int num = 0;
                for(int j=0;j<N;j++)
                    if((i & (1 << j)) != 0)
                        num++;

                if(num == Ak)
                {
                    double[] prob = new double[Ak+1];
                    prob[0] = 1;

                    for(int j=0;j<N;j++)
                        if((i & (1 << j)) != 0)
                        {
                            double[] temp = new double[Ak+1];
                            temp[0] = prob[0] * (1 - W[j]);
                            for(int a=1;a<=Ak;a++)
                                temp[a] = prob[a] * (1-W[j]) + prob[a-1] * W[j];
                            prob = temp;
                        }
                    ans = Math.max(ans, prob[Ak/2]);
                }
            }

            out.write(""Case #""+t+"": "");
            out.write(""""+ans);
            out.write(""
"");
        }

        in .close();
        out.close();
    }
}",605,21,"P:W,K:Ak,",582,0.9813388228416440,Beam
2919,,,386,18,,7321,12.692599964141800,0
2920,,,479,25,,8204,14.115948526064600,0
2921,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,0.7130304177602130,Beam
2922,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[n]);
    }
  }

  private static int[] grade;
  private static final int UNSEEN=-1;
}",302,15,"distance:grade,",63,0.11354179382324200,Beam
2923,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,sw,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            sw = sc.nextInt();
            irez = c/sw;
            irez *=r;
            irez +=sw-1;
            if(c%sw > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,w:sw,",466,0.5900994459788010,Beam
2924,,,330,16,,5147,10.031155808766700,0
2925,,,316,15,,4574,7.869934670130410,0
2926,"class B
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader in  = new BufferedReader(new FileReader(""B.in""));
        BufferedWriter out = new BufferedWriter(new FileWriter(""B.out""));

        int T = Integer.parseInt(in.readLine());
        for(int t=1;t<=T;t++)
        {
            StringTokenizer st = new StringTokenizer(in.readLine());
            int N = Integer.parseInt(st.nextToken());
            int K = Integer.parseInt(st.nextToken());

            st = new StringTokenizer(in.readLine());
            double[] P = new double[N];
            for(int i=0;i<N;i++)
                P[i] = Double.parseDouble(st.nextToken());

            double[][] tt = new double[N][N];
            double[][] tf = new double[N][N];
            double[][] ft = new double[N][N];
            double[][] ff = new double[N][N];
            for(int i=0;i<N;i++)
                for(int j=0;j<N;j++)
                {
                    tt[i][j] =      P[i]  *      P[j];
                    tf[i][j] =      P[i]  * (1 - P[j]);
                    ft[i][j] = (1 - P[i]) *      P[j];
                    ff[i][j] = (1 - P[i]) * (1 - P[j]);
                }

            double ans = 0;
            for(int i=0;i<(1 << N);i++)
            {
                int num = 0;
                for(int j=0;j<N;j++)
                    if((i & (1 << j)) != 0)
                        num++;

                if(num == K)
                {
                    double[] prob = new double[K+1];
                    prob[0] = 1;

                    for(int j=0;j<N;j++)
                        if((i & (1 << j)) != 0)
                        {
                            double[] temp = new double[K+1];
                            temp[0] = prob[0] * (1 - P[j]);
                            for(int a=1;a<=K;a++)
                                temp[a] = prob[a] * (1-P[j]) + prob[a-1] * P[j];
                            prob = temp;
                        }
                    ans = Math.max(ans, prob[K/2]);
                }
            }

            out.write(""Case #""+t+"": "");
            out.write(""""+ans);
            out.write(""\n"");
        }

        in .close();
        out.close();
    }
}","class B
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader in  = new BufferedReader(new FileReader(""B.in""));
        BufferedWriter out = new BufferedWriter(new FileWriter(""B.out""));

        int T = Integer.parseInt(in.readLine());
        for(int t=1;t<=T;t++)
        {
            StringTokenizer st = new StringTokenizer(in.readLine());
            int N = Integer.parseInt(st.nextToken());
            int Ak = Integer.parseInt(st.nextToken());

            st = new StringTokenizer(in.readLine());
            double[] W = new double[N];
            for(int i=0;i<N;i++)
                W[i] = Double.parseDouble(st.nextToken());

            double[][] tt = new double[N][N];
            double[][] tf = new double[N][N];
            double[][] ft = new double[N][N];
            double[][] ff = new double[N][N];
            for(int i=0;i<N;i++)
                for(int j=0;j<N;j++)
                {
                    tt[i][j] =      W[i]  *      W[j];
                    tf[i][j] =      W[i]  * (1 - W[j]);
                    ft[i][j] = (1 - W[i]) *      W[j];
                    ff[i][j] = (1 - W[i]) * (1 - W[j]);
                }

            double ans = 0;
            for(int i=0;i<(1 << N);i++)
            {
                int num = 0;
                for(int j=0;j<N;j++)
                    if((i & (1 << j)) != 0)
                        num++;

                if(num == Ak)
                {
                    double[] prob = new double[Ak+1];
                    prob[0] = 1;

                    for(int j=0;j<N;j++)
                        if((i & (1 << j)) != 0)
                        {
                            double[] temp = new double[Ak+1];
                            temp[0] = prob[0] * (1 - W[j]);
                            for(int a=1;a<=Ak;a++)
                                temp[a] = prob[a] * (1-W[j]) + prob[a-1] * W[j];
                            prob = temp;
                        }
                    ans = Math.max(ans, prob[Ak/2]);
                }
            }

            out.write(""Case #""+t+"": "");
            out.write(""""+ans);
            out.write(""
"");
        }

        in .close();
        out.close();
    }
}",605,21,"P:W,K:Ak,",582,0.9280986150105790,Beam
2927,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int c=inp.nextInt();
        int[] art=new int[c];
        for(int j=0;j<c;j++){
            art[j]=inp.nextInt();
        }
        int mean1=0;
        int missTwo=0;
        for(int key=0;key<c-1;key++){
            
            int y=(art[key]-art[key+1]>0)? art[key]-art[key+1]:0;
            mean1+=y;
        
        }
        int w=0;
        for(int r=0;r<c-1;r++){
            w=Math.max(w,art[r]-art[r+1]);
        }
        for(int c=0;c<c-1;c++){
            int w=(art[c]<=w)?art[c]:w;
            missTwo+=w;
        }

        System.out.println(""Case #""+(i+1)+"": ""+mean1+"" ""+missTwo);
    }
}
}",272,16,"sum1:mean1,sum2:missTwo,h:r,arr:art,k:key,d:c,v:w,n:c,x:w,",4856,6.448478988806410,Beam
2928,,,426,18,,3529,6.640280667940780,0
2929,,,309,11,,1954,3.295478272438050,0
2930,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int w = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[w];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int c = 0 ; c < w-1 ; c++) {
                    dip = Math.max(dip,ar[c]-ar[c+1]);
                    if(ar[c+1]<ar[c]) {
                        ansY += ar[c]-ar[c+1];
                    }
                }
                for(int c = 0 ; c < w-1 ; c++) {
                    int x = Math.min(ar[c],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:w,j:c,",1272,2.216937025388080,Beam
2931,,,349,19,,862,1.4412790616353400,0
2932,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,2.099852915604910,Beam
2933,,,278,11,,3251,5.473663191000620,0
2934,,,269,16,,5830,9.381108983357750,0
2935,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner laneChan = null;
        int width;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        width = s.nextInt();
        s.nextLine();
        for (int c = 0; c < width; c++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] lakeValues = new int[currentSize];
            line = s.nextLine();
            laneChan = new Scanner(line);
            int j = 0;
            while (laneChan.hasNextInt()) {
                lakeValues[j] = laneChan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastapestSize = 0;
            for (int w = 1; w < currentSize; w++) {
                if (lakeValues[w] < lakeValues[w - 1]) {
                    firstMethod += lakeValues[w - 1] - lakeValues[w];
                    fastapestSize = Math.max(fastapestSize, lakeValues[w - 1] - lakeValues[w]);
                }
            }
            int secondMethod = 0;
            for (int w = 0; w < currentSize - 1; w++) {
                if (lakeValues[w] > fastapestSize) {
                    secondMethod += fastapestSize;
                } else {
                    secondMethod += lakeValues[w];
                }
            }
            printer.print(""Case #"" + (c + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}",328,16,"fastestRate:fastapestSize,size:width,i:c,m:w,plateValues:lakeValues,lineScan:laneChan,",3132,5.645967447757720,Beam
2936,,,300,13,,3766,6.070536998907730,0
2937,,,132,9,,1914,2.2953016559282900,0
2938,,,419,16,,6077,10.869267630577100,0
2939,,,273,11,,2417,4.101603209972380,0
2940,,,544,17,,5844,11.572938136259700,0
2941,,,282,13,,4231,6.7365997989972400,0
2942,,,366,17,,5767,8.822314655780790,0
2943,,,316,15,,4204,7.269441552956900,0
2944,,,269,16,,5807,9.171187341213230,0
2945,,,358,16,,1241,2.1981662551562000,0
2946,,,358,18,,915,1.5362350622812900,0
2947,,,211,11,,2946,4.481008466084800,0
2948,,,255,13,,2915,6.221228456497190,0
2949,,,655,16,,2071,4.114760514100390,0
2950,,,348,14,,3895,7.097114408016210,0
2951,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader cr = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter wpwb = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(cr.readLine());
        for (int i = 1; i <= t; i++) {
            int ans4 = 0;
            int an02 = 0;
            int n = Integer.parseInt(cr.readLine());
            int[] rows = new int[n];
            String[] array = cr.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(array[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                if (size < w)
                    ans4 += (w - size);
            }
            
            //2
            int always = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                int count = w - size;
                if (count > always)
                    always = count;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < always)
                    an02 += rows[j];
                else
                    an02 += always;
            }
            
            wpwb.println(String.format(print, i, ans4, an02));
        }
        
        cr.close();
        wpwb.close();
    }
}",360,19,"ans2:an02,c:count,datas:rows,pw:wpwb,max:always,s:size,f:w,prefix:print,ans1:ans4,raw:array,br:cr,",6020,10.579539934794100,Beam
2952,,,211,11,,2760,4.279772758483890,0
2953,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",993,1.7211139480272900,Beam
2954,,,305,15,,5232,9.14669274489085,0
2955,,,224,11,,807,1.4696179787317900,0
2956,,,619,14,,4333,7.785818390051520,0
2957,,,326,14,,5209,8.76320088704427,0
2958,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pp;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pp = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        pp.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pp.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:pp,",2512,4.29255762497584,Beam
2959,,,334,15,,807,1.5544810811678600,0
2960,,,305,15,,799,1.3831241647402400,0
2961,,,281,14,,4651,8.025460608800250,0
2962,,,249,11,,2605,4.1956975102424600,0
2963,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int W, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner parser = new Scanner(input);
        
        int T = parser.nextInt();
        for (int mi = 0; mi < T; mi++) {
            
            W = parser.nextInt();
            participant = new int[W];
            max = 0;
            
            for (int r = 0; r < W; r++) {

                participant[r] = parser.nextInt();
                max += participant[r];
            }

            System.out.printf(""Case #%d: "", mi + 1);
            if (W == 2) {
                for (int r = 1; r < participant[0]; r++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (apple == -1 || participant[i1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = i1;
                        }
                        else if (cream == -1 || participant[i1] > participant[cream]) {
                            brence = cream;
                            cream = i1;
                        }
                        else if (brence == -1 || participant[i1] > participant[brence])
                            brence = i1;
                    int xi = participant[apple] - 1;
                    int w = participant[brence];
                    
                    if ((xi > w ? xi : w) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        parser.close();
    }

}",460,16,"gold:apple,sum:max,party:participant,silver:cream,bronze:brence,N:W,j:r,y:w,x:xi,i:mi,scanner:parser,",4899,9.609324947992960,Beam
2964,,,200,10,,497,0.6987455487251280,0
2965,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String r="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    r=r+c+"" "";
                width[c]=0;
            }
            r=r.trim();
            System.out.println(""Case #""+i+"": ""+r);
        }
    }
}",285,14,"heights:width,k:c,j:dj,s:r,",1892,3.15771183570226,Beam
2966,,,426,18,,3528,6.8285568396250400,0
2967,"class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int c = in.nextInt();
                int w = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(c%w, 1)+w + c/w-1;
                if (r > 1) ans1 += (r-1)*(c/w);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""\n"");
                out.write(""Case #"" + cas + "": "" + ans + ""\n"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int kin = 1; kin <= t; kin++){
                
                int r = in.nextInt();
                int v = in.nextInt();
                int u = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(v%u, 1)+u + v/u-1;
                if (r > 1) ans1 += (r-1)*(v/u);
                int ans = ans1;
                System.out.print(""Case #"" + kin + "": "" + ans + ""
"");
                out.write(""Case #"" + kin + "": "" + ans + ""
"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",241,15,"w:u,c:v,cas:kin,",838,1.4421374599138900,Beam
2968,"static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader b = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter out = new PrintWriter(""System.out"");
        long test = Long.parseLong(b.readLine());
        for(long i=0;i<test;i++){
            int size = Integer.parseInt(b.readLine());
            String s = b.readLine();
            String st[]= s.split(""\\s+"");
            Long array[]= new Long[size];
            for(int k=0;k<size;k++){
            array[(int)k]=Long.parseLong(st[k]);
        //    System.out.println(array[k]);
        
            
            }
            long ans=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    ans=ans+(array[k]-array[k+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long max=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    if((array[k]-array[k+1])>max){
                        max=(array[k]-array[k+1]);
                    }
                }
            }
            
            long ans2=0;
            for(int k=0;k<size-1;k++){
                
                    if(array[k]>max){
                        ans2=ans2+max;    
                    }
                    else{
                        ans2= ans2+(array[k]);
                        
                    }
                
            }
            
            out.println(""Case #""+(i+1)+"": ""+ans+"" ""+ans2);
        
            
        }
        out.flush();
       
    }
}","static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader lb = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter print = new PrintWriter(""System.out"");
        long count = Long.parseLong(lb.readLine());
        for(long it=0;it<count;it++){
            int cycle = Integer.parseInt(lb.readLine());
            String w = lb.readLine();
            String c[]= w.split(""\\s+"");
            Long list[]= new Long[cycle];
            for(int n=0;n<cycle;n++){
            list[(int)n]=Long.parseLong(c[n]);
        //    System.out.println(array[k]);
        
            
            }
            long names=0;
            for(int n=0;n<cycle-1;n++){
                if(list[n]-list[n+1]>0){
                    names=names+(list[n]-list[n+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long cache=0;
            for(int n=0;n<cycle-1;n++){
                if(list[n]-list[n+1]>0){
                    if((list[n]-list[n+1])>cache){
                        cache=(list[n]-list[n+1]);
                    }
                }
            }
            
            long ann1=0;
            for(int n=0;n<cycle-1;n++){
                
                    if(list[n]>cache){
                        ann1=ann1+cache;    
                    }
                    else{
                        ann1= ann1+(list[n]);
                        
                    }
                
            }
            
            print.println(""Case #""+(it+1)+"": ""+names+"" ""+ann1);
        
            
        }
        print.flush();
       
    }
}",368,14,"size:cycle,array:list,k:n,max:cache,ans:names,out:print,ans2:ann1,b:lb,s:w,test:count,st:c,i:it,",4744,8.6009991923968,Beam
2969,,,360,16,,5891,10.524543837706200,0
2970,,,278,15,,1170,1.8896997014681500,0
2971,,,527,25,,15904,29.46281123161320,0
2972,,,358,16,,838,1.466995398203530,0
2973,,,330,16,,5457,10.242888991038000,0
2974,,,367,20,,5552,9.063937441507980,0
2975,,,184,9,,621,1.0292333006858800,0
2976,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int TATCH=1;TATCH<=T;TATCH++){
            int N = sc.nextInt(), N = sc.nextInt(), WF = sc.nextInt();
            int w = 0, res = 0;
            res += N*(N/WF);
            if (N%WF==0)res+=WF-1;
            else res+=WF;
            System.out.println(""Case #""+TATCH+"": ""+res);
        }
    }
}",309,11,"R:N,C:N,W:WF,CASE:TATCH,",962,1.620831302801770,Beam
2977,,,639,21,,11019,22.246094652017000,0
2978,,,295,15,,1064,1.9366942365964300,0
2979,,,553,21,,3486,6.410745394229890,0
2980,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,0.9790838440259300,Beam
2981,,,366,17,,900,1.5102397958437600,0
2982,,,379,17,,1845,3.1652694861094200,0
2983,,,344,15,,2471,4.167008411884310,0
2984,,,255,13,,1179,2.6999529639879900,0
2985,"class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] R = new int[N + 1];
            R[0] = sc.nextInt();
            int[] P = new int[N + 1];
            P[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                P[i + 1] = (P[i] + R[i] - S[i]) / 2;
                R[i + 1] = (R[i] + S[i] - P[i]) / 2;
                S[i + 1] = (P[i] + S[i] - R[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (R[N] == 1) {
                System.out.println(r[N]);
            } else if (P[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}","class A {
    static String[] r = new String[13];
    static String[] w = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        w[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(w[i]) < 0) {
                w[i + 1] = r[i] + w[i];
            } else {
                w[i + 1] = w[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(w[i]) < 0) {
                s[i + 1] = s[i] + w[i];
            } else {
                s[i + 1] = w[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] R = new int[N + 1];
            R[0] = sc.nextInt();
            int[] P = new int[N + 1];
            P[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                P[i + 1] = (P[i] + R[i] - S[i]) / 2;
                R[i + 1] = (R[i] + S[i] - P[i]) / 2;
                S[i + 1] = (P[i] + S[i] - R[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (R[N] == 1) {
                System.out.println(r[N]);
            } else if (P[N] == 1) {
                System.out.println(w[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}",619,14,"p:w,",259,0.4764521280924480,Beam
2986,,,292,15,,3166,5.496285847822830,0
2987,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String c = null;
        FileWriter fw = new FileWriter(""output.out"");  
        c = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(c); i++) {
                times.clear();
                for (int i91 = 0; i91 < 2501 ;i91++) {
                    Integer r = new Integer(0);
                    times.add(i91, r);
                }
                Integer w = Integer.parseInt(bf.readLine());
                for (int uitwo = 1; uitwo < 2*w; uitwo++) {
                    String lines = bf.readLine();
                    String []cums = lines.split("" "");
                    for (int i91 = 0; i91 < cums.length; i91++) {
                        Integer temp = Integer.parseInt(cums[i91]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i91 = 0; i91 < 2501; i91 ++) {
                    if (times.get(i91) % 2 != 0) {
                        buffers += i91.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""
"");

        }
        bf.close();
        fw.close();
    }
}",305,15,"n:w,a:r,i1:i91,count:c,i2:uitwo,nums:cums,",2999,5.271791418393450,Beam
2988,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5553933461507160,Beam
2989,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,0.9916468103726700,Beam
2990,,,363,16,,2884,5.085791778564450,0
2991,,,255,13,,3256,7.040690513451890,0
2992,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numPasing = s.nextInt();
        
        int c = 1000003;
        long[] dp = new long[c];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < c; ++i)
        {
            long first = dp[i-1] + 1;
            char[] train = String.valueOf((long) i).toCharArray();
            long res = 0;
            long sum = 1;
            for(int i1 = 0; i1 < train.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(train[i1]));
                if(i1 == train.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * sum;
                sum *= 10;
            }
            long index = res;
            long function = 0;
            if(index >= 1 && index < i)
            {
                function = dp[(int)index]+1;
            }
            if(function > 1 && function < first)
            {
                dp[i] = function;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numPasing; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}",325,16,"numCases:numPasing,mult:sum,test:train,max:c,second:function,",2729,5.088805202643080,Beam
2993,,,420,19,,7084,12.148512609799700,0
2994,,,290,12,,617,1.0878615061442100,0
2995,,,305,15,,1198,2.1643250544865900,0
2996,,,292,16,,4155,6.91488090356191,0
2997,,,513,26,,16573,27.864713863531700,0
2998,,,282,13,,681,1.1159880916277600,0
2999,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner rc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = rc.nextInt();
        
        for (int x = 1; x <= R; ++x) {
            int W = rc.nextInt();
            
            int[][] yr = new int[2*W-1][W];
            
            // 2 * N - 1 line with N numbers
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    yr[c][c] = rc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> mp = new HashMap<>();
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    if (mp.get(yr[c][c]) == null) {
                        mp.put(yr[c][c], 1);
                    }
                    else {
                        int w = mp.get(yr[c][c]);
                        mp.put(yr[c][c], w + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int c : mp.keySet()) {
                if (mp.get(c) % 2 != 0) {
                    r.add(c);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int c = 0; c < r.size(); ++c) {
                System.out.print("" "" + r.get(c));
            }
            System.out.println();
        }

        rc.close();
    }
}",375,12,"N:W,i:c,arr:yr,T:R,k:w,map:mp,j:c,sc:rc,",2754,5.12786416610082,Beam
3000,,,479,25,,3476,6.4466875751813300,0
3001,,,305,15,,1167,2.061718201637270,0
3002,,,887,27,,1166,2.389007480939230,0
3003,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,1.1688899596532200,Beam
3004,,,321,13,,4093,7.083188362916310,0
3005,,,311,17,,2189,3.5681626280148800,0
3006,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.23115566571553500,Beam
3007,,,443,17,,5241,9.597618099053700,0
3008,,,260,13,,3969,6.452922542889910,0
3009,"class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int N = in.nextInt();
            int[] P = new int[N];
            int total = 0;
            for (int n = 0; n < N; n++) {
                P[n] = in.nextInt();
                total += P[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int i = 0; i < P.length; i++) {
                    int v = P[i];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = i;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = i;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = P[iMax1];
                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        P[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        P[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}","class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int R = in.nextInt();
            int[] W = new int[R];
            int total = 0;
            for (int n = 0; n < R; n++) {
                W[n] = in.nextInt();
                total += W[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int c = 0; c < W.length; c++) {
                    int v = W[c];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = c;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = c;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = W[iMax1];
                int vMax2 = iMax2 > -1 ? W[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    W[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        W[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    W[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        W[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}",527,25,"P:W,N:R,i:c,",2419,4.451451659202580,Beam
3010,,,269,13,,4045,7.378579111893970,0
3011,,,184,9,,1892,3.2529231190681500,0
3012,,,291,15,,4017,6.746583513418830,0
3013,,,254,13,,951,1.615666675567630,0
3014,,,330,16,,5581,10.249781437714900,0
3015,,,605,21,,10037,15.891828262805900,0
3016,,,500,19,,8855,15.983001430829400,0
3017,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter r = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                r.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             r.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,wr:r,",652,1.3833179275194800,Beam
3018,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long counter = queue.poll();
                
                if (counter == W){
                    break;
                }
                
                next[0] = counter + 1;
                StringBuilder builder = new StringBuilder(Long.toString(counter));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= W && next[i] > counter){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(counter) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,number:counter,",402,0.762979519367218,Beam
3019,,,149,10,,2171,2.8042619943618800,0
3020,"class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int rows = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiers = new TreeSet<Integer>();
      for (int i = 0; i < 2 * rows - 1 ; i++) {
        nextLine = reader.readLine();
        String[] row = nextLine.split("" "");
        for (String soldier : row) {
          int height = Integer.valueOf(soldier);
          if (soldiers.contains(height)) {
            soldiers.remove(height);
          } else {
            soldiers.add(height);
          }
        }
      }
      if (soldiers.size() != rows) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer soldier : soldiers) {
        writer.write("" "" + soldier);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}","class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextFile;
    nextFile = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextFile = reader.readLine()) != null) {
      int checks = Integer.valueOf(nextFile);

      TreeSet<Integer> soldries = new TreeSet<Integer>();
      for (int li = 0; li < 2 * checks - 1 ; li++) {
        nextFile = reader.readLine();
        String[] r = nextFile.split("" "");
        for (String oldica : r) {
          int width = Integer.valueOf(oldica);
          if (soldries.contains(width)) {
            soldries.remove(width);
          } else {
            soldries.add(width);
          }
        }
      }
      if (soldries.size() != checks) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer oldica : soldries) {
        writer.write("" "" + oldica);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}",295,15,"height:width,row:r,rows:checks,i:li,soldiers:soldries,soldier:oldica,nextLine:nextFile,",1830,3.440164836247760,Beam
3021,,,250,11,,559,0.9641233007113140,0
3022,,,306,13,,3256,5.823506140708920,0
3023,,,366,17,,1334,2.2239992380142200,0
3024,,,500,19,,7565,13.63784861167270,0
3025,,,291,15,,3998,6.393266483147940,0
3026,,,478,22,,11828,19.898146212101000,0
3027,,,443,17,,2273,4.2292810837427800,0
3028,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int TATCH=1;TATCH<=T;TATCH++){
            int N = sc.nextInt(), N = sc.nextInt(), WF = sc.nextInt();
            int w = 0, res = 0;
            res += N*(N/WF);
            if (N%WF==0)res+=WF-1;
            else res+=WF;
            System.out.println(""Case #""+TATCH+"": ""+res);
        }
    }
}",309,11,"R:N,C:N,W:WF,CASE:TATCH,",962,1.6236080487569200,Beam
3029,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Len = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Len[j] = sc.nextInt();
                    sum += Len[j];
                    Len[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Len[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Len[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Len[j] > 0) {
                                answer.append(parties[0]);
                                Len[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,Pi:Len,",342,0.7003997762997950,Beam
3030,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int W, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            W = scanner.nextInt();
            participant = new int[W];
            max = 0;
            
            for (int c = 0; c < W; c++) {

                participant[c] = scanner.nextInt();
                max += participant[c];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (W == 2) {
                for (int c = 1; c < participant[0]; c++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int ri1 = 0; ri1 < W; ri1++)
                        if (apple == -1 || participant[ri1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = ri1;
                        }
                        else if (cream == -1 || participant[ri1] > participant[cream]) {
                            brence = cream;
                            cream = ri1;
                        }
                        else if (brence == -1 || participant[ri1] > participant[brence])
                            brence = ri1;
                    int x = participant[apple] - 1;
                    int y = participant[brence];
                    
                    if ((x > y ? x : y) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}",460,16,"sum:max,gold:apple,party:participant,silver:cream,bronze:brence,N:W,j:c,i1:ri1,",4124,8.197317973772690,Beam
3031,,,260,11,,2512,4.514168270428980,0
3032,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,",2270,4.170651944478350,Beam
3033,,,324,13,,3969,7.035239017009740,0
3034,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner r = new Scanner(System.in);
        int W = r.nextInt();

        for(int c = 0; c < W; c++)
        {
            long input = r.nextLong();
            long effect = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    effect += input;
                    break;
                }
                long flippingWhatever = input;
                long edit = 0;
                while( flippingWhatever != 0 )
                {
                    edit = edit * 10;
                    edit = edit + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long Flipping = edit;
                if(Flipping < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = Flipping;
                }
                else
                {
                    input--;
                }
                effect++;
            }
            System.out.println(""Case #""+(c+1)+"": "" + effect);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:edit,flipped:Flipping,k:r,output:effect,i:c,T:W,",2097,3.709047873814900,Beam
3035,,,348,14,,3821,6.819250694910690,0
3036,,,256,13,,608,1.0942105412483200,0
3037,,,328,16,,1241,2.211078170935310,0
3038,,,426,18,,3560,6.930657823880510,0
3039,"class A {

    public static void main(String[] args) throws IOException {
        final Scanner sc = new Scanner(new FileReader(""Ain.in""));
        final BufferedWriter w = new BufferedWriter(new FileWriter(""Aout.txt""));
        String[] a = {""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z""};

        final int testNumber = sc.nextInt();
        for (int test = 1; test <= testNumber; test++) {
            int N = sc.nextInt();
            String ans = """";
            int[] num = new int[N];
            int sum = 0;
            int count = 0;
            HashMap<Integer, ArrayList<String>> map = new HashMap<>();
            for (int i=0; i<num.length;i++) {
                num[i] = sc.nextInt();
                if (map.get(num[i])!=null) {
                    map.get(num[i]).add(a[i]);
                } else {
                    ArrayList<String> al = new ArrayList<>();
                    al.add(a[i]);
                    map.put(num[i], al);
                }
                sum += num[i];
            }
            while(true) {
                Arrays.sort(num);
                int last = num.length-1;
                if (num[last]>0) {
                    String add = map.get(num[last]).get(map.get(num[last]).size()-1);
                    ans += add;
                    count++;
                    map.get(num[last]).remove(add);
                    num[last]--;
                    if ((num[last]==0) && (num[last-1]==0)) {
                        break;
                    }
                    if ((sum - count) == 2) {
                        ans += "" "";
                        if (map.get(num[last])!=null) {
                            map.get(num[last]).add(add);
                        } else {
                            ArrayList<String> al = new ArrayList<>();
                            al.add(add);
                            map.put(num[last], al);
                        }
                    } else {
                        if (num[last]>= num[last-1]) {
                            ans += add+"" "";
                            count++;
                            if (map.get(num[last]-1)!=null) {
                                map.get(num[last]-1).add(add);
                            } else {
                                ArrayList<String> al = new ArrayList<>();
                                al.add(add);
                                map.put(num[last]-1, al);
                            }
                            num[last]--;
                        } else {
                            if (map.get(num[last])!=null) {
                                map.get(num[last]).add(add);
                            } else {
                                ArrayList<String> al = new ArrayList<>();
                                al.add(add);
                                map.put(num[last], al);
                            }
                            String two = map.get(num[last-1]).get(map.get(num[last-1]).size()-1);
                            map.get(num[last-1]).remove(two);
                            ans += two+"" "";
                            count++;
                            if (map.get(num[last-1]-1)!=null) {
                                map.get(num[last-1]-1).add(two);
                            } else {
                                ArrayList<String> al = new ArrayList<>();
                                al.add(two);
                                map.put(num[last-1]-1, al);
                            }
                            num[last-1]--;
                        }
                    }
                } else {
                    break;
                }
            }
            //            ans += a[maxI]+a[max2I]+"" "";
            //            num -=
            //            boolean check = true;
            //            while (check) {
            //            for (int i=0;i<num.length; i++) {
            //
            //            }
            //            }
            w.write(""Case #""+test+"": ""+ans.trim()+""\n"");
            System.out.println(""Case #""+test+"": ""+ans);
        }
        sc.close();
        w.flush();
        w.close();
    }


}","class A {

    public static void main(String[] args) throws IOException {
        final Scanner sc = new Scanner(new FileReader(""Ain.in""));
        final BufferedWriter w = new BufferedWriter(new FileWriter(""Aout.txt""));
        String[] a = {""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z""};

        final int testNumber = sc.nextInt();
        for (int test = 1; test <= testNumber; test++) {
            int N = sc.nextInt();
            String ans = """";
            int[] num = new int[N];
            int n = 0;
            int count = 0;
            HashMap<Integer, ArrayList<String>> map = new HashMap<>();
            for (int i=0; i<num.length;i++) {
                num[i] = sc.nextInt();
                if (map.get(num[i])!=null) {
                    map.get(num[i]).add(a[i]);
                } else {
                    ArrayList<String> al = new ArrayList<>();
                    al.add(a[i]);
                    map.put(num[i], al);
                }
                n += num[i];
            }
            while(true) {
                Arrays.sort(num);
                int last = num.length-1;
                if (num[last]>0) {
                    String add = map.get(num[last]).get(map.get(num[last]).size()-1);
                    ans += add;
                    count++;
                    map.get(num[last]).remove(add);
                    num[last]--;
                    if ((num[last]==0) && (num[last-1]==0)) {
                        break;
                    }
                    if ((n - count) == 2) {
                        ans += "" "";
                        if (map.get(num[last])!=null) {
                            map.get(num[last]).add(add);
                        } else {
                            ArrayList<String> al = new ArrayList<>();
                            al.add(add);
                            map.put(num[last], al);
                        }
                    } else {
                        if (num[last]>= num[last-1]) {
                            ans += add+"" "";
                            count++;
                            if (map.get(num[last]-1)!=null) {
                                map.get(num[last]-1).add(add);
                            } else {
                                ArrayList<String> al = new ArrayList<>();
                                al.add(add);
                                map.put(num[last]-1, al);
                            }
                            num[last]--;
                        } else {
                            if (map.get(num[last])!=null) {
                                map.get(num[last]).add(add);
                            } else {
                                ArrayList<String> al = new ArrayList<>();
                                al.add(add);
                                map.put(num[last], al);
                            }
                            String two = map.get(num[last-1]).get(map.get(num[last-1]).size()-1);
                            map.get(num[last-1]).remove(two);
                            ans += two+"" "";
                            count++;
                            if (map.get(num[last-1]-1)!=null) {
                                map.get(num[last-1]-1).add(two);
                            } else {
                                ArrayList<String> al = new ArrayList<>();
                                al.add(two);
                                map.put(num[last-1]-1, al);
                            }
                            num[last-1]--;
                        }
                    }
                } else {
                    break;
                }
            }
            //            ans += a[maxI]+a[max2I]+"" "";
            //            num -=
            //            boolean check = true;
            //            while (check) {
            //            for (int i=0;i<num.length; i++) {
            //
            //            }
            //            }
            w.write(""Case #""+test+"": ""+ans.trim()+""
"");
            System.out.println(""Case #""+test+"": ""+ans);
        }
        sc.close();
        w.flush();
        w.close();
    }


}",873,18,"sum:n,",85,0.15906662543614700,Beam
3040,,,330,16,,5457,10.97826189994810,0
3041,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.35623486042022700,Beam
3042,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,1.8288668950398800,Beam
3043,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.5051354686419170,Beam
3044,,,655,16,,2117,4.138243858019510,0
3045,,,255,13,,962,1.7988668441772500,0
3046,,,280,13,,3132,4.497222220897670,0
3047,,,290,12,,3695,5.524616948763530,0
3048,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int TN = Integer.parseInt(line);
            for(int i=0;i<TN;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>size){
                            size=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=size){
                        b=b+size;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,T:TN,",497,0.9519151329994200,Beam
3049,,,302,15,,2636,4.158724602063500,0
3050,,,735,24,,11370,18.58001963297530,0
3051,,,423,7,,919,1.6254374186197900,0
3052,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cr = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cr) {
        sum1 += cr - w[i4];
      }
      cr = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,cur:cr,",433,0.7909404873847960,Beam
3053,,,326,14,,745,1.3465846061706500,0
3054,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",993,1.7587096333503700,Beam
3055,,,250,11,,807,1.4506975809733100,0
3056,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int max = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<max; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}",187,12,"col:max,",32,0.03698872725168860,Beam
3057,,,290,12,,3697,6.451317171255750,0
3058,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long gain = 0;
                while( flippingWhatever != 0 )
                {
                    gain = gain * 10;
                    gain = gain + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = gain;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:gain,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",2021,3.5156534473101300,Beam
3059,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner rc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = rc.nextInt();
        
        for (int x = 1; x <= R; ++x) {
            int W = rc.nextInt();
            
            int[][] yr = new int[2*W-1][W];
            
            // 2 * N - 1 line with N numbers
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    yr[c][c] = rc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> mp = new HashMap<>();
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    if (mp.get(yr[c][c]) == null) {
                        mp.put(yr[c][c], 1);
                    }
                    else {
                        int w = mp.get(yr[c][c]);
                        mp.put(yr[c][c], w + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int c : mp.keySet()) {
                if (mp.get(c) % 2 != 0) {
                    r.add(c);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int c = 0; c < r.size(); ++c) {
                System.out.print("" "" + r.get(c));
            }
            System.out.println();
        }

        rc.close();
    }
}",375,12,"N:W,i:c,arr:yr,T:R,k:w,map:mp,j:c,sc:rc,",2785,5.0764861583709700,Beam
3060,,,290,12,,3688,6.033933353424070,0
3061,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ras2 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                if (w < f)
                    ras2 += (f - w);
            }
            
            //2
            int size = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int f = rows[j];
                int w = rows[j + 1];
                
                int c = f - w;
                if (c > size)
                    size = c;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < size)
                    ans2 += rows[j];
                else
                    ans2 += size;
            }
            
            pw.println(String.format(print, i, ras2, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"datas:rows,max:size,prefix:print,s:w,ans1:ras2,",2956,4.874815797805790,Beam
3062,,,443,17,,1509,2.8048725605011000,0
3063,,,443,17,,1602,3.042271606127420,0
3064,,,605,21,,9280,14.686135335763300,0
3065,,,443,17,,5014,10.066813989480300,0
3066,,,291,12,,621,1.089107612768810,0
3067,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String c = null;
        FileWriter fw = new FileWriter(""output.out"");  
        c = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(c); i++) {
                times.clear();
                for (int i91 = 0; i91 < 2501 ;i91++) {
                    Integer r = new Integer(0);
                    times.add(i91, r);
                }
                Integer w = Integer.parseInt(bf.readLine());
                for (int uitwo = 1; uitwo < 2*w; uitwo++) {
                    String lines = bf.readLine();
                    String []cums = lines.split("" "");
                    for (int i91 = 0; i91 < cums.length; i91++) {
                        Integer temp = Integer.parseInt(cums[i91]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i91 = 0; i91 < 2501; i91 ++) {
                    if (times.get(i91) % 2 != 0) {
                        buffers += i91.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""
"");

        }
        bf.close();
        fw.close();
    }
}",305,15,"n:w,a:r,i1:i91,count:c,i2:uitwo,nums:cums,",2999,5.472486686706540,Beam
3068,,,408,17,,2268,4.3861128211021400,0
3069,,,358,18,,6632,11.014880673090600,0
3070,,,420,19,,7084,12.277537727356000,0
3071,,,278,11,,2771,4.863084411621090,0
3072,,,262,14,,3504,6.4306694030761700,0
3073,,,513,26,,17008,29.148697992165900,0
3074,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), M = scanner.nextLong(), A = scanner.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % A == 0) {
                out.println (ants + M/A - 1 + A);
            } else {
                out.println (ants + M/A + A);
            }
        }

    }
}",156,10,"ans:ants,W:A,C:M,",708,0.9796526829401650,Beam
3075,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.1941246390342700,Beam
3076,,,184,9,,1706,2.948584735393520,0
3077,,,281,14,,5209,8.83064159154892,0
3078,,,334,12,,3354,6.478995680809020,0
3079,,,325,14,,4793,8.452480014165240,0
3080,,,272,16,,5861,8.360993377367660,0
3081,,,500,19,,8848,15.659995516141300,0
3082,,,639,21,,8828,16.99376827875770,0
3083,,,250,11,,3163,5.511568752924600,0
3084,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,sw,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            sw = sc.nextInt();
            irez = c/sw;
            irez *=r;
            irez +=sw-1;
            if(c%sw > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,w:sw,",466,0.5979366620381670,Beam
3085,,,311,17,,6708,11.722550415992700,0
3086,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,1.163643193244930,Beam
3087,,,349,19,,5271,9.165661962827050,0
3088,,,355,19,,6596,10.578238288561500,0
3089,,,257,11,,3039,5.471980897585550,0
3090,,,468,20,,8807,16.182019817829100,0
3091,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int r = s.nextInt();
        for (int i = 1; i <= r; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}",280,13,"N:W,j:dj,n:r,",1086,1.9086397926012700,Beam
3092,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.0429762562116000,Beam
3093,,,262,14,,652,1.1327055851618400,0
3094,,,417,19,,6928,12.72724344333010,0
3095,,,298,16,,4527,7.876880200703940,0
3096,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String s;
        try {
            s = r.readLine();
            int case_num = Integer.parseInt(s);
            for (int ctx = 0; ctx < case_num; ctx++) {
                s = r.readLine();
                int width = Integer.parseInt(s);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    s = r.readLine();
                    String[] width = s.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        ans = ans + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,",2270,4.235762437184650,Beam
3097,,,348,14,,3883,6.820909603436790,0
3098,,,517,26,,1258,2.5353410482406600,0
3099,,,321,13,,4372,7.656929306189220,0
3100,,,406,19,,1024,1.87706272204717,0
3101,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.042572844028470,Beam
3102,,,366,17,,6108,10.064762167135900,0
3103,,,448,20,,9397,16.41750199397410,0
3104,,,420,19,,7084,11.34245646794640,0
3105,,,306,13,,2791,5.170904016494750,0
3106,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int R = sinput.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] char = new int[R];
            for (int i = 0; i < R; i++){
                char[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<R;i++){
                if(dif<char[i-1]-char[i]) dif=char[i-1]-char[i];    
            }
            for(int i=1;i<R;i++){
                if(char[i]<char[i-1]) a+=char[i-1]-char[i];
                if(char[i-1]<dif) b+=char[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,11,"ps:char,N:R,",404,0.7340438365936280,Beam
3107,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int u = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (u / time) + (u - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"w:time,ans:ants,c:u,",745,1.0029562870661400,Beam
3108,,,371,12,,621,1.2296690543492600,0
3109,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,0.9966054677963260,Beam
3110,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7333706498146060,Beam
3111,,,303,12,,2511,4.729594210783640,0
3112,,,187,13,,1184,1.5464784145355200,0
3113,,,406,19,,1024,1.877940090497340,0
3114,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int c=inp.nextInt();
        int[] img=new int[c];
        for(int j=0;j<c;j++){
            img[j]=inp.nextInt();
        }
        int mean1=0;
        int miss32=0;
        for(int kick=0;kick<c-1;kick++){
            
            int y=(img[kick]-img[kick+1]>0)? img[kick]-img[kick+1]:0;
            mean1+=y;
        
        }
        int w=0;
        for(int r=0;r<c-1;r++){
            w=Math.max(w,img[r]-img[r+1]);
        }
        for(int d=0;d<c-1;d++){
            int x=(img[d]<=w)?img[d]:w;
            miss32+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+mean1+"" ""+miss32);
    }
}
}",272,16,"arr:img,sum1:mean1,sum2:miss32,h:r,k:kick,v:w,n:c,",4164,5.795022288958230,Beam
3115,,,292,17,,6859,11.62271367708840,0
3116,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,m,w,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            m =sc.nextInt();
            w = sc.nextInt();
            irez = m/w;
            irez *=r;
            irez +=w-1;
            if(m%w > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,c:m,",280,0.36786465644836400,Beam
3117,,,200,10,,2016,2.8034770488739000,0
3118,,,250,11,,3008,5.188065441449480,0
3119,,,271,12,,3175,5.261886409918470,0
3120,,,240,13,,2426,3.9285149892171200,0
3121,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,1.043012837568920,Beam
3122,,,379,17,,1783,3.0890257159868900,0
3123,,,269,13,,4386,8.061736222108210,0
3124,,,290,12,,3697,6.524471688270570,0
3125,,,655,16,,2132,4.369477395216620,0
3126,,,358,16,,5116,9.507299558321640,0
3127,,,330,16,,5891,11.702038705349000,0
3128,,,360,16,,5891,10.689111391703300,0
3129,,,272,16,,3325,4.678671995798750,0
3130,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.7834898471832280,Beam
3131,"class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] R = new int[N + 1];
            R[0] = sc.nextInt();
            int[] P = new int[N + 1];
            P[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                P[i + 1] = (P[i] + R[i] - S[i]) / 2;
                R[i + 1] = (R[i] + S[i] - P[i]) / 2;
                S[i + 1] = (P[i] + S[i] - R[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (R[N] == 1) {
                System.out.println(r[N]);
            } else if (P[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}","class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int mu = 0; mu < 12; mu++) {
            if (r[mu].compareTo(p[mu]) < 0) {
                p[mu + 1] = r[mu] + p[mu];
            } else {
                p[mu + 1] = p[mu] + r[mu];
            }

            if (r[mu].compareTo(s[mu]) < 0) {
                r[mu + 1] = r[mu] + s[mu];
            } else {
                r[mu + 1] = s[mu] + r[mu];
            }

            if (s[mu].compareTo(p[mu]) < 0) {
                s[mu + 1] = s[mu] + p[mu];
            } else {
                s[mu + 1] = p[mu] + s[mu];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int baseSum = 1; baseSum <= numCases; baseSum++) {
            int N = sc.nextInt();

            int[] Rs = new int[N + 1];
            Rs[0] = sc.nextInt();
            int[] P = new int[N + 1];
            P[0] = sc.nextInt();
            int[] Si = new int[N + 1];
            Si[0] = sc.nextInt();

            for (int mu = 0; mu < N; mu++) {
                P[mu + 1] = (P[mu] + Rs[mu] - Si[mu]) / 2;
                Rs[mu + 1] = (Rs[mu] + Si[mu] - P[mu]) / 2;
                Si[mu + 1] = (P[mu] + Si[mu] - Rs[mu]) / 2;
            }

            System.out.print(""Case #"" + baseSum + "": "");
            boolean possible = true;
            for (int mu = 0; mu <= N; mu++) {
                if (Rs[mu] < 0 || P[mu] < 0 || Si[mu] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (Rs[N] == 1) {
                System.out.println(r[N]);
            } else if (P[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}",619,14,"R:Rs,S:Si,i:mu,caseNum:baseSum,",1601,2.9312994956970200,Beam
3132,,,269,16,,5830,9.374479937553410,0
3133,,,298,16,,776,1.3777228871981300,0
3134,,,393,19,,2359,4.039803806940710,0
3135,,,349,19,,862,1.4618790705998700,0
3136,,,366,17,,900,1.535214126110080,0
3137,,,254,13,,951,1.611022706826530,0
3138,,,393,19,,7048,11.675188116232600,0
3139,,,295,16,,838,1.430955429871880,0
3140,,,311,17,,2193,3.7015337864557900,0
3141,,,256,13,,4449,7.463722785313920,0
3142,,,264,15,,5383,9.203639761606850,0
3143,,,367,20,,1436,2.508922584851580,0
3144,,,250,11,,559,0.9808197458585100,0
3145,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int TATCH=1;TATCH<=T;TATCH++){
            int N = sc.nextInt(), N = sc.nextInt(), WF = sc.nextInt();
            int w = 0, res = 0;
            res += N*(N/WF);
            if (N%WF==0)res+=WF-1;
            else res+=WF;
            System.out.println(""Case #""+TATCH+"": ""+res);
        }
    }
}",309,11,"R:N,C:N,W:WF,CASE:TATCH,",962,1.6291019558906600,Beam
3146,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter r = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                r.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             r.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,wr:r,",652,1.3806819518407200,Beam
3147,,,281,14,,745,1.2893151760101300,0
3148,,,418,13,,3814,8.646943493684130,0
3149,,,156,10,,2202,2.6852986494700100,0
3150,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner rc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = rc.nextInt();
        
        for (int x = 1; x <= R; ++x) {
            int W = rc.nextInt();
            
            int[][] yr = new int[2*W-1][W];
            
            // 2 * N - 1 line with N numbers
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    yr[c][c] = rc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> mp = new HashMap<>();
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    if (mp.get(yr[c][c]) == null) {
                        mp.put(yr[c][c], 1);
                    }
                    else {
                        int w = mp.get(yr[c][c]);
                        mp.put(yr[c][c], w + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int c : mp.keySet()) {
                if (mp.get(c) % 2 != 0) {
                    r.add(c);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int c = 0; c < r.size(); ++c) {
                System.out.print("" "" + r.get(c));
            }
            System.out.println();
        }

        rc.close();
    }
}",375,12,"N:W,i:c,arr:yr,T:R,k:w,map:mp,j:c,sc:rc,",2785,5.221318419774370,Beam
3151,,,517,26,,1258,2.553170641263330,0
3152,,,655,16,,2178,4.714262227217360,0
3153,,,326,14,,5209,9.192410337924960,0
3154,,,262,14,,3194,5.65564105908076,0
3155,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner c = new Scanner(new File(IN_FILE));
            PrintWriter mr = new PrintWriter(OUT_FILE);

            int W = c.nextInt();
            for (int ki = 0; ki < W; ki++) {
                int NB = c.nextInt();
                for(int j = 0; j < 26; j++) {
                    idxToCnt[j] = 0;
                    idxToCh[j] = (char) ('A' + j);
                }
                for(int j = 0; j < NB; j++) {
                    idxToCnt[j] = c.nextInt();
                }
                mr.print(""Case #"" + (ki+1) + "": "");
                
                int rem = 0;
                for (int j = 0; j < NB; j++) {
                    rem += idxToCnt[j];
                }
                
                for (int tsp = 0; tsp < NB-1; tsp++) {
                    int end = NB-1;
                    int start = tsp;
                    
                    if (true) {
                        for (int j = tsp + 1; j <= end; j++) {
                            if (idxToCnt[j] > idxToCnt[start]) {
                                start = j;
                            }
                        }
                    } else {
                        for (int j = tsp + 1; j <= end; j++) {
                            if (idxToCnt[j] >= idxToCnt[start]) {
                                start = j;
                            }
                        }
                    }
                    int nextMax = start;
                    if (nextMax == tsp) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsp];
                        char tmpChar = idxToCh[tsp];
                        
                        idxToCnt[tsp] = idxToCnt[nextMax];
                        idxToCh[tsp] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = NB-1;
                    int start = 0;
                    
                    if (false) {
                        for (int j = 0 + 1; j <= end; j++) {
                            if (idxToCnt[j] > idxToCnt[start]) {
                                start = j;
                            }
                        }
                    } else {
                        for (int j = 0 + 1; j <= end; j++) {
                            if (idxToCnt[j] >= idxToCnt[start]) {
                                start = j;
                            }
                        }
                    }
                
                    int nextMax = start;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = NB-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int j = 0 + 1; j <= end1; j++) {
                                if (idxToCnt[j] > idxToCnt[res2]) {
                                    res2 = j;
                                }
                            }
                        } else {
                            for (int j = 0 + 1; j <= end1; j++) {
                                if (idxToCnt[j] >= idxToCnt[res2]) {
                                    res2 = j;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                mr.println(res);
            }

            mr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"T:W,wr:mr,sc:c,ti:ki,N:NB,res1:start,tsi:tsp,i:j,",4489,10.53433409134550,Beam
3156,,,306,13,,2946,5.3626236836115500,0
3157,,,605,21,,9643,15.676665580272700,0
3158,"class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] R = new int[N + 1];
            R[0] = sc.nextInt();
            int[] P = new int[N + 1];
            P[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                P[i + 1] = (P[i] + R[i] - S[i]) / 2;
                R[i + 1] = (R[i] + S[i] - P[i]) / 2;
                S[i + 1] = (P[i] + S[i] - R[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (R[N] == 1) {
                System.out.println(r[N]);
            } else if (P[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}","class A {
    static String[] ro = new String[13];
    static String[] np = new String[13];
    static String[] ls = new String[13];

    public static void main(String[] args) {
        ro[0] = ""R"";
        np[0] = ""P"";
        ls[0] = ""S"";
        for (int mi = 0; mi < 12; mi++) {
            if (ro[mi].compareTo(np[mi]) < 0) {
                np[mi + 1] = ro[mi] + np[mi];
            } else {
                np[mi + 1] = np[mi] + ro[mi];
            }

            if (ro[mi].compareTo(ls[mi]) < 0) {
                ro[mi + 1] = ro[mi] + ls[mi];
            } else {
                ro[mi + 1] = ls[mi] + ro[mi];
            }

            if (ls[mi].compareTo(np[mi]) < 0) {
                ls[mi + 1] = ls[mi] + np[mi];
            } else {
                ls[mi + 1] = np[mi] + ls[mi];
            }
        }

        Scanner c = new Scanner(System.in);
        int numcasing = c.nextInt();
        for (int caseCut = 1; caseCut <= numcasing; caseCut++) {
            int Wh = c.nextInt();

            int[] NR = new int[Wh + 1];
            NR[0] = c.nextInt();
            int[] Y = new int[Wh + 1];
            Y[0] = c.nextInt();
            int[] O = new int[Wh + 1];
            O[0] = c.nextInt();

            for (int mi = 0; mi < Wh; mi++) {
                Y[mi + 1] = (Y[mi] + NR[mi] - O[mi]) / 2;
                NR[mi + 1] = (NR[mi] + O[mi] - Y[mi]) / 2;
                O[mi + 1] = (Y[mi] + O[mi] - NR[mi]) / 2;
            }

            System.out.print(""Case #"" + caseCut + "": "");
            boolean valid = true;
            for (int mi = 0; mi <= Wh; mi++) {
                if (NR[mi] < 0 || Y[mi] < 0 || O[mi] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    valid = false;
                    break;
                }
            }
            if (!valid) {
                continue;
            }
            if (NR[Wh] == 1) {
                System.out.println(ro[Wh]);
            } else if (Y[Wh] == 1) {
                System.out.println(np[Wh]);
            } else {
                System.out.println(ls[Wh]);
            }
        }
        c.close();
    }
}",619,14,"R:NR,S:O,N:Wh,P:Y,i:mi,sc:c,p:np,s:ls,numCases:numcasing,caseNum:caseCut,r:ro,possible:valid,",4013,7.198817876974740,Beam
3159,,,334,15,,5426,10.442868081728600,0
3160,,,311,17,,1739,2.8596540371576900,0
3161,,,790,14,,4837,10.11288361152010,0
3162,,,366,17,,6139,10.06588025490440,0
3163,,,326,14,,5209,9.13552672068278,0
3164,,,464,17,,5358,10.201220095157600,0
3165,,,344,15,,2938,4.98709997733434,0
3166,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream max = System.max;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.max.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), M = scanner.nextLong(), NW = scanner.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % NW == 0) {
                max.println (ants + M/NW - 1 + NW);
            } else {
                max.println (ants + M/NW + NW);
            }
        }

    }
}",156,10,"W:NW,ans:ants,C:M,out:max,",1107,1.5604586601257300,Beam
3167,,,269,16,,1236,2.056784256299340,0
3168,,,280,13,,3163,5.521815156936650,0
3169,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.9020437161127730,Beam
3170,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int seed = 1; seed <= T; seed++) {
            int B = in.nextInt();
            int WC = in.nextInt();
            int[][] G = new int[B][WC];
            for (int i = 0; i < B; i++) {
                String S = in.next();
                for (int j = 0; j < WC; j++) {
                    char w = S.charAt(j);
                    if (w == '.')
                        G[i][j] = EMPTY;
                    else if (w == '<')
                        G[i][j] = LEFT;
                    else if (w == '>')
                        G[i][j] = RIGHT;
                    else if (w == 'v')
                        G[i][j] = DOWN;
                    else if (w == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < B; r++) {
                for (int w = 0; w < WC; w++) {
                    if (G[r][w] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int day = 0; day < 4; day++) {
                        int nr = r + dr[day];
                        int nc = w + dc[day];
                        ok[day] = false;
                        while (0 <= nr && nr < B && 0 <= nc && nc < WC) {
                            if (G[nr][nc] != EMPTY) {
                                ok[day] = true;
                                any = true;
                                break;
                            }
                            nr += dr[day];
                            nc += dc[day];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][w]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}",513,26,"R:B,C:WC,c:w,zz:seed,d:day,",4723,8.127348939577740,Beam
3171,,,255,13,,962,2.1331425150235500,0
3172,,,544,17,,5062,10.256914289792400,0
3173,,,326,14,,4837,8.612757408618930,0
3174,,,790,14,,4837,10.282419586181600,0
3175,,,325,16,,6077,11.538532320658400,0
3176,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,0.7317727684974670,Beam
3177,,,406,16,,5581,10.145900444189700,0
3178,,,618,26,,10913,19.100548239549000,0
3179,,,328,16,,4372,7.823705236117050,0
3180,,,198,10,,2205,3.8819037040074700,0
3181,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sh = new Scanner(System.in);
        int P = sh.nextInt();
        for(int TASE=1;TASE<=P;TASE++){
            int N = sh.nextInt(), w = sh.nextInt(), VW = sh.nextInt();
            int w = 0, Rs = 0;
            Rs += N*(w/VW);
            if (w%VW==0)Rs+=VW-1;
            else Rs+=VW;
            System.out.println(""Case #""+TASE+"": ""+Rs);
        }
    }
}",309,11,"C:w,R:N,W:VW,res:Rs,sc:sh,CASE:TASE,T:P,",1489,2.4776244362195300,Beam
3182,,,156,10,,2233,2.798482656478880,0
3183,,,423,7,,763,1.5013014515241000,0
3184,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] party;
    public static int W, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            W = scanner.nextInt();
            party = new int[W];
            sum = 0;
            
            for (int j = 0; j < W; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (W == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int c = party[gold] - 1;
                    int w = party[bronze];
                    
                    if ((c > w ? c : w) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}",460,16,"y:w,x:c,N:W,",1303,2.990383795897170,Beam
3185,,,303,12,,2809,4.999126295248670,0
3186,,,479,25,,1156,2.1481353680292800,0
3187,,,393,16,,5086,8.982887363433840,0
3188,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException ignore) {
                ignore.printStackTrace();
            }
        }
        Scanner sh = new Scanner(System.in);
        int D = sh.nextInt();
        for(int TATE=1;TATE<=D;TATE++){
            int N = sh.nextInt(), E = sh.nextInt(), NW = sh.nextInt();
            int E = 0, ares = 0;
            ares += N*(E/NW);
            if (E%NW==0)ares+=NW-1;
            else ares+=NW;
            System.out.println(""Case #""+TATE+"": ""+ares);
        }
    }
}",309,11,"C:E,R:N,W:NW,res:ares,CASE:TATE,sc:sh,T:D,r:m,e:ignore,",1737,2.9444704254468300,Beam
3189,,,291,12,,3411,6.260322841008500,0
3190,,,406,19,,1024,1.894804068406420,0
3191,,,423,7,,919,1.6546919385592100,0
3192,,,363,16,,5147,9.146021850903830,0
3193,,,363,16,,6077,9.664956390857700,0
3194,,,655,16,,2102,4.240688184897110,0
3195,,,290,12,,617,1.117659080028530,0
3196,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner join = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = join.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = join.nextInt();
            int h = join.nextInt();
            int word = join.nextInt();

            ants = (r - 1) * (h / word) + (h - 1) / word + word;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        join.close();
        writer.close();
    }

}",169,10,"c:h,w:word,ans:ants,scan:join,",1117,1.541779375076290,Beam
3197,,,525,23,,13543,22.854456452528600,0
3198,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.5026946624120080,Beam
3199,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String print = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter wpwb = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int start = 1; start <= t; start++) {
            int ans4 = 0;
            int an02 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] rows = new int[n];
            String[] array = br.readLine().split("" "");
            for (int j = 0; j < rows.length; j++)
                rows[j] = Integer.parseInt(array[j]);

            //1
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                if (size < w)
                    ans4 += (w - size);
            }
            
            //2
            int always = Integer.MIN_VALUE;
            for (int j = 0; j < rows.length - 1; j++) {
                int w = rows[j];
                int size = rows[j + 1];
                
                int count = w - size;
                if (count > always)
                    always = count;
            }
            
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] < always)
                    an02 += rows[j];
                else
                    an02 += always;
            }
            
            wpwb.println(String.format(print, start, ans4, an02));
        }
        
        br.close();
        wpwb.close();
    }
}",360,19,"ans2:an02,c:count,datas:rows,pw:wpwb,max:always,s:size,f:w,prefix:print,ans1:ans4,raw:array,i:start,",6051,10.740718138217900,Beam
3200,,,517,26,,12631,23.488709898789700,0
3201,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.3486962795257570,Beam
3202,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,1.0156376759211200,Beam
3203,,,406,16,,1303,2.568775244553880,0
3204,,,517,26,,1258,2.582603315512340,0
3205,,,460,16,,5302,10.62662483851120,0
3206,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int c = 0; c < Integer.parseInt(count); c++) {
                times.clear();
                for (int i91 = 0; i91 < 2501 ;i91++) {
                    Integer r = new Integer(0);
                    times.add(i91, r);
                }
                Integer w = Integer.parseInt(bf.readLine());
                for (int itwo = 1; itwo < 2*w; itwo++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i91 = 0; i91 < nums.length; i91++) {
                        Integer temp = Integer.parseInt(nums[i91]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i91 = 0; i91 < 2501; i91 ++) {
                    if (times.get(i91) % 2 != 0) {
                        buffers += i91.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (c + 1) + "": "" + buffers + ""
"");

        }
        bf.close();
        fw.close();
    }
}",305,15,"n:w,a:r,i:c,i1:i91,i2:itwo,",2728,5.013485395908360,Beam
3207,,,211,11,,2512,3.716572638352710,0
3208,,,345,16,,861,1.3785430828730300,0
3209,,,290,12,,3325,5.9709729512532600,0
3210,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.5635400334994000,Beam
3211,,,292,16,,4155,7.222990500926970,0
3212,,,330,16,,5147,10.090926313400300,0
3213,,,257,11,,2791,4.7773552417755100,0
3214,,,249,11,,2791,4.651351189613340,0
3215,,,132,9,,1466,1.88991223971049,0
3216,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.9502152919769290,Beam
3217,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String div = r.readLine();
            int count = Integer.parseInt(div);
            for(int c = 0 ; c < count ; c++) {
                div = r.readLine();
                int w = Integer.parseInt(div);
                div = r.readLine();
                StringTokenizer c = new StringTokenizer(div,"" "");
                int [] art = new int[w];
                int seed = 0;
                while(c.hasMoreTokens()) {
                    art[seed++] = Integer.parseInt(c.nextToken());
                }
                int annYY = 0;
                int ANST = 0;
                int dec = 0;
                for(int k = 0 ; k < w-1 ; k++) {
                    dec = Math.max(dec,art[k]-art[k+1]);
                    if(art[k+1]<art[k]) {
                        annYY += art[k]-art[k+1];
                    }
                }
                for(int k = 0 ; k < w-1 ; k++) {
                    int x = Math.min(art[k],dec);
                    ANST += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(c+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(annYY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ANST).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"iter:seed,dip:dec,ansY:annYY,ar:art,st:c,str:div,ansZ:ANST,j:k,t:count,br:r,n:w,i:c,",6449,11.175716682275100,Beam
3218,,,269,13,,4045,7.226944065093990,0
3219,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,0.8864425619443260,Beam
3220,,,513,26,,16368,27.656203250090300,0
3221,,,358,16,,838,1.4803544481595400,0
3222,,,553,21,,5356,9.337583434581760,0
3223,,,257,11,,807,1.4213197390238400,0
3224,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] smatch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            smatch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i22 = 0; i22 < n - 1; i22++) {
                            int comment = smatch[i22] - smatch[i22 + 1];
                            if (comment > 0) {
                                first += comment;
                            }
                        }
                        
                        int[] comment = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            comment[i3] = smatch[i3] - smatch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, smatch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] smatch = new int[n];
                    for (int i = 0; i < n; i++) {
                        smatch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int comment = smatch[i] - smatch[i + 1];
                        if (comment > 0) {
                            first += comment;
                        }
                    }
                    
                    int[] comment = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        comment[i] = smatch[i] - smatch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, comment[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, smatch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] smatch = new int[n];
                for (int i = 0; i < n; i++) {
                    smatch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int comment = smatch[i] - smatch[i + 1];
                    if (comment > 0) {
                        first += comment;
                    }
                }
                
                int[] comment = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    comment[i] = smatch[i] - smatch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, comment[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, smatch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:smatch,diff:comment,i4:i22,",1182,2.763150350252790,Beam
3225,,,887,27,,1854,4.009120325247450,0
3226,,,328,16,,5302,9.00705446402232,0
3227,,,295,15,,672,1.1921202977498400,0
3228,,,406,19,,1024,1.8264349460601800,0
3229,,,257,11,,2326,4.080875015258790,0
3230,,,619,14,,4407,7.884884595870970,0
3231,,,305,15,,5212,9.010916777451830,0
3232,,,262,14,,652,1.1298852483431500,0
3233,,,211,11,,2760,4.390189651648200,0
3234,,,386,18,,7611,13.164011319478400,0
3235,,,290,12,,3633,6.4807360370953900,0
3236,,,330,16,,5643,10.052067104975400,0
3237,,,273,11,,553,0.8070777336756390,0
3238,,,256,13,,4056,6.181975956757860,0
3239,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,1.8057847301165300,Beam
3240,,,292,16,,4155,7.144347659746810,0
3241,,,292,17,,6922,11.829771014054600,0
3242,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.4167417963345850,Beam
3243,,,292,16,,4155,7.267056477069860,0
3244,,,371,12,,3721,7.0279234925905900,0
3245,"static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int parties=Integer.parseInt(in.readLine());
            String[] Members=in.readLine().split("" "");
            int total=0;
            for(int j=0;j<parties;j++){
                total+=Integer.parseInt(Members[j]);
                    }
            while(total!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ans="""";
                for(int j=0;j<parties;j++){
                        if(first<Integer.parseInt(Members[j])){
                            second=first;
                            first=Integer.parseInt(Members[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Members[j])){
                                    second=Integer.parseInt(Members[j]);
                                    num2=j;
                                }
                            }
                    }
                ans=""""+(char)(65+num1);
                Members[num1]=Integer.toString(Integer.parseInt(Members[num1])-1);
                total-=1;
                String ans2="""";
                for(int j=0;j<parties;j++){
                    double p=total;
                    if(Double.parseDouble(Members[j])/p>0.5){
                        ans+=(char)(65+j);
                        Members[j]=Integer.toString(Integer.parseInt(Members[j])-1);
                        total-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}","static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int partsials=Integer.parseInt(in.readLine());
            String[] Players=in.readLine().split("" "");
            int no=0;
            for(int j=0;j<partsials;j++){
                no+=Integer.parseInt(Players[j]);
                    }
            while(no!=0){
                int first=0;
                int second=-1;
                int num6=0;
                int num2=0;
                String ans="""";
                for(int j=0;j<partsials;j++){
                        if(first<Integer.parseInt(Players[j])){
                            second=first;
                            first=Integer.parseInt(Players[j]);
                            num2=num6;
                            num6=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Players[j])){
                                    second=Integer.parseInt(Players[j]);
                                    num2=j;
                                }
                            }
                    }
                ans=""""+(char)(65+num6);
                Players[num6]=Integer.toString(Integer.parseInt(Players[num6])-1);
                no-=1;
                String ans2="""";
                for(int j=0;j<partsials;j++){
                    double p=no;
                    if(Double.parseDouble(Players[j])/p>0.5){
                        ans+=(char)(65+j);
                        Players[j]=Integer.toString(Integer.parseInt(Players[j])-1);
                        no-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}",405,15,"parties:partsials,Members:Players,total:no,num1:num6,",1923,3.631689771016440,Beam
3246,,,269,13,,4382,7.854443256060280,0
3247,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.34902909994125400,Beam
3248,,,426,18,,3529,6.136708482106530,0
3249,,,553,21,,2118,2.4877543250719700,0
3250,,,375,12,,3702,5.4951650659243300,0
3251,,,281,14,,5209,16.153319935003900,0
3252,,,358,18,,6762,22.699360970656100,0
3253,,,269,13,,4390,15.790211947759000,0
3254,,,305,15,,1198,4.260183040301010,0
3255,,,306,13,,2946,10.84173196554180,0
3256,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int W, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            W = scanner.nextInt();
            participant = new int[W];
            max = 0;
            
            for (int c = 0; c < W; c++) {

                participant[c] = scanner.nextInt();
                max += participant[c];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (W == 2) {
                for (int c = 1; c < participant[0]; c++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int ri1 = 0; ri1 < W; ri1++)
                        if (apple == -1 || participant[ri1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = ri1;
                        }
                        else if (cream == -1 || participant[ri1] > participant[cream]) {
                            brence = cream;
                            cream = ri1;
                        }
                        else if (brence == -1 || participant[ri1] > participant[brence])
                            brence = ri1;
                    int x = participant[apple] - 1;
                    int y = participant[brence];
                    
                    if ((x > y ? x : y) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}",460,16,"sum:max,gold:apple,party:participant,silver:cream,bronze:brence,N:W,j:c,i1:ri1,",4124,16.156685761610700,Beam
3257,,,291,12,,3256,11.390321679910000,0
3258,"class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int width = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / width;
                        int res = limit + width-1;
                        
                        int fin = res * row;
                        int left = cells % width;
                        //System.out.println(left);
                        if(left != 0 && width != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}","class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int age = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / age;
                        int rates = limit + age-1;
                        
                        int fin = rates * row;
                        int left = cells % age;
                        //System.out.println(left);
                        if(left != 0 && age != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}",236,16,"width:age,res:rates,",373,1.2315576235453300,Beam
3259,,,359,15,,3814,13.279558622837100,0
3260,,,327,16,,4275,14.746483357747400,0
3261,,,263,13,,683,2.3623480359713200,0
3262,"class A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(
                        System.in
                        )));
        StringBuilder builder;
        long dp[] = new long[1000005];
        dp[0] = dp[1] = 1;
        for (int i = 2; i < 20; i++) {
            dp[i] = i;
        }

        for (int i = 20; i < dp.length; i++) {
            int iLength = Integer.toString(i).length();
            builder = new StringBuilder();
            builder.append(i);
            int rev = Integer.parseInt(builder.reverse().toString());
            int revLength = Integer.toString(rev).length();
            if (rev < dp.length && rev < i && iLength == revLength) {
                dp[i] = Math.min(dp[i-1], dp[rev]) + 1;
            } else {
                dp[i] = dp[i-1] + 1;
            }
        }

        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt();
            System.out.printf(""Case #%d: %d\n"", t, dp[N]);
        }
    }
}","class A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(
                        System.in
                        )));
        StringBuilder builder;
        long dp[] = new long[1000005];
        dp[0] = dp[1] = 1;
        for (int i = 2; i < 20; i++) {
            dp[i] = i;
        }

        for (int i = 20; i < dp.length; i++) {
            int iWidth = Integer.toString(i).length();
            builder = new StringBuilder();
            builder.append(i);
            int rev = Integer.parseInt(builder.reverse().toString());
            int revLength = Integer.toString(rev).length();
            if (rev < dp.length && rev < i && iWidth == revLength) {
                dp[i] = Math.min(dp[i-1], dp[rev]) + 1;
            } else {
                dp[i] = dp[i-1] + 1;
            }
        }

        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = sc.nextInt();
            System.out.printf(""Case #%d: %d
"", t, dp[N]);
        }
    }
}",271,12,"iLength:iWidth,",81,0.26899873415629100,Beam
3263,,,255,13,,2915,12.441699242591900,0
3264,,,273,11,,2906,10.05044280687970,0
3265,,,326,14,,4837,16.855144762992900,0
3266,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,8.778012530008950,Beam
3267,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,m,w,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            m =sc.nextInt();
            w = sc.nextInt();
            irez = m/w;
            irez *=r;
            irez +=w-1;
            if(m%w > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,c:m,",280,0.6811760743459070,Beam
3268,,,475,18,,7937,27.996542727947200,0
3269,,,305,15,,5228,17.493725061416600,0
3270,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream max = System.max;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.max.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), M = scanner.nextLong(), NW = scanner.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % NW == 0) {
                max.println (ants + M/NW - 1 + NW);
            } else {
                max.println (ants + M/NW + NW);
            }
        }

    }
}",156,10,"W:NW,ans:ants,C:M,out:max,",1107,2.859868284066520,Beam
3271,,,406,19,,1024,3.656944974263510,0
3272,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,1.8896679639816300,Beam
3273,,,292,17,,6787,22.382880437374100,0
3274,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int spread = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, spread);
                sum += spread;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:spread,max:w,",462,1.4503166437149000,Beam
3275,,,282,13,,3307,10.398063850402800,0
3276,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException n) {
                n.printStackTrace();
            }
        }
        Scanner sq = new Scanner(System.in);
        int M = sq.nextInt();
        for(int SCasing=1;SCasing<=M;SCasing++){
            int N = sq.nextInt(), P = sq.nextInt(), NW = sq.nextInt();
            int P = 0, ares = 0;
            ares += N*(P/NW);
            if (P%NW==0)ares+=NW-1;
            else ares+=NW;
            System.out.println(""Case #""+SCasing+"": ""+ares);
        }
    }
}",309,11,"C:P,R:N,W:NW,res:ares,CASE:SCasing,sc:sq,T:M,r:m,e:n,",1737,5.7592521667480500,Beam
3277,,,311,17,,6672,22.309287663300800,0
3278,,,308,12,,1830,6.864652315775550,0
3279,,,265,12,,3697,12.149968524773900,0
3280,,,198,10,,2205,7.463082889715830,0
3281,,,358,18,,915,3.0250447909037300,0
3282,,,326,14,,4837,16.997984031836200,0
3283,,,426,18,,3961,15.140067414442700,0
3284,,,553,21,,5804,19.86802968978880,0
3285,,,281,14,,4837,16.724693739414200,0
3286,,,256,13,,3365,12.177177127202400,0
3287,,,258,14,,4837,16.8207439104716,0
3288,,,358,18,,915,3.090781589349110,0
3289,,,423,7,,919,3.186102632681530,0
3290,,,419,16,,1303,4.821510088443760,0
3291,,,887,27,,6688,25.335453343391400,0
3292,,,735,24,,11459,37.1597135424614,0
3293,,,256,13,,608,2.2185873985290500,0
3294,,,399,18,,6263,22.832040389378900,0
3295,,,208,12,,2039,6.469858960310620,0
3296,,,419,16,,1737,6.396421392758690,0
3297,,,334,15,,5116,19.718923525015500,0
3298,,,618,26,,10734,36.44292979637780,0
3299,,,240,13,,2426,7.7617073138554900,0
3300,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,1.4268137017885800,Beam
3301,,,211,11,,3008,9.508536366621650,0
3302,,,290,12,,3633,12.839991863568600,0
3303,,,260,11,,2512,8.990004614988960,0
3304,,,443,17,,5241,18.33398328224820,0
3305,,,211,11,,559,1.7804645975430800,0
3306,,,393,19,,2297,7.649565549691520,0
3307,,,418,13,,3969,17.29435836871470,0
3308,,,306,16,,5116,18.32553310394290,0
3309,,,255,13,,962,4.281302881240850,0
3310,,,358,18,,1351,4.641985086599990,0
3311,,,281,14,,5023,17.43057384888330,0
3312,,,655,16,,2102,8.608253272374470,0
3313,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.45970023473103800,Beam
3314,"class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int c = in.nextInt();
                int w = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(c%w, 1)+w + c/w-1;
                if (r > 1) ans1 += (r-1)*(c/w);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""\n"");
                out.write(""Case #"" + cas + "": "" + ans + ""\n"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}","class Brattleship{
    static String filename = ""A-large"";    // io filnename here
    static String inname = filename + "".in"";    
    static String outname = filename + "".out"";  
    static int n;
    public static void main(String[] args){
        try{
            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));
            //Scanner in = new Scanner(System.in);
            BufferedWriter out = new BufferedWriter(new FileWriter(outname));
            int t = in.nextInt();
            in.nextLine();
            for (int cas = 1; cas <= t; cas++){
                
                int r = in.nextInt();
                int u = in.nextInt();
                int wa = in.nextInt();
                int ans1 = 0;
                ans1 +=  Math.min(u%wa, 1)+wa + u/wa-1;
                if (r > 1) ans1 += (r-1)*(u/wa);
                int ans = ans1;
                System.out.print(""Case #"" + cas + "": "" + ans + ""
"");
                out.write(""Case #"" + cas + "": "" + ans + ""
"");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}",241,15,"w:wa,c:u,",373,1.247550328572590,Beam
3315,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,2.0223573168118800,Beam
3316,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int li=0;li<1000001;li++)
      grade[li]=UnSeKEN;
    Queue<Integer> w=new LinkedList<Integer>();
    grade[1]=1;
    w.add(1);
    while(!w.isEmpty()){
      int current=w.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nc=d+1;
        grade[next]=nc;
        w.add(next);
      }
    int c = current;
    int result=0;
    while(c>0){
      result=10*result+(c%10);
      c/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nc=d+1;
        grade[next]=nc;
        w.add(next);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int places=sen.nextInt();

    for(int ot=0;ot<places;ot++){
      int c=sen.nextInt();
      System.out.println(""Case #""+(ot+1)+"": ""+grade[c]);
    }
  }

  private static int[] grade;
  private static final int UnSeKEN=-1;
}",302,15,"distance:grade,scanner:sen,n:c,UNSEEN:UnSeKEN,i:li,cases:places,t:ot,q:w,nd:nc,",1861,5.867576563358310,Beam
3317,,,443,17,,5236,17.983961244424200,0
3318,,,344,15,,1855,6.331615869204200,0
3319,"static void main(String [] args){
        Scanner s = new Scanner(System.in);
        int t=s.nextInt();
        for(int i=0;i<t;i++){
            int n=s.nextInt();
            int [] store = new int [n];
            int sum=0;
            for(int j=0;j<n;j++){
                store[j]=s.nextInt();
                sum=sum+store[j];
            }
            System.out.print(""Case #"");
            System.out.print(i+1);
            System.out.print("": "");
            while(sum>3){
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                int dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                System.out.print("" "");
                sum=sum-2;
            }
            if(sum==2){
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                int dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                System.out.print("" "");
            
            }
            else{
                int max1=0;
                int max2=0;
                int index=-1;
                int index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                store[index]=store[index]-1;
                int dummy1=65+index;
                System.out.print((char)(dummy1));
                
                System.out.print("" "");
                 max1=0;
                 max2=0;
                 index=-1;
                 index2=-1;
                for(int j=0;j<n;j++){
                    if(store[j]>max1){
                        max1=store[j];
                        index=j;
                    }
                }
                for(int j=0;j<n;j++){
                    if(store[j]>max2 && index!=j){
                        max2=store[j];
                        index2=j;
                    }
                }
                store[index]=store[index]-1;
                store[index2]=store[index2]-1;
                 dummy1=65+index;
                int dummy2=65+index2;
                System.out.print((char)(dummy1));
                System.out.print((char)(dummy2));
                
            }
            System.out.println();
        }
    }
}","static void main(String [] args){
        Scanner r = new Scanner(System.in);
        int t=r.nextInt();
        for(int i=0;i<t;i++){
            int c=r.nextInt();
            int [] draw = new int [c];
            int count=0;
            for(int w=0;w<c;w++){
                draw[w]=r.nextInt();
                count=count+draw[w];
            }
            System.out.print(""Case #"");
            System.out.print(i+1);
            System.out.print("": "");
            while(count>3){
                int ax2=0;
                int x0=0;
                int match=-1;
                int index2=-1;
                for(int w=0;w<c;w++){
                    if(draw[w]>ax2){
                        ax2=draw[w];
                        match=w;
                    }
                }
                for(int w=0;w<c;w++){
                    if(draw[w]>x0 && match!=w){
                        x0=draw[w];
                        index2=w;
                    }
                }
                draw[match]=draw[match]-1;
                draw[index2]=draw[index2]-1;
                int dodgeArt=65+match;
                int dummy2=65+index2;
                System.out.print((char)(dodgeArt));
                System.out.print((char)(dummy2));
                System.out.print("" "");
                count=count-2;
            }
            if(count==2){
                int ax2=0;
                int x0=0;
                int match=-1;
                int index2=-1;
                for(int w=0;w<c;w++){
                    if(draw[w]>ax2){
                        ax2=draw[w];
                        match=w;
                    }
                }
                for(int w=0;w<c;w++){
                    if(draw[w]>x0 && match!=w){
                        x0=draw[w];
                        index2=w;
                    }
                }
                draw[match]=draw[match]-1;
                draw[index2]=draw[index2]-1;
                int dodgeArt=65+match;
                int dummy2=65+index2;
                System.out.print((char)(dodgeArt));
                System.out.print((char)(dummy2));
                System.out.print("" "");
            
            }
            else{
                int ax2=0;
                int x0=0;
                int match=-1;
                int index2=-1;
                for(int w=0;w<c;w++){
                    if(draw[w]>ax2){
                        ax2=draw[w];
                        match=w;
                    }
                }
                draw[match]=draw[match]-1;
                int dodgeArt=65+match;
                System.out.print((char)(dodgeArt));
                
                System.out.print("" "");
                 ax2=0;
                 x0=0;
                 match=-1;
                 index2=-1;
                for(int w=0;w<c;w++){
                    if(draw[w]>ax2){
                        ax2=draw[w];
                        match=w;
                    }
                }
                for(int w=0;w<c;w++){
                    if(draw[w]>x0 && match!=w){
                        x0=draw[w];
                        index2=w;
                    }
                }
                draw[match]=draw[match]-1;
                draw[index2]=draw[index2]-1;
                 dodgeArt=65+match;
                int dummy2=65+index2;
                System.out.print((char)(dodgeArt));
                System.out.print((char)(dummy2));
                
            }
            System.out.println();
        }
    }
}",790,14,"j:w,n:c,index:match,max2:x0,store:draw,max1:ax2,s:r,dummy1:dodgeArt,sum:count,",3876,16.229636696974400,Beam
3320,,,298,16,,1179,4.089529367287950,0
3321,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.4590365250905360,Beam
3322,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int width;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        width = s.nextInt();
        s.nextLine();
        for (int c = 0; c < width; c++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] lakeValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                lakeValues[j] = lineScan.nextInt();
                j++;
            }
            int startMethod = 0;
            int fastapestSize = 0;
            for (int w = 1; w < currentSize; w++) {
                if (lakeValues[w] < lakeValues[w - 1]) {
                    startMethod += lakeValues[w - 1] - lakeValues[w];
                    fastapestSize = Math.max(fastapestSize, lakeValues[w - 1] - lakeValues[w]);
                }
            }
            int secondMethod = 0;
            for (int w = 0; w < currentSize - 1; w++) {
                if (lakeValues[w] > fastapestSize) {
                    secondMethod += fastapestSize;
                } else {
                    secondMethod += lakeValues[w];
                }
            }
            printer.print(""Case #"" + (c + 1) + "": "");
            printer.println(startMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}",328,16,"fastestRate:fastapestSize,size:width,i:c,m:w,plateValues:lakeValues,firstMethod:startMethod,",3225,11.306793332099900,Beam
3323,,,443,17,,5433,21.210026784737900,0
3324,,,553,21,,907,3.3009116729100500,0
3325,,,544,17,,5273,20.55319184064870,0
3326,,,475,18,,7937,28.397946210702300,0
3327,,,363,16,,869,3.024542252222700,0
3328,,,292,17,,6931,23.242925186952000,0
3329,,,386,18,,4226,14.243017709255200,0
3330,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",993,3.427190899848940,Beam
3331,,,443,17,,1901,6.921767159303030,0
3332,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int ref = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, ref);
                sum += ref;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:ref,max:w,",462,1.4694570700327600,Beam
3333,"class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanner = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int T = scanner.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = scanner.nextInt();
            int[] m = new int[N];
            for (int i = 0; i < N; i++) {
                m[i] = scanner.nextInt();
            }
            int s1 = 0;
            int maxDiff = 0;
            for (int i = 1; i < N; i++) {
                if (m[i-1] > m[i]) {
                    int diff = m[i-1] - m[i];
                    s1 += diff;
                    if (diff > maxDiff) {
                        maxDiff = diff;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < N-1; i++) {
                if (m[i] < maxDiff) {
                    s2 += m[i];
                } else {
                    s2 += maxDiff;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", t, s1, s2));
        }
        scanner.close();
        writer.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanner = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int T = scanner.nextInt();
        for (int t = 1; t <= T; t++) {
            int R = scanner.nextInt();
            int[] w = new int[R];
            for (int i = 0; i < R; i++) {
                w[i] = scanner.nextInt();
            }
            int s1 = 0;
            int maxDiff = 0;
            for (int i = 1; i < R; i++) {
                if (w[i-1] > w[i]) {
                    int diff = w[i-1] - w[i];
                    s1 += diff;
                    if (diff > maxDiff) {
                        maxDiff = diff;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < R-1; i++) {
                if (w[i] < maxDiff) {
                    s2 += w[i];
                } else {
                    s2 += maxDiff;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", t, s1, s2));
        }
        scanner.close();
        writer.close();
    }
}",267,13,"m:w,N:R,",525,1.6923870046933500,Beam
3334,,,260,13,,3969,13.210563997427600,0
3335,,,281,14,,5209,17.469170312086700,0
3336,,,426,18,,3560,13.439639731248200,0
3337,,,367,20,,1368,4.736468227704370,0
3338,,,255,13,,1458,6.466436942418420,0
3339,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int C = Integer.parseInt(st.nextToken());
            int W = Integer.parseInt(st.nextToken());

            if (W == C)
                out.println(W+R-1);
            else if (C < 2*W)
                out.println(R+W);
            else if (C == 2*W)
                out.println(2*R-1+W);
            else {
                int rem = C%W;
                if (rem == 0) {
                    out.println((C*R)/W-1+W);
                }
                else {
                    out.println((C/W)*R+W);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        PrintWriter out = new PrintWriter(args[1], ""UTF-8"");

        int T = Integer.parseInt(br.readLine());
        for (int t = 1; t <= T; ++t) {
            out.print(""Case #""+t+"": "");            

            StringTokenizer st = new StringTokenizer(br.readLine());
            int R = Integer.parseInt(st.nextToken());
            int N = Integer.parseInt(st.nextToken());
            int N = Integer.parseInt(st.nextToken());

            if (N == N)
                out.println(N+R-1);
            else if (N < 2*N)
                out.println(R+N);
            else if (N == 2*N)
                out.println(2*R-1+N);
            else {
                int rem = N%N;
                if (rem == 0) {
                    out.println((N*R)/N-1+N);
                }
                else {
                    out.println((N/N)*R+N);
                }
            }
        }

        out.flush();
        out.close();

        System.exit(0);
    }
}",273,11,"C:N,W:N,",423,1.4599581599235500,Beam
3340,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int testSum = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testSum; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int init = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < init) {
                    total0 += init - current;
                    maxMin = Math.max(maxMin, init - current);
                }
                init = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"pw:jpow,prev:init,testCount:testSum,",1408,4.509576602776850,Beam
3341,,,300,13,,3766,11.313357492288000,0
3342,,,263,13,,3132,10.784237066904700,0
3343,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,2.3285944064458200,Beam
3344,,,406,19,,7999,28.714556749661800,0
3345,,,334,15,,1179,4.676293631394700,0
3346,,,406,19,,7999,29.1181969722112,0
3347,,,269,16,,5830,18.66396817366280,0
3348,"class CodeJam {
     public static void main(String[] args) throws NumberFormatException, IOException {
             BufferedReader br = new BufferedReader(new FileReader(""in.txt""));
             BufferedWriter bw=new BufferedWriter(new FileWriter(""soldiers.txt""));
            
            int T,N=0;
            String l;
               T = Integer.valueOf(br.readLine());
            for (int i=0;i<T;i++)
                {
                String s="""";
                N = Integer.valueOf(br.readLine());
                int[][] lists = new int[2*N -1][N];
                for(int j=0;j<(2*N-1);j++){
                    l=br.readLine();
                    for(int k=0;k<N;k++)
                        lists[j][k]=Integer.valueOf(l.split("" "")[k]);
                }
                
                int c=0;
                for (int m=1;m<2501;m++){
                    c=0;
                    for(int j=0;j<(2*N-1);j++)
                        for(int k=0;k<N;k++)if(lists[j][k]==(m))c++;
                        if(c%2!=0)s=s+m+"" "";
                    }
                
                
                bw.write(""Case #""+(i+1)+"": ""+s);bw.newLine();
            }
            br.close();
            bw.close();
       }
}","class CodeJam {
     public static void main(String[] args) throws NumberFormatException, IOException {
             BufferedReader br = new BufferedReader(new FileReader(""in.txt""));
             BufferedWriter ww=new BufferedWriter(new FileWriter(""soldiers.txt""));
            
            int C,W=0;
            String l;
               C = Integer.valueOf(br.readLine());
            for (int i=0;i<C;i++)
                {
                String r="""";
                W = Integer.valueOf(br.readLine());
                int[][] ls = new int[2*W -1][W];
                for(int dj=0;dj<(2*W-1);dj++){
                    l=br.readLine();
                    for(int k=0;k<W;k++)
                        ls[dj][k]=Integer.valueOf(l.split("" "")[k]);
                }
                
                int c=0;
                for (int w=1;w<2501;w++){
                    c=0;
                    for(int dj=0;dj<(2*W-1);dj++)
                        for(int k=0;k<W;k++)if(ls[dj][k]==(w))c++;
                        if(c%2!=0)r=r+w+"" "";
                    }
                
                
                ww.write(""Case #""+(i+1)+"": ""+r);ww.newLine();
            }
            br.close();
            ww.close();
       }
}",317,14,"N:W,s:r,lists:ls,j:dj,m:w,T:C,bw:ww,",3256,11.070434999465900,Beam
3349,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int li=0;li<1000001;li++)
      grade[li]=UnSeKEN;
    Queue<Integer> w=new LinkedList<Integer>();
    grade[1]=1;
    w.add(1);
    while(!w.isEmpty()){
      int current=w.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nr=d+1;
        grade[next]=nr;
        w.add(next);
      }
    int c = current;
    int result=0;
    while(c>0){
      result=10*result+(c%10);
      c/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nr=d+1;
        grade[next]=nr;
        w.add(next);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int places=sen.nextInt();

    for(int ot=0;ot<places;ot++){
      int c=sen.nextInt();
      System.out.println(""Case #""+(ot+1)+"": ""+grade[c]);
    }
  }

  private static int[] grade;
  private static final int UnSeKEN=-1;
}",302,15,"distance:grade,scanner:sen,n:c,UNSEEN:UnSeKEN,i:li,cases:places,t:ot,q:w,nd:nr,",1861,5.89837079445521,Beam
3350,,,330,16,,5798,22.37522842089340,0
3351,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int max = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<max; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}",187,12,"col:max,",32,0.07087988456090290,Beam
3352,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader ber = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter besw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = ber.readLine()) != null) {
            letters.add(line);
        }

        int numberSum = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int index = 0; index < numberSum; index++) {
            String line1 = letters.get(currentIndex++);
            String cellTwo = letters.get(currentIndex++);
            String[] array = cellTwo.split("" "");
            int[] cons = new int[array.length];
            for (int i94 = 0; i94 < array.length; i94++) {
                cons[i94] = Integer.valueOf(array[i94]);
            }
            int[] boss = cons;
            long[] lock2 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int li27 = 0; li27 < boss.length - 1; li27++) {
                        if (boss[li27+1] < boss[li27]) {
                            lock2[0] += boss[li27] - boss[li27+1];
                        }
                    }
                    
                    int rated = 0;
                    for (int anti323 = 0; anti323 < boss.length - 1; anti323++) {
                        if (boss[anti323+1] < boss[anti323]) {
                            rated = Math.max(rated, boss[anti323] - boss[anti323+1]);
                        }
                    }
                    
                    for (int xi01 = 0; xi01 < boss.length - 1; xi01++) {
                        lock2[1] += Math.count(boss[xi01], rated);
                    }
            long[] count = lock2;
            String r = ""Case #"" + (index + 1) + "": "" + count[0] + "" "" + count[1];

//            System.out.println(r);
            besw.write(r);
            besw.newLine();
        }

        if (besw != null)
            besw.close();

        if (ber != null)
            ber.close();
    }
}",479,25,"mush:boss,rate:rated,min1:lock2,lines:letters,min:count,i2:li27,i3:anti323,i4:i94,vals:array,problemCount:numberSum,line2:cellTwo,ans:cons,i:index,i1:xi01,bw:besw,br:ber,",7369,26.01640724738440,Beam
3353,"class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextLine;
    nextLine = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextLine = reader.readLine()) != null) {
      int rows = Integer.valueOf(nextLine);

      TreeSet<Integer> soldiers = new TreeSet<Integer>();
      for (int i = 0; i < 2 * rows - 1 ; i++) {
        nextLine = reader.readLine();
        String[] row = nextLine.split("" "");
        for (String soldier : row) {
          int height = Integer.valueOf(soldier);
          if (soldiers.contains(height)) {
            soldiers.remove(height);
          } else {
            soldiers.add(height);
          }
        }
      }
      if (soldiers.size() != rows) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer soldier : soldiers) {
        writer.write("" "" + soldier);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}","class B {
  
  public static void main(String cmdArgs[]) throws Exception {
    long time = System.currentTimeMillis();

    String filename = cmdArgs[0];

    BufferedWriter writer =
      new BufferedWriter(new PrintWriter(filename + ""-output.txt"", ""UTF-8""));
    BufferedReader reader = new BufferedReader(new FileReader(filename));

    String nextFile;
    nextFile = reader.readLine(); // ignore count
    int caseNum = 1;
    while ((nextFile = reader.readLine()) != null) {
      int checks = Integer.valueOf(nextFile);

      TreeSet<Integer> soldries = new TreeSet<Integer>();
      for (int li = 0; li < 2 * checks - 1 ; li++) {
        nextFile = reader.readLine();
        String[] r = nextFile.split("" "");
        for (String oldica : r) {
          int width = Integer.valueOf(oldica);
          if (soldries.contains(width)) {
            soldries.remove(width);
          } else {
            soldries.add(width);
          }
        }
      }
      if (soldries.size() != checks) {
        System.out.println(""BUG"");
      }
      writer.write(""Case #"" + caseNum + "":"");
      for (Integer oldica : soldries) {
        writer.write("" "" + oldica);
      }
      caseNum++;
      writer.newLine();
    }
    writer.close();
    long elapsed = System.currentTimeMillis() - time;
    System.out.println(""millis elapsed: "" + elapsed);
  }
}",295,15,"height:width,row:r,rows:checks,i:li,soldiers:soldries,soldier:oldica,nextLine:nextFile,",1830,6.952860573927560,Beam
3354,,,334,15,,5116,19.855890210469600,0
3355,,,406,16,,5953,21.282074562708500,0
3356,,,479,25,,8250,28.349400226275100,0
3357,,,308,12,,1458,5.535293440024060,0
3358,,,325,14,,4797,16.72818498214090,0
3359,,,269,13,,4081,14.818623189131400,0
3360,,,417,19,,6812,23.668366809686000,0
3361,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxdif = Math.max(cur - w[i], maxdif);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxdif / 10;
            
            r10 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:rank,m:w,",1024,3.610668420791630,Beam
3362,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] party;
    public static int W, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            W = scanner.nextInt();
            party = new int[W];
            sum = 0;
            
            for (int j = 0; j < W; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (W == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int c = party[gold] - 1;
                    int w = party[bronze];
                    
                    if ((c > w ? c : w) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}",460,16,"y:w,x:c,N:W,",1303,5.86215626001358,Beam
3363,,,321,18,,6944,22.335271946589200,0
3364,,,200,10,,497,1.30647101799647,0
3365,,,348,14,,3467,12.404876351356500,0
3366,,,240,12,,3345,11.258646468321500,0
3367,,,363,16,,6046,21.68643624385200,0
3368,,,619,14,,4333,15.39976074298220,0
3369,,,345,16,,2825,9.163037308057150,0
3370,,,321,18,,6956,22.17292203903200,0
3371,,,263,13,,4434,15.307696187496200,0
3372,,,295,15,,1064,3.75200160741806,0
3373,,,184,9,,435,1.4468658288319900,0
3374,"class A3rd {
static String chr = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Scanner sc = new Scanner(System.in);

        int T = sc.nextInt();
        
        for(int i=1;i<=T;i++){
            String per="""";
        
        int n = sc.nextInt();
        int [] p = new int[n];
        for(int k = 0;k<n;k++){
            p[k]= sc.nextInt();
        }
        //Arrays.sort(p);
        boolean ok = false;
        int last=0;
        do{
            
        
        int max =0;
        ok = false;
        for(int k = 0;k<n;k++){
            if(0<p[k])
                ok = true;
        }
        if(ok){
            for(int k = 0;k<n;k++){
                if(p[max]<p[k])
                    {
                    max = k;
                    last=0;
                    }
            
            }
            per  = per + chr.charAt(max);
            p[max]--;    
        }
        ok = false;
        for(int k = 0;k<n;k++){
            if(0<p[k])
                ok = true;
        }
        max =0;
        if(ok){
            for(int k = 0;k<n;k++){
                if(p[max]<p[k])
                    {
                    max = k;
                    last = 1;
                    }
            }
            per  = per + chr.charAt(max)+"" "";
            p[max]--;    
        }
        
        
        }while(ok);
        //System.out.println(""Casejjk #""+i+"": ""+per.charAt(per.length()-2));
        
        if(last==0)
        {
            
            //System.out.println(""Case #""+i+"": ""+per);
            
            //System.out.println(""Case #""+i+"": ""+per);
            String s = per.substring(0, per.length()-4);
            //System.out.println(""Case #""+i+"": ""+s);
            String u = per.substring(per.length()-4);
            //System.out.println(""Case #""+i+"": ""+u);
            StringBuilder ss = new StringBuilder(u);
            u = ss.reverse().toString();
            //System.out.println(""Case #""+i+"": ""+u);
            per=s+u;
            //System.out.println(""Case #""+i+"": ""+per);
        //    s= per.substring(0,per.length()-2)+"" ""+per.substring(per.length()-2);
        //s=per;
        }
    per=    per.trim();
        System.out.println(""Case #""+i+"": ""+per);
        }

    }

}","class A3rd {
static String chr = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Scanner sc = new Scanner(System.in);

        int T = sc.nextInt();
        
        for(int i=1;i<=T;i++){
            String per="""";
        
        int r = sc.nextInt();
        int [] c = new int[r];
        for(int k = 0;k<r;k++){
            c[k]= sc.nextInt();
        }
        //Arrays.sort(p);
        boolean ok = false;
        int last=0;
        do{
            
        
        int w =0;
        ok = false;
        for(int k = 0;k<r;k++){
            if(0<c[k])
                ok = true;
        }
        if(ok){
            for(int k = 0;k<r;k++){
                if(c[w]<c[k])
                    {
                    w = k;
                    last=0;
                    }
            
            }
            per  = per + chr.charAt(w);
            c[w]--;    
        }
        ok = false;
        for(int k = 0;k<r;k++){
            if(0<c[k])
                ok = true;
        }
        w =0;
        if(ok){
            for(int k = 0;k<r;k++){
                if(c[w]<c[k])
                    {
                    w = k;
                    last = 1;
                    }
            }
            per  = per + chr.charAt(w)+"" "";
            c[w]--;    
        }
        
        
        }while(ok);
        //System.out.println(""Casejjk #""+i+"": ""+per.charAt(per.length()-2));
        
        if(last==0)
        {
            
            //System.out.println(""Case #""+i+"": ""+per);
            
            //System.out.println(""Case #""+i+"": ""+per);
            String s = per.substring(0, per.length()-4);
            //System.out.println(""Case #""+i+"": ""+s);
            String u = per.substring(per.length()-4);
            //System.out.println(""Case #""+i+"": ""+u);
            StringBuilder ss = new StringBuilder(u);
            u = ss.reverse().toString();
            //System.out.println(""Case #""+i+"": ""+u);
            per=s+u;
            //System.out.println(""Case #""+i+"": ""+per);
        //    s= per.substring(0,per.length()-2)+"" ""+per.substring(per.length()-2);
        //s=per;
        }
    per=    per.trim();
        System.out.println(""Case #""+i+"": ""+per);
        }

    }

}",419,16,"max:w,p:c,n:r,",1458,5.327938715616860,Beam
3375,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,1.5049524664878800,Beam
3376,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int W = in.nextInt();
            int[][] G = new int[R][W];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < W; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < W; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < W) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}",513,26,"C:W,",49,0.14850616455078100,Beam
3377,,,262,14,,3504,12.068508938948300,0
3378,,,406,19,,1024,3.6108491818110100,0
3379,,,408,17,,5513,19.634035082658100,0
3380,,,553,21,,907,3.2368078589439400,0
3381,"class A {

    public static void main(String[] args) {

        Scanner k = new Scanner(System.in);
        int T = k.nextInt();

        for(int i = 0; i < T; i++)
        {
            long input = k.nextLong();
            long output = 0;

            while(input != 0)
            {
                //System.out.println(input);
                if(input <= 20)
                {
                    output += input;
                    break;
                }
                long flipThis = input;
                long reverse = 0;
                while( flipThis != 0 )
                {
                    reverse = reverse * 10;
                    reverse = reverse + flipThis%10;
                    flipThis = flipThis/10;
                }
                long flipped = reverse;
                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)
                {
                    input = flipped;
                }
                else
                {
                    input--;
                }
                output++;
            }
            System.out.println(""Case #""+(i+1)+"": "" + output);
        }
    }
}","class A {

    public static void main(String[] args) {

        Scanner reader = new Scanner(System.in);
        int TN = reader.nextInt();

        for(int init = 0; init < TN; init++)
        {
            long config = reader.nextLong();
            long operation = 0;

            while(config != 0)
            {
                //System.out.println(input);
                if(config <= 20)
                {
                    operation += config;
                    break;
                }
                long flippingWhatever = config;
                long gain = 0;
                while( flippingWhatever != 0 )
                {
                    gain = gain * 10;
                    gain = gain + flippingWhatever%10;
                    flippingWhatever = flippingWhatever/10;
                }
                long pliped = gain;
                if(pliped < config && config % Math.pow(10, (int)(Math.log10(config)+1)/2) == 1)
                {
                    config = pliped;
                }
                else
                {
                    config--;
                }
                operation++;
            }
            System.out.println(""Case #""+(init+1)+"": "" + operation);
        }
    }
}",198,10,"flipThis:flippingWhatever,reverse:gain,output:operation,k:reader,T:TN,i:init,flipped:pliped,input:config,",2021,7.109953478972120,Beam
3382,,,291,12,,3721,13.371380162239100,0
3383,,,269,16,,5830,18.5570694843928,0
3384,,,256,13,,3152,11.39938082297640,0
3385,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int max = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int x = 0; x < r-1; x++){
                max = max + (c/max);
            }
            if(c-max == 0){
                max = max + max;
            }else if(c-max < max){
                max = max + 1;
            }else{
                max = (long) (max + Math.ceil((double)c/(double)max));
                max = max + max - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:max,min:max,",404,1.416495402654010,Beam
3386,"class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int caseNumber = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []p = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    p[i1] = scanner.nextInt();
                    if (p[i1] > p[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += p[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = p[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (p[idx] > 0) {
                        p[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + caseNumber + "": "" + result);
                System.out.println(""Case #"" + caseNumber + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}","class A {
    public static void main(String[] args) {
         try {

             Scanner scanner = (new Scanner(new File(""c:/users/rafal/ideaprojects/src/Ain.txt"")));


             FileOutputStream out = new FileOutputStream(""c:/users/rafal/ideaprojects/src/Aout.txt"");

             int numberOfCases;
             numberOfCases = scanner.nextInt();
             scanner.nextLine();

             PrintWriter wr = new PrintWriter(out);
             for (int i = 0; i < numberOfCases; i++) {
                 int c = i + 1;
                int n = scanner.nextInt();
                
                int largestIdx = 0;
                int []w = new int[n];
                int sum = 0;
                for (int i1 = 0; i1 < n ; i1++) {
                    w[i1] = scanner.nextInt();
                    if (w[i1] > w[largestIdx]) {
                        largestIdx = i1;
                    }
                    sum += w[i1];
                }
                
                StringBuffer result = new StringBuffer();
                int largest = w[largestIdx];
                
                int idx = 0;
                while (sum > 2 * largest) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum--;
                        result.append("" "" + (char)('A' + idx));
                    } else {
                        idx++;
                    }
                }
                
                while (sum > 0) {
                    // remove one
                    if (idx == largestIdx) {
                        idx++;
                    }
                    if (w[idx] > 0) {
                        w[idx]--;
                        sum -= 2;
                        result.append("" "" + (char)('A' + idx));
                        result.append((char)('A' + largestIdx));
                    } else {
                        idx++;
                    }
                }
                
                
                wr.println(""Case #"" + c + "": "" + result);
                System.out.println(""Case #"" + c + "": "" + result);
                // ...
                 if (i < numberOfCases - 1)
                    scanner.nextLine();
             }
             wr.close();
             out.close();

         } catch (IOException e) {
             System.out.println(""Error: "" + e);
         }
     }


}",406,17,"p:w,caseNumber:c,",435,1.7130746404329900,Beam
3387,,,419,16,,1272,4.416775782903040,0
3388,,,330,16,,6015,23.343405389785800,0
3389,,,500,19,,8360,28.991920884450300,0
3390,,,406,17,,5136,21.127265707651800,0
3391,"class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String count = null;
        FileWriter fw = new FileWriter(""output.out"");  
        count = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(count); i++) {
                times.clear();
                for (int i1 = 0; i1 < 2501 ;i1++) {
                    Integer a = new Integer(0);
                    times.add(i1, a);
                }
                Integer n = Integer.parseInt(bf.readLine());
                for (int i2 = 1; i2 < 2*n; i2++) {
                    String lines = bf.readLine();
                    String []nums = lines.split("" "");
                    for (int i1 = 0; i1 < nums.length; i1++) {
                        Integer temp = Integer.parseInt(nums[i1]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i1 = 0; i1 < 2501; i1 ++) {
                    if (times.get(i1) % 2 != 0) {
                        buffers += i1.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""\n"");

        }
        bf.close();
        fw.close();
    }
}","class Q2 {

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader(""input.in""));
        String c = null;
        FileWriter fw = new FileWriter(""output.out"");  
        c = bf.readLine();
        ArrayList<Integer> times = new ArrayList<Integer>();
        for (int i = 0; i < Integer.parseInt(c); i++) {
                times.clear();
                for (int i91 = 0; i91 < 2501 ;i91++) {
                    Integer r = new Integer(0);
                    times.add(i91, r);
                }
                Integer w = Integer.parseInt(bf.readLine());
                for (int uitwo = 1; uitwo < 2*w; uitwo++) {
                    String lines = bf.readLine();
                    String []cums = lines.split("" "");
                    for (int i91 = 0; i91 < cums.length; i91++) {
                        Integer temp = Integer.parseInt(cums[i91]);
                        times.set(temp, times.get(temp) + 1);
                    }
                }
                String buffers = """";
                for (Integer i91 = 0; i91 < 2501; i91 ++) {
                    if (times.get(i91) % 2 != 0) {
                        buffers += i91.toString() + "" "";
                    }
                }

                fw.write(""Case #"" + (i + 1) + "": "" + buffers + ""
"");

        }
        bf.close();
        fw.close();
    }
}",305,15,"n:w,a:r,i1:i91,count:c,i2:uitwo,nums:cums,",2999,10.569961583614300,Beam
3392,,,334,15,,807,3.1363665660222400,0
3393,,,368,14,,5209,18.600318431854200,0
3394,,,255,13,,2264,9.877718965212500,0
3395,,,321,18,,3102,10.525580358505200,0
3396,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,2.4074086785316500,Beam
3397,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int c=inp.nextInt();
        int[] img=new int[c];
        for(int j=0;j<c;j++){
            img[j]=inp.nextInt();
        }
        int mean1=0;
        int miss32=0;
        for(int kick=0;kick<c-1;kick++){
            
            int y=(img[kick]-img[kick+1]>0)? img[kick]-img[kick+1]:0;
            mean1+=y;
        
        }
        int w=0;
        for(int r=0;r<c-1;r++){
            w=Math.max(w,img[r]-img[r+1]);
        }
        for(int d=0;d<c-1;d++){
            int x=(img[d]<=w)?img[d]:w;
            miss32+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+mean1+"" ""+miss32);
    }
}
}",272,16,"arr:img,sum1:mean1,sum2:miss32,h:r,k:kick,v:w,n:c,",4164,11.590106578668000,Beam
3398,,,368,14,,4837,17.09825859864550,0
3399,,,448,20,,9569,33.852337419986700,0
3400,,,358,16,,5302,19.886224432786300,0
3401,,,406,16,,1272,4.886165090401970,0
3402,,,328,16,,2977,10.426048338413200,0
3403,,,468,14,,1055,5.013665636380510,0
3404,,,359,15,,3814,13.207456270853700,0
3405,,,291,12,,900,3.1358363191286700,0
3406,,,460,16,,5302,20.735238420963300,0
3407,,,525,23,,13540,43.230246969064100,0
3408,,,224,11,,2760,9.838209891319280,0
3409,,,358,18,,915,3.112970753510790,0
3410,"class ProblemB {
    public static void main (String[] args) throws FileNotFoundException {

        FileReader file = new FileReader(""B-large.in"");
        Scanner in = new Scanner(file);
        PrintWriter out = new PrintWriter(""output.txt"");

        int t = in.nextInt();

        for(int b = 1; b<=t; b++) {
            int n = in.nextInt();
            int[] a = new int[2501];
            int[] result = new int[n];
            int k = 0;
            for (int i = 0; i < ((2 * n - 1) * n); i++) {
                a[in.nextInt()] += 1;

            }

            for(int j = 0; j<a.length; j++)
            {
                if(!((a[j] % 2)== 0))
                {
                    result[k] = j;
                    k++;
                }

            }
            String output ="""";
            for(int s = 0; s<result.length; s++)
            {
                output += "" "" + result[s];
            }
            out.println(""Case #"" + b +"":"" + output);
        }

        in.close();
        out.close();
    }
}","class ProblemB {
    public static void main (String[] args) throws FileNotFoundException {

        FileReader file = new FileReader(""B-large.in"");
        Scanner r = new Scanner(file);
        PrintWriter out = new PrintWriter(""output.txt"");

        int t = r.nextInt();

        for(int b = 1; b<=t; b++) {
            int w = r.nextInt();
            int[] a = new int[2501];
            int[] diff = new int[w];
            int k = 0;
            for (int i = 0; i < ((2 * w - 1) * w); i++) {
                a[r.nextInt()] += 1;

            }

            for(int j = 0; j<a.length; j++)
            {
                if(!((a[j] % 2)== 0))
                {
                    diff[k] = j;
                    k++;
                }

            }
            String output ="""";
            for(int s = 0; s<diff.length; s++)
            {
                output += "" "" + diff[s];
            }
            out.println(""Case #"" + b +"":"" + output);
        }

        r.close();
        out.close();
    }
}",246,15,"n:w,result:diff,in:r,",1133,3.741838812828060,Beam
3411,,,250,11,,807,2.853753952185310,0
3412,,,468,20,,8815,32.657482202847800,0
3413,,,348,14,,3554,12.81768171787260,0
3414,,,887,27,,1166,4.579399967193600,0
3415,,,258,14,,5147,18.000711603959400,0
3416,,,309,11,,1954,6.423948335647580,0
3417,,,250,11,,2884,9.992743170261380,0
3418,,,426,18,,3839,14.149714950720500,0
3419,,,257,11,,3008,10.530270493030500,0
3420,,,265,12,,3701,12.286618892351800,0
3421,,,406,19,,1024,3.648803146680200,0
3422,,,348,14,,3523,12.19013432264330,0
3423,,,525,23,,13594,46.373395105203000,0
3424,,,328,16,,5302,18.386642464002000,0
3425,"static void main(String[] args) throws Exception {
        //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        
        BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
        PrintWriter pw=new PrintWriter(new FileWriter(""A-large.out""));
        
        int t,total,tc,n,i,arr[],M,c,twice;
        String inp[],character="""";
        t = Integer.parseInt(br.readLine().trim());
        for(tc=1;tc<=t;tc++){
            total=0;
            character="""";
            n=Integer.parseInt(br.readLine().trim());
            arr=new int[n];
            inp=br.readLine().trim().split("" "");
            for(i=0;i<n;i++){
                arr[i]=Integer.parseInt(inp[i]);
                total+=arr[i];
            }
            while(total>0){
                character+="" "";
                int M1,i1;
                for(M1=0,i1=1;i1<arr.length;i1++)
                    if(arr[M1]<arr[i1])
                        M1=i1;
                M=arr[M1];
                int i2,c1;
                for(i2=c1=0;i2<arr.length;i2++)
                    if(arr[i2]==M)
                        c1++;
                c=c1;
                if(c==2){//end case 
                    //remove 2 at a time
                    twice=2;
                    for(i=0;i<n && twice >0 ;i++){
                        if(arr[i]==M && twice>0){
                            character+=(char)(65+i) +"""";
                            arr[i]--;
                            total--;
                        }
                    }                    
                }
                else{
                    for(i=0;i<n;i++){
                        if(arr[i]==M){
                            character+=(char)(65+i) +"""";
                            arr[i]--;
                            total--;
                            break;
                        }
                    }
                        
                }
            }
            
            
            
            
            
            pw.println(""Case #""+tc+"":""+character);
        }
        pw.flush();
        pw.close();

    }

}","static void main(String[] args) throws Exception {
        //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        
        BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
        PrintWriter pw=new PrintWriter(new FileWriter(""A-large.out""));
        
        int t,total,tc,n,i,arr[],R,c,wwice;
        String inp[],character="""";
        t = Integer.parseInt(br.readLine().trim());
        for(tc=1;tc<=t;tc++){
            total=0;
            character="""";
            n=Integer.parseInt(br.readLine().trim());
            arr=new int[n];
            inp=br.readLine().trim().split("" "");
            for(i=0;i<n;i++){
                arr[i]=Integer.parseInt(inp[i]);
                total+=arr[i];
            }
            while(total>0){
                character+="" "";
                int M1,i1;
                for(M1=0,i1=1;i1<arr.length;i1++)
                    if(arr[M1]<arr[i1])
                        M1=i1;
                R=arr[M1];
                int i2,c1;
                for(i2=c1=0;i2<arr.length;i2++)
                    if(arr[i2]==R)
                        c1++;
                c=c1;
                if(c==2){//end case 
                    //remove 2 at a time
                    wwice=2;
                    for(i=0;i<n && wwice >0 ;i++){
                        if(arr[i]==R && wwice>0){
                            character+=(char)(65+i) +"""";
                            arr[i]--;
                            total--;
                        }
                    }                    
                }
                else{
                    for(i=0;i<n;i++){
                        if(arr[i]==R){
                            character+=(char)(65+i) +"""";
                            arr[i]--;
                            total--;
                            break;
                        }
                    }
                        
                }
            }
            
            
            
            
            
            pw.println(""Case #""+tc+"":""+character);
        }
        pw.flush();
        pw.close();

    }

}",432,19,"twice:wwice,M:R,",652,2.3575030326843300,Beam
3426,,,257,11,,3070,10.797417147954300,0
3427,,,443,17,,2273,8.30613526503245,0
3428,,,420,19,,7084,23.867627942562100,0
3429,,,260,11,,2512,9.262317089239760,0
3430,,,330,16,,5488,18.702351701259600,0
3431,,,305,15,,799,2.1386945486068700,0
3432,,,418,13,,4062,13.411887792746200,0
3433,,,262,14,,3442,9.376071572303770,0
3434,,,306,16,,5302,14.296714023749000,0
3435,,,208,12,,2044,4.8451821605364500,0
3436,,,240,13,,2426,5.7214070955912300,0
3437,,,367,20,,935,2.40469073454539,0
3438,,,263,13,,683,1.7204638918240900,0
3439,,,298,16,,4527,11.456272923946400,0
3440,,,278,15,,801,1.9019965728124000,0
3441,,,305,15,,799,2.1230745673179600,0
3442,,,292,17,,6922,17.275040209293400,0
3443,,,406,16,,6077,16.613365606466900,0
3444,,,324,13,,4434,11.047160943349200,0
3445,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long counter = queue.poll();
                
                if (counter == W){
                    break;
                }
                
                next[0] = counter + 1;
                StringBuilder builder = new StringBuilder(Long.toString(counter));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= W && next[i] > counter){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(counter) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,number:counter,",402,1.1165353457133000,Beam
3446,,,345,16,,861,2.1231221199035600,0
3447,,,327,16,,4275,10.923145850499500,0
3448,,,448,20,,9502,26.224942517280600,0
3449,,,426,18,,3529,7.669097741444910,0
3450,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int max = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<max; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}",187,12,"col:max,",32,0.03520707289377850,Beam
3451,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int trials = scan.nextInt();

        for (int i = 0; i < trials; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int u = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (u / time) + (u - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"w:time,ans:ants,c:u,cases:trials,",1086,1.44244624376297,Beam
3452,,,273,11,,553,0.9965830008188880,0
3453,,,282,13,,4231,6.997576336065930,0
3454,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A m = new A();
        if(!m.DEBUG){
            try {
                if(m.isSmall)System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large.in"")));
                if(m.isSmall)System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+m.PACKAGE+""/""+m.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException ignore) {
                ignore.printStackTrace();
            }
        }
        Scanner sh = new Scanner(System.in);
        int D = sh.nextInt();
        for(int TATE=1;TATE<=D;TATE++){
            int N = sh.nextInt(), E = sh.nextInt(), NW = sh.nextInt();
            int E = 0, ares = 0;
            ares += N*(E/NW);
            if (E%NW==0)ares+=NW-1;
            else ares+=NW;
            System.out.println(""Case #""+TATE+"": ""+ares);
        }
    }
}",309,11,"C:E,R:N,W:NW,res:ares,CASE:TATE,sc:sh,T:D,r:m,e:ignore,",1737,2.974089527130130,Beam
3455,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer r= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(r.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,st:r,",1768,3.0525609771410600,Beam
3456,,,366,17,,900,1.5360475579897600,0
3457,,,187,13,,1987,2.4716012914975500,0
3458,,,316,15,,4204,7.580866324901580,0
3459,,,265,12,,617,1.0441791097323100,0
3460,,,187,13,,2263,2.832241372267410,0
3461,,,282,13,,4360,7.231763084729510,0
3462,,,358,18,,5050,8.51065841515859,0
3463,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",993,1.714531950155890,Beam
3464,,,553,21,,1373,2.4605821212132800,0
3465,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner isprint = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = isprint.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int W = isprint.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] char = new int[W];
            for (int c = 0; c < W; c++){
                char[c] = isprint.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int c=1;c<W;c++){
                if(dif<char[c-1]-char[c]) dif=char[c-1]-char[c];    
            }
            for(int c=1;c<W;c++){
                if(char[c]<char[c-1]) a+=char[c-1]-char[c];
                if(char[c-1]<dif) b+=char[c-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,11,"ps:char,sinput:isprint,i:c,N:W,",1303,2.296469235420230,Beam
3466,,,386,18,,7280,12.2461532274882,0
3467,,,367,20,,935,1.642432447274530,0
3468,,,132,9,,1898,2.2295606255531300,0
3469,,,349,19,,5222,9.073949599266050,0
3470,". */
class CodeF
{
    public static void main (String[] args) throws java.lang.Exception, IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String str = br.readLine();
        int val = Integer.parseInt(str);
        int cnum = 1;
        while((str=br.readLine()) != null)
        {
            String[] temp = str.split("" "");
            int r = Integer.parseInt(temp[0]);
            int c = Integer.parseInt(temp[1]);
            int w = Integer.parseInt(temp[2]);
            int ans = 0;
            if (c%w == 0){ ans = ((c/w) + w - 1)*r; }
            else { ans = ((c/w) + w)*r; }
            System.out.println(""Case #""+cnum +"": ""+ans);
            cnum++;
        }
    }
}",". */
class CodeF
{
    public static void main (String[] args) throws java.lang.Exception, IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String str = br.readLine();
        int val = Integer.parseInt(str);
        int cnum = 1;
        while((str=br.readLine()) != null)
        {
            String[] temp = str.split("" "");
            int r = Integer.parseInt(temp[0]);
            int c = Integer.parseInt(temp[1]);
            int h = Integer.parseInt(temp[2]);
            int ants = 0;
            if (c%h == 0){ ants = ((c/h) + h - 1)*r; }
            else { ants = ((c/h) + h)*r; }
            System.out.println(""Case #""+cnum +"": ""+ants);
            cnum++;
        }
    }
}",199,10,"ans:ants,w:h,",218,0.29581437110900900,Beam
3471,,,211,11,,559,0.9248464663823450,0
3472,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int u = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (u / time) + (u - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"w:time,ans:ants,c:u,",745,0.9815440972646080,Beam
3473,,,292,16,,4155,7.033088644345600,0
3474,,,281,14,,745,1.1921667377154000,0
3475,,,292,17,,6895,11.286515752474500,0
3476,,,269,16,,5858,9.80521320104599,0
3477,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.3102844794591270,Beam
3478,,,184,9,,1892,3.2758049329121900,0
3479,,,255,13,,2915,6.336176005999250,0
3480,,,264,15,,5010,8.631240340073900,0
3481,,,735,24,,9506,15.173105120658900,0
3482,,,326,14,,3597,6.597761702537540,0
3483,,,479,25,,1840,3.247421928246820,0
3484,,,308,12,,1117,2.166865356763200,0
3485,,,211,11,,807,1.0293379426002500,0
3486,"class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String str = br.readLine();
            StringTokenizer token = new StringTokenizer(str, "" "");
        
            int[] m = new int[N];
            int max = 0;
            for (int j = 0; j < N; j++) {
                m[j] = Integer.parseInt(token.nextToken());
                if (j > 0 && m[j] - m[j - 1] < 0) {
                    max = Math.max(max, m[j - 1] - m[j]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int j = 1; j < N; j++) {
                if (m[j] - m[j - 1] < 0) {
                    ans_x += m[j - 1] - m[j];
                }
                if (m[j - 1] <= max) {
                    ans_y += m[j - 1];
                } else {
                    ans_y += max;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r\n"");
        }
        bw.close();
        br.close();
    }
}","class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String char = br.readLine();
            StringTokenizer r = new StringTokenizer(char, "" "");
        
            int[] w = new int[N];
            int count = 0;
            for (int c = 0; c < N; c++) {
                w[c] = Integer.parseInt(r.nextToken());
                if (c > 0 && w[c] - w[c - 1] < 0) {
                    count = Math.count(count, w[c - 1] - w[c]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int c = 1; c < N; c++) {
                if (w[c] - w[c - 1] < 0) {
                    ans_x += w[c - 1] - w[c];
                }
                if (w[c - 1] <= count) {
                    ans_y += w[c - 1];
                } else {
                    ans_y += count;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r
"");
        }
        bw.close();
        br.close();
    }
}",344,15,"max:count,m:w,token:r,j:c,str:char,",1973,1.8494814117749500,Beam
3487,,,321,13,,4093,4.0037625153859500,0
3488,,,263,13,,683,0.6679671367009480,0
3489,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.5398943185806270,Beam
3490,,,291,12,,3473,3.4885196566581700,0
3491,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,0.5964354475339250,Beam
3492,,,448,16,,3994,4.623955035209660,0
3493,,,321,18,,4144,4.154610768953960,0
3494,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,1.1701668739318800,Beam
3495,,,132,9,,1099,0.893794572353363,0
3496,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String file = in.readLine();
        int n = Integer.parseInt(file);
        for(int i=0; i<n; i++){
            file = in.readLine();
            String[] arr = file.split("" "");
            int b = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int ow = Integer.parseInt(arr[2]);
            long max = 0;
            
            for(int id = 0; id < b-1; id++){
                max = max + (p/ow);
            }
            if(p-ow == 0){
                max = max + ow;
            }else if(p-ow < ow){
                max = ow + 1;
            }else{
                max = (long) (max + Math.ceil((double)p/(double)ow));
                max = max + ow - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+max+""
"");
            writer.write(""Case #""+(i+1)+"": ""+max+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:ow,c:p,r:b,x:id,min:max,line:file,",2481,2.4651015798250800,Beam
3497,,,149,10,,2109,1.7422151843706800,0
3498,,,468,20,,7699,8.207900834083560,0
3499,,,655,16,,2361,2.9148655335108400,0
3500,,,468,20,,3559,3.823119592666630,0
3501,,,326,14,,5209,5.184592401981350,0
3502,,,417,18,,4310,4.6941458543141700,0
3503,,,306,16,,5302,5.342035261789960,0
3504,,,311,17,,6664,6.331814114252730,0
3505,,,292,17,,6877,6.517244203885400,0
3506,,,298,16,,3566,3.4940648078918500,0
3507,,,211,11,,2450,2.1242358764012700,0
3508,"class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter fr = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int N = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int j = 0; j < (2 * N - 1) * N; ++j){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            fr.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                fr.write(String.format("" %d"", pq.poll()));
            }
            
            fr.write(String.format(""\n""));
            // System.out.print(String.format(""Case #%d: %s\n"", i, dp[l-1]));
        }
        
        fr.close();
        s.close();
    }
}","class Main {
    public static void main(String[] args) throws IOException{
        // Scanner s = new Scanner(System.in);
        InputStream is = new FileInputStream("".\\input_and_output\\1A2016\\B-large-1A2016.in"");
        FileWriter r = new FileWriter("".\\input_and_output\\1A2016\\B-large-1A2016.out"");
        Scanner s = new Scanner(is);
        
        int n = s.nextInt();
        for (int i = 1; i <= n; ++i){            
            int W = s.nextInt();

            Map<Integer, Integer> map = new HashMap<>();
            
            for (int dj = 0; dj < (2 * W - 1) * W; ++dj){
                int num = s.nextInt();
                if (!map.containsKey(num)){
                    map.put(num, 1);
                } else {
                    map.put(num, map.get(num) + 1);
                }
            }
            
            PriorityQueue<Integer> pq = new PriorityQueue<>();
            
            for (int key : map.keySet()){
                if (map.get(key) % 2 != 0) pq.add(key);
            }
            
            r.write(String.format(""Case #%d:"", i));
            while (!pq.isEmpty()){
                r.write(String.format("" %d"", pq.poll()));
            }
            
            r.write(String.format(""
""));
            // System.out.print(String.format(""Case #%d: %s
"", i, dp[l-1]));
        }
        
        r.close();
        s.close();
    }
}",280,13,"N:W,j:dj,fr:r,",993,0.9797124981880190,Beam
3509,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int c = 0;c<w.length;c++)
                    if(w[c]<=a[0]&&w[c]>0&&c!=a[1]){
                        w[c]--;
                        gg=gg+(char)(c+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(w[a[1]]-2!=0){
                w[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    w[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               w[a[2]]--;
                w[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,k:c,",709,0.781989598274231,Beam
3510,,,240,13,,2426,2.1847235560417200,0
3511,,,417,18,,3845,4.254342325528460,0
3512,,,553,21,,1373,1.486172652244570,0
3513,,,262,14,,3504,3.638983138402300,0
3514,,,358,16,,5302,5.7725278774897300,0
3515,,,250,11,,559,0.553477676709493,0
3516,,,171,10,,2419,1.9943945368131000,0
3517,,,272,16,,4151,3.39954837958018,0
3518,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, diff);
                sum += diff;
            }

            int rev = 0;
            for (int i = 1; i < n; i++) {
                rev += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"ret:rev,max:w,",462,0.45466204086939500,Beam
3519,,,324,13,,4434,4.303947985172270,0
3520,,,334,15,,807,0.907941198348999,0
3521,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,0.6435822129249570,Beam
3522,,,527,25,,16369,18.183898643652600,0
3523,,,408,17,,2623,2.9241464813550300,0
3524,,,255,13,,2915,3.535692624251050,0
3525,"class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int N = Integer.parseInt(br.readLine());
            int[][] vrst = new int[2*N-1][N];
            for(int j=0;j<2*N-1;j++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<N;k++) {
                    //System.out.println(""""+j+k);
                    vrst[j][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*N-1;i1++){
                for(int j = 0;j<N;j++){
                    bool[vrst[i1][j]]=!bool[vrst[i1][j]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""\n"");
            pw.write(""Case #""+(i+1)+"": ""+a+""\n"");

        }
        pw.close();
    }
}","class B {



    public static void main(String[] args) throws NumberFormatException, IOException {
        String name = ""B"";

        // TODO READER
        boolean isSmall = false;
        BufferedReader br;

        //br= new BufferedReader(new FileReader(""bum.in""));
        if(isSmall) br = new BufferedReader(new FileReader(name+""-small-attempt0 (2).in""));
        else br = new BufferedReader(new FileReader(name+""-large (1).in""));

        PrintWriter pw;
        if(isSmall) pw = new PrintWriter(name+""-small.txt"", ""UTF-8"");
        else pw = new PrintWriter(name+""-large.txt"", ""UTF-8"");

        int T=Integer.parseInt(br.readLine());
        for(int i = 0; i < T; i++){
            int W = Integer.parseInt(br.readLine());
            int[][] cvste = new int[2*W-1][W];
            for(int dj=0;dj<2*W-1;dj++){
                String[] tab =br.readLine().split("" "");

                for(int k=0;k<W;k++) {
                    //System.out.println(""""+j+k);
                    cvste[dj][k]=Integer.parseInt(tab[k]);
                }
            }
            boolean[] bool = new boolean[2501];
            for(int i1 = 0;i1<2*W-1;i1++){
                for(int dj = 0;dj<W;dj++){
                    bool[cvste[i1][dj]]=!bool[cvste[i1][dj]];
                }
            
            }
            StringBuilder st = new StringBuilder();
            for(int i2 = 0; i2<bool.length;i2++){
                if(bool[i2]) st.append(i2 + "" "");
            }
            String a = st.toString();


            System.out.print(""Case #""+(i+1)+"": ""+a+""
"");
            pw.write(""Case #""+(i+1)+"": ""+a+""
"");

        }
        pw.close();
    }
}",399,18,"N:W,j:dj,vrst:cvste,",1334,1.441094446182250,Beam
3526,,,393,19,,7054,6.661841181914010,0
3527,,,426,18,,3560,3.9864445368448900,0
3528,,,292,15,,2866,2.8937170426050800,0
3529,,,257,11,,1055,1.0641290545463600,0
3530,,,211,11,,3008,2.639877168337500,0
3531,,,321,18,,6952,6.439092747370400,0
3532,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int i=0;i<1000001;i++)
      grade[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    grade[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    int p = current;
    int result=0;
    while(p>0){
      result=10*result+(p%10);
      p/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UNSEEN){
        int nd=d+1;
        grade[next]=nd;
        q.add(next);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int cases=sen.nextInt();

    for(int t=0;t<cases;t++){
      int p=sen.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+grade[p]);
    }
  }

  private static int[] grade;
  private static final int UNSEEN=-1;
}",302,15,"scanner:sen,distance:grade,n:p,",714,0.6846758723258970,Beam
3533,,,200,10,,714,0.6585558970769250,0
3534,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.17732222080230700,Beam
3535,,,200,10,,497,0.45548515717188500,0
3536,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.3655182917912800,Beam
3537,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int cell = sc.nextInt();
      int ow = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<cell; k+=ow) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+ow-1);
    }
    System.out.println(res);
  }
}",187,12,"w:ow,col:cell,",621,0.5531934022903440,Beam
3538,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,1.1725470145543400,Beam
3539,,,735,24,,11248,11.062500941753400,0
3540,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int W = in.nextInt();
            int[][] G = new int[R][W];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < W; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < W; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < W) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}",513,26,"C:W,",49,0.044723514715830500,Beam
3541,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.5259369293848670,Beam
3542,,,366,17,,900,0.8620370149612430,0
3543,,,255,13,,1458,1.8773945530255600,0
3544,,,468,20,,2631,2.858267033100130,0
3545,,,406,19,,7999,8.453860334555310,0
3546,,,345,16,,2732,2.6364337682724000,0
3547,,,479,25,,8270,8.575826088587440,0
3548,,,324,13,,4341,4.263970363140110,0
3549,,,321,18,,6952,6.500430715084080,0
3550,,,308,12,,745,0.8047303040822350,0
3551,,,169,10,,2109,1.8846113483111100,0
3552,,,418,13,,4434,5.821014614899950,0
3553,,,295,15,,672,0.6993677775065110,0
3554,,,420,19,,7084,6.9799935698509200,0
3555,,,282,13,,1299,1.1897314389546700,0
3556,,,311,17,,2189,2.069356099764510,0
3557,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int mix = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, mix);
                sum += mix;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"diff:mix,max:w,",462,0.46116830507914200,Beam
3558,,,371,12,,900,1.004205377896630,0
3559,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int c = 0;c<w.length;c++)
                    if(w[c]<=a[0]&&w[c]>0&&c!=a[1]){
                        w[c]--;
                        gg=gg+(char)(c+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(w[a[1]]-2!=0){
                w[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    w[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               w[a[2]]--;
                w[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,k:c,",709,0.7813723723093670,Beam
3560,"class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String s;
        try {
            s = in.readLine();
            int case_num = Integer.parseInt(s);
            for (int kk = 0; kk < case_num; kk++) {
                s = in.readLine();
                int num = Integer.parseInt(s);
                
                int[] count = new int [2500];
//                System.out.println(count[2500]);
                for (int row = 0; row < (2*num-1); row++) {
                    s = in.readLine();
                    String[] height = s.split("" "");
                    
                    for (int i = 0; i < height.length; i++) {
//                        System.out.print(height[i]);
                        count[Integer.parseInt(height[i])-1]++;
                    }
//                    System.out.println();
                }
                
                String ans = """";
                
                for (int i = 0; i < count.length; i++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (count[i]%2!=0) {
                        ans = ans + "" "" + (i+1);
                    }
                }
                
                System.out.println(""Case #""+(kk+1)+"":""+ans);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}","class Problem_B {

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        BufferedReader r = new BufferedReader(new InputStreamReader(System.r));
        String c;
        try {
            c = r.readLine();
            int case_num = Integer.parseInt(c);
            for (int ctx = 0; ctx < case_num; ctx++) {
                c = r.readLine();
                int width = Integer.parseInt(c);
                
                int[] sum = new int [2500];
//                System.out.println(count[2500]);
                for (int cur = 0; cur < (2*width-1); cur++) {
                    c = r.readLine();
                    String[] width = c.split("" "");
                    
                    for (int c = 0; c < width.length; c++) {
//                        System.out.print(height[i]);
                        sum[Integer.parseInt(width[c])-1]++;
                    }
//                    System.out.println();
                }
                
                String anc = """";
                
                for (int c = 0; c < sum.length; c++) {
//                    System.out.println((i+1)+"" ""+count[i]);
                    if (sum[c]%2!=0) {
                        anc = anc + "" "" + (c+1);
                    }
                }
                
                System.out.println(""Case #""+(ctx+1)+"":""+anc);
            }
            
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}",256,13,"num:width,count:sum,row:cur,i:c,height:width,kk:ctx,in:r,s:c,ans:anc,",2625,2.8186098178227700,Beam
3561,,,317,12,,3416,3.5288037220637000,0
3562,,,423,7,,859,1.0081761678059900,0
3563,,,302,15,,2636,2.4423640886942500,0
3564,"class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanner = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int T = scanner.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = scanner.nextInt();
            int[] m = new int[N];
            for (int i = 0; i < N; i++) {
                m[i] = scanner.nextInt();
            }
            int s1 = 0;
            int maxDiff = 0;
            for (int i = 1; i < N; i++) {
                if (m[i-1] > m[i]) {
                    int diff = m[i-1] - m[i];
                    s1 += diff;
                    if (diff > maxDiff) {
                        maxDiff = diff;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < N-1; i++) {
                if (m[i] < maxDiff) {
                    s2 += m[i];
                } else {
                    s2 += maxDiff;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", t, s1, s2));
        }
        scanner.close();
        writer.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanner = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int T = scanner.nextInt();
        for (int t = 1; t <= T; t++) {
            int R = scanner.nextInt();
            int[] w = new int[R];
            for (int i = 0; i < R; i++) {
                w[i] = scanner.nextInt();
            }
            int s1 = 0;
            int maxDiff = 0;
            for (int i = 1; i < R; i++) {
                if (w[i-1] > w[i]) {
                    int diff = w[i-1] - w[i];
                    s1 += diff;
                    if (diff > maxDiff) {
                        maxDiff = diff;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < R-1; i++) {
                if (w[i] < maxDiff) {
                    s2 += w[i];
                } else {
                    s2 += maxDiff;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", t, s1, s2));
        }
        scanner.close();
        writer.close();
    }
}",267,13,"m:w,N:R,",525,0.4793677012125650,Beam
3565,,,222,16,,3691,3.3210230072339400,0
3566,,,513,26,,16278,16.38630879720050,0
3567,"class a1 {

    private static final String[] PL = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader input = null;
        BufferedWriter output = null;
        Date d1 = new Date();
        try {
            input = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            output = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String line1 = null;
            String line2 = null;
            int expectedCases = 0;
            int actualCase = -1;
            line1=input.readLine();
            expectedCases = Integer.parseInt(line1);
            for (actualCase = 1; actualCase<=expectedCases; actualCase++) {
                line1=input.readLine();
                line2=input.readLine();
                Scanner sc = new Scanner(line1);
                        int partynum = sc.nextInt();
                        Scanner sc1 = new Scanner(line2);
                        int[] parties1 = new int[partynum];
                        for (int i2 = 0; i2< partynum; i2++ ) {
                            parties1[i2] = sc1.nextInt();
                        }
                        int[] parties = parties1;
                        int result2 = 0;
                        for(int i1 : parties) {
                            result2 +=i1;
                        }
                        int totalcount = result2;
                        StringBuffer sb = new StringBuffer(2*partynum);
                        while (totalcount > 0) {
                            int[] result1 = new int[2];
                            int[] maxvalues = new int[2];
                            result1[0] = -1;
                            result1[1] = -1;
                            maxvalues[0] = -1;
                            maxvalues[1] = -1;
                            for (int i = 0; i<parties.length; i++){
                                if (parties[i]> maxvalues[0]) {
                                    result1[1] = result1[0];
                                    maxvalues[1] = maxvalues[0];
                                    result1[0] = i;
                                    maxvalues[0] = parties[i];
                                } else {
                                    if (parties[i] > maxvalues[1]) {
                                        result1[1] =i;
                                        maxvalues[1] = parties[i];
                                    }
                                }
                            }
                            int[] x = result1;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((totalcount ==3) || ((x[1] == -1) && (parties[x[0]] == 1)) ) {
                                sb.append(PL[x[0]]);
                                parties[x[0]]--;
                                totalcount --;
                            } else {
                                if ((x[1] == -1) || (parties[x[0]] - parties[x[1]] > 1)) {
                                    sb.append(PL[x[0]]);                    
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]-=2;
                                    totalcount-=2;
                                } else {
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]--;
                                    sb.append(PL[x[1]]);
                                    parties[x[1]]--;
                                    totalcount-=2;
                                }
                            }
                            sb.append("" "");
                        }
                String result = sb.toString().trim();
                output.write(""Case #"" + actualCase +"": "" + result + ""\n"");                
                System.out.println(""Case #"" + actualCase +"": "" + result );                
            }
            input.close();
            output.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}","class a1 {

    private static final String[] PP = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader feed = null;
        BufferedWriter out = null;
        Date d1 = new Date();
        try {
            feed = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            out = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String lineOne = null;
            String rowB = null;
            int expectedCases = 0;
            int actuallyChild = -1;
            lineOne=feed.readLine();
            expectedCases = Integer.parseInt(lineOne);
            for (actuallyChild = 1; actuallyChild<=expectedCases; actuallyChild++) {
                lineOne=feed.readLine();
                rowB=feed.readLine();
                Scanner soc = new Scanner(lineOne);
                        int size = soc.nextInt();
                        Scanner sc1 = new Scanner(rowB);
                        int[] partials1 = new int[size];
                        for (int itwo = 0; itwo< size; itwo++ ) {
                            partials1[itwo] = sc1.nextInt();
                        }
                        int[] pages = partials1;
                        int resultCount = 0;
                        for(int i1 : pages) {
                            resultCount +=i1;
                        }
                        int foundcount = resultCount;
                        StringBuffer nb = new StringBuffer(2*size);
                        while (foundcount > 0) {
                            int[] Result4 = new int[2];
                            int[] allvalues = new int[2];
                            Result4[0] = -1;
                            Result4[1] = -1;
                            allvalues[0] = -1;
                            allvalues[1] = -1;
                            for (int i = 0; i<pages.length; i++){
                                if (pages[i]> allvalues[0]) {
                                    Result4[1] = Result4[0];
                                    allvalues[1] = allvalues[0];
                                    Result4[0] = i;
                                    allvalues[0] = pages[i];
                                } else {
                                    if (pages[i] > allvalues[1]) {
                                        Result4[1] =i;
                                        allvalues[1] = pages[i];
                                    }
                                }
                            }
                            int[] x = Result4;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((foundcount ==3) || ((x[1] == -1) && (pages[x[0]] == 1)) ) {
                                nb.append(PP[x[0]]);
                                pages[x[0]]--;
                                foundcount --;
                            } else {
                                if ((x[1] == -1) || (pages[x[0]] - pages[x[1]] > 1)) {
                                    nb.append(PP[x[0]]);                    
                                    nb.append(PP[x[0]]);
                                    pages[x[0]]-=2;
                                    foundcount-=2;
                                } else {
                                    nb.append(PP[x[0]]);
                                    pages[x[0]]--;
                                    nb.append(PP[x[1]]);
                                    pages[x[1]]--;
                                    foundcount-=2;
                                }
                            }
                            nb.append("" "");
                        }
                String result = nb.toString().trim();
                out.write(""Case #"" + actuallyChild +"": "" + result + ""
"");                
                System.out.println(""Case #"" + actuallyChild +"": "" + result );                
            }
            feed.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}",735,24,"parties1:partials1,parties:pages,partynum:size,result2:resultCount,i2:itwo,line2:rowB,actualCase:actuallyChild,PL:PP,maxvalues:allvalues,result1:Result4,totalcount:foundcount,sb:nb,sc:soc,input:feed,line1:lineOne,output:out,",10626,10.724258796374000,Beam
3568,,,406,19,,1520,1.5944136738777200,0
3569,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner laneChan = null;
        int width;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        width = s.nextInt();
        s.nextLine();
        for (int c = 0; c < width; c++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] lakeValues = new int[currentSize];
            line = s.nextLine();
            laneChan = new Scanner(line);
            int j = 0;
            while (laneChan.hasNextInt()) {
                lakeValues[j] = laneChan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastapestSize = 0;
            for (int w = 1; w < currentSize; w++) {
                if (lakeValues[w] < lakeValues[w - 1]) {
                    firstMethod += lakeValues[w - 1] - lakeValues[w];
                    fastapestSize = Math.max(fastapestSize, lakeValues[w - 1] - lakeValues[w]);
                }
            }
            int secondMethod = 0;
            for (int w = 0; w < currentSize - 1; w++) {
                if (lakeValues[w] > fastapestSize) {
                    secondMethod += fastapestSize;
                } else {
                    secondMethod += lakeValues[w];
                }
            }
            printer.print(""Case #"" + (c + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}",328,16,"fastestRate:fastapestSize,size:width,i:c,m:w,plateValues:lakeValues,lineScan:laneChan,",3132,3.2184556206067400,Beam
3570,,,349,19,,5340,5.191109788417820,0
3571,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.1981820027033490,Beam
3572,,,200,10,,2326,2.1175872723261500,0
3573,,,262,14,,1954,1.948646354675290,0
3574,,,479,25,,8222,8.437156776587170,0
3575,,,292,16,,4155,4.102583408355710,0
3576,,,256,13,,608,0.6345656792322800,0
3577,,,292,15,,4097,4.214524392286940,0
3578,,,295,15,,3037,3.1224449912707000,0
3579,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.3650270700454710,Beam
3580,,,345,16,,861,0.8191407124201460,0
3581,"class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int N = in.nextInt();
            int[] P = new int[N];
            int total = 0;
            for (int n = 0; n < N; n++) {
                P[n] = in.nextInt();
                total += P[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int i = 0; i < P.length; i++) {
                    int v = P[i];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = i;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = i;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = P[iMax1];
                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        P[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        P[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}","class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int R = in.nextInt();
            int[] W = new int[R];
            int total = 0;
            for (int n = 0; n < R; n++) {
                W[n] = in.nextInt();
                total += W[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int iMin41 = -1;
                int iMax21 = -1;
                
                for (int c = 0; c < W.length; c++) {
                    int v = W[c];
                    if (v > vMax) {
                        iMin41 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = c;
                    } else if (v > iMin41) {
                        iMin41 = v;
                        iMax21 = c;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = W[iMax1];
                int vMax2 = iMax2 > -1 ? W[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    W[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        W[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    W[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        W[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}",527,25,"P:W,N:R,i:c,vMax21:iMin41,",3411,3.7649469494819600,Beam
3582,,,406,17,,5322,6.711006987094880,0
3583,,,358,16,,838,0.8691062132517500,0
3584,,,187,13,,1987,1.6714778065681500,0
3585,,,417,19,,6901,7.013988546530410,0
3586,,,262,14,,3504,3.6868305007616700,0
3587,,,291,12,,3411,3.4412452538808200,0
3588,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.24041325251261400,Beam
3589,,,443,17,,1963,2.161280326048530,0
3590,,,262,14,,3442,3.61786789894104,0
3591,,,479,25,,7936,8.131808996200560,0
3592,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        ru    = scanIn.nextInt();
            int        v    = scanIn.nextInt();
            int        wa    = scanIn.nextInt();
            int    total    = ru*v;
            int    ret1        = 0;
            
            //    scan
            ret1    = ru*(v/wa);
            
            if(v % wa == 0) {
                ret1    += wa-1;
            } else if( wa == 1) {
            } else {
                ret1    += wa;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:wa,c:v,r:ru,",807,0.6677710692087810,Beam
3593,,,258,14,,5147,5.000599924723310,0
3594,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.19796340068181400,Beam
3595,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] trial = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < trial.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(trial[i1]));
                if(i1 == trial.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}",325,16,"test:trial,",218,0.2360206961631780,Beam
3596,,,345,16,,5989,5.68045863310496,0
3597,,,443,17,,5241,5.430798359711970,0
3598,,,317,14,,4837,4.686474696795150,0
3599,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,2.5576422572135900,Beam
3600,,,420,19,,7084,6.984058678150180,0
3601,,,887,27,,6688,8.754533982276920,0
3602,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.24153528610865300,Beam
3603,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int trials = scan.nextInt();

        for (int i = 0; i < trials; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int u = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (u / time) + (u - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"w:time,ans:ants,c:u,cases:trials,",1086,1.1428244868914300,Beam
3604,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.34502907594045,Beam
3605,,,618,26,,10742,13.511197328567500,0
3606,,,295,15,,3429,4.457171213626860,0
3607,"class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String str = br.readLine();
            StringTokenizer token = new StringTokenizer(str, "" "");
        
            int[] m = new int[N];
            int max = 0;
            for (int j = 0; j < N; j++) {
                m[j] = Integer.parseInt(token.nextToken());
                if (j > 0 && m[j] - m[j - 1] < 0) {
                    max = Math.max(max, m[j - 1] - m[j]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int j = 1; j < N; j++) {
                if (m[j] - m[j - 1] < 0) {
                    ans_x += m[j - 1] - m[j];
                }
                if (m[j - 1] <= max) {
                    ans_y += m[j - 1];
                } else {
                    ans_y += max;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r\n"");
        }
        bw.close();
        br.close();
    }
}","class MushroomMonster {
    public static void main(String[] args) throws Exception {
        String fileName = args[0];
        MushroomMonster obj = new MushroomMonster();
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        BufferedWriter bw = new BufferedWriter(
                new FileWriter(fileName + "".out""));
        
        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            Integer N = Integer.parseInt(br.readLine());
            String str = br.readLine();
            StringTokenizer r = new StringTokenizer(str, "" "");
        
            int[] w = new int[N];
            int count = 0;
            for (int c = 0; c < N; c++) {
                w[c] = Integer.parseInt(r.nextToken());
                if (c > 0 && w[c] - w[c - 1] < 0) {
                    count = Math.count(count, w[c - 1] - w[c]);
                }
            }
        
            int ans_x = 0;
            int ans_y = 0;
            for (int c = 1; c < N; c++) {
                if (w[c] - w[c - 1] < 0) {
                    ans_x += w[c - 1] - w[c];
                }
                if (w[c - 1] <= count) {
                    ans_y += w[c - 1];
                } else {
                    ans_y += count;
                }
            }
        
            bw.write(""Case #"" + (i + 1) + "": "" + ans_x + "" "" + ans_y);
            bw.write(""\r
"");
        }
        bw.close();
        br.close();
    }
}",344,15,"max:count,m:w,token:r,j:c,",1911,2.2445187608401000,Beam
3608,,,345,16,,6039,7.110022095839180,0
3609,,,290,12,,3386,4.259304169813790,0
3610,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.4551579236984250,Beam
3611,,,291,12,,621,0.7733110706011460,0
3612,"class CRoundA {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int size = in.nextInt();
            
            int costPerRow = C / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += costPerRow * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (C % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d\n"", i + 1, ans);
        }

    }

}","class CRoundA {

    public static void main(String[] args) {
        Scanner inf = new Scanner(System.inf);
        int T = inf.nextInt();
        for (int i = 0; i < T; i++) {
            int R = inf.nextInt();
            int CA = inf.nextInt();
            int size = inf.nextInt();
            
            int CostPerCol = CA / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += CostPerCol * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (CA % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d
"", i + 1, ans);
        }

    }

}",142,11,"costPerRow:CostPerCol,C:CA,in:inf,",800,0.8916085402170820,Beam
3613,,,371,12,,900,1.2404860258102400,0
3614,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > w)
                    w = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < w)
                    ans2 += datas[j];
                else
                    ans2 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,",249,0.29977482557296800,Beam
3615,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream fits = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String div = r.readLine();
            int count = Integer.parseInt(div);
            for(int ip = 0 ; ip < count ; ip++) {
                div = r.readLine();
                int w = Integer.parseInt(div);
                div = r.readLine();
                StringTokenizer c = new StringTokenizer(div,"" "");
                int [] art = new int[w];
                int seed = 0;
                while(c.hasMoreTokens()) {
                    art[seed++] = Integer.parseInt(c.nextToken());
                }
                int ansYY = 0;
                int ANST = 0;
                int dec = 0;
                for(int k = 0 ; k < w-1 ; k++) {
                    dec = Math.max(dec,art[k]-art[k+1]);
                    if(art[k+1]<art[k]) {
                        ansYY += art[k]-art[k+1];
                    }
                }
                for(int k = 0 ; k < w-1 ; k++) {
                    int x = Math.min(art[k],dec);
                    ANST += x;
                }
                fits.write(""Case #"".getBytes());
                fits.write(new Integer(ip+1).toString().getBytes());
                fits.write("": "".getBytes());
                fits.write(new Integer(ansYY).toString().getBytes());
                fits.write("" "".getBytes());
                fits.write(new Integer(ANST).toString().getBytes());
                fits.write(eolb);
            }
            fits.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"iter:seed,dip:dec,ansY:ansYY,ar:art,st:c,ansZ:ANST,str:div,j:k,t:count,bos:fits,br:r,n:w,i:ip,",6666,8.111773391564690,Beam
3616,,,281,14,,5023,5.983021211624150,0
3617,,,291,13,,3473,4.061124773820240,0
3618,,,281,14,,5023,6.082951243718470,0
3619,,,500,19,,8799,11.280673336982700,0
3620,,,500,19,,8811,11.702662301063500,0
3621,,,330,16,,5767,8.039194214344030,0
3622,,,273,11,,798,1.005360762278240,0
3623,,,399,18,,6263,8.207697029908500,0
3624,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,0.7705000917116800,Beam
3625,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.18890562852223700,Beam
3626,,,790,14,,4837,7.81494323015213,0
3627,,,317,12,,3709,4.893376870950060,0
3628,,,887,27,,6546,10.680939956506100,0
3629,,,426,18,,3528,4.82455909649531,0
3630,,,386,18,,939,1.133060057957970,0
3631,,,344,15,,3023,3.5507912158966100,0
3632,"class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int w = reader.nextInt();
            int answer = c / w;
            answer *= r;
            answer += w - 1;
            if(c % w > 0){
                answer++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + answer);
        }
        reader.close();
    }

}","class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int wed = reader.nextInt();
            int grade = c / wed;
            grade *= r;
            grade += wed - 1;
            if(c % wed > 0){
                grade++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + grade);
        }
        reader.close();
    }

}",134,9,"w:wed,answer:grade,",404,0.42973166704177900,Beam
3633,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.28469291528066,Beam
3634,,,366,17,,900,1.0536877632141100,0
3635,,,265,12,,617,0.7105334679285690,0
3636,,,468,14,,1024,1.9115431189537000,0
3637,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,m,w,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            m =sc.nextInt();
            w = sc.nextInt();
            irez = m/w;
            irez *=r;
            irez +=w-1;
            if(m%w > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,c:m,",280,0.2877374370892840,Beam
3638,"class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] test = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < test.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(test[i1]));
                if(i1 == test.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}","class A {

    public static void main(String[] args) throws NumberFormatException, IOException {
        
        // BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        // int numCases = Integer.parseInt(r.readLine());
        
        Scanner s = new Scanner(System.in);
        int numCases = s.nextInt();
        
        int max = 1000003;
        long[] dp = new long[max];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i < max; ++i)
        {
            long first = dp[i-1] + 1;
            char[] trial = String.valueOf((long) i).toCharArray();
            long res = 0;
            long mult = 1;
            for(int i1 = 0; i1 < trial.length; ++i1)
            {
                int tmp = Integer.valueOf(String.valueOf(trial[i1]));
                if(i1 == trial.length-1 && tmp == 0)
                {
                    // es darf kein digit verloren gehen...
                    res += 10000000000L;
                }
                res += tmp * mult;
                mult *= 10;
            }
            long index = res;
            long second = 0;
            if(index >= 1 && index < i)
            {
                second = dp[(int)index]+1;
            }
            if(second > 1 && second < first)
            {
                dp[i] = second;
            }else
            {
                dp[i] = first;
            }
        }
        
        
        for(int numC = 0; numC < numCases; ++numC)
        {
            
            long n = s.nextLong();
            
            
            System.out.print(""Case #"");
            System.out.print(numC+1);
            System.out.print("": "");
            System.out.println(dp[(int)n]);
        }

    }
}",325,16,"test:trial,",218,0.2972357233365380,Beam
3639,,,169,10,,2202,2.3190732757250500,0
3640,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String div = r.readLine();
            int count = Integer.parseInt(div);
            for(int c = 0 ; c < count ; c++) {
                div = r.readLine();
                int w = Integer.parseInt(div);
                div = r.readLine();
                StringTokenizer c = new StringTokenizer(div,"" "");
                int [] art = new int[w];
                int seed = 0;
                while(c.hasMoreTokens()) {
                    art[seed++] = Integer.parseInt(c.nextToken());
                }
                int annYY = 0;
                int ANST = 0;
                int dec = 0;
                for(int k = 0 ; k < w-1 ; k++) {
                    dec = Math.max(dec,art[k]-art[k+1]);
                    if(art[k+1]<art[k]) {
                        annYY += art[k]-art[k+1];
                    }
                }
                for(int k = 0 ; k < w-1 ; k++) {
                    int x = Math.min(art[k],dec);
                    ANST += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(c+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(annYY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ANST).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"iter:seed,dip:dec,ansY:annYY,ar:art,st:c,str:div,ansZ:ANST,j:k,t:count,br:r,n:w,i:c,",6449,7.888340353965760,Beam
3641,,,379,17,,3042,3.6588433623313900,0
3642,,,544,17,,5423,7.8496944308280900,0
3643,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.4551355719566350,Beam
3644,,,265,12,,617,0.7201805949211120,0
3645,,,324,13,,4062,4.881591443220770,0
3646,,,269,13,,4394,5.896569617589320,0
3647,,,240,13,,2426,2.689014522234600,0
3648,,,317,14,,5209,6.0851406216621400,0
3649,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,0.7455787618954980,Beam
3650,,,321,18,,3009,3.7314799308776900,0
3651,,,290,12,,3509,4.189894616603850,0
3652,,,132,9,,1704,1.6238867004712400,0
3653,,,420,19,,7084,8.645781517028810,0
3654,,,479,25,,2689,3.5666068116823800,0
3655,,,280,13,,3163,3.931882548332210,0
3656,,,527,25,,16276,21.300120572249100,0
3657,,,325,16,,6015,7.7962437192599000,0
3658,,,282,13,,681,0.7804295857747400,0
3659,,,224,11,,838,1.0892280141512600,0
3660,,,517,26,,5414,7.464614446957910,0
3661,,,527,25,,16400,20.904190333684300,0
3662,,,282,13,,4422,4.935586853822070,0
3663,,,224,11,,2760,3.4912615140279100,0
3664,,,305,15,,799,1.0241970936457300,0
3665,,,553,21,,4743,6.285638896624250,0
3666,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.5377705812454220,Beam
3667,,,366,17,,6139,7.015743668874110,0
3668,,,298,16,,1210,1.4462681412696800,0
3669,,,345,16,,861,1.0112510959307400,0
3670,,,250,11,,2884,3.537977921962740,0
3671,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner innf=new Scanner(System.in);
    int t=innf.nextInt();
    for(int i=0;i<t;i++){
        int c=innf.nextInt();
        int[] art=new int[c];
        for(int j=0;j<c;j++){
            art[j]=innf.nextInt();
        }
        int mean1=0;
        int miss32=0;
        for(int key=0;key<c-1;key++){
            
            int y=(art[key]-art[key+1]>0)? art[key]-art[key+1]:0;
            mean1+=y;
        
        }
        int w=0;
        for(int r=0;r<c-1;r++){
            w=Math.max(w,art[r]-art[r+1]);
        }
        for(int c=0;c<c-1;c++){
            int x=(art[c]<=w)?art[c]:w;
            miss32+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+mean1+"" ""+miss32);
    }
}
}",272,16,"sum1:mean1,sum2:miss32,h:r,arr:art,k:key,inp:innf,d:c,v:w,n:c,",4797,4.864966702461240,Beam
3672,,,386,18,,939,1.1607854167620300,0
3673,,,355,19,,939,1.0592671235402400,0
3674,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lushes = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lushes[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int count = lushes[i4] - lushes[i4 + 1];
                            if (count > 0) {
                                first += count;
                            }
                        }
                        
                        int[] count = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            count[i3] = lushes[i3] - lushes[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, count[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lushes[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lushes = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lushes[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int count = lushes[i4] - lushes[i4 + 1];
                            if (count > 0) {
                                first += count;
                            }
                        }
                        
                        int[] count = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            count[i3] = lushes[i3] - lushes[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, count[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lushes[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] lushes = new int[n];
                    for (int i = 0; i < n; i++) {
                        lushes[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int count = lushes[i] - lushes[i + 1];
                        if (count > 0) {
                            first += count;
                        }
                    }
                    
                    int[] count = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        count[i] = lushes[i] - lushes[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, count[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, lushes[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] lushes = new int[n];
                for (int i = 0; i < n; i++) {
                    lushes[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int count = lushes[i] - lushes[i + 1];
                    if (count > 0) {
                        first += count;
                    }
                }
                
                int[] count = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    count[i] = lushes[i] - lushes[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, count[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, lushes[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:lushes,diff:count,",717,1.3105699062347400,Beam
3675,,,330,16,,5767,7.999578134218850,0
3676,,,262,14,,652,0.7958783467610680,0
3677,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter jpow = new PrintWriter(OUT);
        int caseSum = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < caseSum; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int init = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < init) {
                    total0 += init - current;
                    maxMin = Math.max(maxMin, init - current);
                }
                init = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            jpow.println(String.format(PATTERN, i + 1, sol));
        }
        jpow.flush();
        jpow.close();
    }
}",348,21,"pw:jpow,prev:init,testCount:caseSum,",1407,1.6594520608584100,Beam
3678,,,211,11,,807,0.8951148152351380,0
3679,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer r= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(r.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,st:r,",1768,2.0826865832010900,Beam
3680,,,262,14,,652,0.7944485783576970,0
3681,,,328,16,,3876,5.0093408266703300,0
3682,,,406,16,,6077,8.094530713558200,0
3683,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] Mutch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            Mutch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int erence = Mutch[iu22] - Mutch[iu22 + 1];
                            if (erence > 0) {
                                first += erence;
                            }
                        }
                        
                        int[] erence = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            erence[i3] = Mutch[i3] - Mutch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, erence[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, Mutch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] Mutch = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            Mutch[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int iu22 = 0; iu22 < n - 1; iu22++) {
                            int erence = Mutch[iu22] - Mutch[iu22 + 1];
                            if (erence > 0) {
                                first += erence;
                            }
                        }
                        
                        int[] erence = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            erence[i3] = Mutch[i3] - Mutch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, erence[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, Mutch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] Mutch = new int[n];
                    for (int i = 0; i < n; i++) {
                        Mutch[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int erence = Mutch[i] - Mutch[i + 1];
                        if (erence > 0) {
                            first += erence;
                        }
                    }
                    
                    int[] erence = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        erence[i] = Mutch[i] - Mutch[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, erence[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, Mutch[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] Mutch = new int[n];
                for (int i = 0; i < n; i++) {
                    Mutch[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int erence = Mutch[i] - Mutch[i + 1];
                    if (erence > 0) {
                        first += erence;
                    }
                }
                
                int[] erence = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    erence[i] = Mutch[i] - Mutch[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, erence[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, Mutch[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:Mutch,i4:iu22,diff:erence,",1044,1.897000829378760,Beam
3684,,,432,19,,8898,12.013736005624100,0
3685,,,379,17,,3441,4.16464407046636,0
3686,,,544,17,,5894,8.616665343443550,0
3687,,,311,17,,2127,2.5048579970995600,0
3688,,,292,17,,1338,1.6288249373436000,0
3689,,,208,12,,2323,2.6792333642641700,0
3690,,,321,13,,4093,5.193089524904890,0
3691,,,386,18,,7282,8.64875818490982,0
3692,,,256,13,,3383,4.435954769452410,0
3693,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.3477433959643050,Beam
3694,,,240,13,,4056,4.747750715414680,0
3695,,,328,16,,5302,6.6735564827919,0
3696,,,324,13,,4248,5.296294041474660,0
3697,,,325,16,,6077,7.823842493693030,0
3698,,,517,26,,1871,2.671394471327460,0
3699,,,348,14,,3548,4.5190759340922000,0
3700,,,184,9,,435,0.5127347111701970,0
3701,,,387,15,,5240,6.973385020097100,0
3702,,,300,13,,3642,4.026713538169860,0
3703,,,426,18,,3529,4.91622797648112,0
3704,,,405,15,,5240,7.095320538679760,0
3705,,,464,17,,5358,7.1067785302798000,0
3706,,,544,17,,5034,7.341980195045470,0
3707,,,605,21,,9532,11.052751056353300,0
3708,,,345,16,,1260,1.4977827270825700,0
3709,,,475,18,,7875,10.228072142601000,0
3710,"class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner in = new Scanner(fin);
        PrintWriter out = new PrintWriter(fout);

        int T = in.nextInt();
        int n;
        ArrayList<Integer> senators = new ArrayList<Integer>();
        int sum;
        String sol = """";

        for (int cT = 1; cT <= T; cT++) {
            senators.clear();
            sol = """";
            n = in.nextInt();
            for (int i = 0; i < n; i++)
                senators.add(in.nextInt());
            sum = 0;
            for (int i = 0; i < n; i++)
                sum += senators.get(i);

            while (sum-- > 2) {
                int max = 0, index = -1, index2 = -1;
                boolean match3 = false;
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > max) {
                        index = i;
                        max = senators.get(i);
                        index2 = -1;
                    } else if (senators.get(i) == max) {
                        if (index2 == -1)
                            index2 = i;
                        else
                            match3 = true;
                    }
                if (index2 == -1 || match3) {
                    senators.set(index, max - 1);
                    sol += "" "" + (char) (index + 'A');
                } else {
                    senators.set(index, max - 1);
                    senators.set(index2, max - 1);
                    sol += "" "" + (char) (index + 'A') + (char) (index2 + 'A');
                    sum--;
                }
                for (int i = 0; i < n; i++)
                    if (senators.get(i) > sum / 2)
                        System.out.println(""flawed"");
            }
            sol += "" "";
            for (int i = 0; i < n; i++)
                if (senators.get(i) > 0)
                    sol += (char) (i + 'A');
            out.println(""Case #"" + cT + "":"" + sol);
        }
        in.close();
        out.close();
    }

}","class MainClass {

    public static void main(String[] args) throws FileNotFoundException {

        File fin = new File(""input.in"");
        File fout = new File(""output.out"");

        Scanner lin = new Scanner(fin);
        PrintWriter line = new PrintWriter(fout);

        int W = lin.nextInt();
        int w;
        ArrayList<Integer> judges = new ArrayList<Integer>();
        int diff;
        String ell = """";

        for (int cR = 1; cR <= W; cR++) {
            judges.clear();
            ell = """";
            w = lin.nextInt();
            for (int chi = 0; chi < w; chi++)
                judges.add(lin.nextInt());
            diff = 0;
            for (int chi = 0; chi < w; chi++)
                diff += judges.get(chi);

            while (diff-- > 2) {
                int len = 0, initial = -1, slice1 = -1;
                boolean match3 = false;
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > len) {
                        initial = chi;
                        len = judges.get(chi);
                        slice1 = -1;
                    } else if (judges.get(chi) == len) {
                        if (slice1 == -1)
                            slice1 = chi;
                        else
                            match3 = true;
                    }
                if (slice1 == -1 || match3) {
                    judges.set(initial, len - 1);
                    ell += "" "" + (char) (initial + 'A');
                } else {
                    judges.set(initial, len - 1);
                    judges.set(slice1, len - 1);
                    ell += "" "" + (char) (initial + 'A') + (char) (slice1 + 'A');
                    diff--;
                }
                for (int chi = 0; chi < w; chi++)
                    if (judges.get(chi) > diff / 2)
                        System.line.println(""flawed"");
            }
            ell += "" "";
            for (int chi = 0; chi < w; chi++)
                if (judges.get(chi) > 0)
                    ell += (char) (chi + 'A');
            line.println(""Case #"" + cR + "":"" + ell);
        }
        lin.close();
        line.close();
    }

}",464,17,"senators:judges,sum:diff,index2:slice1,i:chi,n:w,index:initial,cT:cR,T:W,sol:ell,in:lin,max:len,out:line,",5085,6.776198752721150,Beam
3711,,,258,14,,4806,5.981555751959480,0
3712,,,291,12,,3535,4.424894054730730,0
3713,,,393,16,,5520,6.939104425907140,0
3714,,,344,15,,4733,5.443011661370600,0
3715,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,0.78109104235967,Beam
3716,,,224,11,,2884,3.6260369022687300,0
3717,,,255,13,,1458,2.3554145137469000,0
3718,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.2131657600402830,Beam
3719,,,265,12,,3011,3.3882182955741900,0
3720,,,269,16,,5847,6.509695343176520,0
3721,"class a1 {

    private static final String[] PL = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader input = null;
        BufferedWriter output = null;
        Date d1 = new Date();
        try {
            input = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            output = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String line1 = null;
            String line2 = null;
            int expectedCases = 0;
            int actualCase = -1;
            line1=input.readLine();
            expectedCases = Integer.parseInt(line1);
            for (actualCase = 1; actualCase<=expectedCases; actualCase++) {
                line1=input.readLine();
                line2=input.readLine();
                Scanner sc = new Scanner(line1);
                        int partynum = sc.nextInt();
                        Scanner sc1 = new Scanner(line2);
                        int[] parties1 = new int[partynum];
                        for (int i2 = 0; i2< partynum; i2++ ) {
                            parties1[i2] = sc1.nextInt();
                        }
                        int[] parties = parties1;
                        int result2 = 0;
                        for(int i1 : parties) {
                            result2 +=i1;
                        }
                        int totalcount = result2;
                        StringBuffer sb = new StringBuffer(2*partynum);
                        while (totalcount > 0) {
                            int[] result1 = new int[2];
                            int[] maxvalues = new int[2];
                            result1[0] = -1;
                            result1[1] = -1;
                            maxvalues[0] = -1;
                            maxvalues[1] = -1;
                            for (int i = 0; i<parties.length; i++){
                                if (parties[i]> maxvalues[0]) {
                                    result1[1] = result1[0];
                                    maxvalues[1] = maxvalues[0];
                                    result1[0] = i;
                                    maxvalues[0] = parties[i];
                                } else {
                                    if (parties[i] > maxvalues[1]) {
                                        result1[1] =i;
                                        maxvalues[1] = parties[i];
                                    }
                                }
                            }
                            int[] x = result1;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((totalcount ==3) || ((x[1] == -1) && (parties[x[0]] == 1)) ) {
                                sb.append(PL[x[0]]);
                                parties[x[0]]--;
                                totalcount --;
                            } else {
                                if ((x[1] == -1) || (parties[x[0]] - parties[x[1]] > 1)) {
                                    sb.append(PL[x[0]]);                    
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]-=2;
                                    totalcount-=2;
                                } else {
                                    sb.append(PL[x[0]]);
                                    parties[x[0]]--;
                                    sb.append(PL[x[1]]);
                                    parties[x[1]]--;
                                    totalcount-=2;
                                }
                            }
                            sb.append("" "");
                        }
                String result = sb.toString().trim();
                output.write(""Case #"" + actualCase +"": "" + result + ""\n"");                
                System.out.println(""Case #"" + actualCase +"": "" + result );                
            }
            input.close();
            output.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}","class a1 {

    private static final String[] PP = {""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z""};
    
    public static void main(String[] args) {
//        readAndSolve(""resource/gcj2016/c1/a1/sample.in"", ""resource/gcj2016/c1/a1/sample.out"");
//        readAndSolve(""resource/gcj2016/c1/a1/A-small-attempt0.in"", ""resource/gcj2016/c1/a1/A-small-attempt0.out"");
        BufferedReader feed = null;
        BufferedWriter w = null;
        Date d1 = new Date();
        try {
            feed = new BufferedReader(new FileReader(""resource/gcj2016/c1/a1/A-large.in""));
            w = new BufferedWriter(new FileWriter(""resource/gcj2016/c1/a1/A-large.out""));
            String line1 = null;
            String lineB = null;
            int expectedCases = 0;
            int actuallyChild = -1;
            line1=feed.readLine();
            expectedCases = Integer.parseInt(line1);
            for (actuallyChild = 1; actuallyChild<=expectedCases; actuallyChild++) {
                line1=feed.readLine();
                lineB=feed.readLine();
                Scanner sc = new Scanner(line1);
                        int size = sc.nextInt();
                        Scanner sc1 = new Scanner(lineB);
                        int[] parts = new int[size];
                        for (int iitwo = 0; iitwo< size; iitwo++ ) {
                            parts[iitwo] = sc1.nextInt();
                        }
                        int[] Partials = parts;
                        int ResultCount = 0;
                        for(int i4 : Partials) {
                            ResultCount +=i4;
                        }
                        int foundcount = ResultCount;
                        StringBuffer sb = new StringBuffer(2*size);
                        while (foundcount > 0) {
                            int[] page4 = new int[2];
                            int[] allvals = new int[2];
                            page4[0] = -1;
                            page4[1] = -1;
                            allvals[0] = -1;
                            allvals[1] = -1;
                            for (int i = 0; i<Partials.length; i++){
                                if (Partials[i]> allvals[0]) {
                                    page4[1] = page4[0];
                                    allvals[1] = allvals[0];
                                    page4[0] = i;
                                    allvals[0] = Partials[i];
                                } else {
                                    if (Partials[i] > allvals[1]) {
                                        page4[1] =i;
                                        allvals[1] = Partials[i];
                                    }
                                }
                            }
                            int[] x = page4;
                //            System.out.println(x[0] + "" "" +x[1]);
                            if ((foundcount ==3) || ((x[1] == -1) && (Partials[x[0]] == 1)) ) {
                                sb.append(PP[x[0]]);
                                Partials[x[0]]--;
                                foundcount --;
                            } else {
                                if ((x[1] == -1) || (Partials[x[0]] - Partials[x[1]] > 1)) {
                                    sb.append(PP[x[0]]);                    
                                    sb.append(PP[x[0]]);
                                    Partials[x[0]]-=2;
                                    foundcount-=2;
                                } else {
                                    sb.append(PP[x[0]]);
                                    Partials[x[0]]--;
                                    sb.append(PP[x[1]]);
                                    Partials[x[1]]--;
                                    foundcount-=2;
                                }
                            }
                            sb.append("" "");
                        }
                String result = sb.toString().trim();
                w.write(""Case #"" + actuallyChild +"": "" + result + ""
"");                
                System.out.println(""Case #"" + actuallyChild +"": "" + result );                
            }
            feed.close();
            w.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            
        }
    }
    
}",735,24,"parties1:parts,parties:Partials,partynum:size,result2:ResultCount,i2:iitwo,line2:lineB,maxvalues:allvals,PL:PP,result1:page4,actualCase:actuallyChild,totalcount:foundcount,i1:i4,input:feed,output:w,",9958,12.186205395062800,Beam
3722,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int W, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scan = new Scanner(input);
        
        int T = scan.nextInt();
        for (int i = 0; i < T; i++) {
            
            W = scan.nextInt();
            participant = new int[W];
            max = 0;
            
            for (int r = 0; r < W; r++) {

                participant[r] = scan.nextInt();
                max += participant[r];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (W == 2) {
                for (int r = 1; r < participant[0]; r++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (apple == -1 || participant[i1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = i1;
                        }
                        else if (cream == -1 || participant[i1] > participant[cream]) {
                            brence = cream;
                            cream = i1;
                        }
                        else if (brence == -1 || participant[i1] > participant[brence])
                            brence = i1;
                    int x = participant[apple] - 1;
                    int w = participant[brence];
                    
                    if ((x > w ? x : w) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scan.close();
    }

}",460,16,"sum:max,gold:apple,party:participant,silver:cream,bronze:brence,N:W,j:r,y:w,scanner:scan,",4341,6.075603441397350,Beam
3723,,,525,23,,13512,16.52688314517340,0
3724,,,240,13,,4422,5.069934491316480,0
3725,"static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int parties=Integer.parseInt(in.readLine());
            String[] Members=in.readLine().split("" "");
            int total=0;
            for(int j=0;j<parties;j++){
                total+=Integer.parseInt(Members[j]);
                    }
            while(total!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ans="""";
                for(int j=0;j<parties;j++){
                        if(first<Integer.parseInt(Members[j])){
                            second=first;
                            first=Integer.parseInt(Members[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Members[j])){
                                    second=Integer.parseInt(Members[j]);
                                    num2=j;
                                }
                            }
                    }
                ans=""""+(char)(65+num1);
                Members[num1]=Integer.toString(Integer.parseInt(Members[num1])-1);
                total-=1;
                String ans2="""";
                for(int j=0;j<parties;j++){
                    double p=total;
                    if(Double.parseDouble(Members[j])/p>0.5){
                        ans+=(char)(65+j);
                        Members[j]=Integer.toString(Integer.parseInt(Members[j])-1);
                        total-=1;
                        break;
                    }
                }
            System.out.print(ans+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}","static void main(String[] args) throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for(int i=0;i<T;i++){
            System.out.print(""Case #""+(i+1)+"": "");
            int PARTials=Integer.parseInt(in.readLine());
            String[] Players=in.readLine().split("" "");
            int no=0;
            for(int j=0;j<PARTials;j++){
                no+=Integer.parseInt(Players[j]);
                    }
            while(no!=0){
                int first=0;
                int second=-1;
                int num1=0;
                int num2=0;
                String ants="""";
                for(int j=0;j<PARTials;j++){
                        if(first<Integer.parseInt(Players[j])){
                            second=first;
                            first=Integer.parseInt(Players[j]);
                            num2=num1;
                            num1=j;
                            }
                        else
                            {
                                if(second<Integer.parseInt(Players[j])){
                                    second=Integer.parseInt(Players[j]);
                                    num2=j;
                                }
                            }
                    }
                ants=""""+(char)(65+num1);
                Players[num1]=Integer.toString(Integer.parseInt(Players[num1])-1);
                no-=1;
                String ans2="""";
                for(int j=0;j<PARTials;j++){
                    double p=no;
                    if(Double.parseDouble(Players[j])/p>0.5){
                        ants+=(char)(65+j);
                        Players[j]=Integer.toString(Integer.parseInt(Players[j])-1);
                        no-=1;
                        break;
                    }
                }
            System.out.print(ants+"" "");
        }
        System.out.println();
                
                
            
            
        }
    }
}",405,15,"parties:PARTials,Members:Players,total:no,ans:ants,",2140,2.813071123758950,Beam
3726,,,326,14,,5209,6.208092439174650,0
3727,,,305,15,,5228,6.385480650266010,0
3728,,,215,12,,3348,3.8941820820172600,0
3729,,,345,16,,861,1.0132082422574400,0
3730,,,393,19,,7057,8.399750979741410,0
3731,,,513,26,,16266,19.22577713727950,0
3732,"class CA {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = in.nextInt();
            ArrayList<Integer> senate = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                senate.add(i, 0);
            }
            int senateSize = 0;
            for (int i = 0; i < N; i++) {
                int temp = in.nextInt();
                senate.set(i, temp);
                senateSize += temp;
            }

            System.out.printf(""Case #%d: "", t);
            while (senateSize > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                if (max == second && senateSize != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senate.set(secondIndex, senate.get(secondIndex) - 1);
                    senateSize -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    senate.set(maxIndex, senate.get(maxIndex) - 1);
                    senateSize -= 1;
                }
            }
            if (senateSize == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(senate);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = senate.indexOf(max);
                second = ordered.get(1);
                secondIndex = senate.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                senate.set(maxIndex, senate.get(maxIndex) - 1);
                senate.set(secondIndex, senate.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}","class CA {
    public static void main(String[] args) {
        Scanner r = new Scanner(System.r);
        int T = r.nextInt();

        for (int t = 1; t <= T; t++) {
            int N = r.nextInt();
            ArrayList<Integer> slated = new ArrayList<>();
            for (int i = 0; i < N; i++) {
                slated.add(i, 0);
            }
            int equateOrg = 0;
            for (int i = 0; i < N; i++) {
                int w = r.nextInt();
                slated.set(i, w);
                equateOrg += w;
            }

            System.out.printf(""Case #%d: "", t);
            while (equateOrg > 2) {
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                if (max == second && equateOrg != 3) {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print(Character.toChars(65 + secondIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    slated.set(secondIndex, slated.get(secondIndex) - 1);
                    equateOrg -= 2;
                } else {
                    System.out.print(Character.toChars(65 + maxIndex)[0]);
                    System.out.print("" "");
                    slated.set(maxIndex, slated.get(maxIndex) - 1);
                    equateOrg -= 1;
                }
            }
            if (equateOrg == 2){
                int max = 0;
                int maxIndex = -1;
                int second = 0;
                int secondIndex = -1;
                ArrayList<Integer> ordered = new ArrayList<>(slated);
                Collections.sort(ordered, Collections.reverseOrder());
                max = ordered.get(0);
                maxIndex = slated.indexOf(max);
                second = ordered.get(1);
                secondIndex = slated.lastIndexOf(second);
                System.out.print(Character.toChars(65 + maxIndex)[0]);
                System.out.print(Character.toChars(65 + secondIndex)[0]);
                System.out.print("" "");
                slated.set(maxIndex, slated.get(maxIndex) - 1);
                slated.set(secondIndex, slated.get(secondIndex) - 1);
            }
            System.out.println();
        }
    }
}",572,15,"senate:slated,senateSize:equateOrg,temp:w,in:r,",1856,2.749122913678490,Beam
3733,,,266,13,,4055,5.169584504763290,0
3734,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxadifer, s1, s2, r22;
        double rank;
        int w[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            w = new int[N];
            cur = 0;
            maxadifer = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                w[i] = sc.nextInt();
                maxadifer = Math.max(cur - w[i], maxadifer);
                s1 += Math.max(cur - w[i], 0);
                cur = w[i];
            }
            rank = (double)maxadifer / 10;
            
            r22 = (int)(rank*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r22,cur);
                cur = w[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"maxdif:maxadifer,rate:rank,m:w,r10:r22,",1706,2.112850821018220,Beam
3735,,,306,16,,5116,6.577810986836750,0
3736,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lushes = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lushes[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int count = lushes[i4] - lushes[i4 + 1];
                            if (count > 0) {
                                first += count;
                            }
                        }
                        
                        int[] count = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            count[i3] = lushes[i3] - lushes[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, count[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lushes[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lushes = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lushes[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int count = lushes[i4] - lushes[i4 + 1];
                            if (count > 0) {
                                first += count;
                            }
                        }
                        
                        int[] count = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            count[i3] = lushes[i3] - lushes[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, count[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lushes[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] lushes = new int[n];
                    for (int i = 0; i < n; i++) {
                        lushes[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int count = lushes[i] - lushes[i + 1];
                        if (count > 0) {
                            first += count;
                        }
                    }
                    
                    int[] count = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        count[i] = lushes[i] - lushes[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, count[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, lushes[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] lushes = new int[n];
                for (int i = 0; i < n; i++) {
                    lushes[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int count = lushes[i] - lushes[i + 1];
                    if (count > 0) {
                        first += count;
                    }
                }
                
                int[] count = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    count[i] = lushes[i] - lushes[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, count[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, lushes[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:lushes,diff:count,",717,1.3586957931518600,Beam
3737,,,187,13,,2310,2.294676113128660,0
3738,,,544,17,,5558,8.112927031517030,0
3739,,,406,19,,1520,1.979438304901120,0
3740,,,257,11,,1055,1.3297123630841600,0
3741,,,200,10,,497,0.5331407348314920,0
3742,,,311,17,,1739,2.0346794565518700,0
3743,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > w)
                    w = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < w)
                    ans2 += datas[j];
                else
                    ans2 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,",249,0.2935778697331750,Beam
3744,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int RA = in.nextInt();
            int C = in.nextInt();
            int[][] B = new int[RA][C];
            for (int i = 0; i < RA; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char w = S.charAt(j);
                    if (w == '.')
                        B[i][j] = EMPTY;
                    else if (w == '<')
                        B[i][j] = LEFT;
                    else if (w == '>')
                        B[i][j] = RIGHT;
                    else if (w == 'v')
                        B[i][j] = DOWN;
                    else if (w == '^')
                        B[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < RA; r++) {
                for (int w = 0; w < C; w++) {
                    if (B[r][w] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = w + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < RA && 0 <= nc && nc < C) {
                            if (B[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[B[r][w]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}",513,26,"R:RA,c:w,G:B,",2142,2.6621206204096500,Beam
3745,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,",185,0.2311072826385500,Beam
3746,,,292,15,,1149,1.4341676473617600,0
3747,,,316,15,,4212,5.372155276934310,0
3748,,,544,17,,5924,8.483960008621220,0
3749,,,269,16,,5830,6.555326918760940,0
3750,"class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner lineScan = null;
        int size;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        size = s.nextInt();
        s.nextLine();
        for (int i = 0; i < size; i++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] plateValues = new int[currentSize];
            line = s.nextLine();
            lineScan = new Scanner(line);
            int j = 0;
            while (lineScan.hasNextInt()) {
                plateValues[j] = lineScan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastestRate = 0;
            for (int m = 1; m < currentSize; m++) {
                if (plateValues[m] < plateValues[m - 1]) {
                    firstMethod += plateValues[m - 1] - plateValues[m];
                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);
                }
            }
            int secondMethod = 0;
            for (int m = 0; m < currentSize - 1; m++) {
                if (plateValues[m] > fastestRate) {
                    secondMethod += fastestRate;
                } else {
                    secondMethod += plateValues[m];
                }
            }
            printer.print(""Case #"" + (i + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}","class Problem1 {
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        Scanner laneChan = null;
        int width;
        int currentSize;
        String line;
        File output = new File(""output.txt"");
        PrintWriter printer = new PrintWriter(output);
        s = new Scanner(new BufferedReader(new FileReader(""A-large.in"")));
        width = s.nextInt();
        s.nextLine();
        for (int c = 0; c < width; c++) {
            currentSize = s.nextInt();
            s.nextLine();
            int[] lakeValues = new int[currentSize];
            line = s.nextLine();
            laneChan = new Scanner(line);
            int j = 0;
            while (laneChan.hasNextInt()) {
                lakeValues[j] = laneChan.nextInt();
                j++;
            }
            int firstMethod = 0;
            int fastapestSize = 0;
            for (int w = 1; w < currentSize; w++) {
                if (lakeValues[w] < lakeValues[w - 1]) {
                    firstMethod += lakeValues[w - 1] - lakeValues[w];
                    fastapestSize = Math.max(fastapestSize, lakeValues[w - 1] - lakeValues[w]);
                }
            }
            int secondMethod = 0;
            for (int w = 0; w < currentSize - 1; w++) {
                if (lakeValues[w] > fastapestSize) {
                    secondMethod += fastapestSize;
                } else {
                    secondMethod += lakeValues[w];
                }
            }
            printer.print(""Case #"" + (c + 1) + "": "");
            printer.println(firstMethod + "" "" + secondMethod);
        }
        printer.close ();   
    }
}",328,16,"fastestRate:fastapestSize,size:width,i:c,m:w,plateValues:lakeValues,lineScan:laneChan,",3132,3.9627248843510900,Beam
3751,"class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanner = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int T = scanner.nextInt();
        for (int t = 1; t <= T; t++) {
            int N = scanner.nextInt();
            int[] m = new int[N];
            for (int i = 0; i < N; i++) {
                m[i] = scanner.nextInt();
            }
            int s1 = 0;
            int maxDiff = 0;
            for (int i = 1; i < N; i++) {
                if (m[i-1] > m[i]) {
                    int diff = m[i-1] - m[i];
                    s1 += diff;
                    if (diff > maxDiff) {
                        maxDiff = diff;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < N-1; i++) {
                if (m[i] < maxDiff) {
                    s2 += m[i];
                } else {
                    s2 += maxDiff;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", t, s1, s2));
        }
        scanner.close();
        writer.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        PrintWriter writer = new PrintWriter(new FileOutputStream(""A.out""));
        Scanner scanr = new Scanner(new FileInputStream(""A.in""));
        //PrintWriter writer = new PrintWriter(System.out);
        //Scanner scanner = new Scanner(System.in);

        int T = scanr.nextInt();
        for (int t = 1; t <= T; t++) {
            int Len = scanr.nextInt();
            int[] w = new int[Len];
            for (int i = 0; i < Len; i++) {
                w[i] = scanr.nextInt();
            }
            int s1 = 0;
            int maxDiff = 0;
            for (int i = 1; i < Len; i++) {
                if (w[i-1] > w[i]) {
                    int dir = w[i-1] - w[i];
                    s1 += dir;
                    if (dir > maxDiff) {
                        maxDiff = dir;
                    }
                }
            }
            int s2 = 0;
            for (int i = 0; i < Len-1; i++) {
                if (w[i] < maxDiff) {
                    s2 += w[i];
                } else {
                    s2 += maxDiff;
                }
            }
            writer.println(String.format(""Case #%d: %d %s"", t, s1, s2));
        }
        scanr.close();
        writer.close();
    }
}",267,13,"N:Len,diff:dir,m:w,scanner:scanr,",1536,1.8035921295483900,Beam
3752,,,292,15,,2566,3.225152095158900,0
3753,,,254,13,,1574,1.8784393707911200,0
3754,,,500,19,,8850,11.250403972466800,0
3755,,,358,16,,5302,7.168807772795360,0
3756,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2481,3.103213854630790,Beam
3757,,,169,10,,2140,2.312446169058480,0
3758,,,257,11,,2915,3.6266831676165300,0
3759,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int TA=Integer.parseInt(text);     
    for (int tc=0;tc<TA;tc++) {
        int d = Integer.parseInt(in.readLine()); 
        int[] w = new int[d];
        for (int vi=0;vi<2*d-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}",358,16,"out:w,a:r,i:vi,n:d,T:TA,",2605,3.2770540833473200,Beam
3760,,,292,17,,5899,7.0021022200584400,0
3761,,,406,17,,5260,7.969120009740190,0
3762,,,305,15,,799,1.0032103260358200,0
3763,,,375,12,,3401,4.428894321123760,0
3764,,,443,17,,1963,2.705972933769230,0
3765,,,269,13,,4053,5.504992047945660,0
3766,,,479,25,,8202,10.5804545601209,0
3767,,,655,16,,2470,4.508228647708890,0
3768,,,290,12,,3325,3.9298430641492200,0
3769,,,479,25,,8313,10.63459665775300,0
3770,,,553,21,,4564,5.971652170022330,0
3771,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.3470717787742620,Beam
3772,,,256,13,,3383,4.244182391961420,0
3773,,,305,15,,799,1.0153209169705700,0
3774,,,379,17,,2244,2.6761529088020300,0
3775,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.21130383809407600,Beam
3776,,,272,16,,3601,3.6337424238522800,0
3777,,,317,12,,3373,4.229381239414220,0
3778,,,311,17,,1320,1.5418415943781500,0
3779,,,345,16,,6029,7.189946552117670,0
3780,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.45460908810297600,Beam
3781,,,655,16,,1757,2.786360951264700,0
3782,,,156,10,,2419,2.3047162175178500,0
3783,,,292,16,,4155,5.059185636043550,0
3784,,,250,11,,559,0.6863642652829490,0
3785,,,317,12,,3371,4.2275199373563100,0
3786,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        re    = scanIn.nextInt();
            int        u    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = re*u;
            int    ret1        = 0;
            
            //    scan
            ret1    = re*(u/k);
            
            if(u % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,c:u,r:re,",807,0.8435808817545570,Beam
3787,,,211,11,,2760,2.9829480489095100,0
3788,,,417,18,,3845,5.180360094706220,0
3789,,,448,16,,3858,5.51158926486969,0
3790,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        re    = scanIn.nextInt();
            int        u    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = re*u;
            int    ret1        = 0;
            
            //    scan
            ret1    = re*(u/k);
            
            if(u % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,c:u,r:re,",807,0.8284674525260930,Beam
3791,,,887,27,,1190,1.8440082510312400,0
3792,,,379,17,,3379,4.072880947589880,0
3793,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,sw,irez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            sw = sc.nextInt();
            irez = c/sw;
            irez *=r;
            irez +=sw-1;
            if(c%sw > 0)
                irez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + irez );
        }
        pw.close();
    }
    
}",149,10,"rez:irez,w:sw,",466,0.47569291591644300,Beam
3794,,,358,18,,915,1.099313755830130,0
3795,,,655,16,,2079,3.05314652522405,0
3796,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader worker = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(worker.readLine());
        for(int count=1;count<=testCases;count++){
            String result="""";
            worker.readLine();
            String char[] = worker.readLine().split("" "");
            
            int n = Integer.MIN_VALUE;
            int key = 0;
            int result0 = 0;
            for(int i = 0; i<char.length-1;i++){
                int idTwo=Integer.parseInt(char[i+1]);
                int e2 = Integer.parseInt(char[i]);
                if((idTwo-e2)<0) key+=-(idTwo-e2);
                if(-(idTwo-e2)>n) n = -(idTwo-e2);
            }
            for(int i = 0; i<char.length-1;i++){
                int e2 = Integer.parseInt(char[i]);
                if(e2>=n) result0 = result0+n;
                else if(e2<n) result0 = result0+e2;
            }
            writer.write(""Case #""+count+"": ""+key+"" ""+result0+""
"");
        }
        worker.close();
        writer.close();

    }

}",316,15,"max:n,i2:idTwo,index:count,result1:key,result2:result0,str:char,i1:e2,reader:worker,",3137,4.118686385949450,Beam
3797,,,321,18,,1813,2.265780484676360,0
3798,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,0.7434053301811220,Beam
3799,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.5534083286921180,Beam
3800,,,460,16,,5302,7.591682688395180,0
3801,,,263,13,,683,0.8318386753400170,0
3802,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ants = 0;

            int r = scan.nextInt();
            int q = scan.nextInt();
            int time = scan.nextInt();

            ants = (r - 1) * (q / time) + (q - 1) / time + time;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ants);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"ans:ants,w:time,c:q,",745,0.7557055354118350,Beam
3803,,,240,13,,2426,2.7144087195396400,0
3804,,,311,17,,1320,1.5284328222274800,0
3805,,,255,13,,2047,3.216003946463270,0
3806,,,224,11,,807,1.0554996132850600,0
3807,,,393,16,,5084,6.784690630435940,0
3808,,,325,16,,6077,8.392884306112930,0
3809,,,443,17,,5231,6.598318902651470,0
3810,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.22003804842631000,Beam
3811,,,271,12,,3171,3.811579171816510,0
3812,,,224,11,,807,1.1143748760223400,0
3813,,,330,16,,5705,8.539961512883500,0
3814,"class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] m = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      m[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = m[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(m[i4] < cur) {
        sum1 += cur - m[i4];
      }
      cur = m[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < m[i2 - 1] - m[i2]) {
        max = m[i2 - 1] - m[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, m[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}","class A {

  static final String FILENAME = ""A-large"";
  static final String IN = FILENAME + "".in"";
  static final String OUT = FILENAME + "".out"";
  Scanner sc;
  BufferedWriter out;

  public static void main(String args[]) throws Exception {
    A r = new A();
    r.sc = new Scanner(new File(A.IN));
    r.out = new BufferedWriter(new FileWriter(A.OUT));
    int t = Integer.parseInt(r.sc.nextLine());
    for (int i = 1; i <= t; i++) {
      r.out.write(""Case #"" + i + "": "");
      int n = r.sc.nextInt();
    int[] w = new int[n];
    for(int i1 = 0; i1 < n; i1++) {
      w[i1] = r.sc.nextInt();
    }
    int sum1 = 0;
    int cur = w[0];
    for(int i4 = 1; i4 < n; i4++) {
      if(w[i4] < cur) {
        sum1 += cur - w[i4];
      }
      cur = w[i4];
    }
    r.out.write(Integer.toString(sum1) + "" "");
    
    int max = 0;
    for(int i2 = 1; i2 < n; i2++) {
      if(max < w[i2 - 1] - w[i2]) {
        max = w[i2 - 1] - w[i2];
      }
    }
    int sum2 = 0;
    for(int i3 = 0; i3 < n - 1; i3++) {
      sum2 += Math.min(max, w[i3]);
    }
    r.out.write(Integer.toString(sum2));
    r.out.newLine();
    r.out.flush();
    }
    r.sc.close();
    r.out.close();
  }
}",393,16,"m:w,",125,0.17192948659261100,Beam
3815,,,366,17,,900,1.1611597816149400,0
3816,,,291,12,,3411,4.424302677313490,0
3817,,,169,10,,2202,2.324626167615260,0
3818,,,281,14,,745,0.8940119544665020,0
3819,,,255,13,,931,1.4499669790267900,0
3820,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.w(0, m[i - 1] - m[i]);
                w = Math.w(w, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,",185,0.23246423800786300,Beam
3821,,,169,10,,2109,2.2019357601801600,0
3822,,,256,13,,927,1.185123376051590,0
3823,"class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int T = sc.nextInt();
        
        for (int x = 1; x <= T; ++x) {
            int N = sc.nextInt();
            
            int[][] arr = new int[2*N-1][N];
            
            // 2 * N - 1 line with N numbers
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    arr[i][j] = sc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < 2 * N - 1; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (map.get(arr[i][j]) == null) {
                        map.put(arr[i][j], 1);
                    }
                    else {
                        int k = map.get(arr[i][j]);
                        map.put(arr[i][j], k + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int i : map.keySet()) {
                if (map.get(i) % 2 != 0) {
                    r.add(i);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int i = 0; i < r.size(); ++i) {
                System.out.print("" "" + r.get(i));
            }
            System.out.println();
        }

        sc.close();
    }
}","class Round1B {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner cc = new Scanner(new File(""D:\\Downloads\\B-small-attempt0.in""));
        // Scanner sc = new Scanner(new File(""small2.in""));
        
        int R = cc.nextInt();
        
        for (int x = 1; x <= R; ++x) {
            int W = cc.nextInt();
            
            int[][] yr = new int[2*W-1][W];
            
            // 2 * N - 1 line with N numbers
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    yr[c][c] = cc.nextInt();
                }
            }
            
            
            
            HashMap<Integer, Integer> mp = new HashMap<>();
            for (int c = 0; c < 2 * W - 1; ++c) {
                for (int c = 0; c < W; ++c) {
                    if (mp.get(yr[c][c]) == null) {
                        mp.put(yr[c][c], 1);
                    }
                    else {
                        int w = mp.get(yr[c][c]);
                        mp.put(yr[c][c], w + 1);
                    }
                }
            }
            
            ArrayList<Integer> r = new ArrayList<Integer>();
            
            for (int c : mp.keySet()) {
                if (mp.get(c) % 2 != 0) {
                    r.add(c);
                }
            }
            
            Collections.sort(r);
            
            System.out.print(""Case #"" + x + "":"");
            for (int c = 0; c < r.size(); ++c) {
                System.out.print("" "" + r.get(c));
            }
            System.out.println();
        }

        cc.close();
    }
}",375,12,"N:W,i:c,arr:yr,T:R,k:w,map:mp,j:c,sc:cc,",2785,3.683441189924880,Beam
3824,,,308,12,,745,0.9931827068328860,0
3825,,,317,12,,3379,4.341943701108300,0
3826,,,349,19,,5710,6.779591139157610,0
3827,"class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int N = in.nextInt();
            int[] arr = new int[65 + N];
            int count = 0;
            for(int i = 65; i < 65 + N; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""\n"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}","class A {
    
    public static void main(String[] args) throws Exception {
        
        Scanner in = new Scanner(new File(""C:\\Users\\jainh\\Desktop\\A-small-attempt0.in""));
        FileWriter fw = new FileWriter(""C:\\Users\\jainh\\Desktop\\A-small.out"");
        
        int T = in.nextInt();
        in.nextLine();
        for (int tc = 1; tc <= T; tc++) {
            int W = in.nextInt();
            int[] arr = new int[65 + W];
            int count = 0;
            for(int i = 65; i < 65 + W; i++) {
                arr[i] = in.nextInt();
                count += arr[i];
            }
            
            String returnString = """";
            while(count > 0) {
                int[] largestTwo1 = new int[4];
                
                for(int i = 65; i < arr.length; i++) {
                    if (arr[i] > largestTwo1[0]) {
                        largestTwo1[0] = arr[i];
                        largestTwo1[1] = i;
                        largestTwo1[2] = 0;
                    } else if (arr[i] == largestTwo1[0]) {
                        largestTwo1[2] = arr[i];
                        largestTwo1[3] = i;
                    }
                }
                int[] largestTwo = largestTwo1;
                if(largestTwo[0] == largestTwo[2]) {
                    if (count == 3) {
                        returnString += (char)largestTwo[1];
                        returnString += "" "";
                        count -= 1;
                        arr[largestTwo[1]] -= 1;
                    } else {
                        returnString += (char)largestTwo[1];
                        returnString += (char)largestTwo[3];
                        returnString += "" "";
                        count -= 2;
                        arr[largestTwo[1]] -= 1;
                        arr[largestTwo[3]] -= 1;
                    }
                    
                } else {
                    returnString += (char)largestTwo[1];
                    returnString += "" "";
                    count -= 1;
                    arr[largestTwo[1]] -= 1;
                }
            }
            
            fw.write (""Case #"" + tc + "": "" + returnString + ""
"");
        }
        in.close();
        fw.flush();
        fw.close();
    }
}",418,13,"N:W,",156,0.32367129723231,Beam
3828,,,281,14,,5209,6.480868955453240,0
3829,". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int heights[]= new int[2502];
        for(int k=0;k<2501;k++)
            heights[k]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int j=1;j<2*n;j++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    heights[h]=heights[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int k=0;k<2502;k++)
            {
                if(heights[k]%2!=0)
                    s=s+k+"" "";
                heights[k]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",". */
class Ideone
{
    public static void main (String[] args) throws java.lang.Exception
    {
        DataInputStream in = new DataInputStream(System.in);
        int t,h;
        t= Integer.parseInt(in.readLine());
        int width[]= new int[2502];
        for(int c=0;c<2501;c++)
            width[c]=0;
        for(int i=1;i<=t;i++)
        {
            int n;
            n= Integer.parseInt(in.readLine());
            for(int dj=1;dj<2*n;dj++)
            {
                String line=in.readLine();
                StringTokenizer st= new StringTokenizer(line);
                for(int x=0;x<n;x++)
                {
                    h=Integer.parseInt(st.nextToken());
                    System.out.print(h+"" "");
                    width[h]=width[h]+1;
                }
                    System.out.println("""");
            }
            String s="""";
            for(int c=0;c<2502;c++)
            {
                if(width[c]%2!=0)
                    s=s+c+"" "";
                width[c]=0;
            }
            s=s.trim();
            System.out.println(""Case #""+i+"": ""+s);
        }
    }
}",285,14,"heights:width,k:c,j:dj,",1241,1.4625394304593400,Beam
3830,,,443,17,,1932,2.6308865388234500,0
3831,,,219,14,,3479,3.9840173522631300,0
3832,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int TN = Integer.parseInt(line);
            for(int i=0;i<TN;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>size){
                            size=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=size){
                        b=b+size;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,T:TN,",497,0.6897445400555930,Beam
3833,,,292,16,,4155,5.0262349088986700,0
3834,,,321,18,,6952,7.951435184478760,0
3835,,,406,19,,1520,1.9716573794682800,0
3836,,,358,18,,915,1.1075346032778400,0
3837,,,381,22,,5248,6.071176787217460,0
3838,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> letters = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            letters.add(line);
        }

        int problemCount = Integer.parseInt(letters.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = letters.get(currentIndex++);
            String line2 = letters.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] lull = ans;
            long[] sum11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int anti96 = 0; anti96 < lull.length - 1; anti96++) {
                        if (lull[anti96+1] < lull[anti96]) {
                            sum11[0] += lull[anti96] - lull[anti96+1];
                        }
                    }
                    
                    int count = 0;
                    for (int i3 = 0; i3 < lull.length - 1; i3++) {
                        if (lull[i3+1] < lull[i3]) {
                            count = Math.max(count, lull[i3] - lull[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < lull.length - 1; i1++) {
                        sum11[1] += Math.min(lull[i1], count);
                    }
            long[] min = sum11;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}",479,25,"mush:lull,rate:count,lines:letters,i2:anti96,min1:sum11,",2957,3.896315161387130,Beam
3839,,,290,12,,617,0.7327043215433760,0
3840,,,187,13,,2018,1.9189106901486700,0
3841,,,264,15,,1149,1.3945932626724200,0
3842,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lushes = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lushes[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int count = lushes[i4] - lushes[i4 + 1];
                            if (count > 0) {
                                first += count;
                            }
                        }
                        
                        int[] count = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            count[i3] = lushes[i3] - lushes[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, count[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lushes[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lushes = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lushes[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int count = lushes[i4] - lushes[i4 + 1];
                            if (count > 0) {
                                first += count;
                            }
                        }
                        
                        int[] count = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            count[i3] = lushes[i3] - lushes[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, count[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lushes[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] lushes = new int[n];
                    for (int i = 0; i < n; i++) {
                        lushes[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int count = lushes[i] - lushes[i + 1];
                        if (count > 0) {
                            first += count;
                        }
                    }
                    
                    int[] count = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        count[i] = lushes[i] - lushes[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, count[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, lushes[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] lushes = new int[n];
                for (int i = 0; i < n; i++) {
                    lushes[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int count = lushes[i] - lushes[i + 1];
                    if (count > 0) {
                        first += count;
                    }
                }
                
                int[] count = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    count[i] = lushes[i] - lushes[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, count[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, lushes[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:lushes,diff:count,",717,1.2754803021748900,Beam
3843,,,379,17,,1353,1.6397687832514400,0
3844,,,420,19,,7084,9.15485123793284,0
3845,,,292,17,,6895,8.256200702985130,0
3846,,,619,14,,4333,5.72353268067042,0
3847,,,156,10,,2202,2.0843554218610100,0
3848,,,262,14,,993,1.2090110540390000,0
3849,,,295,15,,3730,4.678612736860910,0
3850,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream max = System.max;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.max.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), M = scanner.nextLong(), A = scanner.nextLong();
            
            long ants = (R - 1) * M;
            
            if (M % A == 0) {
                max.println (ants + M/A - 1 + A);
            } else {
                max.println (ants + M/A + A);
            }
        }

    }
}",156,10,"W:A,ans:ants,C:M,out:max,",1107,1.1899478435516400,Beam
3851,,,479,25,,1840,2.440684191385910,0
3852,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lushes = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lushes[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int count = lushes[i4] - lushes[i4 + 1];
                            if (count > 0) {
                                first += count;
                            }
                        }
                        
                        int[] count = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            count[i3] = lushes[i3] - lushes[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, count[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lushes[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] lushes = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            lushes[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int count = lushes[i4] - lushes[i4 + 1];
                            if (count > 0) {
                                first += count;
                            }
                        }
                        
                        int[] count = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            count[i3] = lushes[i3] - lushes[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, count[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, lushes[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] lushes = new int[n];
                    for (int i = 0; i < n; i++) {
                        lushes[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int count = lushes[i] - lushes[i + 1];
                        if (count > 0) {
                            first += count;
                        }
                    }
                    
                    int[] count = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        count[i] = lushes[i] - lushes[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, count[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, lushes[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] lushes = new int[n];
                for (int i = 0; i < n; i++) {
                    lushes[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int count = lushes[i] - lushes[i + 1];
                    if (count > 0) {
                        first += count;
                    }
                }
                
                int[] count = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    count[i] = lushes[i] - lushes[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, count[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, lushes[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,30,"mush:lushes,diff:count,",717,1.314804216225940,Beam
3853,,,250,11,,3070,3.747324474652610,0
3854,,,735,24,,11486,14.213166117668200,0
3855,,,263,13,,683,0.829079516728719,0
3856,,,358,18,,5784,6.804033104578650,0
3857,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long width = 0, y = 0;

            int skip = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > skip)
                        skip = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < skip)
                    width += m[i];
                else
                    width += skip;

            out.printf(""Case #%d: %d %d%n"", test, y, width);
        }

        in.close();
        out.close();
    }
}",306,16,"x:width,jump:skip,",435,0.5511522173881530,Beam
3858,,,282,13,,681,0.777642039457957,0
3859,,,887,27,,1723,2.8427066882451400,0
3860,"class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int x[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            x = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                x[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<x.length;i1++){
                    if(x[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = x[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int a[] = a1;
            if(sum==3){
                  for(int k = 0;k<x.length;k++)
                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){
                        x[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(a.length!=4){
                if(x[a[1]]-2!=0){
                x[a[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+"" ""; 
                }else{
                    x[a[1]]--;
                sum--;
                gg = gg + (char)('A'+a[1])+"" ""; 
                }
           }else if(a.length==4){
               x[a[2]]--;
                x[a[3]]--;
               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}","class Jam {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int w[],sum;
        String gg ;
        for(int i = 0;i<t;i++){
            gg = ""Case #""+(i+1)+"": "";
            int n = sc.nextInt();
            w = new int[n];
            sum = 0;
            for(int j = 0;j<n;j++){
                int m = sc.nextInt();
                w[j] = m;
                sum+=m;
            }
            while(sum>0){
            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;
                for(int i1 = 0;i1<w.length;i1++){
                    if(w[i1]>=max1){
                        max2 = max1;
                        dex2 = dex1;
                        max1 = w[i1];
                        dex1 = i1;
                    }
                }int a1[];
                
                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};
            int c[] = a1;
            if(sum==3){
                  for(int k = 0;k<w.length;k++)
                    if(w[k]<=c[0]&&w[k]>0&&k!=c[1]){
                        w[k]--;
                        gg=gg+(char)(k+65)+"" "";
                        sum--;
                        break;
                    }
            }else if(c.length!=4){
                if(w[c[1]]-2!=0){
                w[c[1]]-=2;
                sum-=2;
                gg = gg + (char)('A'+c[1])+(char)(c[1]+'A')+"" ""; 
                }else{
                    w[c[1]]--;
                sum--;
                gg = gg + (char)('A'+c[1])+"" ""; 
                }
           }else if(c.length==4){
               w[c[2]]--;
                w[c[3]]--;
               gg = gg + (char)('A'+c[2])+(char)(c[3]+'A')+"" ""; 
                sum-=2;
               
            }
                }
            System.out.println(gg);
        }
        
                }
    
}",500,19,"x:w,a:c,",616,0.9099624037742620,Beam
3861,,,366,17,,900,1.1977399984995500,0
3862,,,281,14,,5023,6.197737387816110,0
3863,,,328,16,,5302,6.643413694699610,0
3864,,,513,26,,16897,20.160624094804100,0
3865,,,443,17,,5433,7.498271842797600,0
3866,,,302,13,,1293,1.5519134680430100,0
3867,,,292,17,,6922,8.21519494454066,0
3868,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] W = new int [N];
                for (int k=0;k<N;k++){
                    W[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,size=0;
                for (int k=0;k<N-1;k++){
                    if (W[k]>W[k+1]){
                        a=a+W[k]-W[k+1];
                        if (W[k]-W[k+1]>size){
                            size=W[k]-W[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (W[k]>=size){
                        b=b+size;
                    } else{
                        b=b+W[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,17,"max:size,V:W,",528,0.7337885141372680,Beam
3869,,,291,15,,708,0.8195699016253150,0
3870,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sh = new Scanner(System.in);
        int P = sh.nextInt();
        for(int Tase=1;Tase<=P;Tase++){
            int N = sh.nextInt(), w = sh.nextInt(), VW = sh.nextInt();
            int w = 0, sum = 0;
            sum += N*(w/VW);
            if (w%VW==0)sum+=VW-1;
            else sum+=VW;
            System.out.println(""Case #""+Tase+"": ""+sum);
        }
    }
}",309,11,"C:w,R:N,res:sum,W:VW,sc:sh,CASE:Tase,T:P,",1489,1.7405136068662000,Beam
3871,,,468,20,,3559,4.700790135065720,0
3872,,,348,14,,3895,5.007407593727110,0
3873,,,269,16,,5615,6.21220360994339,0
3874,,,295,15,,672,0.8521131157875060,0
3875,,,272,16,,5970,6.274717799822490,0
3876,,,478,22,,11846,13.943348987897200,0
3877,,,291,12,,1675,2.076689088344570,0
3878,,,200,10,,714,0.7795165459314980,0
3879,,,379,17,,3898,4.66195285320282,0
3880,,,345,16,,3499,4.086983148256940,0
3881,,,344,15,,4582,5.292561634381610,0
3882,,,358,18,,915,1.1143515626589500,0
3883,,,303,12,,2809,3.467407739162450,0
3884,"class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int ar[] = new int[n];
            int ma = 0;
            int f = 0;
            for (int i = 0; i < n; i++) {
                ar[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, ar[i - 1] - ar[i]);
                    if (ar[i] < ar[i-1]){
                        f += ar[i - 1] - ar[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (ar[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += ar[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + f + "" "" + s);
        }
    }
}","class Codejam {
    
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //System.setIn(new FileInputStream(""input.txt""));
        Scanner in = null;
        try {
            in = new Scanner(new File(""input.txt""));
        } catch (FileNotFoundException e1) {
        }
        try {
            System.setOut(new PrintStream(new File(""output.txt"")));
        } catch (FileNotFoundException e) {
        }
        
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = in.nextInt();
            int r[] = new int[n];
            int ma = 0;
            int w = 0;
            for (int i = 0; i < n; i++) {
                r[i] = in.nextInt();
                if (i > 0) {
                    ma = Math.max(ma, r[i - 1] - r[i]);
                    if (r[i] < r[i-1]){
                        w += r[i - 1] - r[i];
                    }
                }
            }
            
            int s = 0;
            for (int i = 1; i < n; i++) {
                if (r[i - 1] >= ma) {
                    s += ma;
                } else {
                    s += r[i - 1];
                }
            }
            System.out.println(""Case #"" + t + "": "" + w + "" "" + s);
        }
    }
}",278,11,"f:w,ar:r,",371,0.4560958743095400,Beam
3885,,,311,17,,6700,8.072215044498440,0
3886,,,282,13,,4083,4.875938018163050,0
3887,,,349,19,,862,1.0178063233693400,0
3888,,,142,11,,3029,3.2688916166623400,0
3889,,,290,12,,895,1.089036500453950,0
3890,,,292,17,,6859,7.783453885714210,0
3891,,,355,19,,6530,7.226119907697040,0
3892,,,311,17,,6648,7.719373369216920,0
3893,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int w = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > w) {
                    w = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"max:w,",242,0.2897602438926700,Beam
3894,,,255,13,,3256,5.037625781695050,0
3895,"class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] R = new int[N + 1];
            R[0] = sc.nextInt();
            int[] P = new int[N + 1];
            P[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                P[i + 1] = (P[i] + R[i] - S[i]) / 2;
                R[i + 1] = (R[i] + S[i] - P[i]) / 2;
                S[i + 1] = (P[i] + S[i] - R[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (R[N] == 1) {
                System.out.println(r[N]);
            } else if (P[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}","class A {
    static String[] r = new String[13];
    static String[] p = new String[13];
    static String[] s = new String[13];

    public static void main(String[] args) {
        r[0] = ""R"";
        p[0] = ""P"";
        s[0] = ""S"";
        for (int i = 0; i < 12; i++) {
            if (r[i].compareTo(p[i]) < 0) {
                p[i + 1] = r[i] + p[i];
            } else {
                p[i + 1] = p[i] + r[i];
            }

            if (r[i].compareTo(s[i]) < 0) {
                r[i + 1] = r[i] + s[i];
            } else {
                r[i + 1] = s[i] + r[i];
            }

            if (s[i].compareTo(p[i]) < 0) {
                s[i + 1] = s[i] + p[i];
            } else {
                s[i + 1] = p[i] + s[i];
            }
        }

        Scanner sc = new Scanner(System.in);
        int numCases = sc.nextInt();
        for (int caseNum = 1; caseNum <= numCases; caseNum++) {
            int N = sc.nextInt();

            int[] R = new int[N + 1];
            R[0] = sc.nextInt();
            int[] W = new int[N + 1];
            W[0] = sc.nextInt();
            int[] S = new int[N + 1];
            S[0] = sc.nextInt();

            for (int i = 0; i < N; i++) {
                W[i + 1] = (W[i] + R[i] - S[i]) / 2;
                R[i + 1] = (R[i] + S[i] - W[i]) / 2;
                S[i + 1] = (W[i] + S[i] - R[i]) / 2;
            }

            System.out.print(""Case #"" + caseNum + "": "");
            boolean possible = true;
            for (int i = 0; i <= N; i++) {
                if (R[i] < 0 || W[i] < 0 || S[i] < 0) {
                    System.out.println(""IMPOSSIBLE"");
                    possible = false;
                    break;
                }
            }
            if (!possible) {
                continue;
            }
            if (R[N] == 1) {
                System.out.println(r[N]);
            } else if (W[N] == 1) {
                System.out.println(p[N]);
            } else {
                System.out.println(s[N]);
            }
        }
        sc.close();
    }
}",619,14,"P:W,",125,0.1759376327196760,Beam
3896,,,406,19,,7999,10.347552812099500,0
3897,,,169,10,,2109,2.2365456144015000,0
3898,,,282,13,,2473,2.770078937212630,0
3899,,,619,14,,4333,5.714533404509230,0
3900,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int cell = sc.nextInt();
      int ow = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<cell; k+=ow) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+ow-1);
    }
    System.out.println(res);
  }
}",187,12,"w:ow,col:cell,",621,0.6536860466003420,Beam
3901,,,311,17,,6619,8.037078785896300,0
3902,,,280,13,,3163,3.917366902033490,0
3903,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int max = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<max; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}",187,12,"col:max,",32,0.028115312258402500,Beam
3904,,,358,18,,915,1.1079012711842900,0
3905,,,256,13,,3383,4.298846991856890,0
3906,,,311,17,,6700,8.170310926437380,0
3907,,,443,17,,1281,1.7257886171340900,0
3908,,,273,11,,829,1.0275733590126000,0
3909,,,264,15,,1842,2.338833379745480,0
3910,,,330,16,,6077,8.608367176850640,0
3911,,,348,21,,8038,9.684887051582340,0
3912,,,265,12,,3701,4.327405007680260,0
3913,,,211,11,,559,0.6236500144004820,0
3914,,,366,17,,6139,7.657033189137780,0
3915,,,291,15,,708,0.821179477373759,0
3916,,,317,12,,617,0.78912832736969,0
3917,,,479,25,,8305,10.624406039714800,0
3918,"class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.out)));
    String str;
    int [] a = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int n = Integer.parseInt(in.readLine()); 
        int[] out = new int[n];
        for (int i=0;i<2*n-1;i++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                a[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int i=0;i<a.length;i++) {
            if (a[i]!=0) {
                if (a[i]%2==1) {
                    out[cnt]=i;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(out);
        String s = """";
        for (int i=0;i<out.length;i++) {
            s += Integer.toString(out[i])+ "" "";
        }
        pw.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    pw.close();

    }



}","class List {

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter p;

    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));
    BufferedReader in = new BufferedReader(new FileReader(""F:\\JAVA\\eclipse\\input.in"")); 
    p = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
            System.w)));
    String str;
    int [] r = new int [2510];
    String text = in.readLine(); 
    int T=Integer.parseInt(text);     
    for (int tc=0;tc<T;tc++) {
        int c = Integer.parseInt(in.readLine()); 
        int[] w = new int[c];
        for (int vi=0;vi<2*c-1;vi++) {
            text = in.readLine();
            String [] tmp = text.split("" "");
            for (int j=0;j<tmp.length;j++) {
                r[Integer.parseInt(tmp[j])]++;
            }            
        }
        int cnt = 0;
        for (int vi=0;vi<r.length;vi++) {
            if (r[vi]!=0) {
                if (r[vi]%2==1) {
                    w[cnt]=vi;
                    cnt++;
                }                        
            }
        }
        Arrays.sort(w);
        String s = """";
        for (int vi=0;vi<w.length;vi++) {
            s += Integer.toString(w[vi])+ "" "";
        }
        p.println(""Case #""+(tc+1)+"": ""+s.substring(0,s.length()-1));
    }
    //pw.println(arr.size());
    p.close();

    }



}",358,16,"out:w,a:r,i:vi,n:c,pw:p,",2512,3.15671888589859,Beam
3919,,,468,20,,1610,2.135616219043730,0
3920,,,265,12,,617,0.704539680480957,0
3921,,,292,17,,1825,2.211696473757430,0
3922,"class A {

    public static void main(String[] args) throws FileNotFoundException {
        
        Scanner in = new Scanner(new File(""c:\\codejam2015\\a\\small.in""));
        PrintWriter out = new PrintWriter(new File(
                ""c:\\codejam2015\\a\\small.out""));
        int numTests = in.nextInt();
        for (int i = 1; i <= numTests; i++) {
            long start = System.currentTimeMillis();
                    
                    int r = in.nextInt();
                    int c = in.nextInt();
                    int w = in.nextInt();
                    
                    
                    System.out.println(""solving = "" + r + "", "" + c + "", "" + w);
                    solved = new boolean[c];
                    Arrays.fill(solved, false);
                    
            //        int maxStart = 0;
            //        int maxEnd = c -1;
            //        int max = c;
                    
                    Queue<int[]> q = new LinkedList<int[]>();
            //        
                    q.offer(new int[]{0, c-1});
            //        
                    int numHits = 0;
                    
                    int max = c;
                    
                    while(max > w) {
                        numHits ++;
                        max = max - w;
                    }
                    
                    numHits = numHits * r;
                    if(max == w) {
                        numHits = numHits + (r -1);
                    }
                    numHits = numHits + w;
                    
            //        while(!q.isEmpty()) {
            //            numHits++;
            //            
            //            int[] maxMarkers = q.poll();
            //            int maxStart = maxMarkers[0];
            //            int maxEnd = maxMarkers[1];
            //            int marked = (maxStart + maxEnd) / 2;
            //            solved[marked] = true;
            //            if((maxEnd - marked) >= w) {
            //                q.offer(new int[]{marked + 1, maxEnd});
            //            }
            //            if((marked - maxStart) >= w) {
            //                q.offer(new int[]{maxStart, marked - 1});
            //            }
            //            if(q.isEmpty()) {
            //                int max = (maxEnd - maxStart) + 1;
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w -1);
            //                }
            //            }
            //        }
                    
            //        
            //        if(w == 1) {
            //            numHits = c;
            //        } else {
            //        while(max >= w) {
            //            int marked = (maxStart + maxEnd) / 2;
            //            System.out.println(""marking "" + marked);
            //            solved[marked] = true;
            //            numHits++;
            //            
            //            int[] newMax = findMax();
            //            System.out.println(""max "" + Arrays.toString(newMax));
            //            if(newMax[1] > w) {
            //                max = newMax[1];
            //                maxStart = newMax[0];
            //                maxEnd = newMax[1] -1;
            //            } else {
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w - 1);
            //                }
            //                break;
            //            }
            //        }
            //        }
                    System.out.println(""numHits "" + numHits);
            
                    out.println(""Case #"" + i + "": "" + numHits);
        }

        out.close();
    }

    static boolean[] solved;


}","class A {

    public static void main(String[] args) throws FileNotFoundException {
        
        Scanner init = new Scanner(new File(""c:\\codejam2015\\a\\small.in""));
        PrintWriter print = new PrintWriter(new File(
                ""c:\\codejam2015\\a\\small.out""));
        int numTiickets = init.nextInt();
        for (int n = 1; n <= numTiickets; n++) {
            long start = System.currentTimeMillis();
                    
                    int err = init.nextInt();
                    int n = init.nextInt();
                    int n = init.nextInt();
                    
                    
                    System.print.println(""solving = "" + err + "", "" + n + "", "" + n);
                    iserved = new boolean[n];
                    Arrays.fill(iserved, false);
                    
            //        int maxStart = 0;
            //        int maxEnd = c -1;
            //        int max = c;
                    
                    Queue<int[]> cache = new LinkedList<int[]>();
            //        
                    cache.offer(new int[]{0, n-1});
            //        
                    int maxHists = 0;
                    
                    int cur = n;
                    
                    while(cur > n) {
                        maxHists ++;
                        cur = cur - n;
                    }
                    
                    maxHists = maxHists * err;
                    if(cur == n) {
                        maxHists = maxHists + (err -1);
                    }
                    maxHists = maxHists + n;
                    
            //        while(!q.isEmpty()) {
            //            numHits++;
            //            
            //            int[] maxMarkers = q.poll();
            //            int maxStart = maxMarkers[0];
            //            int maxEnd = maxMarkers[1];
            //            int marked = (maxStart + maxEnd) / 2;
            //            solved[marked] = true;
            //            if((maxEnd - marked) >= w) {
            //                q.offer(new int[]{marked + 1, maxEnd});
            //            }
            //            if((marked - maxStart) >= w) {
            //                q.offer(new int[]{maxStart, marked - 1});
            //            }
            //            if(q.isEmpty()) {
            //                int max = (maxEnd - maxStart) + 1;
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w -1);
            //                }
            //            }
            //        }
                    
            //        
            //        if(w == 1) {
            //            numHits = c;
            //        } else {
            //        while(max >= w) {
            //            int marked = (maxStart + maxEnd) / 2;
            //            System.out.println(""marking "" + marked);
            //            solved[marked] = true;
            //            numHits++;
            //            
            //            int[] newMax = findMax();
            //            System.out.println(""max "" + Arrays.toString(newMax));
            //            if(newMax[1] > w) {
            //                max = newMax[1];
            //                maxStart = newMax[0];
            //                maxEnd = newMax[1] -1;
            //            } else {
            //                if(max > w) {
            //                    numHits += w;
            //                } else {
            //                    numHits += (w - 1);
            //                }
            //                break;
            //            }
            //        }
            //        }
                    System.print.println(""numHits "" + maxHists);
            
                    print.println(""Case #"" + n + "": "" + maxHists);
        }

        print.close();
    }

    static boolean[] iserved;


}",269,13,"w:n,r:err,c:n,out:print,numHits:maxHists,solved:iserved,i:n,max:cur,numTests:numTiickets,q:cache,in:init,",3673,4.831789072354640,Beam
3923,,,334,15,,1179,1.653216791152950,0
3924,,,295,16,,5302,6.079655690987910,0
3925,,,272,16,,4436,4.480632396539050,0
3926,"class A
{
    static char[] let={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int i=0; i<3; i++)
            table[i][0]=""""+let[i];
        for (int n=0; n<=11; n++)
            for (int i=0; i<3; i++)
            {
                String a=table[i][n], b=table[(i+1)%3][n];
                if (a.compareTo(b)<0)
                    table[i][n+1]=a+b;
                else
                    table[i][n+1]=b+a;
            }
        
        Scanner in=new Scanner(System.in);
        int numRuns=in.nextInt();
        int[] count=new int[3];
        for (int run=1; run<=numRuns; run++)
        {
            int n=in.nextInt();
            count[1]=in.nextInt();
            count[0]=in.nextInt();
            count[2]=in.nextInt();
            boolean match=false;
            for (int i=0; i<3; i++)
            {
                match=true;
                String game=table[i][n];
                for (int j=0; j<3; j++)
                    if (game.length()-game.replace(""""+let[j],"""").length()!=count[j])
                        match=false;
                if (match)
                {
                    System.out.println(""Case #""+run+"": ""+game);
                    break;
                }
            }
            if (!match)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}","class A
{
    static char[] print={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] tab = new String[3][13];
        for (int index=0; index<3; index++)
            tab[index][0]=""""+print[index];
        for (int fn=0; fn<=11; fn++)
            for (int index=0; index<3; index++)
            {
                String A=tab[index][fn], be=tab[(index+1)%3][fn];
                if (A.compareTo(be)<0)
                    tab[index][fn+1]=A+be;
                else
                    tab[index][fn+1]=be+A;
            }
        
        Scanner in=new Scanner(System.in);
        int maxRuns=in.nextInt();
        int[] rate=new int[3];
        for (int pass=1; pass<=maxRuns; pass++)
        {
            int fn=in.nextInt();
            rate[1]=in.nextInt();
            rate[0]=in.nextInt();
            rate[2]=in.nextInt();
            boolean sum=false;
            for (int index=0; index<3; index++)
            {
                sum=true;
                String winner=tab[index][fn];
                for (int ja=0; ja<3; ja++)
                    if (winner.length()-winner.replace(""""+print[ja],"""").length()!=rate[ja])
                        sum=false;
                if (sum)
                {
                    System.out.println(""Case #""+pass+"": ""+winner);
                    break;
                }
            }
            if (!sum)
                System.out.println(""Case #""+pass+"": IMPOSSIBLE"");
        }
    }
}",387,15,"match:sum,let:print,game:winner,j:ja,a:A,b:be,n:fn,table:tab,run:pass,count:rate,i:index,numRuns:maxRuns,",5116,6.988609874248510,Beam
3927,,,269,16,,845,0.9760519981384280,0
3928,,,273,11,,1992,2.422588614622750,0
3929,"class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] m = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                m[i] = sc.nextInt();
                if (i > 0 && m[i] < m[i - 1]) {
                    y += m[i - 1] - m[i];
                    max = Math.max(max, m[i - 1] - m[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, m[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}","class P1 {
    public static void main (String[] args) throws FileNotFoundException {
//        Scanner sc = new Scanner (System.in);
//        PrintStream op = System.out;
        Scanner sc = new Scanner (new FileInputStream (""D:\\Internet\\A-large.in""));
        PrintStream op = new PrintStream (""D:\\Dropbox\\SRMs\\GCJ151A\\src\\A-large-output.txt"");
        int T = sc.nextInt();
        for (int t = 1; t <= T; t++) {
            int n = sc.nextInt();
            int[] w = new int [n];
            int y = 0, max = 0;
            for (int i = 0; i < n; i++) {
                w[i] = sc.nextInt();
                if (i > 0 && w[i] < w[i - 1]) {
                    y += w[i - 1] - w[i];
                    max = Math.max(max, w[i - 1] - w[i]);
                }
            }
            int z = 0;
            for (int i = 1; i < n; i++)
                z += Math.min(max, w[i - 1]);
            op.println(""Case #"" + t + "": "" + y + "" "" + z);
        }
        sc.close();
        op.close();
    }
}",240,12,"m:w,",187,0.2372206727663680,Beam
3930,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int W = sc.nextInt();
                int[] Pi = new int[W];
                int sum = 0;
                for (int j = 0; j < W; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < W; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < W; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"N:W,",156,0.21935269832611100,Beam
3931,,,241,15,,3501,4.144864026705420,0
3932,,,321,13,,4434,5.34196017185847,0
3933,"class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long C = Long.parseLong(parts[1]);
                long W = Long.parseLong(parts[2]);
                long result = (C-1)/W+W;
                bw.write(""Case #"" + (i+1) + "": "" + result + ""\n"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}","class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long D = Long.parseLong(parts[1]);
                long RW = Long.parseLong(parts[2]);
                long result = (D-1)/RW+RW;
                bw.write(""Case #"" + (i+1) + "": "" + result + ""
"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}",222,16,"W:RW,C:D,",311,0.3433545470237730,Beam
3934,,,272,16,,4436,4.268578728040060,0
3935,,,887,27,,1616,2.1868056257565800,0
3936,,,366,17,,900,0.8766382694244390,0
3937,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int max = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[max] = max + r - 1;
                for(int j = max + 1; j <= 2*max - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = max+1 + r-1;
                }
                for(int j = 2*max; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-max] + r, max + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:max,",310,0.2851520498593650,Beam
3938,,,211,11,,559,0.4988337198893230,0
3939,,,305,15,,5228,5.13893373409907,0
3940,,,306,16,,5674,5.907913188139600,0
3941,,,298,16,,4496,4.471361235777540,0
3942,,,406,16,,2481,2.8772610902786300,0
3943,,,325,16,,6077,6.427996718883520,0
3944,,,443,17,,5014,5.901948328812920,0
3945,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader worker = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(worker.readLine());
        for(int count=1;count<=testCases;count++){
            String result="""";
            worker.readLine();
            String char[] = worker.readLine().split("" "");
            
            int n = Integer.MIN_VALUE;
            int key = 0;
            int result0 = 0;
            for(int i = 0; i<char.length-1;i++){
                int idTwo=Integer.parseInt(char[i+1]);
                int e2 = Integer.parseInt(char[i]);
                if((idTwo-e2)<0) key+=-(idTwo-e2);
                if(-(idTwo-e2)>n) n = -(idTwo-e2);
            }
            for(int i = 0; i<char.length-1;i++){
                int e2 = Integer.parseInt(char[i]);
                if(e2>=n) result0 = result0+n;
                else if(e2<n) result0 = result0+e2;
            }
            writer.write(""Case #""+count+"": ""+key+"" ""+result0+""
"");
        }
        worker.close();
        writer.close();

    }

}",316,15,"max:n,i2:idTwo,index:count,result1:key,result2:result0,str:char,i1:e2,reader:worker,",3137,3.3782562017440800,Beam
3946,,,345,16,,861,0.8286669969558720,0
3947,,,266,13,,3797,3.709111837546030,0
3948,,,290,12,,3509,3.4122867465019200,0
3949,"static void main(String[] args) throws Exception {
        //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        
        BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
        PrintWriter pw=new PrintWriter(new FileWriter(""A-large.out""));
        
        int t,total,tc,n,i,arr[],M,c,twice;
        String inp[],character="""";
        t = Integer.parseInt(br.readLine().trim());
        for(tc=1;tc<=t;tc++){
            total=0;
            character="""";
            n=Integer.parseInt(br.readLine().trim());
            arr=new int[n];
            inp=br.readLine().trim().split("" "");
            for(i=0;i<n;i++){
                arr[i]=Integer.parseInt(inp[i]);
                total+=arr[i];
            }
            while(total>0){
                character+="" "";
                int M1,i1;
                for(M1=0,i1=1;i1<arr.length;i1++)
                    if(arr[M1]<arr[i1])
                        M1=i1;
                M=arr[M1];
                int i2,c1;
                for(i2=c1=0;i2<arr.length;i2++)
                    if(arr[i2]==M)
                        c1++;
                c=c1;
                if(c==2){//end case 
                    //remove 2 at a time
                    twice=2;
                    for(i=0;i<n && twice >0 ;i++){
                        if(arr[i]==M && twice>0){
                            character+=(char)(65+i) +"""";
                            arr[i]--;
                            total--;
                        }
                    }                    
                }
                else{
                    for(i=0;i<n;i++){
                        if(arr[i]==M){
                            character+=(char)(65+i) +"""";
                            arr[i]--;
                            total--;
                            break;
                        }
                    }
                        
                }
            }
            
            
            
            
            
            pw.println(""Case #""+tc+"":""+character);
        }
        pw.flush();
        pw.close();

    }

}","static void main(String[] args) throws Exception {
        //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        
        BufferedReader br=new BufferedReader(new FileReader(""A-large.in""));
        PrintWriter pw=new PrintWriter(new FileWriter(""A-large.out""));
        
        int t,total,tc,n,i,arr[],R,c,wwice;
        String inp[],character="""";
        t = Integer.parseInt(br.readLine().trim());
        for(tc=1;tc<=t;tc++){
            total=0;
            character="""";
            n=Integer.parseInt(br.readLine().trim());
            arr=new int[n];
            inp=br.readLine().trim().split("" "");
            for(i=0;i<n;i++){
                arr[i]=Integer.parseInt(inp[i]);
                total+=arr[i];
            }
            while(total>0){
                character+="" "";
                int M1,i1;
                for(M1=0,i1=1;i1<arr.length;i1++)
                    if(arr[M1]<arr[i1])
                        M1=i1;
                R=arr[M1];
                int i2,c1;
                for(i2=c1=0;i2<arr.length;i2++)
                    if(arr[i2]==R)
                        c1++;
                c=c1;
                if(c==2){//end case 
                    //remove 2 at a time
                    wwice=2;
                    for(i=0;i<n && wwice >0 ;i++){
                        if(arr[i]==R && wwice>0){
                            character+=(char)(65+i) +"""";
                            arr[i]--;
                            total--;
                        }
                    }                    
                }
                else{
                    for(i=0;i<n;i++){
                        if(arr[i]==R){
                            character+=(char)(65+i) +"""";
                            arr[i]--;
                            total--;
                            break;
                        }
                    }
                        
                }
            }
            
            
            
            
            
            pw.println(""Case #""+tc+"":""+character);
        }
        pw.flush();
        pw.close();

    }

}",432,19,"twice:wwice,M:R,",652,0.7139525731404620,Beam
3950,,,363,16,,1272,1.2861663977305100,0
3951,,,334,15,,807,0.9332835594813030,0
3952,,,325,16,,6077,6.414311122894290,0
3953,,,887,27,,1721,2.2197256803512600,0
3954,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int W = in.nextInt();
            int[][] G = new int[R][W];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < W; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < W; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < W) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}",513,26,"C:W,",49,0.04507817427317300,Beam
3955,,,366,17,,900,0.8750253717104590,0
3956,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int D = A.in.nextInt();
            int MW = A.in.nextInt();
            if (R == 1) {
                int diff = (D-MW)/MW + MW + (D%MW>0?1:0);
                A.out.println(diff);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,12,"W:MW,result:diff,C:D,",606,0.5309544960657760,Beam
3957,,,500,19,,8855,9.290505536397300,0
3958,,,344,15,,4890,4.764132265249890,0
3959,,,366,17,,900,0.873290479183197,0
3960,,,349,19,,862,0.8345570206642150,0
3961,"class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int CASE=1;CASE<=T;CASE++){
            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();
            int w = 0, res = 0;
            res += R*(C/W);
            if (C%W==0)res+=W-1;
            else res+=W;
            System.out.println(""Case #""+CASE+"": ""+res);
        }
    }
}","class A {

    final boolean DEBUG = false;
    final boolean isSmall = false;
    final String PACKAGE = ""gcj2015/r1c"";
    final String PROBLEM = ""A"";
    
    public static void main(String[] args) {
        A r = new A();
        if(!r.DEBUG){
            try {
                if(r.isSmall)System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small-attempt0.in"")));
                else System.setIn(new FileInputStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large.in"")));
                if(r.isSmall)System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-small_out-deg.txt"")));
                else System.setOut(new PrintStream(new File(""./src/""+r.PACKAGE+""/""+r.PROBLEM+""-large_out.txt"")));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        Scanner com = new Scanner(System.in);
        int B = com.nextInt();
        for(int TATCH=1;TATCH<=B;TATCH++){
            int N = com.nextInt(), B = com.nextInt(), WF = com.nextInt();
            int w = 0, sum = 0;
            sum += N*(B/WF);
            if (B%WF==0)sum+=WF-1;
            else sum+=WF;
            System.out.println(""Case #""+TATCH+"": ""+sum);
        }
    }
}",309,11,"C:B,R:N,W:WF,CASE:TATCH,sc:com,T:B,res:sum,",1489,1.438179083665210,Beam
3962,,,348,14,,3548,3.6757532874743100,0
3963,,,263,13,,683,0.6739290475845340,0
3964,,,358,16,,5302,5.6582788268725100,0
3965,,,328,16,,1582,1.6409236868222600,0
3966,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String rap = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) rap += ""
"";
      rap += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(rap);
  }
}",187,12,"res:rap,",156,0.1442722280820210,Beam
3967,,,448,20,,9335,10.565957915782900,0
3968,,,292,15,,3166,3.2243364572525000,0
3969,,,887,27,,6546,8.970654368400570,0
3970,,,263,13,,683,0.6745045940081280,0
3971,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, w = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                w = m[c - 1] - m[c];
                if (w >= y) {
                    y = w;
                }
                if (w >= 0) {
                    x += w;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"d:w,",156,0.1543647527694700,Beam
3972,,,887,27,,6546,8.916435261567430,0
3973,"class Evac {
    
    public static int[] party;
    public static int N, sum;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scanner = new Scanner(input);
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++) {
            
            N = scanner.nextInt();
            party = new int[N];
            sum = 0;
            
            for (int j = 0; j < N; j++) {

                party[j] = scanner.nextInt();
                sum += party[j];
            }

            System.out.printf(""Case #%d: "", i + 1);
            if (N == 2) {
                for (int j = 1; j < party[0]; j++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (sum > 0) {
                    
                    int gold, silver, bronze;
                    gold = silver = bronze = -1;
                    for (int i1 = 0; i1 < N; i1++)
                        if (gold == -1 || party[i1] > party[gold]) {
                            bronze = silver;
                            silver = gold;
                            gold = i1;
                        }
                        else if (silver == -1 || party[i1] > party[silver]) {
                            bronze = silver;
                            silver = i1;
                        }
                        else if (bronze == -1 || party[i1] > party[bronze])
                            bronze = i1;
                    int x = party[gold] - 1;
                    int y = party[bronze];
                    
                    if ((x > y ? x : y) > (sum - 2) / 2) {
                        
                        sum--;
                        party[gold]--;
                        System.out.print((char) ((int) 'A' + gold));
                    }
                    else {
                        
                        sum -= 2;
                        party[gold]--;
                        party[silver]--;
                        System.out.print((char) ((int) 'A' + gold));
                        System.out.print((char) ((int) 'A' + silver));
                    }
                    
                    if (sum == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scanner.close();
    }

}","class Evac {
    
    public static int[] participant;
    public static int W, max;

    public static void main(String[] args) throws IOException {

        File input = new File(""input.txt"");
        Scanner scan = new Scanner(input);
        
        int T = scan.nextInt();
        for (int mi = 0; mi < T; mi++) {
            
            W = scan.nextInt();
            participant = new int[W];
            max = 0;
            
            for (int r = 0; r < W; r++) {

                participant[r] = scan.nextInt();
                max += participant[r];
            }

            System.out.printf(""Case #%d: "", mi + 1);
            if (W == 2) {
                for (int r = 1; r < participant[0]; r++)
                    System.out.print(""AB "");
                System.out.println(""AB"");
            } else
                while (max > 0) {
                    
                    int apple, cream, brence;
                    apple = cream = brence = -1;
                    for (int i1 = 0; i1 < W; i1++)
                        if (apple == -1 || participant[i1] > participant[apple]) {
                            brence = cream;
                            cream = apple;
                            apple = i1;
                        }
                        else if (cream == -1 || participant[i1] > participant[cream]) {
                            brence = cream;
                            cream = i1;
                        }
                        else if (brence == -1 || participant[i1] > participant[brence])
                            brence = i1;
                    int xi = participant[apple] - 1;
                    int w = participant[brence];
                    
                    if ((xi > w ? xi : w) > (max - 2) / 2) {
                        
                        max--;
                        participant[apple]--;
                        System.out.print((char) ((int) 'A' + apple));
                    }
                    else {
                        
                        max -= 2;
                        participant[apple]--;
                        participant[cream]--;
                        System.out.print((char) ((int) 'A' + apple));
                        System.out.print((char) ((int) 'A' + cream));
                    }
                    
                    if (max == 0)
                        System.out.println();
                    else
                        System.out.print(' ');
                }
        }
        
        scan.close();
    }

}",460,16,"gold:apple,sum:max,party:participant,silver:cream,bronze:brence,N:W,j:r,y:w,x:xi,i:mi,scanner:scan,",4899,5.675404866536460,Beam
3974,,,311,17,,6724,6.611833675702410,0
3975,,,269,13,,4053,4.509815347194670,0
3976,,,305,15,,799,0.8254043857256570,0
3977,,,367,20,,1436,1.4563783367474900,0
3978,,,340,10,,2519,2.787474771340690,0
3979,,,211,11,,2884,2.5070825576782200,0
3980,,,360,19,,7053,6.801297402381900,0
3981,,,406,19,,1024,1.0731550733248400,0
3982,,,295,16,,838,0.8021753708521530,0
3983,,,406,19,,7937,8.36110308567683,0
3984,,,303,12,,2809,2.8767305334409100,0
3985,,,292,17,,6895,6.643153683344520,0
3986,,,423,7,,751,0.7765463391939800,0
3987,,,344,15,,772,0.752540123462677,0
3988,,,426,18,,3961,4.4566348950068200,0
3989,,,262,14,,1954,1.9708251317342100,0
3990,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int sw = in.nextInt();
      int rate = c/sw*(r - 1);
      rate += (int)Math.ceil((double)c/(double)sw);
      rate += sw - 1;
      
      out.println (""Case #"" + casenum + "": "" + rate);
    }
    out.close();
    in.close();
  }
}",156,10,"score:rate,w:sw,",466,0.38626300493876100,Beam
3991,,,406,19,,1024,1.0779894431432100,0
3992,,,406,19,,1024,1.0753686467806500,0
3993,,,281,14,,745,0.7295027573903400,0
3994,"class ProblemB {
    public static void main (String[] args) throws FileNotFoundException {

        FileReader file = new FileReader(""B-large.in"");
        Scanner in = new Scanner(file);
        PrintWriter out = new PrintWriter(""output.txt"");

        int t = in.nextInt();

        for(int b = 1; b<=t; b++) {
            int n = in.nextInt();
            int[] a = new int[2501];
            int[] result = new int[n];
            int k = 0;
            for (int i = 0; i < ((2 * n - 1) * n); i++) {
                a[in.nextInt()] += 1;

            }

            for(int j = 0; j<a.length; j++)
            {
                if(!((a[j] % 2)== 0))
                {
                    result[k] = j;
                    k++;
                }

            }
            String output ="""";
            for(int s = 0; s<result.length; s++)
            {
                output += "" "" + result[s];
            }
            out.println(""Case #"" + b +"":"" + output);
        }

        in.close();
        out.close();
    }
}","class ProblemB {
    public static void main (String[] args) throws FileNotFoundException {

        FileReader file = new FileReader(""B-large.in"");
        Scanner r = new Scanner(file);
        PrintWriter out = new PrintWriter(""output.txt"");

        int t = r.nextInt();

        for(int b = 1; b<=t; b++) {
            int w = r.nextInt();
            int[] a = new int[2501];
            int[] diff = new int[w];
            int k = 0;
            for (int i = 0; i < ((2 * w - 1) * w); i++) {
                a[r.nextInt()] += 1;

            }

            for(int j = 0; j<a.length; j++)
            {
                if(!((a[j] % 2)== 0))
                {
                    diff[k] = j;
                    k++;
                }

            }
            String output ="""";
            for(int s = 0; s<diff.length; s++)
            {
                output += "" "" + diff[s];
            }
            out.println(""Case #"" + b +"":"" + output);
        }

        r.close();
        out.close();
    }
}",246,15,"n:w,result:diff,in:r,",1133,1.048347810904190,Beam
3995,,,326,14,,3442,3.554047679901120,0
3996,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == W){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= W && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,",156,0.17493860324223800,Beam
3997,"class A{
  public static void main(String[] args){
    distance=new int[1000001];
    for(int i=0;i<1000001;i++)
      distance[i]=UNSEEN;
    Queue<Integer> q=new LinkedList<Integer>();
    distance[1]=1;
    q.add(1);
    while(!q.isEmpty()){
      int current=q.poll();
      int d=distance[current];
    
      int next=current+1;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    int n = current;
    int result=0;
    while(n>0){
      result=10*result+(n%10);
      n/=10;
    }
      next=result;
      if(next<1000001 && distance[next]==UNSEEN){
        int nd=d+1;
        distance[next]=nd;
        q.add(next);
      }
    }
    
    Scanner scanner=new Scanner(System.in);
    final int cases=scanner.nextInt();

    for(int t=0;t<cases;t++){
      int n=scanner.nextInt();
      System.out.println(""Case #""+(t+1)+"": ""+distance[n]);
    }
  }

  private static int[] distance;
  private static final int UNSEEN=-1;
}","class A{
  public static void main(String[] args){
    grade=new int[1000001];
    for(int li=0;li<1000001;li++)
      grade[li]=UnSeKEN;
    Queue<Integer> w=new LinkedList<Integer>();
    grade[1]=1;
    w.add(1);
    while(!w.isEmpty()){
      int current=w.poll();
      int d=grade[current];
    
      int next=current+1;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nr=d+1;
        grade[next]=nr;
        w.add(next);
      }
    int c = current;
    int result=0;
    while(c>0){
      result=10*result+(c%10);
      c/=10;
    }
      next=result;
      if(next<1000001 && grade[next]==UnSeKEN){
        int nr=d+1;
        grade[next]=nr;
        w.add(next);
      }
    }
    
    Scanner sen=new Scanner(System.in);
    final int places=sen.nextInt();

    for(int ot=0;ot<places;ot++){
      int c=sen.nextInt();
      System.out.println(""Case #""+(ot+1)+"": ""+grade[c]);
    }
  }

  private static int[] grade;
  private static final int UnSeKEN=-1;
}",302,15,"distance:grade,scanner:sen,n:c,UNSEEN:UnSeKEN,i:li,cases:places,t:ot,q:w,nd:nr,",1861,1.7430239558219900,Beam
3998,,,618,26,,10790,11.643137105306000,0
3999,,,169,10,,2171,1.9595917145411200,0