{"idx":"0","func":"class Main {\n\n    public static void main(String[] args) throws IOException {\n\n        File fileInput = new File(\"A-large.in\");\n        File fileOutput = new File(\"output.out\");\n\n        BufferedReader reader = new BufferedReader(new FileReader(fileInput));\n        BufferedWriter writer = new BufferedWriter(new FileWriter(fileOutput));\n\n        int cases = Integer.parseInt(reader.readLine());\n\n        for (int c = 1; c <= cases; c++) {\n\n            int n = Integer.parseInt(reader.readLine());\n            String mushroomsS[] = reader.readLine().split(\" \");\n            int mushrooms[] = new int[n];\n\n            for (int i = 0; i < n; i++) {\n                mushrooms[i] = Integer.parseInt(mushroomsS[i]);\n            }\n\n            int eaten1 = 0;\n\n            for (int i = 1; i < n; i++) {\n\n                if (mushrooms[i - 1] > mushrooms[i]) {\n                    eaten1 += (mushrooms[i - 1] - mushrooms[i]);\n                }\n            }\n            int t[] = Arrays.copyOf(mushrooms, mushrooms.length);\n            int k = 0;\n            \n            for (int i1 = 1; i1 < t.length; i1++) {\n                if ((t[i1-1] - t[i1]) > k) {\n                    k = (t[i1-1] - t[i1]);\n                }\n            }\n\n            int eatCount = k;\n            int eaten2 = 0;\n\n            if (eatCount == 0) {\n\n            } else {\n\n                for (int i = 0; i < n - 1; i++) {\n\n                    if (mushrooms[i] < eatCount) {\n                        eaten2 += mushrooms[i];\n                    } else {\n                        eaten2 += eatCount;\n                    }\n                }\n            }\n            writer.write(\"Case #\" + c + \": \" + eaten1 + \" \" + eaten2 + \"\\n\");\n\n        }\n        reader.close();\n        writer.close();\n    }\n}"}
{"idx":"1","func":"class ProblemA {    \n\n    private static BufferedWriter writer;\n    private static Scanner scanner;\n    \n    private static int n;\n    private static int[] m;\n\n    private static int a;\n    private static int b;\n    \n    public static void main(String[] args) throws IOException {\n        Path input = Paths.get(\"input.txt\");\n        Path output = Paths.get(\"output.txt\");\n        scanner = new Scanner(input);\n        writer = Files.newBufferedWriter(output);\n        int testCases = scanner.nextInt();\n        for (int i = 0; i < testCases; i++) {\n            n = scanner.nextInt();\n            m = new int[n];\n            for(int i3 = 0; i3< n;i3++) {\n                m[i3] = scanner.nextInt(); \n            }\n            a = 0;\n            for(int i1 = 1; i1 < m.length; i1++) {\n                if (m[i1] < m[i1-1]) {\n                    a += (-m[i1] + m[i1-1]);\n                }\n            }\n            b = 0;\n            int minIn10Secs =0;\n            for(int i1 = 0; i1 < m.length-1;i1++){\n                int diff = m[i1+1] -m[i1];\n                if (diff < 0)\n                minIn10Secs = Math.max(minIn10Secs, -diff);\n            }\n            \n            for(int i2 = 0; i2 < m.length -1; i2++) {    \n                    b += Math.min(minIn10Secs, m[i2]);\n            }\n            String out = String.format(\"Case #%d: %d %d\", i + 1, a, b);\n            System.err.println(out);\n            writer.write(out);\n            writer.newLine();\n        }\n        writer.close();\n\n    }\n\n}"}
{"idx":"2","func":"class MushroomMonster {\n\n    public static void main (String [] args) throws IOException {\n        String root = \"A-large\";\n        String fileName = \"C:\\\\Users\\\\Aaron\\\\Downloads\\\\\" + root + \".in\";\n        BufferedReader reader = new BufferedReader (new FileReader(new File(fileName)));\n        int nTestCases = Integer.parseInt(reader.readLine());\n        ArrayList<String> out = new ArrayList<String>();\n        for (int t = 0; t < nTestCases; t++) {\n            int numWatches = Integer.parseInt(reader.readLine());\n            String[] parts = reader.readLine().split(\" \");\n            int[] eat = new int[parts.length];\n            for (int i = 0; i < parts.length; i++) eat[i] = Integer.parseInt(parts[i]);\n            \/\/ Eat as much as she wants\n            int numEaten1 = 0;\n            for (int i1 = 1; i1 < eat.length; i1++) {\n                numEaten1 += Math.max(0, eat[i1 - 1] - eat[i1]);\n            }\n            \n            int y = numEaten1;\n            \/\/10 second intervals.  Biggest rate of change?\n            int numEaten = 0;\n            int maxRate = 0;\n            for (int i = 1; i < eat.length; i++) {\n                int rate = (eat[i - 1] - eat[i]);\n                maxRate = Math.max(maxRate, rate);\n            }\n            \n            System.out.println(\"Max rate: \" + maxRate);\n            \n            for (int i = 0; i < eat.length; i++) {\n                numEaten += maxRate;\n                if (eat[i] < maxRate) {\n                    numEaten -= maxRate - eat[i];\n                    \n                }\n            }\n            numEaten -= Math.min(maxRate, eat[eat.length - 1]);\n            numEaten = Math.max(0, numEaten);\n            int z = numEaten;\n            \n            \n            System.out.println(\"Input: \" + Arrays.toString(eat));\n            System.out.println(\"Answer: \" + y + \" \" + z);\n            System.out.println(\"-----------------\");\n            out.add(\"Case #\" + (t+1) + \": \" + y + \" \" + z);\n        }\n        \n        PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\Aaron\\\\Downloads\\\\\"+ root + \"-SOL.out\")));\n        for (String s : out) {\n            writer.write(s + \"\\n\");\n        }\n        \n        writer.close();\n        reader.close();\n    }\n    \n}"}
{"idx":"3","func":"class mushroommonster {\n\n    static String file = \"A-large\";\n\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n        try (PrintWriter writer = new PrintWriter(\"\/home\/dare\/Downloads\/\" + file + \".out\", \"UTF-8\")) {\n            Scanner s = new Scanner(new File(\"\/home\/dare\/Downloads\/\" + file + \".in\"));\n            int T = s.nextInt();\n\n            for (int i = 0; i < T; i++) {\n                int N = s.nextInt();\n                int m[] = new int[N];\n\n                int rate = 0;\n                for (int j = 0; j < N; ++j) {\n                    m[j] = s.nextInt();\n\n                    if (j > 0) {\n                        rate = Math.max(rate, m[j - 1] - m[j]);\n                    }\n                }\n\n                int y = 0;\n                int z = 0;\n\n                for (int j = 1; j < m.length; ++j) {\n                    if (m[j - 1] == rate) {\n                        z += rate;\n                    } else if (m[j - 1] > rate) {\n                        z += rate;\n                    } else {\n                        z += m[j - 1];\n                    }\n                    \n                    if (m[j] < m[j - 1]) {\n                        y += m[j - 1] - m[j];\n                    }\n                }\n                writer.println(\"Case #\" + (i + 1) + \": \" + y + \" \" + z);\n            }\n            writer.close();\n        }\n    }\n}"}
{"idx":"4","func":"class R1Q1 {\n    private static Reader in;\n    private static PrintWriter out;\n    public static final String NAME = \"R1\\\\A\\\\A-large\";\n    \n    private static Map<String, String> m = new HashMap<String, String>();\n\n    public static void main(String[] args) throws IOException {    \n        \n        out = new PrintWriter(new BufferedWriter(new FileWriter(NAME + \".out\")));\n        File file = new File(NAME+\".in\");\n        \n        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n            int T = Integer.parseInt(br.readLine());\n            for(int i=0; i<T; i++){\n                int N = Integer.parseInt(br.readLine());\n                int result1 = 0;\n                int result2 = 0;\n                String[] list = br.readLine().split(\" \");\n                int last = Integer.parseInt(list[N-1]);\n                \n                int result2_max = 0;\n                for(int j=N-2; j>=0; j--){\n                    int first = Integer.parseInt(list[j]);\n                    if(last < first){\n                        result1 += first-last;\n                        if(result2_max < first-last){\n                            result2_max = first-last;\n                        }\n                    }\n                    last = first;\n                }\n                \n                System.out.println(result2_max);\n                \n                for(int j=N-2; j>=0; j--){\n                    int thisD = Integer.parseInt(list[j]);\n                    if(thisD < result2_max){\n                        result2 += thisD;\n                    }else{\n                        result2 += result2_max;\n                    }\n                }\n                \n                out.println(\"Case #\" + (i+1) + \": \" + result1 + \" \" + result2);\n            }\n            \n        }\n        \n        out.close();\n        System.exit(0);\n        \n    }\n    \n}"}
{"idx":"5","func":"class M614ushroomMonster {\n    \n    public static void main(String[] args) throws Exception {\n        File inputFile = new File(\"A-large.in\");\n        Scanner in = new Scanner(inputFile);\n        File outputFile = new File(\"output.txt\");\n        PrintWriter out = new PrintWriter(outputFile);\n\n        int T = in.nextInt();\n        for (int t=0; t<T; t++) {\n            int N = in.nextInt();\n            int[] A = new int[N];\n            for (int n=0; n<N; n++) {\n                A[n] = in.nextInt();\n            }\n            long y = 0;\n            long max = 0;\n            for (int n=1; n<N; n++) {\n                long diff = A[n-1]-A[n];\n                if (diff > 0) {\n                    y += diff;\n                    max = Math.max(max, diff);\n                }\n            }\n            long z = 0;\n            for (int n=0; n<N-1; n++) {\n                z += Math.min(max, A[n]);\n            }\n            \n            out.println(\"Case #\"+(t+1)+\": \"+y+\" \"+z);\n        }\n\n        out.close();\n    }\n    \n}"}
{"idx":"6","func":"class A {\n\n    public static void main(String[] args) throws Exception{\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(in.readLine());\n        for (int cas = 1; cas <=T; cas++) {\n            int N = Integer.parseInt(in.readLine());\n            long[] a = new long[N];\n            String[] spl = in.readLine().split(\" \");\n            for (int i = 0; i < N; i++) {\n                a[i] = Integer.parseInt(spl[i]);\n            }\n            long sum =0;\n            long maxD = 0;\n            for (int i = 0; i < N-1; i++) {\n                sum += Math.max(0, a[i]-a[i+1]);\n                maxD = Math.max(maxD, a[i]-a[i+1]);\n            }\n            long s2=0;\n            for (int i = 0; i < N-1; i++) {\n                s2 += Math.min(maxD, a[i]);\n            }\n            String ans = sum+\" \"+s2;\n            System.out.println(\"Case #\"+cas+\": \"+ans);\n        }\n    }\n\n}"}
{"idx":"7","func":"class Problem_A {\n\n    public static void main(String[] args) {\n        String inFile = \"\/\/Users\/\/lixuefei\/\/Documents\/\/JavaWorkspace\/\/Interview\/\/src\/\/GoogleCodeJamRound1\/\/inin.txt\";\n        String outFile = \"\/\/Users\/\/lixuefei\/\/Documents\/\/JavaWorkspace\/\/Interview\/\/src\/\/GoogleCodeJamRound1\/\/result.txt\";\n        int n = 0;\n        String line;\n        try {\n            FileReader fileReader = new FileReader(inFile);\n            BufferedReader br = new BufferedReader(fileReader);\n            FileWriter fileWriter = new FileWriter(outFile);\n            BufferedWriter bw = new BufferedWriter(fileWriter);\n            line = br.readLine();\n            n = Integer.parseInt(line);\n            for(int i = 0; i < n ; i++){\n                line = br.readLine();\n                int N = Integer.parseInt(line);\n                int[] M = new int[N];\n                line = br.readLine();\n                String[] parts = line.split(\" \");\n                for(int j = 0; j < N; j++){\n                    M[j] = Integer.parseInt(parts[j]);\n                }\n                int result = 0;\n                for(int i1 = 0; i1 < N-1; i1++){\n                    if(M[i1] > M[i1+1]){\n                        result += M[i1] - M[i1+1];\n                    }\n                }\n                                \n                int result1 = result;\n                int max = 0; \n                int result3 = 0;\n                for(int i2 = 0; i2 < N-1; i2++){\n                    if(M[i2] > M[i2+1]){\n                        int dif = M[i2]- M[i2+1];\n                        if(max < dif) max = dif;\n                    }\n                }\n                for(int i1 = 0; i1 < N-1; i1++){\n                    if(M[i1] >= max) result3 += max;\n                    else result3 += M[i1];\n                }\n                int result2 = result3;\n                bw.write(\"Case #\" + (i+1) + \": \" + result1 + \" \"+ result2 +\"\\n\");\n                \n            }\n            br.close();\n            bw.close();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n\n    }\n}"}
{"idx":"8","func":"class mushrooms {\n    \n    public static void main (String args[]) throws IOException\n    {\n        BufferedReader cin  = new BufferedReader(new FileReader(\"c:\\\\input.txt\"));\n        \/\/BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter cout = new PrintWriter(\"c:\\\\users\\\\johng_000\\\\desktop\\\\output.txt\");\n        StringTokenizer st = new StringTokenizer(cin.readLine());\n        int T = Integer.parseInt(st.nextToken());\n        for (int count = 0; count < T; count++)\n        {\n            st = new StringTokenizer (cin.readLine());\n            int N = Integer.parseInt(st.nextToken());\n            int [] mu = new int [N];\n            st = new StringTokenizer (cin.readLine());\n            for (int i = 0; i < N; i++)\n            {\n                mu[i] = Integer.parseInt(st.nextToken());\n            }\n            long firstMethod = 0;\n            long secondMethod = 0;\n            long max = mu[0] - mu[1];\n            for (int i = 2; i < N; i++)\n            {\n                if (mu[i-1] - mu[i] > max)\n                    max = mu[i-1] - mu[i];\n            }\n            for (int i = 1; i < N; i++)\n            {\n                if (mu[i-1] > mu[i])\n                    firstMethod += mu[i-1] - mu[i];        \n            }\n            for (int i = 0; i < N-1; i++)\n            {\n                if (mu[i] > max)\n                    secondMethod += max;\n                else\n                {\n                    secondMethod += mu[i];\n                }\n            }\n            cout.println(\"Case #\" + (count + 1) +\": \" + firstMethod + \" \" + secondMethod);\n        }\n        cout.close();\n    }\n}"}
{"idx":"9","func":"class chain {\n   static String s1;\n     public static void main(String[] args) throws IOException {\n        File infile=new File(\"small.txt\");\n     FileInputStream fis=new FileInputStream(infile);\n     DataInputStream inp=new DataInputStream(fis);\n\n     PrintWriter out=new PrintWriter(\"output.txt\");\n        int t = Integer.parseInt(inp.readLine().trim());\n         int i=0;\n         long sum1=0,sum2=0;\n         for(i=1;i<=t;i++){\n             int max=0;\n             sum1=0;\n             sum2=0;\n            int y= Integer.parseInt(inp.readLine().trim());\n        String  s[]=inp.readLine().split(\" \");\n       int a[]=new int[y];\n       int j=0;\n       for(j=0;j<y;j++){\n           a[j]=Integer.parseInt(s[j]);\n       }\n      for(j=0;j<y-1;j++){\n          if(a[j]>a[j+1]){\n              sum1=sum1+(a[j]-a[j+1]);\n          }\n          if(a[j]-a[j+1]>max)\n              max=a[j]-a[j+1];\n      }\n      for(j=0;j<y-1;j++){\n          if(a[j]>max)\n              sum2=sum2+max;\n          else\n              sum2=sum2+a[j];\n      }\n        out.print(\"Case #\"+i+\": \"+sum1+\" \"+sum2);\n        out.println(\"\");\n     \n    }\n         inp.close();\n         out.close();}\n \n\n    static BufferedReader br = new BufferedReader(new InputStreamReader(\n            System.in));\n    private static String s[], w, q;\n\n}"}
{"idx":"10","func":"class ProblemA {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n\/\/        BufferedReader in = new BufferedReader(new InputStreamReader(System.in) );\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));\n        \n        Scanner in = new Scanner(System.in);\n        int cases = in.nextInt();\n        int contador = 1;\n        while(cases>0){\n            \n        int hongos = in.nextInt();\n        int anterior = 0;\n        int actual = 0;\n        int metodo1 = 0;\n        int metodo2 = 0;\n        int c = 0;\n        int[] anteriores = new int[hongos];\n        while(hongos>0){\n            \/\/ caso 1\n            \n        actual = in.nextInt();\n        \n        if(actual<anterior){\n            metodo1 += anterior - actual;\n        }\n        \n        anteriores[c] = actual;\n       \n        anterior = actual;    \n          c++;\n            hongos--;\n        }\n        int diferencia = 0;\n\n        for(int i=0;i<anteriores.length-1;i++){\n            int comp = anteriores[i] - anteriores[i+1];\n            if(diferencia<comp){\n                diferencia = comp;\n            }\n        }\n        for(int i=0;i<anteriores.length-1;i++){\n            if(anteriores[i]>=diferencia){\n                metodo2 += diferencia;\n            }else{\n                metodo2 += anteriores[i];\n            }\n        }\n            out.write(\"Case #\" +contador+\": \"+ metodo1+\" \" + metodo2 + \"\\n\");\n            \n            contador++;\n            cases--;\n        }\n        out.flush();\n        \n    }\n    \n}"}
{"idx":"11","func":"class Problem1 {\n    public static void main(String[] args) {\n        try {\n            Scanner scanner = new Scanner(new FileReader(\"A-large.in\"));\n            int T = scanner.nextInt();\n            int[] Ns = new int[T];\n            ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();\n            for(int i=0; i<T; i++) {\n                Ns[i] = scanner.nextInt(); \n                ArrayList<Integer> subList = new ArrayList<Integer>();\n                for(int j=0; j< Ns[i]; j++) {\n                    int current = scanner.nextInt();\n                    subList.add(current);\n                }\n                list.add(subList);\n            }  \n            PrintWriter out = new PrintWriter(new FileWriter(\"output1.txt\"));        \n            for(int i=0; i<T; i++) {\n                if(Ns[i] <= 1) {\n                    out.println(\"Case #\" + (i+1) + \": 0 0\" );\n                    continue;\n                }\n                ArrayList<Integer> subList = list.get(i);\n                int maxGap = 0;\n                int sumGap = 0;\n                int secondSum = 0;\n                for(int j=0; j<subList.size()-1; j++) {\n                    if(subList.get(j) > subList.get(j+1)) {\n                        sumGap += subList.get(j) - subList.get(j+1);\n                        maxGap = Math.max(maxGap, subList.get(j) - subList.get(j+1));\n                    }\n                }\n                for(int j=0; j<subList.size()-1; j++) {\n                    if(subList.get(j) > maxGap) {\n                        secondSum += maxGap;\n                    } else {\n                        secondSum += subList.get(j);\n                    }\n                }\n                out.println(\"Case #\" + (i+1) + \": \" + sumGap + \" \" + secondSum);\n            }\n            out.close();           \n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"12","func":"class mushroom{\n    public static void main(String[] args) throws IOException{\n        BufferedReader f= new BufferedReader(new FileReader(\"mushroom.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"mushroom.out\")));\n        int nmnmnm = Integer.parseInt(f.readLine());\n        for(int nmnm=0; nmnm<nmnmnm; nmnm++){\n            int n = Integer.parseInt(f.readLine());\n            int[] a = new int[n];\n            StringTokenizer st = new StringTokenizer(f.readLine());\n            a[0] = Integer.parseInt(st.nextToken());\n            int sum=0;\n            int max =0;\n            for(int i=1; i<n; i++){\n                a[i] = Integer.parseInt(st.nextToken());\n                if(a[i]<a[i-1]){\n                    sum+=a[i-1]-a[i];\n                }\n                if(max<a[i-1]-a[i]){\n                    max=a[i-1]-a[i];\n                }\n            }\n            out.print(\"Case #\" + (nmnm+1) + \": \" + sum + \" \");\n            sum=0;\n            for(int i=0; i<n-1; i++){\n                if(a[i]<max){\n                    sum+=a[i];\n                }\n                else{\n                    sum+=max;\n                }\n            }\n            out.println(sum);\n        }\n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"13","func":"class a {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        int T = in.nextInt();\n        for (int t = 1; t <= T; t++) {\n            \/\/ TODO\n\n            int m1 = 0;\n            int m2 = 0;\n            int max = 0;\n            \n            int n = in.nextInt();\n            int[] interv = new int[n];\n            for (int i = 0; i < n; i++) {\n                interv[i] = in.nextInt();\n                \n                if (i > 0 && interv[i] < interv[i-1]) {\n                    int diff = (interv[i-1] - interv[i]);\n                    m1 += diff;\n                    max = Math.max(max, diff);\n                }\n            }\n            \n            for (int i = 0; i < n-1; i++) {\n                if (interv[i] < max) m2 += interv[i];\n                else m2 += max;\n            }\n            \n             \n            System.out.printf(\"Case #%d: %d %d\\n\", t, m1, m2);\n        }\n    }\n}"}
{"idx":"14","func":"class Main {\n\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder out = new StringBuilder();\n        int tests = Integer.parseInt(in.readLine());\n        int n;\n        int[] mushrooms;\n        int[] differences;\n        long totalDifferences;\n        String[] tok;\n        int maxDifference;\n        long linearCount;\n        \n        for(int testno = 1; testno <= tests; testno++)\n        {\n            out.append(\"Case #\").append(testno).append(\": \");\n            \n            n = Integer.parseInt(in.readLine());\n            tok = in.readLine().trim().split(\"\\\\s+\");\n            \n            mushrooms = new int[n];\n            differences = new int[n];\n            totalDifferences = 0;\n            maxDifference = 0;\n            linearCount = 0;\n            \n            mushrooms[0] = Integer.parseInt(tok[0]);\n            \n            for(int i = 1; i < n; i++)\n            {\n                mushrooms[i] = Integer.parseInt(tok[i]);\n                differences[i] = mushrooms[i - 1] - mushrooms[i];\n                maxDifference = Math.max(maxDifference, differences[i]);\n                totalDifferences += differences[i] > 0 ? differences[i] : 0;\n            }\n            \n            for(int i = 0; i < n - 1; i++)\n            {\n                if(mushrooms[i] >= maxDifference)\n                {\n                    linearCount += maxDifference;\n                }\n                else\n                {\n                    linearCount += mushrooms[i];\n                }\n            }\n            \n            out.append(totalDifferences).append(\" \").append(linearCount).append(\"\\n\");\n        }\n        \n        System.out.println(out);\n    }\n}"}
{"idx":"15","func":"class Main {\npublic static void main(String [] args)throws Exception{\n    BufferedReader br=new BufferedReader(new FileReader(\"C:\/users\/abhishek\/Desktop\/input.txt\"));\n    FileWriter f=new FileWriter(\"C:\/users\/abhishek\/Desktop\/output.txt\");\n    String newLine=System.getProperty(\"line.separator\");\n    int t=Integer.parseInt(br.readLine());\n    for(int test=1;test<=t;test++){\n    int n=Integer.parseInt(br.readLine());\n    int array[]=new int[n];\n    StringTokenizer st=new StringTokenizer(br.readLine());\n    for(int i=0;i<n;i++)array[i]=Integer.parseInt(st.nextToken());\n    int ans=0;\n    for(int i=0;i<n-1;i++){\n        if(array[i] <= array[i+1])continue;\n        else ans+=array[i]-array[i+1];\n    }\n    int min=-1;\n    for(int i=0;i<n-1;i++){\n        if(array[i] >= array[i+1])min=Math.max(min,array[i]-array[i+1]);\n    }\n    if(min <= 0){\n     f.write(\"Case #\" + test + \": \" + ans + \" \" + \"0\" + newLine);\n     continue;\n    }\n    int temp=0;\n    for(int i=0;i<n-1;i++){\n        temp+=Math.min(array[i],min);\n    }\n    f.write(\"Case #\" + test + \": \" + ans + \" \" +temp + newLine);\n    }\n    f.close();\n}\n}"}
{"idx":"16","func":"class Codejam {\n    \n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        \/\/System.setIn(new FileInputStream(\"input.txt\"));\n        Scanner in = null;\n        try {\n            in = new Scanner(new File(\"input.txt\"));\n        } catch (FileNotFoundException e1) {\n        }\n        try {\n            System.setOut(new PrintStream(new File(\"output.txt\")));\n        } catch (FileNotFoundException e) {\n        }\n        \n        int T = in.nextInt();\n        for (int t = 1; t <= T; t++) {\n            int n = in.nextInt();\n            int ar[] = new int[n];\n            int ma = 0;\n            int f = 0;\n            for (int i = 0; i < n; i++) {\n                ar[i] = in.nextInt();\n                if (i > 0) {\n                    ma = Math.max(ma, ar[i - 1] - ar[i]);\n                    if (ar[i] < ar[i-1]){\n                        f += ar[i - 1] - ar[i];\n                    }\n                }\n            }\n            \n            int s = 0;\n            for (int i = 1; i < n; i++) {\n                if (ar[i - 1] >= ma) {\n                    s += ma;\n                } else {\n                    s += ar[i - 1];\n                }\n            }\n            System.out.println(\"Case #\" + t + \": \" + f + \" \" + s);\n        }\n    }\n}"}
{"idx":"17","func":"class Mushroom {\n\n    public static void main(String[] args) {\n        final long startTime = System.currentTimeMillis();\n        BufferedReader reader = null;\n        BufferedWriter writer = null;\n        try {\n            reader = new BufferedReader(new FileReader(\".\/input\/A-large-mushroom.in\"));\n            writer = new BufferedWriter(new FileWriter(\".\/output\/mushroom-large.out\", false));\n            final int caseCount = Integer.parseInt(reader.readLine().toString());\n            System.out.println(\"Case count: \" + caseCount);\n            for (int k = 0; k < caseCount; k++) {\n                final int size = Integer.parseInt(reader.readLine());\n                final int[] shrooms = new int[size];\n                final String[] shroomsStr = reader.readLine().split(\" \");\n                int rate = 0;\n                for (int i = 0; i < size - 1; i++) {\n                    shrooms[i] = Integer.parseInt(shroomsStr[i]);\n                    shrooms[i + 1] = Integer.parseInt(shroomsStr[i + 1]);\n                    final int r = shrooms[i] - shrooms[i + 1];\n                    if (r > rate) {\n                        rate = r;\n                    }\n                }\n                int y = 0, z = 0;\n                for (int i = 0; i < size - 1; i++) {\n                    final int curr = shrooms[i];\n                    final int next = shrooms[i + 1];\n                    final int diff = curr - next;\n                    if (diff > 0) {\n                        y += diff;\n                    }\n                    if (rate > 0) {\n                        z += Math.min(curr, rate);\n                    }\n                }\n                System.out.println(Arrays.toString(shrooms) + \": \" + y + \" \" + z);\n                writer.write(\"Case #\" + (k + 1) + \": \" + y + \" \" + z + \"\\n\");\n            }\n            reader.close();\n            writer.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (final IOException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"Finished in: \" + (int) (System.currentTimeMillis() - startTime) \/ 1000 + \"s\");\n    }\n\n}"}
{"idx":"18","func":"class A1 {\n\n    public static void main(String[] args) {\n        \n        Scanner sc;\n        try {\n            sc = new Scanner (new File(\n                    \"D:\/\/Java WS\/\/GoogleCodeJam\/\/src\/\/A-large.in\"));\n            File outputA1Large = new File(\n                    \"D:\/\/Java WS\/\/GoogleCodeJam\/\/src\/\/A1Large.txt\");\n            PrintWriter pw = new PrintWriter(outputA1Large);\n                    \n        int testCases = sc.nextInt();\n        for (int cases = 0; cases<testCases; cases++)\n        {\n            int arrSize = sc.nextInt();\n            int arr[] = new int[arrSize];\n            for(int i=0; i<arrSize;i++)\n            {\n                arr[i]= sc.nextInt();\n            }\n            int sum=0;\n            int sum2 =0;\n            int maxDiff = 0;\n            for(int i=1; i<arrSize;i++)\n            {\n                if(arr[i-1]>arr[i])\n                {\n                    int diff = arr[i-1] - arr[i];\n                    sum += diff;\n                    if(diff>maxDiff)\n                    {\n                        maxDiff = diff;\n                    }\n                }\n            }\n            for(int i=0; i<arrSize-1;i++)\n            {\n                if(arr[i]<=maxDiff)\n                    sum2 += arr[i];\n                else\n                    sum2 += maxDiff;\n            }\n            \n            System.out.printf(\"Case #%d: %d %d\\n\", cases+1, sum, sum2);\n            pw.println(\"Case #\"+(cases+1)+\": \"+sum+\" \"+ sum2);\n\n        }\n        \n        pw.close();\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n\n    }\n\n}"}
{"idx":"19","func":"class A {\n    public static void main(String... args) throws Exception{\n        \/\/System.out.println(Arrays.toString(args));\n        \/\/System.out.println(Arrays.toString(args));\n        Scanner sinput = new Scanner(new File(\"A-large.in\"));\n        \/\/Scanner input = new Scanner(new File(args[0]));\n        \/\/Scanner input = new Scanner(System.in);\n        int numCases = sinput.nextInt();\n        \/\/System.out.printf(\"num=%d\\n\",numCases);\n        \/\/Scanner sinput = new Scanner(System.in);\n        System.setOut(new PrintStream(\"alarge.out\"));\/\/System.out.print\u306e\u51fa\u529b\u5148\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u3048\u308b\n        for (int n = 0; n < numCases; n++) {\n            int N = sinput.nextInt();\n            \/\/System.out.printf(\"N=%d\\n\",N);\n            int[] ps = new int[N];\n            for (int i = 0; i < N; i++){\n                ps[i] = sinput.nextInt();\n                \/\/System.out.printf(\"ps[i]=%d\\n\",ps[i]);\n            }\n            int a=0;\n            int b=0;\n            int dif=0;\n            for(int i=1;i<N;i++){\n                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    \n            }\n            for(int i=1;i<N;i++){\n                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];\n                if(ps[i-1]<dif) b+=ps[i-1];\n                else b+=dif;\n            }\n            System.out.printf(\"Case #%d: %d %d\\n\", n + 1, a,b);\n        }\n    }\n}"}
{"idx":"20","func":"class MushroomMonster {\n    public static void main(String[] args) {\n\n        try {\n            Scanner scanner = new Scanner(new File(\"src\/MushroomMonster\/A-large.in\"));\n            PrintWriter writer = new PrintWriter(new File(\"src\/MushroomMonster\/result.txt\"));\n\n            int caseCnt = scanner.nextInt();\n\n            for (int i = 0; i < caseCnt; i++){\n\n                int mushRoomCnt = scanner.nextInt();\n                int firstCnt = 0;\n                int secondCnt = 0;\n\n                int firstNum = scanner.nextInt();\n\n                int[] nums = new int[mushRoomCnt];\n                nums[0] = firstNum;\n\n                int rate = 0;\n\n                for (int j = 1; j < mushRoomCnt; j++){\n\n                    int secondNum = scanner.nextInt();\n                    nums[j] = secondNum;\n\n                    if (firstNum >= secondNum) {\n                        firstCnt += firstNum - secondNum;\n                        rate = Math.max(firstNum - secondNum,rate);\n                    }\n\n                    firstNum = secondNum;\n                }\n\n                for (int j = 0; j < mushRoomCnt - 1; j++){\n                    secondCnt += Math.min(rate,nums[j]);\n                }\n\n                writer.println(\"Case #\" + (i + 1) + \": \" + firstCnt + \" \" + secondCnt);\n            }\n\n            writer.close();\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n\n    }\n}"}
{"idx":"21","func":"class A {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));\n        \n        int t = Integer.parseInt(in.readLine());\n        \n        for (int i = 1; i <= t; i++) {\n            \n            int n = Integer.parseInt(in.readLine());\n            String[] next = in.readLine().split(\" \");\n            int[] mushrooms = new int[n];\n            for (int j = 0; j < n; j++) {\n                mushrooms[j] = Integer.parseInt(next[j]);\n            }\n\n            int[] diffs = new int[n-1];\n            for (int j = 1; j < n; j++) {\n                diffs[j-1] = mushrooms[j] - mushrooms[j-1];\n            }\n            \n            int first = 0;\n            int second = 0;\n            \n            int smallestD = 9999999;\n            for (int j = 0; j < n - 1; j++) {\n                if (diffs[j] < 0) first += Math.abs(diffs[j]);\n            }\n            \n            for (int j = 0; j < n - 1; j++) {\n                smallestD = Math.min(smallestD, diffs[j]);\n            }\n            smallestD = Math.abs(smallestD);\n            \n            for (int j = 0; j < n - 1; j++) { \n                second += Math.min(mushrooms[j], smallestD);\n            }\n            \n            System.out.format(\"Case #%d: %d %d\\n\", i, first, second);\n        }\n    }\n}"}
{"idx":"22","func":"class SolutionA {\n\n    public static void main(String[] args) {\n        Scanner scanInput = new Scanner(System.in);\n        int T = scanInput.nextInt();\n        if(T < 1 || T >100)\n        {\n            return;\n        }\n        Integer[] method1 = new Integer[T];\n        Integer[] method2 = new Integer[T];\n        for(int t=1; t<=T; t++) {\n            int totalIntervals = scanInput.nextInt();\n            Integer[] mushes = new Integer[totalIntervals];\n            mushes[0] = scanInput.nextInt();\n            method1[t-1] =0;\n            method2[t-1] = 0;\n            int maxDiff = -1;\n            for(int i=1;i<totalIntervals;i++)\n            {\n                mushes[i] = scanInput.nextInt();\n                if(mushes[i-1] > mushes[i])\n                {\n                    int currDiff = mushes[i-1] - mushes[i];\n                    method1[t-1] += currDiff;\n                    if(maxDiff < currDiff)\n                    {\n                        maxDiff = currDiff;\n                    }\n                }\n                \n            }\n            for(int i=0;i<totalIntervals - 1;i++)\n            {\n                if(mushes[i]<=maxDiff)\n                {\n                    method2[t-1]+= mushes[i];\n                }\n                else\n                {\n                    method2[t-1] += maxDiff;\n                }\n            }\n            if(method1[t-1]<0) method1[t-1] = 0;\n            if(method2[t-1]<0) method2[t-1] = 0;\n        }\n        for(int c=1;c<=T;c++)\n        {\n            String result = \"Case #\" + c + \": \" + method1[c-1] + \" \" + method2[c-1];\n            System.out.println(result);\n        }\n\n    }\n\n}"}
{"idx":"23","func":"class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        int z, N, i, j, k;\n        int num[] = new int[1000];\n        int answ1, answ2, max, min;\n        boolean found;\n        for(z = 1; z <= T; z++){\n            N = in.nextInt();\n            answ1 = answ2 = max = min = 0;\n            for(i = 0; i < N; i++){\n                num[i] = in.nextInt();\n                if(i > 0 && num[i-1] > num[i])\n                    min = Math.max(min, num[i-1] - num[i]);\n                max = Math.max(max, num[i]);\n            }\n            \n            for(i = 1; i < N; i++)\n                if(num[i - 1] > num[i])\n                    answ1 += num[i - 1] - num[i]; \n            \n            for(k = min; k <= max; k++){\n                found = true;\n                answ2 = Math.min(num[0], k);\n                for(i = 1; i < N; i++){\n                    if(num[i - 1] - k > num[i]){\n                        found = false;\n                        break;\n                    }\n                    if(i != N - 1)\n                        answ2 += Math.min(k, num[i]); \n                }\n                if(found)\n                    break;\n                \n            }\n            \n            System.out.println(\"Case #\" + z + \": \" + answ1 + \" \" + answ2);\n        }\n    }\n}"}
{"idx":"24","func":"class ProblemA {\n    private static final String FOLDER_PATH = \"res\\\\round\\\\one\\\\a\";\n\/\/    private static final String FILE_PATH = \"A-small-practice.in\";\n\/\/    private static final String FILE_PATH = \"A-small-attempt0.in\";\n    private static final String FILE_PATH = \"A-large.in\";\n\n    public static void main(String[] args) throws Exception {\n        final FileReader fileReader = new FileReader(FOLDER_PATH + \"\\\\\" + FILE_PATH);\n        final BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n        final int numberOfTests = Integer.parseInt(bufferedReader.readLine());\n\n        for (int i = 0; i < numberOfTests; i ++) {\n            final int n = Integer.parseInt(bufferedReader.readLine());\n            final String[] m = bufferedReader.readLine().split(\" \");\n\n            int result_1 = 0;\n            int result_2 = 0;\n            int current = Integer.parseInt(m[0]);\n\n            int pace = 0;\n\n            for (int j = 0; j < m.length - 1; j ++) {\n                int newPace = Integer.parseInt(m[j]) - Integer.parseInt(m[j+1]);\n\n                if (newPace >= 0) {\n                    if (newPace > pace) {\n                        pace = newPace;\n                    }\n                }\n            }\n\n            for (int j = 1; j < m.length; j ++) {\n                int mInt = Integer.parseInt(m[j]);\n\n                if (current >= mInt) {\n                    result_1 += current - mInt;\n                }\n\n                result_2 += (current < pace) ? current : pace;\n                current = mInt;\n            }\n\n            System.out.println(\"Case #\" + (i + 1) + \": \" + result_1 + \" \" + result_2);\n        }\n    }\n}"}
{"idx":"25","func":"class r11 {\n    public static void main(String[] args) {\n        try {\n\n            Scanner input=new Scanner(new File(args[0]));\n            PrintWriter output=new PrintWriter(args[1]) ;\n            int casenumber = input.nextInt();\n            for(int i=0;i<casenumber;i++){\n                int len = input.nextInt(), method1=0,method2=0,maxrate=0;\n                int[] mushrooms = new int[len];\n                mushrooms[0]= input.nextInt();\n                for(int j=1;j<len;j++){\n                    mushrooms[j]=    input.nextInt();\n                    if( mushrooms[j]< mushrooms[j-1]){\n                        method1+=   mushrooms[j-1]- mushrooms[j];\n                        maxrate = Math.max(maxrate,mushrooms[j-1]- mushrooms[j]) ;\n                    }\n                }\n                for(int j=1;j<len;j++){\n\n                        method2+=  Math.min(maxrate,mushrooms[j-1]) ;\n\n\n                }\n                output.println(\"Case #\"+(i+1)+\": \"+method1 + \" \"+ method2);\n            }\n            output.flush();\n        }catch(FileNotFoundException e){}\n\n    }\n}"}
{"idx":"26","func":"class A {\n    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int t=1;t<=T;t++)\n        {\n            int N = sc.nextInt();\n            int[] arr = new int[N];\n            int first = 0, second=0;\n            int maxDff=0;\n            for(int n=0; n<N; n++)\n            {\n                arr[n] = sc.nextInt();\n\n                if(n>0)\n                {\n                    if(maxDff<(arr[n-1]-arr[n]))\n                        maxDff = (arr[n-1]-arr[n]);\n                    if(arr[n-1]>arr[n])\n                        first+=(arr[n-1]-arr[n]);\n                }\n            }\n            for(int n=0; n<N-1; n++)\n            {\n                if(arr[n]<maxDff)\n                    second+=arr[n];\n                else\n                    second+=maxDff;\n            }\n            System.out.println(\"Case #\"+t+\": \"+first+\" \"+second);\n        }\n    }\n}"}
{"idx":"27","func":"class A {\n    public static void main (String[]args)throws IOException{\n        BufferedReader x=new BufferedReader(new FileReader(\"Alarge.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"Alarge.out\")));\n        int t=Integer.parseInt(x.readLine());\n        for (int cases=1; cases<=t; cases++){\n            int n=Integer.parseInt(x.readLine());\n            int[]s=new int[n];\n            StringTokenizer st=new StringTokenizer(x.readLine());\n            for (int i=0; i<n; i++){\n                s[i]=Integer.parseInt(st.nextToken());\n            }\n            int maxgap=-1;\n            for (int i=1; i<n; i++){\n                if (s[i-1]-s[i]>maxgap)maxgap=s[i-1]-s[i];\n            }\n            int sum1=0;\n            for (int i=1; i<n; i++){\n                if (s[i]<s[i-1])sum1+=s[i-1]-s[i];\n            }\n            int sum2=0;\n            for (int i=0; i<n-1; i++){\n                sum2+=Math.min(maxgap,s[i]);\n            }\n            out.println(\"Case #\"+cases+\": \"+sum1+\" \"+sum2);\n        }\n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"28","func":"class Round1A {\n\n    public static void main(String[] args)\n    {\n        \n        Scanner s = new Scanner(System.in);\n        try {\n            s = new Scanner(new FileReader(\"input.txt\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n            s.close();\n            return;\n        }\n        \n        Writer out = null;\n        \n        try {\n            out = new BufferedWriter(new OutputStreamWriter(\n                  new FileOutputStream(\"output.txt\"), \"utf-8\"));\n        }\n        \n        catch ( IOException e ) {\n            e.printStackTrace();\n        }\n        \n        \n        \n        int t = s.nextInt();\n        \n\n        \n        int n, res1, res2;\n        \n        for(int i = 0; i < t; i++)\n        {     \n            System.out.println(\"Case #\" + (i+1));\n            \n            n = s.nextInt();\n            \n            int[] a = new int[n];\n            \n            for(int j = 0; j < n; j++)\n                a[j] = s.nextInt();\n            int n1 = a.length, res = 0;\n            for(int i1 = 0; i1 < n1-1; i1++)\n                if(a[i1] > a[i1+1])\n                    res += a[i1] - a[i1+1];\n            \n            res1 = res;\n            int rate = 0;\n            \n            int n2 = a.length, res3 = 0;\n            for(int i1 = 0; i1 < n2-1; i1++)\n                if(rate < (a[i1] - a[i1+1]))\n                    rate = a[i1] - a[i1+1];\n            \n            for(int i2 = 0; i2 < n2-1; i2++)\n                res3 += Math.min(a[i2], rate);\n            res2 = res3;\n            \n            try {\n                out.write(\"Case #\"+(i+1)+\": \"+ res1 +\" \"+ res2 + \"\\n\");\n            }\n            catch ( IOException e ) {\n                e.printStackTrace();\n            }\n        }\n        \n        \n        \n        try {\n        out.close();\n        }\n        catch ( IOException e ) {\n            e.printStackTrace();\n        }\n        \n        s.close();\n        \n    }\n\n}"}
{"idx":"29","func":"class CodeJam2015 {\n\n    final static String PROBLEM_NAME = \"applause\";\n    final static String WORK_DIR = \"\/Users\/eschra000\/dev-work\/CodeJam\/\" + PROBLEM_NAME + \"\/\";\n    final static String INPUT_FILE_NAME = \"input.txt\";\n    final static String OUTPUT_FILE_NAME = \"output.txt\";\n\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + INPUT_FILE_NAME));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR\n                + OUTPUT_FILE_NAME));\n        int caseCnt = sc.nextInt();\n        CodeJam2015 codeJam2015 = new CodeJam2015();\n        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {\n            \/\/System.out.println(\"Processing test case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum + 1) + \": \");\n            long start = System.currentTimeMillis();\n            int intervals = sc.nextInt();\n            int[] mushroomsAtInterval = new int[intervals];\n            int y = 0;\n            int z = 0;\n            for (int i = 0; i < intervals; i++) {\n                mushroomsAtInterval[i] = sc.nextInt();\n            }\n            \n            int maxRate = 0;\n            for (int i = 1; i < intervals; i++) {\n                y += Math.max(mushroomsAtInterval[i-1] - mushroomsAtInterval[i], 0);\n                maxRate = Math.max(maxRate, mushroomsAtInterval[i-1] - mushroomsAtInterval[i]);\n            }\n            \n            for (int i = 0; i < intervals - 1; i++) {\n                z+= Math.min(mushroomsAtInterval[i], maxRate);\n            }\n            \n            pw.println(y + \" \" + z);\n            long end = System.currentTimeMillis();\n            \/\/System.out.println(\"Case took \" + (end - start) + \"ms\");\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n\n}"}
{"idx":"30","func":"class Task1 {\n    public static void main(String[] args) throws FileNotFoundException {\n        File file = new File(\"D:\/Development\/Competitions\/GoogleCodeJam\/GoogleCodeJam2015\/data\/A-large.in\");\n        PrintStream out = new PrintStream(new FileOutputStream(\"D:\/Development\/Competitions\/GoogleCodeJam\/GoogleCodeJam2015\/data\/A-large.out\"));\n        System.setOut(out);\n        \n        Scanner sc = new Scanner(file);\n        int T = sc.nextInt();\n        int[] result1 = new int[T];\n        int[] result2 = new int[T];\n        \n        for (int i = 0; i < T; ++i)\n        {\n            int N = sc.nextInt();\n            result2[1] = 0;\n            result2[i] = 0;\n            int eatTempo = 0;\n            int[] pieces = new int[N];\n            pieces[0] = sc.nextInt();\n            for (int j = 1; j < N; ++j)\n            {\n                pieces[j] = sc.nextInt();\n                result1[i] += Math.max(0, pieces[j - 1] - pieces[j]);\n                eatTempo = Math.max(eatTempo, pieces[j - 1] - pieces[j]);\n            }\n            \n            for (int j = 0; j < N - 1; ++j)\n                result2[i] += Math.min(eatTempo, pieces[j]);\n        }\n        sc.close();\n        \n        for (int i = 0; i < T; ++i)\n            System.out.println(String.format(\"Case #%d: %d %d\", i + 1, result1[i], result2[i]));\n    }\n}\n\n\n\/*\nProblem\n\n\n*\/"}
{"idx":"31","func":"class A {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner sc = new Scanner(new File(\"A-small.in\"));\n        int cases = sc.nextInt();\n        for (int i=1;i<=cases ;i++){\n            int N = sc.nextInt();\n            int m[] = new int[N];\n            String temp = sc.nextLine().trim();\n\n            for (int j=0;j<N;j++){\n                m[j] = sc.nextInt();\n            }\n\n            \/\/First method\n            int prev=0;\n            long first=0;\n            for (int m0 : m){\n                first += Math.max(prev-m0,0);\n                prev=m0;\n            }\n\n            \/\/Second method\n            long second=0;\n            int min_eat_per_turn=0;\n            prev=0;\n            for (int m0 : m){\n                min_eat_per_turn = Math.max(min_eat_per_turn,prev-m0);\n                prev=m0;\n            }\n            for (int m0 : Arrays.copyOf(m,N-1)){\n                second += Math.min(m0,min_eat_per_turn);\n            }\n\n\n            System.out.println(\"Case #\"+i+\": \"+first+\" \"+second);\n        }\n    }\n}"}
{"idx":"32","func":"class A {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int zz = 1; zz <= T; zz++) {\n            int N = in.nextInt();\n            long[] M = new long[N];\n            for (int i = 0; i < N; i++)\n                M[i] = in.nextInt();\n            long ans1 = 0;\n            for (int i = 0; i < N - 1; i++) {\n                ans1 += max(0, M[i] - M[i+1]);\n            }\n            long max = 0;\n            for (int i = 0; i < N - 1; i++) {\n                max = max(max, M[i] - M[i+1]);\n            }\n            long ans2 = 0;\n            for (int i = 0; i < N - 1; i++)\n                ans2 += min(max, M[i]);\n\n            System.out.format(\"Case #%d: %d %d\\n\", zz, ans1, ans2);\n        }\n    }\n}"}
{"idx":"33","func":"class Mushrooms {\n    private static int[]mushrooms;\n    public static void main(String[]args) throws Exception\n    {\n        PrintWriter o=new PrintWriter(new File(\"mushroomsout2.txt\"));\n        Scanner scan=new Scanner(new File(\"A-large (2).in\"));\n        int n=Integer.parseInt(scan.nextLine());\n        for(int i=1;i<=n;i++)\n        {\n            int size=Integer.parseInt(scan.nextLine());\n            mushrooms=new int[size];\n            String[] sa=scan.nextLine().split(\" \");\n            for(int j=0;j<size;j++)\n                mushrooms[j]=Integer.parseInt(sa[j]);\n            ArrayList<Integer>diffs=new ArrayList<Integer>();\n            for(int j=0;j<size-1;j++)\n                diffs.add(mushrooms[j]-mushrooms[j+1]);\n            Collections.sort(diffs,Collections.reverseOrder());\n            int count=0;\n            for(int j:diffs)\n                if(j>0)\n                    count+=j;\n            int count2=0;\n            for(int j=0;j<size-1;j++)\n            {\n                if(mushrooms[j]-diffs.get(0)>=0)\n                    count2+=diffs.get(0);\n                else\n                    count2+=mushrooms[j];\n            }\n            o.println(\"Case #\"+i+\": \"+count+\" \"+count2);\n        }\n        o.close();\n    }\n}"}
{"idx":"34","func":"class Mushroom{\n    static int[] arr = new int[1002];\n    public static void main(String[] args) throws Exception{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder sb = new StringBuilder();\n        int T = Integer.parseInt(br.readLine().trim());\n        for(int i = 1; i <= T; i++){\n            int N = Integer.parseInt(br.readLine().trim());\n\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int maxDiff = 0;\n            int methodA = 0;\n            for(int j = 0; j < N; j++){\n                arr[j] = Integer.parseInt(st.nextToken());\n                if(j != 0 && arr[j] < arr[j-1]){\n                    methodA += (arr[j-1] - arr[j]);\n                    if(arr[j-1] - arr[j] > maxDiff)    maxDiff = arr[j-1] - arr[j];\n                }\n            }\n            int methodB = 0;\n            if(maxDiff != 0){\n                for(int j = 0; j < N - 1; j++)\n                    methodB += Math.min(arr[j], maxDiff);\n            }\n            sb.append(String.format(\"Case #%d: %d %d\\n\", i, methodA, methodB));\n        }\n\n        System.out.print(sb);\n        br.close();\n    }\n\n\n\n}"}
{"idx":"35","func":"class Main {\n    long gcd(long a,long b){\n        return b == 0 ? a : gcd(b,a % b);        \n    }\n    public static void main(String[] s1) throws Exception {\n        Main r = new Main();\n        File out = new File(\"output.txt\");\n        Scanner in = new Scanner(new File(\"input.txt\"));\n        PrintStream ostr = new PrintStream(new FileOutputStream(out));\n        int T = in.nextInt();\n        int N = 0;\n        while(N++<T){\n            BigInteger result = new BigInteger(\"0\");\n            int n = in.nextInt();\n            int m[] = new int[n];\n            for (int i=0; i<n; i++){\n                m[i] = in.nextInt();\n            }\n            int res1 = 0;\n            for (int i=0; i<n-1; i++)\n                if(m[i]>m[i+1])\n                    res1+=m[i]-m[i+1];\n        \n            \n            int res2 = 0;\n            int max =0;\n            for (int i=0; i<n-1; i++)\n                if(m[i]-m[i+1]>max)\n                    max = m[i]-m[i+1];\n            for (int i=0; i<n-1; i++)\n                if(m[i]-max<0)\n                    res2 += m[i];\n                else\n                    res2+=max;\n            ostr.printf(\"Case #%d: %d %d%n\", N, res1, res2);\n        }\n    }\n}"}
{"idx":"36","func":"class mush\n{\n    public static void main (String [] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader (new FileReader (\"A-large.in\"));\n        PrintWriter pw = new PrintWriter(new BufferedWriter (new FileWriter (\"mush.out\")));\n        \n      int t = Integer.parseInt (br.readLine ());\n        for(int i=0; i<t; i++) {\n         int n = Integer.parseInt (br.readLine ());\n         int anum[] = new int[n];\n         StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n         for(int j=0; j<n; j++)\n            anum[j] = Integer.parseInt (st.nextToken());\n         int eat1=0;\n         for(int j=0; j<n-1; j++) {\n            if(anum[j]>anum[j+1])\n               eat1+=anum[j]-anum[j+1];\n         }\n         int max=0;\n         for(int j=0; j<n-1; j++) {\n            if(anum[j]-anum[j+1] > max)\n               max = anum[j]-anum[j+1];\n         }\n         int eat2=0;\n         for(int j=0; j<n-1; j++) {\n            if(anum[j] < max)\n               eat2 += anum[j];\n            else\n               eat2+=max;\n         }\n         pw.println(\"Case #\" + (i+1) + \": \" + eat1 + \" \" + eat2);\n      }\n      br.close();\n      pw.close();\n    }\n}"}
{"idx":"37","func":"class Jam1AA{\n    public static void main(String[] args) throws IOException{\n        BufferedReader f = new BufferedReader( new FileReader(\"g.in\"));\n        PrintWriter out = new PrintWriter( new BufferedWriter( new FileWriter(\"gJamout.txt\")));\n        \/\/Scanner f = new Scanner(System.in);    \n        int t = Integer.parseInt(f.readLine());\n        for(int iii = 1; iii <= t; iii++){\n            int num = Integer.parseInt(f.readLine());\n            String[] cur = f.readLine().split(\" \");    \n            int[] te = new int[num];\n            for(int i = 0; i < num; i++){\n                te[i] = Integer.parseInt(cur[i]);\n            }\n            int res1 = 0;\n            for(int i = 1; i < num; i++){\n                if(te[i] < te[i - 1]){\n                    res1 += te[i - 1] - te[i];\n                }\n            }\n            int res2 = 0; int md = 0;\n            for(int i = 1; i < num; i++){\n                md = Math.max(md, te[i - 1] - te[i]);\n            }\n            for(int i = 0; i < num - 1; i++){\n                res2 += Math.min(md, te[i]);\n            }\n            out.println(\"Case #\" + iii + \": \" + res1 + \" \" + res2);\n        }\n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"38","func":"class MushroomMonster2 {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int i = 1; i <= T; i++) {\n            int N = in.nextInt();\n            int[] intervals = new int[N];\n            for (int j = 0; j < N; j++) {\n                intervals[j] = in.nextInt();\n            }\n             int eat1 = 0;\n        for (int j = 0; j < intervals.length - 1; j++) {\n            if (intervals[j] > intervals[j + 1]) {\n                eat1 += intervals[j] - intervals[j + 1];\n            }\n        }\n       \n        int eat2 = 0, maxEaten = 0;\n        for (int j = 0; j < intervals.length - 1; j++) {\n            if (intervals[j] - intervals[j + 1] > maxEaten) {\n                maxEaten = intervals[j] - intervals[j + 1];\n            }\n        }\n        \n        for (int j = 0; j < intervals.length - 1; j++) {\n            if (intervals[j] <= maxEaten) {\n                eat2 += intervals[j];\n            } else {\n                eat2 += maxEaten;\n            }\n        }\n\n       \n        System.out.println(\"Case #\" + (i) + \": \" + eat1 + \" \" + eat2);\n        }\n    }\n\n\n}"}
{"idx":"39","func":"class CodeJamA {\n\n    public static void main(String[] args) throws IOException {\n        System.setIn(new FileInputStream(\"A-large.in\"));\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(bf.readLine());\n        for (int XXX = 0; XXX < T; XXX++) {\n            bf.readLine();\n            int X[];\n            String data[] = bf.readLine().split(\" \");\n            X = new int[data.length];\n            int prev = Integer.parseInt(data[0]);\n            X[0] = prev;\n            int A = 0;\n            int B = 0;\n            int dif = 0;\n            int Z = 0;\n            for (int i = 1; i < data.length; i++) {\n                X[i] = Integer.parseInt(data[i]);\n                if (prev > X[i]) {\n                    dif = prev - X[i];\n                    A += dif;\n                    if (dif > Z) {\n                        Z = dif;\n                    }\n                }\n                prev = X[i];\n            }\n\n            B = 0;\n            for (int i = 0; i < data.length - 1; i++) {\n                if (X[i] <= Z) {\n                    B += X[i];\n                } else {\n                    B += Z;\n                }\n            }\n\n            System.out.printf(\"Case #%d: %d %d\\n\", XXX + 1, A, B);\n        }\n\n    }\n\n}"}
{"idx":"40","func":"class MushroomMonster {\n    public static void main(String[] args) throws Exception {\n        if (args.length == 0) {\n            throw new IllegalArgumentException(\"Require input file name\");\n        }\n        Scanner sc = new Scanner(new FileReader(args[0]));\n        String outFilename = args[0].replaceFirst(\"[.][^.]+$\", \"\").concat(\".out\");\n        PrintWriter pw = new PrintWriter(new FileWriter(outFilename));\n        int caseCnt = sc.nextInt();\n        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {\n            pw.print(\"Case #\" + (caseNum + 1) + \": \");\n            MushroomMonster r = new MushroomMonster();\n            \/**\n             * for integer:\n             *     x = sc.nextInt();\n             * for long:\n             *     x = sc.nextLong();\n             * for double:\n             *     x = Double.parseDouble(sc.next());\n             * for charArray:\n             *     x = sc.next().toCharArray();\n             **\/\n            int N = sc.nextInt();\n            int[] m = new int[N];\n            int counter1 = 0;\n            int counter2 = 0;\n            double max_rate = 0.0;\n            for (int i = 0; i < N; i++) {\n                m[i] = sc.nextInt();\n                if (i > 0) {\n                    if (m[i] < m[i-1]) {\n                        int delta = m[i-1] - m[i];\n                        counter1 += delta;\n                        double rate = delta\/10.0;\n                        if (rate > max_rate) {\n                            max_rate = rate;\n                        }\n                    }\n                }\n            }\n            for (int i = 1; i < N; i++) {\n                counter2 += Math.min(m[i-1], (int)(10*max_rate));\n            }\n            pw.printf(\"%d %d\\n\", counter1, counter2);\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"41","func":"class A {\n    \npublic static void main(String[] args){\n        \n\n        try {\n            Scanner in = new Scanner(new File(args[0]));\n            BufferedWriter bw = new BufferedWriter(new FileWriter( new File(\"A-output.txt\"),false));\n            \n            \n            int T = in.nextInt();\n            \n            for(int i=0;i<T;i++){\n                \n                int totNum = in.nextInt();\n                int[] musStates = new int[totNum];\n                \n                int methodA = 0 ;\n                int methodB = 0 ;\n                int maxDiff = 0 ;\n                musStates[0] = in.nextInt();\n                \n                for(int j=1;j<totNum;j++){\n                    musStates[j] = in.nextInt();\n                    \n                    int di = musStates[j] - musStates[j-1] ;\n                    if(di<0){\n                        di = Math.abs(di);\n                        methodA += di ;\n                        \n                        if(maxDiff < di ){\n                            maxDiff = di ;\n                        }\n                    }\n                }\n                \n                for(int j=0;j<totNum-1;j++){\n                    if(musStates[j]<maxDiff){\n                        methodB += musStates[j];\n                    }else{\n                        methodB += maxDiff ;\n                    }\n                }\n                \n                \n                System.out.println(\"Case #\"+(i+1)+\": \" + methodA + \" \" + methodB);\n                bw.write(\"Case #\"+(i+1)+\": \" + methodA + \" \" + methodB );\n                bw.newLine();\n            }\n            \n            if(in!=null)in.close();\n            if(bw!=null)bw.close();\n            \n            \n        }catch(Exception ex){\n            ex.printStackTrace();\n        }\n            \n        \n    }\n\n}"}
{"idx":"42","func":"class A {\n    static Scanner sc = null;\n    static BufferedReader br = null;\n    static PrintWriter out = null;\n    static PrintStream sysout = System.out;\n    static Random rnd = new Random();\n    \n    int INF = Integer.MAX_VALUE \/ 10;\n    double DF = 0.0000000001;\n    \n    long b = 1;\n    int N = 0;\n    int M = 0;\n    \n\n    \n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) throws Exception{\n        File file = new File(\"A-large.in\");\n        if(file.exists()){\n            System.setIn(new BufferedInputStream(new FileInputStream(file)));\n        }\n        else{\n            throw new Exception(\"can't find a input file : \" + file.getAbsolutePath());\n        }\n        \/\/sc =  new Scanner(System.in);\n        br = new BufferedReader(new InputStreamReader(System.in));\n        FileWriter fw = new FileWriter(new File(\"output.txt\"));\n        out = new PrintWriter(fw);\n        \n        A b = new A();\n        int T = 0;\n        if(sc != null){\n            T = sc.nextInt();\n        }\n        else{\n            T = parseInt(br.readLine());\n        }\n        int t = 1;\n        while(t <= T){\n            out.print(\"Case #\" + t + \": \");\n            System.out.print(\"Case #\" + t + \": \");\n            String s = A.br.readLine();\n            int N = Integer.parseInt(s);\n            \n            int[] d = new int[N];\n            s = A.br.readLine();\n            String[] sp = s.split(\" \");\n            for(int i = 0; i < N; i++){\n                d[i] = Integer.parseInt(sp[i]);\n            }\n            int A1 = 0;\n            int A2 = 0;\n            for(int i = 0; i < N-1; i++){\n                if(d[i] > d[i+1]){\n                    A1 += d[i] - d[i+1];\n                    A2 = Math.max(d[i] - d[i+1], A2);\n                }\n                \n            }\n            \n            \n            long ans = 0;\n            for(int i = 0; i < N-1; i++){\n                if(d[i] < A2){\n                    ans += d[i];\n                }\n                else{\n                    ans += A2;\n                }\n            }\n            String s1 = A1 + \" \" + ans;\n            A.out.println(s1);\n            System.out.println(s1);\n            t++;\n        }\n        out.close();\n        fw.close();\n    }\n}"}
{"idx":"43","func":"class A {\n\n    public static void main(String[] args) {\n        \n        Scanner k = new Scanner(System.in);\n        int T = k.nextInt();\n        System.out.println();\n        for(int i = 0; i < T; i++)\n        {\n            int N = k.nextInt();\n            k.nextLine();\n            String input = k.nextLine();\n            Scanner sc = new Scanner(input);\n            int m1 = sc.nextInt();\n            int answer1 = 0;\n            int answer2 = 0;\n            int max = 0;\n            for(int j = 1; j < N; j++)\n            {\n                int m0 = m1;\n                m1 = sc.nextInt();\n                if(m0 - m1 > 0)\n                {\n                    answer1+=m0-m1;\n                    if(m0-m1 > max)\n                        max = m0-m1;\n                }\n                \n            }\n            sc = new Scanner(input);\n            for(int j = 0; j < N-1; j++)\n            {\n                int m = sc.nextInt();\n                answer2 += Math.min(m, max);\n            }\n            System.out.println(\"Case #\"+(i+1)+\": \"+answer1 + \" \" + answer2);\n        }\n\n    }\n\n}"}
{"idx":"44","func":"class A\n{\n\n    \/\/public static String fileName = \"res\/r1a-A-sample.in\";\n    \/\/public static String fileName = \"res\/r1a-A-small-attempt0.in\";\n    \/\/public static String fileName = \"res\/r1a-A-small-attempt1.in\";\n    public static String fileName = \"res\/r1a-A-large.in\";\n            \n    \n    public static void main(String[] args) throws Exception\n    {\n        Scanner scanner = new Scanner(new File(fileName));\n        \n        int T = scanner.nextInt();\n        for (int i = 0; i < T; i++)\n        {\n            int N = scanner.nextInt();\n            int[] in = new int[N];\n            for (int j = 0; j < N; j++)\n            {\n                in[j] = scanner.nextInt();\n            }\n            long out = 0;\n            int start = 0;        \n            for (int i1 = 0; i1 < in.length; i1++)\n            {\n                if (in[i1] > start)\n                {\n                    start = in[i1];\n                }\n                else\n                {\n                    out += (start - in[i1]);\n                    start = in[i1];\n                }\n            }\n            \n            long y = out;\n            \/\/ max difference is at least 1 rate\n            int maxDiff = 0;\n            long out1 = 0;\n            for (int i2 = 0; i2 < in.length - 1; i2++)\n            {\n                if ( (in[i2] - in[i2+1] > maxDiff))\n                {\n                    maxDiff = (in[i2] - in[i2+1]);\n                }\n            }\n            \n            long rate = maxDiff;\n            for (int i1 = 0; i1 < in.length - 1; i1 ++)\n            {\n                out1 += Math.min(rate, in[i1]);\n            }\n            long z = out1;\n            \n            System.out.println(\"Case #\" + (i+1) + \": \" + y + \" \" + z);\n        }\n        \n        scanner.close();\n    }\n\n}"}
{"idx":"45","func":"class GC1AA_15{\n    public static void main(String args[]){\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int ca = 1; ca <= T; ca++){\n            int N = sc.nextInt();\n            int arr[] = new int[N];\n            for(int i = 0; i < N ; i++)\n                arr[i] = sc.nextInt();\n\n            int a = 0;\n            int b = 0;\n\n            int max = 0;\n            for(int i = 0; i < N-1; i++){\n                if(arr[i] > arr[i+1]){\n                    a += arr[i] - arr[i+1];\n                    max = Math.max(max,arr[i] - arr[i+1]);\n                }\n            }\n\n            for(int i = 0; i < N-1; i++)\n                b += Math.min(max,arr[i]);\n            System.out.printf(\"Case #%d: %d %d\\n\",ca,a,b);\n        }\n    }\n}"}
{"idx":"46","func":"class ProblemA {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        long startTime=System.currentTimeMillis();\/\/Start time\n        try {\n            BufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\n            BufferedWriter out = new BufferedWriter(new FileWriter(\"A-large.out\"));\n            String line = null;\n            line = in.readLine();\n            \n            int T = Integer.parseInt(line);\n            for(int i=0;i<T;i++){\n                line = in.readLine();\n                int N = Integer.parseInt(line);\n                line = in.readLine();\n                String [] tokens = line.split(\" \");                \n                int [] V = new int [N];\n                for (int k=0;k<N;k++){\n                    V[k]= Integer.parseInt(tokens[k]);\n                }\n                int a=0,b=0,max=0;\n                for (int k=0;k<N-1;k++){\n                    if (V[k]>V[k+1]){\n                        a=a+V[k]-V[k+1];\n                        if (V[k]-V[k+1]>max){\n                            max=V[k]-V[k+1];\n                        }\n                    }\n                }\n                for (int k=0;k<N-1;k++){\n                    if (V[k]>=max){\n                        b=b+max;\n                    } else{\n                        b=b+V[k];\n                    }\n                }\n                \n                System.out.println(\"Case #\" + (i+1) +\": \" + a + \" \" + b);    \n                out.write(\"Case #\" + (i+1) +\": \" + a + \" \" + b + \"\\n\");\n            }\n            in.close();    \n            out.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(\"File not found\");\n            e.printStackTrace();\n        } catch (IOException e) {\n            System.out.println(\"IOException\");\n            e.printStackTrace();\n        }\n        long endTime=System.currentTimeMillis();\/\/End time\n        System.out.println(\"Running time is \"+(endTime-startTime)+\"ms\");\n\n    }\n\n}"}
{"idx":"47","func":"class problem1{\n     \n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int numTestCases = sc.nextInt();\n        \n        \/\/Variable declarations\n        int N,m,a,b,c,d,temp;\n        int[] arr;\n        \n        \/*\n\n        a = min amount from 1st method\n\n        b = min amount from 2nd method\n\n        *\/\n\n        \n        for (int i = 0; i < numTestCases; i++) {\n            \/\/Main working area\/\/         \n            N = sc.nextInt();\n            arr = new int[N];\n            \/\/Input\/\/\n            for(int j = 0; j < N; j++) {\n                arr[j] = sc.nextInt();\n            }\n          \n            \/\/Calculate A\n            a=0;\n            for(int j = 0; j < N-1; j++) {\n                d = arr[j] - arr[j+1];            \n                if(d > 0){\n                    a+=d;\n                }\n            }\n\n        \n\n\n            \/\/Calculate B\n            b=0;\n            temp = 0;\n            for(int j = 0; j < N-1; j++) {\n                c = arr[j] - arr[j+1];\n\n\n                if(c > 0 && c > temp){    \n                    temp = c;\n                }\n            }\n\n            \n            for(int j = 0; j < N-1; j++) {\n                c = arr[j];\n\n                \n                if(c >= temp){    \n                    b += temp;\n                }\n                else{\n                    b += c;\n                }\n                \n            }\n            \n\n\n            \n\n\n            \/\/Output\/\/\n            System.out.println(\"Case #\"+ (i+1) +\": \" + a + \" \" + b);\n\n        }\n    }\n}"}
{"idx":"48","func":"class A {\n\n    public static void main(String args[]) throws FileNotFoundException {\n        final String defaultFile = A.class.getName()+\".in\";\n        final PrintStream out;\n        final InputStream in;\n        if (args.length==0) {\n            in = new FileInputStream(\"test\/\"+defaultFile);\n            out =System.out;\n\n        } else {\n            in = new FileInputStream(\"resources\/\"+args[0]);\n            out = new PrintStream(new FileOutputStream(\"result\/\"+args[0]));\n        }\n        Scanner scanner = new Scanner(in);\n        int nbTest = scanner.nextInt();\n        for (int i=0;i<nbTest;i++) {\n            scanner.nextLine();\n            int nb =scanner.nextInt();\n            scanner.nextLine();\n            List<Integer> data = new ArrayList<Integer>(nb);\n            for(int j=0;j<nb;j++)\n                data.add(scanner.nextInt());\n            int first =0;\n            int rate =0;\n            int second =0;\n            for (int i1=1;i1<data.size();i1++) {\n                int d =data.get(i1-1)-data.get(i1);\n                if (d>0) {\n                    first+=d;\n                    rate = Math.max(rate,d);\n                }\n            }\n            for (int i2=0;i2<data.size()-1;i2++) {\n                second += Math.min(rate,data.get(i2));\n            }\n\n            Object res = first+\" \"+second;\n            out.println(\"Case #\"+(i+1)+\": \"+res);\n        }\n\n    }\n}"}
{"idx":"49","func":"class prblmA {\n    final static String PROBLEM_NAME = \"prblmA\";\n    final static String WORK_DIR = \"F:\\\\GCJ\\\\\" + PROBLEM_NAME + \"\\\\\";\n\n    public static void main(String[] args) throws Exception {\n         \/\/Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-small-attempt0.in\"));\n         Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-large.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\n        int caseCnt = sc.nextInt();\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\n           \/\/ System.out.println(\"Processing test case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n            prblmA r = new prblmA();\n            int N= sc.nextInt();\n            int m[] = new int[N];\n             for(int i=0;i<N;i++)\n                m[i]=sc.nextInt();\n             int c1=0,c2=0;\n            int d=0;\n            for(int i=1;i<N;i++)\n            {\n                if(m[i]<m[i-1])\n                {\n                    c1+=m[i-1]-m[i]; \n                    if((m[i-1]-m[i])>d)\n                    {d=m[i-1]-m[i];}\n                }\n            }\n            for(int i=0;i<N-1;i++)\n            {\n                c2+=Math.min(m[i],d);\n            }\n                       \n             pw.println(c1+\" \"+c2);\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"50","func":"class Mushroom {\n\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        \/\/Input output files\n        String inPath = args[0];\n        String outPath = args[1];\n\n        File inFile = new File(inPath);\n        BufferedReader br = new BufferedReader(new FileReader(inFile));\n\n        File outFile = new File(outPath);\n        FileWriter fw = new FileWriter(outPath);\n        BufferedWriter bw = new BufferedWriter(fw);\n\n        StringTokenizer st = null;\n\n        \/\/Variables \n        int caseNumber = Integer.parseInt(br.readLine());\n\n        \/\/For each case\n        for (int i = 0; i < caseNumber; i ++) {\n\n            int numberOfInput = Integer.parseInt(br.readLine());\n            st = new StringTokenizer(br.readLine(), \" \");\n            int minX = 0;\n            int minY = 0;\n            int maxSpeed = 0;\n            int[] input = new int[numberOfInput];\n\n            \/\/Read Itemes\n            for (int n = 0; n < numberOfInput; n ++) {\n                input[n] = Integer.parseInt(st.nextToken());\n            }\n\n            for (int m = 0; m < numberOfInput - 1; m ++) {\n                    int diff = input[m] - input[m+1];\n                    if (diff > 0)\n                        minX += diff;\n                    if (diff > maxSpeed)\n                        maxSpeed = diff;\n            }\n\n            for (int p = 0; p < numberOfInput - 1; p ++) {\n                if (input[p] < maxSpeed)\n                    minY += input[p];\n                else\n                    minY += maxSpeed;\n            }\n\n\n            \/\/Write the result in the output file\n            bw.write(\"Case #\" + (i + 1) + \": \" + minX + \" \" + minY);\n            bw.newLine();\n        }\n\n        bw.close();\n    }\n}"}
{"idx":"51","func":"class Mushroom {\n    public static void main(String[] args) throws IOException {\n        BufferedReader f = new BufferedReader(new FileReader(\"mushroom.in\"));\n        PrintWriter out = new PrintWriter(new FileWriter(\"C:\/Users\/David\/Desktop\/mushroom.txt\"));\n        StringTokenizer t = new StringTokenizer(f.readLine());\n        int testCases = Integer.parseInt(t.nextToken());\n        for (int i = 1; i <= testCases; i++)\n        {\n            t = new StringTokenizer(f.readLine());\n            int N = Integer.parseInt(t.nextToken());\n            int[] M = new int[N];\n            t = new StringTokenizer(f.readLine());\n            for (int j = 0; j < N; j++)\n                M[j] = Integer.parseInt(t.nextToken());\n            \n            \/\/Method 1\n            int method1 = 0;\n            for (int j = 1; j < N; j++)\n                if (M[j] < M[j-1]) method1 += M[j-1] - M[j];\n            \n            \/\/method 2\n            int delta_X_Per_Ten = 0;\n            for (int j = 1; j < N; j++)\n                if (M[j] < M[j-1] && M[j-1] - M[j] > delta_X_Per_Ten)\n                    delta_X_Per_Ten=M[j-1] - M[j];\n            \n            int method2 = 0;\n            for (int j = 0; j < N - 1; j++)\n                method2 += Math.min(delta_X_Per_Ten, M[j]);\n            \n            String ans = \"Case #\" + i + \": \" + method1 + \" \" + method2;\n            out.println(ans);\n        }\n\n        out.close(); f.close(); System.exit(0);\n    }\n\n}"}
{"idx":"52","func":"class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for (int i = 1; i <= T; i++) {\n            int[] N = new int[sc.nextInt()];\n            for (int j = 0; j < N.length; j++) {\n                N[j] = sc.nextInt();\n            }\n            int count = 0, max = 0, sum = 0;\n            for (int j = 1; j < N.length; j++) {\n                count += Math.max(0, N[j - 1] - N[j]);\n                max = Math.max(max, N[j - 1] - N[j]);\n            }\n            for (int j = 0; j < N.length - 1; j++) {\n                sum += Math.min(max, N[j]);\n            }\n            System.out.println(\"Case #\" + i + \": \" + count + \" \" + sum);\n        }\n        sc.close();\n    }\n}"}
{"idx":"53","func":"class A {\n\n  static final String FILENAME = \"A-large\";\n  static final String IN = FILENAME + \".in\";\n  static final String OUT = FILENAME + \".out\";\n  Scanner sc;\n  BufferedWriter out;\n\n  public static void main(String args[]) throws Exception {\n    A r = new A();\n    r.sc = new Scanner(new File(A.IN));\n    r.out = new BufferedWriter(new FileWriter(A.OUT));\n    int t = Integer.parseInt(r.sc.nextLine());\n    for (int i = 1; i <= t; i++) {\n      r.out.write(\"Case #\" + i + \": \");\n      int n = r.sc.nextInt();\n    int[] m = new int[n];\n    for(int i1 = 0; i1 < n; i1++) {\n      m[i1] = r.sc.nextInt();\n    }\n    int sum1 = 0;\n    int cur = m[0];\n    for(int i4 = 1; i4 < n; i4++) {\n      if(m[i4] < cur) {\n        sum1 += cur - m[i4];\n      }\n      cur = m[i4];\n    }\n    r.out.write(Integer.toString(sum1) + \" \");\n    \n    int max = 0;\n    for(int i2 = 1; i2 < n; i2++) {\n      if(max < m[i2 - 1] - m[i2]) {\n        max = m[i2 - 1] - m[i2];\n      }\n    }\n    int sum2 = 0;\n    for(int i3 = 0; i3 < n - 1; i3++) {\n      sum2 += Math.min(max, m[i3]);\n    }\n    r.out.write(Integer.toString(sum2));\n    r.out.newLine();\n    r.out.flush();\n    }\n    r.sc.close();\n    r.out.close();\n  }\n}"}
{"idx":"54","func":"class A {\n\n    \n\n    \/\/ *************************************************************************************\n    \/\/ *********************************** FRAMEWORK\n    \/\/ ***************************************\n    \/\/ *************************************************************************************\n\n    public static BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n    public static boolean isStandardInput = false;\n\n    public static File input;\n    public static FileReader inputReader;\n    public static BufferedReader in;\n\n    public static File output;\n    public static FileWriter outputWriter;\n    public static BufferedWriter out;\n\n    public static StringTokenizer st;\n\n    public static void main(String[] args) throws Exception {\n        isStandardInput = true;\n        output = new File(\"test.out\");\n        outputWriter = new FileWriter(output);\n        out = new BufferedWriter(outputWriter);\n        isStandardInput = false;\n        input = new File(\"A-large\" + \".in\");\n        inputReader = new FileReader(input);\n        in = new BufferedReader(inputReader);\n        output = new File(\"A-large\" + \".out\");\n        outputWriter = new FileWriter(output);\n        out = new BufferedWriter(outputWriter);\n        \n        int T = Integer.parseInt(TOKEN());\n        \n        for (int i = 0; i < T; i++) {\n            int N = Integer.parseInt(TOKEN());\n            int[] m = new int[N];\n            for(int k = 0; k<N; k++){\n                m[k] = Integer.parseInt(TOKEN());\n            }\n            int first = 0;\n            int second = 0;\n            int rate = 0;\n            for (int k = 1; k < N; k++) {\n                if (m[k - 1] - m[k] > 0) {\n                    first += m[k - 1] - m[k];\n                    rate = Math.max(rate, m[k - 1] - m[k]);\n                }\n            }\n            for (int k = 0; k < N - 1; k++) {\n                second += Math.min(rate, m[k]);\n            }\n            String line = \"Case #\" + (i + 1) + \": \" + first + \" \" + second;\n            out.write(line);\n            out.write(\"\\n\");\n            System.out.println(line);\n        }\n        if (in != null)\n            in.close();\n        if (inputReader != null)\n            inputReader.close();\n        \n        if (out != null)\n            out.flush();\n        if (out != null)\n            out.close();\n        if (outputWriter != null)\n            outputWriter.close();\n    }\n\n    \n\n    \/\/ **************** PRINT METHODS ****************\n\n    \n\n    \/\/ **************** INPUT DECLARATION ****************\n\n    \n\n    \/\/ **************** INPUT READING ****************\n\n    static String TOKEN() throws IOException {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(isStandardInput ? stdin.readLine() : in.readLine());\n        return st.nextToken();\n    }\n}"}
{"idx":"55","func":"class AMushroomMonster {\n    public static void main(String[] args) {\n        Scanner scanner = null;\n        PrintWriter out = null;\n        try {\n            String inputFile = \"\/Users\/adarsh.sharma\/Documents\/coding\/java\/src\/com\/google\/code\/jam\/OneA\/A-large.in\";\n            scanner = new Scanner(new FileReader(inputFile));\n            String outFile = \"\/Users\/adarsh.sharma\/Documents\/coding\/java\/src\/com\/google\/code\/jam\/OneA\/A-large.out\";\n            out = new PrintWriter(outFile);\n\/\/            scanner = new Scanner(new InputStreamReader(System.in));\n\/\/            out = new PrintWriter(System.out);\n\n            int T = scanner.nextInt();\n            for (int t = 1; t <= T; t++) {\n                int N = scanner.nextInt();\n                List<Integer> A = new ArrayList<Integer>();\n                for (int n = 0; n < N; n++) {\n                    A.add(scanner.nextInt());\n                }\n\n                int X = 0;\n                for(int n=1; n<N; n++){\n                    X +=max(A.get(n-1)-A.get(n),0);\n                }\n\n                int minRate = 0;\n                for(int n=1; n<N; n++){\n                    minRate = max(A.get(n-1)-A.get(n),minRate);\n                }\n\n                int Y = 0;\n                for(int n=1; n<N; n++){\n                    Y+=min(A.get(n-1),minRate);\n                }\n\n                out.println(\"Case #\" + t + \": \" + X + \" \" + Y);\n\/\/                out.flush();\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            scanner.close();\n            out.close();\n        }\n    }\n\n}"}
{"idx":"56","func":"class Solution {\n    public static void main(String[] args) {\n        File file = new File(\"A-large.in\");\n        try {\n            Scanner sc = new Scanner(file);\n\n            int numOfTests = sc.nextInt();\n\n            for (int i = 1; i < numOfTests + 1; i++) {\n                int numOfPlates = sc.nextInt();\n                int[] arr = new int[numOfPlates];\n\n                for (int j = 0; j < arr.length; j++) {\n                    arr[j] = sc.nextInt();\n                }\n\n                int method1 = 0;\n\n                for (int j = 0; j < arr.length - 1; j++) {\n                    if (arr[j+1] < arr[j]) {\n                        method1 += (arr[j] - arr[j+1]);\n                    }\n                }\n\n                int method2 = 0;\n\n                int slope = Integer.MIN_VALUE;\n\n                for (int j = 0; j < arr.length - 1; j++) {\n                    if ((arr[j] - arr[j + 1]) > slope) {\n                        slope = arr[j] - arr[j+1];\n                    }\n                }\n\n                for (int j = 0; j < arr.length -1; j++) {\n                    if (arr[j] <= slope) {\n                        method2 += arr[j];\n                    } else {\n                        method2 += slope;\n                    }\n                }\n\n                System.out.println(\"Case #\" + i + \": \" + method1 + \" \" + method2);\n            }\n        } \n        catch (Exception e) {\n\n        }\n    }\n}"}
{"idx":"57","func":"class App {\n    public static final String INPUT_FILE_NAME = \"input.txt\";\n    public static final String OUTPUT_FILE_NAME = \"output.txt\";\n    \n    public static void main(String[] args) {\n        long beginTime = System.currentTimeMillis();\n        \n        try {\n            String inputName = INPUT_FILE_NAME;\n            String outputName = OUTPUT_FILE_NAME;\n        \n            if (args.length > 0)\n                inputName = args[0];\n        \n            if (args.length > 1)\n                outputName = args[1];\n        \n            try (BufferedReader reader = new BufferedReader(new FileReader(new File(inputName)))) {\n                try (PrintWriter writer = new PrintWriter(outputName)) {\n                    int nCases = Integer.parseInt(reader.readLine());\n                \n                    for (int nCase = 0; nCase < nCases; ++nCase) {\n                        int n = Integer.parseInt(reader.readLine());\n                        String[] data = reader.readLine().split(\" \");\n                        \n                        int counter1= 0;\n                        int counter2= 0;\n                        int prev = 0;\n                        int pace = 0;\n                        \n                        for (int i = 0; i < n; ++i) {\n                            int mushrums = Integer.parseInt(data[i]);\n                            \n                            if (prev > mushrums) {\n                                counter1 += prev - mushrums;\n                            \n                                if (pace < (prev - mushrums)) \n                                    pace = prev - mushrums;\n                            }\n                            prev = mushrums;\n                        }\n                            \n                        for (int i = 0; i < n-1; ++i) {\n                            int mushrums = Integer.parseInt(data[i]);\n                            if (mushrums > pace)\n                                counter2 += pace;\n                            else\n                                counter2 += mushrums;\n                        }\n\n                        String out = \"Case #\" + (nCase + 1) + \": \" + counter1 + \" \" + counter2;\n                        System.out.println(out);\n                        writer.println(out);\n                        \/\/writer.println(\"Case #\" + (nCase + 1) + \": \" + (richardWon ? \"RICHARD\" : \"GABRIEL\"));\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } \n        \n        long endTime = System.currentTimeMillis();\n        \n        System.out.println(String.format(\"Done. Spend %d ms\", endTime - beginTime));\n    }\n}"}
{"idx":"58","func":"class A {\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\n        int ntests = Integer.parseInt(bf.readLine());\n        for (int tc = 1; tc <= ntests; tc++) {\n            int n = Integer.parseInt(bf.readLine());\n            int[] arr = new int[n];\n            StringTokenizer st = new StringTokenizer(bf.readLine());\n            for (int i = 0; i < n; i++) {\n                arr[i] = Integer.parseInt(st.nextToken());\n            }\n\n            int firstMin = 0;\n            int maxDiff = 0;\n            for (int i = 1; i < n; i++) {\n                int diff = -arr[i] + arr[i - 1];\n                if (diff > 0) {\n                    firstMin += diff;\n                }\n\n                maxDiff = Math.max(maxDiff, diff);\n            }\n\n            int secondMin = 0;\n            for (int i = 1; i < n; i++) {\n                secondMin += Math.min(maxDiff, arr[i - 1]);\n            }\n\n            System.out.println(\"Case #\" + tc + \": \" + firstMin + \" \" + secondMin);\n        }\n    }\n}"}
{"idx":"59","func":"class Q1{\n    public static void main(String args[]){\n        File f = new File(args[0]);\n        try{\n            Scanner s = new Scanner(f);\n            int time = Integer.parseInt(s.next());\n            PrintWriter writer = new PrintWriter(\"output.txt\", \"UTF-8\");\n            for(int in = 1; in <= time; in++) {\n                int timeslots = Integer.parseInt(s.next());\n                int[] mushrooms = new int[timeslots];\n                for(int m = 0; m < timeslots; m ++){\n                    mushrooms[m] = Integer.parseInt(s.next());\n                }\n                int eat = 0;\n                int prev = mushrooms[0];\n                for(int i : mushrooms){\n                    if(i >= prev){\n                        prev = i;\n                    } else {\n                        eat += (prev - i);\n                        prev = i;\n                    }\n                }\n                int m1 = eat;\n                int interval = 0;\n                int eat1 = 0;\n                int prev1 = mushrooms[0];\n                for(int i2 = 1; i2<mushrooms.length;i2++){\n                    if(mushrooms[i2] < prev1){\n                        if(prev1 - mushrooms[i2] > interval){\n                            interval = prev1 - mushrooms[i2];\n                        }\n                    } \n                    prev1 = mushrooms[i2];\n                }\n                \n                for(int i1 = 0; i1 < mushrooms.length - 1; i1++){\n                    if(mushrooms[i1] <= interval){\n                        eat1 += mushrooms[i1]; \/\/ eat up;\n                    } else {\n                        eat1 += interval;\n                    }\n                }\n                int m2 = eat1;\n                System.out.println(\"Finished: \" + in);\n                writer.println(\"Case #\" + in + \": \" + m1 + \" \" + m2);\n            }\n            writer.close();\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"60","func":"class A {\n\/\/    static String file = \"A\";\n    static String file = \"A-large\";\n\n    public static void main(String[] args) throws IOException {\n        FileInputStream fis = new FileInputStream(file + \".in\");\n        InputStreamReader isr = new InputStreamReader(fis);\n        BufferedReader br = new BufferedReader(isr);\n\n        FileOutputStream fos = new FileOutputStream(file + \".out\");\n        OutputStreamWriter isw = new OutputStreamWriter(fos);\n        BufferedWriter bw = new BufferedWriter(isw);\n\n        String line = null;\n        List<String> lines = new ArrayList<String>();\n        while ((line = br.readLine()) != null) {\n            lines.add(line);\n        }\n\n        int problemCount = Integer.parseInt(lines.get(0));\n        int currentIndex = 1;\n        for (int i = 0; i < problemCount; i++) {\n            String line1 = lines.get(currentIndex++);\n            String line2 = lines.get(currentIndex++);\n            String[] vals = line2.split(\" \");\n            int[] ans = new int[vals.length];\n            for (int i4 = 0; i4 < vals.length; i4++) {\n                ans[i4] = Integer.valueOf(vals[i4]);\n            }\n            int[] mush = ans;\n            long[] min1 = new long[2];\n            \/\/        System.out.println(Arrays.toString(mush));\n                    \n                    for (int i2 = 0; i2 < mush.length - 1; i2++) {\n                        if (mush[i2+1] < mush[i2]) {\n                            min1[0] += mush[i2] - mush[i2+1];\n                        }\n                    }\n                    \n                    int rate = 0;\n                    for (int i3 = 0; i3 < mush.length - 1; i3++) {\n                        if (mush[i3+1] < mush[i3]) {\n                            rate = Math.max(rate, mush[i3] - mush[i3+1]);\n                        }\n                    }\n                    \n                    for (int i1 = 0; i1 < mush.length - 1; i1++) {\n                        min1[1] += Math.min(mush[i1], rate);\n                    }\n            long[] min = min1;\n            String r = \"Case #\" + (i + 1) + \": \" + min[0] + \" \" + min[1];\n\n\/\/            System.out.println(r);\n            bw.write(r);\n            bw.newLine();\n        }\n\n        if (bw != null)\n            bw.close();\n\n        if (br != null)\n            br.close();\n    }\n}"}
{"idx":"61","func":"class Problem1A {\n    private static final boolean DEBUG = false;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Problem1A prog = new Problem1A();\n\n        Scanner in = new Scanner(new FileReader(args[0]));\n        final int cntCases = in.nextInt();\n        in.nextLine();\n\n        for (int caseNum = 1; caseNum <= cntCases && in.hasNextLine(); caseNum++) {\n            in.nextLine();\n            String[] vals1 = in.nextLine().split(\"\\\\s+\");\n            int[] arr = new int[vals1.length];\n            for (int i1 = 0; i1 < vals1.length; i1++) {\n                arr[i1] = Integer.valueOf(vals1[i1]);\n            } \/\/discard!\n            final int[] vals = arr;\n            int sum1 = 0;\n            int prev1 = vals[0];\n            for (int i1 = 1; i1 < vals.length; i1++) {\n                int cur1 = vals[i1];\n                if (cur1 < prev1) {\n                    sum1 += (prev1 - cur1);\n                }\n                prev1 = cur1;\n            }\n\n            int ans1 = sum1;\n            int maxDiff = 0;\n                    int prev = vals[0];\n                    for (int i = 1; i < vals.length; i++) {\n                        int cur = vals[i];\n                        if (cur < prev) {\n                            maxDiff = Math.max(maxDiff, (prev-cur));\n                        }\n                        prev = cur;\n                    }\n            \n                    int sum = 0;\n                    prev = vals[0];\n                    for (int i = 1; i < vals.length; i++) {\n                        int cur = vals[i];\n            \/\/            int left = prev - maxDiff;\n                        sum += Math.min(prev, maxDiff);\n                        \/\/assert that the #remaining <= current amount.\n                        prev = cur;\n                    }\n            int ans2 = sum;\n            System.out.println(\"Case #\" + caseNum + \": \" + ans1 + \" \" + ans2);\n        }\n    }\n}"}
{"idx":"62","func":"class A2015 {\n\n\n    public static void main(String[] args) throws IOException {\n        A2015 trans = new A2015();\n        Path path = Paths.get(\"inputs\/\"+A2015.NAME + \".in\");\n        List<String> lines = Files.readAllLines(path);\n        \n        BufferedWriter out = new BufferedWriter(new FileWriter(\"output\/\"+A2015.NAME+\".out\"));\n        try {\n            try {\n                int count = parseInt(lines.remove(0));\n        \n                for (int i=0;i<count;i++) {\n                    String s[] = lines.get(2*i+1).split(\" \");\n                    int C = Integer.parseInt(lines.get(2*i).trim());\n                    \n                    int is[] = new int[C];\n                    \n                    for (int i2 = 0; i2 < C; i2++) {\n                        is[i2] = Integer.parseInt(s[i2]);\n                    }\n                    \n                    int prev = is[0];\n                    int maxv1 = 0;\n                    \n                    int mI = 0;\n                    for (int i1 = 1; i1 < C; i1++) {\n                        if (is[i1] < prev) {\n                            maxv1 += prev - is[i1];\n                            mI = Math.max(mI, prev - is[i1]);\n                        }\n                        prev = is[i1];\n                    }\n                    \n                    int maxv2 = 0;\n                    \n                    for (int i3 = 0; i3 < C - 1; i3++) {\n                        maxv2 += Math.min(is[i3], mI);\n                    }\n                    String str = maxv1 + \" \" + maxv2;\n                    out.write(\"Case #\"+(i + 1)+\": \"+str);\n                    if (i<count-1)\n                        out.write(System.getProperty(\"line.separator\"));\n                    System.out.println(lines.get(i));\n                    System.out.println(str);\n                }\n            } finally {\n                out.flush();\n                out.close();\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\/\/    private static final String ID = \"practice\";\n\/\/    private static final String SIZE = \"small\";\n\/\/    private static final String CODE = \"A\";\n\n    private static final String NAME = \"A-large\";\/\/\"B-small-attempt3\";\/\/CODE+\"-\"+SIZE+\"-\"+ID;\n\n}"}
{"idx":"63","func":"class Main1A2New {\n    \n    public static void main(String[] args){\n        \n        Scanner in = new Scanner(System.in);\n        \n        int numCases = in.nextInt();\n        \n        for(int Case = 0; Case < numCases; Case++){\n            \n            int times = in.nextInt();\n            int[] mushs = new int [times];\n            long consumptionOne = 0;\n            long consumptionTwo = 0;\n            long maxRate = 0;\n            for(int i = 0; i < times; i++){\n                mushs[i] = in.nextInt();\n                if(i > 0 && mushs[i] < mushs[i-1]){\n                    consumptionOne += mushs[i-1] - mushs[i];\n                }\n                if(i > 0 && (mushs[i-1] - mushs[i] > maxRate)){\n                    maxRate = mushs[i-1] - mushs[i];\n                }\n            }\n            consumptionTwo = maxRate*(times-1);\n            for(int i = 0; i < times - 1; i++){\n                if (mushs[i] < maxRate){\n                    consumptionTwo = consumptionTwo + mushs[i] - maxRate;\n                }\n                \n            }\n            \n            System.out.println(\"Case #\" + (Case+1) + \": \" + consumptionOne + \" \" + consumptionTwo);\n            \n        }\n        \n    }\n    \n}"}
{"idx":"64","func":"class q1 {\n    public static void main(String[] args) throws Exception {\n\n        String inputLine;\n        try{\n            \/\/ open input stream test.txt for reading purpose.\n            BufferedReader br = new BufferedReader(new FileReader(\"C:\/Users\/vincent\/Desktop\/A-large.txt\"));\n            FileWriter fw = new FileWriter(\"C:\/Users\/vincent\/Desktop\/output.txt\");\n            inputLine = br.readLine();\n\n            int testCaseNumber = 0;\n\n            int[] inputData;\n\n            while ((inputLine = br.readLine()) != null) {\n                double maxDiff = 0;\n                int currentInPlate = 0;\n                int timesWeCheck = 0;\n\n                testCaseNumber++;\n\n                timesWeCheck = Integer.parseInt(inputLine);\n                inputData = new int[timesWeCheck];\n\n                inputLine = br.readLine();\n                String[] inputParts = inputLine.split(\" \");\n                currentInPlate = Integer.parseInt(inputParts[0]);\n                inputData[0] = currentInPlate;\n\n                for (int i = 1; i < timesWeCheck; i++) {\n                    int newInPlate = Integer.parseInt(inputParts[i]);\n                    int currentDiff = currentInPlate - newInPlate;\n                    if (currentDiff >= 0 && currentDiff > maxDiff) {\n                        maxDiff = currentDiff;\n                    }\n                    currentInPlate = newInPlate;\n                    inputData[i] = newInPlate;\n                }\n                int answer1 = 0;\n                \n                for (int i = 0; i < inputData.length-1; i++) {\n                    int currentOnPlate = inputData[i];\n                    int nextOnPlate = inputData[i+1];\n                    int diff = currentOnPlate - nextOnPlate;\n                    if (diff > 0) {\n                        answer1 += diff;\n                    }\n                }\n\n                int answer = answer1;\n                double rate = maxDiff\/10;\n                int answer3 = 0;\n                \n                for (int i = 0; i < inputData.length-1; i++) {\n                    int currentOnPlate = inputData[i];\n                    if (currentOnPlate - inputData[i+1] >= 0) {\n                        if (currentOnPlate >= rate*10) {\n                            answer3 += rate*10;\n                        } else {\n                            answer3 += currentOnPlate;\n                        }\n                    } else {\n                        if (currentOnPlate < rate*10) {\n                            answer3 += currentOnPlate;\n                        } else {\n                            answer3 += rate*10;\n                        }\n                    }\n                }\n                int answer2 = answer3;\n                String output = \"Case #\" + testCaseNumber + \": \" + answer + \" \" + answer2 + \"\\n\";\n                fw.write(output);\n            }\n            fw.close();\n            br.close();\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"65","func":"class probA\n{\n    public static void main(String[] args)\n    {\n        Scanner input = new Scanner(System.in);\n        int test = input.nextInt();\n        for(int i = 1; i <= test; i++)\n        {\n            int size = input.nextInt();\n            List<Integer> list = new ArrayList<Integer>();\n            for(int j = 0; j < size; j++)\n            {\n                list.add(input.nextInt());\n            }\n            int amount = 0;\n            int current = list.get(0);\n            for(int i1 = 1; i1 < list.size(); i1++)\n            {\n                if(current > list.get(i1))\n                    amount += current - list.get(i1);\n                current = list.get(i1);\n            }\n\n            int one = amount;\n            int per = 0;\n            int amount1 = 0;\n            \n            for(int i2 = 1; i2 < list.size(); i2++)\n            {\n                int drop = list.get(i2-1) - list.get(i2);\n                if(drop > per)\n                {\n                    per = drop;\n                }    \n            }\n            \n            for(int i1 = 0; i1 < list.size()-1; i1++)\n            {\n                amount1 += list.get(i1) > per ? per : list.get(i1);\n            }\n            int two = amount1;\n\n            System.out.println(\"Case #\"+i+\": \"+one+\" \"+two);\n        }\n    }\n}"}
{"idx":"66","func":"class MushroomMonster {\n    \n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        \n        for(int zz = 1; zz <= T;zz++){\n\n            int N = in.nextInt();\n            \n            int[] marr = new int[N]; \n            for (int i = 0; i < N; i++) {\n                marr[i] = in.nextInt();\n            }\n            \n            int m1 = 0;\n            int m2 = 0;\n            \n            int prev = 0;\n            int minRate = 0;\n            for (int i =0; i < N; i++){\n                if (prev > marr[i]) {\n                    m1 += (prev - marr[i]);\n                    \n                    if ((prev - marr[i]) > minRate) {\n                        minRate = prev - marr[i];\n                    }                    \n                }\n                prev = marr[i];\n            }\n            \n\/\/            System.out.println(\"minRate: \" + minRate);\n            \n            for (int i =0; i < N - 1; i++){                \n                m2+= (marr[i]>minRate)? minRate : marr[i];                \n            }\n            \n            \n            \n            System.out.format(\"Case #%d: %d %d\\n\", zz, m1, m2);\n        }        \n    }\n}"}
{"idx":"67","func":"class A {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(new File(\"A2.in\"));\n        PrintWriter out = new PrintWriter(\"A2.out\");\n        int tc = in.nextInt();\n        for (int cc = 1; cc <= tc; cc++) {\n            int n = in.nextInt();\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++)\n                a[i] = in.nextInt();\n            int r0 = 0;\n            int r1 = 0;\n            int max = 0;\n            for (int i = 0; i < n - 1; i++) {\n                if (a[i] > a[i + 1]) {\n                    r0 += a[i] - a[i + 1];\n                    max = Math.max(max, a[i] - a[i + 1]);\n                }\n            }\n            for (int i = 0; i < n - 1; i++)\n                r1 += Math.min(max, a[i]);\n            System.out.printf(\"Case #%d: %d %d\\n\", cc, r0, r1);\n            out.printf(\"Case #%d: %d %d\\n\", cc, r0, r1);\n        }\n        out.close();\n    }\n}"}
{"idx":"68","func":"class A{\n    final static String inputFile=\"A-large.in\";\n    final static String outputFile=\"A-output.txt\";\n    static Scanner reader;\n    static PrintStream writer;\n    static int n; static long res1,res2,m[],a[],trest2;\n    public static void main(String[] args) throws Exception{\n        reader=new Scanner(new FileInputStream(inputFile));\n        writer=new PrintStream(new FileOutputStream(outputFile));\n        int ntest=reader.nextInt();  int i;\n        for (int test=1; test<=ntest;test++){\n            n=reader.nextInt(); m=new long[n];\n            for (i=0;i<n;i++) m[i]=reader.nextLong();\n            long maxrate=0; res1=0;\n            for (i=1;i<n;i++){\n                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);\n                maxrate=Math.max(maxrate,m[i-1]-m[i]);\n            }\n            a=new long [n+2];\n            res2=maxrate*n*n; \n            long rs,l=0,r=maxrate*n*n,rate;\n            while(l<=r){\n                rate=(l+r)\/2;\n                rs=0;\n                for (i=1;i<n;i++){\n                    if (m[i-1]>=rate)rs+=rate;\n                    else rs+=m[i-1];\n                    if (m[i-1]-rate>m[i]) break;\n                }\n                if (i==n){\n                    res2=Math.min(rs,res2);\n                    r=rate-1;\n                }else{\n                    l=rate+1;\n                }\n            }\n            writer.println(\"Case #\"+test+\": \"+res1+\" \"+res2);\n        }\n    }\n    \n}"}
{"idx":"69","func":"class Mashroom {\n    public static void main(String[] args) throws IOException {\n        Path fFilePath = Paths.get(args[0]);\n        try (Scanner scanner = new Scanner(fFilePath,\n                StandardCharsets.UTF_8.name())) {\n            int count = 0;\n            int platesCount;\n            while (scanner.hasNextLine()) {\n                if (count == 0) {\n                    scanner.nextLine();\n                } else {\n                    platesCount = Integer.valueOf(scanner.nextLine());\n                    String plateLine = scanner.nextLine();\n                    int[] cakes = new int[platesCount];\n                    Scanner scanner1 = new Scanner(plateLine);\n                    scanner1.useDelimiter(\" \");\n                    int index = 0;\n                    while(scanner1.hasNext()){\n                        String count3 = scanner1.next();\n                        cakes[index] = Integer.valueOf(count3);\n                        index++;\n                    }\n                    int[] mashrooms = cakes;\n                    int count1 = 0;\n                    for(int i = 0; i < mashrooms.length - 1; i++) {\n                        if(mashrooms[i] > mashrooms[i+1]) {\n                            count1 += mashrooms[i] - mashrooms[i+1];\n                        }\n                    }\n                    \/\/ TODO Auto-generated method stub\n                    int any = count1;\n                    int count2 = 0;\n                    \/\/        double time = mashrooms[0] \/ 10;\n                            int max = 0;\n                            for(int i = 0; i < mashrooms.length - 1; i++) {\n                                max = Math.max(max, mashrooms[i] - mashrooms[i+1]);\n                            }\n                    \/\/        double time = max \/ 10;\n                            for(int i = 0; i < mashrooms.length - 1; i++) {\n                    \/\/            int d =\n                                if(max < mashrooms[i]) {\n                                    count2 += max;\n                                } else {\n                                    count2 += mashrooms[i];\n                                }\n                            }\n                    int constant = count2;\n                    System.out.println(\"Case #\" + count + \": \" + any + \" \" + constant);\n                }\n                count++;\n            }\n        }\n    }\n}"}
{"idx":"70","func":"class Main {\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for (int t = 0; t < T; t++) {\n            int N = sc.nextInt();\n            int[] m = new int[N];\n            for (int i = 0; i < m.length; i++) {\n                m[i] = sc.nextInt();\n            }\n\n            int first = 0;\n            for (int i = 1; i < m.length; i++) {\n                if (m[i] <= m[i - 1]) {\n                    first += m[i - 1] - m[i];\n                }\n            }\n\n            int max = 0;\n            for (int i = 1; i < m.length; i++) {\n                max = Math.max(max, m[i - 1] - m[i]);\n            }\n            int second = 0;\n            for (int i = 0; i < m.length - 1; i++) {\n                second += Math.min(max, m[i]);\n            }\n\n            System.out.println(\"Case #\" + (t + 1) + \": \" + first + \" \" + second);\n\n        }\n    }\n}"}
{"idx":"71","func":"class TaskA {\n    \n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/System.setIn(new FileInputStream(\"C:\\\\Users\\\\Grzegorz\\\\workspace_juno\\\\CodeJam2015\\\\src\\\\pl\\\\gg\\\\codejam2015\\\\round1\\\\taskA\\\\A-large.in\"));\n        \/\/System.setOut(new PrintStream(new FileOutputStream(\"C:\\\\Users\\\\Grzegorz\\\\workspace_juno\\\\CodeJam2015\\\\src\\\\pl\\\\gg\\\\codejam2015\\\\round1\\\\taskA\\\\A-large.out\")));\n        \n        try (Scanner in = new Scanner(System.in)) {\n            \n            int cases = in.nextInt();\n            for (int i = 0; i < cases; i++) {\n                int nSeconds = in.nextInt();\n                List<Integer> seconds = new ArrayList<>(nSeconds);\n                \n                for (int j = 0; j < nSeconds; j++) {\n                    int second = in.nextInt();\n                    seconds.add(second);\n                }\n                int res = 0;\n                \n                for (int i1 = 1; i1 < seconds.size(); i1++) {\n                    if (seconds.get(i1 - 1) > seconds.get(i1)) {\n                        res += seconds.get(i1 - 1) - seconds.get(i1);\n                    }\n                }\n                \n                int res1 = res;\n                int maxD = 0;\n                \n                for (int i1 = 1; i1 < seconds.size(); i1++) {\n                    if (seconds.get(i1 - 1) - seconds.get(i1) > maxD) {\n                        maxD = seconds.get(i1 - 1) - seconds.get(i1);\n                    }\n                }\n                \n                int res3 = 0;\n                \n                for (int i2 = 0; i2 < seconds.size() - 1; i2++) {\n                    if (seconds.get(i2) > maxD) {\n                        res3 += maxD;\n                    } else {\n                        res3 += seconds.get(i2);\n                    }\n                }\n                int res2 = res3;\n                \n                System.out.println(\"Case #\" + (i + 1) + \": \" + res1 + \" \" + res2);\n            }\n        }\n    }\n}"}
{"idx":"72","func":"class AQ1\n{\n    static Scanner sc = new Scanner(System.in);\n    \n    public static void main(String[] parms)\n    {\n        int numProbs;\n        \n        numProbs = sc.nextInt();\n        \n        for (int i=1; i<=numProbs; i++)\n        {\n            System.out.format(\"Case #%d: \", i);\n            int numTrials = sc.nextInt();\n            \n            int[] t = new int[numTrials];\n            for (int i3=0; i3<numTrials; i3++)\n            {\n                t[i3]=sc.nextInt();\n            }\n            \n            \/\/method 1\n            int total = 0;\n            for (int i4=0; i4<(numTrials-1); i4++)\n            {\n                if (t[i4] > t[i4+1]) total += t[i4]-t[i4+1];\n            }\n            \n            System.out.print(total + \" \");\n            \n            \/\/method 2\n            int diff = 0;\n            int nextDiff = 0;\n            for (int i2=0; i2<(numTrials-1); i2++)\n            {\n                nextDiff = t[i2] - t[i2+1];\n                if (nextDiff > diff) diff = nextDiff;\n            }\n            \n            \n            total = 0;\n            for (int i1=0; i1<(numTrials-1); i1++)\n            {\n                if (t[i1] < diff) total += t[i1];\n                else total += diff;\n            }\n            \n            System.out.print(total);\n            System.out.println();\n        }\n        \n    }\n}"}
{"idx":"73","func":"class Q1 {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/ TODO Auto-generated method stub\n        File f = new File(\"A-large.in\");\n        PrintWriter out = new PrintWriter(\"out.txt\");\n        Scanner s = new Scanner(f);\n        int T = s.nextInt();\n\/\/        s.nextLine();\n        int iter = 0;\n        while(T > 0) {\n            T--;\n            iter++;\n            int N = s.nextInt();\n            int N_i = N;\n            int[] in = new int[N];\n            int i = 0;\n            while(N_i > 0) {\n                N_i--;\n                in[i++] = s.nextInt();\n            }\n            int m1 = 0;\n            for(int j = 1; j < N; j++) {\n                if(in[j] < in[j-1]) {\n                    System.out.println(m1);\n                    m1 += in[j-1] - in[j];\n                }\n            }\n            int max = 0;\n            int diff = 0;\n            for(int j = 0; j < N-1; j++) {\n                diff = in[j] - in[j+1];\n                if(diff > max) {\n                    max = diff;\n                }\n            }\n            int m2 = 0;\n            for(int j = 0; j < N-1; j++) {\n                if(in[j] <= max) {\n                    m2 += in[j];\n                } else {\n                    m2 += max;\n                }\n            }\n            out.println(\"Case #\" + iter + \": \" + m1 + \" \" + m2);\n\n        }\n        s.close();\n        out.close();\n\n    }\n\n}"}
{"idx":"74","func":"class ProblemA {\n    \n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter print;\n        try {\n            print = new PrintWriter(\"outputPrA\");\n            StringBuilder outputString = new StringBuilder();\n            \n            int testCases = Integer.parseInt(in.nextLine());\n            for (int i = 0; i < testCases; i++) {\n                String numberOfInputs = in.nextLine();\n                String numberOfMushroomsString = in.nextLine();\n                String[] mushroomInputs = numberOfMushroomsString.split(\"\\\\s\");\n                Integer minNoEaten = 0;\n                for (int i3 = 0; i3 < Integer.parseInt(numberOfInputs)-1; i3++) {\n                    if(Integer.parseInt(mushroomInputs[i3+1]) < Integer.parseInt(mushroomInputs[i3])){\n                        minNoEaten+=(Integer.parseInt(mushroomInputs[i3])-Integer.parseInt(mushroomInputs[i3+1]));\n                    }\n                }\n                String firstMethod = \"\"+minNoEaten;\n                Integer numberOfInputs1 = Integer.parseInt(numberOfInputs);\n                int rate = 0;\n                for (int i2 = 0; i2 < numberOfInputs1-1; i2++) {\n                    if(Integer.parseInt(mushroomInputs[i2+1]) < Integer.parseInt(mushroomInputs[i2]) && rate < (Integer.parseInt(mushroomInputs[i2])- Integer.parseInt(mushroomInputs[i2+1])) ){\n                        rate = (Integer.parseInt(mushroomInputs[i2])- Integer.parseInt(mushroomInputs[i2+1]));\n                    }\n                }\n                Integer numberMinEaten=0,numberOfPancakesLeft=0;\n                for (int i1 = 0; i1 < numberOfInputs1-1; i1++) {\n                    if(Integer.parseInt(mushroomInputs[i1+1]) < Integer.parseInt(mushroomInputs[i1])){\n                        numberMinEaten += Math.min(Integer.parseInt(mushroomInputs[i1]), rate);\n                    } else {\n                        numberMinEaten += Math.min(Integer.parseInt(mushroomInputs[i1]), rate);\n                        numberOfPancakesLeft += Math.abs(Integer.parseInt(mushroomInputs[i1])-rate);\n                    }\n                }\n                String secondMethod = \"\"+numberMinEaten;\n                String outputLine = firstMethod+\" \"+secondMethod;\n                outputString.append(\"Case #\"+(i+1)+\": \"+outputLine+\"\\n\");\n            }\n            System.out.println(outputString);\n            print.write(new String(outputString));\n            print.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(\"Error Reading the file\");\n            e.printStackTrace();\n        }\n    }\n    \n    \n}"}
{"idx":"75","func":"class MushroomMonster\n{\n\n    public static void main(String[] args) throws Exception\n    {\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n        PrintWriter pw = new PrintWriter(\"A-large.out\");\n        \n        int t = Integer.parseInt(br.readLine());\n        \n        for (int test = 0; test < t; test++)\n        {\n            int n = Integer.parseInt(br.readLine());\n            int[] mushrooms = new int[n];\n            \n            StringTokenizer st = new StringTokenizer(br.readLine());\n            for (int i = 0; i < n; i++)\n            {\n                mushrooms[i] = Integer.parseInt(st.nextToken());\n            }\n            int cur = 0;\n            for (int i = 1; i < mushrooms.length; i++)\n            {\n                cur += Math.max(0, mushrooms[i - 1] - mushrooms[i]);\n            }\n            \n            int m1 = cur;\n            int maxDiff = 0;\n            for (int i = 1; i < mushrooms.length; i++)\n            {\n                maxDiff = Math.max(maxDiff, mushrooms[i - 1] - mushrooms[i]);\n            }\n            int r = 0;\n            for (int i = 0; i < mushrooms.length - 1; i++)\n            {\n                r += Math.min(maxDiff, mushrooms[i]);\n            }\n            int m2 = r;\n            \n            pw.printf(\"Case #%d: %d %d%n\", test + 1, m1, m2);\n        }\n        br.close();\n        pw.close();\n    }\n}"}
{"idx":"76","func":"class Mushroom {\n\n    public static void main (String[] args) {\n        BufferedReader br;\n        BufferedWriter bw;\n        try {\n            br = new BufferedReader(new FileReader(\"A-large.in\"));\n            bw = new BufferedWriter(new FileWriter(\"A-large.out\"));\n            int t = Integer.parseInt(br.readLine());\n            for (int iii = 1; iii <= t; iii++) {\n                bw.write(\"Case #\" + iii + \": \");\n                int n = Integer.parseInt(br.readLine());\n                String[] splits = br.readLine().split(\" \");\n\n                int[] mushrooms = new int[n];\n                for (int jjj = 0; jjj < n; jjj++) {\n                    mushrooms[jjj] = Integer.parseInt(splits[jjj]);\n                }\n                int previous = mushrooms[0];\n                int case1 = 0;\n                int case2 = 0;\n                int max = 0;\n                for (int jjj = 1; jjj < n; jjj++) {\n                    int current = mushrooms[jjj];\n                    if (current < previous) {\n                        int temp = previous - current;\n                        case1 += temp;\n                        if (temp > max) {\n                            max = temp;\n                        }\n                    }\n                    previous = current;\n                }\n\n                for (int jjj = 0; jjj < n - 1; jjj++) {\n                    int current = mushrooms[jjj];\n                    if (current > max) {\n                        case2 += max;\n                    } else {\n                        case2 += current;\n                    }\n                }\n                bw.write(case1 + \" \" + case2);\n                bw.newLine();\n            }\n            bw.close();\n        }catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"77","func":"class A {\n\n  static final String FILENAME = \"input\";\n  static final String IN = FILENAME + \".in\";\n  static final String OUT = \"output.out\";\n  Scanner sc;\n  BufferedWriter out;\n\npublic int absVal =0;\n  public static void main(String args[]) throws Exception {\n    A r = new A();\n    r.sc = new Scanner(new File(A.IN));\n    r.out = new BufferedWriter(new FileWriter(A.OUT));\n    int t = Integer.parseInt(r.sc.nextLine());\n    for (int i = 1; i <= t; i++) {\n      r.out.write(\"Case #\" + i + \": \");\n      int a=0;\n    int b=0;\n    r.absVal=0;\n    int d = Integer.parseInt(r.sc.nextLine());\n    String[] tmp = r.sc.nextLine().split(\" \");\n    int[] tmpInt = new int[tmp.length];\n    for (int i1 = 0; i1 < d; i1++) {\n    \n        tmpInt[i1] = Integer.parseInt(tmp[i1]);\n    }\n    int x = tmpInt[0];\n      int a1=0;\n      for(int i1=1;i1<tmpInt.length;i1++)\n      {\n          if (tmpInt[i1]<x)\n          {\n              a1 = a1 + x - tmpInt[i1];\n              r.absVal = Math.max(r.absVal, Math.abs(x-tmpInt[i1]));\n          }\n          x = tmpInt[i1]; \n      }\n    a = a1;\n    int ans=0;\n      for(int i1=0;i1<tmpInt.length -1;i1++)\n      {\n          if (tmpInt[i1]<=r.absVal)\n          {\n              ans = ans + tmpInt[i1];\n          }\n          else if(tmpInt[i1]>r.absVal)\n          {\n              ans = ans + r.absVal;\n          }\n      }\n    b = ans;\n    r.out.write(Integer.toString(a) + \" \" +Integer.toString(b));\n    r.out.newLine();\n    r.out.flush();\n    }\n    r.sc.close();\n    r.out.close();\n  }\n}"}
{"idx":"78","func":"class CodeJam1A_1 {\n    \n    public static void main(String[] args) {\n        \/\/ Template starts here\n        BufferedReader br = null;\n        try {\n            br = new BufferedReader(new FileReader(\"input.txt\"));\n            int numTestCase = Integer.valueOf(br.readLine());\n            for(int testCase=1; testCase<=numTestCase; testCase++)\n            {\n                System.out.print(\"Case #\" + testCase + \": \");\n                \n                \/\/ Read each test case\n                \/\/ Int\n                int numObservation = Integer.valueOf(br.readLine());\n                \/\/ Array\n                String[] observationStr = br.readLine().split(\" \");\n                Long[] observation = new Long[numObservation];\n                for(int i=0; i<numObservation; i++)\n                {\n                    observation[i] = Long.valueOf(observationStr[i]);\n                }\n                \n                long ans1 = 0;\n                long ans2 = 0;\n                long maxDiff = 0;\n                for(int i=0; i<numObservation-1; i++)\n                {\n                    long diff = observation[i] - observation[i+1];\n                    if(diff > 0)\n                    {\n                        ans1 += diff;\n                    }\n                    \n                    if(diff > maxDiff)\n                    {\n                        maxDiff = diff;\n                    }\n                }\n                \n                for(int i=0; i<numObservation-1; i++)\n                {\n                    if(maxDiff > observation[i])\n                    {\n                        ans2 += observation[i];\n                    }\n                    else\n                    {\n                        ans2 += maxDiff;\n                    }                    \n                }\n                \n                \/\/ Print output\n                System.out.println(ans1 + \" \" + ans2);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \/\/ Template ends here\n    }\n    \n}"}
{"idx":"79","func":"class Codejam_2014_1A_A {\n\n    static BufferedReader br;\n    static PrintWriter ps;\n    static StringTokenizer st;\n    \n    \n    public static void main (String[] args) throws IOException {\n        \/\/br = new BufferedReader(new InputStreamReader(System.in));\n        \/\/ps = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        br = new BufferedReader(new FileReader(\"test.txt\"));\n        ps = new PrintWriter(\"output.txt\");\n    \n        int t = Integer.parseInt(next());\n        \n        for (int q = 1; q <= t; q++) {\n            int n = Integer.parseInt(next());\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++)\n                a[i] = Integer.parseInt(next());\n            int min1 = 0;\n            int maxDiff = 0;\n            for (int i = 1; i < n; i++) {\n                if (a[i] < a[i-1]) {\n                    min1 += a[i-1] - a[i];\n                    maxDiff = Math.max(maxDiff, a[i-1] - a[i]);\n                }\n            }\n            int min2 = 0;\n            for (int i = 1; i < n; i++) {\n                if (maxDiff >= a[i-1])\n                    min2 += a[i-1];\n                else\n                    min2 += maxDiff;\n            }\n            System.out.printf(\"Case #%d: %d %d\\n\", q, min1, min2);\n        }\n    }\n    static String next () throws IOException {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine().trim());\n        return st.nextToken();\n    }\n}"}
{"idx":"80","func":"class Mushroom {\n     public static void main(String ... orange) throws Exception\n        {\n            Scanner input = new Scanner(System.in);\n            int numCases = input.nextInt();\n            for (int n = 0; n < numCases; n++)\n            {\n                int N = input.nextInt();\n                int[] ps = new int[N];\n                for (int i = 0; i < N; i++)\n                    ps[i] = input.nextInt();\n\n                int maxDiff = -1; int sum1= 0,sum2=0;\n                for(int i=0; i< (N-1);i++){\n                    int diff = ps[i]- ps[i+1];\n                    if(diff > 0) sum1 += diff;\n                    if(diff > maxDiff) maxDiff = diff;    \n                }\n                \n                for(int i=0; i< (N-1);i++){\n                    if(ps[i] < maxDiff) sum2+=ps[i];\n                    else sum2+= maxDiff;\n                }\n                \n                System.out.printf(\"Case #%d: %d %d\\n\", n + 1, sum1,sum2);\n            }\n        }\n\n}"}
{"idx":"81","func":"class A {\n\n    public static void main(String[] args) throws Exception {\n        Scanner s = new Scanner(new FileReader(\"a.in\"));\n        PrintWriter printer = new PrintWriter(new FileWriter(\"a.out\"));\n        int t = s.nextInt();\n        for(int i=0; i<t; i++) {\n            int n = s.nextInt();\n            int[] arr = new int[n];\n            int b = 0;\n            for(int j=0; j<n; j++)\n                arr[j] = s.nextInt();\n            int a = 0;\n            for(int j=0; j<n-1; j++)\n                if(arr[j]-arr[j+1] >= 0) a += arr[j]-arr[j+1];\n            int k = 0;\n            for(int j=0; j<n-1; j++)\n                if(arr[j] > arr[j+1]) k = Math.max(k, arr[j]-arr[j+1]);\n            for(int j=0; j<n-1; j++)\n                b += Math.min(arr[j], k);\n            System.out.println(a + \" \" + b);\n            printer.println(\"Case #\" + (i+1) + \": \" + a + \" \" + b);\n        }\n        printer.close();\n    }\n}"}
{"idx":"82","func":"class A {\n\n    private static PrintStream out = System.out;\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int numTests = in.nextInt();\n        for (int test = 1; test <= numTests; ++test) {\n            \/\/ read input\n            int n = in.nextInt();\n            int[] cnts = new int[n];\n            for (int i = 0; i < n; ++i)\n                cnts[i] = in.nextInt();\n            \/\/ solve first problem\n            long ans1 = 0;\n            for (int i = 1; i < n; ++i)\n                ans1 += Math.max(0, cnts[i - 1] - cnts[i]);\n            \/\/ solve second\n            int diff = 0;\n            for (int i = 1; i < n; ++i)\n                diff = Math.max(diff, cnts[i - 1] - cnts[i]);\n            long ans2 = 0;\n            for (int i = 0; i + 1 < n; ++i)\n                ans2 += Math.min(diff, cnts[i]);\n            \/\/ output answer\n            out.println(\"Case #\" + test + \": \" + ans1 + \" \" + ans2);\n        }\n    }\n\n}"}
{"idx":"83","func":"class MyOne {\n        public static String INPUT_FILE_NAME=\"\/Users\/utsavpatel\/Documents\/workspace\/algo\/CodeJam2015\/src\/input.txt\";\n        public static String OUTPUT_FILE_NAME=\"\/Users\/utsavpatel\/Documents\/workspace\/algo\/CodeJam2015\/src\/output.txt\";\n    \n        public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n\n        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));\n        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));\n        int testCases = Integer.parseInt(reader.readLine());\n        for(int index=1;index<=testCases;index++){\n            String result=\"\";\n            reader.readLine();\n            String str[] = reader.readLine().split(\" \");\n            \n            int max = Integer.MIN_VALUE;\n            int result1 = 0;\n            int result2 = 0;\n            for(int i = 0; i<str.length-1;i++){\n                int i2=Integer.parseInt(str[i+1]);\n                int i1 = Integer.parseInt(str[i]);\n                if((i2-i1)<0) result1+=-(i2-i1);\n                if(-(i2-i1)>max) max = -(i2-i1);\n            }\n            for(int i = 0; i<str.length-1;i++){\n                int i1 = Integer.parseInt(str[i]);\n                if(i1>=max) result2 = result2+max;\n                else if(i1<max) result2 = result2+i1;\n            }\n            writer.write(\"Case #\"+index+\": \"+result1+\" \"+result2+\"\\n\");\n        }\n        reader.close();\n        writer.close();\n\n    }\n\n}"}
{"idx":"84","func":"class codeJamA\n{\n    public static void main(String[] args) throws IOException\n    {\n    \/\/pancakes\n        File f = new File(\"test.txt\");\n        Scanner in = new Scanner(f);\n        PrintWriter out = new PrintWriter(new FileWriter(\"testout.txt\"));\n        int numCases = in.nextInt();\n        in.nextLine();\n\n        \/\/problem specific\n        int times;\n        \n        for(int i = 0; i < numCases; i++){\n            times = in.nextInt();\n            \/\/in.nextLine();\n            int[] checks = new int[ times ];\n            for(int j = 0; j < times; j++ ){    \/\/for each interval\n                checks[j] = in.nextInt();\n            }\n            \/\/now find first method result: is total of positive consecutive differences\n            long first = 0, second = 0;\n            long secondMax = 0;\n            long dif;\n            for(int j = 1; j < times; j++ ){ \/\/compare each neighboring pair\n                dif = checks[j - 1] - checks[j];\n                if (dif > 0 ){ \/\/ate some\n                    first += dif;\n                    secondMax = Math.max(secondMax, dif); \/\/take the maximum she could have ate. \n                }\n            }\n            \/\/second *= times; \/\/ per round\n            \/\/calculation for the second one. \n            for(int j = 0; j < times - 1; j++ ){ \/\/for each time period\n                second += Math.min( secondMax, checks[j] );\n            }\n            out.format(\"Case #%d: %s\\n\", i + 1, first + \" \" + second);            \n        }\n        out.close();\n    }\n}"}
{"idx":"85","func":"class Mushroom {\n\n    static PrintWriter out;\n\n    public static void main(String[] args) throws IOException {\n        String name = \"gcj2015\/r1\/A-large\";\n        Scanner s = new Scanner(new File(name + \".in\"));\n        int count = s.nextInt();\n        out = new PrintWriter(new BufferedWriter(new FileWriter(name + \".out\")));\n        \/\/out = new PrintWriter(System.out);\n        for (int cc = 1; cc <= count; cc++) {\n            out.print(\"Case #\" + cc + \": \");\n            int n = s.nextInt();\n            int[] a = new int[n];\n            for(int i=0; i<n; i++) {\n                a[i] = s.nextInt();\n            }\n            int res = 0;\n            for(int i=0; i<n-1; i++) {\n                res += Math.max(a[i]-a[i+1], 0);\n            }\n            int res1 = res;\n            int res3 = 0;\n            int max = 0;\n            for(int i=0; i<n-1; i++) {\n                max = Math.max(a[i]-a[i+1], max);\n            }\n            for(int i=0; i<n-1; i++) {\n                res3 += Math.min(a[i], max);\n            }\n            int res2 = res3;\n            out.print(res1);\n            out.print(' ');\n            out.print(res2);\n            out.println();\n        }\n        out.close();\n    }\n\n}"}
{"idx":"86","func":"class A {\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new File(\"A.txt\"));\n        PrintWriter out = new PrintWriter(new File(\"A.out\"));\n        int cases = sc.nextInt();\n        for(int t=1;t<=cases;t++){\n            long ans1 = 0;\n            int N = sc.nextInt();\n            long[] array = new long[N];\n            for(int a=0;a<N;a++)array[a]=sc.nextLong();\n            long largest = 0;\n            long increase = 0;\n            for(int a=1;a<N;a++){\n                if(array[a-1]>array[a]){\n                    ans1+=array[a-1]-array[a];\n                    largest = Math.max(largest,array[a-1]-array[a]);\n                    increase = Math.max(increase,array[a-1]-array[a]);\n                }\n            }\n            long ans2 = 0;\n            long cur = array[0];\n            for(int a=1;a<N;a++){\n                ans2 += Math.min(cur,increase);\n                cur -= Math.min(cur,increase);\n                cur = array[a];\n            }\n            \n            \n            String answer = String.format(\"Case #%d: %d %d\", t,ans1,ans2);\n            System.out.println(answer);\n            out.println(answer);\n        }\n        out.close();\n    }\n\n}"}
{"idx":"87","func":"class Mushrooms {\n\n    public static void main(String[] args) throws Exception {\n        Mushrooms r = new Mushrooms();\n        Scanner sc = new Scanner(new BufferedReader(new FileReader(\n                \"A-small-attempt0.in\")));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"A-small-attempt0.out\"));\n        \n        int nc = sc.nextInt();\n        for (int tc = 1; tc <= nc; tc++) {\n            int n = sc.nextInt();\n            int[] a = new int[n];\n            int ans0 = 0;\n            int ans1 = 0;\n            for (int i = 0; i < n; i++) {\n                a[i] = sc.nextInt();\n                if (i > 0 && a[i - 1] > a[i])\n                    ans0 += a[i - 1] - a[i];\n            }\n            if (ans0 > 0) {\n                int lo = 1;\n                int hi = 10000;\n                while (lo < hi) {\n                    int rate = (lo + hi) \/ 2;\n                    boolean ok = true;\n                    for (int i = 1; i < n; i++) {\n                        if (a[i - 1] - rate > a[i]) {\n                            ok = false;\n                            break;\n                        }\n                    }\n                    if (ok)\n                        hi = rate;\n                    else\n                        lo = rate + 1;\n                }\n                for (int i = 1; i < n; i++) {\n                    if (lo <= a[i - 1]) {\n                        ans1 += lo;\n                    } else {\n                        ans1 += a[i - 1];\n                    }\n                }\n            }\n            pw.printf(\"Case #%d: %d %d\\n\", tc, ans0, ans1);\n        }\n        sc.close();\n        pw.close();\n    }\n\n}"}
{"idx":"88","func":"class Mushroom {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"input.in\"));\n        PrintWriter out = new PrintWriter(\"output.txt\");\n        int T = in.nextInt();\n        int[] se=new int[2];\n        for (int i = 0; i < T; i++) {\n            Mushroom r = new Mushroom();\n            int N=in.nextInt();\n            int[] plate=new int[N];\n            for(int i1=0;i1<N;i1++){\n                plate[i1]=in.nextInt();\n            }\n            int[] eat=new int[N-1];\n            int max=0;\n            int sum1=0;\n            for(int i2=0;i2<N-1;i2++){\n                eat[i2]=plate[i2]-plate[i2+1];\n                if(eat[i2]>max) max=eat[i2];\n                if(eat[i2]>0) sum1=sum1+eat[i2];\n            }\n            int sum2=0;\n            for(int i3=0;i3<N-1;i3++){\n                if(plate[i3]>max) sum2=sum2+max;\n                else sum2=sum2+plate[i3];\n            }\n            int[] result=new int[2];\n            result[0]=sum1;\n            result[1]=sum2;\n            se=result;\n            String s = \"Case #\" + (i + 1) + \": \" + se[0]+ \" \" + se[1];\n            out.println(s);\n            System.out.println(s);\n        }\n        out.close();\n    }\n}"}
{"idx":"89","func":"class Mushroom {\n    \n    public static void main(String[] args) throws FileNotFoundException {\n        File file = new File(\"C:\/Users\/puneet\/Desktop\/test.txt\");\n        Scanner in = new Scanner(file);\n        int total = in.nextInt();\n        \n        for(int i=1;i<=total;i++){\n            int mCount = in.nextInt();\n            int arr[] = new int[mCount];\n            \n            for(int j=0;j<mCount;j++){\n                arr[j] = in.nextInt();\n            }\n            \n            int min1 = 0;\n            int min2 = 0;\n            \n            int curr = 0;\n            int maxDiff = 0;\n            for(int a=1;a<mCount;a++){\n                if(arr[a]<arr[a-1]){\n                    min1+=(arr[a-1]-arr[a]);\n                }\n                \n                if((arr[a-1]-arr[a])>maxDiff)\n                    maxDiff = arr[a-1]-arr[a];\n                \n            }\n            \n            for(int b=0;b<(mCount-1);b++){\n                \n                if(arr[b]>maxDiff)\n                    min2=min2+maxDiff;\n                else\n                    min2=min2+arr[b];\n            }\n            \/\/System.out.println(maxDiff);\n            System.out.println(\"Case #\"+i+\": \"+ min1+\" \"+min2);\n\n    }\n    }\n}"}
{"idx":"90","func":"class MushroomMonster {\n    public static void main(String[] args) throws Exception {\n        String fileName = args[0];\n        MushroomMonster obj = new MushroomMonster();\n        BufferedReader br = new BufferedReader(new FileReader(fileName));\n        BufferedWriter bw = new BufferedWriter(\n                new FileWriter(fileName + \".out\"));\n        \n        int T = Integer.parseInt(br.readLine());\n        for (int i = 0; i < T; i++) {\n            Integer N = Integer.parseInt(br.readLine());\n            String str = br.readLine();\n            StringTokenizer token = new StringTokenizer(str, \" \");\n        \n            int[] m = new int[N];\n            int max = 0;\n            for (int j = 0; j < N; j++) {\n                m[j] = Integer.parseInt(token.nextToken());\n                if (j > 0 && m[j] - m[j - 1] < 0) {\n                    max = Math.max(max, m[j - 1] - m[j]);\n                }\n            }\n        \n            int ans_x = 0;\n            int ans_y = 0;\n            for (int j = 1; j < N; j++) {\n                if (m[j] - m[j - 1] < 0) {\n                    ans_x += m[j - 1] - m[j];\n                }\n                if (m[j - 1] <= max) {\n                    ans_y += m[j - 1];\n                } else {\n                    ans_y += max;\n                }\n            }\n        \n            bw.write(\"Case #\" + (i + 1) + \": \" + ans_x + \" \" + ans_y);\n            bw.write(\"\\r\\n\");\n        }\n        bw.close();\n        br.close();\n    }\n}"}
{"idx":"91","func":"class A\n{\n    public static void main(String[] args) throws IOException\n    {\n        String FILE = \"files\/A-large\";\n        BufferedReader in = new BufferedReader(new FileReader(FILE + \".in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter\n                (new FileWriter(FILE + \".out\")));\n\n        StringTokenizer st;\n        int testCases = Integer.parseInt(in.readLine());\n        for (int test = 1; test <= testCases; test++)\n        {\n            int N = Integer.parseInt(in.readLine());\n            int[] m = new int[N];\n\n            st = new StringTokenizer(in.readLine());\n            m[0] = Integer.parseInt(st.nextToken());\n            long x = 0, y = 0;\n\n            int jump = 0;\n\n            int current = m[0];\n            for (int i = 1; i < N; i++)\n            {\n                m[i] = Integer.parseInt(st.nextToken());\n                if (m[i] < current)\n                {\n                    y += current - m[i];\n\n                    int diff = current - m[i];\n                    if (diff > jump)\n                        jump = diff;\n                }\n                current = m[i];\n            }\n\n            for (int i = 0; i < N - 1; i++)\n                if (m[i] < jump)\n                    x += m[i];\n                else\n                    x += jump;\n\n            out.printf(\"Case #%d: %d %d%n\", test, y, x);\n        }\n\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"92","func":"class MushroomMonster {\n    \n    public static void main(String[] args) throws IOException {\n        BufferedReader f= new BufferedReader(new FileReader(\"mushroom.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"mushroom.out\")));\n        \n        int T = Integer.parseInt(f.readLine());\n        \n        for ( int test=1; test <= T; test++ ) {\n            int N = Integer.parseInt(f.readLine());\n            StringTokenizer st = new StringTokenizer(f.readLine());\n            int[] mushroomPieces = new int[N];\n            for ( int i=0; i < N; i++ ) {\n                mushroomPieces[i] = Integer.parseInt(st.nextToken());\n            }\n            \/\/ use method one\n            int numEaten = 0;\n            for ( int i=0; i < N-1; i++ ) {\n                int numPieces1 = mushroomPieces[i];\n                int numPieces2 = mushroomPieces[i+1];\n                if ( numPieces2 < numPieces1 ) {\n                    numEaten += numPieces1 - numPieces2;\n                }\n            }\n            int numEaten1 = numEaten;\n            int largestDiff = 0;\n            for ( int i=0; i < N-1; i++ ) {\n                int numPieces1 = mushroomPieces[i];\n                int numPieces2 = mushroomPieces[i+1];\n                largestDiff = Math.max(largestDiff, numPieces1 - numPieces2);\n            }\n            int numEaten3 = 0;\n            for ( int i=0; i < N-1; i++ ) {\n                int numPieces = mushroomPieces[i];\n                numEaten3 += Math.min(largestDiff, numPieces);\n            }\n            int numEaten2 = numEaten3;\n            out.println(String.format(\"Case #%d: %d %d\",test, numEaten1, numEaten2));\n        }\n        \n        f.close();\n        out.close();\n    }\n}"}
{"idx":"93","func":"class Mushroom {\n    public static void main(String[] args){\n        Mushroom t = new Mushroom();\n        Scanner scan;\n        try {\n            scan = new Scanner(new File(\"input.txt\"));\n            PrintStream p = new PrintStream(\"output.txt\");\n            int num = scan.nextInt();\n            for(int i = 1; i <= num; i++){\n                scan.nextLine();\n                int intervals = scan.nextInt();\n                int[] mushrooms = new int[intervals];\n                for (int j = 0; j < intervals; j++) {\n                    mushrooms[j] = scan.nextInt();    \n                }\n        \n                \/\/ Now all the mushroom intervals have been calculated\n                int current = mushrooms[0];\n                \n                int total1 = 0; \n                \/\/ Method 1:\n                \/\/ Kaylin only eats when the number drops\n                for (int j = 1; j < intervals; j++) {\n                    if (mushrooms[j] < current) {\n                        total1 += (current - mushrooms[j]);\n                    }\n                    current = mushrooms[j];\n                }\n                \n                int[] drop = new int[intervals-1];\n                for (int j = 1; j < intervals; j++) {\n                    drop[j-1] = mushrooms[j-1] - mushrooms[j];\n                    if (drop[j-1] < 0) {\n                        drop[j-1] = 0;\n                    }\n                }\n                \n                Arrays.sort(drop);\n                \n                int total2 = 0;\n                current = mushrooms[0];\n                int eatingRate = drop[drop.length-1];\n                for (int j = 1; j < intervals; j++) {\n                    total2 += Math.min(current, eatingRate);\n                    \/\/System.out.println(Math.min(current, eatingRate));\n                    current = mushrooms[j];\n                }\n                \n                p.println(\"Case #\" + i + \": \" + total1 + \" \" + total2);\n                \/\/System.out.println(\"Case #\" + i + \": \" + total1 + \" \" + total2);\n            }\n            p.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"94","func":"class start {\n\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new File(\"A-large.in\"));\n        FileWriter fw = new FileWriter(new File(\"outputLarge.txt\"));\n        int numTestCases = sc.nextInt();\n        for (int testCaseNum = 0; testCaseNum < numTestCases; testCaseNum++) {\n\n            \/\/ Parse test case\n            int numStates = sc.nextInt();\n            \n            int diff = 0;\n            int maxEatPerState = 0;\n            \n            int[] states = new int[numStates];\n            for (int state = 0; state < numStates; state++) {\n                int numMushrooms = sc.nextInt();\n                states[state] = numMushrooms;\n            }\n            \n            int sumEat = 0;\n            for (int state = 1; state < numStates; state++) {\n                diff = states[state] - states[state - 1];\n                if (diff < 0) {\n                    int d = -1 * diff;\n                    if (maxEatPerState < d) {\n                        maxEatPerState = d;\n                    }\n                    sumEat += d;\n                }        \n            }\n            \n            int m2Eat = 0;\n            for (int state = 0; state < numStates-1; state++) {\n                int numMushrooms = states[state];\n                if (numMushrooms < maxEatPerState) {\n                    m2Eat += numMushrooms;\n                }else{\n                    m2Eat += maxEatPerState;\n                }\n                System.out.println(m2Eat);\n            }\n            System.out.printf(\"Case #%d: %d %d %d%n\", testCaseNum+1, sumEat, m2Eat, maxEatPerState);\n            fw.write(String.format(\"Case #%d: %d %d%n\", testCaseNum+1, sumEat, m2Eat));\n            \n        }\n        \n        fw.close();\n        \n    }\n\n}"}
{"idx":"95","func":"class A {\n\n    public static void main(String[] args) {\n\n        try {\n            System.setOut(new PrintStream(\"src\/output.out\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        Scanner in = null;\n        try {\n            in = new Scanner(new File(\"src\/A-large (2).in\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        \/\/ Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = in.nextInt();\n            int[] tab = new int[n];\n            int s = 0;\n            int max = Integer.MIN_VALUE;\n            for (int j = 0; j < tab.length; j++) {\n                tab[j] = in.nextInt();\n                if (j != 0) {\n                    if ((tab[j] - tab[j - 1]) < 0) {\n                        s += -(tab[j] - tab[j - 1]);\n                        if ((tab[j - 1] - tab[j]) > max) {\n                            max = -(tab[j] - tab[j - 1]);\n                        }\n                    }\n                }\n            }\n            int k = 0;\n            int r = tab[0];\n            if (max < 0)\n                max = 0;\n            for (int j = 0; j < tab.length; j++) {\n                if (j != tab.length - 1) {\n                    if (tab[j] >= max) {\n                        k += max;\n                    } else {\n                        k += tab[j];\n                    }\n                }\n            }\n            System.out.println(\"Case #\" + (i + 1) + \": \" + s + \" \" + k);\n        }\n\n    }\n\n}"}
{"idx":"96","func":"class Main {\n\n    public static void main(String[] args) {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedOutputStream bos = new BufferedOutputStream(System.out);\n        String eol = System.getProperty(\"line.separator\");\n        byte[] eolb = eol.getBytes();\n        try {\n            String str = br.readLine();\n            int t = Integer.parseInt(str);\n            for(int i = 0 ; i < t ; i++) {\n                str = br.readLine();\n                int n = Integer.parseInt(str);\n                str = br.readLine();\n                StringTokenizer st = new StringTokenizer(str,\" \");\n                int [] ar = new int[n];\n                int iter = 0;\n                while(st.hasMoreTokens()) {\n                    ar[iter++] = Integer.parseInt(st.nextToken());\n                }\n                int ansY = 0;\n                int ansZ = 0;\n                int dip = 0;\n                for(int j = 0 ; j < n-1 ; j++) {\n                    dip = Math.max(dip,ar[j]-ar[j+1]);\n                    if(ar[j+1]<ar[j]) {\n                        ansY += ar[j]-ar[j+1];\n                    }\n                }\n                for(int j = 0 ; j < n-1 ; j++) {\n                    int x = Math.min(ar[j],dip);\n                    ansZ += x;\n                }\n                bos.write(\"Case #\".getBytes());\n                bos.write(new Integer(i+1).toString().getBytes());\n                bos.write(\": \".getBytes());\n                bos.write(new Integer(ansY).toString().getBytes());\n                bos.write(\" \".getBytes());\n                bos.write(new Integer(ansZ).toString().getBytes());\n                bos.write(eolb);\n            }\n            bos.flush();\n        } catch(IOException ioe) {\n            ioe.printStackTrace();\n        }\n\n    }\n\n}"}
{"idx":"97","func":"class A {\n    public static void main(String[] args) throws Exception {\n        String output = \"\";\n        \n        String pathname = \"D:\\\\Documents\\\\Downloads\\\\A-l.in\"; \/\/ \u00b7\u00b7\u0523\u01fe\u00b7\u0434\u013c\u02b1\u02be\u00b7\n        File filename = new File(pathname); \/\/ \u04aa\u0221\u00b7inputtxt\u013c\n        InputStreamReader reader = new InputStreamReader(new FileInputStream(\n                filename)); \/\/ \u04bbreader\n        BufferedReader sc = new BufferedReader(reader); \/\/ \u04bb\u013c\u05ea\u027c\u0736\n\n        int total = Integer.parseInt(sc.readLine());\n        \/\/total=2;\n        int starting = 1;\n        \/\/System.out.println(total);\n        int[] arr = new int[total];\n        for (int i = 0; i < total; i++) {\n            int n = Integer.parseInt(sc.readLine());\n            String r1 = sc.readLine();\n            String[] a1 = r1.split(\" \");\n            \/\/pl(n);\n            int totalSum=0;\n            int before=Integer.parseInt(a1[0]);\n            for( int k=1;k<n;k++){\n                int mm = Integer.parseInt(a1[k]);\n                \/\/pl(\"before: \"+before+\", mm:\"+mm);\n                if(mm<=before){\n                    totalSum+=(before-mm);\n                }else{\n                    \/\/totalSum+=before;\n                }\n                before = mm;\n            }\n            \n            \/\/second method \n            int totalSum2=0;\n            int before2=Integer.parseInt(a1[0]);\n            int findMax2=0;\n            \n            for( int k=1;k<n;k++){\n                int mm = Integer.parseInt(a1[k]);\n                int difference=  before2-mm;\n                \/\/pl(\"before: \"+before2+\", mm:\"+mm);\n                if(difference>findMax2){\n                    findMax2=difference;\n                }else{\n                \n                }\n                before2 = mm;\n\n            }\n            before2=Integer.parseInt(a1[0]);\n            for( int k=1;k<n;k++){\n                int mm = Integer.parseInt(a1[k]);\n                \/\/pl(\"before: \"+before+\", mm:\"+mm);\n                int difference=  before2-mm;\n                \/\/p(\"[ difference  \"+difference+\"]\");\n                \n                if(before2<findMax2){\n                    totalSum2+=before2;\n                    \/\/p(\"+\"+findMax2);\n                }else{\n                    totalSum2+=findMax2;\n                    \/\/p(\"+\"+findMax2);\n\n                }\n                \n                before2 = mm;\n\n            }\n            \/\/pl(\"findMax is \"+findMax2);\n\n            \/\/pl(\"totalSum:\"+totalSum);\n            \/\/pl(\"totalSum2:\"+totalSum2);\n\n            \/\/pl(\"\");\n            \n            \n            \/\/pl(r1);\n            output+=\"Case #\"+(i+1)+\": \"+totalSum+\" \"+totalSum2+\"\\n\";\n            \/\/arr[i]=needTobeAdded;\n            \/\/System.out.println();\n        }\n\n        \n        Writer writer = null;\n\n        try {\n            writer = new BufferedWriter(new OutputStreamWriter(\n                    new FileOutputStream(\"generatedNumber.txt\"), \"utf-8\"));\n            writer.write(output);\n\n        } catch (IOException ex) {\n            \/\/ report\n        } finally {\n            try {\n                writer.close();\n            } catch (Exception ex) {\n            }\n        }\n\n    }\n}"}
{"idx":"98","func":"class aMushroom {\n    static final double EPS = 1e-10;\n    static final double INF = 1 << 31;\n    static final double PI = Math.PI;\n\n    public static BufferedReader in;\n    public static PrintWriter out;\n\n    StringBuilder sb = new StringBuilder();\n\n\n    public static void main(String[] args) throws IOException {\n        aMushroom r = new aMushroom();\n        aMushroom.in =new BufferedReader(new FileReader(\"in.txt\"));\n        aMushroom.out=new PrintWriter(new FileWriter(\"out.txt\"));\n        \n        Scanner sc = new Scanner(aMushroom.in);\n        StringBuilder sb = new StringBuilder();\n        int T = sc.nextInt();\n        \n        for (int t=1; t<=T; t++){\n            int n = sc.nextInt();\n            int [] m = new int[n];\n            for (int i=0; i<n; i++)\n                m[i] = sc.nextInt();\n            int sum1=0;\n            int max = 0;\n            for (int i=1; i<n; i++)\n                if (m[i]<m[i-1]) {\n                    sum1+=m[i-1] - m[i];\n                    max = Math.max(max, m[i-1]- m[i]);\n                }\n            int sum2 = 0;\n            for (int i=0; i<n-1; i++)\n                if (m[i]<max){\n                    sum2+=m[i];\n                } else sum2+=max;\n            sb.append(\"Case #\" + t + \": \");\n            sb.append(sum1 + \" \" + sum2);\n            sb.append(\"\\n\");\n        }\n        aMushroom.out.print(sb);\n        sc.close();\n        aMushroom.out.close();\n    }\n}"}
{"idx":"99","func":"static void main (String [] args) throws IOException {\n    BufferedReader f = new BufferedReader(new FileReader(\"A-large.in\"));\n    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"A-large.out\")));\n    StringTokenizer st = new StringTokenizer(f.readLine());\n    int num = Integer.parseInt(st.nextToken());\n    for(int i=0;i<num;i++){\n        st = new StringTokenizer(f.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        st = new StringTokenizer(f.readLine());\n        int[] a = new int[n];\n        for(int j=0;j<n;j++)\n            a[j] = Integer.parseInt(st.nextToken());\n        long cnt1=0,cnt2=0,max=0;\n        for(int j=0;j<n-1;j++){\n            max = (max<a[j]-a[j+1])? a[j]-a[j+1]:max;\n            cnt1+=(a[j]-a[j+1]>0)?a[j]-a[j+1]:0;\n        }\n        for(int j=0;j<n-1;j++){\n            cnt2+=(a[j]>=max)?max:a[j];\n        }\n        out.format(\"Case #%d: %d %d\\n\",i+1,cnt1,cnt2);\n    }\n    out.close();                                  \/\/ close the output file\n    System.exit(0);                               \/\/ don't omit this!\n  }\n}"}
{"idx":"100","func":"class A {\n    static Scanner s;\n    public static void main(String[] args) {\n        s = new Scanner(System.in);\n        int t = s.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = s.nextInt();\n            int[] arr = new int[n];\n            for (int i1 = 0; i1 < n; i1++) {\n                arr[i1] = s.nextInt();\n            }\n            \/\/ First Case\n            int prev = arr[0];\n            int first = 0;\n            for (int i3 = 1; i3 < n; i3++) {\n                if (arr[i3] < prev) {\n                    first += prev - arr[i3];\n                }\n                prev = arr[i3];\n            }\n            \n            \/\/ Second Case\n            prev = arr[0];\n            int max = 0;\n            for (int i2 = 1; i2 < n; i2++) {\n                if (arr[i2] < prev) {\n                    if (max < prev - arr[i2]) {\n                        max = prev - arr[i2];\n                    }\n                }\n                prev = arr[i2];\n            }\n            int second = 0;\n            for (int i4 = 0; i4 < n-1; i4++) {\n                second += Math.min(max, arr[i4]);\n            }\n            System.out.println(\"Case #\" + (i+1) + \": \" + first + \" \" + second);\n        }\n    }\n}"}
{"idx":"101","func":"class mushroommonster {\n    public static void main(String[] args)\n    {\n        \n        try\n        {\n            BufferedWriter bw = new BufferedWriter(new FileWriter(\"test1.out\"));\n            BufferedReader br = new BufferedReader(new FileReader(\"test.in\"));\n            \n            int T = Integer.parseInt(br.readLine());    \n            \n            for(int i = 1; i <= T; i++)\n            {\n                br.readLine();\n                String[] temp = br.readLine().split(\" \");\n                int[] nums = new int[temp.length];\n                for(int j = 0 ; j < temp.length; j++)\n                    nums[j] = Integer.parseInt(temp[j]);\n                \n                int maxDiff = -1;\n                for(int j = 0; j < temp.length - 1; j++)\n                {\n                    if(nums[j] - nums[j + 1] > maxDiff)\n                        maxDiff = nums[j] - nums[j + 1];\n                }\n                \n                \/\/double minRate = ((double) maxDiff)\/10;\n                int z = 0;\n                for(int j = 0; j < nums.length - 1; j++)\n                {\n                    if (nums[j] - maxDiff <= 0)\n                        z += nums[j];\n                    else\n                        z += maxDiff;\n                }\n                \n                \n                int y = 0;\n                for(int j = 0; j < nums.length - 1; j++)\n                {\n                    if (nums[j + 1] < nums[j])\n                        y += (nums[j] - nums[j + 1]);\n                }\n                \n                bw.write(\"Case #\" + i + \": \" + y + \" \" + z);\n                bw.newLine();\n            }\n            \n            \n            \n            bw.close();\n            br.close();\n            \n        }\n        catch (Exception ex) \n        {\n            System.out.println(ex.getMessage());\n        }\n    }\n}"}
{"idx":"102","func":"class Solution {\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n            int cases = Integer.parseInt(br.readLine().trim());\n            int inputs;\n            String[] data;\n            int[] mushrooms;\n            int max1,max2,previous,current,tempdiff;\n            int rate;\n            for (int i = 1; i <= cases; i++) {\n                inputs = Integer.parseInt(br.readLine().trim());\n                data = br.readLine().trim().split(\" \");\n                max1=0;\n                max2=0;\n                previous=Integer.parseInt(data[0]);\n                current=-1;\n                mushrooms = new int[inputs];\n                for (int j = 1; j<inputs; j++) {\n                    current=Integer.parseInt(data[j]);\n                    tempdiff=0;\n                    if (current < previous) {\n                        tempdiff = previous - current;\n                    }\n                    max1 += tempdiff;\n                    if (tempdiff > max2) {\n                        max2 = tempdiff;\n                    }\n                    mushrooms[j-1]=previous;\n                    previous = current;\n                }\n                mushrooms[inputs-1] = previous;\n\n                rate = max2;\n                max2=0;\n\n                for (int j = 0; j < inputs-1; j++) {\n                    if (mushrooms[j] < rate) {\n                        max2+=mushrooms[j];\n                    }\n                    else {\n                        max2+=rate;\n                    }\n                }\n\n                System.out.println(\"Case #\"+i+\": \"+max1+\" \"+max2);\n            }\n        }\n        catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"103","func":"class Main\n{\n    public static void main(String args[]) throws Exception\n    {\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n        \n        int cases = Integer.parseInt(br.readLine());\n        \n        for(int i = 0; i < cases; i++)\n        {\n            System.out.print(\"Case #\" + (i+1) + \": \");\n            \n            int periods = Integer.parseInt(br.readLine());\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            \n            int[] mushrooms = new int[periods];\n            for(int j = 0; j < periods; j++)\n            {\n                mushrooms[j] = Integer.parseInt(st.nextToken());\n            }\n            \n            int eaten = 0;\n            int prev = mushrooms[0];\n            for(int i1 = 1; i1 < mushrooms.length; i1++)\n            {\n                if(mushrooms[i1] < prev)\n                {\n                    eaten += prev - mushrooms[i1];\n                }\n                prev = mushrooms[i1];\n            }\n            \n            System.out.print(\"\" + eaten);\n            int maxInPeriod = 0;\n            int prev1 = mushrooms[0];\n            for(int i2 = 1; i2 < mushrooms.length; i2++)\n            {\n                if((prev1 - mushrooms[i2]) > maxInPeriod)\n                {\n                    maxInPeriod = prev1 - mushrooms[i2];\n                }\n                prev1 = mushrooms[i2];\n            }\n            \n            int eaten1 = 0;\n            prev1 = mushrooms[0];\n            for(int i1 = 1; i1 < mushrooms.length; i1++)\n            {\n                int potentiallyEaten = mushrooms[i1] - prev1;\n                if(prev1 < maxInPeriod)\n                {\n                    eaten1 += prev1;\n                }\n                else\n                {\n                    eaten1 += maxInPeriod;\n                }\n                \n                prev1 = mushrooms[i1];\n            }\n            \n            int answer = maxInPeriod * (mushrooms.length-1);\n            System.out.println(\" \" + eaten1);\n        }\n    }\n\n}"}
{"idx":"104","func":"class Mushroom {\n    public static Scanner input = new Scanner(System.in);\n    public static void main(String[] args){\n\n        int numInput = input.nextInt();\n\n        for(int e = 1; e<=numInput ; e++){\n            int numIn = input.nextInt();\n            int[] numMashroom = new int[numIn];\n\n            for(int i = 0; i<numIn;i++){\n                numMashroom[i]=input.nextInt();\n            }\n\n            int case1 = 0;\n            int case2max = 0;\n            int case2 = 0;\n            for(int i = 0; i<numIn -1 ; i++){\n                if(numMashroom[i]>numMashroom[i+1]){\n                    case1 += (numMashroom[i]-numMashroom[i+1]);\n                }\n            }\n\n            for(int i = 0; i<numIn-1;i++){\n                if (case2max<(numMashroom[i]-numMashroom[i+1])){\n                    case2max = numMashroom[i]-numMashroom[i+1];\n                }\n            }\n\n            for(int i = 0; i <numIn-1;i++){\n                if(numMashroom[i]<case2max){\n                    case2+=numMashroom[i];\n                }else{\n                    case2+=case2max;\n                }\n\n            }\n\n\n            System.out.println(\"Case #\"+e+\": \"+case1+\" \"+case2);\n\n        }\n\n    }\n}"}
{"idx":"105","func":"class A {\n    @SuppressWarnings(\"FieldCanBeLocal\")\n    private static int caseNumber;\n    private static Scanner scan;\n\n    public static void main(String[] args) throws Exception {\n        Locale.setDefault(Locale.US);\n\n        String file = \"a\";\n\n        System.setOut(new PrintStream(file + \".out\"));\n\n        String inFile = file + \".in\";\n        scan = new Scanner(new File(inFile));\n\n        int cases = scan.nextInt();\n        for (caseNumber = 1; caseNumber <= cases; ++caseNumber) {\n            System.out.printf(\"Case #%s: \", caseNumber);\n            A r = new A();\n            int n = A.scan.nextInt();\n            int[] m = new int[n];\n            for (int i = 0; i < n; ++i) {\n                m[i] = A.scan.nextInt();\n            }\n            \n            int res1 = 0;\n            for (int i = 1; i < n; ++i) {\n                res1 += Math.max(m[i - 1] - m[i], 0);\n            }\n            \n            int res2 = 0;\n            int max = 0;\n            for (int i = 1; i < n; ++i) {\n                int diff = Math.max(m[i - 1] - m[i], 0);\n                max = Math.max(max, diff);\n            }\n            for (int i = 0; i < n - 1; ++i) {\n                res2 += Math.min(m[i], max);\n            }\n            \n            System.out.printf(\"%d %d\\n\", res1, res2);\n            System.out.flush();\n        }\n\n        scan.close();\n    }\n}"}
{"idx":"106","func":"class MushroomMonster {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int numOfCases = scanner.nextInt();\n\n        for (int i = 0; i < numOfCases; i++) {\n\n            int numIntervals = scanner.nextInt();\n\n            int[] numMushrooms = new int[numIntervals];\n\n            for (int j = 0; j < numIntervals; j++) {\n                numMushrooms[j] = scanner.nextInt();\n            }\n\n            int x = 0;\n            int maxDrop = 0;\n            for (int j = 0; j < numIntervals - 1; j++) {\n                if (numMushrooms[j+1] < numMushrooms[j]) {\n                    x = x + numMushrooms[j] - numMushrooms[j + 1];\n                    if ((numMushrooms[j] - numMushrooms[j + 1]) > maxDrop)\n                        maxDrop = numMushrooms[j] - numMushrooms[j + 1];\n                }\n            }\n\n            int y = 0;\n            for (int j = 0; j < numIntervals - 1; j++) {\n                    if (numMushrooms[j] < maxDrop)\n                        y = y + numMushrooms[j];\n                    else\n                        y = y + maxDrop;\n                }\n\n\n            System.out.println(\"Case #\" + (i + 1) + \": \" + x + \" \" + y);\n\n\n\n\n        }\n    }\n\n}"}
{"idx":"107","func":"class A {\n    \n    public static void main(String[] args) throws Exception {\n        String filename = \"A-large\";\n        Scanner scan = new Scanner(new FileReader(filename + \".in\"));\n        PrintWriter out = new PrintWriter(filename + \".out\");\n        int problems = scan.nextInt();\n        for (int count = 0; count < problems; count++) {\n            System.out.print(\"Case #\" + (count+1) + \": \");\n            out.print(\"Case #\" + (count+1) + \": \");\n            A r = new A();\n            int resultA = 0;\n            int resultB = 0;\n            int n = scan.nextInt();\n            int[] array = new int[n];\n            \n            for (int i = 0; i < n; i++) {\n                array[i] = scan.nextInt();\n            }\n            \n            int maxDiff = 0;\n            for (int i = 1; i < n; i++) {\n                int diff = array[i-1] - array[i];\n                maxDiff = Math.max(maxDiff, diff);\n                if (array[i] < array[i-1]) {\n                    resultA += diff;\n                }\n            }\n            \n            for (int i = 0; i < n-1; i++) {\n                resultB += Math.min(array[i], maxDiff);\n            }\n            \n            System.out.println(resultA + \" \" + resultB);\n            out.println(resultA + \" \" + resultB);\n            \n            resultA = 0;\n        }\n        out.flush();\n        out.close();\n        scan.close();\n    }\n    \n}"}
{"idx":"108","func":"class Mooshroom\n{\n  public static void main (String [] args) throws IOException\n  {\n    BufferedReader input = new BufferedReader (new FileReader (\"A-large.in\"));\n    PrintWriter output = new PrintWriter (new FileWriter (\"output.txt\"));\n    int count = Integer.parseInt (input.readLine ());\n    for (int counter = 1; counter <= count; counter ++)\n    {\n      int numberOfVars = Integer.parseInt (input.readLine ());\n      String [] vars = input.readLine ().split (\" \");\n      int [] variables = new int [numberOfVars];\n      for (int x = 0; x < numberOfVars; x ++)\n        variables [x] = Integer.parseInt (vars [x]);\n      int totalFirst = 0;\n      for (int x = 1; x < numberOfVars; x ++)\n      {\n        if (variables [x - 1] > variables [x])\n          totalFirst += variables [x-1] - variables [x]; \/\/prev minus current\n      }\n      \n      int totalSecond = 0;\n      int largestDiff = 0;\n      for (int x = 1; x < numberOfVars; x ++)\n      {\n        if (variables [x - 1] > variables [x])\n        {\n          if (largestDiff < variables [x - 1] - variables [x])\n            largestDiff = variables [x - 1] - variables [x];\n        }\n      }\n      int firstVal = variables [0];\n      for (int x = 1; x < numberOfVars; x ++) \/\/largest diff = 10\n      {\n        if (variables [x-1] - largestDiff < 0)\n        {\n          totalSecond += variables [x-1];\n        }\n        else\n          totalSecond += largestDiff;\n        \n      }\n      \n      \n      \n      output.println (\"Case #\" + counter + \": \"+totalFirst + \" \" + totalSecond);\n    }\n    output.close ();\n  }\n}"}
{"idx":"109","func":"class A {\n\n    static Scanner reader;\n    static PrintWriter writer;\n    \n    public static void main(String[] args) throws IOException {\n        reader = new Scanner(new FileReader(\"input\"));\n        writer = new PrintWriter(new FileWriter(\"output\"));\n        int nt = reader.nextInt();\n        for(int tc = 1; tc <= nt; tc++) {\n            int n = reader.nextInt();\n            int[] m = new int[n];\n            for(int i = 0; i < n; i++) {\n                m[i] = reader.nextInt();\n            }\n            int min1 = 0;\n            int maxDecrease = -1;\n            for(int i = 1; i < n; i++) {\n                min1 += Math.max(0, m[i - 1] - m[i]);\n                maxDecrease = Math.max(maxDecrease, Math.max(0, m[i - 1] - m[i]));\n            }\n            int min2 = 0;\n            for(int i = 0; i < n - 1; i++) {\n                min2 += Math.min(m[i], maxDecrease);\n                \n            }\n            writer.println(\"Case #\" + tc + \": \" + min1 + \" \" + min2);\n        }\n        writer.close();\n        reader.close();\n    }\n    \n}"}
{"idx":"110","func":"class ProbA {\n\n    \/**\n     * Assumes input\/output file names passed on command line\n     * @param args\n     *\/\n    public static void main(String[] args) throws Exception {\n        BufferedReader brIn = new BufferedReader(new FileReader(args[0]));\n        BufferedWriter bwOut = new BufferedWriter(new FileWriter(args[1]));\n        \n        String sLine; \n        int ca=1;\n        brIn.readLine(); \/\/ skip first line\n        while((sLine = brIn.readLine())!=null) {\n            int N = Integer.parseInt(sLine);\n            int [] m = new int[N];\n            sLine = brIn.readLine();\n            String [] fields = sLine.split(\" \");\n            int totalDec = 0;\n            int maxDec = 0;\n            int prev = 0;\n            for(int i=0; i<m.length; i++) {\n                m[i] = Integer.parseInt(fields[i]);\n                if(i!=0) {\n                    int dec = prev - m[i];\n                    if(dec > maxDec)\n                        maxDec = dec;\n                    if(dec > 0) {\n                        totalDec += dec; \n                    }\n                }\n                prev = m[i];\n            }\n            int rateEst = 0;\n            for(int i=0; i<m.length-1; i++) {\n                rateEst += Math.min(maxDec, m[i]);\n            }\n            String msg = totalDec + \" \" + rateEst;\n            bwOut.write(\"Case #\" + ca + \": \" + msg + \"\\r\\n\");\n            ca++;\n        }\n        brIn.close();\n        bwOut.close();\n    }\n\n}"}
{"idx":"111","func":"class MushroomMonster {\n    \n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        int testCases = reader.nextInt();\n        for(int t = 0; t < testCases; t++){\n            int size = reader.nextInt();\n            int last = 0;\n            int first = 0;\n            int maxdif = 0;\n            int[] stuff = new int[size];\n            for(int i = 0; i < size; i++){\n                int buff = reader.nextInt();\n                stuff[i] = buff;\n                if(i == 0){\n                    last = buff;\n                }else{\n                    int add = last - buff;\n                    if(add > 0){\n                        first += add;\n                        if(add > maxdif){\n                            maxdif = add;\n                        }\n                    }\n                    last = buff;\n                }\n            }\n            int second = 0;\n            for(int i = 0; i < size-1; i++){\n                if(stuff[i] > maxdif){\n                    second += maxdif;\n                }else{\n                    second += stuff[i];\n                }\n            }\n            \n            System.out.println(\"Case #\" + (t+1) + \": \" + first + \" \" + second);\n        }\n        reader.close();\n    }\n\n}"}
{"idx":"112","func":"class Main {\n    private static StreamTokenizer in;\n    private static Scanner ins;\n    private static PrintWriter out;\n\n    public static void main(String[] args) {\n\n        try {\n            in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n            ins = new Scanner(System.in);\n            out = new PrintWriter(System.out);\n            try {\n                if (System.getProperty(\"xDx\") != null) {\n                    in = new StreamTokenizer(new BufferedReader(new FileReader(\"input.txt\")));\n                    ins = new Scanner(new FileReader(\"input.txt\"));\n                    out = new PrintWriter(new FileWriter(\"output.txt\"));\n                }\n            } catch (Exception e) {\n                in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n                ins = new Scanner(System.in);\n                out = new PrintWriter(System.out);\n            }\n            Main r = new Main();\n            Main.in.nextToken();\n            int t = (int) Main.in.nval;\n            for (int k = 0; k < t; k++) {\n                Main.in.nextToken();\n                int n = (int) Main.in.nval;\n                int y = 0;\n                int z = 0;\n                int speed = 0;\n                int[] a = new int[n];\n                for (int i = 0; i < n; i++) {\n                    Main.in.nextToken();\n                    a[i] = (int) Main.in.nval;\n                    if(i > 0) {\n                        y += Math.max(a[i - 1] - a[i], 0);\n                        speed = Math.max(speed, a[i - 1] - a[i]);\n                    }\n                }\n            \n                for (int i = 0; i < n - 1; i++) {\n                    z += Math.min(a[i], speed);\n                }\n            \n                Main.out.printf(\"Case #%d: %d %d\\n\", k + 1, y, z);\n            }\n            out.close();\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"113","func":"class basic {\n\n    public static void main(String[] args) throws IOException {\n\n        FileInputStream in = new FileInputStream(\n                \"D:\/works\/java\/G1A\/bin\/A-large (1).in\");\n        Scanner s = new Scanner(in);\n        PrintWriter out = new PrintWriter(new FileWriter(\n                \"D:\/works\/java\/G1A\/bin\/3large.out\"));\n\n        int n = Integer.parseInt(s.next());\n        for (int i = 1; i <= n; i++) {\n            int t = s.nextInt();\n            int a[] = new int[t];\n            int sum = 0, sum2 = 0, fsum = 0, r = 0;\n            for (int j = 0; j < a.length; j++) {\n                a[j] = s.nextInt();\n                if (j > 0 && a[j] < a[j - 1])\n                    sum += a[j - 1] - a[j];\n                if (j > 0 && r < a[j - 1] - a[j]&& a[j] < a[j - 1])\n                    r = a[j - 1] - a[j];\n            }\n            for (int j = 0; j < a.length -1; j++) {\n                sum2 += a[j];\n                if (a[j] >= r) {\n                    fsum += r;\n                    sum2 -= r;\n                } else {\n                    fsum += a[j];\n                    sum2 = 0;\n                }\n            }\n            out.println(\"Case #\" + i + \": \" + sum + \" \" + fsum);\n            System.out.println(\"Case #\" + i + \": \" + sum + \" \" + fsum);\n        }\n        out.close();\n    }\n\n}"}
{"idx":"114","func":"class b {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        PrintWriter writer;\n        try {\n            writer = new PrintWriter(\"out.txt\", \"UTF-8\");\n        \n            int t = Integer.parseInt(s.nextLine());\n            \n            for (int i = 1; i <= t; ++i){\n                \/\/ solve\n\n                int n = Integer.valueOf(s.nextLine());\n                String[] times = s.nextLine().split(\" \");\n                int r1 = 0;\n                int max_rate = 0;\n                for(int j = 1; j < n; j++) {\n                    int x = Integer.valueOf(times[j-1]);\n                    int y = Integer.valueOf(times[j]);\n\n                    if(x > y) {\n                        r1 += x - y;\n                    }\n                    \n                    if(x - y > max_rate) {\n                        max_rate = x-y;\n                    }\n                }\n                \n                int r2 = 0;\n                for(int j = 0; j < n-1; j++) {\n                    int x = Integer.valueOf(times[j]);\n                    r2 += x>max_rate? max_rate: x;\n                }\n                \n                String result = r1 + \" \" + r2;\n\n                System.out.println(\"Case #\" + i + \": \" + result);\n                writer.println(\"Case #\" + i + \": \" + result);\n            }\n            \n            s.close();\n            writer.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"115","func":"class CodeJamMushroom{\n    public static void main(String[] args) throws Exception{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder out = new StringBuilder();\n        int t = Integer.parseInt(br.readLine());\n        for(int i = 1; i <= t; i++){\n            int n = Integer.parseInt(br.readLine());\n            int[] m = new int[n];\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int f = 0;\n            int r = 0;\n            for(int j = 0; j < n; j++){\n                m[j] = Integer.parseInt(st.nextToken());\n                if(j != 0 && m[j] < m[j-1]){\n                    f += m[j-1] - m[j];\n                    r = Math.max(r,m[j-1]-m[j]);\n                }\n            }\n            int s = 0;\n            for(int j = 0; j < n-1; j++){\n                s += Math.min(r,m[j]);\n            }\n            out.append(String.format(\"Case #%d: %d %d\\n\",i,f,s));\n        }\n        System.out.print(out);\n    }\n}"}
{"idx":"116","func":"class A\n{\n\n    private BufferedReader reader;\n    private BufferedWriter writer;\n\n    public static void main(String[] args)\n    {\n        A a = new A(args[0]);\n        int numberOfTests = 0;\n        \n        try\n        {\n            numberOfTests = Integer.parseInt(a.reader.readLine());\n        }\n        catch (NumberFormatException | IOException e)\n        {\n            System.err.println(\"Failed to read line\");\n            e.printStackTrace();\n            System.exit(-1);\n        }\n        \n        for (int testCase = 1; testCase <= numberOfTests; testCase++)\n        {\n            try\n            {\n                a.reader.readLine();\n        \n                List<Integer> mushrooms = new ArrayList<>();\n                int maxRate = 0;\n                int lastMush = 0;\n        \n                for (String mushroom : a.reader.readLine().split(\"\\\\s\"))\n                {\n                    int mush = Integer.parseInt(mushroom);\n        \n                    mushrooms.add(mush);\n        \n                    if (lastMush - mush > maxRate)\n                    {\n                        maxRate = lastMush - mush;\n                    }\n        \n                    lastMush = mush;\n                }\n                int methodA = 0;\n                int methodB = 0;\n                \n                for (int i = 1; i < mushrooms.size(); i++)\n                {\n                    if (mushrooms.get(i) < mushrooms.get(i - 1))\n                    {\n                        methodA += mushrooms.get(i - 1) - mushrooms.get(i);\n                    }\n                \n                    methodB += Math.min(maxRate, mushrooms.get(i - 1));\n                }\n        \n                String response = methodA + \" \" + methodB;\n        \n                a.writer.write(\"Case #\" + testCase + \": \" + response + \"\\n\");\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n                System.exit(-1);\n            }\n        }\n        \n        try\n        {\n            a.reader.close();\n            a.writer.flush();\n            a.writer.close();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    public A(String filename)\n    {\n        File file = new File(filename);\n        try\n        {\n            reader = new BufferedReader(new FileReader(file));\n            writer = new BufferedWriter(new FileWriter(file + \".out\"));\n        }\n        catch (IOException e)\n        {\n            System.err.println(\"Failed to open FileReader\");\n            e.printStackTrace();\n            System.exit(-1);\n        }\n    }\n}"}
{"idx":"117","func":"class P1 {\n    public static final String filename = \"A-large\";\n    public static Scanner in;\n    public static PrintStream out;\n\n    public static void main(String[] args) throws Exception {\n        in = new Scanner(new File(filename + \".in\"));\n        out = new PrintStream(new FileOutputStream(filename + \".out\"));\n        \n        int num = Integer.parseInt(in.nextLine());\n        for (int i = 1; i <= num; i++) {\n            String line = in.nextLine();\n            int n = Integer.parseInt(line);\n            int[] arr = new int[n];\n            String[] ss = in.nextLine().split(\" \");\n            for (int j = 0; j < n; j++) {\n                arr[j] = Integer.parseInt(ss[j]);\n            }\n            int sum = 0;\n            for (int i1 = 0; i1 < arr.length - 1; i1++) {\n                if (arr[i1] > arr[i1 + 1])\n                    sum += arr[i1] - arr[i1 + 1];\n            }\n            int res1 = sum;\n            int sum1 = 0;\n            int rate = 0;\n            for (int i2 = 0; i2 < arr.length - 1; i2++) {\n                if (arr[i2] - arr[i2 + 1] > rate)\n                    rate = arr[i2] - arr[i2 + 1];\n            }\n            \n            for (int i1 = 0; i1 < arr.length - 1; i1++) {\n                if (arr[i1] >= rate) {\n                    sum1 += rate;\n                    arr[i1] -= rate;\n                } else { \/\/ a[i] < rate\n                    sum1 += arr[i1];\n                    arr[i1] = 0;\n                }\n            }\n            int res2 = sum1;\n            String s = \"Case #\" + i + \": \" + res1 + \" \" + res2;\n            System.out.println(s);\n            out.println(s);\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"118","func":"class A {\npublic static void main(String args[]) throws Exception\n{\n    Scanner in = new Scanner(new File(\"A.in\"));\n    int count = 1;\n    int numcases = in.nextInt();\n    while(numcases-->0)\n    {\n        int numint = in.nextInt();\n        int[] vals = new int[numint];\n        for(int i=0;i<numint;i++)\n            vals[i]=in.nextInt();\n        \n        int onesum = 0;\n        for(int i=0; i<vals.length-1;i++)\n        {\n            if(vals[i]>vals[i+1])\n                onesum+=vals[i]-vals[i+1];\n        }\n        \n        int maxdiff = 0;\n        for(int i=0;i<vals.length-1;i++)\n        {\n            if(vals[i]>vals[i+1])\n                if(maxdiff<vals[i]-vals[i+1])\n                    maxdiff=vals[i]-vals[i+1];\n        }\n        \n        int twosum = 0;\n        for(int i=0;i<vals.length-1;i++)\n        {\n            if(maxdiff>vals[i])\n                twosum+=vals[i];\n            else\n                twosum+=maxdiff;\n        }\n        System.out.println(\"Case #\" + count + \": \"+onesum+\" \"+twosum);\n        count++;\n    }\n    \n}\n}"}
{"idx":"119","func":"class MushroomMonster\n{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int tc = 1; tc <= T; tc++)\n        {\n            int n = in.nextInt();\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++)\n                a[i] = in.nextInt();\n            int r1 = 0, r2 = 0, maxd = 0;\n            for (int i = 0; i + 1 < n; i++)\n                r1 += Math.max(0, a[i] - a[i + 1]);\n            for (int i = 0; i + 1 < n; i++)\n                maxd = Math.max(maxd, a[i] - a[i + 1]);\n            for (int i = 0; i + 1 < n; i++)\n                r2 += Math.min(a[i], maxd);\n            System.out.printf(\"Case #%d: %d %d\\n\", tc, r1, r2);\n        }\n    }\n}"}
{"idx":"120","func":"class a {\n    public static void main(String[] args) {\n        final String inputFile = \"A-large\";\n        Scanner sc = null;\n        PrintWriter pw = null;\n        \n        try {\n            int n = 0;\n            int plates = 0;\n            String[] vals;\n            \n            sc = new Scanner(new FileReader(inputFile + \".in\"));\n            pw = new PrintWriter(new FileWriter(inputFile + \".out\"));\n            n = Integer.parseInt(sc.nextLine());\n            \n            for(int id = 1; id <= n; id++){\n                \n                plates = Integer.parseInt(sc.nextLine());\n                \n                vals = sc.nextLine().split(\" \");\n                \n                int a,b = 0;\n                int minA = 0;\n                int minDiff = 0;\n                int diff = 0;\n                \n                for(String s : vals) {\n                    a = b;\n                    b = Integer.parseInt(s);\n                    if(b < a) {\n                        diff = a-b;\n                        minA += diff;\n                        if(diff > minDiff) {\n                            minDiff = diff;\n                        }\n                    }\n                }\n                b = 0;\n                int minB = 0;\n                for(String s : vals) {\n                    b = Integer.parseInt(s);\n                    if(b < minDiff) {\n                        minB += b;\n                    }\n                    else {\n                        minB += minDiff;\n                    }\n                }\n                if(b < minDiff)\n                    minB -= b;\n                else\n                    minB -= minDiff;\n                \n                pw.print(\"Case #\" + id + \": \" + minA + \" \" + minB);\n                \n                pw.print(\"\");\n                \n                pw.println();\n            }\n        }\n        catch (Exception e) {\n            System.out.println(\"Invalid Arguments!\");\n        }\n        finally {\n            if (pw != null) { \n                pw.flush();\n                pw.close(); \n            } \n            if (sc != null) {\n                sc.close();\n            }\n        } \n    }\n}"}
{"idx":"121","func":"class Problem1 {\n    public static void main(String[] args) {\n    try {\n        BufferedReader reader = new BufferedReader(new FileReader(\"A-large.in\"));\n        String line = null;\n        List<String> lines1 = new ArrayList<String>();\n        while((line = reader.readLine()) != null) {\n            lines1.add(line);\n        }\n        reader.close();\n        List<String> lines = lines1;\n        List<String> outputLines = new ArrayList<String>();\n        int index = 0;\n        int testCases = Integer.parseInt(lines.get(index++));\n        for(int t = 0; t < testCases; t++) {\n            String[] tokens = lines.get(index++).split(\" \");\n            int intervals = Integer.parseInt(tokens[0]);\n            String[] strs = lines.get(index++).split(\" \");\n            int[] pieces = new int[intervals];\n            for(int i = 0; i < strs.length; i++) {\n            pieces[i] = Integer.parseInt(strs[i]);\n            }\n            int method1 = 0;\n            int max = 0;\n            int[] decays = new int[intervals]; \n            for(int i = 1; i < intervals; i++) {\n            if(pieces[i] < pieces[i-1]) {\n                int decay = pieces[i-1] - pieces[i];\n                method1 += decay;\n                max = Math.max(max, decay);\n                decays[i] = decay;\n            }\n            }\n            int method2 = 0;\n            for(int i = 1; i < intervals; i++) {\n            int decay = Math.min(pieces[i-1], max);\n            method2 += decay;\n            }\n            String testCaseOutput = \"Case #\" + (t+1) + \": \" + method1 + \" \" + method2;\n            System.out.println(testCaseOutput);\n            outputLines.add(testCaseOutput);\n        }\n        StringBuilder strValue = new StringBuilder(\"\");\n        if (outputLines != null) {\n            int i = 0;\n            for (Object v : outputLines) {\n            String value = v.toString();\n            if (i == 0) {\n                strValue.append(value);\n            } else {\n                strValue.append(\"\\n\");\n                strValue.append(value);\n            }\n            i++;\n            }\n        }\n        String output = strValue.toString();\n        FileWriter writer = new FileWriter(\"A-large.in\".replace(\".in\", \".out\"));\n        writer.write(output);\n        writer.close();\n    }catch(Exception ex) {\n        ex.printStackTrace();\n    }\n    }\n\n\n}"}
{"idx":"122","func":"class MushroomMonster \n{\n    public static void main(String[] args) throws IOException\n    {\n        Scanner sc = new Scanner (new File(\"MushroomMonster.in\"));\n        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(\"MushroomMonster.out\")));\n        int T = sc.nextInt();\n        sc.nextLine();\n        for (int caseNum = 1; caseNum <= T; caseNum++)\n        {\n            int x = sc.nextInt();\n            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();\n            for(int i = 0; i<x; i++)\n                timeIntervals.add(sc.nextInt());\n            int finalCase1Amount = 0;\n            int previous = timeIntervals.get(0);\n            int next = 0;\n            int maximumDifference = 0;\n            int difference = 0;\n            for (int i=1; i<timeIntervals.size(); i++)\n            {\n                next = timeIntervals.get(i);\n                \n                difference = previous-next;\n                if (difference>0)\n                {\n                    finalCase1Amount+=difference;\n                    if (difference>maximumDifference)\n                        maximumDifference = difference;\n                }\n                \n                previous = timeIntervals.get(i);\n            }\n                \n            int finalCase2Amount = 0;\n            int total = 0;\n            \n            for (int i=0; i<timeIntervals.size()-1; i++)\n            {\n                total = timeIntervals.get(i);                    \n                if (total-maximumDifference<=0)\n                {\n                    finalCase2Amount+=total;\n                    total = 0;\n                }\n                else\n                {\n                    finalCase2Amount+=maximumDifference;\n                    total -= maximumDifference;\n                }\n            }\n\n            fw.write(\"Case #\"+caseNum+\": \"+finalCase1Amount+\" \"+finalCase2Amount+\"\\n\");\n        }\n        fw.flush();\n        fw.close();\n        sc.close();\n    }\n}"}
{"idx":"123","func":"class p1 {\n    public static void main(String args[]) throws IOException {\n        Scanner input = new Scanner(new FileInputStream( new File(\"p1small.txt\")));\n        BufferedWriter bfr = new BufferedWriter(new FileWriter( new File(\"p1small.result\")));\n        int counter = 1;\n        input.nextLine();\n        while(input.hasNext()){\n            input.nextLine();\n            String[] line = input.nextLine().split(\" \");\n            int[] res1 = new int[2];\n            List<Integer> mushrooms =new ArrayList<>();\n            for (String s : line){\n                mushrooms.add(Integer.valueOf(s));\n            }\n            int last = mushrooms.get(0);\n            int rate = 0;\n            for (int i = 1;i<mushrooms.size();i++){\n                int cur = mushrooms.get(i);\n                int diff = last - cur;\n                if (diff > 0){\n                    res1[0]+=diff;\n                }\n                if (diff>rate){\n                    rate = diff;\n                }\n                last = cur;\n            }\n            \n            for (int i = 0;i<mushrooms.size()-1;i++){\n                int cur = mushrooms.get(i);\n                if (cur < rate){\n                    res1[1] += cur;\n                }else{\n                    res1[1] += rate;\n                }\n            }\n            int[] res = res1;\n            System.out.printf(\"Case #%d: %d %d\\n\",counter++,res[0],res[1]);\n        }\n        bfr.flush();\n    }\n}"}
{"idx":"124","func":"class A {\n    private static final String INPUT = \"A-large.in\";\n    private static final String OUTPUT = \"A-large.out\";\n\n    private Scanner scanner;\n    private BufferedWriter writer;\n\n    public static void main(String[] args) throws IOException {\n        A r = new A();\n        r.scanner = new Scanner(new File(A.INPUT));\n        r.writer = new BufferedWriter(new FileWriter(A.OUTPUT));\n        int n = r.scanner.nextInt();\n        for (int i = 0; i < n; i++) {\n            int n1 = r.scanner.nextInt();\n            int[] m = new int[n1];\n            for (int i1 = 0; i1 < n1; i1++) {\n                m[i1] = r.scanner.nextInt();\n            }\n            long sum = 0;\n            for (int i1 = 1; i1 <m.length; i1++) {\n                if (m[i1] < m[i1-1]) {\n                    \/\/less mushrooms, she ate some\n                    sum+= m[i1-1] - m[i1];\n                }\n            }\n            \n            long first = sum;\n            long sum1 = 0;\n            int maxDif = Integer.MIN_VALUE;\n            for (int i1 = 1; i1 < m.length; i1++) {\n                maxDif = Math.max(maxDif, m[i1-1] - m[i1]);\n            }\n            \n            for (int i2 = 0; i2 < m.length -1; i2++) {\n                sum1 += Math.min(m[i2], maxDif);\n            }\n            long second = sum1;\n            \n            String line = \"Case #\" + (i+1) + \": \" + first + \" \" + second;\n            r.writer.write(line + \"\\n\");\n            System.out.println(line);\n        }\n        r.scanner.close();\n        r.writer.close();\n    }\n}"}
{"idx":"125","func":"class A {\n\n    public static void main(String[] args) {\n        try {\n            File fin = new File(\"A-large.in\");\n            Scanner sc = new Scanner(fin);\n            File fout = new File(\"aout.txt\");\n            PrintWriter pw = new PrintWriter(fout);\n            \/\/PrintWriter pw = new PrintWriter(System.out);\n            int T = sc.nextInt();\n            for (int cn=1; cn<=T; cn++) {\n                int N = sc.nextInt();\n                int[] m = new int[N];\n                for (int i=0; i<N; i++) {\n                    m[i] = sc.nextInt();\n                }\n                A a = new A();\n                int[] res1 = new int[2];\n                int last = 0;\n                int rate = 0;\n                for (int y: m) {\n                    int dec = Math.max(0, last - y);\n                    res1[0] += dec;\n                    rate = Math.max(rate, dec);\n                    last = y;\n                }\n                for (int i=0; i+1<m.length; i++) {\n                    res1[1] += Math.min(m[i], rate);\n                }\n                int[] res = res1;\n                pw.write(\"Case #\" + cn + \": \" + res[0] + \" \" + res[1] + \"\\n\");\n            }\n            pw.flush();\n            pw.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"126","func":"class A {\n    private static final String PROBLEM = \"round1a\/A-large\";\n    private final Scanner in;\n    public A(Scanner in) {\n        this.in = in;\n    }\n\n    private List<Integer> nextIntList(int n) {\n        ImmutableList.Builder<Integer> builder = ImmutableList.builder();\n        for (int i = 0; i < n; i++) {\n            builder.add(in.nextInt());\n        }\n        return builder.build();\n    }\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(PROBLEM + \".in\"));\n        A r = new A(in);\n        int numCases = r.in.nextInt();\n        PrintWriter writer = new PrintWriter(A.PROBLEM + \".out\");\n        for (int casenum = 1; casenum <= numCases; casenum++) {\n            int n = r.in.nextInt();\n            List<Integer> vals = r.nextIntList(n);\n            \n            int maxDiff = 0;\n            long result1 = 0;\n            for (int i = 1; i < vals.size(); i++) {\n                int diff = vals.get(i - 1) - vals.get(i);\n                maxDiff = Math.max(maxDiff, diff);\n                if (diff > 0) {\n                    result1 += diff;\n                }\n            }\n            \n            long result2 = 0;\n            for (int i = 0; i < vals.size() - 1; i++) {\n                result2 += Math.min(maxDiff, vals.get(i));\n            }\n            String result = String.format(\"%d %d\", result1, result2);\n            System.out.printf(\"Case #%d: %s%n\", casenum, result);\n            writer.printf(\"Case #%d: %s%n\", casenum, result);\n            writer.flush();\n        }\n    }\n}"}
{"idx":"127","func":"class MushroomMonster {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"resources\/googleCodeJam2015\/round1a\/mushroomMonster\/A-large.in\"));\n        PrintWriter writer = new PrintWriter(\"resources\/googleCodeJam2015\/round1a\/mushroomMonster\/A-large.out\", \"UTF-8\");\n\n        int numofTestCases = Integer.valueOf(br.readLine());\n        int[] answer1 = new int[numofTestCases];\n        for (int i = 0; i < numofTestCases; i++) {\n            String testCase = br.readLine();\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int totalA = 0;\n            int currentNumMushroom = Integer.parseInt(st.nextToken());\n            while (st.hasMoreTokens()) {\n                int nextMushroom = Integer.parseInt(st.nextToken());\n                if (nextMushroom < currentNumMushroom) {\n                    totalA += currentNumMushroom - nextMushroom;\n                }\n                currentNumMushroom = nextMushroom;\n            }\n\n            answer1[i] = totalA;\n        }\n\n        br = new BufferedReader(new FileReader(\"resources\/googleCodeJam2015\/round1a\/mushroomMonster\/A-large.in\"));\n        numofTestCases = Integer.valueOf(br.readLine());\n        for (int i = 0; i < numofTestCases; i++) {\n            String testCase = br.readLine();\n            String[] array = br.readLine().split(\"\\\\s+\");\n\n            int maxDiff = 0;\n            for (int j = 0; j < array.length - 1; j++) {\n                if ((Integer.parseInt(array[j]) - Integer.parseInt(array[j + 1])) > maxDiff) {\n                    maxDiff = Integer.parseInt(array[j]) - Integer.parseInt(array[j + 1]);\n                }\n            }\n            int rate = maxDiff;\n\n            int answer2 = 0;\n            for (int j = 0; j < array.length - 1; j++) {\n                answer2 += Math.min(rate, Integer.parseInt(array[j]));\n            }\n\n            int testCaseNumber = i + 1;\n            writer.println(\"Case #\" + testCaseNumber + \": \" + answer1[testCaseNumber - 1] + \" \" + answer2);\n        }\n        writer.close();\n        br.close();\n    }\n}"}
{"idx":"128","func":"class Main {\n    final Scanner sc = new Scanner(System.in);\n\n    int n;\n    int[] a;\n\n    public static void main (String[] args) {\n        Main r = new Main();\n        final int cn = r.sc.nextInt();\n        r.sc.nextLine();\n        for (int ci = 1; ci <= cn; ci++) {\n            r.n = r.sc.nextInt();\n            r.sc.nextLine();\n            r.a = new int[r.n];\n            for(int i = 0; i < r.n; i++){\n                r.a[i] = r.sc.nextInt();\n            }\n            r.sc.nextLine();\n            System.out.printf(\"Case #%d: \", ci);\n            int sumrd =0;\n            int maxrd = 0;\n            for(int i = 1; i < r.n; i++){\n                if(r.a[i] < r.a[i-1]){\n                    int rd = r.a[i-1]-r.a[i];\n                    sumrd+=rd;\n                    if(maxrd< rd){\n                        maxrd=rd;\n                    }\n                }\n            }\n            int sum2 = 0;\n            for(int i = 0; i < r.n-1; i++){\n                int p = r.a[i];\n                if(p < maxrd){\n                    sum2+=p;\n                } else{\n                    sum2+=maxrd;\n                }\n            }\n            System.out.println(sumrd+\" \"+sum2);\n        }\n    }\n}"}
{"idx":"129","func":"class SolverMush {\n    static PrintWriter writer;\n\n    public static void main(String[] args) throws NumberFormatException,\n    IOException {\n        writer = new PrintWriter(\"output\");\n        Scanner sc = new Scanner(new File(\"input\"));\n        int nbTest = sc.nextInt();\n        for (int i = 1; i <= nbTest; i++) {\n            int N = sc.nextInt();\n            int[] m = new int[N];\n            int res1 = 0, res2 = 0;\n            int biggestDif = 0;\n            int last = sc.nextInt();\n            m[0] = last;\n            for (int j = 1; j < N; j++) {\n                m[j] = sc.nextInt();\n                int diff = last - m[j];\n                if (diff > 0) {\n                    res1 += diff;\n                }\n                if (diff > biggestDif) {\n                    biggestDif = diff;\n                }\n                last = m[j];\n            }\n            for (int j = 0; j < N - 1; j++) {\n                res2 += Math.min(biggestDif, m[j]);\n            }\n        \n            SolverMush.writer.println(\"Case #\" + i + \": \" + res1 + \" \" + res2);\n        }\n        writer.flush();\n    }\n\n}"}
{"idx":"130","func":"class ProblemA\n{\n  public static void main (String [] args) throws Exception\n  {\n    Scanner in = new Scanner (new FileReader (\"A-large.in\"));\n    PrintWriter out = new PrintWriter (new FileWriter (\"out.txt\"));\n    int cases = in.nextInt ();\n    in.nextLine();\n    for (int x = 0; x < cases; x++)\n    {\n      int intervals = in.nextInt();\n      int [] mushrooms = new int [intervals];\n      for (int m = 0; m < intervals; m++)\n      {\n        mushrooms [m] = in.nextInt();\n      }\n      int minMush1 = 0;\n      for (int m = 1; m < intervals; m++)\n      {\n        if (mushrooms [m] < mushrooms [m-1])\n        {\n          minMush1 += (mushrooms [m-1]- mushrooms [m]);\n        }\n      }\n      int minMush2 = 0;\n      int maxDiff = 0;\n      for (int m = 1; m < intervals; m++)\n      {\n        if ((mushrooms [m-1] - mushrooms [m]) > maxDiff)\n        {\n          maxDiff = mushrooms [m-1] - mushrooms [m];\n        }\n      }\n      for (int m = 0; m < intervals - 1; m++)\n      {\n        if (mushrooms [m] >= maxDiff)\n          minMush2 += maxDiff;\n        else\n          minMush2 += mushrooms [m];\n      }\n      out.println (\"Case #\" + (x+1) + \": \" + minMush1 + \" \" + minMush2);\n    }\n    out.close();\n  }\n}"}
{"idx":"131","func":"class first1{\n    static String infile = \"in.txt\";\n    static String outfile = \"out.txt\";\n    public static void main(String[] args)throws IOException{\n        BufferedReader in = new BufferedReader(new FileReader(infile));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(outfile,false)));\n        int line = Integer.parseInt(in.readLine());\n        for(int i=1;i<=line;i++){\n            String nums = in.readLine();\n            String[] parts = in.readLine().split(\" \");\n            int d = Integer.parseInt(nums);\n            int n1=0,n2=0,max1=0;\n            int[] number = new int[parts.length];\n            for(int j=0;j<parts.length;j++){\n                number[j]=Integer.parseInt(parts[j]); \n            }\n            if(number[0]>number[1]){\n                max1 = number[0]-number[1];\n            }\n            for(int k=1;k<number.length;k++){\n                if((number[k-1]-number[k])>max1){\n                    max1=number[k-1]-number[k];\n                }\n                if(number[k]<number[k-1]){\n                   n1=n1+number[k-1]-number[k]; \n                }\n            }\n            for(int k=0;k<number.length-1;k++){\n                if(number[k]<max1){\n                    n2+=number[k];\n                }else{\n                    n2+=max1;\n                }\n            }\n            \/*out.print(\"Case # \"+i+\" : \");\n            for(String str:parts){\n                out.print(str+\" \");\n            }\n            out.println();*\/\n            out.printf(\"Case #%d: %d %d\",i,n1,n2);\n            out.println();\n            out.flush();\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"132","func":"class Mushroom {\n\n    public static void main(String[] args) throws Exception {\n        Mushroom m = new Mushroom();\n        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(input.readLine());\n        for (int i = 0; i < n; i++) {\n            int a = Integer.parseInt(input.readLine());\n            int[] p = new int[a];\n            String[] ss = input.readLine().split(\"\\\\s\");\n            for (int j = 0; j < ss.length; j++) {\n                p[j] = Integer.parseInt(ss[j]);\n            }\n            int[] r = new int[2];\n            int a1 = 0;\n            int b = 0;\n            for (int i1 = 1; i1 < p.length; ++i1) {\n                if (p[i1 - 1] > p[i1]) {\n                    a1 += p[i1 - 1] - p[i1];\n                    b = Math.max(p[i1 - 1] - p[i1], b);\n                }\n            }\n            r[0] = a1;\n            a1 = 0;\n            for (int i2 = 1; i2 < p.length; ++i2) {\n                if (b < p[i2 - 1]) {\n                    a1 += b;\n                } else {\n                    a1 += p[i2 - 1];\n                }\n            }\n            r[1] = a1;\n            int[] answer = r;\n            System.out.println(\"Case #\" + (i + 1) + \": \" + answer[0] + \" \" + answer[1]);\n        }\n    }\n}"}
{"idx":"133","func":"class ProbA {\npublic static void main(String[] args)\n{\n    Scanner sc = new Scanner(System.in);\n    int numcases = sc.nextInt();\n    for(int cas  = 1;cas <= numcases;cas++ )\n    {\n        System.out.print(\"Case #\"+cas+\": \");\n        \n        long methone=0;\n        int numticks = sc.nextInt();\n        long[] values = new long[numticks];\n        for(int i=0;i<numticks;i++)\n        {\n            values[i] = sc.nextInt();\n        }\n        long maxdec=0;\n        for(int i=1;i<numticks;i++)\n        {\n            if(values[i] <values[i-1])\n            {\n                methone+= values[i-1]-values[i];\n                if(values[i-1] - values[i]>maxdec)\n                {\n                    maxdec = values[i-1] - values[i];\n                }\n            }\n        }\n        int methtwo =0;\n        for(int i=0;i<numticks-1;i++)\n        {\n            if(values[i]>maxdec)\n            {\n                methtwo+= maxdec;\n            }else\n            {\n                methtwo+= values[i];\n            }\n            \n        }\n        System.out.println(methone+\" \"+methtwo);\n        \n        \n        \n        \n    }\n}\n}"}
{"idx":"134","func":"class A {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\n\/\/        BufferedReader in = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n\/\/        BufferedReader in = new BufferedReader(new FileReader(\"a_test.in\"));\n        PrintWriter pw = new PrintWriter(System.out);\n        int T = Integer.parseInt(in.readLine());\n        for (int t = 1; t <= T; t++) {\n            int n = Integer.parseInt(in.readLine());\n            int arr[] = new int[n];\n            int  i = 0;\n            for (String s : in.readLine().split(\" \")) {\n                arr[i++] = Integer.parseInt(s);\n            }\n            \n            int maxDiff = 0;\n            for (i = 1; i < n; i++) {\n                maxDiff = Math.max(maxDiff, arr[i - 1] - arr[i]);\n            }\n            \n            long first = 0;\n            long second = 0;\n            \n            for (i = 1; i < n; i++) {\n                first += Math.max(0, arr[i - 1] - arr[i]);\n            }\n            for (i = 0; i < n - 1; i++) {\n                \n                second += Math.min(maxDiff, arr[i]);\n            }\n            \n            pw.format(\"Case #%d: %d %d\\n\", t, first, second);\n            pw.flush();\n        }\n        pw.close();\n        in.close();\n    }\n\n}"}
{"idx":"135","func":"class exo1 \n{\n    public static void main(String[] args) \n    {\n    \n        try{\n            File f = new File (\"output_exo1_large\");\n            \/\/File f=new File(\"output_exo1_small\");\n            \/\/File f=new File(\"output_exo1_test\");\n            \n            FileWriter fw = new FileWriter (f);\n            \n            \n            Scanner scan = new Scanner(System.in);\n            try\n            {\n                scan = new Scanner(new FileReader(\"A-large.in\"));\n                \/\/scan = new Scanner(new FileReader(\"A-small-attempt0.in\"));\n                \/\/scan = new Scanner(new FileReader(\"A-test.in\"));\n            }\n            catch(FileNotFoundException e)\n            {\n                e.printStackTrace();\n                scan.close();\n                return;\n            }\n            int T=scan.nextInt();\n            System.out.println(\"T=\"+T);\n            int N;\n            \n            for (int test=1; test<=T; test++)\n            {\n                N=scan.nextInt();\n                int[] tab=new int[N];\n                for (int k=0; k<N; k++)\n                {\n                    tab[k]=scan.nextInt();\n                }\n                \n                \/\/methode 1\n                int rep1=0;\n                int rep2=0;\n                int maxdiff=0;\n                int aux;\n                for (int k=0; k<N-1; k++)\n                {\n                    aux=tab[k]-tab[k+1];\n                    if (tab[k]>tab[k+1])\n                    {\n                        rep1+=(tab[k]-tab[k+1]);\n                    }\n                    if (aux>maxdiff)\n                    {\n                        maxdiff=aux;\n                    }\n                }\n                for (int k=0; k<N-1; k++)\n                {\n                    if (tab[k]<maxdiff)\n                    {\n                        rep2+=tab[k];\n                    }\n                    else\n                    {\n                        rep2+=maxdiff;\n                    }\n                }\n                fw.write(\"Case #\"+test+\": \"+rep1+\" \"+rep2+\"\\n\");\n            }\n            \n            fw.close();\n            System.out.println(\"FINI!! exo1\");\n            \n            }catch(Exception e)\n            {\n                e.printStackTrace();\n                System.out.println(\"erreur \u00e9criture solution\");\n            }\n\n    }\n\n}"}
{"idx":"136","func":"class A {\n    \n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int T = sc.nextInt();\n        for (int caze = 1; caze <= T; caze++) {\n            int ans1 = 0;\n            int ans2 = Integer.MAX_VALUE;\n            int N = sc.nextInt();\n            int[] mush = new int[N];\n            for (int i = 0; i < N; i++) {\n                mush[i] = sc.nextInt();\n            }    \n\n            for (int i = 0; i < N-1; i++) {\n                int best = 100000000;\n                if (mush[i] > mush[i+1]) {\n                    best = Math.abs(mush[i]-mush[i+1]);\n                    best = Math.min(best, mush[i]);\n                } else {\n                    best = 0;\n                }\n                \/\/System.out.println(\"BEST: \" + best);\n                ans1 += best;\n            }\n\n            M:\n            for (int c = 0; c < 10000; c++) {\n                int mushPer10 = c;\n                int cnt = 0;\n                for (int i = 0; i < N-1; i++) {\n                    int amt = 0;\n                    cnt += Math.min(mushPer10, mush[i]);\n                    int mushi = mush[i] - mushPer10;\n                    if (mushi > mush[i+1]) continue M;\n                }\n                ans2 = Math.min(ans2, cnt);\n            }\n            System.out.printf(\"Case #%d: %d %d\\n\", caze, ans1, ans2);\n        }\n    }\n}"}
{"idx":"137","func":"class Result {\n  \/**\n   * @param args\n   *\/\n  public static void main( String[] args ) {\n    try {\n      FileInputStream fstream = new FileInputStream( \"\/home\/milan\/codeJam2015\/r1a\/A\/A-large.in\" );\n      DataInputStream in = new DataInputStream( fstream );\n      BufferedReader br = new BufferedReader( new InputStreamReader( in ) );\n      int T = Integer.valueOf( br.readLine() );\n      int i = 1;\n      int plates = 0;\n      while( i <= T ) {\n        plates = Integer.valueOf( br.readLine() );\n        String[] strArray = new String[plates];\n        strArray = br.readLine().split( \" \" );\n        int[] mushrooms = new int[plates];\n        for( int j = 0; j < strArray.length; j++ ) {\n          mushrooms[j] = Integer.parseInt( strArray[j] );\n        }\n        int s1 = 0;\n        int max = 0;\n        int diff;\n        for( int k = plates - 1; 0 < k; k-- ) {\n          diff = mushrooms[k - 1] - mushrooms[k];\n          if( 0 < diff ) {\n            s1 += diff;\n            if( max < diff )\n              max = diff;\n          }\n        }\n        int s2 = 0;\n        for( int j = 0; j < plates - 1; j++ ) {\n          if( mushrooms[j] < max )\n            s2 += mushrooms[j];\n          else\n            s2 += max;\n        }\n        \/\/System.out.println( \"Case #\" + i + \": s1 \" + s1 + \" \" + s2 );\n        try {\n          BufferedWriter bw = new BufferedWriter( new FileWriter( new File( \"\/home\/milan\/codeJam2015\/r1a\/A\/A-large.out\" ), true ) );\n          bw.write( \"Case #\" + i + \": \" + s1 + \" \" + s2 );\n          bw.newLine();\n          bw.close();\n        }\n        catch( Exception e ) {\n          System.err.println( \"Error: \" + e.getMessage() );\n        }\n        i++;\n      }\n      br.close();\n    }\n    catch( Exception e ) {\/\/Catch exception if any\n      System.err.println( \"Error: \" + e.getMessage() );\n    }\n  }\n}"}
{"idx":"138","func":"class MushroomMonster {\n\n    public static void main(String[] args)throws IOException {\n        Scanner in = new Scanner(new File(\"in.in\"));\n        PrintWriter writer = new PrintWriter(new File(\"out.out\"));\n        int t = in.nextInt();\n        for (int i = 1; i <=t;i++) {\n            int n = in.nextInt();\n            int[] m = new int[n];\n            int first = 0;\n            int second = 0;\n            for (int j = 0; j < n; j++)\n                m[j] = in.nextInt();\n            first = 0;\n            int left;\n            for (int j = 1; j < n; j++) {\n                if (m[j] > m[j-1]) continue;\n                first += Math.abs(m[j] - m[j-1]);\n            }\n            second = 0;\n            left = m[0];\n            double rate = 0;\n            for (int j = 1; j < n ;j++)\n                if (m[j] < m[j-1])\n                rate = Math.max(rate, (double)(m[j-1] - m[j]) \/ 10);\n            for (int j = 1; j < n ;j++ ) {\n                second += Math.min(rate * 10 , left);\n                left -= Math.min(rate*10, left);\n                left += m[j] - left;\n            }\n            writer.println(\"Case #\"+i+\": \"+first + \" \"+second);\n        }\n        \n        in.close();\n        writer.close();\n    }\n\n}"}
{"idx":"139","func":"class R1A_A {\npublic static void main(String[] args) {\n        String prblm=\"A\"; boolean fl=true;\n        String filein=prblm+\"-\"+((fl)?\"large\":\"small\")+\".in.txt\";\n        String fileout=prblm+\"-\"+((fl)?\"large\":\"small\")+\".out.txt\";\n        try {\n            BufferedReader fr= new BufferedReader(new FileReader(filein));\n            BufferedWriter fw= new BufferedWriter(new FileWriter(fileout));\n            String s=fr.readLine();\n            int T=Integer.parseInt(s);\n            for (int i = 1; i <= T; i++) {\n                s=fr.readLine();\n                int N=Integer.parseInt(s);\n                s=fr.readLine();\n                String[] tok=s.split(\" \");\n                int mx=0;\n                int tdif=0;\n                int[] vs=new int[N]; \n                for (int j = 0; j < N; j++) {\n                    vs[j]=Integer.parseInt(tok[j]);\n                    if (j>0){\n                        mx=Math.max(mx, vs[j-1]-vs[j]);\n                        tdif+=Math.max(0, vs[j-1]-vs[j]);\n                    }\n                }\n                int me=0;\n                for (int j = 0; j < N-1; j++)\n                    me+=Math.min(mx, vs[j]);\n                s=tdif+\" \"+me;\n                System.out.println(s);\n                fw.write(\"Case #\"+i+\": \"+ s  +\"\\n\");\n            }\n            fr.close();\n            fw.close();\n        } catch (Exception e) {            \n            e.printStackTrace();\n        }        \n    }\n}"}
{"idx":"140","func":"class shrooms\n{\n    public static void main(String [] args) throws Exception\n    {\n        Scanner inScan = new Scanner(System.in);\n        System.out.println(\"Enter the filename\");\n        String filename = inScan.nextLine();\n        BufferedReader b = new BufferedReader(new FileReader(filename));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"out.txt\")));\n\n        int numExamples = Integer.parseInt(b.readLine());\n        for(int i = 0; i < numExamples; i++)\n        {\n            int numIntervals = Integer.parseInt(b.readLine());\n            int [] mushrooms = new int [numIntervals];\n            String [] stuff = b.readLine().split(\" \");\n            for(int j = 0; j < numIntervals; j++)\n            {\n                mushrooms[j] = Integer.parseInt(stuff[j]);\n            }\n            \/\/First method\n            BigInteger sumOne = new BigInteger(\"0\");;\n            int bigIndex = -1;\n            int bigDiff = -1;\n            for(int j = 0; j < numIntervals-1; j++)\n            {\n                if(mushrooms[j] > mushrooms[j+1])\n                {\n                    int diff = mushrooms[j] - mushrooms[j+1];\n                    sumOne = sumOne.add(new BigInteger(Integer.toString(diff)));\n                    if(diff > bigDiff)\n                    {\n                        bigDiff = diff;\n                        bigIndex = j;\n                    }\n                    \n                }\n                \n            }\n            BigInteger sumTwo = new BigInteger(\"0\");\n            if(bigDiff > -1)\n            {\n                for(int j = 0; j < numIntervals-1;j++)\n                {\n                    if(mushrooms[j] >= bigDiff)\n                        sumTwo = sumTwo.add(new BigInteger(Integer.toString(bigDiff)));\n                    else\n                        sumTwo = sumTwo.add(new BigInteger(Integer.toString(mushrooms[j])));                }\n            }\n            \/\/Code goes here********\n            out.print(\"Case #\" + (i+1) + \": \" +  sumOne.toString() + \" \" + sumTwo.toString());\n            if(i != numExamples-1)\n                out.println();\n            out.flush();\n        }\n        \n        out.close();\n    }\n    \n    \n}"}
{"idx":"141","func":"class Main\n{\npublic static void main(String[] args)throws java.lang.Exception\n{\nBufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\nPrintWriter out=new PrintWriter(\"output.txt\");\nint t,x1,n,i,v1,v2,ans1,ans2,diff;\n\n\nt=Integer.parseInt(in.readLine());\n \n \nfor(x1=0;x1<t;x1++)\n{\nn=Integer.parseInt(in.readLine());\n\nStringTokenizer st1=new StringTokenizer(in.readLine());\n\nint[] a=new int[n];\n\nfor(i=0;i<n;i++)\n{\na[i]=Integer.parseInt(st1.nextToken());\n}\n\nv1=a[0];\n\nans1=0;\ndiff=0;\n\nfor(i=1;i<n;i++)\n{\nv2=a[i];\n\nif(v2<v1)\n    {\n    ans1+=(v1-v2);\n    diff=Math.max(diff,v1-v2);\n    }\n\nv1=a[i];\n}\n\nans2=0;\n\nfor(i=0;i<n-1;i++)\n{\nans2+=Math.min(a[i],diff);\n}\n\nout.println(\"Case #\"+(x1+1)+\": \"+ans1+\" \"+ans2);\n\n}\n\nout.flush();\nout.close();\n}\n}"}
{"idx":"142","func":"class Main {\n    public static void main(String args[]) throws IOException {\n        BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n        String line = stdin.readLine();\n        int T = Integer.parseInt(line);\n        \n        for (int t = 1; t <= T; t++) {\n            line = stdin.readLine();\n            int n = Integer.parseInt(line);\n            \n            line = stdin.readLine();\n            String[] prms = line.split(\" \");\n            \n            int ans1 = 0;\n            int mx = 0;\n            int[] m = new int[n];\n            m[0] = Integer.parseInt(prms[0]);\n            for (int i = 1; i < n; i++) {\n                m[i] = Integer.parseInt(prms[i]);\n                int d = m[i-1]-m[i];\n                mx = Math.max(mx, d);\n                if (d > 0) ans1 += d;\n            }\n            \n            int ans2 = 0;\n            for(int i = 0; i < n-1; i++) {\n                ans2 += Math.min(mx, m[i]);\n            }\n            \n            System.out.printf(\"Case #%d: %d %d\\n\", t, ans1, ans2);\n        }\n    }\n}"}
{"idx":"143","func":"class Main {\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int N = scan.nextInt();\n            int[] m = new int[N];\n            for(int j = 0; j < N; j++) {\n                m[j] = scan.nextInt();\n            }\n            int strategyA = 0;\n            int strategyB = 0;\n            int rate1 = 0;\n            for (int i2 = 1; i2 < m.length; i2++) {\n                rate1 = Math.max(rate1, m[i2-1] > m[i2] ? m[i2-1] - m[i2] : 0);\n            }\n            int rate = rate1;\n            for (int i1 = 1; i1 < m.length; i1++) {\n                strategyA += m[i1-1] > m[i1] ? m[i1-1] - m[i1] : 0;\n                int prev = m[i1-1];\n                strategyB += prev - rate > 0 ? rate : prev;\n            }\n            System.out.println(\"Case #\" + i + \": \" + strategyA + \" \" + strategyB);\n        }\n    }\n}"}
{"idx":"144","func":"class Mushrooms {\n    \n    public static void main(String[] args) throws IOException{\n        String folder = \"round1a\/\";\n        String fileInPath = folder + \"A-large.in\"; \n        String fileOutPath = folder + \"mushrooms.txt\";\n        \n        Scanner sc = new Scanner(new FileReader(fileInPath));\n        FileWriter fOut = new FileWriter(fileOutPath);\n        \n        int numCases = sc.nextInt();\n        for (int caseNo=1; caseNo <= numCases; caseNo++){\n            int numTimes = sc.nextInt();\n            int eaten1 = 0;\n            int eaten2 = 0;\n            int[] mushrooms = new int[numTimes];\n            for (int i = 0; i < numTimes; i++) { \/\/gather data\n                mushrooms[i] = sc.nextInt();\n            }\n            \n            int diff = 0;\n            int eatRate = 0;\n            for (int i = 1; i < numTimes; i++) {\n                diff = mushrooms[i-1] - mushrooms[i];\n                if (diff > 0) {\n                    eaten1 += diff; \n                } \n                if (diff > eatRate) {\n                    eatRate = diff;\n                }\n            }\n            \/\/ now eaten1 is done and we have the eating rate\n            for (int i = 0; i < numTimes - 1; i++) {\n                int leftover = mushrooms[i] - eatRate;\n                if (leftover > 0) {\n                    eaten2 += eatRate;\n                } else {\n                    eaten2 += mushrooms[i];\n                }\n            }\n            \n            fOut.write(\"Case #\" + caseNo + \": \" + eaten1 + \" \" + eaten2 + '\\r' + '\\n');\n            if (caseNo % 10 == 0) {\n                System.out.println(\"Case \" + caseNo + \" done\");\n            }            \n        }\n                \n        sc.close();\n        fOut.close();\n        System.out.println(\"Done!\");\n    }\n}"}
{"idx":"145","func":"class A {\n    final static String PROBLEM_NAME = \"A-small-attempt0\";\n    final static String WORK_DIR = \"\/Users\/cecilia\/Downloads\/\" + PROBLEM_NAME;\n\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + \".in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \".out\"));\n        int caseCnt = sc.nextInt();\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\n            System.out.println(\"Processing test case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n            A r = new A();\n            int N = sc.nextInt();\n            int[] a = new int[N];\n            for(int i = 0; i < N; i++){\n                a[i] = sc.nextInt();\n            }\n            long ret1 = 0;\n            long ret2 = 0;\n            int max = 0;\n            for(int i = 1; i < N; i++){\n                if(a[i] < a[i-1]){\n                    int dif = a[i-1] - a[i];\n                    max = Math.max(max, dif);\n                    ret1 += dif;\n                }\n            }\n            \n            for(int i = 0; i < N-1; i++){\n                ret2 += Math.min(a[i], max);\n            }\n            pw.println(ret1 + \" \" + ret2);\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"146","func":"class CodeJam {\n    public static void main(String [] args) throws Exception {\n        long start = System.currentTimeMillis();\n        String questionName = \"A-large\";\n        BufferedReader r = new BufferedReader(new FileReader(questionName + \".in\"));\n        PrintStream out = System.out;\n        String file = questionName + \".out\";\n        if(new File(file).exists()) {\n            throw new RuntimeException(new File(file).getAbsolutePath() + \" Already exists\");\n        }\n        \n        FileOutputStream fos = new FileOutputStream(new File(file), true);\n        PrintStream printStream = new PrintStream(fos);\n        out = printStream;\n        int count = Integer.parseInt(r.readLine());\n        \n        for(int x = 0; x < count; x++) {\n            String answer = \"\";\n            int N = Integer.parseInt(r.readLine());\n            String [] nums = r.readLine().split(\" \");\n            int [] ret = new int[nums.length];\n            for(int x1 = 0; x1 < nums.length; x1++) {\n                ret[x1] = Integer.parseInt(nums[x1]);\n            }\n            int [] m = ret;\n            int maxRate = 0;\n            int m2 = 0;\n            int m1 = 0;\n            for(int y = 0; y < m.length; y++) {\n                if(y != 0) {\n                    maxRate = Math.max(maxRate, m[y-1] - m[y]);\n                }\n            }\n        \n            for(int y = 0; y < m.length; y++) {\n                if(y != 0) {\n                    int diff = m[y-1] - m[y];\n                    if(m[y-1] > 0) {\n                        if(m[y-1] >= maxRate) {\n                            m2 += maxRate;\n                        } else if(m[y-1] < maxRate) {\n                            m2 += m[y-1];\n                        }\n                    }\n        \n                    if(diff >= 0) {\n                        m1 += diff;\n                    }\n                }\n            }\n        \n            answer = \"\" + m1 + \" \" + m2;\n        \n            out.printf(\"Case #%d: \", x + 1);\n            out.print(answer);\n            out.println();\n        }\n\/\/        b();\n\/\/        c();\n\/\/        d();\n\n        long end = System.currentTimeMillis();\n\n        System.out.printf(\"Took: %d(ms)\\n\", (end - start));\n    }\n}"}
{"idx":"147","func":"class Mushrooms {\n  public static void main(String[]args) throws Exception {\n    Scanner scanz = new Scanner(new FileReader(\"A-large.in\"));\n    PrintWriter printz = new PrintWriter(new FileWriter(\"out.txt\"));\n    int total = scanz.nextInt();\n    int[]shrooms;\n    int first;\n    int second;\n    for (int x = 0; x < total; x++) {\n      shrooms = new int [scanz.nextInt()];\n      for (int z = 0; z < shrooms.length; z++) {\n        shrooms[z] = scanz.nextInt();\n      }\n    int eaten = 0;\n    for (int z = 1; z < shrooms.length; z++) {\n      if (shrooms[z] < shrooms[z-1]) \n        eaten += shrooms[z-1] - shrooms[z];\n    }\n      first = eaten;\n    int eaten1 = 0;\n    int rate = 0;\n    for (int z = 1; z < shrooms.length; z++) {\n      if ((shrooms[z-1] - shrooms[z]) > rate) \n        rate = (shrooms[z-1] - shrooms[z]);\n    }\n    \/\/System.out.println(rate);\n    for (int z = 0; z < shrooms.length-1; z++) {\n      if (rate >= shrooms[z])\n        eaten1 += shrooms[z];\n      else\n        eaten1 += rate;\n    }\n      second = eaten1;\n      printz.println(\"Case #\" + (x+1) + \": \" + first + \" \" + second);\n      \n    }\n    printz.close();\n  }\n}"}
{"idx":"148","func":"class A {\n\n    public static void main(String... args) throws Exception {\n        File file = new File(loc);\n        File[] paths = file.listFiles();\n        List<File> input = new ArrayList<File>();\n        for (File f : paths) {\n            String s = f.getName();\n            if (s.startsWith(name_class) && s.endsWith(\".in\"))\n                input.add(f);\n        }\n        \n        if (input.isEmpty()) {\n            System.err.println(\"LEYENDO DE CONSOLA\");\n            in = new BufferedReader(new InputStreamReader(System.in));\n        } else {\n            File last_file = input.get(0);\n            for (File f : input) {\n                if (f.lastModified() > last_file.lastModified())\n                    last_file = f;\n            }\n        \n            in = new BufferedReader(new FileReader(last_file.toString()));\n            System.err.println(\"LEYENDO DE ARCHIVO\");\n        \n        }\n        FileWriter fw = new FileWriter(loc + \"\/output.txt\");\n        out = new PrintWriter(fw);\n\n        int casos = Integer.parseInt(in.readLine());\n        for (int casito = 1; casito <= casos; casito++) {\n            A r = new A();\n            int n = Integer.parseInt(A.nextToken());\n            int[] ret = new int[n];\n            for (int i1 = 0; i1 < n; i1++)\n                ret[i1] = Integer.parseInt(A.nextToken());\n            int[] arr = ret;\n            int ret1 = 0;\n            \n            int abs =0;\n            for(int i =0;i<n-1;i++){\n                ret1+= Math.max(0, arr[i]-arr[i+1]);\n                abs = Math.max(abs, arr[i]-arr[i+1]);\n            }\n            int ret2=0;\n            for(int i =0;i<n -1;i++)\n                ret2+=Math.min(arr[i], abs);\n            Object o = ret1+\" \"+ret2;\n\n            out.println(\"Case #\" + casito + \": \" + o);\n            System.out.println(\"Case #\" + casito + \": \" + o);\n        }\n        out.close();\n    }\n\n    \n\n    \/\/ \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n    public static BufferedReader in;\n    public static PrintWriter out;\n    static String name_class = \"A\"; \/\/\n    static String loc = \"\/home\/miguel\/workspace\/CodeJam\/round_1A\/src\"; \/\/\n\n    static StringTokenizer strTok = new StringTokenizer(\"\");\n\n    static String nextToken() throws IOException {\n        while (!strTok.hasMoreTokens())\n            strTok = new StringTokenizer(in.readLine());\n        return strTok.nextToken();\n    }\n\n}"}
{"idx":"149","func":"class MushroomMonster {\n\n    public static void main(String[] args)  throws IOException{\n        \/\/ TODO Auto-generated method stub\n\/\/        String inputFile = \"input.txt\";\n\/\/        String inputFile = \"A-small-attempt0 (1).in\";\n        String inputFile = \"A-large (1).in\";\n\/\/        String inputFile = \"C-large.in\";\n        String outputFile = \"output.txt\";\n        FileInputStream fstream = new FileInputStream(inputFile);\n        BufferedReader br = new BufferedReader(new InputStreamReader(fstream));\n\n        PrintWriter writer = new PrintWriter(outputFile, \"UTF-8\"); \/\/result\n        \n        String strLine;\n        strLine = br.readLine();\n        int T = Integer.parseInt(strLine);\n        System.out.println(\"T=\" + T);\n        for( int i = 0;i<T;i++){\n            int N;\n            strLine = br.readLine();\n            N = Integer.parseInt(strLine);\n            \n            int[] c = new int[N];\n            strLine = br.readLine();\n            String[] strArray = strLine.split(\" \");\n\/\/            System.out.println(\"N = \" + N);\n\/\/            System.out.println(Arrays.toString(strArray));\n            for(int j =0;j<N;j++){\n                c[j] = Integer.parseInt(strArray[j]);\n            }\n            int n = c.length;\n            int r = 0;\n            for (int i1 =0;i1<n-1;i1++){\n                r = r +  Math.max(0, c[i1] - c[i1+1]);\n            }\n            \n\/\/            System.out.println(Arrays.toString(c));\n            int y = r;\n            int n1 = c.length;\n            int minCount = -1; \/\/ \u6700\u5c0f\u901f\u5ea6\n            int e = 0;\n            for (int i2 =0;i2<n1-1;i2++){\n                 e = Math.max(0, c[i2] - c[i2+1]);\n                 if(e > minCount){\n                     minCount = e;\n                 }\n            }\n            int r1 = 0;\n            for (int i1 =0;i1<n1-1;i1++){\n                 if(c[i1] <= minCount){\n                     r1 = r1 + c[i1];\n                 }else{\n                     r1 = r1 + minCount;\n                 }\n            }\n            int z = r1;\n            String result_str;\n            result_str =\"Case #\"+(i+1)+\": \" + y + \" \" + z; \n             \n            writer.println(result_str);\n            System.out.println(result_str);\n        }\n    \n        \/\/Close the input stream\n        br.close();\n        writer.close();\n    }\n\n}"}
{"idx":"150","func":"class Mushrooms{\n    public static void main(String args[]) throws IOException{\n        String outFileName = \"C:\\\\1A\\\\mushroom_large_out.out\";\n        File file = new File(outFileName);\n        if(!file.exists()){\n            file.createNewFile();\n        }\n        FileWriter fw = new FileWriter(file.getAbsoluteFile());\n        BufferedWriter bw = new BufferedWriter(fw);\n        \n        \n        BufferedReader br = new BufferedReader(new FileReader(\"C:\\\\1A\\\\A-large.in\"));\n        String testCasesNumber;\n        try {\n            testCasesNumber = br.readLine();\n            int testCases = Integer.parseInt(testCasesNumber);\n            int caseNumber = 1;\n            while(caseNumber<=testCases){\n                \n                int n = Integer.parseInt(br.readLine());\n                String tokens[] = br.readLine().split(\" \");\n                int size = tokens.length;\n                if(size != n){\n                    throw new IOException();\n                }\n                int mushrooms1[] = new int[size];\n                int i1=0;\n                for(String token : tokens){\n                    mushrooms1[i1++] = Integer.parseInt(token);\n                }\n                int mushrooms[] = mushrooms1;\n                \n                \/\/    int size = a.length;\n                int maxDiff = 0;\n                int y = 0;\n                \n                for(int i = 1 ; i<n;i++){\n                    int diff = mushrooms[i-1] -mushrooms[i];\n                    if((diff > 0 )){\n                        y = y + diff;\n                    }\n                    if(diff > maxDiff){\n                        maxDiff = diff;\n                    }\n                }\n                \n                int z= 0 ;\n                for(int i=0 ; i< n-1; i++){\n                    int toAdd = (mushrooms[i] < maxDiff)?mushrooms[i]:maxDiff;\n                    z=z+toAdd;\n                }\n                \n                bw.write(\"Case #\"+caseNumber+\": \"+y+\" \"+z);\n                bw.write(\"\\n\");\n                \n                caseNumber++;\n            }\n        \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        bw.close();\n        System.exit(0);\n\n    }\n\n}"}
{"idx":"151","func":"class Shrooms {\n\n    public static void main (String [] args)throws Exception{\n        Scanner input = new Scanner(new FileReader(\"A-large.in\"));\n        int numCases = input.nextInt();\n        String out = \"\";\n        for (int i = 0; i < numCases; i++) { \/\/loop through cases\n            int looks = input.nextInt();\n            int m1=0,m2=0, spr = 0;\/\/spr = shrooms per round\n            int [] shrooms = new int[looks];\n            for (int j = 0; j < looks; j++) { \/\/loop through looks\n\n                shrooms[j]=input.nextInt();\n                if (j>0) {\n                    if (shrooms[j-1] > shrooms[j]) {\n                        m1 += shrooms[j-1] - shrooms[j];\n                        if (shrooms[j-1] - shrooms[j] > spr) {\n                            spr=shrooms[j-1]-shrooms[j];\n                        }\n                    }\n                }\n            }\n            for (int j=0;j < looks-1;j++) {\n                if (shrooms[j]-spr>=0){\n                    m2+=spr;\n                }else {\n                    m2+=shrooms[j];\n                }\n            }\n            out+=\"Case #\"+(i + 1)+\": \"+m1+\" \"+m2+\"\\n\";\n        }\n        \/\/System.out.println(out);\n        \/\/writing\n        try {\n            FileWriter fw = new FileWriter (\"Solution.out\");\n            BufferedWriter bw = new BufferedWriter (fw);\n            PrintWriter fileOut = new PrintWriter (bw);\n            fileOut.println (out);\n            fileOut.close();\n            System.out.println(\"the file \" + \"Solution.out\" + \" is created!\");\n        }\n        catch (Exception e){\n            System.out.println(e.toString());\n        }\n    }\n\n\n}"}
{"idx":"152","func":"class PbA {\n\n    public static void main(String[] args) {\n        try {\n            String input = \"pbA-small\";\n            BufferedReader inputStream = new BufferedReader(new FileReader(input+\".in\"));\n            FileWriter f = new FileWriter(input+\".out\");\n            String l = inputStream.readLine();\n            int nbCases = Integer.parseInt(l);\n            for (int caseNb = 1; caseNb<=nbCases; caseNb++){\n                System.out.println(\"case \"+caseNb);\n                l = inputStream.readLine();\n                int N = Integer.parseInt(l);\n                l = inputStream.readLine();\n                String[] pos = l.split(\" \");\n                int[] m=new int[N];\n                int pb1=0;\n                m[0]=Integer.parseInt(pos[0]);\n                int speed=0;\n                int pb2=0;\n                for(int i=1;i<N;++i){\n                    m[i]=Integer.parseInt(pos[i]);\n                    if(m[i]<m[i-1]){\n                        pb1+=m[i-1]-m[i];\n                    }\n                    if((m[i-1]-m[i])>speed){\n                        speed=m[i-1]-m[i];\n                    }\n                }\n\/\/                System.out.println(speed);\n                for(int i=0;i<N-1;++i){\n                    if(m[i]>speed){\n                        pb2+=speed;\n                    }else{\n                        pb2+=m[i];\n                    }\n                }\n                \n                \n                f.write(\"Case #\"+caseNb+\": \" + pb1 + \" \" + pb2 + \"\\n\");    \n\/\/                System.out.println(\"Case #\"+caseNb+\": \" + pb1 + \" \" + pb2 + \"\\n\");\n            }\n            f.close();\n        }catch (Exception e){e.printStackTrace();}\n    }\n\n}"}
{"idx":"153","func":"class MushroomMonster {\n\n    private static Scanner s;\n\n    public static void main(String args[])\n    {\n        s = new Scanner(System.in);\n        int count = s.nextInt();\n        s.nextLine();\n\n        for(int i = 1; i <= count; i ++)\n        {\n            int y = 0;\n            int z = 0;\n            \n            \n            int n = s.nextInt();\n            int[] nums = new int[n];\n            s.nextLine();\n            for(int i1 = 0; i1 < nums.length; i1++){\n                nums[i1] = s.nextInt();\n            }\n            \n            \/\/method 1\n            int cur = nums[0];\n            int biggestDif = 0;\n            for(int i3 = 1; i3 < nums.length; i3++){\n                if(nums[i3] < cur){\n                    int dif = cur - nums[i3];\n                    y += dif;\n                    if(biggestDif < dif){\n                        biggestDif = dif;\n                    }\n                }\n                cur = nums[i3];\n            }\n            \n            for(int i2 = 0; i2 < nums.length-1; i2++){\n               z+=Math.min(biggestDif, nums[i2]);\n            }\n            \n            System.out.println(\"Case #\"+i+\": \" + y + \" \" + z);\n            s.nextLine();\n\n        }\n\n    }\n}"}
{"idx":"154","func":"class second {\n    int num = 0;\n    ArrayList<int[]> result = new ArrayList<int[]>();\n    ArrayList<ArrayList<Integer>> content = new ArrayList<ArrayList<Integer>>();\n    public static void main(String args[]) throws Exception{\n        second a = new second();\n        File file = new File(\"\/Users\/apple\/Desktop\/A-large.in\");\n        BufferedReader reader = new BufferedReader(new FileReader(file));\n        String temp1 = null;\n        int line = 0;\n        while((temp1 = reader.readLine()) != null){\n            if(line == 0){\n                a.num = Integer.valueOf(temp1);\n            }\n            else{\n                if(line % 2 == 1){ \n                    line ++;\n                    continue;}\n                String[] now1 = temp1.split(\" \");\n                ArrayList<Integer> cur1 = new ArrayList<Integer>();\n                for(int i1 = 0; i1 < now1.length; i1 ++){\n                    cur1.add(Integer.valueOf(now1[i1]));\n                }\n                a.content.add(cur1);\n            }\n            line ++;\n        }\n        reader.close();\n        for(int i = 0; i < a.num; i ++){\n            ArrayList<Integer> now = a.content.get(i);    \n            if(now.size() == 0){\n                System.out.println(\"in\");\n                int[] cur = new int[2];\n                a.result.add(cur);\n                continue;\n            }\n            int sum1 = 0;\n            int sum2 = 0;\n            int max = 0;\n            for(int j = 0; j < now.size() - 1; j ++){\n                if(now.get(j) > now.get(j + 1)){\n                    max = Math.max(max, now.get(j) - now.get(j + 1));\n                    sum1 = sum1 + now.get(j) - now.get(j + 1);\n                }\n            }\n            for(int j = 0; j < now.size() - 1; j ++){\n                sum2 = sum2 + Math.min(max, now.get(j));\n            }\n            int[] temp = new int[2];\n            temp[0] = sum1;\n            temp[1] = sum2;\n            a.result.add(temp);\n        }\n        FileWriter writer = new FileWriter(\"\/Users\/apple\/Desktop\/output.txt\");\n        for(int i = 0; i < a.result.size(); i ++){\n            int j = i + 1;\n            writer.write(\"case #\" + j + \": \" + a.result.get(i)[0] + \" \" + a.result.get(i)[1] + \"\\n\");\n            \n        }\n        writer.close();\n    }\n\n}"}
{"idx":"155","func":"class Mushroom {\n\n    public static void main (String[] args) throws IOException {\n        BufferedReader instr = new BufferedReader(new InputStreamReader(System.in));\n        String oneLine;\n        int counter = 0;\n        while ((oneLine = instr.readLine()) != null) {\n            if (counter == 0) {\n                counter++;\n                continue;\n            }\n            if (counter%2 == 1) {\n                counter++;\n                continue;\n            }\n            String[] input = oneLine.split(\"\\\\s+\");\n            List<Integer> mushroom_list1 = new ArrayList<Integer>();\n            for (int i1 = 0; i1 < input.length; i1++) {\n                int temp = Integer.parseInt(input[i1]);\n                mushroom_list1.add(temp);\n            }\n            List<Integer> mushroom_list = mushroom_list1;\n            int sum = 0;\n            int len = mushroom_list.size();\n            for (int i = 1; i < len; i++) {\n                int diff = mushroom_list.get(i-1) - mushroom_list.get(i);\n                if (diff > 0) {\n                    sum = sum + diff; \n                }\n            }\n            int first_sol = sum;\n            int largest_diff = 0;\n            int len1 = mushroom_list.size();\n            for (int i = 1; i < len1; i++) {\n                int diff = mushroom_list.get(i-1) - mushroom_list.get(i);\n                if (diff > largest_diff) {\n                    largest_diff = diff;\n                }\n            }\n            int sum1 = 0;\n            for (int i = 0; i < len1 - 1; i++) {\n                int num = mushroom_list.get(i);\n                if (num > largest_diff) {\n                    sum1 += largest_diff;\n                }\n                else {\n                    sum1 += num;\n                }\n            }\n            int second_sol = sum1;\n            System.out.println(\"Case #\" + counter\/2 + \": \" + first_sol + \" \" + second_sol);\n            counter++;\n        }\n    }\n}"}
{"idx":"156","func":"class ProblemA {\n    public static void main(String[] args) throws FileNotFoundException {\n        FileReader f= new FileReader(\"C:\\\\Users\\\\Ismael\\\\Desktop\\\\inputA.txt\");\n        PrintWriter out =new PrintWriter(\"C:\\\\Users\\\\Ismael\\\\Desktop\\\\outputA.txt\");\n        Scanner in = new Scanner(f);\n        int cant= in.nextInt();\n        in.nextLine();\n        for (int i = 0; i < cant; i++) {\n            \n            int mus=in.nextInt();\n            int m[]=new int[mus];\n            for (int j = 0; j < mus; j++) {\n                m[j]=in.nextInt();\n                \n                \n                \n            }\n            int acum=0;\n            for (int j = 0; j < mus-1; j++) {\n                acum=acum+Math.min(0, m[j+1]-m[j]);\n                \n            }\n            acum=-acum;\n            \n            int rate=0;\n            for (int j = 0; j < mus-1; j++) {\n                if(rate<-(m[j+1]-m[j])){\n                    rate=-(m[j+1]-m[j]);\n                }\n              \n            }\n\n            int acum2=0;\n            for (int j = 0; j < mus-1; j++) {\n                if(m[j]>=rate){\n                    acum2=acum2+rate;\n                }else{\n                    acum2=acum2+m[j];\n                }\n            }\n            \n            \n            \n            \n            \n            String res=acum+\" \"+acum2;\n            out.println(\"Case #\"+(i+1)+\": \"+res);\n            \n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"157","func":"class Main {\n\n    static Scanner stdin = new Scanner(System.in);    \n    \n    public static void main(String[] args) {\n        int cases = stdin.nextInt();\n        for (int i = 0; i < cases; i++) {\n            Main mt = new Main();\n            mt.n = Main.stdin.nextInt();\n            mt.m = new Integer[mt.n];\n            for (int i1 = 0; i1 < mt.n; i1++) {\n                mt.m[i1] = Main.stdin.nextInt();\n            }\n            Integer eaten=0;\n            for (int i1 = 1; i1 < mt.n; i1++) {\n                if (mt.m[i1]<mt.m[i1-1]){\n                    eaten += mt.m[i1-1]-mt.m[i1];\n                }\n                \n            }\n            mt.solution = eaten.toString();\n            Integer eaten1 = 0;\n            Integer max=0;\n            for (int i1 = 1; i1 < mt.n; i1++) {\n                if (mt.m[i1-1]-mt.m[i1]>max){\n                    max=mt.m[i1-1]-mt.m[i1];\n                }\n            }\n            for (int i2 = 1; i2 < mt.n; i2++) {\n                if (mt.m[i2-1]>max){\n                    eaten1 = eaten1 + max;\n                }else{\n                    eaten1 = eaten1 + mt.m[i2-1];\n                }\n            }\n            \n            mt.solution = mt.solution + \" \" + eaten1.toString();\n            System.out.println(\"Case #\"+(1+i)+\": \"+mt.solution);\n        }\n    }    \n\n\n    Integer n;\n    Integer[] m;\n    String solution;\n    \n}"}
{"idx":"158","func":"class MushroomMonster {\n\n    public static final String IN = \"src\/main\/resources\/codejam\/round1a2015\/mushroom\/A-large.in-2.txt\";\n    public static final String OUT = \"src\/main\/resources\/codejam\/round1a2015\/mushroom\/A-large.out-2.txt\";\n\n    public static void main(String[] args) throws IOException {\n        FileWriter fw = new FileWriter(OUT);\n        Scanner scanner = new Scanner(new File(IN));\n        int T = scanner.nextInt();\n        for (int i = 0; i < T; i++) {\n            int N = scanner.nextInt();\n            int[] mushroomsLeft = new int[N];\n            for (int j = 0; j < N; j++) {\n                mushroomsLeft[j] = scanner.nextInt();\n            }\n            int accum = 0;\n            for (int i1 = 0; i1 < mushroomsLeft.length - 1; i1++) {\n                int diff = mushroomsLeft[i1] - mushroomsLeft[i1 + 1];\n                if (diff > 0) accum += diff;\n            }\n            int eaten1 = accum;\n            int accum1 = 0;\n            int maxInterval = 0;\n            for (int i1 = 0; i1 < mushroomsLeft.length - 1; i1++) {\n                int diff = mushroomsLeft[i1] - mushroomsLeft[i1 + 1];\n                if (diff > maxInterval) maxInterval = diff;\n            }\n            for (int i2 = 0; i2 < mushroomsLeft.length - 1; i2++) {\n                accum1 += Math.min(mushroomsLeft[i2], maxInterval);\n            }\n            int eaten2 = accum1;\n            fw.write(format(\"Case #%d: %d %d\", i + 1, eaten1, eaten2) + \"\\n\");\n        }\n        scanner.close();\n        fw.close();\n    }\n\n}"}
{"idx":"159","func":"class MushroomMonster {\n    public static void main(String[] args) {\n        LinkedList<String> s=new LinkedList<String>();\n\n\n        try {\n            String encoding=\"GBK\";\n            File file=new File(\"\/Users\/ldfrank533\/b.txt\");\n            if(file.isFile() && file.exists()){ \/\/\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\n                InputStreamReader read = new InputStreamReader(\n                        new FileInputStream(file),encoding);\/\/\u8003\u8651\u5230\u7f16\u7801\u683c\u5f0f\n                BufferedReader bufferedReader = new BufferedReader(read);\n                String lineTxt = null;\n                while((lineTxt = bufferedReader.readLine()) != null){\n                    s.add(lineTxt);\n                }\n                read.close();\n            }\n        } catch (Exception e) {\n            System.out.println(\"\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u51fa\u9519\");\n            e.printStackTrace();\n        }\n\n\n        int trial=Integer.valueOf(s.get(0));\n        String[] raw=new String[trial*2+1];\n        \/\/ int[][] resf=new int[trial][0];\n\n        for (int i=0;i<s.size();i++){\n            raw[i]=s.get(i);\n        }\n\n        for(String x:raw){\n            System.out.println(x);\n        }\n\n        System.out.println(\"--------------------------------------------------------------------\");\n        int[] intervals=new int[trial];\n        int[][] data=new int[trial][0];\n        for(int i=0;i<trial;i++){\n            intervals[i]=Integer.valueOf(raw[2*i+1]);\n            String[] numbers = raw[2*i+2].split(\"\\\\s+\");\n            int[] ints = new int[numbers.length];\n            for (int i1 = 0; i1 < ints.length; i1++)\n                ints[i1] = Integer.parseInt(numbers[i1]);\n            data[i]=ints;\n        }\n\/\/        for(int i:data[data.length-1]){\n\/\/            System.out.println(i);\n\/\/        }\n        int[][] res=new int[trial][2];\n        for(int i=0;i<trial;i++){\n            int[] in = data[i];\n            int res1=0;\n            for(int i1=0;i1<in.length-1;i1++){\n                if(in[i1]>in[i1+1]){\n                    res1+=in[i1]-in[i1+1];\n                }\n            }\n            res[i][0]=res1;\n            int[] in1 = data[i];\n            int maxdif=0;\n            int res2=0;\n            for(int i2=0;i2<in1.length-1;i2++){\n                if(in1[i2]>in1[i2+1]){\n                    if(in1[i2]-in1[i2+1]>maxdif){\n                        maxdif=in1[i2]-in1[i2+1];\n                    }\n                }\n            }\n            for(int i1=0;i1<in1.length-1;i1++){\n                if(in1[i1]<maxdif){\n                   res2+=in1[i1];\n                }\n                else{\n                    res2+=maxdif;\n                }\n            }\n            res[i][1]=res2;\n        }\n\n\n        try {\n\n\n            String path = \"\/Users\/ldfrank533\/Mushroom0.txt\";\/\/\u6587\u4ef6\u4fdd\u5b58\u8def\u5f84\u3001\u540d\u5b57\n            File file = new File(path);\n            BufferedWriter ow = new BufferedWriter(new FileWriter(file));\n\n            for(int i=0;i<trial;i++){\n\n                String temp=\"Case \"+\"#\"+String.valueOf(i+1)+\": \"+res[i][0]+\" \"+res[i][1];\n\n                ow.write(temp);\n\n                ow.newLine();\n            }\n\n            ow.close();\n            System.out.println(\"Finished Writing\");\n\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n}"}
{"idx":"160","func":"class Mushrooms {\n    public static void main(String[] args) throws IOException {\n        \/\/ IO\n        BufferedReader br = new BufferedReader(\n                new FileReader(new File(args[0])));\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n                new FileOutputStream(new File(args[1]))));\n\n        \/\/ Solve\n        int testCases = Integer.parseInt(br.readLine());\n        \n        for (int i = 0; i < testCases; ++i) {\n            int totalTime = Integer.parseInt(br.readLine());\n            String[] mushroormNumbers = br.readLine().split(\"\\\\s+\");\n\n            int[] coockiesNumbers = new int[totalTime];\n            \n            int totalEaten = 0;\n            \n            double maxRate = 0;\n            int current = Integer.parseInt(mushroormNumbers[0]);\n            coockiesNumbers[0] = current;\n            \n            \n            for (int time = 1; time < totalTime; ++time) {\n                int newNum = Integer.parseInt(mushroormNumbers[time]);\n                coockiesNumbers[time] = newNum;\n                if (current > newNum) {\n                    totalEaten += current - newNum;\n                    maxRate = new Double(Math.max(maxRate, (current - newNum) \/ 10.0));\n                }\n                current = newNum;\n            }\n            \n            double totalEatenB = 0;\n            current = coockiesNumbers[0];\n            for (int time = 1; time < totalTime; ++time) {\n                int newNum =  coockiesNumbers[time];\n                totalEatenB += Math.min(maxRate * 10, current);\n                current = newNum;\n            }\n            \n            writer.append(\"Case #\" + (i + 1) + \": \" + totalEaten + \" \" + new Double(totalEatenB).intValue() + \"\\n\");\n        }\n\n        writer.close();\n        br.close();\n    }\n}"}
{"idx":"161","func":"class MushMonster {\n\n    public static void main(String[] args) throws IOException{\n        FileReader fr=new FileReader(\"in.txt\");\n        BufferedReader textReader =new BufferedReader(fr);\n        int num = Integer.parseInt(textReader.readLine());\n        for(int k=0;k<num;k++)\n        {\n\/\/keep    \n        int    count=Integer.parseInt(textReader.readLine());\n        String read = textReader.readLine();\n        int meth1;\n        int meth2;\n        int shroom1=0;\n        int shroom2=0;\n        String[] str=read.split(\" \");\n        int[] intr=new int[str.length];\n        for(int l=0;l<str.length;l++)\n        {\n            intr[l]=Integer.parseInt(str[l]);\n        }\n        int[] intrd=new int[str.length-1];\n        for(int m=0;m<str.length-1;m++)\n        {\n            intrd[m]=intr[m]-intr[m+1];\n        }\n        Arrays.sort(intrd);\n        int max=intrd[intrd.length-1];\n        \/\/out.println(max);\n        for(int j=0; j<count; j++)\n        {    \n            \/\/out.println(count);\n            if(j<count-1&&intr[j]>intr[j+1])\n                shroom1+=intr[j]-intr[j+1];\n            if(intr[j]>max&&j<count-1)\n                shroom2+=max;\n            else if(j<count-1)\n                shroom2+=intr[j];\n            \/\/out.println(shroom2);\n            \n        }\n        \n        out.println(\"Case #\"+(k+1)+\": \"+shroom1+\" \"+shroom2);\n\/\/keep        \n        }\n        textReader.close();\n    }\n\n}"}
{"idx":"162","func":"static void main(String[] args)throws IOException {\n        br=new BufferedReader(new FileReader(\"A-large.in\"));\n        pw=new PrintWriter(new FileOutputStream(\"output_A.in\"));\n        int t=Integer.parseInt(br.readLine());\n        for(int j=1;j<=t;j++) {\n            int n=Integer.parseInt(br.readLine());\n            st=new StringTokenizer(br.readLine());\n            int[] arr=new int[n];\n            int ans=0, ans1=0, diff=Integer.MIN_VALUE;\n            for(int i=0;i<n;i++) {\n                arr[i]=Integer.parseInt(st.nextToken());\n            }\n            for(int i=0;i<n-1;i++) {\n                diff=arr[i]-arr[i+1]>diff?arr[i]-arr[i+1]:diff;\n            }\n            \/\/pw.println(diff);\n            for(int i=0;i<n-1;i++) {\n                if(arr[i]<diff)\n                    ans1+=arr[i];\n                else\n                    ans1+=diff;\n                if(arr[i+1]<arr[i])\n                    ans+=arr[i]-arr[i+1];\n            }\n            pw.println(\"Case #\"+j+\": \"+ans+\" \"+ans1);\n        }\n        pw.flush();\n    }\n}"}
{"idx":"163","func":"static void main(String [] args)\n     {\n          try{\n               Scanner sc=new Scanner(new File(filename+\".in\"));\n               PrintWriter pw=new PrintWriter(new FileOutputStream(filename+\".out\"));\n               int gcase=sc.nextInt();\n               for(int n=1;n<=gcase;n++)\n               {\n                   int c=sc.nextInt();\n                   int[] m=new int[c];\n                   int max=0;\n                   int m1=0;\n                   int current=0;\n                   for(int i=0;i<c;i++)\n                   {\n                       m[i]=sc.nextInt();\n                       \n                       if(current>m[i])\n                       {\n                            int di=current-m[i];\n                            m1+=di;\n                            if(max<di)\n                            {\n                                max=di;\n                            }\n                       }\n                       current=m[i];\n                   }\n                   int m2=0;\n                   for(int i=0;i<c-1;i++)\n                   {\n                       if(m[i]<max)\n                           m2+=m[i];\n                       else\n                           m2+=max;\n                   }\n                   \n                   System.out.println(\"Case #\"+n+\": \"+m1+\" \"+m2);\n                   pw.println(\"Case #\"+n+\": \"+m1+\" \"+m2);\n               }\n                  pw.close();\n          }catch(FileNotFoundException f)\n          {\n               f.printStackTrace();\n          }\n     }\n}"}
{"idx":"164","func":"class playground {\n    \n    public static void main(String[] args) throws IOException{\n        playground r = new playground();\n        File file = new File(\"A-large.in\");\n        File outFile = new File(\"A-large.out\");\n        \/\/File file = new File(\"F:\\\\A-large-practice.in\");\n        \/\/File outFile = new File(\"F:\\\\A-large-practice.out\");\n        BufferedReader br = new BufferedReader(new FileReader(file));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\n        int testCases = Integer.parseInt(br.readLine());\n        for(int t=1;t<=testCases;t++){\n            br.readLine();\n            String[] s=br.readLine().split(\" \");\n            int[] igr=new int[s.length];\n            for(int i=0;i<s.length;i++){\n                igr[i]=Integer.parseInt(s[i]);\n            }\n            int[] pieces=igr;\n            int sum=0;\n            for(int i=1;i<pieces.length;i++){\n                if(pieces[i]>=pieces[i-1]){\n                    continue;\n                }\n                else{\n                    sum+=pieces[i-1]-pieces[i];\n                }\n            }\n            int solution1=sum;\n            int sum1=0;\n            int max=0;\n            for(int i=0;i<pieces.length-1;i++){\n                max=(int)Math.max(pieces[i]-pieces[i+1],max);\n            }\n            for(int i=0;i<pieces.length-1;i++){\n                sum1+=(int)Math.min(max, pieces[i]);\n            }\n            int solution2=sum1;\n            bw.write(\"Case #\" + t +\": \"+solution1+\" \"+solution2+\"\\r\");\n        }\n        br.close();\n        bw.close();\n\/\/        int[] a={80,37, 90, 66, 60, 97, 57, 84, 87};\n\/\/        System.out.println(solve2(a));\n\/\/        int num=2;\n\/\/        int[] a={9,8};\n\/\/        System.out.println(solve(2,a));\n    }\n}"}
{"idx":"165","func":"class mush{\npublic static void main()throws Exception\n{\nString inFile = \"mush0.in\";\nString outFile = \"mush.out\";\nScanner sc = new Scanner(new File(inFile));\nPrintWriter writer = new PrintWriter(outFile);\nint num_test = sc.nextInt();\n\nfor(int i = 1; i<= num_test; i++)\n{\nint term = sc.nextInt();\nsc.nextLine();\nString s = sc.nextLine();\nScanner scan = new Scanner(s);\nVector <Integer> v = new Vector <Integer> (0);\nwhile (scan.hasNext())\nv.add(scan.nextInt());\nint one = 0;\nint two = 0;\nfor (int j = 0; j <= (v.size() - 2); j++)\nif (v.get(j)>v.get(j+1))\none += -(v.get(j+1)-v.get(j));\nelse\none += 0;\n\/\/System.out.println(v.size());\nInteger arr[] = new Integer[v.size()];\nv.toArray(arr);\n\/\/Arrays.sort(arr);\nint index = v.size()-1;\n\/*while (arr[index] == arr[index-1])\nindex--;*\/\nint max = 0;\nfor (int u = 0; u<(v.size()-1); u++)\n{if ((arr[u]-arr[u+1])>max)\nmax = arr[u]-arr[u+1];}\n\/\/System.out.println(max);}\n\nint rate = max;\n\n\/\/int rate = v.get(v.size()-2)-v.get(v.size()-1);\nfor (int y = 0; y<= (v.size() - 2); y++)\nif (v.get(y)<=rate)\ntwo += v.get(y);\nelse\ntwo += (rate);\n\nwriter.println(\"Case #\" + i + \": \" + one + \" \" + two);\n}\nwriter.close();}\n}"}
{"idx":"166","func":"static void main(String[] args)\n    {\n        try{\n            PrintWriter out=new PrintWriter(new File(\"G:\/\/codejam\/\/A-large.out\"));\n            Scanner sc=new Scanner(new File(\"G:\/\/codejam\/\/A-large.in\"));\n            int t=sc.nextInt();\n           for(int k=1;k<=t;k++)\n            {\n                        int n=sc.nextInt();\n                        int[] m=new int[n];\n\n                        long sumx=0,sumy=0;\nint factor=0;\n                        for(int i=0;i<n;i++)\n                        {\n                            m[i]=sc.nextInt();\n                            if(i>=1)\n                            {\n                                if(m[i]<m[i-1])\n                                {int newfactor=m[i-1]-m[i];\n                                    if(newfactor>factor)\n                                    {\n                                        factor=newfactor;\n                                    }\n\n                                }\n\n                            }\n\n                        }\n\n\n                        for(int i=0;i<n;i++)\n                        {\n                            if(i<=n-2 && m[i]>m[i+1])\n                            {\n                                sumx=sumx+m[i]-m[i+1];\n                            }\n\n                        if(i<n-1)\n                        {    if(m[i]<=factor )\n                            {\n                                sumy=sumy+m[i];\n                            }\n                            else\n                            {\n                                sumy=sumy+factor;\n                            }\n                        }\n                        }\n\n                        out.println(\"Case #\"+k+\": \"+sumx+\" \"+sumy);\n\n\n            }\n\n\n\n\n             out.close();\n        }catch(Exception e)\n        {\n            System.out.println(e);\n        }\n    }\n\n}"}
{"idx":"167","func":"class Solution {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int num = in.nextInt();\n        in.nextLine();\n        for (int i = 0; i < num; ++i) {\n            int currNum = in.nextInt();\n            in.nextLine();\n            int[] arr = new int[currNum];\n            for (int j = 0; j < currNum; ++j) arr[j] = in.nextInt();\n            int first = 0;\n            for (int j = 1; j < currNum; ++j) {\n                if (arr[j - 1] > arr[j]) first += arr[j - 1] - arr[j];\n            }\n            int second = 0;\n            int speed = 0;\n            for (int j = 0; j < currNum - 1; ++j) speed = Math.max(speed, arr[j] - arr[j + 1]);\n            for (int j = 0; j < currNum - 1; ++j) {\n                if (arr[j] <= speed) second += arr[j];\n                else second += speed;\n            }\n            System.out.println(\"Case #\" + (i + 1) + \": \" + first + \" \" + second);\n            in.nextLine();\n        }\n        in.close();\n\n    }\n\n}"}
{"idx":"168","func":"class MushroomMonster {\n\n    public static void main(String[] args) {\n        if (args.length < 1) {\n            System.out.println(\"Missing input!\");\n        } else {\n            try (Scanner sc = new Scanner(new File(args[0]))) {\n                int numCases = sc.nextInt();\n                for (int i = 1; i <= numCases; i++) {\n                    int inputLength = sc.nextInt();\n                    ArrayList<Integer> input = new ArrayList<Integer>();\n                    for (int j = 0; j < inputLength; j++) {\n                        input.add(sc.nextInt());\n                    }\n                    int total1 = 0;\n                    int max = 0;\n                    int previous1 = input.get(0);\n                    int diff, current1;\n                    for (int i2 = 1; i2 < input.size(); i2++) {\n                        current1 = input.get(i2);\n                        diff = previous1 - current1;\n                        if (diff > max) {\n                            max = diff;\n                        }\n                        previous1 = current1;\n                    }\n                    for (int i1 = 0; i1 < input.size() - 1; i1++) {\n                        current1 = input.get(i1);\n                        total1 += current1 < max ? current1 : max;\n                    }\n                    int result2 = total1;\n                    int total = 0;\n                    int previous = input.remove(0);\n                    int current;\n                    while (!input.isEmpty()) {\n                        current = input.remove(0);\n                        if (current < previous) {\n                            total += previous - current;\n                        }\n                        previous = current;\n                    }\n                    int result1 = total;\n                    System.out.printf(\"Case #%d: %d %d\\n\", i, result1, result2);\n                }\n            } catch (FileNotFoundException e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n}"}
{"idx":"169","func":"class Mushrooms {\n\n\/\/   String inputFile = \".\/input\/sample.txt\";\n   String inputFile = \".\/input\/A-large (1).in\";\n   \n   \n\n   \n   public static void main(String[] args) {\n      Mushrooms mt = new Mushrooms();\n\n      try {\n         Scanner s = new Scanner(new File(mt.inputFile));\n        \n          int t = s.nextInt();\n        \n          for(int tc = 1; tc <= t; tc++) {\n            System.out.print(\"Case #\" + tc + \": \");\n            \n              int N = s.nextInt();\n              int[] m = new int[N];\n            \n              for(int i = 0; i < N; i++) {\n                 m[i] = s.nextInt();\n              }\n            \n              int bd = 0;\n            \n              for(int i = 0; i < N-1; i++) {\n                 if ((m[i] - m[i+1]) > bd) {\n                    bd = m[i] - m[i+1]; \n                 }\n              }\n            \n              int m1 = 0;\n              int m2 = 0;\n            \n              for(int i = 0; i < N-1; i++) {\n                 if ((m[i] - m[i+1]) > 0) {\n                    m1 += m[i] - m[i+1];\n                 }\n                    \n                 if (m[i] >= bd) {\n                    m2 += bd;\n                 }\n                 else {\n                    m2 += m[i];\n                 }\n              }\n            \n              System.out.println(m1 + \" \" + m2);\n        }         \n      } catch (Exception e) {\n         e.printStackTrace();\n      }\n\n   }\n}"}
{"idx":"170","func":"class P1\n{\n    public static void main( String[] args ) throws Exception\n    {\n        File inputFile = new File( \"inputfiles\/round1a\/P1\/input.txt\" );\n        FileReader fr = new FileReader( inputFile );\n        BufferedReader br = new BufferedReader( fr );\n        \n        int numOfTestCases = Integer.parseInt( br.readLine() );\n        \n        File outputFile = new File( \"inputfiles\/round1a\/P1\/output.txt\" );\n        outputFile.delete();\n        outputFile.createNewFile();\n        FileWriter fw = new FileWriter( outputFile );\n        BufferedWriter bw = new BufferedWriter( fw );\n        \n        for ( int i = 0; i < numOfTestCases; i++ )\n        {\n            int N = Integer.parseInt( br.readLine() );\n            \n            int[] m = new int[N];\n            \n            String[] data = br.readLine().split( \" \" );\n            \n            for ( int j = 0; j < N; j++ )\n                m[j] = Integer.parseInt( data[j] );\n            \n            int minEat1 = 0;\n            int minEat2 = 0;\n            int maxEat = 0;\n            for ( int i2 = 1; i2 < N; i2++ )\n                if ( m[i2-1] > m[i2] )\n                {\n                    int eat = m[i2-1] - m[i2];\n                    minEat1 += eat;\n                    maxEat = Math.max( maxEat, eat );\n                }\n            \n            for ( int i1 = 0; i1 < N-1; i1++ )\n                minEat2 += Math.min( maxEat, m[i1] );\n            \n            bw.append( \"Case #\"+(i+1)+\": \" + minEat1 + \" \" + minEat2 + \"\\n\" );\n            bw.flush();\n        }\n        \n        bw.flush();\n        fw.flush();\n        \n        bw.close();\n        fw.close();\n    }\n}"}
{"idx":"171","func":"class A {\n\n    Scanner             sc       = new Scanner(getClass().getResourceAsStream(IN));\n    static final String FILENAME = \"A-large\";\n    static final String IN       = FILENAME + \".in\";\n    static final String OUT      = FILENAME + \".out\";\n    PrintStream         out      = System.out;\n\n    public static void main(String args[]) throws Exception {\n        A r = new A();\n        int t = r.sc.nextInt();\n        for (int i = 1; i <= t; i++) {\n            r.out.print(\"Case #\" + i + \": \");\n            int ans1 = 0, ans2 = 0;\n            int n = r.sc.nextInt();\n            int[] arr = new int[n];\n            int maxDistance = 0;\n            for(int i1 = 0; i1 < arr.length; i1++) {\n                arr[i1] = r.sc.nextInt();\n            }\n            \n            for(int i2 = 1; i2 < arr.length; i2++){\n                if (arr[i2-1] > arr[i2])\n                {\n                    int distance = arr[i2-1] - arr[i2];\n            \n                    ans1 += distance;\n                    if (distance > maxDistance) maxDistance = distance;\n                }\n            }\n            \n            for (int i3 = 0; i3 < arr.length-1; i3++){\n                ans2 += arr[i3] < maxDistance ? arr[i3] : maxDistance;\n            }\n            \n            \/\/ans2 = maxDistance * (arr.length - 1);\n            \n            r.out.println(ans1+\" \"+ans2);\n        }\n        r.sc.close();\n        r.out.close();\n    }\n}"}
{"idx":"172","func":"class A {\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        \n        int T = scan.nextInt();\n        \n        for (int Q = 1; Q <= T; Q++)\n        {\n            int N = scan.nextInt();\n            \n            int[] pieces = new int[N];\n            int anytime = 0;\n            int maxDiff = -1;\n            \n            for (int i = 0; i < N; i++)\n            {\n                pieces[i] = scan.nextInt();\n                \n                if (i > 0)\n                {\n                    int diff = pieces[i - 1] - pieces[i];\n                    \n                    if (diff > 0)\n                    {\n                        anytime += diff;\n                    }\n                    \n                    if (diff > maxDiff)\n                    {\n                        maxDiff = diff;\n                    }\n                }\n            }\n            \n            int constant = 0;\n            \n            if (maxDiff > 0)\n            {\n                for (int i = 0; i < N - 1; i++)\n                {\n                    if (pieces[i] > maxDiff)\n                    {\n                        constant += maxDiff;\n                    }\n                    else\n                    {\n                        constant += pieces[i];\n                    }\n                }\n            }\n            \n            System.out.printf(\"Case #%d: %d %d\\n\", Q, anytime, constant);\n        }\n        \n        scan.close();\n    }\n}"}
{"idx":"173","func":"class A {\n    private static final String PATTERN = \"CASE #%d: %s\";\n    private static final String PROBLEM = \"A\";\n\n    \/\/private static final String NAME = PROBLEM + \".in\";\n    \/\/private static final String NAME = PROBLEM+\"-small-attempt1.in\";\n    private static final String NAME = PROBLEM+\"-large.in\";\n    \/\/private static final String OUT = PROBLEM + \".out\";\n    \/\/private static final String OUT = PROBLEM+\"-small-attempt1.out\";\n    private static final String OUT = PROBLEM+\"-large.out\";\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner sc = new Scanner(new File(NAME));\n        PrintWriter pw = new PrintWriter(OUT);\n        int testCount = sc.nextInt();\n        sc.nextLine();\n        for (int i = 0; i < testCount; i++) {\n            sc.nextLine();\n            String[] temp = sc.nextLine().split(\" \");\n            List<Integer> x = new ArrayList<>();\n            for (String s : temp) {\n                x.add(Integer.parseInt(s));\n            }\n            long total0 = 0;\n            long total1 = 0;\n            int maxMin = 0;\n            int prev = x.get(0);\n            for (int i1 = 1; i1 < x.size(); i1++) {\n                Integer current = x.get(i1);\n                if (current < prev) {\n                    total0 += prev - current;\n                    maxMin = Math.max(maxMin, prev - current);\n                }\n                prev = current;\n            }\n            \n            for (int i2 = 0; i2 < x.size() - 1; i2++) {\n                total1 += Math.min(maxMin, x.get(i2));\n            }\n            String sol = \"\" + total0 + \" \" + total1;\n            System.out.println(String.format(PATTERN, i + 1, sol));\n            pw.println(String.format(PATTERN, i + 1, sol));\n        }\n        pw.flush();\n        pw.close();\n    }\n}"}
{"idx":"174","func":"static void main (String[] args) throws java.lang.Exception {\n        int T = Integer.parseInt(br.readLine());\n        for (int i=0; i<T; i++){\n            int N = Integer.parseInt(br.readLine());\n            int[] ms = new int[1000];\n            StringTokenizer data = new StringTokenizer(br.readLine(), \" \");\n            for (int i3=0; i3<N; i3++) {\n                ms[i3] = Integer.parseInt(data.nextToken());\n            }\n            \n            int ansY = 0;\n            int angle = 0;\n            for (int i1=1; i1<N; i1++) {\n                ansY += Math.max(0, ms[i1-1] - ms[i1]);\n                angle = Math.max(angle, ms[i1-1] - ms[i1]);\n            }\n            \n            int ansZ = 0;\n            for (int i2=1; i2<N; i2++) {\n                ansZ += Math.min(ms[i2-1], angle);\n            }\n            \n            System.out.println(\"Case #\" + (i+1) + \": \" + ansY + \" \" + ansZ);\n        }\n    }\n}"}
{"idx":"175","func":"class MushroomMonster {\n\n    public static void main(String[] args){\n        String filePath = \"\/files\/mushroommonster.txt\";\n        if(args.length > 0)\n            filePath = args[0];\n        \n        List<String> lines = new ArrayList<String>();\n        \n        try {\n            Files.lines(Paths.get(filePath)).forEach(s -> lines.add(s));\n        } catch (IOException ex) {\n\n        }\n        \n        boolean findingNumberCases = true;\n        boolean findingN = false;\n        boolean readingCase = false;\n        \n        int numberCases = 0;\n        \n        Case[] cases = null;\n        \n        Case filling = null;\n        int indexCaseFilling = 0;\n        \n        for(String line : lines) {\n            if(line == null || line.isEmpty())\n                continue;\n            if(findingNumberCases){\n                try{\n                    numberCases = Integer.parseInt(line);\n                    cases = new Case[numberCases];\n                    findingNumberCases = false;\n                    findingN = true;\n                }\n                catch(Exception exp){\n                    \n                }\n            }\n            else if(findingN){\n                try{\n                    int n = Integer.parseInt(line);\n                    findingN = false;\n                    readingCase = true;\n                    \n                    filling = new Case();\n                    filling.N = n;\n                    filling.mushroomsAtPlate = new int[n];\n                    \n                    cases[indexCaseFilling++] = filling;\n                }\n                catch(Exception exp){\n                    \n                } \n            }\n            else if(readingCase){\n                String[] mushroomsAtPlates = line.split(\" \");\n                int index = 0;\n                for (String mushroomsAtPlate : mushroomsAtPlates) {\n                    try{\n                        int value = Integer.parseInt(mushroomsAtPlate);\n                        filling.mushroomsAtPlate[index] = value;\n                        index++;\n                    }\n                    catch(Exception exp){\n                        \n                    }\n                }\n                readingCase = false;\n                findingN = true;\n            }\n        }\n        \n        for(Case _case : cases) {\n            int sumMethod1 = 0;\n            int sumMethod2 = 0;\n            int maxMethod2 = 0;\n            \n            int previous = _case.mushroomsAtPlate[0];\n            \n            for(int i = 1; i < _case.mushroomsAtPlate.length; i++){\n                int actual = _case.mushroomsAtPlate[i];\n                \n                int delta = previous - actual;\n                \n                sumMethod1 += delta > 0 ? delta : 0;\n                \n                if(previous > actual){\n                    int eated = previous - actual;\n                    if(eated > maxMethod2)\n                        maxMethod2 = eated;\n                }\n                \n                previous = actual;\n            }\n            \n            for(int i = 0; i < _case.mushroomsAtPlate.length-1; i++){\n                int actual = _case.mushroomsAtPlate[i];\n                if(maxMethod2 > actual)\n                    sumMethod2 += actual;\n                else\n                    sumMethod2 += maxMethod2;\n            }\n            \n            _case.Result = sumMethod1 + \" \" + sumMethod2;\n        }\n        \n        for(int i = 0; i < cases.length; i++){\n            Case _case = cases[i];\n            System.out.println(\"Case #\" + (i+1) + \": \" + _case.Result);\n        }\n        \n    }\n    \n}"}
{"idx":"176","func":"class A {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int cases = input.nextInt();\n        for (int c = 0; c < cases; c++) {\n            int n = input.nextInt();\n            int[] m = new int[n];\n            for (int i = 0; i < n; i++) {\n                m[i] = input.nextInt();\n            }\n            int minA = 0;\n            int maxD = 0;\n            for (int i = 1; i < n; i++) {\n                int d = m[i-1] - m[i];\n                if (d > 0) {\n                    minA += d;\n                    maxD = Math.max(maxD, d);\n                }\n            }\n            int minB = 0;\n            for (int i = 0; i < n-1; i++) {\n                minB += (m[i] < maxD ? m[i] : maxD);\n            }\n            System.out.println(String.format(\"Case #%d: %d %d\", c+1, minA, minB));\n        }\n    }\n}"}
{"idx":"177","func":"class A{\n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"out.txt\"));\n\n        int N = Integer.parseInt(br.readLine());\n\n        for(int p = 0; p < N; p++) {\n            int n = Integer.parseInt(br.readLine());\n            String[] s = br.readLine().split(\" \");\n            int[] v = new int[n];\n            for(int i = 0; i < n; i++) v[i] = Integer.parseInt(s[i]);\n\n            int ret1 = 0;\n            int maxslope = 0;\n\n            for(int i = 1; i < n; i++) {\n                int d = v[i-1] - v[i];\n                if(d > 0) {\n                    maxslope = Math.max(maxslope, d);\n                    ret1 += d;\n                }\n            }\n\n            int ret2 = 0;\n            for(int i = 0; i < n-1; i++) {\n                ret2 += Math.min(maxslope, v[i]);\n            }\n\n            pw.println(\"Case #\" + (p+1) + \": \" + ret1 + \" \" + ret2);\n        }\n\n\n        pw.flush();\n        pw.close();\n\n    }\n}"}
{"idx":"178","func":"class R1A2015A {\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = null;\n        \n        try {\n            in = new BufferedReader(new InputStreamReader(System.in));\n            \n            int testCaseNum = Integer.parseInt(in.readLine());\n            \n            for(int i=1; i<=testCaseNum; i++) {\n                int n = Integer.parseInt(in.readLine());\n                String[] m_str = in.readLine().split(\" \");\n                int[] m = new int[n];\n                for(int j=0; j<n; j++) {\n                    m[j] = Integer.parseInt(m_str[j]);\n                }\n                int sumconsumption = 0;\n                int maxconsumption = 0;\n                for(int j=1; j<n; j++) {\n                    int consumption = Math.max(m[j-1] - m[j], 0);\n                    sumconsumption += consumption;\n                    maxconsumption = Math.max(maxconsumption, consumption);\n                }\n                long z = 0;\n                for(int j=0; j<n-1; j++) {\n                    z += Math.min(maxconsumption, m[j]);\n                }\n                \n                System.out.print(\"Case #\" + i + \": \");\n                System.out.print(sumconsumption);\n                System.out.print(\" \");\n                System.out.print(z);\n                System.out.println();\n            }\n        }\n        catch(IOException ioe) {\n            throw ioe;\n        }\n        finally {\n            if(in != null) {\n                in.close();\n            }\n        }\n    }\n    \n}"}
{"idx":"179","func":"static void main (String[] args) throws java.lang.Exception\n    {\n        \/\/ your code goes here\n        InputStream inputStream = new FileInputStream(\"D:\\\\test2.in\");\n        BufferedReader r = new BufferedReader (new InputStreamReader (inputStream));        \n        int numtestcase=0;\n        \/\/while (!(s=r.readLine()).startsWith(\"42\")) System.out.println(s);\n        numtestcase=Integer.parseInt(r.readLine());\n        for(int i=1;i<=numtestcase;i++)\n        {\n            String s=r.readLine();\n            int n=Integer.parseInt(s);\n            String[] s1=r.readLine().split(\" \");\n            int c1=0,c2=0,maxdiff=0;\n            for(int j=0;j<n-1;j++)\n            {\n                int a=Integer.parseInt(s1[j]);\n                int b=Integer.parseInt(s1[j+1]);\n                if(b<a) c1+=a-b;\n                if(a-b>maxdiff) maxdiff=a-b;\n            }\n            for(int j=0;j<n-1;j++)\n            {\n                int a=Integer.parseInt(s1[j]);\n                int b=Integer.parseInt(s1[j+1]);\n                if(a<=maxdiff) \n                    {\n                        c2+=a;\n                    }\n                else\n                {\n                    c2+=maxdiff;\n                }\n            }            \n            \/\/if(c2>c3) c2=c3;\n            System.out.println(\"Case #\"+Integer.toString(i)+\": \"+Integer.toString(c1)+ \" \" + Integer.toString(c2));\n            \n        }\n    }\n}"}
{"idx":"180","func":"class P1 {\n    public static void main (String[] args) throws FileNotFoundException {\n\/\/        Scanner sc = new Scanner (System.in);\n\/\/        PrintStream op = System.out;\n        Scanner sc = new Scanner (new FileInputStream (\"D:\\\\Internet\\\\A-large.in\"));\n        PrintStream op = new PrintStream (\"D:\\\\Dropbox\\\\SRMs\\\\GCJ151A\\\\src\\\\A-large-output.txt\");\n        int T = sc.nextInt();\n        for (int t = 1; t <= T; t++) {\n            int n = sc.nextInt();\n            int[] m = new int [n];\n            int y = 0, max = 0;\n            for (int i = 0; i < n; i++) {\n                m[i] = sc.nextInt();\n                if (i > 0 && m[i] < m[i - 1]) {\n                    y += m[i - 1] - m[i];\n                    max = Math.max(max, m[i - 1] - m[i]);\n                }\n            }\n            int z = 0;\n            for (int i = 1; i < n; i++)\n                z += Math.min(max, m[i - 1]);\n            op.println(\"Case #\" + t + \": \" + y + \" \" + z);\n        }\n        sc.close();\n        op.close();\n    }\n}"}
{"idx":"181","func":"class A {\n    public static void main( String[] args ) throws Exception {\n        FileReader fr = new FileReader( \"a.txt\" );\n        BufferedReader br = new BufferedReader( fr );\n\n        int cases = Integer.parseInt( br.readLine() );\n\n        for (int c = 1; c <= cases; c++) {\n            int n = Integer.parseInt( br.readLine() );\n            int[] m = new int[n];\n            \n            int counter = 0;\n            for(String s : br.readLine().split(\" \")) {\n                m[counter++] = Integer.parseInt(s);\n            }\n            \n            int method1 = 0;\n            int maxInterval = 0;\n            for(int i = 0; i < m.length - 1; i++) {\n                if(m[i] > m[i+1]) {\n                    int interval = m[i] - m[i+1];\n                    method1 += interval;\n                    if(interval > maxInterval) maxInterval = interval;\n                }\n            }\n            \n            int method2 = 0;\n            for(int i = 0; i < m.length - 1; i++) {\n                method2 += Math.min(m[i], maxInterval);\n            }\n\n            System.out.printf(\"Case #%d: %d %d\\n\", c, method1, method2);\n        }\n\n        fr.close();\n    }\n}"}
{"idx":"182","func":"class A {\n\n    public static void main(String[] args) {\n\n        Scanner input = new Scanner(System.in);\n\n        int t = input.nextInt();\n\n        for (int i = 0; i < t; i++) {\n            int n = input.nextInt();\n            int m[] = new int[n];\n\n            for (int j = 0; j < n; j++) {\n                m[j] = input.nextInt();\n            }\n\n            int case1 = 0;\n\n            for (int j = 1; j < n; j++) {\n                if (m[j - 1] > m[j]) {\n                    case1 += m[j - 1] - m[j];\n                }\n            }\n\n            int case2 = 0;\n\n            double difference = -1;\n\n            for (int j = 0; j < n - 1; j++) {\n                if (m[j] >= m[j + 1]) {\n                    if (m[j] - m[j + 1] > difference) {\n                        difference = m[j] - m[j + 1];\n                    }\n                }\n            }\n\n            double time = difference \/ 10;\n\n            for (int j = 0; j < n - 1; j++) {\n                double amountToEat = 10 * time;\n                if (m[j] != 0) {\n                    if (amountToEat >= m[j]) {\n                        case2 += m[j];\n                    } else {\n                        case2 += amountToEat;\n                    }\n                }\n            }\n\n            System.out.println(\"Case #\"+(i+1)+\": \"+case1 + \" \" + case2);\n            case1 = 0;\n            case2 = 0;\n        }\n\n    }\n\n}"}
{"idx":"183","func":"class Main {\n\n    public static void main(String[] args) throws IOException {\n        FileReader in = new FileReader(\"in.in\");\n        File out = new File(\"out.out\");\n        BufferedReader reader = new BufferedReader(in);\n        PrintWriter writer = new PrintWriter(out);\n        \n        int test = Integer.parseInt(reader.readLine());\n        \n        for(int i=1; i<=test; i++){\n            int n = Integer.parseInt(reader.readLine());\n            String[] data = reader.readLine().split(\"\\\\s\");\n            \n            int t = Integer.parseInt(data[0]);\n            int min1 = 0;\n            int min2 = 0;\n            \n            int maxDif = 0;\n            int[] numbers = new int[n];\n            numbers[0] = t;\n            for(int j=1; j<n; j++){\n                int temp = Integer.parseInt(data[j]);\n                numbers[j] = temp;\n                \n                if(t > temp)\n                    min1 +=  t - temp;\n                \n                if(t - temp > maxDif)\n                    maxDif = t - temp;\n                \n                t = temp;\n            }\n            \n            if(numbers[0] > maxDif)\n                min2 = maxDif;\n            else\n                min2 = numbers[0];\n            \n            for(int j=1; j<n-1; j++){\n                if(numbers[j] > maxDif)\n                    min2+=maxDif;\n                else\n                    min2+=numbers[j];\n            }\n        \n        \n            writer.print(\"Case #\");\n            writer.print(i);\n            writer.print(\": \");\n            writer.print(min1);\n            writer.print(\" \");\n            writer.println(min2);\n        }\n    \n        reader.close();\n        writer.close();\n\n    }\n\n}"}
{"idx":"184","func":"class Mushrooms {\n    static PrintWriter writer;\n\n    public static void main(String[] args) throws Exception {\n        writer = new PrintWriter(\"out.txt\", \"UTF-8\");\n        Scanner sc = new Scanner(new File(\"in.txt\"));\n        int T = sc.nextInt();\n        for (int t = 0; t < T; t++) {\n            \/\/ -------------------------------------------------------------------------------------\n            int N = sc.nextInt();\n            int[] m = new int[N];\n            for (int n = 0; n < N; n++) {\n                m[n] = sc.nextInt();\n            }\n\n            \/\/ method 1\n            int max = Integer.MIN_VALUE;\n            int method1 = 0;\n            for (int i = 0; i < N; i++) {\n                if (m[i] > max) {\n                    max = m[i];\n                } else {\n                    method1 += max - m[i];\n                    max = m[i];\n                }\n            }\n            max = Integer.MIN_VALUE;\n            for (int i = 0; i < N - 1; i++) {\n                int diff = m[i] - m[i + 1];\n                if (diff > max)\n                    max = diff;\n            }\n            \n            int rate10 = max;\n            int mushrooms =0;\n            int cnt = 0;\n            \/\/System.out.println(rate10);\n            for (int i = 0; i < N-1 ; i++) {\n                \/\/System.out.println(\"$\"+mushrooms);\n                mushrooms = m[i];\n\n                if (rate10 >= mushrooms) {\n                    cnt += mushrooms;\n                    mushrooms = 0;\n                } else {\n                    cnt += rate10;\n                    mushrooms -= rate10;\n                }\n\n            }\n            \/\/System.out.println(mushrooms);\n            String s = \"Case #\" + (t + 1) + \": \" + method1+\" \"+cnt;\n            System.out.println(s);\n            writer.println(s);\n            \/\/ -------------------------------------------------------------------------------------\n        }\n        writer.flush();\n        writer.close();\n    }\n\n}"}
{"idx":"185","func":"static void main(String[] args)throws IOException\n    {\n        Scanner sc=new Scanner(System.in);\n        int test = sc.nextInt();\n        for(int t=1; t<=test; t++)\n        {\n            int n = sc.nextInt();\n            int[] a = new int[n];\n            for(int i=0; i<n; i++)\n            {\n                a[i]=sc.nextInt(); \n            }\n            int check1 = 0;\n            int maxDiff = 0;\n            for(int i=1; i<n; i++)\n            {\n                if(a[i]<a[i-1])\n                    check1 += a[i-1]-a[i]; \n                if((a[i-1]-a[i])>maxDiff )\n                {\n                    maxDiff = a[i-1]-a[i];\n                }\n            }\n            int check2 = 0;\n            for(int i=0; i<(n-1); i++)\n            {\n                if(a[i] <= maxDiff)\n                {\n                    check2 += a[i];\n                }\n                else\n                    check2 += maxDiff;\n            }\n            System.out.println(\"case #\"+t+\": \"+check1+\" \"+check2);\n        }\n    }\n}"}
{"idx":"186","func":"class ProblemA {\n        \n    public static void main(String[] args) throws NumberFormatException, IOException {\n        FileWriter writer = new FileWriter(\"C:\/Users\/Max\/Documents\/Java Workspaces\/Google Code Jam\/Round 1A 2015\/src\/output.txt\");        \n        try {\n            BufferedReader br = new BufferedReader(new FileReader(\"C:\/Users\/Max\/Documents\/Java Workspaces\/Google Code Jam\/Round 1A 2015\/src\/input.txt\"));\n            int numCases = Integer.parseInt(br.readLine());\n            for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n                String line = br.readLine();\n                int n = Integer.parseInt(line);\n                line = br.readLine();\n                Scanner sc = new Scanner(line);\n                long y = 0;\n                long maxDifference = 0;\n                int last = Integer.parseInt(sc.next());\n                ArrayList<Integer> sizes = new ArrayList<Integer>();\n                sizes.add(last);\n                while(sc.hasNext()){\n                    int next = Integer.parseInt(sc.next());\n                    sizes.add(next);\n                    if(next < last){\n                        y += (last - next);\n                        if(last - next > maxDifference){\n                            maxDifference = last - next;\n                        }\n                    }\n                    last = next;\n                }\n                long z = 0;\n                for(int i = 0; i < sizes.size() - 1; i++){\n                    if(sizes.get(i) < maxDifference){\n                        z += sizes.get(i);\n                    } else {\n                        z += maxDifference;\n                    }\n                }\n                writer.write(\"Case #\" + caseNum + \": \" + y + \" \" + z + \"\\n\");\n            }\n            br.close();\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        writer.close();\n    }\n}"}
{"idx":"187","func":"static void main (String[] args) throws IOException\n\n        {\n        \n        File text = new File (\"A-large.in\");\n \/\/    File text = new File (\"scanner.in\");\n\n        Scanner scn= new Scanner(text);\n        FileWriter out = new FileWriter(\"large-practice.out\");\n        int N=scn.nextInt(); \/\/ setting the number of test cases\n        int num_pan;\n\n        for (int i =1;i<=N;i++)\n        {\n        num_pan=scn.nextInt();\n        int arr[] = new int[num_pan];\n        for (int j =0;j<num_pan;j++)\n            {\n            arr[j]=scn.nextInt();\n            }\n        \n        \/\/find first rule\n        int num_1=0;int num_2=0;int diff;\n        for (int k=0;k<num_pan-1;k++)\n            {\n            if (arr[k] > arr[k+1])\n                {\n                 diff=arr[k]-arr[k+1];\n                 num_1=num_1+diff;\n                            }\n           else\n            {\n                diff=0;\n                num_1=num_1+diff;\n            }\n            \n            }\n        \n        int grt=0;int temp_grt;\n        for (int k=0;k< num_pan-1 ;k++)\n            {\n            temp_grt=arr[k]-arr[k+1];\n            if (temp_grt > grt)\n                grt=temp_grt;\n            \n            }\n        \n        for (int k=0;k<num_pan-1;k++)\n            {\n            if ((arr[k] < arr[k+1]) && (arr[k] < grt))\n                {\n                num_2=num_2+arr[k];        \n                \n                \n                }\n\n            else if ((arr[k] < arr[k+1]) && (arr[k] >= grt))\n                    num_2=num_2+grt;\n\n            else if ((arr[k] > arr[k+1]) && (arr[k] >= grt))\n                {\n                num_2=num_2+grt;\n                }\n            else if ((arr[k] > arr[k+1]) && (arr[k] < grt))\n                {\n                num_2=num_2+arr[k];\n                \n                }\n            else if ((arr[k]==arr[k+1]) && (arr[k] < grt))\n                {\n                num_2=num_2+arr[k];\n\n                }\n            else if ((arr[k]==arr[k+1]) && (arr[k]== grt))\n                num_2=num_2+grt;\n            else if ((arr[k]==arr[k+1]) && (arr[k]> grt))\n                num_2=num_2+grt;\n\n            }\n\n\n\n\n        out.write(\"Case #\"+i+\": \"+num_1+\" \"+num_2+\"\\n\");\n        } \/\/main for loop ends here\n\n\n\n        out.flush();\n        out.close();\n        }     \/\/ main function ends here\n    \n    \n    \n    \n    }  \/\/class ends here"}
{"idx":"188","func":"class A{\n    public static void main(String args[]){\n        String inputFileName = \"A-large.in\";\n        String outputFileName = \"A-large.out\";\n        try{\n            Scanner scan = new Scanner(new FileInputStream(inputFileName));\n            PrintWriter printer = new PrintWriter(new FileOutputStream(outputFileName));\n            int T = scan.nextInt();\n            scan.nextLine();\n            for(int t = 0; t < T; t++){\n                int N = scan.nextInt();\n                int[] counts = new int[N];\n                for(int i = 0; i < N; i++){\n                    counts[i] = scan.nextInt();\n                }\n                int count1 = 0;\n                int maxDiff = 0;\n                for(int i = 0; i < N -1; i++){\n                    int diff = Math.max(0,counts[i] - counts[i+1]); \n                    count1 += diff;\n                    if(maxDiff < diff)\n                        maxDiff = diff;\n                }\n                int count2 = 0;\n                for(int i = 0; i < N -1; i++){\n                    count2 += Math.min(counts[i],maxDiff);\n                }\n                printer.println(\"Case #\"+(t+1)+\": \"+count1+\" \"+count2);\n            }\n            printer.close();\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"189","func":"abstract class MainA {\n\n    public static void main(String[] args) throws Exception {\n        \/\/ Open input and output files. (stdin and stdout are not used because\n        \/\/ of the lack of support for using a file as stdin in Eclipse.)\n        InputStream inStream = new FileInputStream(\n            \"input\/A-large.in\");\n        OutputStream outStream = new FileOutputStream(\n            \"output\/A-large-out.txt\");\n        \n        Scanner in = new Scanner(new BufferedInputStream(inStream));\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(outStream));\n        \n        int numCases = in.nextInt();\n        for (int caseIdx = 1; caseIdx <= numCases; caseIdx++) {\n            \n            int numSamples = in.nextInt();\n            int[] samples = new int[numSamples];\n            for (int i = 0; i < numSamples; i++) {\n                samples[i] = in.nextInt();\n            }\n            int decreaseSum = 0;\n            int maxDecrease = 0;\n            \n            for (int i = 0; i < samples.length - 1; i++) {\n                int decrease = samples[i] - samples[i+1];\n                if (decrease > 0) {\n                    decreaseSum += decrease;\n                    maxDecrease = Math.max(decrease, maxDecrease);\n                }\n            }\n            \n            double minRate = maxDecrease \/ 10.0;\n            int time = (samples.length - 1) * 10;\n            \n            double minEaten1 = 0;\n            for (int i = 0; i < samples.length - 1; i++) {\n                minEaten1 += Math.min(minRate * 10, samples[i]);\n            }\n            \n            int result0 = decreaseSum;\n            int result1 = (int) Math.floor(minEaten1);\n            \n            \/\/ Solve this test case;\n            int[] result = new int[] { result0, result1 };\n            \n            \/\/ Print the result.\n            String resultStr = String.format(\"%s %s\", result[0], result[1]);\n            String fullResultStr = String.format(\"Case #%s: %s\", caseIdx,\n                resultStr);\n            out.println(fullResultStr);\n            System.out.println(fullResultStr);\n        }\n        \n        in.close();\n        out.close();\n    }\n}"}
{"idx":"190","func":"class MushroomMonster {\n  public static void main(String []args) {\n    Scanner in = new Scanner(System.in);\n    final int T = in.nextInt();\n    for (int i = 1; i <= T; i++) {\n      final int N = in.nextInt();\n      int []m = new int[N];\n      int prev = m[0] = in.nextInt();\n      int accDec = 0;\n      int maxDec = 0;\n      for (int j = 1; j < N; j++) {\n        int cur = m[j] = in.nextInt();\n        if (cur < prev) {\n          accDec += (prev - cur);\n          maxDec = Math.max(maxDec, prev - cur);\n        }\n        prev = cur;\n      }\n      int acc2Dec = 0;\n      for (int j = 0; j < N - 1; j++) {\n        acc2Dec += Math.min(maxDec, m[j]);\n      }\n      System.out.println(\"Case #\" + i + \": \" + accDec + \" \" + acc2Dec);\n    }\n    in.close();\n  }\n}"}
{"idx":"191","func":"class Mushroom {\n\n    private String folderName=\"C:\/Data\/workspaces\/workspaces2015\/cj\/codejam\/files\" ; \n    \n    private String fileName=\"A-large\" ;\n    \n    private String inputFileName=fileName+\".in\" ; \n    \n    private String outputFileName=fileName+\".out\" ; \n    \n    private BufferedReader reader ;\n    \n    private BufferedWriter writer ;\n    \n    private Integer nCases ;\n    \n    private Integer caseNumber ;\n    \n    private Integer n ;\n    \n    private int[] q ;\n    \n    public static void main(String[] args) {\n        try {\n            Mushroom sc=new Mushroom() ;\n            sc.reader=new BufferedReader(new FileReader(new File(sc.folderName,sc.inputFileName))) ;\n            sc.nCases=new Integer(sc.reader.readLine()) ;\n            System.out.println(\"nCases=\"+sc.nCases);\n            sc.writer=new BufferedWriter(new FileWriter(new File(sc.folderName,sc.outputFileName))) ;\n            for (int i=1 ; i<=sc.nCases ; i++) {\n                sc.caseNumber=i ;\n                sc.n=new Integer(sc.reader.readLine()) ;\n                sc.q=new int[sc.n] ;\n                StringTokenizer st=new StringTokenizer(sc.reader.readLine(),\" \",false) ;\n                for (int i1=0 ; i1<sc.n ; i1++) {\n                    sc.q[i1]=new Integer(st.nextToken()) ;\n                }\n                int ans=0 ;\n                for (int i1=1 ; i1<sc.n ; i1++) {\n                    int diff=sc.q[i1-1]-sc.q[i1] ;\n                    if (diff>0) ans+=diff ;\n                }\n                int method1=ans ;\n                int ans1=0 ;\n                int max=0 ;\n                for (int i1=1 ; i1<sc.q.length ; i1++) {\n                    int diff=sc.q[i1-1]-sc.q[i1] ;\n                    if (diff>max) max=diff ;\n                }\n                for (int i2=0 ; i2<(sc.q.length-1) ; i2++) {\n                    if (sc.q[i2]>max) {\n                        ans1+=max ;\n                    } else {\n                        ans1+=sc.q[i2] ;\n                    }\n                }\n                int method2=ans1 ;\n                String output=\"Case #\"+sc.caseNumber+\": \"+method1+\" \"+method2 ;\n                sc.writer.write(output+\"\\n\") ;\n            }\n            sc.reader.close() ;\n            sc.writer.flush() ;\n            sc.writer.close() ;\n        } catch (Exception exp) {\n            exp.printStackTrace() ;\n        }\n    }\n\n}"}
{"idx":"192","func":"class A {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        int numberOfCase;\n        Scanner scanner = null;\n        FileWriter fw;\n        BufferedWriter bw;\n\n        try {\n            File file = new File(args[1]);\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n            fw = new FileWriter(file.getAbsoluteFile());\n            bw = new BufferedWriter(fw);\n            scanner = new Scanner(new File(args[0]));\n            numberOfCase = scanner.nextInt();\n\n            for (int i = 0; i < numberOfCase; i++) {\n                int n = scanner.nextInt();\n                int methodA = 0;\n                int previousNumOfPieces = scanner.nextInt();\n                int maxDiff = 0;\n                int[] pieces = new int[n];\n                pieces[0] = previousNumOfPieces;\n                for (int j = 1; j < n; j++) {\n                    int numOfPieces = scanner.nextInt();\n                    pieces[j] = numOfPieces;\n                    if (numOfPieces < previousNumOfPieces) {\n                        int diff = previousNumOfPieces - numOfPieces;\n                        methodA = methodA + diff;\n                        if (diff > maxDiff)\n                            maxDiff = diff;\n                    }\n                    previousNumOfPieces = numOfPieces;\n                }\n\n                float rate = ((float) maxDiff \/ 10);\n                float methodB = 0;\n                for (int k = 0; k < n - 1; k++) {\n                    if (pieces[k] > (rate * 10)) {\n                        methodB = methodB + (rate * 10);\n                    } else {\n                        methodB = methodB + pieces[k];\n                    }\n                }\n\n                StringBuilder sb = new StringBuilder();\n                sb.append(\"Case #\" + (i + 1) + \": \" + methodA + \" \"\n                        + Math.round(methodB));\n                String msg = sb.toString().trim() + \"\\n\";\n                System.out.print(msg);\n                bw.write(msg);\n            }\n            bw.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            scanner.close();\n        }\n    }\n}"}
{"idx":"193","func":"class MushroomMonster2 {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int i = 1; i <= T; i++) {\n            int N = in.nextInt();\n            int[] intervals = new int[N];\n            for (int j = 0; j < N; j++) {\n                intervals[j] = in.nextInt();\n            }\n            \/\/ method 1\n            int eat1 = 0;\n            for (int i2 = 0; i2 < intervals.length - 1; i2++) {\n                if (intervals[i2] > intervals[i2 + 1]) {\n                    eat1 += intervals[i2] - intervals[i2 + 1];\n                }\n            }\n            \/\/ method 2\n            \/\/ get the bigest can be eaten\n            int eat2 = 0, maxEaten = 0;\n            for (int i3 = 0; i3 < intervals.length - 1; i3++) {\n                if (intervals[i3] - intervals[i3 + 1] > maxEaten) {\n                    maxEaten = intervals[i3] - intervals[i3 + 1];\n                }\n            }\n            \/\/ now eat and count\n            for (int i1 = 0; i1 < intervals.length - 1; i1++) {\n                if (intervals[i1] <= maxEaten) {\n                    eat2 += intervals[i1];\n                } else {\n                    eat2 += maxEaten;\n                }\n            }\n            \n            \/\/ output\n            System.out.println(\"Case #\" + i + \": \" + eat1 + \" \" + eat2);\n        }\n    }\n}"}
{"idx":"194","func":"class Mushroom {\n    final static String PROBLEM_NAME = \"mushroom\";\n    final static String WORK_DIR = \"D:\\\\GCJ\\\\\" + PROBLEM_NAME + \"\\\\\";\n\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + \"input.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\n        int caseCnt = sc.nextInt();\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\n            System.out.println(\"Processing test case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n            Mushroom r = new Mushroom();\n            int N = sc.nextInt();\n            int[] A = new int[N];\n            for (int i = 0; i < N; i++) {\n                A[i] = sc.nextInt();\n            }\n            \n            int ans1 = 0;\n            int speed = 0;\n            for (int i = 0; i + 1 < N; i++) {\n                if (A[i + 1] < A[i]) {\n                    ans1 += A[i] - A[i + 1];\n                    speed = Math.max(speed, A[i] - A[i + 1]);\n                }\n            }\n            \n            int ans2 = 0;\n            for (int i = 0; i + 1 < N; i++) {\n                ans2 += Math.min(A[i], speed);\n            }\n            \n            pw.println(ans1 + \" \" + ans2);\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"195","func":"class a {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int cases = in.nextInt();\n        int cn = 0;\n\n        while (cn++ < cases) {\n            int times = in.nextInt();\n\n            int[] input = new int[times];\n            for (int i = 0; i < input.length; i++) {\n                input[i] = in.nextInt();\n            }\n\n            int last = input[0];\n            int wayOne = 0;\n            for (int i = 1; i < times; i++) {\n                int next = input[i];\n\n                wayOne += Math.max(0, last - next);\n                \n                last = next;\n            }\n\n            int wayTwo = 0;\n            last=input[0];\n            int worst = 0;\n            for (int i = 1; i < input.length; i++) {\n                int next=input[i];\n                int minEaten = Math.max(0, last-next);\n\/\/                minEaten = (minEaten\/10) + (minEaten%10==0 ? 0 : 1);\n                worst = Math.max(worst, minEaten);\n                last=next;\n            }\n            \n            for (int i = 0; i < input.length-1; i++) {\n                wayTwo += Math.min(input[i], worst);\n            }\n            \n            System.out.printf(\"Case #%d: %d %d\\n\", cn, wayOne, wayTwo);\n        }\n    }\n}"}
{"idx":"196","func":"class problem1 {\n\n    public static void main(String[] args) throws IOException {\n        \/\/int[] array = {23,90, 40, 0, 100, 9};\n        \/\/int[] array = {10,5,15,5};\n        int[] array = {100,100};\n\n        \/\/int[] array = {81,81, 81 ,81 ,81 ,81 ,81 ,0};\n        int min;\/*\n        min = getMin1(array);\n        System.out.println(min);\n        min = getMin2(array);\n        System.out.println(min);*\/\n        try (Writer writer = new BufferedWriter(new OutputStreamWriter(\n                  new FileOutputStream(\"\/home\/danza\/Downloads\/output1L.txt\"), \"utf-8\"))) {\n      \/\/ writer.write(\"something\");\n        \n        int j=1;\n        BufferedReader br = new BufferedReader(new FileReader(\"\/home\/danza\/Downloads\/A-large (1).in\"));\n        try {\n            StringBuilder sb = new StringBuilder();\n            String line = br.readLine();\n            while (line != null) {\n                sb.append(line);\n                sb.append(System.lineSeparator());\n                int len = Integer.parseInt(br.readLine());\n                line = br.readLine();\n                int[] arr = new int[len];\n                String[] sarray = line.split(\" \");\n                for(int i=0;i<len;i++){\n                    arr[i] = Integer.parseInt(sarray[i]);\n                }\n                int min4 = 0;\n                for(int i1=1;i1<arr.length;i1++){\n                    if(arr[i1]<arr[i1-1]){\n                        int temp1 = Math.abs(arr[i1]-arr[i1-1]);\n                        min4+=temp1;\n                    }\n                }\n                int min1 = min4;\n                System.out.println(min1);\n                int maxDiff = 0;\n                for(int i=1;i<arr.length;i++){\n                    if(arr[i]<arr[i-1]){\n                        int temp = Math.abs(arr[i]-arr[i-1]);\n                        if(temp>maxDiff)\n                            maxDiff = temp;\n                    }\n                }\n                int min3=0;\n                \n                for(int i=0;i<arr.length-1;i++){\n                    \/\/int temp = Math.abs(array[i]-array[i-1]);\n                    if(arr[i]>=maxDiff){\n                        min3+=maxDiff;\n                    } \n                    else\n                        min3+=arr[i];\n                \n                }\n                int min2 = min3;\n                System.out.println(min2);\n                writer.write(\"Case #\"+(j++)+\": \"+min1+\" \"+min2+\"\\n\");\n            }\n            String everything = sb.toString();\n        }catch(Exception e){\n            \n        }\n        finally {\n            br.close();\n        }\n        }\n    }\n}"}
{"idx":"197","func":"class ProblemA {\n    \n    private static String inputFilePath = \"\/home\/chiwang\/Downloads\/CodeJam\/A-large.in\";\n    private static String outputFilePath = \"\/home\/chiwang\/Downloads\/CodeJam\/Solution\/\";\n    private static BufferedReader br;\n    private static BufferedWriter bw;\n    \n    private static int[] plate;\n    private static int N;\n    \n    public static void main(String[] args) {\n        \n        \/\/ Initialisation\n        try {\n            outputFilePath += inputFilePath.substring(inputFilePath.lastIndexOf(\"\/\") + 1, inputFilePath.length() - 3) + \".out\";\n            \n            br = new BufferedReader(new FileReader(inputFilePath));\n            bw = new BufferedWriter(new FileWriter(outputFilePath));\n            \n            final int T = Integer.parseInt(br.readLine());\n            \n            for (int caseNum = 1; caseNum <= T; caseNum++) {        \n                \/*\n                 * Fill in the implementation details\n                 *\/\n                int N = Integer.parseInt(br.readLine());\n                plate = new int[N];\n                String[] parts = br.readLine().split(\" \");\n                \n                for (int i = 0; i < N; i++) {\n                    plate[i] = Integer.parseInt(parts[i]);\n                }\n                long eaten = 0;\n                int prev = plate[0];\n                for (int i = 1; i < plate.length; i++) {\n                    if (prev > plate[i]) {\n                        eaten += (prev - plate[i]);\n                    }\n                    prev = plate[i];\n                }\n                \n                long m1 = eaten;\n                long eaten1 = 0;\n                \n                int biggestDiff = 0;\n                int prev1 = plate[0];\n                for (int i = 1; i < plate.length; i++) {\n                    if (prev1 - plate[i] > biggestDiff) {\n                        biggestDiff = prev1 - plate[i];\n                    }\n                    prev1 = plate[i];\n                }\n                \n                \n                \n                for (int i = 0; i < plate.length -1; i++) {\n                    if (plate[i] > 0) {\n                        eaten1 += Math.min(biggestDiff, plate[i]);\n                    }\n                }\n                long m2 = eaten1;\n                \n                String result = String.format(\"Case #%d: %d %d%n\", caseNum, m1 , m2);\n                bw.write(result);\n                System.out.println(result);\n            }        \n            \n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        } finally {\n            try {\n                if (br != null)\n                    br.close();\n                if (bw != null)\n                    bw.close();\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n        \n        System.out.println(\"========================================\");\n        System.out.println(\"Done! :)\");\n    }\n\n}"}
{"idx":"198","func":"class Mushroom {\n    \n    public static void main( String[] args ) throws Exception {\n            BufferedReader in = new BufferedReader(new FileReader(\"in.txt\"));\n            BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\n            String line = in.readLine();\n            int t = new Integer(line);\n            \n            \n            for (int caseNum=1; caseNum<=t; caseNum++) {\n                line = in.readLine();\n                int n = new Integer(line);\n                line = in.readLine();\n                String[] sa = line.split(\" \");\n                int[] m = new int[n];\n                int rate =0;\n                int totalDecrease=0;\n                m[0] = new Integer(sa[0]);\n                \n                for (int j=1; j<n; j++) {\n                    m[j] = new Integer(sa[j]);\n                    if ((m[j-1]-m[j])>rate) rate=m[j-1]-m[j];\n                    if ((m[j-1]>m[j])) totalDecrease+=m[j-1]-m[j];\n                }\n                \n                int total2=0;\n                for (int j=0; j<n-1; j++) {\n                    if (m[j]>rate) total2+=rate;\n                    else total2+=m[j];\n                }\n                \n                out.write(\"Case #\"+caseNum+\": \"+totalDecrease+\" \"+total2+\"\\n\");\n\n\n            }\n            \n            \n            in.close();\n            out.flush();\n            out.close();\n\n        }\n\n\n}"}
{"idx":"199","func":"class Mushroom {\n\n\n        List<ArrayList<Integer>> cases = new ArrayList<ArrayList<Integer>>();\n        List<Integer> method1List = new ArrayList<Integer>();\n        List<Integer> method2List = new ArrayList<Integer>();\n        \n        public static void main(String[] args)\n        {\n            Mushroom so = new Mushroom();\n            \n            Scanner scanner;\n            try {\n                scanner = new Scanner(new File(\"A-large.in\"));\n            \n                int testCases = scanner.nextInt();\n            \n                \/\/System.out.println(\"testCases: \"+ testCases);\n                scanner.nextLine();\n                for(int i=0; i<testCases; ++i)\n                {\n            \n                    so.cases.add(new ArrayList<Integer>());\n                    int plateNum = scanner.nextInt();\n            \n                    for(int j = 0; j < plateNum; ++j){\n                        \n                        so.cases.get(i).add(scanner.nextInt());\n                    }\n                    \n                    \n                    \n                    \n                }\n                \n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            \/\/so.readFile(\"test1.in\");\n            \n            for(ArrayList<Integer> testCase : so.cases)\n            {\n                int size = testCase.size();\n                int method1 = 0;\n                int method2 = 0;\n                int method2Rate = 0;\n                \n                for(int i2 = 1; i2 < size; ++i2){\n                    if(testCase.get(i2-1) - testCase.get(i2) > method2Rate) \n                        method2Rate = testCase.get(i2-1) - testCase.get(i2);\n                }\n                \n                for(int i1 = 1; i1 < size; ++i1){\n                    if(testCase.get(i1-1)>testCase.get(i1)){\n                        method1 += testCase.get(i1-1) - testCase.get(i1);\n                    }\n                    \n                    \/\/if(i<size-1)\n                    method2 += Math.abs(method2Rate > testCase.get(i1-1) ? testCase.get(i1-1) : method2Rate);\n                }\n                \n                so.method1List.add(method1);\n                so.method2List.add(method2);\n                \n            \n            }\n            \n            PrintWriter writer;\n            try {\n                writer = new PrintWriter(\"A-large.out\");\n                \n                int counter = 0;\n                for(int i=0; i<so.method1List.size();++i)\n                {\n                    writer.print(\"Case #\" + (++counter) + \": \" + so.method1List.get(i) +\" \"+ so.method2List.get(i));\n                    if(counter<so.method1List.size())\n                    {\n                        writer.println();\n                    }\n                }\n                \n                writer.close();\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n\n}"}
{"idx":"200","func":"class Mushrooms {\n    \n    static final String filename = \"A-large (2).in\";\n    \n    static Scanner seer;\n    static int T;\n    static int n;\n    static int i;\n    static ArrayList<Integer> numlist;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/seer = new Scanner(System.in);\n        seer = new Scanner(new File(filename));\n        T = seer.nextInt();\n        for(i = 0; i < T; i++){\n            n = seer.nextInt();\n            int sumdifs = 0;\n            int maxdif = 0;\n            int last = 0;\n            int curr = 0;\n            numlist = new ArrayList<Integer>();\n            for(int j = 0; j < n; j++){\n                curr = seer.nextInt();\n                numlist.add(curr);\n                if(last > curr){\n                    int currdif = last-curr;\n                    sumdifs += last-curr;\n                    if(maxdif < currdif)\n                        maxdif = currdif;\n                }\n                last = curr;\n            }\n            int sum2 = 0;\n            for(int ind = 0; ind < n-1; ind++){\n                sum2 += (int) Math.min(numlist.get(ind), maxdif);\n            }\n            System.out.printf(\"Case #%d: %d %d\\n\",i+1,sumdifs,sum2);\n        }\n        \n    }\n\n}"}
{"idx":"201","func":"class A {\n    public static void main(String[] args) throws FileNotFoundException {\n        File file = new File(\"A-large.in\");\n        Scanner stdin = new Scanner(file);\n        int numCases = stdin.nextInt();\n        for(int i = 1; i<=numCases; i++){\n            int numSessions = stdin.nextInt();\n            int m1Sum = 0;\n            int previous = 0;\n            int bigDiff = 0;\n            int[] mushrooms = new int[numSessions];\n            for(int k = 0; k<numSessions; k++){\n                int current = stdin.nextInt();\n                mushrooms[k] = current;\n                if(current<previous){\n                    if(previous-current>bigDiff){\n                        bigDiff = previous-current;\n                    }\n                    m1Sum += previous-current;\n                }\n                previous = current;\n            }\n            int m2Sum = 0;\n            for(int k=0; k<numSessions-1; k++){\n                int current = mushrooms[k];\n                if(current>bigDiff){\n                    m2Sum += bigDiff;\n                }\n                else{\n                    m2Sum += current;\n                }\n            }\n            System.out.println(\"Case #\"+i+\": \"+m1Sum+\" \"+m2Sum);\n        }\n    }\n}"}
{"idx":"202","func":"class FirstProb {\n\n    public static void main(String[] args) throws IOException {\n        try (Scanner scanner = new Scanner(\n                new File(\"\/Users\/bbaker\/Documents\/practice\/round1A2015\/a\/A-large.in\"));\n                Writer writer = new BufferedWriter(new OutputStreamWriter(\n                        new FileOutputStream(\"\/Users\/bbaker\/Documents\/practice\/round1A2015\/a\/A-large.out\"), \"utf-8\"))) {\n            int t = scanner.nextInt();\n            for (int i = 1; i <= t; ++i) {\n                int n = scanner.nextInt();\n                \n                ArrayList<Long> mushrooms = new ArrayList<>(n);\n                for (int j = 0; j < n; ++j) {\n                    mushrooms.add(scanner.nextLong());\n                }\n                \n                long y = 0;\n                long prev = mushrooms.get(0);\n                for (int j = 1; j < n; ++j) {\n                    long current = mushrooms.get(j);\n                    long diff = prev - current;\n                    if (diff > 0) {\n                        y += diff;\n                    }\n                    prev = current;\n                }\n                \n\n                prev = mushrooms.get(0);\n                long maxDiff = 0;\n                for (int j = 1; j < n; ++j) {\n                    long current = mushrooms.get(j);\n                    long diff = prev - current;\n                    if (diff > maxDiff) {\n                        maxDiff = diff;\n                    }\n                    prev = current;\n                }\n                \n                long z = 0;\n                for (int j = 0; j < n - 1; ++j) {\n                    long current = mushrooms.get(j);\n                    long diff = current - maxDiff;\n                    if (diff  >= 0) {\n                        z += maxDiff;\n                    } else {\n                        z += (maxDiff - Math.abs(diff));\n                    }\n                }\n                \n                writer.write(\"Case #\" + i + \": \" + y + \" \" + z + \"\\n\");\n            }\n        }\n    }\n}"}
{"idx":"203","func":"class GCJQualA {\n\n    public static void main(String[] args) {\n        GCJQualA g = new GCJQualA();\n        Scanner br = null;\n                BufferedWriter bw;\n        \n                try {\n                    br = new Scanner(new File(\"src\/gcj20151a\/A-small-practice.in\"));\n                    bw = new BufferedWriter(new FileWriter(\"src\/gcj20151a\/A-small-output.txt\"));\n        \/\/            bw = new BufferedWriter(new OutputStreamWriter(System.out));\n        \n                    int numTests = br.nextInt();\n                    for (int i = 0; i < numTests; i++) {\n                        int N = br.nextInt();\n        \n                        int[] m = new int[N];\n                        \n                        for (int j = 0; j < N; j++) {\n                            m[j] = br.nextInt();\n                        }\n                        int total = 0;\n                        int prev = 0;\n                        for (int i1 = 0; i1 < N; i1++) {\n                            int n = m[i1];\n                            \n                            if ( n < prev ) {\n                                \/\/ Then she ate some\n                                total += (prev-n);\n                            }\n                                \n                            prev = n;\n                        }\n                        int a = total;\n                        int total1 = 0;\n                        int rate = 0;\n                        int prev1 = 0;\n                        for (int i1 = 0; i1 < N; i1++) {\n                            int n = m[i1];\n                            int periodRate = prev1 - n;\n                            if ( periodRate < 0 ) {\n                                periodRate = 0;\n                            }\n                            if ( periodRate > rate ) {\n                                rate = periodRate;\n                            }\n                            prev1 = n;\n                        }\n                        \/\/ prev is now the remaining on the plate that she didn't eat.\n                        \/\/ total what was available per interval ( can't eat more than what's there)\n                        for (int i2 = 0; i2 < N-1; i2++) {\n                            int n = m[i2];\n                            total1 += (n > rate)?rate:n;\n                        }\n                        int b = total1;\n                        \n                        String answer = a + \" \" + b;\n        \n                        bw.write(\"Case #\" + (i + 1) + \": \");\n                        System.out.println(\"Case #\" + (i + 1) + \": \");\n                        bw.write(answer);\n                        System.out.println(answer);\n                        bw.newLine();\n                    }\n                    bw.close();\n                } catch (IOException ex) {\n                    Logger.getLogger(g.getClass().getName()).log(Level.SEVERE, null, ex);\n                } finally {\n                    try {\n                        if (br != null) {\n                            br.close();\n                        }\n                    } catch (Exception ex) {\n                        Logger.getLogger(g.getClass().getName()).log(Level.SEVERE, null, ex);\n                    }\n                }\n    }\n}"}
{"idx":"204","func":"class A {\n    public static void main(String[] args){\n        try{\n            Scanner sc = new Scanner(new File(\"A-large.in\"));\n            \/\/Scanner sc = new Scanner(System.in);\n            @SuppressWarnings(\"unused\")\n            File file = new File (\"A-large.out\");\n            PrintWriter pw = new PrintWriter (\"A-large.out\");\n            int numCase = sc.nextInt();\n            for (int zz =0; zz < numCase; zz++){\n                int numRound = sc.nextInt();\n                int[] table = new int[numRound];\n                int minEaten = 0;\n                int minEatenConstant = 0;\n                int maxConstant = -1;\n\n                for(int i = 0; i < numRound; i++){\n                    table[i] = sc.nextInt();\n                    if(i > 0){\n                        if(table[i-1] >= table[i]){\n                            int eaten = table[i-1] - table[i];\n                            minEaten += eaten;\n                            if(maxConstant < eaten){\n                                maxConstant = eaten;\n                            }\n                        }\n                    }\n                }\n                for(int i = 0 ; i < numRound - 1; i++){\n                    \/\/ eat the whole plate or maxConstant except the last plate\n                    minEatenConstant += Math.min(maxConstant, table[i]);\n                }\n                pw.printf(\"Case #%d: %d %d\\n\", (zz+1), minEaten, minEatenConstant);\n                \/\/System.out.printf(\"Case #%d: %d %d\\n\", (zz+1), minEaten, minEatenConstant);\n            }\n            sc.close();\n            pw.close();\n        }\n        catch(Exception e){}\n    }\n}"}
{"idx":"205","func":"class ExoA {\n    public static void main(final String[] args) {\n\n        final String base = \"\/home\/jean\/gcj2015\/1a\/ExoA\/\";\n        final String input = base + \"b1.in\";\n        final String output = base + \"b1.out\";\n\n        try {\n            final Scanner sc = new Scanner(new FileReader(input));\n            final PrintWriter pw = new PrintWriter(output);\n\n            final int n = sc.nextInt();\n            sc.nextLine();\n            for (int c = 0; c < n; c++) {\n                System.out.println(\"Test case \" + (c + 1) + \"...\");\n                pw.print(\"Case #\" + (c + 1) + \": \");\n                final int N = sc.nextInt();\n                int ns[] = new int[N];\n                int t = 0;\n                int m = 0;\n                int t2 = 0;\n                for (int i = 0; i < ns.length; i++) {\n                    ns[i] = sc.nextInt();\n                    if (i > 0 && ns[i - 1] > ns[i]) {\n                        t -= ns[i] - ns[i - 1];\n                    }\n                    if (i > 0 && ns[i - 1] - ns[i] > m) {\n                        m = ns[i - 1] - ns[i];\n                    }\n                }\n                for (int i = 1; i < ns.length; i++) {\n                    if (ns[i] == 0) {\n                        t2 += ns[i - 1];\n                    } else {\n                        t2 += Math.min(ns[i - 1], m);\n                    }\n                }\n                pw.print(t);\n                pw.print(\" \");\n                pw.print(t2);\n                pw.println();\n            }\n            pw.println();\n            pw.flush();\n            pw.close();\n            sc.close();\n        } catch (final FileNotFoundException ex) {\n            Logger.getLogger(ExoA.class.getName()).log(Level.SEVERE, null, ex);\n        }\n\n    }\n}"}
{"idx":"206","func":"class Mushroom {\n\n    private static final boolean USE_SMALL = true;\n    private static final String INPUT_FILE;\n    private static final String OUTPUT_FILE;\n    static {\n        String problem = \"mushroom\";\n        if (USE_SMALL) {\n            INPUT_FILE = problem + \"\/A-small.in\";\n            OUTPUT_FILE = problem + \"\/small.out\";\n        } else {\n            INPUT_FILE = problem + \"\/A-large.in\";\n            OUTPUT_FILE = problem + \"\/large.out\";\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(INPUT_FILE)));\n        PrintWriter out = new PrintWriter(new FileOutputStream(OUTPUT_FILE));\n\n        int T = Integer.parseInt(in.readLine());\n        for (int CASE = 1; CASE <= T; CASE++) {\n            StringTokenizer st = new StringTokenizer(in.readLine());\n            int N = parseInt(st.nextToken());\n            int[] array = new int[N];\n            st = new StringTokenizer(in.readLine());\n            for (int i = 0; i < N; i++) {\n                array[i] = parseInt(st.nextToken());\n            }\n            int total1 = 0;\n            for (int i = 0; i < array.length - 1; i++) {\n                if (array[i] - array[i + 1] > 0) {\n                    total1 += array[i] - array[i + 1];\n                }\n            }\n            int max = 0;\n            for (int i = 0; i < array.length - 1; i++) {\n                if (array[i] - array[i + 1] > max) {\n                    max = array[i] - array[i + 1];\n                }\n            }\n            int total2 = 0;\n            for (int i = 0; i < array.length - 1; i++) {\n                if (array[i] > max) {\n                    total2 += max;\n                } else\n                    total2 += array[i];\n            }\n\n            out.println(\"Case #\" + CASE + \": \" + total1 + \" \" + total2);\n            out.flush();\n        }\n        out.close();\n        in.close();\n    }\n}"}
{"idx":"207","func":"class Test {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n\n        BufferedReader in;\n        PrintWriter out;\n        try {\n            \n            in = new BufferedReader(new FileReader(\"\/home\/devesh\/Downloads\/A-large (1).in\"));\n            out = new PrintWriter(new FileWriter(\"\/home\/devesh\/Code_jam\/output.txt\")); \n         \n            \n            \n        int T = Integer.parseInt(in.readLine()); \n        ArrayList<Integer> list;\n        int count=0,cnt=0,s;\n        String str;\n        String arr[];\n        \n        \n        for(int i=1; i<=T ; i++)\n        {\n            \/\/ Case 1\n            int N = Integer.parseInt(in.readLine());\n            String S = in.readLine();\n            String inpt[] = S.split(\" \");\n            int[] inp = new int [N];\n            int sum1 = 0,sum2=0,maxdiff=0;\n            for (int n=0; n < N ; n++)\n            {\n                inp[n] = Integer.parseInt(inpt[n]);\n                if(n>0 && inp[n-1] > inp[n])\n                {\n                    sum1= sum1 + inp[n-1] - inp[n];\n                }\n            }\n            for (int n=1; n < N ; n++)\n            {\n                if(inp[n-1] > inp[n] && maxdiff < inp[n-1] - inp[n] )\n                    maxdiff = inp[n-1] - inp[n];\n            }\n            \/\/System.out.println(maxdiff);\n            for (int n=0; n < N-1 ; n++)\n            {\n                if(maxdiff > inp[n])\n                    sum2  = sum2 + inp[n];\n                else\n                    sum2 = sum2 + maxdiff;\n            }\n            \n            out.println(\"Case #\"+i+\": \"+sum1 + \" \"+ sum2);\n            System.out.println(sum1);\n            System.out.println(sum2);\n            \n        }\n         \n        out.close();\n        \n        in.close();\n        \n        } catch (Exception e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    \n    }\n\n    \n}"}
{"idx":"208","func":"class MM {\n    public static void main(String[] args) throws IOException {\n    String        pb        = \"MM\";\n    Scanner       sc        = new Scanner(new FileReader(new File(pb+\".in\")));\n    PrintWriter   out       = new PrintWriter(new File(pb+\".out\"));\n        StringBuilder resultat  = new StringBuilder(\"\");\n        long time = System.currentTimeMillis();\n        \n        \/\/TEST CASES----------------------------------------------------\n        int TC = sc.nextInt();\n    for (int tc = 1; tc <= TC; tc++) {\n      if(tc!=1) resultat.append(\"\\n\");\n      resultat.append(\"Case #\"+tc+\": \");\n    \n      \/\/READ----------------------------------------------------\n      int N = sc.nextInt();\n      \n      long[] v = new long[N];\n      long R = 0;\n      long S1 = 0;\n      v[0] = sc.nextLong();\n      for (int i = 1; i < N; i++){   \n        v[i] = sc.nextLong();\n        if(v[i]<v[i-1])\n          S1 += v[i-1] - v[i];\n        \n        if(v[i-1] - v[i]>R)\n          R = v[i-1] - v[i];\n      }\n            \n            \/\/SOLVE----------------------------------------------------\n            long res = 0;\n            long S2 = 0;\n            for (int i = 0; i < N-1; i++){   \n        S2 += min(v[i],R);\n      }\n            \n      \/\/PRINT--------------------------------------------------\n            System.out.println(S1+\" \"+S2);\n            resultat.append(S1+\" \"+S2);\n            System.out.println(\"Finished testcase \" + tc + \", time = \" + (System.currentTimeMillis() - time));\n        }\n        \n    \/\/CLOSE----------------------------------------------------\n        out.print(resultat);\n        out.close(); sc.close();\n    }\n\n\n}"}
{"idx":"209","func":"class MushroomMonster {\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(new File(\"src\/in.txt\"));\n        PrintWriter out = new PrintWriter(\"out.txt\");\n\n        int t = in.nextInt();\n\n        for (int tc = 1; tc <= t; tc++) {\n            int n = in.nextInt();\n\n            int[] m = new int[n];\n            for (int i = 0; i < n; i++) {\n                m[i] = in.nextInt();\n            }\n\n            int y = 0;\n            int dif = 0;\n            for (int i = 1; i < n; i++) {\n                if (m[i] < m[i - 1]) {\n                    y += Math.abs(m[i] - m[i - 1]);\n                    if (Math.abs(m[i] - m[i-1]) > dif) {\n                        dif = Math.abs(m[i] - m[i-1]);\n                    }\n                }\n            }\n\n            double rate = (double) dif \/ (double) 10;\n            \n            int z = 0;\n            for (int i = 0; i < n-1; i++) {\n                z += Math.min(m[i], rate * 10);\n            }\n\n            out.println(\"Case #\" + tc + \": \" + y + \" \" + z);\n        }\n\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"210","func":"class A {\n\n    public static void main(String[] args) throws Exception {\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n        int T = Integer.parseInt(in.readLine());\n        for (int t = 1; t <= T; t++) {\n            int N = Integer.parseInt(in.readLine());\n            String[] data = in.readLine().split(\" \");\n            int[] M1 = new int[N];\n            for (int i = 0; i < N; i++)\n                M1[i] = Integer.parseInt(data[i]);\n            int[] M = M1;\n            int m = 0;\n            for (int i = 1; i < M.length; i++)\n                if (M[i] < M[i - 1])\n                    m += M[i - 1] - M[i];\n            int y = m;\n            int m1 = 0;\n            \n            double rate = 0;\n            for (int i = 1; i < M.length; i++) {\n                int diff = M[i - 1] - M[i];\n                if (diff > 0) {\n                    double r = diff \/ 10.0;\n                    if (r > rate)\n                        rate = r;\n                }\n            }\n            \n            for (int i = 1; i < M.length; i++)\n                m1 += Math.min(rate * 10, M[i - 1]);\n            int z = m1;\n            out.println(\"Case #\" + t + \": \" + y + \" \" + z);\n        }\n        out.close();\n    }\n}"}
{"idx":"211","func":"class MushroomMonster {\n    static String PATH = \"data\/gcj2015\/1a\/\", PROBLEM = \"A\", SIZE = \"large\",\n            ATTEMPT = \"0\";\n\n    public static void main(String[] args) throws NumberFormatException,\n            IOException {\n        String filename = PATH + PROBLEM + \"-\" + SIZE;\n        if (SIZE.equals(\"small\"))\n            filename += \"-attempt\" + ATTEMPT;\n        Scanner sc = new Scanner(new File(filename + \".in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(PATH + PROBLEM\n                + \"-\" + SIZE + \"-attempt\" + ATTEMPT + \".out\"));\n        int T = sc.nextInt();\n        sc.nextLine();\n        for (int t = 0; t < T; t++) {\n            int N = sc.nextInt();\n            int[] m = new int[N];\n            for (int n = 0; n < N; n++) {\n                m[n] = sc.nextInt();\n            }\n            \/\/ Strategy 1\n            long s1 = 0;\n            for (int n = 0; n < N - 1; n++) {\n                if (m[n] > m[n + 1])\n                    s1 += m[n] - m[n + 1];\n            }\n            \/\/ Strategy 2\n            \/\/ First find the max decrease\n            int maxDiff = 0;\n            for (int n = 0; n < N - 1; n++) {\n                if (m[n] - m[n + 1] > maxDiff)\n                    maxDiff = m[n] - m[n + 1];\n            }\n            \/\/ Then try eating\n            long s2 = 0;\n            for (int n = 0; n < N - 1; n++) {\n                if (m[n] > maxDiff) {\n                    \/\/ eat only max\n                    s2 += maxDiff;\n                } else {\n                    \/\/ eat the remaining\n                    s2 += m[n];\n                }\n            }\n            bw.write(\"Case #\" + (t + 1) + \": \" + s1 + \" \" + s2);\n            bw.newLine();\n        }\n        sc.close();\n        bw.close();\n    }\n}"}
{"idx":"212","func":"static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int numcase = sc.nextInt();\n        for(int i =0;i<numcase;i++){\n            int numti = sc.nextInt();\n            Queue<Integer> mushin1 = new LinkedList<Integer>();\n            Queue<Integer> mushin2 = new LinkedList<Integer>();\n            for(int j=0;j<numti;j++){\n                int mushtime = sc.nextInt();\n                mushin1.offer(mushtime);\n                mushin2.offer(mushtime);\n            }\n            int t1 = 0;\n            int t2 = 0;\n            int musha = mushin1.poll();\n            ArrayList<Integer> timediff = new ArrayList<Integer>();\n            \/\/timediff.add(musha);\n            while(mushin1.peek()!=null){\n                int mushb = mushin1.poll();\n                if(musha - mushb>=0){\n                    t1 = t1 + musha - mushb;\n                }\n                timediff.add(musha - mushb);\n                musha = mushb;\n            }\n            \n            \/\/Collections.sort(timediff);\n            \/\/int maxtd = timediff.get(0);\n            boolean lastflag;\n            int maxtd = Collections.max(timediff);\n            lastflag = maxtd==timediff.get(timediff.size()-1);\n            \/\/System.out.println(\"maxtd: \" +maxtd);\n            while(mushin2.peek()!=null){\n                int mushc = mushin2.poll();\n                if(mushin2.peek()==null){\n                    break;\n                }\n                if(mushc<=maxtd){\n                    t2 = t2 + mushc;\n                }\n                else{\n                    t2 = t2 + maxtd;\n                }\n            }\n            \/*\n            int shylvl = sc.nextInt();\n            String ppl = sc.next();\n            int inv = 0;\n            int standing = Integer.parseInt(ppl.substring(0,1));\n            for(int j=1;j<shylvl;j++){\n                int shyppl = Integer.parseInt(ppl.substring(j,j+1));\n                if(standing<j){\n                    inv = inv + j-standing;\n                    standing = j + shyppl;\n                }\n                else{\n                    standing = standing + shyppl;\n                }\n            }\n            int last = Integer.parseInt(ppl.substring(shylvl));\n            if(standing<shylvl){\n                inv = inv + shylvl-standing;\n                standing = shylvl + last;\n            }\n            else{\n                standing = standing + last;\n            }\n            *\/\n            System.out.println(\"Case #\"+(i+1)+\": \"+t1 + \" \" + t2);\n        }\n    }\n    \n}"}
{"idx":"213","func":"class p1 \n{\n  public static void main (String[]args)throws IOException\n  {\n    Scanner s=new Scanner (new File(\"A-large (1).in\"));\n    PrintWriter out=new PrintWriter(new FileWriter(\"out.txt\"));\n    \/\/Scanner s=new Scanner (new File(\"in.txt\"));\n    \n    int cases=s.nextInt();\n    for (int n=0;n<cases;n++)\n    {\n      int min1=0;\n      int min2=0;\n      int dif=0;\n      int k=s.nextInt();\n      int []plate=new int[k];\n      for (int x=0;x<k;x++)\n      {\n        plate[x]=s.nextInt();\n      }\n      for (int x=1;x<k;x++)\n      {\n        if (plate[x-1]>plate[x])\n        {\n          int temp=plate[x-1]-plate[x];\n          min1+=temp;\n          if (temp>dif)\n            dif=temp;\n        }\n      }\n      for (int x=0;x<k-1;x++)\n      {\n        min2+=Math.min(dif,plate[x]);\n      }\n      \n      \n      out.println (\"Case #\"+(n+1)+\": \"+min1+\" \"+min2);\n      \/\/System.out.println (\"Case: #\"+(n+1)+\": \"+min1+\" \"+min2);\n    }\n    out.close();\n  }\n}"}
{"idx":"214","func":"class A {\n\n    public static void main(String[] args) throws Exception {\n        Locale.setDefault(Locale.US);\n\n        Scanner in = new Scanner(new File(\"problem.in\"));\n        PrintStream out = new PrintStream(new File(\"problem.out\"));\n\n        int T = in.nextInt();\n        for (int test = 1; test <= T; test++) {\n            int n = in.nextInt();\n            int[] m = new int[n];\n\n            for (int i = 0; i < n; i++) {\n                m[i] = in.nextInt();\n            }\n\n            int min1 = 0;\n            for (int i = 1; i < n; i++) {\n                if (m[i] < m[i - 1]) {\n                    min1 += m[i - 1] - m[i];\n                }\n            }\n\n            int min2 = 0;\n            \n            int d = 0;\n            for (int i = 1; i < n; i++) {\n                if (m[i] < m[i - 1]) {\n                    if (m[i-1] - m[i] > d) {\n                        d = m[i-1] - m[i];\n                    }\n                }\n            }\n            \n            if (d > 0) {\n                for (int i = 1; i < n; i++) {\n                    min2 += Math.min(m[i-1], d);\n                }                \n            }\n\n            out.println(\"Case #\" + test + \": \" + min1 + \" \" + min2);\n        }\n    }\n}"}
{"idx":"215","func":"class MushroomMonster {\n    public static void main(String [] args) {\n        Scanner scanner = new Scanner(System.in);\n        int T = scanner.nextInt();\n        for (int tt =1; tt <=T;tt++) {\n            int N = scanner.nextInt();\n            int [] a  = new int[N];\n            for (int i=0;i<N;i++) a[i] = scanner.nextInt();\n            int f = 0;\n            int s = 0;\n            int max = 0;\n            for (int i=1;i<N;i++) {\n                int v = a[i -1] - a[i];\n                if (v > 0) f+=v;\n                max = Math.max(max,v);\n            }\n            for (int i=0;i<N-1;i++) {\n                int min = Math.min(a[i],max);\n                s +=min;\n            }\n            System.out.println(\"Case #\"+tt+\": \"+f+\" \"+s);\n        }\n\n    }\n}"}
{"idx":"216","func":"class A {\n    static BufferedReader in;\n    static PrintWriter out;\n\n    public static void main(String[] args) throws IOException {\n        in = new BufferedReader(new FileReader(new File(\n                \"\/Users\/yfo\/Downloads\/a2.in\")));\n        out = new PrintWriter(new FileWriter(new File(\n                \"\/Users\/yfo\/Downloads\/a2.out.in\")));\n\n        int T = Integer.parseInt(in.readLine());\n        for (int t = 0; t < T; t++) {\n            \n            int N = Integer.parseInt(in.readLine());\n            String[] tok = in.readLine().split(\" \");\n            int[] res = new int[tok.length];\n            for (int i1 = 0; i1 < tok.length; i1++) {\n                res[i1] = Integer.parseInt(tok[i1]);\n            }\n            int[] m = res;\n            \n            long first = 0;\n            for (int i=1;i<N;i++) {\n                if (m[i]<m[i-1]) first += m[i-1] - m[i];\n            }\n            \n            long max = 0;\n            for (int i=0;i<N-1;i++) {\n                if (m[i]>m[i+1]) {\n                    max = Math.max(max, m[i]-m[i+1]);\n                }\n            }\n            \n            \n            long second = 0;\n            for (int i=0;i<N-1;i++) {\n                if (i!=N-1) {\n                    second += Math.min(max, m[i]);\n                }\n                \n            }\n            \n            \n            out.println(\"Case #\" + (t + 1) + \": \" + first + \" \"+second);\n        }\n\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"217","func":"class First {\n    public static int[] tabela;\n    public static void main(String[] args) throws FileNotFoundException {\n        PrintWriter pr = new PrintWriter(\"neki.txt\");\n        Scanner sc = new Scanner(System.in);\n        \/\/pr.print(\"hello\");\n        int T = sc.nextInt();\n        for (int i = 0; i < T; i++) {\n            pr.print(\"Case #\" + (i+1) + \": \");\n            int st = sc.nextInt();\n            tabela = new int[st];\n            for (int j = 0; j < st; j++) {\n                tabela[j] = sc.nextInt();\n            }\n            int hrana = 0;\n            int trenutni = tabela[0];\n            for (int i1 = 1; i1 < tabela.length; i1++) {\n                if(trenutni > tabela[i1]){\n                    hrana += trenutni -tabela[i1];\n                }\n                trenutni = tabela[i1];\n            }\n            int a = hrana;\n            int max = 0;\n            for (int i1 = 0; i1 < tabela.length-1; i1++) {\n                int c = tabela[i1] - tabela[i1+1];\n                if(c > max){\n                    max= c;\n                }\n            }\n            int hrana1 = 0;\n            for (int i2 = 1; i2 < tabela.length; i2++) {\n                if(tabela[i2-1] <= max ){\n                    hrana1 += tabela[i2-1];\n                }\n                else\n                    hrana1 += max;\n            }\n            int b = hrana1;\n            pr.println(a + \" \" + b);\n            \n        }\n        sc.close();\n        pr.close();\n\n    }\n\n}"}
{"idx":"218","func":"class A\n{\n    public static void main(String args[])\n    {\n        Scanner scan = new Scanner(System.in);\n\n        int T = scan.nextInt();\n        for(int ca=1;ca <= T;ca++)\n        {\n            int N = scan.nextInt();\n            int[] a = new int[N];\n            for(int i=0;i < N;i++)\n                a[i] = scan.nextInt();\n\n            int y = 0;\n            for(int i=1;i < N;i++)\n                if(a[i] < a[i-1])\n                    y += a[i-1] - a[i];\n            \n            int r = 0;\n            for(int i=1;i < N;i++)\n                r = Math.max(r, a[i-1] - a[i]);\n\n            int z = 0;\n            for(int i=0;i < N-1;i++)\n                z += Math.min(a[i], r);\n\n\n            System.out.println(\"Case #\" + ca + \": \" + y + \" \" + z);\n        }\n    }\n}"}
{"idx":"219","func":"class P1\n{\n  public static void main (String[] args) throws Exception\n  {\n    Scanner in = new Scanner(new File(\"A-large.in\"));\n    \/\/Scanner in = new Scanner(System.in);\n    PrintWriter out = new PrintWriter(new FileWriter(\"out.txt\"));\n    int n = in.nextInt();\n    for(int t =0; t<n; t++)\n    {\n      int num = in.nextInt();\n      int[] intervals = new int[num];\n      for (int x =0; x< num; x++)\n        intervals[x] = in.nextInt();\n      int last = intervals[0];\n      int ans1 = 0;\n      for (int x =1; x< num; x++)\n      {\n        if (intervals[x] < last) ans1+= (last-intervals[x]);\n        last = intervals[x];\n      }\n      \n      int largest = 0;\n      last = intervals[0];\n      for (int x =1; x< num; x++)\n      {\n        if (intervals[x] < last) largest = Math.max(last-intervals[x],largest);\n        last = intervals[x];\n      }\n      System.out.println(largest);\n      last = intervals[0];\n      int ans2 = 0;\n      for (int x =1; x<num;x++)\n      {\n        if (intervals[x]>=0) ans2+=Math.min(largest,last);\n        last = intervals[x];\n      }\n      \n      \/\/ second part. constant eating speed\n      \n      String ans = \"\"+ans1+\" \" + ans2;\n      out.println(\"Case #\" + (t+1) + \": \" + ans);\n      System.out.println(\"Case #\" + (t+1) + \": \" + ans);\n    }\n    in.close();\n    out.close();\n  }\n}"}
{"idx":"220","func":"class A {\n\n    int[] input;\n\n    static Scanner in;\n    static PrintStream out;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        out = new PrintStream(\"out.txt\");\n        in = new Scanner(new File(args[0]));\n\n        int N = in.nextInt();\n        in.nextLine();\n\n        for (int i = 0; i < N; i++) {\n            int N1 = in.nextInt();\n            int[] mushrooms = new int[N1];\n            \n            for (int i1 = 0; i1 < N1; i1++) {\n                int number = in.nextInt();\n                mushrooms[i1] = number;\n            }\n            A r = new A(mushrooms);\n            int firstSolution = 0;\n            int secondSolution = 0;\n            int bestRate = 0;\n            \n            for (int i2 = 1; i2 < r.input.length; i2++) {\n                if (r.input[i2] < r.input[i2 - 1]) {\n                    firstSolution += r.input[i2 - 1] - r.input[i2];\n                    bestRate = Math.max(r.input[i2 - 1] - r.input[i2], bestRate);\n                }\n            }\n            \n            for (int i1 = 0; i1 < r.input.length - 1; i1++) {\n                secondSolution += Math.min(bestRate, r.input[i1]);\n            }\n            \n            int[] solution = new int[]{firstSolution, secondSolution};\n            \n            out.printf(\"Case #%d: %d %d\\n\", i + 1 , solution[0], solution[1]);\n        }\n    }\n\n    public A(int[] input) {\n        this.input = input;\n    }\n\n}"}
{"idx":"221","func":"class Mushroom {\n\n    public static void main(String[] args) throws IOException{\n        String filename = args[0];\n        \/\/String filename = \"A-input.in.txt\";\n        BufferedReader in = new BufferedReader(new FileReader(filename));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"A-ans.txt\")));\n        StringTokenizer st = new StringTokenizer(in.readLine());\n        int numCase = Integer.valueOf(st.nextToken());\n        for(int c = 1;c<=numCase; c++) {\n            st = new StringTokenizer(in.readLine());\n            int N = Integer.valueOf(st.nextToken());\n            st = new StringTokenizer(in.readLine());\n            int[] input = new int[N];\n            for(int i = 0;i<N;i++) {\n                input[i] = Integer.valueOf(st.nextToken());\n            }\n            int largestGap = 0;\n            long sum1 = 0;\n            for (int i = 1; i < input.length; i++) {\n                if (input[i - 1] > input[i]) {\n                    int gap = input[i - 1] - input[i];\n                    if (gap > largestGap) {\n                        largestGap = gap;\n                    }\n                    sum1 += gap;\n                }\n            }\n            \n            long sum2 = 0;\n            for (int j = 0; j < input.length - 1; j++) {\n                if (input[j] < largestGap) {\n                    sum2 += input[j];\n                } else {\n                    sum2 += largestGap;\n                }\n            }\n            long[] solution = new long[]{sum1,sum2};\n            out.println(\"Case #\"+c+\": \"+solution[0]+\" \"+solution[1]);\n        }\n        out.close();\n        in.close();\n\n    }\n}"}
{"idx":"222","func":"class Mushroom{\n    int testNum, n, answer1, answer2, maxGap;\n    int[] myList;\n    boolean activate;\n    public static void main(String[] args){\n        try{\n            Mushroom myMushroom = new Mushroom();\n            int i, j, testcase;\n            Integer myInt;\n            try{\n                Scanner fin = new Scanner(new File(\"A-large.in\"));\n                BufferedWriter fout = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"out.txt\")));\n                myMushroom.testNum = fin.nextInt();\n                for (testcase = 1; testcase <= myMushroom.testNum; testcase++){\n                    myMushroom.n = fin.nextInt();\n                    myMushroom.myList = new int[myMushroom.n];\n                    myMushroom.activate = false;\n                    myMushroom.maxGap = 0;\n                    for (i = 0; i < myMushroom.n; i++){\n                        myMushroom.myList[i] = fin.nextInt();\n                        if (i > 0 && myMushroom.myList[i] < myMushroom.myList[i-1]){\n                            myMushroom.activate = true;\n                            if (myMushroom.myList[i-1] - myMushroom.myList[i] > myMushroom.maxGap)\n                                myMushroom.maxGap = myMushroom.myList[i-1] - myMushroom.myList[i];\n                        }\n                    }\n                    myMushroom.answer1 = myMushroom.answer2 = 0;\n                    if (!myMushroom.activate){\n                        myMushroom.answer1 = myMushroom.answer2 = 0;\n                    }\n                    else\n                    {\n                        for (i = 1; i < myMushroom.n; i++){\n                            if (myMushroom.myList[i-1] > myMushroom.myList[i]){\n                                myMushroom.answer1 += (myMushroom.myList[i-1] - myMushroom.myList[i]);\n                            }\n                            if (myMushroom.myList[i-1] < myMushroom.maxGap){\n                                myMushroom.answer2 += myMushroom.myList[i-1];\n                            }\n                            else\n                            {\n                                myMushroom.answer2 += myMushroom.maxGap;\n                            }\n                        }\n                    }\n                    myInt = testcase;\n                    fout.write(\"Case #\"+myInt.toString()+\": \");\n                    myInt = myMushroom.answer1;\n                    fout.write(myInt.toString()+\" \");\n                    myInt = myMushroom.answer2;\n                    fout.write(myInt.toString());\n                    fout.newLine();\n                }\n                fin.close();\n                fout.close();\n            }catch (Exception e){\n                \n            }\n        }catch (Exception e){\n            \n        }\n    }\n}"}
{"idx":"223","func":"class MushroomMaster {\n\n    private int n;\n    private long m[];\n\n    public MushroomMaster(Scanner sr) {\n        n = sr.nextInt();\n        m = new long[n];\n        for (int i = 0; i < n; ++i) {\n            m[i] = sr.nextInt();\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            Scanner sc = new Scanner(new File(\"src\/p1\/input2.txt\"));\n            long cases = Integer.valueOf(sc.nextLine());\n            for (long c = 0; c < cases; c++) {\n                System.out.print(\"Case #\" + (c + 1) + \": \");\n                MushroomMaster r = new MushroomMaster(sc);\n                long ans[] = new long[2];\n                long maxDiff = 0;\n                ans[0] = 0;\n                for (int i = 1; i < r.m.length; ++i) {\n                    if (r.m[i] < r.m[i - 1]) {\n                        ans[0] += r.m[i - 1] - r.m[i];\n                        maxDiff = (maxDiff < r.m[i - 1] - r.m[i]) ? r.m[i - 1] - r.m[i] : maxDiff;\n                    }\n                }\n                ans[1] = 0;\n                for (int i = 0; i < r.m.length - 1; ++i) {\n                    ans[1] += (maxDiff > r.m[i]) ? r.m[i] : maxDiff;\n                }\n                System.out.println(ans[0] + \" \" + ans[1]);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"224","func":"class Main\n{\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = Files.newBufferedReader(Paths.get(\"A-large.in\", args), Charset.defaultCharset());\n\/\/        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        System.setOut(new PrintStream(Files.newOutputStream(Paths.get(\"output.out\"))));\n\n        final int CASES = Integer.parseInt(br.readLine());\n        String line;\n\n        for (int cs = 0; cs < CASES; cs++)\n        {\n            line = br.readLine();\n            \/\/final int A = Integer.parseInt(line.substring(0, space));\n            \/\/final int B = Integer.parseInt(line.substring(space + 1));\n\n            final int N = Integer.parseInt(line);\n            int[] arr = new int[N];\n            int j = 0;\n            int accumulator = -1;\n            boolean sign = true; \/\/ can be surely done without this\n            for (char ch : br.readLine().toCharArray())\n                if (ch == '-')\n                {\n                    accumulator = 0;\n                    sign = false;\n                }\n                else if (ch < '0' || ch > '9')\n                {\n                    if (accumulator != -1)\n                    {\n                        arr[j] = sign ? accumulator : -accumulator;\n                        accumulator = -1;\n                        sign = true;\n                        j++;\n                    } \/\/ we found a new digit\n                }\n                else\n                    accumulator = accumulator == -1\n                        ? (ch - '0')\n                        : accumulator * 10 + (ch - '0');\n            if (accumulator != -1)\n                arr[j++] = sign ? accumulator : -accumulator;\n            \n            \n            \n\n            \/\/        System.err.println(Arrays.toString(arr));\n                    int case1 = 0;\n                    int max = 0;\n                    for(int i = 1; i < arr.length; i++) {\n                        int diff = arr[i - 1] - arr[i];\n                        if(diff > 0)\n                            case1 += diff;\n                        if(diff > max)\n                            max = diff;\n                    }\n            \/\/        System.err.println(\"max \"+max);\n                    \n                    int case2 = 0;\n                    for(int i = 0; i < arr.length - 1; i++)\n                        if(arr[i] < max)\n                            case2 += arr[i];\n                    else\n                            case2 += max;\n                    \n                    String msg = Integer.toString(case1) + ' ' + Integer.toString(case2);\n                    System.out.println(\"Case #\" + (cs + 1) + \": \" + msg);\n            \/\/br.readLine();\n        }\n    }\n}"}
{"idx":"225","func":"class A {\n\n    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\aschonfe\\\\Desktop\\\\tmp.out\"));\n        String firstLine = scan.nextLine();\n        Boolean isFile = !Character.isDigit(firstLine.charAt(0));\n        int T;\n        if(isFile){\n            scan = new Scanner(new FileReader(firstLine));\n            T = scan.nextInt();\n        }else{\n            T = Integer.parseInt(firstLine);\n        }\n        for(int t=1;t<=T;t++){\n            int N = scan.nextInt();\n            int[] m = new int[N];\n            \n            for(int n=0;n<N;n++){\n                m[n] = scan.nextInt();\n            }\n            \n            \/\/method 1\n            int method1 = 0;\n            int prev = m[0];\n            for(int n=0;n<N;n++){\n                if(m[n] > prev){\n                    prev = m[n];\n                }else{\n                    method1 += prev - m[n];\n                    prev = m[n];\n                }\n            }\n            \n            \/\/method 2\n            int rate = 0;\n            for(int n=1;n<N;n++){\n                if((m[n-1] - m[n]) > rate){\n                    rate = m[n-1] - m[n];\n                }\n            }\n            int method2 = 0;\n            for(int n=0;n<N-1;n++){\n                if(m[n] > rate){\n                    method2 += rate;\n                }else{\n                    method2 += m[n];\n                }\n            }\n\n            System.out.printf(\"Case #%d: %d %d%n\", t, method1, method2);\n            out.write(String.format(\"Case #%d: %d %d%n\", t, method1, method2));\n        }\n        if(isFile){\n            scan.close();\n        }\n        out.close();\n    }\n}"}
{"idx":"226","func":"class CodeJam2015Round1A {\n    \n    \n    public static void main(String[] args) throws IOException {\n        File f = new File(\"input.txt\");\n        FileInputStream fis = new FileInputStream(f);\n        \n        \/\/Construct BufferedReader from InputStreamReader\n        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        \n        ArrayList<String> stringRows = new ArrayList<>();\n        String line;\n        while ((line = br.readLine()) != null) {\n            stringRows.add(line);\n        }\n        br.close();\n        rows = stringRows;\n        int totProblems = Integer.parseInt(rows.get(curRow++));\n        for (int curProblem = 1; curProblem <= totProblems; curProblem++) {\n            int numTimes = Integer.parseInt(rows.get(curRow++));\n            String[] mushroomCountsStrs = rows.get(curRow++).split(\" \");\n            List<Integer> mushCounts = new ArrayList<>();\n            for (String count : mushroomCountsStrs) {\n                mushCounts.add(Integer.parseInt(count));\n            }\n            int totEaten = 0;\n            Integer lastCount = null;\n            for (Integer mushCount : mushCounts) {\n                if (lastCount != null) {\n                    if (lastCount > mushCount) {\n                        totEaten += lastCount - mushCount;\n                    }\n                }\n                lastCount = mushCount;\n            }\n            int anyRateSol = totEaten;\n            int minRate = 0;\n            Integer lastCount1 = null;\n            for (Integer mushCount2 : mushCounts) {\n                if (lastCount1 != null) {\n                    if (lastCount1 > mushCount2) {\n                        minRate = Math.max(minRate, lastCount1 - mushCount2) ;\n                    }\n                }\n                lastCount1 = mushCount2;\n            }\n            \n            int totEaten1 = 0;\n            lastCount1 = null;\n            for (Integer mushCount1 : mushCounts) {\n                if (lastCount1 != null) {\n                    totEaten1 += Math.min(lastCount1, minRate);\n                }\n                lastCount1 = mushCount1;\n            }\n            int constRateSol = totEaten1;\n            \n            System.out.println(\"Case #\" + curProblem +\": \" + anyRateSol + \" \" + constRateSol);\n        }\n    }\n    \n    private static int curRow = 0;\n    private static ArrayList<String> rows;\n\n}"}
{"idx":"227","func":"static void main(String[]args)throws IOException\n    {\n        BufferedReader br = new BufferedReader(new FileReader(\"E:\\\\input.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"E:\\\\output.txt\"));\n        int T = Integer.parseInt(br.readLine());\n        for(int i=1;i<=T;i++)\n        {\n            pw.print(\"Case #\"+i+\": \");\n            N = Integer.parseInt(br.readLine());\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            for(int j=0;j<N;j++)\n            a[j]= Integer.parseInt(st.nextToken());\n            int ans=0;\n            int i1=0,j=1;\n            while(j<=N-1)\n            {\n                if(a[j] < a[i1])\n                {\n                    ans+=a[i1]-a[j];\n                    maxDif = Math.max(maxDif,a[i1]-a[j]);\n                }\n                i1++;\n                j++;\n            }\n            int x = ans;\n            int ans1 = 0;\n            for(int i2=0;i2<N-1;i2++)\n            {\n                ans1+=Math.min(a[i2],maxDif);\n            }\n            int y = ans1;\n            pw.println(x+\" \"+y);\n            maxDif=0;\n        }\n        pw.close();\n    }\n}"}
{"idx":"228","func":"class F {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner s=new Scanner(new InputStreamReader(System.in));\n        int T=s.nextInt();\n        s.nextLine();\n        \n        for(int i=0;i<T;i++)\n        {\n            int m=s.nextInt();\n            s.nextLine();\n            int[] ints=new int[m];\n            int max=0;\n            int smax=0;\n            for(int j=0;j<m;j++)\n            {\n                ints[j]=s.nextInt();\n            }\n\n            int rate=0;\n            \n            \n            for(int k=0;k<m-1;k++)\n            {\n                if(ints[k+1]<ints[k])\n                {\n                    max=ints[k];\n                    smax=ints[k+1];\n                    if(rate<(max-smax))\n                    {\n                        rate=max-smax;\n                    }\n                }\n            }\n            if(rate<0)\n                rate=0;\n        \n            int count2=0;\n            \/\/System.out.println(\"rate\"+rate);\n            for(int k=0;k<m-1;k++)\n            {\n                \/\/int gap=ints[k]-ints[k+1];\n                \/\/if(gap>0)\n                \/\/{\n                \n                    int b=0;\n                    if(ints[k]>=0)\n                        {\n                        if(ints[k]>rate)\n                            b+=rate;\n                        else\n                            b+=ints[k];\n                        }\n                    count2+=b;\n                    \/\/System.out.println(\"b>\"+b);\n                \/\/}\n                \n            }\n\n            \n            s.nextLine();\n            \n            \/\/1\n            int count=0;\n            for(int k=m-1;k>0;k--)\n            {\n                int a=0;\n                if((ints[k-1]-ints[k])>0)\n                    a=(ints[k-1]-ints[k]);\n                count+=a;\n                \/\/System.out.println(a);\n            }\n            \n        \n\/\/        System.out.println(smax+\",\"+max);\n        \n        System.out.println(\"Case #\"+(i+1)+\": \"+count+\" \"+count2);\n        }\n        }\n\n}"}
{"idx":"229","func":"class MushroomMonster {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int testCases = in.nextInt();\n        int testCaseNumber = 1;\n        while(testCaseNumber <= testCases){\n            int N = in.nextInt();\n            int[] array = new int[N];\n            for(int i=0; i<N; i++){\n                array[i] = in.nextInt();\n            }\n            int minDonuts = 0;\n            for(int i1=1; i1<N; i1++){\n                if(array[i1] < array[i1-1]){\n                    minDonuts = minDonuts + array[i1-1] - array[i1];\n                }\n            }\n            int donuts1 = minDonuts;\n            int maxDifference = -1;\n            for(int i=1; i<N; i++){\n                if(array[i] <= array[i-1]){\n                    if(array[i-1]-array[i] > maxDifference){\n                        maxDifference = array[i-1]-array[i];                    \n                    }\n                }\n            }\n            int donutRate = maxDifference;\n            int minDonutsEaten = 0;\n            for(int i=0; i<N-1; i++){\n                if(array[i] < donutRate){\n                    minDonutsEaten = minDonutsEaten + array[i];\n                }else{\n                    minDonutsEaten = minDonutsEaten + donutRate;\n                }\n            }\n            int donuts2 = minDonutsEaten;\n            System.out.println(\"Case #\"+testCaseNumber+\": \"+donuts1+\" \"+donuts2);\n            testCaseNumber++;\n        }\n        in.close();\n    }\n}"}
{"idx":"230","func":"class ProblemA {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n\n        \/\/String filenameInput = \"A-sample.in\";\n        \/\/String filenameOutput = \"A-sample.out\";\n        \n        \/\/String filenameInput = \"A-small-attempt0.in\";\n        \/\/String filenameOutput = \"A-small-attempt0.out\";\n        \n        \n        String filenameInput = \"A-large.in\";\n        String filenameOutput = \"A-large.out\";\n\n        Class currentClass = ProblemA.class;\n        try {\n\n            String path = \"src\/\"\n                    + currentClass.getPackage().getName().replace(\".\", \"\/\");\n            BufferedReader input = new BufferedReader(new FileReader(new File(\n                    path + \"\/\" + filenameInput)));\n            BufferedWriter output = new BufferedWriter(new FileWriter(new File(\n                    path + \"\/\" + filenameOutput)));\n            int numOfTestcases = Integer.parseInt(input.readLine());\n            \/\/ System.out.println(\"Number of Testcases: \" + numOfTestcases);\n            for (int i = 0; i < numOfTestcases; i++) {\n                System.out.println(\"Testnumber : \" + i);\n                int minimum = 0;\n                int constantSpeedMinimum = 0;\n                int numberOfIntervals = Integer.parseInt(input.readLine());\n                String[] inputStringArray = input.readLine().split(\" \");\n                int[] numOfMushrooms = new int[numberOfIntervals];\n                for (int j=0;j<numberOfIntervals;j++) {\n                    numOfMushrooms[j] = Integer.parseInt(inputStringArray[j]);\n                }\n                int speed = 0;\n                for(int j=0;j<numberOfIntervals-1;j++) {\n                    minimum += Math.max(0, numOfMushrooms[j]-numOfMushrooms[j+1]);\n                    speed  = Math.max(speed, numOfMushrooms[j]-numOfMushrooms[j+1]);\n                }\n                System.out.println(speed);\n                for(int j=0;j<numberOfIntervals-1;j++) {\n                    constantSpeedMinimum += Math.min(speed, numOfMushrooms[j]);\n                    System.out.println(constantSpeedMinimum +\" before \" + j);\n                }\n                \n                String outputString = \"Case #\"\n                        + (i + 1)\n                        + \": \"\n                        + minimum + \" \" + constantSpeedMinimum;\n                System.out.println(outputString);\n\n                if (i + 1 != numOfTestcases) {\n                    outputString += \"\\n\";\n                }\n                output.write(outputString);\n\n            }\n\n            output.flush();\n            output.close();\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        } \n\n    }\n\n}"}
{"idx":"231","func":"class Mushroom {\n\n    public static void main (String [] args) throws IOException{\n\n        \/\/Timing\n        \/\/long s = System.currentTimeMillis ();\n\n        \/\/Set up the reader and printer\n        BufferedReader in = new BufferedReader (new FileReader (\"A-large.in\"));\n        PrintWriter out = new PrintWriter (new BufferedWriter (new FileWriter (\"OUT.txt\")));\n        int noCases = Integer.parseInt(in.readLine());\n        \n        \/\/Solve the cases\n        for (int caseNo = 1; caseNo <= noCases; caseNo++){\n            \n            int n = Integer.parseInt(in.readLine());\n            String [] data = in.readLine().split(\" \");\n            int [] m = new int [n];\n            for (int i = 0; i < n; i++)\n                m[i] = Integer.parseInt(data[i]);\n            \n            \/\/Get min at any rate\n            int min1 = 0;\n            for (int i = 1; i < n; i++)\n                if (m[i]-m[i-1] < 0)\n                    min1 += m[i-1]-m[i];\n            \n            \/\/Get min at constant rate\n            int maxDifference = 0;\n            for (int i = 1; i < n; i++)\n                maxDifference = Math.max(maxDifference, m[i-1] - m[i]);\n            \n            int min2 = 0;\n            for (int i = 0; i < n-1; i++)\n            {\n                if (m[i] < maxDifference)\n                    min2+=m[i];\n                else\n                    min2+=maxDifference;\n            }\n            \n            String answer = String.format(\"%d %d\", min1, min2);\n            out.println(String.format(\"Case #%d: %s\", caseNo, answer));\n            out.flush();\/\/So I can see how my program is doing\n        }\n\n        \/\/Close the files\n        in.close();\n        out.close();\n\n        \/\/Timing\n        \/\/long e = System.currentTimeMillis();\n        \/\/System.out.println((e - s) \/ 1000.0);\n\n        \/\/Terminate the program\n        System.exit(0);\n\n    } \/\/Main method\n}"}
{"idx":"232","func":"class A {\n\n  static final String FILENAME = \"input\";\n  static final String IN = FILENAME + \".in\";\n  static final String OUT = \"output.out\";\n  Scanner sc;\n  BufferedWriter out;\n     \n  static final int MAXP = 1000;\npublic int absVal =0;\n  public static void main(String args[]) throws Exception {\n    A r = new A();\n    r.sc = new Scanner(new File(A.IN));\n    r.out = new BufferedWriter(new FileWriter(A.OUT));\n    int t = Integer.parseInt(r.sc.nextLine());\n    for (int i = 1; i <= t; i++) {\n      r.out.write(\"Case #\" + i + \": \");\n      int a=0;\n    int b=0;\n    r.absVal=0;\n    int d = Integer.parseInt(r.sc.nextLine());\n    String[] tmp = r.sc.nextLine().split(\" \");\n    int[] tmpInt = new int[tmp.length];\n    for (int i1 = 0; i1 < d; i1++) {\n    \n        tmpInt[i1] = Integer.parseInt(tmp[i1]);\n    }\n    int x = tmpInt[0];\n      int a1=0;\n      for(int i1=1;i1<tmpInt.length;i1++)\n      {\n          if (tmpInt[i1]<x)\n          {\n              a1 = a1 + x - tmpInt[i1];\n              r.absVal = Math.max(r.absVal, Math.abs(x-tmpInt[i1]));\n          }\n          x = tmpInt[i1]; \n      }\n    a = a1;\n    int ans=0;\n      for(int i1=0;i1<tmpInt.length -1;i1++)\n      {\n          if (tmpInt[i1]<=r.absVal)\n          {\n              ans = ans + tmpInt[i1];\n          }\n          else if(tmpInt[i1]>r.absVal)\n          {\n              ans = ans + r.absVal;\n          }\n      }\n    b = ans;\n    r.out.write(Integer.toString(a) + \" \" +Integer.toString(b));\n    r.out.newLine();\n    r.out.flush();\n    }\n    r.sc.close();\n    r.out.close();\n  }\n}"}
{"idx":"233","func":"class Main {\n\n    public static void main(String[] args) {\n        try {\n            Scanner scanner = new Scanner(new FileInputStream(\"input.txt\"));\n            scanner.useLocale(Locale.ENGLISH);\n            BufferedWriter out = new BufferedWriter(new FileWriter(\"output.txt\"));\n            int tests = scanner.nextInt();\n            for (int i = 0; i < tests; i++) {\n                int n = scanner.nextInt();\n                int[] values = new int[n];\n                for (int j = 0; j < values.length; j++) {\n                    values[j] = scanner.nextInt();\n                }\n                int minSlope = 0;\n                int firstMin = 0;\n                for (int j = 0; j < values.length - 1; j++) {\n                    int delta = values[j]-values[j+1];\n                    if (delta > 0) {\n                        firstMin += delta;\n                        minSlope = Math.max(minSlope, delta);\n                    }\n                }\n                int secondMin = 0;\n\n                for (int j = 0; j < values.length - 1; j++) {\n                    secondMin += Math.min(values[j], minSlope);\n                }\n                \n                out.write(\"Case #\" + (i + 1) + \": \" + firstMin + \" \" + secondMin + \"\\n\");\n            }\n            out.close();\n        } catch (FileNotFoundException e) {\n            \/\/ ????\n        } catch (IOException e) {\n            \/\/ ????\n        }\n    }\n}"}
{"idx":"234","func":"class MashroomMonster {\n    public static void main(String argv[]) {\n        Scanner scanner = new Scanner(System.in);\n        int T = scanner.nextInt();\n        for (int t = 0; t < T; t++) {\n            int n = scanner.nextInt();\n            int[] m = new int[n];\n            for (int i = 0; i < n; i++) {\n                m[i] = scanner.nextInt();\n            }\n            int res1 = 0;\n            int res2 = 0;\n            int maxd = 0;\n            for (int i = 0; i < n - 1; i++) {\n                int d = m[i] - m[i + 1];\n                if (d > 0) {\n                    res1 += d;\n                }\n                maxd = Math.max(maxd, d);\n            }\n            for (int i = 0; i < n - 1; i++) {\n                res2 += Math.min(m[i], maxd);\n            }\n            System.out.println(\"Case #\" + (t + 1) + \": \" + res1 + \" \" + res2);\n        }\n    }\n}"}
{"idx":"235","func":"class Mushrooms {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"in\"));\n        PrintWriter out = new PrintWriter(\"out\");\n        int T = in.nextInt();\n        \n        for (int r = 1; r <= T;r++) {\n            int n = in.nextInt();\n            int prev = 0;\n            int curr = 0;\n            int f = 0;\n            int s = 0;\n            int[] arr = new int[n];\n            int maxDiff = 0;\n            for (int i = 0;i < n;i++) {\n                prev = curr;\n                curr = in.nextInt();\n\n                int diff = prev - curr;\n                if (maxDiff < diff)\n                    maxDiff = diff;\n                \n                if (prev > curr) {\n                    f += diff;\n                }\n                \n                arr[i] = curr;\n                \n                prev = curr;\n            }\n            \n            for (int i = 0; i < arr.length-1;i++) {\n\/\/                System.out.println(s);\n                s += maxDiff > arr[i] ? arr[i] : maxDiff;\n            }\n            System.out.println(\"Case #\" + r + \": \" + f + \" \" + s);\n            out.println(\"Case #\" + r + \": \" + f + \" \" + s);\n        }\n        \n        out.close();\n        in.close();\n    }\n\n}"}
{"idx":"236","func":"class Mushroom\n{\n    public static void main (String[] args) throws IOException\n    {\n        Scanner scan = new Scanner(new File(\"A-large.in\"));\n        PrintWriter out = new PrintWriter (new BufferedWriter(new FileWriter(\"A-large.out\")));\n        \n        int t = scan.nextInt();\n        \n        for (int i=1; i<=t; i++)\n        {\n            int n = scan.nextInt();\n            int ans1 = 0, rate = 0, ans2 = 0;\n            int[] m = new int[n];\n            \n            for (int j=0; j<n; j++)\n                m[j] = scan.nextInt();\n                \n            for (int j=1; j<n; j++)\n            {\n                if (m[j]<m[j-1])\n                {\n                    ans1 += (m[j-1]-m[j]);\n                    rate = Math.max(rate, m[j-1]-m[j]);\n                }\n            }\n            \n            for (int j=0; j<n-1; j++)\n                ans2 += Math.min(rate, m[j]);\n                \n            out.println(\"Case #\" + i + \": \" + ans1 + \" \" + ans2);\n        }\n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"237","func":"class Main {\n\n    Scanner             sc       = new Scanner(getClass().getResourceAsStream(IN));\n    static final String FILENAME = \"A-large\";\n    static final String IN       = FILENAME + \".in\";\n    static final String OUT      = FILENAME + \".out\";\n    PrintStream         out      = System.out;\n\n    public static void main(String args[]) throws Exception {\n        Main r = new Main();\n        r.out = new PrintStream(new FileOutputStream(Main.OUT));\n        int t = r.sc.nextInt();\n        \n        for (int i = 1; i <= t; i++) \n        {\n            r.out.print(\"Case #\" + i + \": \");\n            int met1 = 0;\n            int met2 = 0;\n            \n            \n            int nInter = r.sc.nextInt();\n            \/\/int[] diferencias = new int[nInter-1];\n            int[] hongos = new int[nInter];\n            \n            if(nInter>0)\n            {\n                \n                int first = r.sc.nextInt();\n                hongos[0] = first;\n                int second = 0;\n                \n                int maxDifer = 0;\n                int difer = 0;\n                \n            \n                for (int i1 = 0; i1 < nInter-1; i1++) \n                {\n                    second = r.sc.nextInt();\n                    hongos[i1+1] = second;\n                    \n                    if(second < first)\n                    {\n                        difer = (first - second);\n                        \/\/diferencias[i] = difer;\n                        \n                        met1 += difer;\n                        \n                        if(difer > maxDifer)\n                        {\n                            maxDifer = difer;\n                        }\n                        \n                    }\n                    \n                    first = second;\n                }\n                \n                for (int i2 = 0; i2 < nInter-1; i2++) \n                {\n                    if(hongos[i2] < maxDifer)\n                    {\n                        met2+=hongos[i2];\n                    }\n                    else\n                    {\n                        met2+=maxDifer;\n                    }\n                    \/\/out.println(diferencias[i]);\n                }\n                \n                \/\/out.println(maxDifer);\n            \n            }\n            r.out.println(met1 + \" \" + met2);\n        }\n        \n        r.sc.close();\n        r.out.close();\n    }\n\n}"}
{"idx":"238","func":"class Mushroom {\n    public static void main(String args[]){\n        try{\n            System.setIn(new FileInputStream(\"C:\\\\Users\\\\Kumar BN\\\\Desktop\\\\A-large.in\"));\n            System.setOut(new PrintStream(\"C:\\\\Users\\\\Kumar BN\\\\Desktop\\\\outputmushrromlarge.txt\"));\n        }\n        catch(Exception e)\n        {\n            System.out.print(\"asdasd\");\n        }\n        int t;\n        Scanner in=new Scanner(System.in);\n        t=in.nextInt();\n        for(int i=0;i<t;i++){\n            int n,max=0;\n            n=in.nextInt();\n            int a[]=new int[n];\n            for(int j=0;j<n;j++){\n                a[j]=in.nextInt();\n                if(max<a[j])\n                    max=a[j];\n            }\n            int sum=0;\n            for(int j=0;j<n-1;j++){\n                if(a[j]>a[j+1]){\n                    sum=sum+(a[j]-a[j+1]);\n                }\n            }\n            int minimum=0;int sum1=0,mushrooms=0,runningsum=0;\n            \/*for(int k=1;k<max;k++){\n                for(int j=0;j<n;j++){\n                    mushrooms=0;\n                    for(int clock=0;clock<10;clock++){\n                        mushrooms=mushrooms+1*k;\n                    }\n                    if(mushrooms<=a[j])\n                        runningsum=runningsum+mushrooms;\n                    else{\n                        if(minimum>runningsum)\n                            minimum=runningsum;\n                    }    \n                }\n                runningsum=0;\n            }*\/\n            int maxdifference=0;int difference;\n            for(int k=0;k<n-1;k++){\n                if(a[k]>a[k+1]){\n                difference=a[k]-a[k+1];\n                \/\/System.out.println(\"Difference=\"+difference);\n                if(Math.abs(difference)>maxdifference)\n                    maxdifference=difference;\n                }\n            }\n            \/\/System.out.println(\"Max difference=\"+maxdifference);\n            \/*if(maxdifference<0){\n                int rate=-(maxdifference);\n                for(int k=0;k<n;k++){\n                    if((rate)>=a[k])\n                        runningsum=runningsum+a[k];\n                    else{\n                        runningsum=runningsum+rate;\n                        break;\n                }\n                minimum=runningsum;\n                runningsum=0;\n            }\n            }*\/\n            \/\/else{\n                int rate=Math.abs(maxdifference);\n                \/\/System.out.println(\"The rate is\"+rate);\n                for(int k=0;k<n-1;k++){\n                    if((rate)>=a[k])\n                        runningsum=runningsum+a[k];\n                    else{\n                        runningsum=runningsum+(rate);\n                        \/\/break;\n                }\n            }\n            minimum=runningsum;\n            runningsum=0;\n        \/\/}\n        System.out.println(\"Case #\"+(i+1)+\": \"+sum+\" \"+minimum);\n    }\n}\n}"}
{"idx":"239","func":"class A\n{\n    public static void main (String [] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int noCase = sc.nextInt();\n        for(int ind =1; ind<=noCase; ind++)\n        {\n            int M = sc.nextInt();\n            long [] arr = new long[M];\n            for(int i=0; i<M; i++)\n                arr[i] = sc.nextLong();\n            long soln = 0L;\n            for(int i=0; i<arr.length-1; i++)\n                if(arr[i]>arr[i+1])\n                    soln+=arr[i]-arr[i+1];\n            long m1 = soln;\n            long soln1 = 0L;\n            long maxD = 0L;\n            for(int i=0; i<arr.length-1; i++)\n                maxD = Math.max(arr[i]-arr[i+1], maxD);\n            for(int i=0; i<arr.length-1; i++)\n                soln1+=Math.min(maxD, arr[i]);\n            long m2 = soln1;\n            System.out.printf(\"Case #%d: %d %d\\n\", ind, m1, m2);\n        }\n    }\n\n}"}
{"idx":"240","func":"class MushroomMonster {\n\n    private static final String FILES_PATH = \"E:\\\\DL\\\\gcj\\\\2015\\\\round1A\\\\\";\n    private static final String IN_EXT = \".in\";\n    private static final String OUT_EXT = \".out\";\n    \n    private static final String FILE_NAME = \"A-large\";\n\n    public static void main(String[] args) throws IOException {\n        \n         Scanner in = new Scanner(new File(FILES_PATH + FILE_NAME + IN_EXT));\n         FileWriter fw = new FileWriter(new File(FILES_PATH + FILE_NAME + OUT_EXT));\n         \n         int nbTests = in.nextInt();\n         in.nextLine();\n         \n         int nbEtapes, rate, nbM1, nbM2;\n         int[] tab;\n         \n         for(int i = 0; i < nbTests; i++) {\n             \n             nbEtapes = in.nextInt();\n             in.nextLine();\n             \n             tab = new int[nbEtapes];\n             nbM1 = 0;\n             nbM2 = 0;\n             \n             rate = 0;\n             \n             for(int j = 0; j < nbEtapes; j++) {\n                 tab[j] = in.nextInt();\n             }\n             \n             for(int j = 0; j < nbEtapes - 1; j++) {\n                 rate = Math.max(rate, tab[j] - tab[j + 1]);\n             }\n             \n             for(int j = 1; j < nbEtapes; j++) {\n                 if(tab[j] < tab[j - 1]) {\n                     nbM1 += tab[j - 1] - tab[j];\n                 }\n                 nbM2 += Math.min(rate, tab[j - 1]);\n             }\n             \n             fw.write(\"Case #\" + (i+1) + \": \" + nbM1 + \" \" + nbM2 + \"\\n\");\n             in.nextLine();\n         }\n        \n         fw.close();\n         in.close();\n         \n    }\n    \n}"}
{"idx":"241","func":"class MushroomMonster{\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int totCases = Integer.parseInt(br.readLine());\n        for (int i = 0; i < totCases; i++) {\n            int N = Integer.parseInt(br.readLine());\n            int Y = 0; \n            int Z = 0; \n            String[] data = br.readLine().split(\" \");\n            int minDif = 0;\n            for (int j = 1; j < N; j++) {\n                int dataAnt = Integer.parseInt(data[j-1]);\n                int dataAct = Integer.parseInt(data[j]);\n                if (dataAct<dataAnt){\n                    int dif = dataAnt-dataAct;\n                    Y+=dif;\n                    if (minDif<dif){\n                        minDif=dif;\n                    }\n                }\n            }\n            for (int j = 1; j < N; j++) {\n                int dataAnt = Integer.parseInt(data[j-1]);\n                int dataAct = Integer.parseInt(data[j]);\n                Z+=(dataAnt-dataAct)<minDif?Math.min(dataAnt, minDif):minDif;\n            }\n            System.out.println(\"Case #\"+(i+1)+\": \"+Y+\" \"+Z);\n        }\n    }\n\n}"}
{"idx":"242","func":"class MainA {\n\n    static int t;\n    static int count;\n\n    static int[][] map;\n\n    public static void main(String[] args) throws Exception {\n        \/\/ \u554f\u984c\u306e\u8aad\u307f\u8fbc\u307f\n        Scanner sc = new Scanner(new File(\"src\/in.txt\"));\n\n        int T = sc.nextInt();\n\n        for (t=1; t<=T; t++) {\n\n            int N = sc.nextInt();\n\n            int[] m = new int[N];\n            for (int i=0; i<N; i++) {\n                m[i] = sc.nextInt();\n            }\n\n            long ans1 = 0;\n            long ans2 = 0;\n            \n            int[] d = new int[N-1];\n            \n            for (int i=0; i<N-1; i++) {\n                d[i] = m[i+1]-m[i];\n            }\n            \n            int min = 0;\n            for (int i=0; i<N-1; i++) {\n                \/\/ ans1\u306e\u8a08\u7b97\n                if (d[i] < 0) {\n                    ans1 -= d[i];\n                }\n            \n                \/\/ ans2\u306e\u8a08\u7b97\n                if (d[i] < min) {\n                    min = d[i];\n                }\n            }\n            \n            min = -min;\n            for (int i=0; i<N-1; i++) {\n                \/\/ ans2\u306e\u8a08\u7b97\n                if (m[i] >= min) {\n                    ans2 += min;\n                } else {\n                    ans2 += m[i];\n                }\n            }\n            \n            System.out.println(\"Case #\" + t + \": \" + (Object) ans1 + \" \" + (Object) ans2);\n        }\n    }\n}"}
{"idx":"243","func":"class A {\n  public static void main(String[] args) throws IOException {\n    BufferedReader br = new BufferedReader(new FileReader(args[0]));\n    BufferedWriter bw = new BufferedWriter(new FileWriter(args[1]));\n    String line = br.readLine();\n    int testCase = 1;\n    while ((line = br.readLine()) != null) {\n      if (line.length() == 0 || (line = br.readLine()) == null) {\n        break;\n      }\n      String[] mushroomStrings = line.split(\" \");\n      int method1 = 0, method2 = 0;\n      int lastNumber = Integer.parseInt(mushroomStrings[0]);\n      int maxDiff = 0;\n      for (int i = 1; i < mushroomStrings.length; i++) {\n        int mushroomNumber = Integer.parseInt(mushroomStrings[i]);\n        if (mushroomNumber < lastNumber) {\n          method1 += lastNumber - mushroomNumber;\n          maxDiff = Math.max(maxDiff, lastNumber - mushroomNumber);\n        }\n        lastNumber = mushroomNumber;\n      }\n      for (int i = 1; i < mushroomStrings.length; i++) {\n        int mushroomNumber = Integer.parseInt(mushroomStrings[i - 1]);\n        method2 += Math.min(mushroomNumber, maxDiff);\n      }\n      bw.write(\"Case #\" + testCase++ + \": \" + method1 + \" \"\n          + method2 + \"\\n\");\n    }\n    br.close();\n    bw.close();\n\n  }\n}"}
{"idx":"244","func":"class Main {\n    \n    public static void main(String[] args) throws IOException{\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter file = new PrintWriter(\"output.txt\");\n        \n        int t = Integer.parseInt(in.readLine());\n        for(int i = 0; i < t; ++i){\n            int n = Integer.parseInt(in.readLine());\n            String line[] = in.readLine().split(\" \");\n            int [] mush = new int [n];\n            int wayOne = 0;\n            int old = Integer.parseInt(line[0]);\n            double gap = 0;\n            for(int j = 0; j < n; ++j){\n                if(j!=0){\n                    old = mush[j-1];\n                }\n                mush[j] = Integer.parseInt(line[j]);\n                if(old-mush[j]>0){\n                    wayOne+=old-mush[j];\n                    if(old-mush[j]>gap)gap=old-mush[j];\n                }\n            }\n            \n            int wayTwo = 0;\n            double rate = gap;\n            double leftover = 0;\n            for(int j = 0; j < n-1; ++j){\n                \n                int amount = (int)(rate+leftover);\n                leftover = rate+leftover-amount;\n                if(rate > mush[j])wayTwo+=mush[j];\n                else wayTwo += amount;\n            }\n            \n        \n            \n            \n            file.println(\"Case #\"+(i+1)+\": \"+wayOne+\" \"+wayTwo);\n        }\n        file.close();\n        in.close();\n    }\n};"}
{"idx":"245","func":"static void main (String [] args) throws  IOException\n    {    \n    \/\/    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));\n        BufferedReader b = new BufferedReader(new FileReader(\"in.txt\"));\n        PrintWriter out = new PrintWriter(\"System.out\");\n        long test = Long.parseLong(b.readLine());\n        for(long i=0;i<test;i++){\n            int size = Integer.parseInt(b.readLine());\n            String s = b.readLine();\n            String st[]= s.split(\"\\\\s+\");\n            Long array[]= new Long[size];\n            for(int k=0;k<size;k++){\n            array[(int)k]=Long.parseLong(st[k]);\n        \/\/    System.out.println(array[k]);\n        \n            \n            }\n            long ans=0;\n            for(int k=0;k<size-1;k++){\n                if(array[k]-array[k+1]>0){\n                    ans=ans+(array[k]-array[k+1]);\n                    \/\/System.out.println(ans);\n                }\n            }\n            long constant=0;\n            long max=0;\n            for(int k=0;k<size-1;k++){\n                if(array[k]-array[k+1]>0){\n                    if((array[k]-array[k+1])>max){\n                        max=(array[k]-array[k+1]);\n                    }\n                }\n            }\n            \n            long ans2=0;\n            for(int k=0;k<size-1;k++){\n                \n                    if(array[k]>max){\n                        ans2=ans2+max;    \n                    }\n                    else{\n                        ans2= ans2+(array[k]);\n                        \n                    }\n                \n            }\n            \n            out.println(\"Case #\"+(i+1)+\": \"+ans+\" \"+ans2);\n        \n            \n        }\n        out.flush();\n       \n    }\n}"}
{"idx":"246","func":"class A {\n    public static void main(String[] argv) {\n        Scanner sc = new Scanner(System.in);\n\n        int T = sc.nextInt();\n\n        for (int i = 0; i < T; i++) {\n            int N = sc.nextInt();\n            int[] m = new int[N];\n            \n            for (int i2 = 0; i2 < N; i2++) {\n                m[i2] = sc.nextInt();\n            }\n            \n            long diff_tot = 0;\n            int diff_max = 0;\n            int prev = m[0];\n            for (int i3 = 1; i3 < N; i3++) {\n                int diff = m[i3] - m[i3-1];\n            \n                if (diff <= 0) {\n                    diff_tot -= diff;\n                    diff_max = Math.max(diff_max, -diff);\n                }\n            \n                prev = m[i3];\n            }\n            \n            long e2_tot = 0;\n            for (int i1 = 0; i1 < N - 1; i1++) {\n                if (m[i1] >= diff_max) {\n                    e2_tot += diff_max;\n                } else {\n                    \/\/if (m[i+1] == 0) {\n                    e2_tot += m[i1];\n                }\n            }\n            \n            System.out.printf(\"Case #%d: %d %d\\n\", i+1, diff_tot, e2_tot);\n        }\n    }\n}"}
{"idx":"247","func":"class Mushrooms \n{\n\n    public static void main(String args[])\n    {\n        Scanner sc = new Scanner(System.in);\n        int t= sc.nextInt();\n        for (int i=0;i<t;++i)\n        {\n            int n = sc.nextInt();\n            int []m = new int[n];\n            for (int j=0;j<n;++j)\n                m[j] = sc.nextInt();\n            int first = 0;\n            long second = 0;\n            long maxEaten = Integer.MIN_VALUE;\n            for (int j=1;j<n;++j)\n            {\n                if (m[j-1]-m[j] > maxEaten)\n                    maxEaten = m[j-1] - m[j];\n                if (m[j] < m[j-1])\n                {\n                    first += m[j-1] - m[j];\n                }\n            }\n            for (int j=0;j<n-1;++j)\n            {\n                if (m[j] > maxEaten)\n                    second += maxEaten;\n                else second += m[j];\n            }\n            System.out.println(\"Case #\"+(i+1)+\": \"+first+\" \"+second);\n        }\n    }\n}"}
{"idx":"248","func":"class A\n{\n  final double inf = Double.POSITIVE_INFINITY, eps = 1e-9;\n  final int eof = StreamTokenizer.TT_EOF, max = 10000;\n  int cases, nt, n, maxVal;\n  int[] mushroom, ans;\n  \n  public static void main (String[] args)\n  {\n    A r = (new A());\n    Scanner sc = new Scanner(System.in);\n    \n    r.cases = 1;\n    r.nt = sc.nextInt();\n    while (--r.nt >= 0)\n    {\n      System.out.print(\"Case #\" + r.cases + \": \");\n      r.n = sc.nextInt();\n      r.ans = new int[2];\n      r.mushroom = new int[r.n];\n      for (int i = 0; i < r.n; ++i)\n      {\n        r.mushroom[i] = sc.nextInt();\n      }\n      r.ans[0] = 0;\n      for (int i = 1; i < r.n; ++i)\n      {\n        if (r.mushroom[i] <= r.mushroom[i - 1])\n        {\n          r.ans[0] += r.mushroom[i - 1] - r.mushroom[i];\n        }\n      }\n      r.maxVal = 0;\n      for (int i = 1; i < r.n; ++i)\n      {\n        if (r.mushroom[i] < r.mushroom[i - 1])\n        {\n          r.maxVal = Math.max(r.maxVal, r.mushroom[i - 1] - r.mushroom[i ]);\n        }\n      }\n      r.ans[1] = 0;\n      for (int i = 1; i < r.n; ++i)\n      {\n        r.ans[1] += Math.min(r.mushroom[i - 1], r.maxVal);\n      }\n      System.out.println(r.ans[0] + \" \" + r.ans[1]);\n      ++r.cases;\n    }\n  }\n}"}
{"idx":"249","func":"class mushroom {\n    \n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(\n                new FileReader(\"mushroom.in\"));\n                \/\/new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(\n                new FileWriter(\"mushroom.out\")));\n                \/\/new OutputStreamWriter(System.out)));\n        int t = Integer.parseInt(br.readLine());\n        for (int tc = 1; tc <= t; tc++) {\n            int n = Integer.parseInt(br.readLine());\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int ans1 = 0;\n            int maxDiff = 0;\n            int prev = Integer.parseInt(st.nextToken());\n            int[] ar = new int[n];\n            ar[0] = prev;\n            for (int i = 1; i < n; i++) {\n                int next = Integer.parseInt(st.nextToken());\n                ar[i] = next;\n                if (next < prev) {\n                    ans1 += prev - next;\n                    if (prev - next > maxDiff) {\n                        maxDiff = prev - next;\n                    }\n                }\n                prev = next;\n            }\n            int ans2 = 0;\n            for (int i = 0; i < n - 1; i++) {\n                if (ar[i] < maxDiff) {\n                    ans2 += ar[i];\n                }\n                else {\n                    ans2 += maxDiff;\n                }\n            }\n            out.printf(\"Case #%d: %d %d\\n\", tc, ans1, ans2);\n        }\n        out.flush();\n        System.exit(0);\n    }\n    \n}"}
{"idx":"250","func":"class GCJTemplate {\n    \n    public static void main(String[] args) {\n        String filePath = new File(\"\").getAbsolutePath();\n        String readFilePath = filePath.concat(\"\/src\/text.in\");\n        String writeFilePath= filePath.concat(\"\/src\/text.out\");\n\n        File inFile = new File(readFilePath);\n        \n        FileWriter write = null;\n        try {write = new FileWriter(writeFilePath);} catch (IOException ex) {}\n        PrintWriter print_line = new PrintWriter(write);\n        \n        Scanner inLine = null;\n        try {inLine = new Scanner(inFile);} catch (FileNotFoundException ex) {}\n        \n        int testCases = inLine.nextInt();\n        \n        \/\/if using nextLine;\n        \/\/inLine.nextLine();\n        \n        for(int i = 0; i < testCases; i++){\n            \/\/String line = inLine.nextLine();\n            \/\/System.out.println(line);\n            int ans1 = 0;\n            int ans2 = 0;\n            \n            int numNums = inLine.nextInt();\n            \n            int[] numbers = new int[numNums];\n            \n            for(int j = 0; j < numNums; j++){\n                numbers[j] = inLine.nextInt();\n            }\n            \n            for(int j = 1; j < numNums; j++){\n                if(numbers[j-1]-numbers[j] > 0){\n                    ans1+=numbers[j-1]-numbers[j];\n                }\n            }\n            \n            int maxDiff = 0;\n            for(int j = 1; j < numNums; j++){\n                if(numbers[j-1]-numbers[j] > maxDiff)\n                    maxDiff = numbers[j-1]-numbers[j];\n            }\n            \n            for(int j = 1; j < numNums; j++){\n                if(numbers[j-1] > maxDiff)\n                    ans2+=maxDiff;\n                else\n                    ans2+=numbers[j-1];\n            }\n            \n            \/\/answer is string\n            \/\/print_line.printf(\"Case #%d: %s\",i+1,\"ans\");\n            \n            \/\/answer is int\n            print_line.printf(\"Case #%d: %d %d\",i+1,ans1,ans2);\n            if(i < testCases-1)\n                print_line.println();\n        }\n        \n        print_line.close();\n    }\n    \n}"}
{"idx":"251","func":"class OneA {\n    public static void main(String[] args) throws IOException {\n    BufferedReader r = new BufferedReader(new FileReader(args[0]));\n    int T = Integer.parseInt(r.readLine());\n    for (int i=0; i < T; i++) {\n        r.readLine();\n        String[] split = r.readLine().split(\" \");\n        int[] input = new int[split.length];\n        for (int j=0; j < split.length; j++)\n        input[j] = Integer.parseInt(split[j]);\n        int total = 0;\n        for (int i1=0; i1 < input.length-1; i1++)\n            if (input[i1+1]<input[i1])\n            total += input[i1]-input[i1+1];\n        int res1 = total;\n        int minRate = 0;\n        for (int i2=0; i2 < input.length-1; i2++)\n            if (input[i2+1]<input[i2])\n            minRate = Math.max(minRate, input[i2]-input[i2+1]);\n        int minEaten = 0;\n        for (int i1=0; i1 < input.length-1; i1++)\n            if (input[i1] < minRate)\n            minEaten += input[i1];\n            else\n            minEaten += minRate;\n        int res2 = minEaten;\n        System.out.println(\"Case #\"+(i+1)+\": \"+res1 + \" \"+ res2);\n    }\n    }\n}"}
{"idx":"252","func":"class Jam2015_1AC {\n    int    ret1;\n    int    ret2;\n    \n    public static void main(String[] args) {\n        Scanner    scanIn    = new Scanner(System.in);\n        \n        int T    = scanIn.nextInt();\n        \n        for(int i=0; i<T; ++i) {\n            Jam2015_1AC    inst    = new Jam2015_1AC();\n            int        n        = scanIn.nextInt();\n            \n            int[]    pList    = new int[n];\n\n            for(int j=0; j<n; ++j)\n                pList[j]    = scanIn.nextInt();\n            int[]    ret    = new int[n-1];\n            \n            for(int i1=0; i1<n-1; ++i1)\n                ret[i1]    = pList[i1+1] - pList[i1];\n            \n            int[]    tmp    = ret;\n            int    ret1    = 0;\n            for(int item: tmp) {\n                ret1 += (item < 0) ? -item: 0;\n            }\n            \n            inst.ret1    = ret1;\n            int    speed    = 0;\n            for(int item2: tmp) {\n                speed = (speed > item2) ? item2: speed;\n            }\n            speed    = -speed;\n            \n            int    ret2    = 0;\n            for(int i1=0; i1<n-1; ++i1) {\n                int item1    = pList[i1];\n                int    tmp1    = speed;\n                ret2    += (item1 < tmp1) ? item1: tmp1;\n            }\n            inst.ret2    = ret2;\n            \n            System.out.println(\"Case #\" + (i+1) + \": \" + inst.ret1 + \" \" + inst.ret2);\n        }\n        \n        scanIn.close();\n    }\n}"}
{"idx":"253","func":"class MushroomMonster {\n\n    static BufferedReader br;\n    static BufferedWriter bw;\n    static String path = \"C:\/Users\/Alberto\/Desktop\/GoogleContent2015\/Mushroom\/A-large.in\";\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n\n        try {\n            bw = new BufferedWriter(\n                    new FileWriter(\n                            \"C:\/Users\/Alberto\/Desktop\/GoogleContent2015\/Mushroom\/A-large.txt\"));\n\n            br = new BufferedReader(new FileReader(path));\n\n            String line = br.readLine();\n            int T = Integer.parseInt(line);\n\n            for (int i = 1; i <= T; i++)\n                \/\/ Leemos la linea del primer participante\n                try {\n                    int size = Integer.parseInt(br.readLine());\n                    String line1 = br.readLine();\n                    Integer[] vect = new Integer[size];\n                    \/\/ ArrayList<Integer> vect = new ArrayList<Integer>();\n                \n                    long llevo1 = 0;\n                    long llevo2 = 0;\n                    int maxDif = 0;\n                \n                    for (int i1 = 0; i1 < size; i1++) {\n                        vect[i1] = Integer.parseInt(line1.split(\" \")[i1]);\n                        \/\/ vect.add(Integer.parseInt(line.split(\" \")[i]));\n                    }\n                \n                    \/\/ Sacamos la diferencia maxima\n                    for (int i3 = 0; i3 < size - 1; i3++) {\n                        if (vect[i3] > vect[i3 + 1] && vect[i3] - vect[i3 + 1] > maxDif)\n                            maxDif = vect[i3] - vect[i3 + 1];\n                    }\n                \n                    for (int i2 = 1; i2 < size; i2++) {\n                        \/\/ Solucin 1:\n                        if (vect[i2] < vect[i2 - 1]) {\n                            llevo1 += vect[i2 - 1] - vect[i2];\n                        }\n                \n                        \/\/ Solucion 2:\n                        if (vect[i2 - 1] <= maxDif)\n                            llevo2 += vect[i2 - 1];\n                        else\n                            llevo2 += maxDif;\n                    }\n                \n                    bw.write(\"Case #\" + i + \": \" + llevo1 + \" \" + llevo2\n                            + System.lineSeparator());\n                \n                } catch (IOException ex) {\n                    ex.printStackTrace();\n                }\n\n            bw.close();\n\n        } catch (FileNotFoundException ex) {\n            ex.printStackTrace();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n}"}
{"idx":"254","func":"class A {\n\n    public static void main(String[] args) {\n        \n\n        \/\/ BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n        Scanner s = new Scanner(System.in);\n        \n        int numCases = s.nextInt();\n        \n        for(int numC = 0; numC < numCases; ++numC)\n        {\n            int n = s.nextInt();\n            \n            int[] numbers = new int[n];\n            \n            for(int i = 0; i < n; ++i)\n            {\n                numbers[i] = s.nextInt();\n            }\n            \n            int firstMethod = 0;\n            for(int i = 1; i < n; ++i)\n            {\n                int diff = numbers[i-1] - numbers[i];\n                \n                if(diff > 0)\n                {\n                    firstMethod += diff;\n                }\n            }\n            \n            int curr = 0;\n            int eaten = 0;\n            \n            while(true)\n            {\n                boolean valid = true;\n                eaten = 0;\n                for(int i = 1; i < n && valid; ++i)\n                {\n                    int after = numbers[i-1] - curr;\n                    \n                    eaten += curr;\n                    if(after < 0)\n                    {\n                        eaten += after;\n                        after = 0;\n                    }\n                    if(after > numbers[i])\n                    {\n                        valid = false;\n                    }\n                    int added = numbers[i] - after;\n                }\n                if(valid)\n                {\n                    break;\n                }\n                \n                curr++;\n            }\n            \n            int secondMethod = eaten;\n            \n            System.out.print(\"Case #\");\n            System.out.print(numC+1);\n            System.out.print(\": \");\n            System.out.print(firstMethod);\n            System.out.print(' ');\n            System.out.println(secondMethod);\n        }\n\n    }\n\n}"}
{"idx":"255","func":"class Main {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(new File(\"A.in\")));\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(new File(\"A.out\"))));\n        \n        int T = Integer.parseInt(br.readLine());\n        for (int t = 0; t < T; t++) {\n            int N = Integer.parseInt(br.readLine());\n            int[] M = new int[N];\n            String[] str = br.readLine().split(\" \");\n            for (int i = 0; i < N; i++) M[i] = Integer.parseInt(str[i]);\n            int first = 0, maxdiff = 0;\n            for (int i = 1; i < N; i++) {\n                int diff = M[i-1]-M[i];\n                if (diff > 0) {\n                    first += diff;\n                    maxdiff = Math.max(maxdiff, diff);\n                }\n            }\n            int second = 0;\n            for (int i = 0; i < N-1; i++) second += Math.min(M[i], maxdiff);\n            \n            pw.println(\"Case #\"+(t+1)+\": \"+first+\" \"+second);\n            pw.flush();\n        }\n\n        pw.close();\n        br.close();\n    }\n}"}
{"idx":"256","func":"static void main(String[] args){\n\n    Scanner sc = new Scanner(System.in);\n    int kase = sc.nextInt();\n    for(int k = 1; k<=kase; k++){\n        int N =sc.nextInt();\n        int[] mush = new int[N];\n        int max = 0;\n        int p1 = 0;\n        for (int i = 0; i<N; i++){\n            mush[i] = sc.nextInt();\n            if(i>0 && max < mush[i-1]-mush[i]) max = mush[i-1]-mush[i];\n            if(i>0 && (mush[i-1]-mush[i])>0) p1+= mush[i-1]-mush[i];\n        }\n        int p2 = 0;\n        for (int i = 0; i<N-1; i++){\n            if(mush[i]<max) p2+= mush[i];\n            else p2+= max;\n        }\n        System.out.println(\"Case #\"+k+\": \"+p1+\" \"+p2);\n    }\n}\n}"}
{"idx":"257","func":"class ProblemA {\n\n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int cases = Integer.parseInt(br.readLine());\n        for(int c=1; c<=cases; c++){\n            int tam = Integer.parseInt(br.readLine());\n            String line = br.readLine();\n            int intervals[] = new int [tam];\n            StringTokenizer st = new StringTokenizer(line);\n            for(int i=0; i<tam; i++){\n                intervals[i] = Integer.parseInt(st.nextToken());\n            }\n            int any, ratio;\n            int maxDif;\n            any = 0;\n            maxDif = 0;\n            ratio = 0;\n            for(int i=1; i<tam; i++){\n                if (intervals[i] < intervals[i-1]){\n                    int diff = intervals[i-1] -intervals[i];\n                    any += diff;\n                    if(diff > maxDif)maxDif = diff;\n                }\n            }\n            for(int i=0; i<tam-1; i++){\n                ratio += intervals[i] < maxDif ? intervals[i] : maxDif;\n            }\n            System.out.println(\"Case #\"+c+\": \" + any + \" \" + ratio);\n        }\n    }\n\n}"}
{"idx":"258","func":"class Main {\n\n\n    public static void main(String[] args) {\n        Scanner in = null;\n        try {\n            in = new Scanner(new File(\"A-large.in\"));\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n            System.exit(-1);\n        }\n        \n        PrintWriter out = null;\n        try {\n            out = new PrintWriter(\"out.txt\");\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n            System.exit(-1);\n        }\n        \n        int nTests = in.nextInt();\n        \n        for(int testsCount = 0;testsCount<nTests;++testsCount) {            \n            int n = in.nextInt();\n\n            int m1=0,m2=0;\n            int[] v = new int[1024];\n            int maxd = -1;\n            for(int i=0;i<n;i++) {\n                v[i] = in.nextInt();\n                \n                if (i>0) {\n                    int d = v[i-1]-v[i];\n                    if (v[i-1]>v[i]) {\n                        m1+=d;\n                    }\n                    if (d > maxd) {\n                        maxd = d;\n                    }\n                }\n                \n            }\n            for(int i=0;i<n-1;i++) {\n                if (v[i]<maxd) {\n                    m2+=v[i];\n                }\n                else {\n                    m2+=maxd;\n                }\n            }\n            out.println(\"Case #\" + (testsCount + 1) + \": \" + m1 + \" \" + m2);\n        }\n        \n        out.close();\n    }\n\n}"}
{"idx":"259","func":"class A {\n\n    private static final String INPUT = \"A-large.in\";\n    private static final String OUTPUT = \"A-large.out\";\n\n    public static void main(String[] args) {\n        try {\n            Scanner sc = new Scanner(Paths.get(INPUT));\n            StringBuilder sb = new StringBuilder();\n            int cases = sc.nextInt();\n            for (int c = 1; c < cases + 1; c++) {\n                int n = sc.nextInt();\n                int[] m = new int[n];\n                for (int i = 0; i < n; i++) {\n                    m[i] = sc.nextInt();\n                }\n\n                long answer1 = 0;\n                long answer2 = 0;\n                long speed = 0;\n\n                for (int i = 1; i < n; i++) {\n                    if (m[i] < m[i - 1]) {\n                        answer1 += m[i - 1] - m[i];\n                        speed = Math.max(speed, m[i - 1] - m[i]);\n                    }\n                }\n\n                for (int i = 1; i < n; i++) {\n                    answer2 += Math.min(m[i - 1], speed);\n                }\n\n                String line = \"Case #\" + c + \": \" + answer1 + \" \" + answer2;\n                System.out.println(line);\n                sb.append(line).append('\\n');\n            }\n            Files.write(Paths.get(OUTPUT), sb.toString().getBytes());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"260","func":"class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int numCases = sc.nextInt();\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n            int N = sc.nextInt();\n            int[] m = new int[N];\n            for (int i = 0; i < N; i++) {\n                m[i] = sc.nextInt();\n            }\n            int totalDecrease = 0;\n            int maxDecrease = 0;\n            for (int i = 1; i < N; i++) {\n                if (m[i] < m[i - 1]) {\n                    int difference = m[i - 1] - m[i];\n                    totalDecrease += difference;\n                    maxDecrease = Math.max(maxDecrease, difference);\n                }\n            }\n\n            int mushrooms = 0;\n            for (int i = 0; i < N - 1; i++) {\n                mushrooms += Math.min(maxDecrease, m[i]);\n            }\n\n            System.out.println(\"Case #\" + caseNum + \": \" + totalDecrease + \" \" + mushrooms);\n        }\n    }\n}"}
{"idx":"261","func":"class MushroomMonster {\n    public static void main(String[] args) throws FileNotFoundException {\n\n\/\/        String input = \"4\\n\" +\n\/\/            \"4\\n\" +\n\/\/            \"10 5 15 5\\n\" +\n\/\/            \"2\\n\" +\n\/\/            \"100 100\\n\" +\n\/\/            \"8\\n\" +\n\/\/            \"81 81 81 81 81 81 81 0\\n\" +\n\/\/            \"6\\n\" +\n\/\/            \"23 90 40 0 100 9\";\n\n        Scanner sc = new Scanner(System.in);\n        PrintWriter wr = new PrintWriter(\"output2\");\n        int T = Integer.parseInt(sc.nextLine());\n        for (int i = 0; i< T ; i++) {\n\n            StringBuilder ans = new StringBuilder();\n            ans.append(\"Case #\"+(i+1)+\": \");\n\n            int N = Integer.parseInt(sc.nextLine());\n            String[] ms = sc.nextLine().split(\" \");\n            int count_1 = 0;\n            int count_2 = 0;\n            int max = 0;\n            for (int j = 1; j<N; j++) {\n                int last = Integer.parseInt(ms[j-1]);\n                int curr = Integer.parseInt(ms[j]);\n                if (last>curr) {\n                    count_1 = count_1 + (last-curr);\n                    max = Math.max(max,last-curr);\n                }\n            }\n\n            for (int j = 0; j<N-1; j++) {\n                int curr = Integer.parseInt(ms[j]);\n                if (curr<max) {\n                    count_2 = count_2 + curr;\n                } else {\n                    count_2 = count_2 + max;\n                }\n            }\n\n            ans.append(count_1+\" \");\n            ans.append(count_2);\n\n            wr.println(ans);\n\n        }\n        wr.close();\n    }\n}"}
{"idx":"262","func":"class Jamur{\n    static String filename = \"A-large\";    \/\/ io filnename here\n    static String inname = filename + \".in\";    \n    static String outname = filename + \".out\";  \n    static int n;\n    public static void main(String[] args){\n        try{\n            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));\n            \/\/Scanner in = new Scanner(System.in);\n            BufferedWriter out = new BufferedWriter(new FileWriter(outname));\n            int t = in.nextInt();\n            in.nextLine();\n            for (int cas = 1; cas <= t; cas++){\n                int kurang = 0;\n                int temp[] = new int[10000];\n                int satu = 0;\n                int dua = 0;\n                int best = 0;\n                int rep = in.nextInt();\n                kurang = in.nextInt();\n                int first = kurang;\n                for (int i = 0; i < rep-1;i++){\n                    temp[i] = in.nextInt();\n                    int tempor = kurang - temp[i];\n                    if (tempor > best) best = tempor;\n                    kurang = temp[i];\n                    \/\/System.out.println(\"tempor \" + tempor);\n                    if (tempor >= 0) satu += tempor;\n                }\n                if (first < best) dua += first;\n                    else dua += best;\n                for (int i = 0; i < rep-2;i++){\n                    if (temp[i] < best) dua += temp[i];\n                    else dua += best;\n                }\n                \/\/System.out.print(\"Case #\" + cas + \": \" + satu + \" \" + dua + \"\\n\");\n                out.write(\"Case #\" + cas + \": \" + satu + \" \" + dua + \"\\n\");\n            }\n            in.close();\n            out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"263","func":"class Mushrooms {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner (new File(\"b.in\"));\n        \/\/Scanner in = new Scanner (System.in);\n        int cases = in.nextInt();\n        for (int caseNo = 1; caseNo <= cases; caseNo++)\n        {\n            int size = in.nextInt();\n            int []pieces = new int[size];\n            for (int i = 0; i < size; i++)\n            {\n                pieces[i] = in.nextInt();\n            }\n            int count = 0;\n            int base = pieces[0];\n            for (int i = 1; i < pieces.length; i++)\n            {\n                int curr = pieces[i];\n                if (curr < base)\n                    count += (base - curr);\n                base = curr;\n            }\n            int res1 = count;\n            int max= 0;\n            int base1 = pieces[0];\n            for (int i = 1; i < pieces.length; i++)\n            {\n                int curr = pieces[i];\n                if (curr < base1)\n                {\n                    int diff = (base1 - curr);\n                    if (diff > max)\n                        max = diff;\n                }\n                base1 = curr;\n            }\n            int rate = max\/10;\n            int count1 = 0;\n            base1 = pieces[0];\n            int eaten = max;\n            for (int i = 0; i < pieces.length-1; i++)\n            {\n                int curr = pieces[i];\n                if (curr < eaten)\n                    count1 += curr;\n                else\n                    count1 += max;\n                \/\/System.out.println(\"Eaten =  \" + count);\n                base1 = curr;\n            }\n            int res2 = count1;\n            \n            System.out.println(\"Case #\" + caseNo + \": \" + res1 + \" \" + res2);\n            \n        }\n    }\n\n}"}
{"idx":"264","func":"class Solution {\n\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n\n        Scanner input = new Scanner(new File(\"in.in\"));\n        ArrayList<String> answeres = new ArrayList<>();\n        int T = 0, N = 0;\n\n        int y = 0;\n        int z = 0;\n        int rate = 0;\n\n        int temprate = 0;\n\n        T = input.nextInt();\n\n        for (int i = 0; i < T; i++) {\n\n            N = input.nextInt();\n\n            int[] data = new int[N];\n\n            for (int j = 0; j < N; j++) {\n                data[j] = input.nextInt();\n            }\n\n            y = 0;\n            z = 0;\n            rate = 0;\n            temprate = 0;\n\n            for (int j = 0; j < N - 1; j++) {\n                if (data[j] > data[j + 1]) {\n                    y += data[j] - data[j + 1];\n\n                    temprate = (data[j] - data[j + 1]);\n\n                    if (temprate > rate) {\n                        rate = temprate;\n                    }\n\n                }\n\n            }\n\n            for (int j = 0; j < N - 1; j++) {\n                if (data[j]-rate  <0) {\n                    z += data[j];\n                } else {\n                    z += rate;\n                }\n            }\n\n            answeres.add(y+\" \"+z);\n\n\n\n        }\n\n        String out = \"\";\n        for (int i = 0; i < T; i++) {\n            out += \"Case #\" + (i + 1) + \": \";\n            out += answeres.get(i);\n            out += \"\\r\\n\";\n        }\n        System.out.println(out);\n        File outF = new File(\"out.out\");\n        FileWriter fw = new FileWriter(outF);\n        fw.write(out);\n        fw.flush();\/\/*\/\n\n    }\n\n}"}
{"idx":"265","func":"class ProblemA {\n\n    private static final String ID = \"gcj2015round1A\/A-large\";\n\n    private static Scanner input;\n    private static PrintWriter output;\n\n    public static void main(String[] args) {\n        try {\n            input = new Scanner(new File(\"data\/\" + ID + \".in\"));\n            output = new PrintWriter(new FileWriter(\"data\/\" + ID + \".out\"));\n            long time = System.currentTimeMillis();\n            int T = input.nextInt();\n            for (int t = 1; t <= T; t++) {\n                int min1 = 0, min2 = 0, largestDiff = 0;\n            \n                int N = input.nextInt();\n                int[] m = new int[N];\n                for (int i = 0; i < N; i++) {\n                    m[i] = input.nextInt();\n                    if (i > 0) {\n                        int diff = m[i - 1] - m[i];\n                        if (diff > 0) {\n                            min1 += diff;\n                            if (diff > largestDiff) {\n                                largestDiff = diff;\n                            }\n                        }\n                    }\n                }\n            \n                for (int i = 0; i < N - 1; i++) {\n                    if (m[i] >= largestDiff) {\n                        min2 += largestDiff;\n                    } else {\n                        min2 += m[i];\n                    }\n                }\n            \n                output.printf(\"Case #%d: %d %d\\n\", t, min1, min2);\n            }\n            output.flush();\n            output.close();\n            input.close();\n            time = System.currentTimeMillis() - time;\n            System.out.printf(\"[%s] finished in %d ms\\n\", ID, time);\n        } catch (Exception ex) {\n            ex.printStackTrace(System.out);\n        }\n    }\n\n}"}
{"idx":"266","func":"class Mushroom {\n    public static Scanner s = new Scanner(System.in);\n    \n    public static void main(String[] args) {\n        int n = parseInt(s.nextLine());\n        \n        for (int i=1 ; i<=n ; i++) {\n            System.out.print(\"Case #\" + i + \": \");\n            System.err.println(i+\"\/\"+n);\n            \n            int N = s.nextInt();\n            \n            long kfirst = 0;\n            long ksecond = 0;\n            \n            int m[] = new int[N];\n            for (int i2=0 ; i2<N ; i2++) {\n                m[i2] = s.nextInt();\n            }\n            \n            int rate = 0;\n            \n            for (int i3=1 ; i3<N ; i3++) {\n                int dif = m[i3] - m[i3-1];\n                \n                if (dif < 0) {\n                    kfirst += -dif;\n                }\n                \n                if (-dif > rate) {\n                    rate = -dif;\n                }\n            }\n            \n            for (int i1=1 ; i1<N ; i1++) {\n                ksecond += Math.min(rate, m[i1-1]);\n            }\n            \n            System.out.println(kfirst + \" \" + ksecond);\n        }\n    }\n    \n}"}
{"idx":"267","func":"class A {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        A r = new A();\n        \/\/Scanner in = new Scanner(System.in);\n        Scanner in = new Scanner(new File(\"al.in\"));\n        PrintWriter out = new PrintWriter(\"al.out\");\n        int t = in.nextInt();\n        for (int test = 1; test <= t; test++) {\n            int n = in.nextInt();\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++)\n                a[i] = in.nextInt();\n            int cnt1 = 0;\n            for (int i = 0; i < n - 1; i++)\n                if (a[i + 1] < a[i])\n                    cnt1 += a[i] - a[i + 1];\n        \n            int max = 0;\n            for (int i = 0; i < n - 1; i++)\n                if (a[i] > a[i + 1])\n                    max = Math.max(max, a[i] - a[i + 1]);\n            int cnt2 = 0;\n            for (int i = 0; i < n - 1; i++)\n                cnt2 += Math.min(max, a[i]);\n            \/\/System.out.println(\"Case #\" + test+ \": \" + cnt1 + \" \" + cnt2);\n            out.println(\"Case #\" + test+ \": \" + cnt1 + \" \" + cnt2);\n        }\n        \n        out.close();\n    }\n}"}
{"idx":"268","func":"class A {\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new FileReader(\n                \"A-large.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"A_out1.txt\"));\n        \n        int cases = Integer.parseInt(br.readLine());\n        \n        for(int n = 1; n <= cases; n++) {\n            \n            int intervals = Integer.parseInt(br.readLine());\n            StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n            int[] mushrooms = new int[intervals];\n            for(int i = 0; i < intervals; i++)\n                mushrooms[i] = Integer.parseInt(st.nextToken());\n            \n            int maxDiff = 0;\n            for(int i = 0; i < intervals-1; i++) {\n                int diff = mushrooms[i] - mushrooms[i+1];\n                maxDiff = maxDiff > diff ? maxDiff : diff;\n            }\n                        \n            int sumSecond = 0;\n            for(int i = 0; i < intervals-1; i++) {\n                if(mushrooms[i] > maxDiff)\n                    sumSecond += maxDiff;\n                else \n                    sumSecond += mushrooms[i];\n            }\n            \n            int sumFirst = 0;\n            for(int i = 0; i < intervals-1; i++) {\n                int diff = mushrooms[i] - mushrooms[i+1];\n                if(diff > 0)\n                    sumFirst += diff;\n            }\n            \n            pw.printf(\"Case #%d: %d %d\\n\", n, sumFirst, sumSecond);\n        }\n        \n        pw.close();\n    }\n}"}
{"idx":"269","func":"class MushroomMonster {\n\n    Scanner in;    public static void main(String[] args){\n        MushroomMonster myClass = new MushroomMonster();\n        try {            myClass.in =  new Scanner(new BufferedReader(new FileReader(\"A-large.in\")));\n                myClass.writer = new FileWriter(\"the-file-name.txt\");\n                int T = myClass.in.nextInt();\n                    for(int i = 1; i <= T; i++){\n                    int N = myClass.in.nextInt();\n                    \n                    long[] allMs = new long[N];\n                    long maxRate = 0;\n                    long diffTotal = 0;\n                    long diff = 0;\n                    allMs[0] = myClass.in.nextInt();\n                    for(int j = 1; j < N; j++){\n                        allMs[j] = myClass.in.nextInt();\n                        diff = allMs[j-1] - allMs[j];\n        if(diff > maxRate){\n            maxRate = diff;\n        }\n        if(diff > 0){\n            diffTotal += diff;\n        }\n                    }\n                    long method2 = 0;\n                    for(int j = 1; j<allMs.length; j++){\n                        diff = allMs[j-1] - allMs[j];\n                        if(allMs[j-1] < maxRate){\n                            method2 += allMs[j-1];\n                        }\n                        else{\n                            method2 += maxRate;\n                        }\n                    }\n                    \n                    \n                    StringBuilder s = new StringBuilder();\n                    s.append(\"Case #\");\n                    s.append(i);\n                    s.append(\": \");\n        s.append(diffTotal);\n        s.append(\" \");\n        s.append(method2);\n                    \n                    s.append(\"\\n\");\n                    \n            myClass.writer.write(s.toString());\n                    \n                            }\n                myClass.writer.close();            \n                }\n                    catch (IOException e) {\n                    }\n    }\n    FileWriter writer;\n    \n    \n}"}
{"idx":"270","func":"class MushroomMonster {\n    Scanner sc = new Scanner(getClass().getResourceAsStream(IN));\n    static final String FILENAME = \"A-large\";\n    static final String IN = FILENAME + \".in\";\n    static final String OUT = FILENAME + \".out\";\n    PrintStream out = System.out;\n\n    public static void main(String args[]) throws Exception {\n        MushroomMonster r = new MushroomMonster();\n        r.out = new PrintStream(new FileOutputStream(MushroomMonster.OUT));\n        int t = r.sc.nextInt();\n        for (int tc = 1; tc <= t; tc++) {\n            System.out.println(\"Test Case \" + tc + \"...\");\n            int N = r.sc.nextInt();\n            int[] mi = new int[N];\n            for(int i = 0; i < N; i++) {\n                mi[i] = r.sc.nextInt();\n            }\n            r.out.print(\"Case #\" + tc + \": \");\n            long eat1 = 0, eat2 = 0;\n            \n            long maxDiff = 0;\n            \n            for(int i = 1; i < mi.length; i++) {\n                int diff = mi[i - 1] - mi[i];\n                eat1 += Math.max(diff, 0);\n                maxDiff = Math.max(diff, maxDiff);\n            }\n            \n            for(int i = 1; i < mi.length; i++) {\n                eat2 += Math.min(maxDiff, mi[i-1]);\n            }\n            \n            r.out.print(eat1 + \" \");\n            r.out.println(eat2);\n        }\n        r.sc.close();\n        r.out.close();\n    }\n}"}
{"idx":"271","func":"class codjamr11 {\n    public static void main(String args[]){\n        Scanner s=new Scanner(System.in);\n        int t=s.nextInt();\n        for(int k=0;k<t;k++){\n            int n=s.nextInt(),ans1=0,ans2=0,max=0;\n            int a[]=new int[n];\n\n            for(int i=0;i<n;i++){\n                a[i]=s.nextInt();\n\n            }\n            for(int i=0;i<n;i++){\n                if(i<n-1 && (a[i]-a[i+1])>max)\n                    max=a[i]-a[i+1];\n            }\n            \/\/    System.out.println(max);\n            for(int i=0;i<n-1;i++){\n                if(a[i+1]<a[i]){\n                    ans1+=a[i]-a[i+1];\n                }\n                ans2+=Math.min(a[i],max);\n            }\n            \/\/ans2-=a[n-1];\n            System.out.println(\"Case #\"+(k+1)+\": \"+ans1+\" \"+ans2);\n        }\n    }\n}"}
{"idx":"272","func":"class Pr11 {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner s = new Scanner(System.in);\n        int T = s.nextInt();\n        int N, max, inc;\n        long min1, min2;\n        int[] m;\n        for(int t=1; t<=T; t++){\n            N = s.nextInt();\n            m = new int[N];\n            max = 0;\n            min1 = 0;\n            min2 = 0;\n            for(int i=0; i<N; i++){\n                m[i] = s.nextInt();\n                if(i>0){\n                    if(m[i-1]>m[i]){\n                        min1 = min1 + m[i-1] - m[i];\n                        if((m[i-1]-m[i])>max) max = m[i-1] - m[i];\n                    }\n                }\n            }\n            if(max == 0) System.out.println(\"Case #\"+t+\": \"+min1+\" 0\");\n            else{\n                if((max%10) == 0) inc = max\/10;\n                else inc = max\/10 +1;\n                for(int i=1; i<N; i++){\n                    if(max>m[i-1]) min2 += m[i-1];\n                    else min2 += max;\n                }\n                System.out.println(\"Case #\"+t+\": \"+min1+\" \"+min2);\n            }\n        }\n    }\n\n}"}
{"idx":"273","func":"class TaskA {\n\n    public static void main(String[] args) {\n        long time = System.currentTimeMillis();\n        Scanner sc = new Scanner(new BufferedInputStream(System.in));\n        int t = sc.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = sc.nextInt();\n            int[] result = new int[n];\n            for (int i1 = 0; i1 < n; i1++) {\n                result[i1] = sc.nextInt();\n            }\n            int[] m = result;\n            int answer1 = 0;\n            for (int j = 1; j < n; j++) {\n                if (m[j] < m[j-1]) {\n                    answer1 += (m[j-1] - m[j]);\n                }\n            }\n            int answer2 = 0;\n            int maxSpeed = 0;\n            for (int j = 1; j < n; j++) {\n                if (m[j] < m[j-1] && m[j-1] - m[j] > maxSpeed) {\n                    maxSpeed = m[j-1] - m[j];\n                }\n            }\n            for (int j = 1; j < n; j++) {\n                if (m[j-1] > maxSpeed) {\n                    answer2 += maxSpeed;\n                }\n                else {\n                    answer2 += m[j-1];\n                }\n            }            \n            System.out.println(\"Case #\" + (i+1) + \": \" + answer1 + \" \" +answer2);\n        }\n        sc.close();\n        System.err.println(System.currentTimeMillis() - time);\n    }\n}"}
{"idx":"274","func":"class taskA {\n\n    PrintWriter out;\n    BufferedReader br;\n    StringTokenizer st;\n\n    String nextToken() throws IOException {\n        while ((st == null) || (!st.hasMoreTokens()))\n            st = new StringTokenizer(br.readLine());\n        return st.nextToken();\n    }\n\n    public static void main(String[] args) {\n        taskA r = new taskA();\n        try {\n            r.br = new BufferedReader(new InputStreamReader(System.in));\n            r.out = new PrintWriter(System.out);\n        \n            r.br = new BufferedReader(new FileReader(\"taskA.in\"));\n            r.out = new PrintWriter(\"taskA.out\");\n            int n = Integer.parseInt(r.nextToken());\n            for (int i = 0; i < n; i++) {\n        \n                r.out.print(\"Case #\" + (i + 1) + \": \");\n                int n1 = Integer.parseInt(r.nextToken());\n                        int[] a = new int[n1];\n                        for (int i2 = 0; i2 < n1; i2++) {\n                            a[i2] = Integer.parseInt(r.nextToken());\n                        }\n                        int y = 0;\n                        int z = 0;\n                        int minS = 0;\n                        for (int i3 = 1; i3 < n1; i3++) {\n                            if (a[i3] < a[i3 - 1]) {\n                                y += a[i3 - 1] - a[i3];\n                                minS = Math.max(minS, a[i3 - 1] - a[i3]);\n                            }\n                        }\n                \/\/        System.err.println(\"==\");\n                        for (int i1 = 0; i1 < n1 - 1; i1++) {\n                \/\/            System.err.println(a[i] + \" \" + minS);\n                            z += Math.min(a[i1], minS);\n                        }\n                        r.out.println(y + \" \" + z);\n            }\n            r.out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"275","func":"static void main(String[] args) {\n        String input = BASE + PROBLEM + \".in\";\n        String output = BASE + PROBLEM + \".out\";\n\n        try {\n            Scanner sc = new Scanner(new FileReader(input));\n            PrintWriter pw = new PrintWriter(output);\n\n            int mumCases = sc.nextInt();\n            sc.nextLine();\n            for (int caseNumber = 0; caseNumber < mumCases; caseNumber++) {\n                System.out.println(\"Test case \" + (caseNumber + 1) + \"...\");\n                pw.print(\"Case #\" + (caseNumber + 1) + \": \");\n                final int N = sc.nextInt();\n                int[] mushrooms = new int[N];\n                \n                for (int i = 0; i < N; i++) {\n                    mushrooms[i] = sc.nextInt();\n                }\n                int prev1 = mushrooms[0];\n                int result1 = 0;\n                for (int i1 = 1; i1 < mushrooms.length; i1++) {\n                    if (mushrooms[i1] < prev1) {\n                        result1 += prev1 - mushrooms[i1];\n                    }\n                    prev1 = mushrooms[i1];\n                }\n                \n                int method1 = result1;\n                \/\/ find the largest difference between successive values.  This must be the min rate.\n                int prev = mushrooms[0];\n                int maxDiff = 0;\n                for (int i = 1; i < mushrooms.length; i++) {\n                    if (mushrooms[i] < prev) {\n                        int diff = prev - mushrooms[i];\n                        if (diff > maxDiff) {\n                            maxDiff = diff;\n                        }\n                    }\n                    prev = mushrooms[i];\n                }\n                \n                \/\/ starting at the beginning, eat min(maxdiff, mushrooms) at each interval.\n                int result = Math.min(maxDiff, mushrooms[0]);\n                for (int i = 1; i < mushrooms.length-1; i++) {\n                    result += Math.min(maxDiff, mushrooms[i]);\n                }\n                int method2 = result;\n                \n                pw.print(method1 + \" \" + method2);\n                pw.println();\n            }\n            pw.println();\n            pw.flush();\n            pw.close();\n            sc.close();\n        } catch (FileNotFoundException ex) {\n            Logger.getLogger(A.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n\n\n}"}
{"idx":"276","func":"class ProblemA {\n\n    public static final int MAX = 1000;\n    \n    \n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st;\n        int T = Integer.parseInt(in.readLine());\n        int N, j, r1, r2,d,max;\n        int[] A = new int[MAX];\n        \n        for (int i=1; i<=T; i++) {\n            N = Integer.parseInt(in.readLine());\n            st = new StringTokenizer(in.readLine());\n            for (j=0; j<N; j++) {\n                A[j] = Integer.parseInt(st.nextToken());\n            }\n            \n            max = Integer.MIN_VALUE;\n            \/\/ method 1\n            r1 = 0;\n            for (j=1; j<N; j++) {\n                d = A[j] - A[j-1];\n                if (d < 0) {\n                    r1 += Math.abs(d);\n                }\n                if (Math.abs(d) > max && d < 0) {\n                    max = -d;\n                }\n            }\n            \/\/System.out.println(max);\n            \/\/ method 2\n            max = Math.max(0, max);\n            r2 = 0;\n            for (j=0; j<N-1; j++) {\n                \/*d = A[j] - A[j-1];\n                if (d < 0) {*\/\n                    r2 += Math.min(A[j], max); \n                \/\/}\n            }\n            \n            System.out.println(\"Case #\" + i + \": \" + r1 + \" \" + r2);\n        }\n    }\n\n}"}
{"idx":"277","func":"class A {\n    static final Boolean SAMPLE = false;\n    static final String PROBLEM = \"A\";\n    static final String INPUT = \"large\";\n    static final String ID = \"0\";\n    static final String PATH = \"\/Users\/wangkai\/Documents\/codejam-commandline-1.2-beta1\/source\/\";\n\n    public static void main(String[] args) throws Throwable {\n        Scanner in = SAMPLE ? new Scanner(System.in) : new Scanner(new File(\n                PATH + PROBLEM + \"-\" + INPUT + \"-\" + ID + \".in\"));\n        PrintStream out = SAMPLE ? System.out : new PrintStream(PATH + PROBLEM\n                + \"-\" + INPUT + \"-\" + ID + \".out\");\n\n        int test = in.nextInt();\n        for (int t = 1; t <= test; t++) {\n            out.print(\"Case #\" + t + \": \");\n\n            int N = in.nextInt();\n            int[] mushrooms = new int[N];\n            for (int i = 0; i < mushrooms.length; i++) {\n                mushrooms[i] = in.nextInt();\n            }\n\n            int minEat1 = 0;\n            for (int i = 0; i < mushrooms.length - 1; i++) {\n                minEat1 += Math.max(0, mushrooms[i] - mushrooms[i + 1]);\n            }\n\n            int maxSingleEat = 0;\n            for (int i = 0; i < mushrooms.length - 1; i++) {\n                maxSingleEat = Math.max(maxSingleEat,\n                        Math.max(0, mushrooms[i] - mushrooms[i + 1]));\n            }\n\n            int minEat2 = 0;\n            for (int i = 1; i < mushrooms.length; i++) {\n                minEat2 += Math.min(maxSingleEat, mushrooms[i - 1]);\n            }\n\n            out.println(minEat1 + \" \" + minEat2);\n        }\n\n        out.close();\n        in.close();\n\n        System.out.println(\"finish!\");\n    }\n}"}
{"idx":"278","func":"class Mushrooms {\npublic static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int t =  sc.nextInt();\n    StringBuilder out = new StringBuilder();\n    for ( int c = 1; c <= t; c++) {\n        int n = sc.nextInt();\n        \n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            list.add(sc.nextInt());\n        }\n        \n        \/\/ first\n        int eaten1 = 0;\n        for (int i = 0; i < list.size() -1; i++) {\n            int diff = list.get(i) - list.get(i+1);\n            \n            if (diff > 0) {\n                eaten1 += diff;\n            }\n        }\n        \n        \/\/ second\n        int rate2 = 0;\n        for (int i = 0; i < list.size() -1; i++) {\n            int diff = list.get(i) - list.get(i+1);\n            \n            if (diff > rate2) {\n                rate2 = diff;\n            }\n        }\n        \n        int eaten2 = 0;\n        for (int i = 0; i < list.size() -1; i++) {\n            if (list.get(i) < rate2) {\n                eaten2 += list.get(i);\n            } else {\n                eaten2 += rate2;\n            }\n        }\n        \n        out.append(\"Case #\").append(c).append(\": \").append(eaten1).append(\" \").append(eaten2).append(\"\\n\");\n    }\n    System.out.print(out);\n}\n}"}
{"idx":"279","func":"class C {\n    public static void main(String[] args) throws IOException {\n        String inFile = \"\/\/Users\/\/user\/\/Documents\/\/workspace\/\/Runnables\/\/src\/\/codejam\/\/y2014\/\/qualification\/\/copy\/\/A-large (1).in\";\n        \/\/        String outFile = \"\/\/Users\/\/user\/\/Documents\/\/workspace\/\/Runnables\/\/src\/\/codejam\/\/Outputs\";\n        \n                Scanner in = new Scanner(new FileReader(inFile));\n        \/\/        FileWriter out = new FileWriter(outFile);\n                int totalRounds = in.nextInt();\n                for (int round = 1; round <= totalRounds; round++) {\n                    \/\/ FORMATTING HERE\n                    int len = in.nextInt();\n                    int[] arr = new int[len];\n                    for (int i = 0; i < len; i++) {\n                        arr[i] = in.nextInt();\n                    }\n                    System.out.format(\"Case #%d: \", round);\n                    int y = 0;\n                    int z = 0;\n                    int speed = 0;\n                    int len1 = arr.length;\n                    for (int i = 0; i < len1 - 1; i++) {\n                        if(arr[i+1] < arr[i]) {\n                            int diff = arr[i] - arr[i+1];\n                            y += diff;\n                            \/\/ for method 2\n                            if (diff > speed) speed = diff;\n                        }\n                    }\n                    \n                    \/\/method 2\n                    for(int i = 0; i < len1 - 1; i++) {\n                        \n                        int ate = Math.min(speed, arr[i]);\n                        \/\/System.out.println(\"mins: \" + speed + \" \" + arr[i] + \"===> \" + ate);\n                        z += ate;\n                        \/\/System.out.println(\"ate: \" + ate);\n                    }\n                    \n                    System.out.println(y + \" \" + z);\n                }\n                in.close();\n        \/\/        out.close();\n    }\n}"}
{"idx":"280","func":"class A\n{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int test = 1; test <= t; ++test)\n        {\n            int n = in.nextInt();\n            int[] arr = new int[n];\n            for (int i = 0; i < arr.length; ++i)\n                arr[i] = in.nextInt();\n            \n            long totalWithChoice = 0;\n            for (int i = 1; i < arr.length; ++i)\n            {\n                if (arr[i] < arr[i-1])\n                    totalWithChoice += arr[i-1] - arr[i];\n            }\n            \n            long totalWithConstant = 0;\n            int maxChange = 0;\n            for (int i = 1; i < arr.length; ++i)\n                maxChange = Math.max(maxChange, arr[i-1] - arr[i]);\n            \n            for (int i = 0; i < arr.length - 1; ++i)\n            {\n                totalWithConstant += Math.min(arr[i], maxChange);\n            }\n            \n            System.out.printf(\"Case #%d: %d %d\\n\", test, totalWithChoice, totalWithConstant);\n        }\n    }\n}"}
{"idx":"281","func":"class MushroomMonster {\n\n    \/**\n     * @param args\n     * @throws FileNotFoundException \n     *\/\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"A-large.in\"));\/\/C-small-practice.in\n        PrintWriter out = new PrintWriter(\"out.txt\");\n        int T = in.nextInt();\n        for(int i=1;i<=T;i++){\n            int N = in.nextInt();\n            int[] num = new int[N];\n            for(int j=0;j<N;j++){\n                num[j] = in.nextInt();\n            }\n            int res = 0;\n            for(int i1=1;i1<num.length;i1++){\n                if(num[i1]<num[i1-1]){\n                    res+=num[i1-1]-num[i1];\n                }\n            }\n            int res1 = res;\n            int res3 = 0;\n            int speed=0;\n            for(int i2=1;i2<num.length;i2++){\n                speed=Math.max(speed, num[i2-1]-num[i2]);\n            }\n            for(int i1=1;i1<num.length;i1++){\n                res3+=Math.min(speed, num[i1-1]);\n            }\n            int res2 = res3;\n            out.println(\"Case #\"+i+\": \"+res1+\" \"+res2);\n        }\n        out.close();\n        in.close();\n    }\n\n}"}
{"idx":"282","func":"class A\n{\n\n    static int N;\n\n    public static void main(String[] args) throws IOException\n    {\n        String fileName = \"A-large\";\n        Scanner in = new Scanner(new File(fileName + \".in\"));\n        PrintWriter out = new PrintWriter(new FileWriter(fileName + \".out\"));\n\n        int noOfCases = in.nextInt();\n        for (int caseNo = 1; caseNo <= noOfCases; caseNo++)\n        {\n            N = in.nextInt();\n            int[] mushrooms = new int[N];\n            for (int i = 0; i < N; i++)\n                mushrooms[i] = in.nextInt();\n\n            int first = 0;\n            int second = 0;\n\n            int rate = 0;\n\n            for (int i = 1; i < N; i++)\n            {\n                int diff = mushrooms[i-1] - mushrooms[i];\n                if (diff > 0)\n                {\n                    rate = Math.max(rate, diff);\n                    first += diff;\n                }\n\n            }\n            for (int i = 0; i < N - 1; i++)\n            {\n                second += Math.min(rate, mushrooms[i]);\n            }\n\n            System.out.printf(\"Case #%d: %d %d%n\", caseNo, first, second);\n            out.printf(\"Case #%d: %d %d%n\", caseNo, first, second);\n        }\n        in.close();\n        out.close();\n\n    }\n\n}"}
{"idx":"283","func":"class A {\n    static public void main(String[] args)throws Exception{\n\/\/        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedReader br = new BufferedReader(new FileReader(\"input.in\"));\n        PrintWriter out = new PrintWriter(\"output.txt\");\n        int t = Integer.parseInt(br.readLine());\n        for(int z=1;z<=t;z++){\n            int n = Integer.parseInt(br.readLine());\n            String[] in = br.readLine().split(\" \");\n            int[] arr = new int[n];\n            long max=-1;\n            arr[0]=Integer.parseInt(in[0]);\n            long y=0,x=0;\n            for(int i=1;i<n;i++){\n                arr[i]=Integer.parseInt(in[i]);\n                if(arr[i]<=arr[i-1]){\n                    y+=arr[i-1]-arr[i];\n                    if(arr[i-1]-arr[i]>max)\n                        max=arr[i-1]-arr[i];\n                }\n            }\n            \n            for(int i=0;i<n-1;i++){\n                x+=Math.min(max,arr[i]);\n            }\n            out.println(\"Case #\"+z+\": \"+y+\" \"+x);\n        }\n        \n        br.close();\n        out.close();\n    }\n}"}
{"idx":"284","func":"class Mushroom{\n\n    \n    public static void main(String[] args) throws IOException\n    {\n        Mushroom solution = new Mushroom();\n\n        Scanner input = new Scanner( new File( \"A-large.in\"));\n        \/\/Scanner input = new Scanner( new File( \"DijkstraInput.txt\"));\n        \/\/Scanner input = new Scanner( new File( \"MissedCases.txt\"));\n        PrintWriter writer = new PrintWriter( \"MushroomOutput.txt\");\n        int numCases = Integer.parseInt( input.nextLine());\n        for ( int x = 0; x < numCases; x++)\n        {\n            int numPlates = Integer.parseInt(input.nextLine());\n            String tempLine = input.nextLine(); \n            \n            ArrayList<Integer> nums = new ArrayList<Integer>();\n            StringTokenizer io = new StringTokenizer(tempLine);\n            while(io.hasMoreTokens())\n            {\n                nums.add(Integer.parseInt(io.nextToken()));\n            }\n            int firstAttempt = 0;\n            int secondAttempt = 0;\n            for ( int i = 0; i < nums.size()-1; i++)\n            {\n                int first = nums.get(i);\n                int second = nums.get(i+1);\n                \n                if ( (first - second) >= 0)\n                {\n                    firstAttempt = firstAttempt + (first- second);\n                }\n                \n            }\n            int maxDrop = 0;\n            for ( int i = 0; i < nums.size() - 1; i++)\n            {\n                int first = nums.get(i);\n                int second = nums.get(i+1);\n                int tempDrop = first-second;\n                if ( tempDrop > maxDrop)\n                {\n                    maxDrop = tempDrop;\n                }\n            }\n            double rate = maxDrop\/10;\n            for ( int i = 0; i < nums.size() - 1; i++)\n            {\n                int tempStack = nums.get(i);\n                if ( tempStack >= maxDrop)\n                {\n                    secondAttempt+= maxDrop;\n                }\n                else\n                {\n                    secondAttempt += tempStack;\n                }\n            }\n            writer.println(\"Case #\" + (x+1) + \": \" + firstAttempt + \" \" + secondAttempt);\n        \n        }\n        writer.close();\n\n    }\n\n    \n\n    \n    \n\n    \n}"}
{"idx":"285","func":"class A1_A {\n\n    public static void main(String[] args) throws IOException{\n        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));\n        int tc=Integer.parseInt(in.readLine());\n        for(int i=1;i<=tc;++i){\n            int size=Integer.parseInt(in.readLine());\n            String[] ar=in.readLine().split(\" \");\n            int[] arr=new int[size];\n            for(int j=0;j<size;++j){\n                arr[j]=Integer.parseInt(ar[j]);\n            }\n            int met1=0,maxdiff=0,temp=0,met2=0;\n            for(int j=1;j<size;++j){\n                temp=arr[j-1]-arr[j];\n                if(temp>maxdiff)\n                    maxdiff=temp;\n                if(temp>0)\n                    met1+=temp;\n            }\n            for(int j=0;j<size-1;++j){\n                met2+=Math.min(arr[j], maxdiff);\n            }            System.out.println(met1+\" \"+met2);\n        }\n        in.close();\n    }\n\n}"}
{"idx":"286","func":"class Solver {\n    static Scanner input;\n    static Writer  output;\n    public static void main(String args[]) {\n        if(args.length != 1){\n            System.out.println(\"Please specify the input file\");\n            return;\n        }\n\n        String filename = args[0];\n        File f = new File(filename);\n        BufferedReader br;\n\n        if (!f.exists()) {\n            System.out.println(\"Couldn't find file \"+filename);\n            return;\n        } else if (f.isDirectory()) {\n            System.out.println(filename+\" is a directory\");\n            return;\n        }\n\n        try {\n            br = new BufferedReader (new FileReader (f));\n            input = new Scanner(br);\n        } catch (IOException iox){\n            System.out.println(\"Problem reading \" + filename );\n        }\n\n        try {\n            output = new BufferedWriter(\n                        new OutputStreamWriter(\n                            new FileOutputStream(filename+\".out\"), \"utf-8\"));\n            int T = input.nextInt();\n            for(int caseNum=0; caseNum<T; caseNum++){\n                int N = input.nextInt();\n                long[] m = new long[N];\n            \n                for (int i=0; i<N; i++) {\n                    m[i] = input.nextInt();\n                }\n            \n                long prev = m[0];\n                long maxDelta = 0;\n                long sumDelta = 0;\n                for(int i=1; i<N; i++){\n                    long delta = m[i]-prev;\n                    prev = m[i];\n                    if(delta < 0){\n                        maxDelta  = Math.max(maxDelta, Math.abs(delta));\n                        sumDelta += Math.abs(delta);\n                    }\n                }\n            \n                long sumTwo = 0;\n                for(int i=0; i<N-1; i++){\n                    sumTwo += Math.min(m[i],maxDelta);\n                }\n            \n                output.write(\"Case #\"+(caseNum+1)+\": \");\n                output.write(\"\"+sumDelta);\n                output.write(\" \");\n                output.write(\"\"+sumTwo);\n                output.write(\"\\n\");\n            }\n        } catch (IOException ex) {\n            System.out.println(\"Couldn't open an output file\");\n            return;\n        }\n\n        try{\n            output.close();\n            input.close();\n        } catch (IOException ex) {\n        }\n    }\n}"}
{"idx":"287","func":"class Welcome {\n    public static void main(String[] args) throws Exception {\n        FileInputStream fis = null;\n        BufferedReader reader = null;\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"\/home\/luong\/Downloads\/\"+args[0]+\".out\", true)));\n\n        String s;\n        fis = new FileInputStream(\"\/home\/luong\/Downloads\/\"+args[0]+\".in\");\n        reader = new BufferedReader(new InputStreamReader(fis));\n        s = reader.readLine();\n        int nbLoop = Integer.parseInt(s);\n        for (int i = 1; i <= nbLoop; i++){\n            String ch =\"\";\n            int n = Integer.parseInt(reader.readLine());\n            int[] m = new int[n];\n            StringTokenizer st = new StringTokenizer(reader.readLine());\n            for(int j=0; j<n; j++){\n                m[j] = Integer.parseInt(st.nextToken());\n            }\n            int y = 0;\n            int z = 0;\n            int v = 0;\n            for(int j=1; j<n; j++){\n                if(m[j]<m[j-1]){\n                    y += m[j-1] - m[j];\n                    v = Math.max(v, m[j-1] - m[j]); \n                }\n            }\n            for(int j=1; j<n; j++){\n                z += Math.min(m[j-1], v);\n            }\n            \/\/ TODO Code goes here\n            bw.write(\"Case #\"+i+\": \"+y+\" \"+z);\n            bw.newLine();\n        }\n        reader.close();\n        fis.close();\n        bw.close();\n    }\n}"}
{"idx":"288","func":"class R1A {\n    \n    public static void main(String[] args) throws IOException, FileNotFoundException {\n        \/\/ TODO Auto-generated method stub\n        \/\/Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"other\/gcj2015\/A-large.in\"))));\n        PrintWriter ou = new PrintWriter(\"other\/gcj2015\/R1A.txt\");\n        \n        int res,rep,i,j,n,rate;\n        long ans1,ans2;\n        int[] m = new int[10001];\n        \n        \n        res = sc.nextInt();\n        for(rep=1;rep<=res;rep++){\n            \n            n = sc.nextInt();\n            ans1 = 0; rate = 0;\n            \n            for(i=0;i<n;i++) {\n                m[i] = sc.nextInt();\n                \n                if (i>0) {\n                    ans1 += Math.max(0, m[i-1]-m[i]);\n                    if (m[i-1]-m[i]>rate) rate = m[i-1]-m[i];\n                }\n            }\n            \n            ans2 = 0;\n            for(i=0;i<n-1;i++) {\n                if (m[i]>=rate) ans2 += rate;\n                else ans2 += m[i];\n            }\n            \n            System.out.printf(\"Case #%d: %d %d\\n\",rep,ans1,ans2);\n            ou.printf(\"Case #%d: %d %d\\n\",rep,ans1,ans2);\n        }\n        \n        ou.close();\n    }\n}"}
{"idx":"289","func":"class Mushroom {\n    public static final PrintStream out = System.out;\n    public static final BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    public int numCases;\n    \n    public static void main(String[] args) throws Exception {\n        Mushroom r = new Mushroom();\n        r.numCases = Integer.parseInt(Mushroom.in.readLine().trim());\n        for (int i = 1; i <= r.numCases; i++) {\n            Mushroom.out.print(\"Case #\" + i + \": \");\n            String line = Mushroom.in.readLine();\n            Scanner scan = new Scanner(line);\n            int N = scan.nextInt();\n            line = Mushroom.in.readLine();\n            scan = new Scanner(line);\n            int prev = scan.nextInt();\n            int max = 0;\n            int sum = 0;\n            int[] m = new int[N];\n            m[0] = prev;\n            for (int i2 = 1; i2 < N; i2++) {\n                int next = scan.nextInt();\n                m[i2] = next;\n                int diff = prev - next;\n                if (diff > 0) sum += diff;\n                if (diff > max) max = diff;\n                prev = next;\n            }\n            int res = 0;\n            for (int i1 = 0; i1 < N-1; i1++) {\n                res += Math.min(max, m[i1]);\n            }\n            System.out.println(sum + \" \" + res);\n        }\n    }\n\n}"}
{"idx":"290","func":"class Round1A15A {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int nCases = scanner.nextInt();\n        for(int z = 0; z < nCases; z++)\n        {\n            int nPeeks = scanner.nextInt();\n            int total = 0;\n            double maxRate = 0;\n            int[] counts = new int[nPeeks];\n            int prev = scanner.nextInt();\n            counts[0] = prev;\n            for(int i = 1; i < nPeeks; i++)\n            {\n                int cur = scanner.nextInt();\n                if(prev > cur)\n                {\n                    int diff = prev - cur;\n                    total += diff;\n                    maxRate = Math.max(maxRate, diff \/ 10d);\n                }\n                \n                counts[i] = cur;\n                prev = cur;\n            }\n            int total1 = 0;\n            for(int i = 1; i < nPeeks; i++)\n            {\n                total1 += Math.min(Math.ceil(maxRate * 10), counts[i - 1]);\n            }\n            System.out.println(\"Case #\" + (z+1) + \": \" + total + \" \" + total1);\n        }\n        scanner.close();\n    }\n\n}"}
{"idx":"291","func":"class Problem1 {\n    \n    public static void main(String[] argv) throws IOException {\n        Scanner in = new Scanner(new FileReader(\"\/Users\/ankurgupta\/Desktop\/codeJam\/A-large.in\"));\n        Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"\/Users\/ankurgupta\/Desktop\/codeJam\/A-large.out\"), \"utf-8\"));\n        int T = in.nextInt();\n        int cases = 0;\n        while (T-- > 0) {\n            int N = in.nextInt();\n            int arr[] = new int[N];\n            for (int i = 0; i < N; i++) {\n                arr[i] = in.nextInt();\n            }\n            long ans1 = 0;\n            long maxDiff = Long.MIN_VALUE;\n            for (int i = 0; i < N - 1; i++) {\n                long temp = Math.max(0, arr[i] - arr[i + 1]);\n                ans1 += temp;\n                maxDiff = Math.max(maxDiff, temp);\n            }\n            long ans2 = 0;\n            long cur = 0;\n            for (int i = 0; i < N - 1; i++) {\n                cur = Math.max(0, arr[i] - maxDiff);\n                ans2 += Math.max(0, arr[i] - cur);\n            }\n            writer.write(\"Case #\" + ++cases + \": \" + ans1 + \" \" + ans2 + \"\\n\");\n        }\n        writer.close();\n    }\n\n}"}
{"idx":"292","func":"class ProblemASmall {\n\n    \n    public static void main(String[] args) throws IOException {\n        \n        \n        \n\/\/        File inf = new File(\"input.txt\");\n\/\/        File inf = new File(\"A-small-attempt0.in\");\n        File inf = new File(\"A-large.in\");\n        File outf = new File(\"output.txt\");\n        Scanner scanner = new Scanner(inf);\n        BufferedWriter out = new BufferedWriter(new FileWriter(outf));\n        int caseNum = scanner.nextInt();\n        for (int i = 1; i <= caseNum; i++) {\n            String outStr = \"Case #\" + i + \": \";\n            \/\/ TODO Auto-generated method stub\n\/\/            int ans1 = 0;\n\/\/            int ans2 = 0;\n            int N = scanner.nextInt();\n            int[] list = new int [N];\n            for (int j = 0; j < list.length; j++) {\n                list[j] = scanner.nextInt();\n            }\n            BigInteger ans = new BigInteger(\"0\");\n            for (int i1 = 1; i1 < list.length; i1++) {\n                if (list[i1] < list[i1-1]) {\n                    int num = list[i1-1] - list[i1];\n                    ans = ans.add(new BigInteger(Integer.toString(num)));\n                }\n            }\n            BigInteger ans1 = ans;\n            int maxInter = 0;\n            for (int i1 = 1; i1 < list.length; i1++) {\n                if (list[i1] < list[i1-1] && list[i1-1] - list[i1] > maxInter) {\n                    maxInter = list[i1-1] - list[i1];\n                }\n            }\n            BigInteger ans3 = new BigInteger(\"0\");\n            for (int i2 = 0; i2 < list.length-1; i2++) {\n                int num = (list[i2]  < maxInter) ? list[i2] : maxInter;\n                ans3 = ans3.add(new BigInteger(Integer.toString(num)));\n                \n            }\n            BigInteger ans2 = ans3;\n            outStr += ans1 + \" \" + ans2;\n            System.out.println(outStr);\n            out.write(outStr + \"\\n\");\n        }\n\/\/        in.close();\n        scanner.close();\n        out.close();\n    }\n\n}"}
{"idx":"293","func":"class ProblemA {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"LargeProblemA.out\"));\n        int numTestCases = Integer.parseInt(br.readLine());\n        for (int i = 1; i <= numTestCases; i++){\n            int arrsize = Integer.parseInt(br.readLine());\n            String line = br.readLine();\n            String[] list = line.split(\" \");\n            Integer[] result = new Integer[list.length];\n            int minEaten = 0;\n            int minRate = 0;\n            for (int iii = 0; iii < arrsize; iii++) {\n                result[iii] = Integer.parseInt(list[iii]);\n                if (iii > 0) {\n                    int rate = Math.max(0, result[iii-1] - result[iii]);\n                    minEaten += rate;\n                    minRate = Math.max(minRate, rate);\n                }\n            }\n            int totalEaten = 0;\n            for(int jjj = 0; jjj < arrsize-1; jjj++) {\n                totalEaten += Math.min(minRate, result[jjj]);\n            }\n            \n            bw.write(\"Case #\" + i + \": \" + minEaten + \" \" + totalEaten + \"\\n\");\n        }\n        br.close();\n        bw.close();\n    }\n}"}
{"idx":"294","func":"class D {\n    public static void main(String[] args) throws FileNotFoundException {\n        final Scanner scanner = new Scanner(new File(\"C:\\\\Users\\\\Samuel\\\\Downloads\\\\input.txt\"));\n        Integer cases = Integer.parseInt(scanner.nextLine());\n        for (Integer i = 0; i < cases; i++) {\n            Integer readings = Integer.parseInt(scanner.nextLine());\n            String[] vals = (scanner.nextLine()).split(\" \");\n            ArrayList<Integer> values = new ArrayList<Integer>();\n            for (String v : vals) {\n                values.add(Integer.parseInt(v));\n            }\n            Integer maxDiff = 0;\n            Integer totalDiff = 0;\n            for (Integer j = 0; j < values.size() - 1; j++) {\n                Integer diff = values.get(j) - values.get(j + 1);\n                if (diff > maxDiff) {\n                    maxDiff = diff;\n                }\n                if (diff > 0) {\n                    totalDiff += diff;\n                }\n            }\n            Integer eaten = 0;\n            for (Integer j = 0; j < values.size() - 1; j++) {\n                if (values.get(j) < maxDiff) {\n                    eaten += values.get(j);\n                } else {\n                    eaten += maxDiff;\n                }\n            }\n            System.out.println(\"Case #\" + (i + 1) + \": \" + totalDiff + \" \" + eaten);\n        }\n    }\n}"}
{"idx":"295","func":"class shroom {\n    public static void main(String[] args) throws Exception{\n        Scanner in = new Scanner(new File(\"A-large.in\"));\n        FileWriter out = new FileWriter(new File(\"aOut.txt\"));\n        int numcases = in.nextInt();\n        for(int casenum = 1; casenum  <= numcases; casenum++) {\n            int numtimes = in.nextInt();\n            int[] map =  new int[numtimes];\n            for(int i = 0; i < numtimes; i++) {\n                map[i] = in.nextInt();\n            }\n            int smallestRate = 0;\n            \/\/method 1\n            int method1 = 0;\n            for(int i = 1; i < map.length; i++) {\n                if(map[i] < map[i - 1]) {\n                    method1 += map[i - 1] - map[i];\n                    smallestRate = Math.max(smallestRate, map[i-1] - map[i]);\n                }\n            }\n            System.out.println(\"method1: \"+method1);\n\n            \/\/method2\n            int method2 = 0;\n            double rate = smallestRate;\n                for(int i = 0; i < map.length - 1; i++) {\n                    method2 += Math.min(map[i], rate);\n                }\n            System.out.println(\"method2: \"+method2);\n            out.write(\"Case #\"+casenum+\": \"+method1+\" \"+method2+\"\\n\");\n        }\n        out.close();\n    }\n}"}
{"idx":"296","func":"class CodeJamR1 {\n    private static String in;\n    private static String out;\n    public static void main(String[] args) throws IOException{\n\n\n        BufferedReader inputStream = new BufferedReader(new FileReader(\"in.txt\"));\n        BufferedWriter outputStream = new BufferedWriter(new FileWriter(\"out.txt\"));\n        in = inputStream.readLine();\n        int testCaseNum = Integer.parseInt(in);\n        for(int i = 0; i < testCaseNum; i++){\n            in = inputStream.readLine();\n            int size = Integer.parseInt(in);\n            int[] array = new int[size];\n            in = inputStream.readLine();\n            String[] split = in.split(\" \");\n            int last = 0;\n            int count1 = 0;\n            double rate = 0;\n            for(int j = 0; j < (size-1); j++){\n                if( Integer.parseInt(split[j]) - Integer.parseInt(split[j+1]) > 0 ) {\n                    count1 += Integer.parseInt(split[j]) - Integer.parseInt(split[j+1]);\n                }\n                if( ( Integer.parseInt(split[j]) - Integer.parseInt(split[j+1]) > rate ) ) {\n                    rate = Integer.parseInt(split[j]) - Integer.parseInt(split[j+1]);\n                }\n            }\n            int count2 = 0;\n            for(int j = 0; j < (size-1); j++){\n                if( Integer.parseInt(split[j]) < rate )\n                    count2 += Integer.parseInt(split[j]);\n                else\n                    count2 += rate;\n            }\n           outputStream.write(\"Case #\" + (i+1) + \": \" + count1 + \" \" + (int)count2);\n           outputStream.newLine();\n           }\n        inputStream.close();\n        outputStream.close();\n\n\n    }\n} \/\/END COMPETITION CLASS"}
{"idx":"297","func":"class Mush {\n\n    public static void main(String...args) {\n        \n        \n        \n        Scanner reader = new Scanner(System.in);\n        int caseCount = Integer.parseInt(reader.nextLine());\n        \n    \n        \/\/for each use case\n        for(int caseId = 0; caseId < caseCount; caseId++) {\n            \n            int first = 0;\n            int second = 0;\n            \n            \n            int count = Integer.parseInt(reader.nextLine());\n            \n            ArrayList<Integer> T = new ArrayList<Integer>();\n            \n            int last = 0;\n            int lowest = 0;\n            for(int i = 0; i < count; i++) {\n                \n                int cur = reader.nextInt();\n                int diff = cur - last;\n                \n                T.add(cur);\n                \n                if(diff < 0) {\n                    \n                    first += Math.abs(diff);\n                    \n                    if(diff < lowest) {\n                        lowest = diff;\n                    }\n                }\n                \n                last = cur;\n            }\n            \n            int highest = Math.abs(lowest);\n            last = 0;\n            for(int i = 0; i < (count - 1); i++) {\n                \n                int cur = T.get(i);\n                second += (cur > highest) ? highest : cur;\n                \n                last = cur;\n            }\n\/\/            \n\/\/            if(last != 0 && diff != 0) {\n\/\/                second = second - last;\n\/\/            }\n            \n            if(first < 0 || second < 0) {\n                System.err.println(\"Case #\"+ (caseId + 1));\n            }\n            \n            System.out.println(\"Case #\"+ (caseId + 1) + \": \"+ first + \" \" + second);\n            reader.nextLine();\n        }\n        \n        \n        \n        \n    }\n    \n    \n}"}
{"idx":"298","func":"class MushroomMonster {\n\n    public static void main(String[] args) throws NumberFormatException,\n            IOException {\n        BufferedReader br = new BufferedReader(new FileReader(args[0]));\n\n        int numCases = Integer.parseInt(br.readLine());\n\n        for (int i = 0; i < numCases; i++) {\n            int intervals = Integer.parseInt(br.readLine());\n            \n            String[] sv = br.readLine().split(\" \");\n            \n            int[] iv = new int[intervals];\n            \n            for (int j = 0; j < intervals; j++) {\n                iv[j] = Integer.parseInt(sv[j]);\n            }\n            \n            int y = 0, a = 0, max = 0, z = 0;\n            for (int j = 0; j < intervals - 1; j++) {\n                y += (a = iv[j] - iv[j + 1]) > 0 ? a : 0;\n                max = a > max ? a : max;\n            }\n            \n            for (int j = 0; j < intervals - 1; j++) {\n                z += (iv[j] < max) ? iv[j] : max;\n            }\n            \n            System.out.println(\"Case #\" + (i + 1) + \": \" + y + \" \" + z);\n        }\n\n    }\n\n}"}
{"idx":"299","func":"class A {\n    public static void main(String[] args) {\n        try{\n            FileReader fr = new FileReader(\"E:\/codejam\/A-large.in\");            \/\/\n            BufferedReader br = new BufferedReader(fr);\n            FileWriter fw =new FileWriter(\"E:\/codejam\/out.txt\");\n            BufferedWriter bw = new BufferedWriter(fw);\n            int T = Integer.parseInt(br.readLine());\n            for(int x=0;x<T;x++){\n                int N = Integer.parseInt(br.readLine());\n                long first=0,second=0,diff=0,maxx_diff=0;\n                StringTokenizer st = new StringTokenizer(br.readLine());\n                int[] n = new int[N];\n                for(int i=0;i<N;i++){\n                    n[i] = Integer.parseInt(st.nextToken());\n                }\n                for(int i=0;i<N-1;i++){\n                    if(n[i]>n[i+1]) {\n                        diff = (n[i]- n[i+1]);\n                        first += diff;\n                        if(diff>maxx_diff){\n                            maxx_diff=diff;\n                        }\n                    }\n                }\n                for(int i=0;i<N-1;i++){\n                    if(n[i]>maxx_diff){\n                        second+=maxx_diff;\n                    }\n                    else{\n                        second+=n[i];\n                    }\n                }\n                String ans=\"Case #\" + (x+1)+\": \"+first+\" \"+second;\n                bw.write(ans);\n                bw.newLine();\n            }\n            bw.flush();\n            bw.close();\n        }catch(Exception e){e.printStackTrace();}\n    }\n}"}
{"idx":"300","func":"class A {\n\n    public static void main(String[] args) throws Exception{\n        Scanner in = new Scanner(new File(\"A.in\"));\n        FileWriter out = new FileWriter(\"aout.txt\");\n        \n        int T = in.nextInt();\n        \n        for (int i = 1; i <= T; i++) {\n            int N = in.nextInt();\n            int[] m = new int[N];\n            int min1 = 0;\n            for (int j = 0; j < N; j++) {\n                m[j] = in.nextInt();\n            }\n            \n            for (int j = 1; j < N; j++) {\n                min1 += (m[j] < m[j-1]) ? m[j - 1] - m[j] : 0;\n            }\n            \n            int minRate = 0;\n            for (int j = 1; j < N; j++) {\n                minRate = Math.max(minRate, m[j-1] - m[j]);\n            }\n            \n            int min2 = 0;\n            for (int j = 0; j < N - 1; j++) {\n                min2 += Math.min(m[j], minRate);\n            }\n            \n            out.write(\"Case #\" + i + \": \" + min1 + \" \" + min2 + \"\\n\");\n            System.out.print(\"Case #\" + i + \": \" + min1 + \" \" + minRate + \"\\n\");\n            System.out.print(\"Case #\" + i + \": \" + min1 + \" \" + min2 + \"\\n\");\n        }\n        in.close();\n        out.close();\n    }\n\n}"}
{"idx":"301","func":"class Problem1 {\n    public static void main(String[] args) throws IOException {\n        Scanner s = null;\n        Scanner lineScan = null;\n        int size;\n        int currentSize;\n        String line;\n        File output = new File(\"output.txt\");\n        PrintWriter printer = new PrintWriter(output);\n        s = new Scanner(new BufferedReader(new FileReader(\"A-large.in\")));\n        size = s.nextInt();\n        s.nextLine();\n        for (int i = 0; i < size; i++) {\n            currentSize = s.nextInt();\n            s.nextLine();\n            int[] plateValues = new int[currentSize];\n            line = s.nextLine();\n            lineScan = new Scanner(line);\n            int j = 0;\n            while (lineScan.hasNextInt()) {\n                plateValues[j] = lineScan.nextInt();\n                j++;\n            }\n            int firstMethod = 0;\n            int fastestRate = 0;\n            for (int m = 1; m < currentSize; m++) {\n                if (plateValues[m] < plateValues[m - 1]) {\n                    firstMethod += plateValues[m - 1] - plateValues[m];\n                    fastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);\n                }\n            }\n            int secondMethod = 0;\n            for (int m = 0; m < currentSize - 1; m++) {\n                if (plateValues[m] > fastestRate) {\n                    secondMethod += fastestRate;\n                } else {\n                    secondMethod += plateValues[m];\n                }\n            }\n            printer.print(\"Case #\" + (i + 1) + \": \");\n            printer.println(firstMethod + \" \" + secondMethod);\n        }\n        printer.close ();   \n    }\n}"}
{"idx":"302","func":"class Mushroom {\n\n    public Mushroom() {\n        \/\/ TODO Auto-generated constructor stub\n    }\n\n    public static void main(String[] args) throws IOException{\n        BufferedReader input = new BufferedReader(new FileReader(new File(\"input.in\")));\n        BufferedWriter output = new BufferedWriter(new FileWriter(new File(\"output.txt\")));\n        \n        String line = null;\n        \n        line = input.readLine();\n        int num_of_cases = Integer.parseInt(line);\n        \n        \n        for(int i=0;i<num_of_cases;i++) {\n            line = input.readLine();\n            int plate_num = Integer.parseInt(line);\n            int[] plates = new int[plate_num];\n            \n            line = input.readLine();\n            String[] splited = line.split(\"\\\\s+\");\n            for(int j=0;j<plate_num;j++) {\n                plates[j] = Integer.parseInt(splited[j]);\n            }\n\n            \/\/1st situation\n            int total_1 = 0;\n            for(int j=0;j<plate_num-1;j++) {\n                if(plates[j]>plates[j+1]) {\n                    total_1+=plates[j]-plates[j+1];\n                }\n            }\n            \n            \/\/2nd situation\n            int total_2 = 0;\n            int[] diff = new int[plate_num-1];\n            int max_diff=0;\n            for(int j=0;j<plate_num-1;j++) {\n                if(plates[j]>plates[j+1]) {\n                    diff[j] = plates[j]-plates[j+1];\n                    if(max_diff<diff[j]) {\n                        max_diff=diff[j];\n                    }\n                }\n            }\n            \n            for(int j=0;j<plate_num-1;j++) {\n                if(plates[j]<max_diff) {\n                    total_2+=plates[j];\n                }else {\n                    total_2+=max_diff;\n                }\n            }\n\n            \n            output.write(\"Case #\"+(i+1)+\": \"+total_1+\" \"+total_2+\"\\n\");\n        }\n        input.close();\n        output.close();\n    }\n    \n}"}
{"idx":"303","func":"class MushrooMonster {\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        \n        \/\/System.setIn(new FileInputStream(\"a-l.in\"));\n        \/\/System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(\"a_l.out\")), true));\n                \n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        int totalCaseNumber = Integer.parseInt( reader.readLine() );\n        for(int caseNo=1 ; caseNo<=totalCaseNumber ; caseNo++ ) {\n            String line = reader.readLine();\n            line = reader.readLine();\n            String[] parts = line.split(\" \");\n\n            int[] m = new int[parts.length];\n            for(int i=0 ; i<parts.length ; i++ ) {\n                m[i] = Integer.parseInt(parts[i]);\n            }\n            \n            int res1 = 0, res2 = 0, largeDiff = 0;\n            for(int i=1 ; i<m.length ; i++ ) {\n                if( m[i] < m[i-1]) {\n                    int diff = m[i-1] - m[i];\n                    res1 += diff;\n                    largeDiff = Math.max(largeDiff, diff);\n                }\n            }\n\n            \/\/int rate = largeDiff % 10 == 0 ? largeDiff\/10 : (largeDiff\/10) + 1;\n            \/\/int maxEat = rate * 10;\n            for(int i=0 ; i<m.length - 1 ; i++ ) {\n                if( m[i] <= largeDiff ) {\n                    res2 += m[i];\n                } else {\n                    res2 += largeDiff;\n                }\n            }\n            \n            System.out.println(\"Case #\" + caseNo + \": \" + res1 + \" \" + res2);\n        }\n        reader.close();\n    }\n}"}
{"idx":"304","func":"class A {\n    public static void main(String[] args) throws Exception {\n        PrintWriter writer = new PrintWriter(new FileOutputStream(\"A.out\"));\n        Scanner scanner = new Scanner(new FileInputStream(\"A.in\"));\n        \/\/PrintWriter writer = new PrintWriter(System.out);\n        \/\/Scanner scanner = new Scanner(System.in);\n\n        int T = scanner.nextInt();\n        for (int t = 1; t <= T; t++) {\n            int N = scanner.nextInt();\n            int[] m = new int[N];\n            for (int i = 0; i < N; i++) {\n                m[i] = scanner.nextInt();\n            }\n            int s1 = 0;\n            int maxDiff = 0;\n            for (int i = 1; i < N; i++) {\n                if (m[i-1] > m[i]) {\n                    int diff = m[i-1] - m[i];\n                    s1 += diff;\n                    if (diff > maxDiff) {\n                        maxDiff = diff;\n                    }\n                }\n            }\n            int s2 = 0;\n            for (int i = 0; i < N-1; i++) {\n                if (m[i] < maxDiff) {\n                    s2 += m[i];\n                } else {\n                    s2 += maxDiff;\n                }\n            }\n            writer.println(String.format(\"Case #%d: %d %s\", t, s1, s2));\n        }\n        scanner.close();\n        writer.close();\n    }\n}"}
{"idx":"305","func":"class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(\n                        System.in\n                        )));\n        int T = sc.nextInt();\n        for (int t = 1; t <= T; t++) {\n            int N = sc.nextInt();\n            int[] m = new int[N];\n            for (int i = 0; i < N; i++) {\n                m[i] = sc.nextInt();\n            }\n\n            int rate = 0;\n            for (int i = 1; i < N; i++) {\n                int diff = m[i-1] - m[i];\n                if (diff > rate) {\n                    rate = diff;\n                }\n            }\n\n            int c1 = 0, c2 = (m[0] < rate) ? m[0] : rate;\n\n            for (int i = 1; i < N; i++) {\n                if (m[i] < m[i-1]) {\n                    c1 += m[i-1] - m[i];\n                }\n                if (i < N - 1) c2 += (m[i] < rate) ? m[i] : rate;\n            }\n\n            System.out.printf(\"Case #%d: %d %d\\n\", t, c1, c2);\n        }\n    }\n}"}
{"idx":"306","func":"class mushrooms {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"A-large (1).in\"));\n\n        int t = in.nextInt();\n\n        for (int caseNum = 1; caseNum <= t; caseNum++) {\n            int intervals = in.nextInt();\n            int method1 = 0, method2 = 0;\n\n            int[] mushrooms = new int[intervals];\n\n            for (int i = 0; i < intervals; i++) {\n                mushrooms[i] = in.nextInt();\n            }\n            int rate = Integer.MIN_VALUE;\n            \n            for (int i1 = 1; i1 < mushrooms.length; i1 ++) {\n                rate = Math.max(rate, mushrooms[i1 - 1] - mushrooms[i1]);\n            }\n\n            int maxRate = rate;\n\n            for (int i = 1; i < intervals; i++) {\n                method1 += Math.max(0, mushrooms[i - 1] - mushrooms[i]);\n                method2 += Math.min(maxRate, mushrooms[i - 1]);\n            }\n\n            System.out.println(\"Case #\" + caseNum + \": \" + method1 + \" \" + method2);\n        }\n    }\n}"}
{"idx":"307","func":"class mushmonster {\n\n\n      public static void main (String [] args) throws IOException {\n        \/\/ Use BufferedReader rather than RandomAccessFile; it's much faster\n        BufferedReader f = new BufferedReader(new FileReader(\"A-large(1).in\"));\n                                                      \/\/ input file name goes above\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"mush.out.txt\")));\n        \/\/ Use StringTokenizer vs. readLine\/split -- lots faster\n        StringTokenizer st = new StringTokenizer(f.readLine());\n                              \/\/ Get line, break into tokens\n        \n       \/\/enter program here\n        \n        String answer =\"\";\n        int numCases = Integer.parseInt(st.nextToken());\n        for (int i = 0; i<numCases;i++){\n           st = new StringTokenizer(f.readLine());\n           LinkedList<Integer> arr = new LinkedList();\n            int numStacks = Integer.parseInt(st.nextToken());\n            st = new StringTokenizer(f.readLine());\n            int totalDrop = 0;\n            int maxDrop = 0;\n            int lastNum = 0;\n            int newNum = 0;\n            for (int j = 0;j<numStacks;j++){\n                lastNum = newNum;\n                newNum = Integer.parseInt(st.nextToken());\n                arr.add(newNum);\n                if (lastNum-newNum>maxDrop){\n                    maxDrop = lastNum-newNum;\n                }\n                if (lastNum-newNum>0){\n                    totalDrop +=lastNum-newNum;\n                }\n            }\n            \n            int totMaxDrop =0;\n            for (int j = 0; j<arr.size()-1;j++){\n                if (arr.get(j)-maxDrop<0){\n                    totMaxDrop+=arr.get(j);\n                }else{\n                    totMaxDrop+=maxDrop;\n                }\n            }\n            \n            \n            \n            \n            System.out.println(\"Case #\"+(i+1)+\": \"+totalDrop+\" \"+totMaxDrop);\n            out.println(\"Case #\"+(i+1)+\": \"+totalDrop+\" \"+totMaxDrop);\n        }\n        \/\/ answer output\n\n        out.close();        \n        System.exit(0);                               \/\/ don't omit this!\n      }\n\n}"}
{"idx":"308","func":"class Gcj {\n  private int T;\n  private BufferedReader buff;\n  private int[] mashrooms;\n  final static private boolean IS_DEBUG=false;\n\n  Gcj(){\n    buff=new BufferedReader(new InputStreamReader(System.in));\n    try{\n      T=Integer.parseInt(buff.readLine());\n    }\n    catch(Exception e){\n      System.err.println(e);\n    }\n  }\n\n  public static final void main(final String[] args) {\n    Gcj r = new Gcj();\n    for(int i=0; i<r.T; i++){\n      System.out.print(String.format(\"Case #%d: \", i+1));\n      try{\n      \/\/ INIT VARIABLES HERE\n      r.mashrooms=new int[Integer.parseInt(r.buff.readLine())];\n      String[] line=r.buff.readLine().split(\" \");\n      for(int i1=0; i1<r.mashrooms.length; i1++) r.mashrooms[i1]=Integer.parseInt(line[i1]);\n      if(Gcj.IS_DEBUG){\n      System.err.println(\"\\n\"+\"debug: \"+\"show args\");\n      System.err.format(\"       \"+\"mashrooms=%s\\n\", Arrays.toString(r.mashrooms));\n    }\n    }\n    catch(Exception e){\n      System.err.println(e);\n    }\n      int res=0;\n    for(int i2=0; i2<r.mashrooms.length-1; i2++)\n      if(r.mashrooms[i2]>r.mashrooms[i2+1]) res+=r.mashrooms[i2]-r.mashrooms[i2+1];\n    System.out.print(res+\" \");\n    int res1=0;\n    int rate=0;\n    for(int i1=0; i1<r.mashrooms.length-1; i1++){\n      int diff=r.mashrooms[i1]-r.mashrooms[i1+1];\n      if(diff>rate) rate=diff;\n    }\n    \/\/ System.out.println(\"rate=\"+rate);\n    for(int i3=0; i3<r.mashrooms.length-1; i3++){\n      res1+=(r.mashrooms[i3]>rate)?rate:r.mashrooms[i3];\n    }\n    System.out.println(res1);\n    }\n    return;\n  }\n}"}
{"idx":"309","func":"class MushroomMonster {\n\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n\n\n        ArrayList<Integer> arraylist = new ArrayList<Integer>();\n        int[] array;\n\n\n        Scanner sc = new Scanner(new File(\"MushroomMonster.in\"));\n        \/\/PrintWriter pw = new PrintWriter(\"StandingOvation.out\");\n        PrintWriter pw = new PrintWriter(new File(\"MushroomMonster.out\"));\n        \/\/PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(\"StandingOvation.out\")));\n\n        int trials = sc.nextInt();\n\n        for(int i = 0; i<trials;i++){\n            int size = sc.nextInt();\n            array = new int[size];\n\n            for(int j=0; j<size; j++){\n                array[j] = sc.nextInt();\n                \/\/System.out.println(\"\" + array[j]);\n\n            }\n            int answer1 = 0;\n            int difference = 0;\n            int answer2 = 0;\n\n            for(int k=0; k<size-1; k++){\n                if(array[k] > array[k+1]) {\n                    answer1 += array[k] - array[k+1]; \n                    if(array[k] - array[k+1] > difference) difference = array[k] - array[k+1];\n                }\n                \/\/if(array[k] < array[k+1]) ;\n\n            }\n            \n            for(int x=0; x<size-1; x++){\n                if(array[x] >= difference) answer2 += difference;\n                else answer2 += array[x];\n                \n                \n            }\n            \n\n\n            System.out.println(\"Case #\" + (i+1) + \": \" + answer1 + \" \" + answer2);\n            pw.println(\"Case #\" + (i+1) + \": \" + answer1 + \" \" + answer2);\n            \n            \n        }\n        \n        pw.close();\n        sc.close();\n    }\n\n\n\n}"}
{"idx":"310","func":"class mushroom\n{\n    public static void main(String[] args)throws IOException\n    {\n        Scanner scan = new Scanner(new File(\"input.txt\"));\n        \/\/Scanner scan = new Scanner(System.in);\n        FileWriter fw = new FileWriter(\"output.txt\");\n        ArrayList<String> output = new ArrayList<String>();\n\n        int test_cases = scan.nextInt();\n\n        for(int i=0; i<test_cases; i++)\n        {\n            int n = scan.nextInt();\n            int[] middle = new int[n];\n            int eaten_any_time = 0;\n            int eaten_constant = 0;\n            int eating_rate = 0; \n            int eaten = 0;\n\n            int max_diff = 0;\n            \n            middle[0] = scan.nextInt();\n            eating_rate = middle[0];\n            eaten_constant = 0;\n\n            \/\/special case: start and end\n            if(n == 2)\n            {\n                middle[1] = scan.nextInt();\n                if(middle[1] <= middle[0])\n                {\n                    eaten_constant = middle[0] - middle[1];\n                    eaten_any_time = middle[0] - middle[1];\n                }    \n            }\n            else\n            {\n                \/\/eaten_constant = middle[0];\n\n                for(int j=1; j<n; j++)\n                {\n                    middle[j] = scan.nextInt();\n                    \n                    \/\/any # at any time min number of mushrooms eatin\n                    if(middle[j] >= middle[j-1])\n                        eaten = 0;\n                    else\n                        eaten = middle[j-1] - middle[j];\n\n                    if(middle[j] < middle[j-1])\n                        eaten_any_time += eaten;\n\n                    \/\/find max diff\n                    int diff = difference(middle[j-1], middle[j]);\n                    if(max_diff < diff)\n                        max_diff = diff;\n                }\n\n                for(int j=0; j<n-1; j++)\n                {\n                    if(middle[j] <= max_diff)\n                        eaten_constant += middle[j];\n                    else \n                        eaten_constant += max_diff;\n                }\n            }\n                \n            \n            output.add(\"Case #\" + (i+1) + \": \" + eaten_any_time + \" \" + eaten_constant);\n        }\n\n        for(String s : output)\n        {\n            fw.write(s + \"\\n\");\n            \/\/System.out.println(s);\n        }\n        fw.close();\n    }\n\n    public static int difference(int x, int y)\n    {\n        if(x > y)\n            return x-y;\n        else return 0;\n    }\n}"}
{"idx":"311","func":"class ProblemA {\n    public static void main(String[] args){\n        try {\n            String input = \"C:\\\\Users\\\\Qin\\\\Desktop\\\\A-large.in\";\n            String output = \"C:\\\\Users\\\\Qin\\\\Desktop\\\\A-large.out\";\n            FileInputStream fis= new FileInputStream(input);\n            FileWriter fw = new FileWriter(output);\n            Scanner sc = new Scanner(fis);\n            \n            int num = sc.nextInt();\n            System.out.println(num);\n            for(int i = 0; i < num; i++){\n                int N = sc.nextInt();\n                int[] M = new int[N];\n                int m = 0, y = 0, z = 0;\n                int max = 0;\n                \n                for(int j = 0; j < N; j++)\n                    M[j] = sc.nextInt();\n        \n                for(int j = 1; j < N; j++){\n                    if(M[j - 1] > M[j]){\n                        if((M[j - 1] - M[j]) > max)\n                            max = M[j - 1] - M[j];\n                        y = y + (M[j - 1] - M[j]);                \n                    }\n                }\n                \n                for(int j = 0; j < N - 1; j++){\n                    if(M[j] <= max){\n                        z = z + M[j];\n                    }else{\n                        z = z + max;\n                    }\n                }\n                fw.write(\"Case #\" + (i + 1) + \": \" + y + \" \" + z + \"\\r\\n\");\n                \n            }\n            fis.close();\n            fw.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    \n\n}"}
{"idx":"312","func":"class Question1 {\n    static Scanner s;\n\n    public static void main(String args[]) {\n        try {\n            System.setIn(new FileInputStream(\"C:\\\\Users\\\\Karthik\\\\Desktop\\\\\"\n                + \"file1.in\"));\n            System.setOut(new PrintStream(\n                \"C:\\\\Users\\\\Karthik\\\\Desktop\\\\out1.txt\"));\n        } catch (Exception e) {\n            System.out.println(\"ERROR READING FILE\");\n        } \/\/ Must be in desktop\n        s = new Scanner(System.in);\n        int test_cases;\n        test_cases = s.nextInt();\n        int[] ar;\n        for (int looper = 1; looper <= test_cases; looper++) {\n            int n;\n            n=s.nextInt();\n            ar=new int[n];\n            for(int j=0;j<n;j++)\n                ar[j]=s.nextInt();\n            int n1=ar.length;\n            int diff=0;\n            for(int i1=0;i1<n1-1;i1++)\n            {\n                if(ar[i1]>ar[i1+1])diff=diff+(ar[i1]-ar[i1+1]);\n            }\n            int value1=diff;\n            int n3=ar.length;\n            int max1=ar[0];\n            for(int i3=1;i3<n3;i3++)if(ar[i3]>max1)max1=ar[i3];\n            int max=max1;\n            int n2=ar.length;\n            int minval=n2*max;\n            int maxdiff=0;\n            for(int i2=0;i2<n2-1;i2++)\n            {\n                if(ar[i2]-ar[i2+1]>maxdiff)maxdiff=ar[i2]-ar[i2+1];\n            }\n            int curval=0;\n            for(int i1=0;i1<n2-1;i1++)\n            {\n                if(ar[i1]>maxdiff)curval=curval+maxdiff;\n                else curval=curval+ar[i1];\n            }\n            int value2=curval;\n            \/\/ DO STUFF\n            \/\/ Output will be in output\n            int output = 0;\n            \/\/ Waste a line if reading string after int\/double\n            int i=10000*1000;\n            System.out.println(\"Case #\" + looper + \": \" + value1+\" \"+value2);\n        }\n    }\n}"}
{"idx":"313","func":"class MushroomMonster {\n    public static void main(String[] args) {\n        String fileAddress = \"C:\\\\Users\\\\di\\\\Documents\\\\googleCodeJam\\\\A-large.in\";\n        try {\n            FileInputStream fstream = new FileInputStream(fileAddress);\n            BufferedReader br = new BufferedReader(new InputStreamReader(fstream));\n            \n            PrintWriter writer = new PrintWriter(\"C:\\\\Users\\\\di\\\\Documents\\\\googleCodeJam\\\\A-output-2.txt\", \"UTF-8\");\n            \n            String strLine;\n            int i = 0;\n            while ((strLine = br.readLine()) != null) {\n                String[] strs = strLine.split(\" \");\n                if(strs.length < 2) continue;\n                \n                i++;\n                int res_m1 = 0;\n                int res_m2 = 0;\n                int max_diff = 0;\n                for(int j=0; j<strs.length-1; j++) {\n                    int pre = Integer.parseInt(strs[j]);\n                    int nex = Integer.parseInt(strs[j+1]);\n                    \n                    if(nex < pre) {\n                        int diff = pre - nex;\n                        res_m1 += diff;\n                        if(diff > max_diff) max_diff = diff;\n                    }\n                }\n                \n                for(int j=0; j<strs.length-1; j++) {\n                    int cur = Integer.parseInt(strs[j]);\n                    if(cur > max_diff) res_m2 += max_diff;\n                    else res_m2 += cur;\n                }\n                \n                writer.println(\"Case #\" + i + \": \" + res_m1 + \" \" + res_m2);\n            }\n            \n            writer.close();\n            br.close();\n            fstream.close();\n        } catch (Exception e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n    \n}"}
{"idx":"314","func":"class MushroomMonster {\n\/\/    static private final String INPUT = \".\/input.txt\";\n\/\/    static private final String OUTPUT = \".\/output.txt\";\n    static private final String INPUT = \".\/A-large.in\";\n    static private final String OUTPUT = \".\/A-large.out\";\n    \n    public static void main(String args[]) {\n        \/\/ open I\/O files\n        FileInputStream instream = null;\n        PrintStream outstream = null;\n\n        try {\n            instream = new FileInputStream(INPUT);\n            outstream = new PrintStream(new FileOutputStream(OUTPUT));\n            System.setIn(instream);\n            System.setOut(outstream);\n        } catch (Exception e) {\n            System.err.println(\"Error Occurred.\");\n            e.printStackTrace();\n            return;\n        }\n\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n\n        for (int t = 1; t <= T; ++t) {\n            int N = in.nextInt();\n            int arr [] = new int[N];\n            List<Integer> arr_dif = new ArrayList<Integer>();\n            int m1,m2;\n            int max;\n            int sum1 = 0, sum2 = 0;\n            \n            arr[0] = in.nextInt();\n            for (int i = 1; i < N; i++) {\n                arr[i] = in.nextInt();\n                arr_dif.add(arr[i-1] - arr[i]);\n            }\n            \n            max = Collections.max(arr_dif);\n            \n            for (int i = 0; i < N-1; i++) {\n                m1 = arr[i];\n                m2 = arr[i+1];\n                \n                if(m1 > m2)\n                    sum1 += m1-m2;\n                \n                if(m1 <= max)\n                    sum2 += m1;\n                else\n                    sum2 += max;\n            }\n            System.out.println(\"Case #\" + t + \": \" + sum1 + \" \" + sum2);\n        }\n\n        in.close();\n        return;\n    }\n}"}
{"idx":"315","func":"class A {\n\n    static BufferedReader in;\n    static PrintWriter out;\n    static StringTokenizer tok;\n    \n    public static void main(String[] args) throws IOException {\n        File inf = new File (\"\/Users\/Kang\/Documents\/workspace\/CodeJamRound1\/src\/A.in\");\n        File outf = new File(\"\/Users\/Kang\/Documents\/workspace\/CodeJamRound1\/src\/A.out\");\n        in = new BufferedReader(new FileReader(inf));\n        out = new PrintWriter(outf);\n        int cases = Integer.parseInt(in.readLine());\n        for (int i = 0; i < cases; i++) {\n            tok = new StringTokenizer(in.readLine());\n            int method1 = 0;\n            int method2 = 0;\n            int len = Integer.parseInt(tok.nextToken());\n            tok = new StringTokenizer(in.readLine());\n            int[] mushrooms = new int[len];\n            int max = 0;\n            for (int j = 0; j < len; j++) {\n                mushrooms[j] = Integer.parseInt(tok.nextToken());\n            }\n            for (int j = 1; j < len; j++) {\n                if (mushrooms[j] < mushrooms[j-1]) method1 += mushrooms[j-1] - mushrooms[j];\n                max = Math.max(max, mushrooms[j-1] - mushrooms[j]);\n            }\n            for (int j = 0; j < len-1; j++) {\n                method2 += Math.min(max, mushrooms[j]);\n            }\n            method2 = method2;\n            out.print(\"Case #\" + \"\" + (i+1) + \": \" + method1 + \" \" + method2 + \"\\n\");\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"316","func":"class a {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(a.class.getResourceAsStream(\"a-l.in\"));\n        System.setOut(new PrintStream(\"a-l.txt\"));\n        \/\/Scanner in = new Scanner(System.in);\n        int testcases, testcase = 1;\n        testcases = in.nextInt();\n        while (testcase <= testcases) {\n            int ans1 = 0, ans2 = 0;\n            double rate = 0.0;\n            int n = in.nextInt();\n            int[] m = new int[n];\n            for(int i = 0; i < n; i++) {\n                m[i] = in.nextInt();\n            }\n            for(int i = 1; i < n; i++) {\n                if(m[i - 1] > m[i]) {\n                    ans1 += (m[i - 1] - m[i]);\n                    rate = Math.max(rate, (m[i - 1] - m[i]) \/ 10.0);\n                }\n            }\n            if(rate != 0) {\n                int eat = (int)(rate * 10);\n                for(int i = 0; i < n - 1; i++) {\n                    if(eat >= m[i]) {\n                        ans2 += m[i];\n                    } else {\n                        ans2 += eat;\n                    }\n                }\n            }\n            \n            System.out.println(\"Case #\" + testcase + \": \" + ans1 + \" \" + ans2);\n            testcase++;\n        }\n    }\n\n}"}
{"idx":"317","func":"static void main(String args[]) throws Exception {\n        \/\/BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n        PrintWriter pw = new PrintWriter(\"A.txt\");\n        int n = Integer.parseInt(br.readLine());\n        String line;\n\n        for (int q = 1; q <= n; q++) {\n            line = br.readLine()+\" \"+br.readLine();\n            Scanner sc=new Scanner(line);\n            int N = sc.nextInt();\n            int ar[]=new int[N];\n            for(int i=0;i<N;i++)\n                ar[i]=sc.nextInt();\n\n            double rate=0;\n            for(int i=1;i<N;i++)\n                if(ar[i]<ar[i-1] && ar[i-1]-ar[i]>rate)\n                    rate=ar[i-1]-ar[i];\n\n            System.out.println(rate\/=10);\n            int a=0;\n            double b=0,bval;\n            bval=ar[0];\n            for(int i=1;i<N;i++){\n                if(ar[i-1]>ar[i]) {\n                    a += -ar[i] + ar[i - 1];\n                    \/\/aval = ar[i];\n                }\n                if (bval >= rate*10) {\n                    b += rate*10;\n                    bval -= rate*10;\n                }\n                else {\n                    b += bval;\n                    bval = 0;\n                }\n                bval = ar[i];\n            }\n            \/\/if(rate!=0)\n            \/\/    b+=bval;\n            \/\/a+=aval;\n\n            System.out.println(q+\"> \"+a+\" \"+(int)b);\n            pw.println(\"Case #\" + q + \": \" + a + \" \" + (int)b);\n        }\n        pw.close();\n    }\n}"}
{"idx":"318","func":"class Q1 {\n\n    public static void main(String[] args) throws IOException{\n        \/\/ TODO Auto-generated method stub\n        File file = new File(\"A-large.in\");\n        Scanner in = new Scanner(new BufferedReader(new FileReader(file)));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"A-large.out.txt\")));\n        \/\/ number of test cases\n        int t = Integer.valueOf(in.nextLine());\n        for(int round = 1; round <= t; round++) {\n            int N = Integer.valueOf(in.nextLine());\n            String delim = \"[ ]\";\n            String[] tokens = in.nextLine().split(delim);\n            int[] input = new int[N];\n            for(int i = 0; i < N; i++) {\n                input[i] = Integer.valueOf(tokens[i]);\n            }\n            for(int i: input) System.out.println(i);\n            \/\/ TODO Auto-generated method stub\n            int[] result1 = new int[2];\n            int total = 0;\n            for(int i1 = 0; i1 < N-1; i1++) {\n                total += Math.max(0, input[i1] - input[i1+1]);\n            }\n            result1[0] = total;\n            total = 0;\n            \/\/ find min rate first\n            int maxGap = 0;\n            for(int i2 = 0; i2 < N-1; i2++) {\n                maxGap = Math.max(maxGap, input[i2] - input[i2+1]);\n            }\n            if(maxGap == 0) result1[1] = 0;\n            else {\n                double rate = maxGap \/ 10.0;\n                for(int i3 = 1; i3 < N; i3++) {\n                    total += Math.min(maxGap, input[i3-1]);\n                }\n                result1[1] = total;\n            }\n            \n            int[] result = result1;\n            out.println(\"Case #\" + round + \": \" + result[0] + \" \" + result[1]);\n        }\n        \n        out.flush();\n        out.close();\n        in.close();\n    }\n\n}"}
{"idx":"319","func":"class ABC{\n    public static void main(String args[]) throws Exception{\n        \n        BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));\n        int t=Integer.parseInt(bf.readLine());\n        int inc=1;\n        while(t-->0){\n            int n=Integer.parseInt(bf.readLine());\n            String str=bf.readLine();\n            String s[]=str.split(\"\\\\s+\");\n            long com1=0,com2=0;\n            for(int i=1;i<s.length;i++){\n                int p=Integer.parseInt(s[i-1])-Integer.parseInt(s[i]);\n                if(p>0){\n                    com1=com1+p;\n                }\n                if(i==(s.length-1)){\n                    if(p>0)\n                        com2=com2+p;\n                }else{\n                    com2=com2+Integer.parseInt(s[i-1]);\n                }\n            }\n            \n            System.out.println(\"Case #\"+inc+\": \"+com1+\" \"+com2);\n            inc++;\n        }\n    }\n\n}"}
{"idx":"320","func":"class A {\n    Scanner sc;\n    PrintWriter pw;\n    int N;\n    int[] m;\n    \n    public static void main(String[] args) throws Exception{\n        String filePrefix = args.length>0?args[0]:\"A-large (1)\";\n\n        try {\n            A r = new A();\n            r.sc = new Scanner(new FileReader(filePrefix + \".in\"));\n            r.pw = new PrintWriter(new FileWriter(filePrefix + \".out\"));\n            int ntest = r.sc.nextInt();\n            for(int test=1; test<=ntest; test++) {\n                Scanner sc = r.sc;\n                r.N = sc.nextInt();\n                r.m = new int[r.N];\n                for(int i=0; i<r.N; i++)\n                    r.m[i] = sc.nextInt();\n                r.pw.print(\"Case #\" + test + \": \");\n                System.out.print(\"Case #\" + test + \": \");\n                int ans1 = 0,ans2 = 0;\n                int maxrate = 0;\n                for(int i=1; i<r.N; i++) {\n                    ans1 += Math.max(r.m[i-1]-r.m[i], 0);\n                    maxrate = Math.max(r.m[i-1]-r.m[i], maxrate);\n                }\n                \n                for(int i=1; i<r.N; i++) {\n                    ans2 += Math.min(r.m[i-1], maxrate);\n                }\n                Object s = ans1 + \" \" + ans2;\n                \n                r.pw.println(s);\n                System.out.println(s);\n            }\n            System.out.println(\"Finished.\");\n            r.sc.close();\n            r.pw.close();\n        } catch(Exception e) {\n            System.err.println(e);\n        }\n    }\n    \n}"}
{"idx":"321","func":"class ProblemA {\n  \n  public static void main(String[] args) {\n    try {\n      File input = new File(System.getProperty(\"inputFile\"));\n\n      FileReader fr = new FileReader(input);\n            BufferedReader br = new BufferedReader(fr);\n            StringBuilder output1 = new StringBuilder();\n            Integer cases = Integer.valueOf(br.readLine());\n            for(int i = 1; i <= cases; i++) {\n                    int n = Integer.parseInt(br.readLine());\n              String caseInput = br.readLine();\n              String[] split = caseInput.split(\" \");\n                    int[] mushrooms = new int[split.length];\n                    for (int j = 0; j < mushrooms.length; j++) {\n                        mushrooms[j] = Integer.parseInt(split[j]);\n                    }\n            \n                    int method1 = 0;\n                    int maxDiff = 0;\n                    for (int j = 1; j < mushrooms.length; j++) {\n                        if (mushrooms[j] < mushrooms[j-1]) {\n                            int diff = mushrooms[j-1] - mushrooms[j];\n                            method1 += diff;\n                            if (diff > maxDiff) {\n                                maxDiff = diff;\n                            }\n                        }\n                    }\n            \n                    int method2 = 0;\n                    for (int j = 1; j < mushrooms.length; j++) {\n                        if (mushrooms[j-1] < maxDiff) {\n                            method2 += mushrooms[j-1];\n                        } else {\n                            method2 += maxDiff;\n                        }\n                    }\n            \n              output1.append(String.format(\"Case #%d: %d %d\", i, method1, method2));\n              if (i != cases) {\n                output1.append(\"\\n\");\n              }\n            }\n\n      String result = output1.toString();\n    \n      File output = new File(System.getProperty(\"outputFile\"));\n      FileWriter fw = new FileWriter(output);\n            BufferedWriter bw = new BufferedWriter(fw);\n      bw.write(result);\n      bw.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n}"}
{"idx":"322","func":"class Main {\n    \/**\n     * author geshpaniec\n     * 23.10.2014\n     *\/\n\n    StringTokenizer in;\n    BufferedReader inb;\n    PrintWriter out;\n    static boolean local;\n    final String problemname = \"success\";\n    final static String _localArg=\"geshpaniec1\";\n    final static byte IO=3;\n        \/* IO:\n         * 1 - standard I\/O\n         * 2 - input.txt\/output.txt\n         * 3 - problemname.in\/problemname.out\n         *\/\n\n\n\n\n    public static void main(String[] args) throws Exception {\n        local = false;\n        if (args.length == 1 && args[0].equals(_localArg))\n            local = true;\n        Main r = new Main();\n        if (Main.local) {\n            r.inb = new BufferedReader(new FileReader(\"input.txt\"));\n            r.out = new PrintWriter(new OutputStreamWriter(System.out));\n        } else {\n            switch (Main.IO){\n                case 1:\n                    r.inb = new BufferedReader(new InputStreamReader(System.in));\n                    r.out = new PrintWriter(new OutputStreamWriter(System.out));\n                    break;\n                case 2:\n                    r.inb = new BufferedReader(new FileReader(\"input.txt\"));\n                    r.out = new PrintWriter(new FileWriter(\"output.txt\"));\n                    break;\n                case 3:\n                    r.inb = new BufferedReader(new FileReader(r.problemname+\".in\"));\n                    r.out = new PrintWriter(new FileWriter(r.problemname+\".out\"));\n                    break;\n            }\n        }\n        r.in = new StringTokenizer(\"\");\n        double Time=System.nanoTime();\n        int T = Integer.parseInt(r.next());\n        A:for (int q = 1; q <= T; q++) {\n            int n=Integer.parseInt(r.next());\n            int[] a1=new int[n];\n            for (int i1=0;i1<n;i1++)\n                a1[i1]=Integer.parseInt(r.next());\n            int[] a = a1;\n            long ans1=0,ans2 = 0;\n            int maxP=0;\n            for (int i = 1; i < n; i++) {\n                if (a[i-1]>a[i])\n                    ans1+=a[i-1]-a[i];\n                    maxP = max(maxP,a[i-1]-a[i]);\n            }\n            for (int i = 0; i < n-1; i++) {\n                if (a[i]>maxP){\n                    ans2+=maxP;\n                }\n                else{\n                    ans2+=a[i];\n                }\n            }\n            r.out.println(\"Case #\"+q+\": \"+ans1+\" \"+ans2);\n        }\n        if (Main.local){\n            Time=System.nanoTime()-Time;\n            r.out.println();\n            r.out.println(\" Time work: \"+Time\/(1e9)+\" seconds\");\n        }\n        r.out.flush();\n    }\n\n    String next() throws Exception {\n        if (!in.hasMoreTokens())\n            in=new StringTokenizer(inb.readLine());\n        return in.nextToken();\n    }\n\n\n}"}
{"idx":"323","func":"class Round1AA \n{\n    private int[] stages;\n    private String result;\n    \n    public static void main(String[] args)throws Exception \n    {\n        Scanner sc = new Scanner(new FileInputStream(args[0]));\n        PrintWriter writer = new PrintWriter(new FileOutputStream(args[1]));\n        \n        \/\/Scanner sc = new Scanner(System.in);\n        \/\/PrintWriter writer = new PrintWriter(System.out);\n        \n        int numberOftestCases = sc.nextInt();\n        \n        for(int i=0; i<numberOftestCases ; i++)\n        {\n            Round1AA round1aa = new Round1AA();\n            int count = sc.nextInt();\n            round1aa.stages = new int[count];\n            for(int i2=0;i2<count;i2++)\n            {\n                round1aa.stages[i2]= sc.nextInt();\n            }\n            \/\/sratagy1\n            int strategy1 = 0;\n            int maxSpeed = 0;\n            int intOldData = -1; \n            for(int d : round1aa.stages)\n            {\n                if(intOldData != -1)\n                {\n                    if(intOldData > d)\n                    {\n                        int speed = intOldData - d;\n                        strategy1 += speed;\n                        if(maxSpeed < speed)\n                        {\n                            maxSpeed = speed;\n                        }\n                    }\n                }\n                intOldData = d;\n                \n            }\n            int strategy2 = 0;\n            \n            for(int i1=0;i1<(round1aa.stages.length-1);i1++)\n            {\n                int d=round1aa.stages[i1];\n                if(d < maxSpeed)\n                {\n                    strategy2 += d;\n                }else\n                {\n                    strategy2 += maxSpeed;\n                }\n            }\n            round1aa.result = \"\"+strategy1+\" \"+strategy2;\n            writer.println(\"Case #\"+(i+1)+\": \"+round1aa.result);\n            writer.flush();\n        }\n        sc.close();\n        writer.close();\n    }\n    \n    \n\n}"}
{"idx":"324","func":"class Mushroom {\n  public static void main(String[] args) throws IOException {\n    try (Stream<String> lines = Files.lines(Paths.get(\"CodeJam\/in\/AA.in\"))) {\n      List<String> inputs = lines.collect(toList());\n      int count = Integer.parseInt(inputs.get(0));\n      for (int i = 0; i < count; i++) {\n        String[] repeat = inputs.get(i * 2 + 2).split(\"\\\\s\");\n        int[] nums = Arrays.stream(repeat).mapToInt(Integer::parseInt).toArray();\n        int prev = 0;\n        int s1 = 0;\n        for (int i1 = 0; i1 < nums.length; i1++) {\n          if (prev > nums[i1]) {\n            s1 += prev - nums[i1];\n          }\n          prev = nums[i1];\n        }\n        int max = 0;\n        for (int i3 = 0; i3 < nums.length - 1; i3++) {\n          int diff = nums[i3] - nums[i3 + 1];\n          if (diff > 0 && max < diff) {\n            max = diff;\n          }\n        }\n        int s2 = 0;\n        for (int i2 = 0; i2 < nums.length - 1; i2++) {\n          s2 += Math.min(max, nums[i2]);\n        }\n\n        String result = s1 + \" \" + s2;\n        System.out.println(\"Case #\" + (i + 1) + \": \" + result);\n      }\n    }\n  }\n}"}
{"idx":"325","func":"class Main {\n\n  public static void main(String args[]) {\n    Main r = (new Main());\n    Scanner cin = new Scanner(System.in);\n    \n    int T = cin.nextInt();\n    for(int C=1; C<=T; ++C) {\n    \n      int N = cin.nextInt();\n      int arr[] = new int[N];\n      for(int i=0; i<N; ++i) {\n        arr[i] = cin.nextInt();\n      }\n    \n      int sum = 0;\n      int max = 0;\n      for(int i=1; i<N; ++i) {\n        int diff = Math.max(arr[i - 1] - arr[i], 0);\n        max = Math.max(max, diff);\n        sum += diff;\n      }\n    \n      int res = 0;\n      for(int i=1; i<N; ++i) {\n        res += Math.min(arr[i - 1], max);\n      }\n    \n      System.out.println(\"Case #\" + C + \": \" + sum + \" \" + res);\n    \n    }\n  }\n\n}"}
{"idx":"326","func":"class A {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"Round1A2015\/A-l.in\"));\n        System.setOut(new PrintStream(\"src\/Round1A2015\/A-l.out\"));\n        \n        int T = Integer.parseInt(br.readLine());\n        \n        for (int t= 1 ; t <= T; t++){\n            int N = Integer.parseInt(br.readLine());\n            String tmp[] = br.readLine().trim().split(\"\\\\s+\");\n            int m[] = new int[N];\n            for (int i = 0 ; i < N ;i++){\n                m[i] = Integer.parseInt(tmp[i]);\n            }\n            \n            long sum = 0;\n            int max = 0;\n            for (int i = 1; i < N ;i++){\n                int d = m[i-1] - m[i];\n                if (d > 0) {\n                    sum += d;\n                    if (d > max) max = d;\n                }\n            }\n            \n            long sum2 = 0;\n            for (int i = 0; i < N-1 ;i++){\n                if (m[i] > max) {\n                    sum2 += max;\n                } else sum2+= m[i];\n            }\n            \n            System.out.print(String.format(\"Case #%d: %d %d\\n\",t,sum,sum2));\n        }\n\n    }\n\n}"}
{"idx":"327","func":"class ProblemAMushroomMonster {\n\n    \/**3\n     * Usage: java ProblemAMushroomMonster < fileIn.txt > fileOut.txt\n     *\n     * @param args\n     *\/\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scanner = new Scanner(System.in);\n        byte testCount = scanner.nextByte();\n\n        for (byte t = 0; t < testCount; t++) {\n            \/\/ read and transform inputs\n            int N = scanner.nextInt();\n\n            int[] shrooms = new int[N];\n            for (int i = 0; i < N; i++) {\n                shrooms[i] = scanner.nextInt();\n            }\n\n\n            \/\/ Strategy 1\n            int counter1 = 0;\n            int maxInterval = -1;\n            int currInterval = 0;\n            int previousNumber = shrooms[0];\n            int currentNumber = 0;\n            for (int i = 1; i < shrooms.length; i++) {\n                currentNumber = shrooms[i];\n                currInterval = Math.max(0, previousNumber - currentNumber);\n                \/\/System.out.println(\"currInterval = \" + currInterval);\n                \/\/ strategy 1\n                counter1 += currInterval;\n                \/\/System.out.println(\"counter1 = \" + counter1);\n                \/\/ for strategy 2\n                maxInterval = Math.max(maxInterval, currInterval);\n                previousNumber = currentNumber;\n            }\n\n            \/\/System.out.println(\"maxInterval = \" + maxInterval);\n\n            \/\/ Strategy 2\n            int counter2 = Math.min(maxInterval, shrooms[0]);\n            for (int i = 1; i < shrooms.length-1; i++) {\n                int minEaten = Math.min(maxInterval, shrooms[i]);\n                \/\/ System.out.println(\"eating \" + minEaten);\n                counter2 += minEaten;\n\n            }\n\n            System.out.println(\"Case #\" + (t + 1) + \": \" + counter1 + \" \" + counter2);\n        }\n    }\n}"}
{"idx":"328","func":"class MushroomMonster {\n    public static void main(String[] args) throws Exception {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int cases = Integer.parseInt(in.readLine());\n        for (int i = 0; i < cases; i++) {\n            in.readLine();\n            String[] nums = in.readLine().split(\" \");\n            int[] ints = new int[nums.length];\n            \n            int sum1 = 0;\n            int sum2 = 0;\n            int maxdiff = 0;\n            for (int j = 0; j < nums.length; j++) {\n                ints[j] = Integer.parseInt(nums[j]);\n                \n                if (j > 0) {\n                    if (ints[j - 1] > ints[j]) {\n                        sum1 += ints[j - 1] - ints[j];\n                    }\n                    \n                    maxdiff = Math.max(maxdiff, ints[j - 1] - ints[j]);\n                }\n            }\n            for (int j = 0; j < nums.length - 1; j++) {\n                if (ints[j] > maxdiff) {\n                    sum2 += maxdiff;\n                } else {\n                    sum2 += ints[j];\n                }\n            }\n            \n            System.out.println(\"Case #\" + (i + 1) + \": \" + sum1 + \" \" + sum2);\n        }\n        \n    }\n}"}
{"idx":"329","func":"class AL {\n    static final boolean _PRACTICE = !true;\n    static final boolean _SAMPLE = !true;\n    static final boolean _SMALL = !true;\n    static final String _PROBLEM = \"A\";\n\n    public static void main(String... args) throws IOException {\n        if (!_SAMPLE) {\n            if (_SMALL) {\n                int i = 0;\n                while (new File(_PROBLEM + \"-small\"\n                + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\").exists())\n                    i++;\n                i--;\n                boolean test = false;\n                if (new File(_PROBLEM + \"-small\"\n                + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\").exists()) {\n                    System.err.println(\"overwrite?(y\/n)\");\n                    char c = (char) System.in.read();\n                    test = c != 'y';\n                }\n                if (test) {\n                    System.setIn(new FileInputStream(_PROBLEM + \"-small\"\n                    + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\"));\n                    System.setOut(new PrintStream(_PROBLEM + \"-small-test.out\"));\n                    AL r = new AL();\n                    Scanner sc = new Scanner(System.in);\n                    int testCase = sc.nextInt();\n                    \n                    for (int k = 1; k <= testCase; k++) {\n                        System.out.printf(\"Case #%d: \", k);\n                        System.err.printf(\"Case #%d: \", k);\n                    \n                        int n = sc.nextInt();\n                        \n                        int[] mush = new int[n];\n                        for (int i1 = 0; i1 < n; i1++) {\n                            mush[i1] = sc.nextInt();\n                        }\n                        \n                        int first = 0;\n                        int second = 0;\n                        \n                        for (int i4 = 0; i4 < n - 1; i4++) {\n                            int diff = mush[i4] - mush[i4 + 1];\n                            if (diff > 0) {\n                                first += diff;\n                            }\n                        }\n                        \n                        int[] diff = new int[n - 1];\n                        for (int i3 = 0; i3 < n - 1; i3++) {\n                            diff[i3] = mush[i3] - mush[i3 + 1];\n                        }\n                        int max = 0;\n                        for (int i5 = 0; i5 < n - 1; i5++) {\n                            max = Math.max(max, diff[i5]);\n                        }\n                    \n                        for (int i2 = 0; i2 < n - 1; i2++) {\n                            second += Math.min(max, mush[i2]);\n                        }\n                        \n                        System.out.printf(\"%d %d\", first, second);\n                        System.err.printf(\"%d %d\", first, second);\n                        \n                        System.out.println();\n                        System.err.println();\n                        \n                    }\n                    sc.close();\n                    FileReader f1 = new FileReader(_PROBLEM + \"-small-test.out\");\n                    FileReader f2 = new FileReader(_PROBLEM + \"-small\"\n                    + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\");\n                    BufferedReader br1 = new BufferedReader(f1);\n                    BufferedReader br2 = new BufferedReader(f2);\n                    for (int j = 1;; j++) {\n                        String s1 = br1.readLine();\n                        String s2 = br2.readLine();\n                        if (s1 == null && s2 == null) {\n                            System.err.println(\"OK!\");\n                            break;\n                        }\n                        if (s1 == null || s2 == null || !s1.equals(s2)) {\n                            System.err.println(\"failed at line \" + j);\n                            System.err.println(\"expected \" + s2);\n                            System.err.println(\"but \" + s1);\n                            break;\n                        }\n                    }\n                    br1.close();\n                    br2.close();\n                } else {\n                    System.setIn(new FileInputStream(_PROBLEM + \"-small\"\n                    + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\"));\n                    System.setOut(new PrintStream(_PROBLEM + \"-small\"\n                    + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\"));\n                    AL r = new AL();\n                    Scanner sc = new Scanner(System.in);\n                    int testCase = sc.nextInt();\n                    \n                    for (int k = 1; k <= testCase; k++) {\n                        System.out.printf(\"Case #%d: \", k);\n                        System.err.printf(\"Case #%d: \", k);\n                    \n                        int n = sc.nextInt();\n                        \n                        int[] mush = new int[n];\n                        for (int i1 = 0; i1 < n; i1++) {\n                            mush[i1] = sc.nextInt();\n                        }\n                        \n                        int first = 0;\n                        int second = 0;\n                        \n                        for (int i4 = 0; i4 < n - 1; i4++) {\n                            int diff = mush[i4] - mush[i4 + 1];\n                            if (diff > 0) {\n                                first += diff;\n                            }\n                        }\n                        \n                        int[] diff = new int[n - 1];\n                        for (int i3 = 0; i3 < n - 1; i3++) {\n                            diff[i3] = mush[i3] - mush[i3 + 1];\n                        }\n                        int max = 0;\n                        for (int i5 = 0; i5 < n - 1; i5++) {\n                            max = Math.max(max, diff[i5]);\n                        }\n                    \n                        for (int i2 = 0; i2 < n - 1; i2++) {\n                            second += Math.min(max, mush[i2]);\n                        }\n                        \n                        System.out.printf(\"%d %d\", first, second);\n                        System.err.printf(\"%d %d\", first, second);\n                        \n                        System.out.println();\n                        System.err.println();\n                        \n                    }\n                    sc.close();\n                }\n            } else {\n                System.setIn(new FileInputStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".in\"));\n                System.setOut(new PrintStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".out\"));\n                AL r = new AL();\n                Scanner sc = new Scanner(System.in);\n                int testCase = sc.nextInt();\n                \n                for (int k = 1; k <= testCase; k++) {\n                    System.out.printf(\"Case #%d: \", k);\n                    System.err.printf(\"Case #%d: \", k);\n                \n                    int n = sc.nextInt();\n                    \n                    int[] mush = new int[n];\n                    for (int i = 0; i < n; i++) {\n                        mush[i] = sc.nextInt();\n                    }\n                    \n                    int first = 0;\n                    int second = 0;\n                    \n                    for (int i = 0; i < n - 1; i++) {\n                        int diff = mush[i] - mush[i + 1];\n                        if (diff > 0) {\n                            first += diff;\n                        }\n                    }\n                    \n                    int[] diff = new int[n - 1];\n                    for (int i = 0; i < n - 1; i++) {\n                        diff[i] = mush[i] - mush[i + 1];\n                    }\n                    int max = 0;\n                    for (int i = 0; i < n - 1; i++) {\n                        max = Math.max(max, diff[i]);\n                    }\n                \n                    for (int i = 0; i < n - 1; i++) {\n                        second += Math.min(max, mush[i]);\n                    }\n                    \n                    System.out.printf(\"%d %d\", first, second);\n                    System.err.printf(\"%d %d\", first, second);\n                    \n                    System.out.println();\n                    System.err.println();\n                    \n                }\n                sc.close();\n            }\n        } else {\n            AL r = new AL();\n            Scanner sc = new Scanner(System.in);\n            int testCase = sc.nextInt();\n            \n            for (int k = 1; k <= testCase; k++) {\n                System.out.printf(\"Case #%d: \", k);\n                System.err.printf(\"Case #%d: \", k);\n            \n                int n = sc.nextInt();\n                \n                int[] mush = new int[n];\n                for (int i = 0; i < n; i++) {\n                    mush[i] = sc.nextInt();\n                }\n                \n                int first = 0;\n                int second = 0;\n                \n                for (int i = 0; i < n - 1; i++) {\n                    int diff = mush[i] - mush[i + 1];\n                    if (diff > 0) {\n                        first += diff;\n                    }\n                }\n                \n                int[] diff = new int[n - 1];\n                for (int i = 0; i < n - 1; i++) {\n                    diff[i] = mush[i] - mush[i + 1];\n                }\n                int max = 0;\n                for (int i = 0; i < n - 1; i++) {\n                    max = Math.max(max, diff[i]);\n                }\n            \n                for (int i = 0; i < n - 1; i++) {\n                    second += Math.min(max, mush[i]);\n                }\n                \n                System.out.printf(\"%d %d\", first, second);\n                System.err.printf(\"%d %d\", first, second);\n                \n                System.out.println();\n                System.err.println();\n                \n            }\n            sc.close();\n        }\n    }\n}"}
{"idx":"330","func":"class MyMushroom {\n    public static void main(String args[]){\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for(int k=1;k<=t;k++){\n            int n = sc.nextInt();\n            int a[] = new int[n];\n            int i=0;\n            for(i=0;i<n;i++){\n                a[i] = sc.nextInt();\n            }\n            int max = 0;\n            int total2=0;\n            int total1=0;\n            int diff;\n            for(i=0;i<n-1;i++){\n                diff=a[i]-a[i+1];\n                if(diff>max)\n                    max = diff;\n\n            }\n            for(i=0;i<n-1;i++){\n                if(a[i]>a[i+1])\n                    total1+=a[i]-a[i+1];\n\n            }\n            for(i=0;i<n-1;i++){\n                if(a[i]<max)\n                    total2+=a[i];\n                else\n                    total2+=max;\n            }\n            System.out.println(\"Case #\"+k+\": \"+total1+\" \"+total2);\n\n        }\n    }\n}"}
{"idx":"331","func":"class Mushroom {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"A-large.in\"));\n        int loopvar = in.nextInt();\n        PrintWriter out = new PrintWriter(new File(\"mush.out\"));\n        for (int j = 0; j < loopvar; j++) {\n\n            int mush = in.nextInt();\n            int[] mushes = new int[mush];\n            for (int i = 0; i < mush; i++) {\n                mushes[i] = in.nextInt();\n            }\n\n            int tot = 0;\n            for (int i = 1; i < mush; i++) {\n                if (mushes[i - 1] > mushes[i]) {\n                    tot += mushes[i-1] - mushes[i];\n                }\n            }\n\n            int rate = 0;\n            for (int i = 1; i < mush; i++) {\n                if (mushes[i - 1] > mushes[i]) {\n                    rate = Math.max(rate, mushes[i -1] - mushes[i]);\n                }\n            }\n            int tr = 0;\n            for (int i = 0; i < mush - 1; i++) {\n                tr += Math.min(rate, mushes[i]);\n            }\n\n            out.printf(\"Case #%d: %d %d%n\", j + 1, tot, tr);\n\n        }\n        out.close();\n    }\n}"}
{"idx":"332","func":"class code {\n  public static void main(String[] args) throws Exception {\n    Scanner s = new Scanner(new File(\"A-large.in\"));\/\/ \"Asample.in\"));\n    int input_size = s.nextInt();\n    for (int n = 0; n < input_size; n++) {\n      int test_size = s.nextInt();\n      int[] a = new int[test_size];\n      for (int x = 0; x < test_size; x++){\n        a[x] = s.nextInt();\n      }\n    int result1 = 0;\n    for(int i = 0; i < a.length - 1; i ++){\n      if(a[i] > a[i + 1]){\n        result1 += a[i] - a[i + 1];\n      }\n    }\n      int result = result1;\n    int result3 = 0;\n    int speed = 0;\n    for(int i = 0; i < a.length - 1; i++){\n      speed = Math.max(speed, a[i] - a[i +1]);\n    }\n    for(int i = 0; i < a.length - 1; i++){\n      result3 += Math.min(a[i], speed);\n    }\n      int result2 = result3;\n      System.out.println(\"Case #\" + (n + 1) + \": \" + result + \" \"+result2);\n    }\n  }\n}"}
{"idx":"333","func":"class MushRoom {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        long t = sc.nextLong();\n\n        int i = 1;\n\n        while (i <= t) {\n            int numEle = sc.nextInt();\n\n            int arr[] = new int[numEle];\n            long sum1 = 0, sum2 = 0;\n\n            arr[0] = sc.nextInt();\n            int maxRate = -1;\n            for (int j = 1; j < numEle; j++) {\n                arr[j] = sc.nextInt();\n\n                if (arr[j - 1] - arr[j] >= 0) {\n                    sum1 += arr[j - 1] - arr[j];\n                    maxRate = Math.max(maxRate, arr[j - 1] - arr[j]);\n                    \n                }\n                \/\/else{\n                   \/\/ maxRate = Math.max(maxRate, arr[j-1]);\n                \/\/}\n               \/\/ System.out.println(maxRate);\n               \n            }\n            \n            for(int k =0; k<numEle -1 ; k++){\n                if(arr[k]<=maxRate){\n                    sum2 += arr[k];\n                }else{\n                    sum2 += maxRate;\n                }\n            }\n\n            System.out.println(\"Case #\" + i + \": \" + sum1 + \" \" + sum2);\n            i++;\n        }\n    }\n}"}
{"idx":"334","func":"static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        int T = Integer.parseInt(br.readLine());\n        for (int t = 1; t <= T; t++) {\n            int n = Integer.parseInt(br.readLine());\n            int[] aa = new int[n];\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            for (int i = 0; i < n; i++)\n                aa[i] = Integer.parseInt(st.nextToken());\n            int sum1 = 0;\n            for (int i = 1; i < n; i++)\n                if (aa[i - 1] > aa[i])\n                    sum1 += aa[i - 1] - aa[i];\n            int max = 0;\n            for (int i = 1; i < n; i++)\n                if (aa[i - 1] - aa[i] > max)\n                    max = aa[i - 1] - aa[i];\n            int sum2 = 0;\n            for (int i = 1; i < n; i++)\n                sum2 += Math.min(max, aa[i - 1]);\n            pw.println(\"Case #\" + t + \": \" + sum1 + \" \" + sum2);\n        }\n        pw.close();\n    }\n}"}
{"idx":"335","func":"class A {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        int t = in.nextInt();\n        for (int cs = 1 ; cs <= t ; cs++) {\n            int n = in.nextInt();\n            int[] m = new int[n];\n            for (int i = 0; i < n ; i++) {\n                m[i] = in.nextInt();\n            }\n            int[] ways = new int[2];\n            int n1 = m.length;\n            \n            for (int i = 0 ; i < n1-1 ; i++) {\n                if (m[i] > m[i+1]) {\n                    ways[0] += m[i] - m[i+1];\n                }\n            }\n            \n            int maxrate = 0;\n            for (int i = 0 ; i < n1-1 ; i++) {\n                if (m[i] > m[i+1]) {\n                    maxrate = Math.max(maxrate, m[i]-m[i+1]);\n                }\n            }\n            for (int i = 0 ; i < n1-1 ; i++) {\n                ways[1] += Math.min(maxrate, m[i]);\n            }\n            int[] ret = ways;\n            out.println(String.format(\"Case #%d: %d %d\", cs, ret[0], ret[1]));\n        }\n        out.flush();\n    }\n}"}
{"idx":"336","func":"class Round1ATaskAMushroomMonster {\n\n    \n    public static void main(String args[] ) throws Exception {\n        \n        BufferedReader br = new BufferedReader(new FileReader(\"input2.in\"));\n        PrintWriter w = new PrintWriter(new BufferedWriter(new FileWriter(\"output2.out\")));\n        \n        \/\/BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        \/\/PrintWriter w = new PrintWriter(System.out);\n            \n        int T = Integer.parseInt(br.readLine());\n        \n        for(int t=1;t<=T;t++) {\n            StringTokenizer st1 = new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st1.nextToken());\n            \n            StringTokenizer st2 = new StringTokenizer(br.readLine());\n            int m[] = new int[n];\n            for(int i=0;i<n;i++)\n                m[i] = Integer.parseInt(st2.nextToken());\n            \n            int y = 0;\n            for(int i=1;i<n;i++)\n                y += Math.max(0, m[i-1] - m[i]);\n            \n            int z = 0;\n            int rateMax = 0;\n            for(int i=1;i<n;i++){\n                if(m[i] < m[i-1])\n                    rateMax = Math.max(rateMax,m[i-1] - m[i]);\n            }\n            \n            for(int i=0;i<n-1;i++)\n                z += Math.min(rateMax, m[i]);\n            \n            w.println(\"Case #\" + t + \": \" + y + \" \" + z);\n        }\n            \n        w.close();\n            \n    }\n}"}
{"idx":"337","func":"class MushroomMonster {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"\/home\/e\/Downloads\/A-large.in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"\/home\/e\/Documents\/MushroomMonster.out\"));\n        int times = Integer.parseInt(br.readLine());\n        for(int t = 1; t <= times; t++) {\n            int[] mushrooms = new int[Integer.parseInt(br.readLine())];\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            for(int i = 0;  i < mushrooms.length; i++) {\n                mushrooms[i] = Integer.parseInt(st.nextToken());\n            }\n            int firstComputation = 0;\n            for(int i = 0; i < mushrooms.length-1; i++) {\n                if(mushrooms[i+1] < mushrooms[i]) {\n                    firstComputation += mushrooms[i] - mushrooms[i+1];\n                }\n            }\n            int secondComputation = 0;\n            int largestGap = 0;\n            for(int i = 0; i < mushrooms.length-1; i++) {\n                if(mushrooms[i] - mushrooms[i+1] > largestGap) {\n                    largestGap = mushrooms[i]-mushrooms[i+1];\n                }\n            }\n            for(int i = 0; i < mushrooms.length-1; i++) {\n                if(mushrooms[i] > largestGap) {\n                    secondComputation += largestGap;\n                }\n                else {\n                    secondComputation += mushrooms[i];\n                }\n            }\n            bw.write(\"Case #\" + t + \": \" + firstComputation + \" \" + secondComputation + \"\\n\");\n        }\n        br.close();\n        bw.close();\n    }\n}"}
{"idx":"338","func":"class MushroomMonster {\n \n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n        for(int i=1; i<=numCases; i++){\n            case1 = 0;\n            case2 = 0;\n            maxDiff = 0;\n            int n = input.nextInt();\n            int[] arr = new int[n];\n            for(int i1=0; i1<n; i1++){\n                arr[i1] = input.nextInt();\n            }\n            \/\/ Case 1\n            for(int k=0; k<(n-1); k++){\n                int current = arr[k];\n                int next = arr[k+1];\n                maxDiff = Math.max(maxDiff,  current - next);\n                if(current > next){\n                    case1 += current - next;\n                }\n            }\n            \/\/ Case 2\n            for(int k=0; k<(n-1); k++){\n                int current = arr[k];\n                if(current >= maxDiff){\n                    case2 += maxDiff;\n                }\n                else{\n                    case2 += current;\n                }\n            }\n            System.out.printf(\"Case #%d: %d %d\", i, case1, case2);\n            if(i!=numCases)\n                System.out.println();\n        }\n \n    }\n \n \n    public static int case1;\n    public static int case2;\n    public static int maxDiff;\n \n \n}"}
{"idx":"339","func":"class A {\n\n    final boolean DEBUG = false;\n    final boolean isSmall = false;\n    final String PACKAGE = \"gcj2015\/r1a\";\n    final String PROBLEM = \"A\";\n    \n    public static void main(String[] args) {\n        A r = new A();\n        if(!r.DEBUG){\n            try {\n                if(r.isSmall)System.setIn(new FileInputStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-small-attempt1.in\")));\n                else System.setIn(new FileInputStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-large.in\")));\n                if(r.isSmall)System.setOut(new PrintStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-small_out2.txt\")));\n                else System.setOut(new PrintStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-large_out.txt\")));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int CASE=1;CASE<=T;CASE++){\n            int n = sc.nextInt();\n            int[] a = new int[n];\n            for(int i=0;i<n;i++)a[i]=sc.nextInt();\n            int resY = 0, res = 1<<29;\n            for(int i=1;i<n;i++){\n                if (a[i] < a[i-1]) resY += a[i-1]-a[i];\n            }\n            for(int rate=0;rate<=10000;rate++){\n                boolean f = true;\n                int sum = 0, now = a[0];\n                for(int i=1;f&&i<n;i++){\n                    if (now <= rate) {\n                        sum += now;\n                        now = a[i];\n                    } else if (now-rate <= a[i]){\n                        sum += rate; now = a[i];\n                    } else f=false;\n                }\n                if (f) {\n                    res = Math.min(res, sum); break;\n                }\n            }\n            System.out.println(\"Case #\"+CASE+\": \"+resY+\" \"+res);\n        }\n    }\n}"}
{"idx":"340","func":"class AMushroomMonster {\n    public static void main (String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int cases = sc.nextInt();\n        for (int t = 1; t <= cases; t++) {\n            int intervals = sc.nextInt();\n            int minEaten = 0;\n            int minConstant = 0;\n            int prevAmount = 0;\n            int[] measurements = new int[intervals];\n            for (int x = 0; x < intervals; x++) {\n                measurements[x] = sc.nextInt();\n            }\n            for (int amount : measurements) {\n                if (amount < prevAmount) {\n                    minEaten += prevAmount - amount;\n                    minConstant = Math.max(minConstant, prevAmount - amount);\n                }\n                prevAmount = amount;\n            }\n            int secondEaten = 0;\n            for (int x = 0; x < measurements.length - 1; x++) {\n                secondEaten += Math.min(measurements[x], minConstant);\n            }\n            System.out.printf(\"Case #%d: %d %d%n\", t, minEaten, secondEaten);\n        }\n        sc.close();\n    }\n}"}
{"idx":"341","func":"class Main {\n\n    public static void main(String[]args) throws NumberFormatException, IOException{\n    \/\/    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n         BufferedReader br = new BufferedReader(new FileReader(\"input.in\"));\n         PrintWriter out = new PrintWriter(\"output.txt\");\n        int t = Integer.parseInt(br.readLine());\n        for(int i = 0;i<t;i++){\n            String[]in = br.readLine().split(\" \");\n            int n = Integer.parseInt(in[0]);\n            in = br.readLine().split(\" \");\n            int[]arr = new int[n];\n            long max = Long.MIN_VALUE;\n            for(int  j = 0;j<n;j++)\n            {\n                arr[j] = Integer.parseInt(in[j]);\n                \n            }\n            long e1 = 0;\n            double rate =0.0;\n            for(int j = 0;j<n-1;j++){\n                if(arr[j]>arr[j+1]){\n                    e1+=(arr[j]-arr[j+1]);\n                }\n                if(arr[j]>arr[j+1]){\n                    if((((arr[j]-arr[j+1])*1.0)\/10.0 >rate)){\n                        rate = ((arr[j]-arr[j+1])*1.0)\/10.0;\n                    }\n                }\n            }\n        \n            long eaten = 0;\n            for(int j = 0;j<n-1;j++){\n                eaten+=Math.min(arr[j], rate*10);\n                \n            }\n            out.println(\"Case #\"+(i+1)+\": \"+e1+\" \"+eaten);\n            \n            \n        }\n        \n        br.close();\n        out.close();\n        \n    }\n\n\n}"}
{"idx":"342","func":"class A {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner sc = new Scanner(new File(\"C:\\\\Users\\\\Valentin\\\\workspace_luna\\\\CodeJam\\\\src\\\\A-large(1).in\"));\n        System.setOut(new PrintStream(new File(\"C:\\\\Users\\\\Valentin\\\\workspace_luna\\\\CodeJam\\\\src\\\\test.out\")));\n\n        int t = sc.nextInt();\n        for (int k = 0; k < t; k++) {\n            int n = sc.nextInt();\n            List<Integer> list = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                list.add(sc.nextInt());\n            }\n            \n            long normal = 0;\n            long special = 0;\n            \/\/normal\n            int pred = list.get(0);\n            for (int i = 1; i < list.size(); i++) {\n                if (pred > list.get(i)) {\n                    normal += pred - list.get(i);\n                }\n                pred = list.get(i);\n            }\n            \n            \/\/special\n            int max_diff = -1;\n            pred = list.get(0);\n            for (int i = 1; i < list.size(); i++) {\n                int curr = list.get(i);\n                if (pred - curr > max_diff) {\n                    max_diff = pred - curr;\n                }\n                pred = curr;\n            }\n            \n            for (int i = 1; i < list.size(); i++) {\n                int curr = list.get(i-1);\n                special += Math.min(max_diff, curr);\n            }\n            System.out.println(\"Case #\" + (k+1) + \": \" + normal + \" \" + special);\n        }\n    }\n\n}"}
{"idx":"343","func":"static void main (String [] args) {\n        Scanner sc = new Scanner(System.in);\n        int numTests = sc.nextInt();\n        for (int test = 1; test <= numTests; test++) {\n            int n = sc.nextInt();\n            int[] arr = new int[n];\n            for (int i = 0; i < n; i++) {\n                arr[i] = sc.nextInt();\n            }\n            int aSum = 0;\n            int maxDrop = 0;\n            for (int i = 1; i < n; i++) {\n                if (arr[i] < arr[i-1]) {\n                    aSum+= arr[i-1] - arr[i];\n                    maxDrop = Math.max(maxDrop, arr[i-1] - arr[i]);\n                }\n            }\n            double rate = maxDrop \/ 10.0;\n            double curr = arr[0];\n            double bSum = 0;\n            for (int i = 0; i < (n-1) * 10; i++) {\n                if (i % 10 == 0) {\n                    curr = arr[i\/10];\n                }\n                double newVal = Math.max(0, curr - rate);\n                double delta = curr - newVal;\n                curr -= delta;\n                bSum += delta;\n            }\n            long l = Math.round(bSum);\n            int intBSum = (int) l;\n            \/\/ int bSum = 0;\n            \/\/ int curr = arr[0] + maxDrop;\n            \/\/ for (int i = 1; i < n; i++) {\n            \/\/     System.out.println(curr-arr[i]);\n            \/\/     bSum += curr - arr[i];\n            \/\/     curr = arr[i] + maxDrop;\n            \/\/ }\n            System.out.printf(\"Case #%d: %d %d\\n\", test, aSum, intBSum);\n        }\n    }\n}"}
{"idx":"344","func":"class MushroomMonster {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner input = new Scanner(new File(\"A-large.in.txt\"));\n        PrintWriter output = new PrintWriter(new File(\"output.txt\"));\n        int numberOfCases = input.nextInt();\n        for(int i=0;i<numberOfCases;i++) {\n            int numberOfMushroomCases = input.nextInt();\n            int mushrooms[] = new int[numberOfMushroomCases];\n            for(int j=0;j<numberOfMushroomCases;j++) {\n                mushrooms[j] = input.nextInt();\n            }\n            int first = 0;\n            for(int j=1;j<numberOfMushroomCases;j++) {\n                if(mushrooms[j]<mushrooms[j-1]) {\n                    first+=mushrooms[j-1]-mushrooms[j];\n                }\n            }\n            int biggestDifference = 0;\n            for(int j=1;j<numberOfMushroomCases;j++) {\n                if(mushrooms[j-1]-mushrooms[j]>biggestDifference) {\n                    biggestDifference = mushrooms[j-1]-mushrooms[j];\n                }\n            }\n            int mushroomsPerTenSeconds = biggestDifference;\n            System.out.println(biggestDifference\/10.0 + \" \" + Math.ceil(biggestDifference\/10.0) + \" \" + mushroomsPerTenSeconds);\n            int second = 0;\n            for(int j=0;j<numberOfMushroomCases-1;j++) {\n                if(mushrooms[j]<=mushroomsPerTenSeconds) {\n                    second+=mushrooms[j];\n                }\n                else {\n                    second+=mushroomsPerTenSeconds;\n                }\n            }\n            output.println(\"Case #\" + (i+1) + \": \" + first + \" \" + second);\n        }\n        input.close();\n        output.close();\n    }\n}"}
{"idx":"345","func":"class P1 {\n\n    public static void main(String[] args) throws Exception {\n        Scanner scan = new Scanner(new File(\"in.txt\"));\n        PrintWriter w = new PrintWriter(\"out.txt\");\n\n        int cases = Integer.parseInt(scan.nextLine());\n\n        for (int i = 0; i < cases; i++) {\n            int ans1 = 0;\n            int ans2 = 0;\n\n            int n = scan.nextInt();\n            int[] nums = new int[n];\n\n            int largestDrop = 0;\n\n            int last = nums[0] = scan.nextInt();\n\n            for (int j = 1; j < n; j++) {\n                nums[j] = scan.nextInt();\n                if (nums[j] < last) {\n                    int drop = last - nums[j];\n                    largestDrop = Math.max(drop, largestDrop);\n                    ans1 += drop;\n                }\n                last = nums[j];\n            }\n\n            if (largestDrop > 0) {\n                for (int j = 0; j < n-1; j++) {\n                    ans2 += Math.min(largestDrop, nums[j]);\n                }\n            }\n\n\n\n            w.print(\"Case #\");\n            w.print(i+1);\n            w.print(\": \");\n            w.print(ans1);\n            w.print(\" \");\n            w.print(ans2);\n            w.println();\n        }\n\n        scan.close();\n        w.close();\n    }\n\n}"}
{"idx":"346","func":"class Main_Round1A_2015_A {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt();\n        for (int casei = 1; casei <= t; casei++) {\n            int n = sc.nextInt();\n            int[] m = new int[n];\n            m[0] = sc.nextInt();\n\n            int sum = 0;\n            int max = 0;\n            for (int i = 1; i < n; i++) {\n                m[i] = sc.nextInt();\n                int diff = Math.max(0, m[i - 1] - m[i]);\n                max = Math.max(max, diff);\n                sum += diff;\n            }\n\n            int ret = 0;\n            for (int i = 1; i < n; i++) {\n                ret += Math.min(m[i- 1], max);\n            }\n\n            System.out.printf(\"Case #%d: %d %d\\n\", casei, sum, ret);\n        }\n\n        sc.close();\n    }\n}"}
{"idx":"347","func":"class Main {\n\n    static StringBuilder out;\n    \n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(\"input.in\"));\n        out = new StringBuilder();\n        Long start = System.currentTimeMillis();\n        int T = Integer.parseInt(in.readLine());\n        \n        for(int t=0; t<T; t++)\n        {\n            int N = Integer.parseInt(in.readLine());\n            String[] line = in.readLine().split(\" \");\n            int[] nums = new int[N];\n            for(int n=0; n<N; n++)\n            {\n                nums[n] = Integer.parseInt(line[n]);\n            }\n            \n            int sumA = 0;\n            int sumB = 0;\n            int maxGap = 0;\n            int[] gaps = new int[N];\n            \n            for(int n=1; n<N; n++)\n            {\n                \n                gaps[n] = nums[n-1]-nums[n];\n                \n                if(nums[n]< nums[n-1])\n                {\n                    \/\/handle first case\n                    sumA+= gaps[n];\n                }\n                \/\/prep for second case\n                 \n                if(gaps[n] > maxGap)\n                {\n                    maxGap = gaps[n]; \n                }\n            }\n            \n            for(int n=0; n<N-1; n++)\n            {\n                sumB += Math.min(maxGap, nums[n]);\n            }\n            \n            out.append(\"Case #\");\n            out.append((t+1));\n            out.append(\": \");\n            out.append(sumA);\n            out.append(\" \");\n            out.append(sumB);\n            out.append(\"\\r\\n\");\n            \n        }\n        \n        \n        \n        \n        BufferedWriter fOut = new BufferedWriter(new FileWriter(\"output.txt\"));\n        fOut.write(out.toString());\n        fOut.close();\n        Long end = System.currentTimeMillis();\n        System.out.println(\"Time: \" + (end-start));\n\n    }\n\n}"}
{"idx":"348","func":"class MashroomMonster {\n    public static void main(String[] args) {\n        MashroomMonster mM = new MashroomMonster();\n        try{\n            BufferedReader br=new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n            BufferedWriter out=new BufferedWriter(new FileWriter(\"output.txt\"));\n            String s;\n            \n            if((s=br.readLine())!=null){\n                int noLines = Integer.parseInt(s);\n                if(noLines!=0){\n                    for (int index = 0; index < noLines; index++) {\n                        if ((s = br.readLine()) != null) {\n                            String outputString = \"Case #\" + (index + 1) + \": \";\n                            String[] tokenizer = s.trim().split(\" \");\n                            if (tokenizer.length == 1) {\n                                if ((s = br.readLine()) != null) {\n                                    tokenizer = s.trim().split(\" \");\n                                    int[] inputArr = new int[tokenizer.length];\n                                    for (int j = 0; j < tokenizer.length; j++) {\n                                        inputArr[j] = Integer.parseInt(tokenizer[j]);\n                                    }\n                                    int retrnNumber = 0;\n                                    for(int i=1;i<inputArr.length;i++){\n                                        if(inputArr[i-1]>inputArr[i]){\n                                            retrnNumber+= inputArr[i-1]-inputArr[i];\n                                        }\n                                    }\n                                    int output1 = retrnNumber;\n                                    int maxDifference=0;\n                                    for(int i=1;i<inputArr.length;i++){\n                                        if(inputArr[i-1]>inputArr[i] && inputArr[i-1]-inputArr[i] > maxDifference){\n                                            maxDifference = inputArr[i-1]-inputArr[i];\n                                        }\n                                    }\n                                    int eatCount=0;\n                                    for(int i=0;i<inputArr.length-1;i++){\n                                        if(inputArr[i]<maxDifference)\n                                            eatCount += inputArr[i];\n                                        else\n                                            eatCount += maxDifference;\n                                    }\n                                    int output2 = eatCount;\n                                    outputString += output1 + \" \" + output2;\n                                    System.out.println(outputString);\n                                    out.write(outputString);\n                                    out.newLine();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            out.close();\n        }\n        catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"349","func":"class Mushroom\n{\n    public static int n;\n    \n    public static void main(String[] args) throws IOException\n    {\n        Scanner sc = new Scanner(new File(\"Mushroom.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"Mushroom.out\")));\n        \n        n = sc.nextInt();\n        for (int i = 0; i < n; i++)\n        {\n            int size = sc.nextInt();\n            ArrayList<Integer> plate = new ArrayList<Integer>();\n            for (int j = 0; j < size; j++)\n            {\n                plate.add(sc.nextInt());\n            }\n            \/\/get the first number and the max diff\n            int num1 = 0;\n            int max = 0;\n            for (int i2 = 0; i2 < plate.size() - 1; i2++)\n            {\n                int med = plate.get(i2) - plate.get(i2+1);\n                if (med > 0) num1 += med;\n                if (med > max) max = med;\n            }\n            \n            \/\/she eats at max per 10 seconds\n            \n            \/\/get the second number\n            int num2 = 0;\n            for (int i1 = 0; i1 < plate.size() - 1; i1++)\n            {\n                num2 += Math.min(plate.get(i1), max);\n            }\n            String ans = \"\" + num1 + \" \" + num2;\n            out.println(\"Case #\" + (i+1) + \": \" + ans);\n        }\n        \n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"350","func":"static void main(String[] args){\n        Main r = new Main();\n        Scanner sc = new Scanner(System.in);\n        \n        int t = sc.nextInt();\n        for(int i=0; i<t; i++){\n            int n = sc.nextInt();\n            r.mash = new int[n];\n            for(int j=0; j<n; j++) r.mash[j] = sc.nextInt();\n            int res = 0;\n            for(int i1=1; i1<r.mash.length; i1++){\n                if(r.mash[i1-1]>r.mash[i1]) res += r.mash[i1-1] - r.mash[i1];\n            }\n        \n            int ans1 = res;\n            int rate = 0;\n            for(int i1=1; i1<r.mash.length; i1++){\n                rate = Math.max(rate, r.mash[i1-1] - r.mash[i1]);\n            }\n            \n            int first = 0;\n            int res1 = 0;\n            for(int i2=0; i2<r.mash.length-1; i2++){\n                res1 += Math.min(rate, r.mash[i2]);\n            }\n            int ans2 = res1;\n            System.out.printf(\"Case #%d: %d %d\\n\", i+1, ans1, ans2);\n        }\n    }\n}"}
{"idx":"351","func":"class A {\n\n    public static void main(String[] args) throws IOException {\n        Scanner scan = new Scanner(new FileReader(\"A-large.in\"));\n        \/\/Scanner scan = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));\n        \/\/PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(\"A.txt\")));\n        int t = scan.nextInt();\n        for (int q = 1; q <= t; q++) {\n            int n = scan.nextInt();\n            int[] arr = new int[n];\n            int ans1 = 0;\n            int max = 0;\n            for (int i = 0; i < n; i++) {\n                arr[i] = scan.nextInt();\n                if (i != 0 && (arr[i - 1] > arr[i])) {\n                    ans1 = ans1 + arr[i - 1] - arr[i];\n                    max = Math.max(max, arr[i - 1] - arr[i]);\n                }\n            }\n            \n            int ans2 = 0;\n            for (int i = 0; i < n - 1; i++) {\n                \/\/pw.println(i + \" \" + arr[i] + \" \" + left + \" \" + ans2);\n                if (arr[i] > max) {\n                    ans2 = ans2 + max;\n                } else {\n                    ans2 = ans2 + arr[i];\n                }\n            }\n            pw.write(\"Case #\" + q + \": \" + ans1 + \" \" + ans2 + \"\\n\");\n        }\n        pw.close();\n    }\n\n}"}
{"idx":"352","func":"class question_3 {\n    public static void main(String[] args){\n        Scanner scanner;\n        try {\n            scanner = new Scanner(new File(\"A-large.in\"));\n            int noofTests = scanner.nextInt();\n            \n            \n            int i=0;\n            \n            while(i<noofTests){\n                ArrayList no =  new ArrayList();    \n                int temptwo=0;\n            int noOfEaten = scanner.nextInt();\n            for(int j=0;j<noOfEaten;j++){\n                no.add(scanner.nextInt());                                \n            }\n            int sum=0;\n            for(int j=0;j<no.size();j++){\n                sum+=(int) no.get(j);\n            }\n            int tmp= (int) no.get(0);\n            int sumTmp=0;\n            for(int j=1;j<no.size();j++){\n                if(tmp > (int) no.get(j))\n                    sumTmp  += tmp -(int) no.get(j);\n                tmp = (int) no.get(j);\n            }\n            \n            int rateSum=0;\n                int rate = (int)no.get(noOfEaten-2) - (int)no.get(noOfEaten-1);\n                int tmpdiff=0;\n                int diff=0;\n                for(int j=0;j<no.size()-1;j++){                    \n                    if((int)no.get(j) > (int)no.get(j+1)){\n                        tmpdiff = (int)no.get(j) - (int)no.get(j+1);\n                    }\n                    if(tmpdiff > diff){\n                        diff = tmpdiff;\n                    }\n                }\n                for(int j=0;j<no.size()-1;j++){\n                    if((int)no.get(j) > diff){\n                        rateSum += diff;\n                    }\n                    else{\n                        rateSum+=(int)no.get(j);                                            \n                    }\n                }\n                \n                temptwo = sum - ((int)no.get(noOfEaten-1)*2) ;\n                System.out.println(\"Case #\"+(i+1)+\": \"+sumTmp + \" \" + rateSum);\n                \n                i++;\n            }\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"353","func":"class ASmall {\n    public static void main(String[] args) throws IOException {\n\n        BufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"A-large.out\"));\n        \n        String line = in.readLine();\n        int n = Integer.parseInt(line);\n        for(int i=0; i<n; i++){\n            line = in.readLine();\n            line = in.readLine();\n            String[] arr = line.split(\" \");\n            int[] m = new int[arr.length];\n            m[0] = Integer.parseInt(arr[0]);\n            long min = 0;\n            long minDiff = 0;\n            for(int y=1; y<m.length; y++){\n                m[y] = Integer.parseInt(arr[y]);\n                if(m[y] < m[y-1]){\n                    min = min + (m[y-1] - m[y]);\n                }\n                if(m[y-1] - m[y] > minDiff){\n                    minDiff = m[y-1] - m[y];\n                }\n            }\n            \n            long min2 = 0;\n            for(int y=0; y<m.length-1; y++){\n                if(m[y] < minDiff){\n                    min2 = min2 + m[y];\n                }else{\n                    min2 = min2 + minDiff;\n                }\n            }\n            \n            \n            System.out.println(\"Case #\"+(i+1)+\": \"+min+\" \"+min2+\"\\n\");\n            writer.write(\"Case #\"+(i+1)+\": \"+min+\" \"+min2+\"\\n\");\n        }\n        in.close();\n        writer.close();\n    }\n}"}
{"idx":"354","func":"class Mushroom {\n\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"A-large.in.txt\");\n\/\/        File file = new File(\"Mushroom.in\");\n        File outputFile = new File(\"Mushroom.out\");\n        BufferedWriter bw = new BufferedWriter(new FileWriter(outputFile));\n        BufferedReader br = new BufferedReader(new InputStreamReader(\n                new FileInputStream(file)));\n        int numberOfTestCases = Integer.valueOf(br.readLine());\n        int count = 0;\n        while (count++ < numberOfTestCases) {\n            int n=Integer.valueOf(br.readLine());\n            String[] params=br.readLine().split(\" \");\n            long a=0;\n            long rate=0;\n            int[] mushrooms=new int[n];\n            for (int i=0;i<n;i++){\n                mushrooms[i]=Integer.valueOf(params[i]);\n                if(i>0) {\n                    int minus = mushrooms[i - 1] - mushrooms[i];\n                    if (minus > 0) {\n                        a += minus;\n                    }\n                    if (rate < minus) {\n                        rate = minus;\n                    }\n                }\n            }\n            long b=0;\n            for (int i=0;i<n-1;i++){\n                if(mushrooms[i]>0){\n                    if(mushrooms[i]>rate){\n                        b+=rate;\n                    }else{\n                        b+=mushrooms[i];\n                    }\n                }\n            }\n\n\n            bw.write(\"Case #\" + String.valueOf(count) + \": \" + String.valueOf(a) + \" \" + String.valueOf(b));\n            bw.newLine();\n        }\n\n        bw.close();\n        br.close();\n    }\n}"}
{"idx":"355","func":"class A {\n    public static boolean DEBUG = true;\n    \n    public static void main(String[] args) throws Exception{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        \n        int cases = Integer.parseInt(br.readLine());\n        \n        for(int t = 1; t <= cases; t++){\n            pw.print(\"Case #\" + t + \": \");\n            \n            int n = Integer.parseInt(br.readLine());\n            \n            StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n            int[] m = new int[n];\n            \n            for(int i = 0; i < n; i++){\n                m[i] = Integer.parseInt(st.nextToken());\n            }\n            \n            long a = 0;\n            long b = 0;\n            \n            for(int i = 1; i < n; i++){\n                a += Math.max(0, m[i-1]-m[i]);\n                b = Math.max(b, m[i-1]-m[i]);\n            }\n            \n            long c = 0;\n            \n            for(int i = 0; i < n-1; i++){\n                c += Math.min(b, m[i]);\n            }\n            \n            pw.println(a + \" \" + c);\n        }\n        \n        br.close();\n        pw.close();\n    }\n}"}
{"idx":"356","func":"class Main {\n  public static void main(String[] args) throws Exception {\n    InputStreamReader isr = new InputStreamReader(System.in);\n    BufferedReader br = new BufferedReader(isr);\n    int T = Integer.parseInt(br.readLine());\n    for (int t = 1; t <= T; t++) {\n      int n = Integer.parseInt(br.readLine());\n      StringTokenizer st = new StringTokenizer(br.readLine());\n      int[] m = new int[n];\n      for (int i = 0; i < n; i++) {\n        m[i] = Integer.parseInt(st.nextToken());\n      }\n      long y = 0, z = 0, max = 0;\n      for (int i = 0; i < n - 1; i++) {\n        if (m[i] > m[i + 1]) {\n          int d = m[i] - m[i + 1];\n          y += d;\n          if (d > max) {\n            max = d;\n          }\n        }\n      }\n      for (int i = 0; i < n - 1; i++) {\n        z += Math.min(m[i], max);\n      }\n      System.out.println(String.format(\"Case #%d: %d %d\", t, y, z));\n    }\n  }\n}"}
{"idx":"357","func":"class A {\n    public static Scanner in;\n    public static PrintWriter out;\n\n    public static void main(String[] args) throws FileNotFoundException {\n    in = new Scanner(new BufferedInputStream(new FileInputStream(new File(\n        \"input.txt\"))));\n    out = new PrintWriter(new BufferedOutputStream(new FileOutputStream(\n        new File(\"output.txt\"))));\n    int nCases = in.nextInt();\n    in.nextLine();\n    for (int CASE = 1; CASE <= nCases; CASE++) {\n        out.print(\"Case #\" + CASE + \": \");\n        int m = in.nextInt();\n        int[] a = new int[m];\n        int maxD = 0;\n        for (int i = 0; i < m; i++)\n            a[i] = in.nextInt();\n        long r1 = 0, r2 = 0;\n        for (int i = 0; i < m - 1; i++) {\n            maxD = Math.max(maxD, a[i] - a[i + 1]);\n        }\n        for (int i = 1; i < m; i++) {\n            if (a[i] < a[i - 1])\n            r1 += a[i - 1] - a[i];\n        }\n        for (int i = 0; i < m - 1; i++)\n            if (a[i] < maxD)\n            r2 += a[i];\n            else\n            r2 += maxD;\n        out.println(r1 + \" \" + r2);\n    }\n    out.close();\n    System.err.println(\"Done\");\n    }\n}"}
{"idx":"358","func":"static void main(String[] args) throws Exception\n    {\n        Scanner in = new Scanner(System.in);\n        int nData = in.nextInt();\n        in.nextLine();\n        \n        for (int asdf = 0; asdf < nData; asdf++)\n        {\n            \/\/solve the problem\n            int size = in.nextInt();\n            int[] items = new int[size];\n            \n            for (int i = 0; i < size; i++)\n            {\n                int num = in.nextInt();\n                items[i] = num;\n            }\n            \n            int prev = -1;\n            int total1 = 0;\n            \n            \/\/method one\n            for (int i = 0; i < size; i++)\n            {\n                int num = items[i];\n                int minEaten = prev - num;\n                \n                if ((prev != -1) && (minEaten > 0))\n                {\n                    total1 += minEaten;\n                }\n                \n                prev = num;\n            }\n            \n            \/\/method 2\n            int rate = -1;\n            int total2 = 0;\n            \n            \/\/find the rate of eating\n            for (int i = 1; i < size; i++)\n            {\n                int minEaten = items[i-1] - items[i];\n                \n                if ((rate == -1) || (minEaten > rate))\n                {\n                    rate = minEaten;\n                }\n            }\n            \n            \/\/find the amount eaten\n            for (int i = 1; i < size; i++)\n            {\n                if (items[i-1] < rate)\n                {\n                    total2 += items[i-1];\n                }\n                else\n                {\n                    total2 += rate;\n                }\n            }\n            \n            System.out.println(\"Case #\" + (asdf+1) + \": \" + total1 + \" \" + total2);\n        }\n    }\n}"}
{"idx":"359","func":"class A {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/Scanner input = new Scanner(System.in);\n        Scanner input = new Scanner(new File(\"A-large.in\"));\n        PrintWriter out = new PrintWriter(new File(\"A.out\"));\n\n        while (input.hasNext()) {\n            int T = input.nextInt();\n\n            for (int caseNum = 1; caseNum <= T; ++caseNum) {\n                int N = input.nextInt();\n                int[] mushroom = new int[N];\n\n                for (int i = 0; i < mushroom.length; ++i) {\n                    mushroom[i] = input.nextInt();\n                }\n\n                int method1 = 0;\n                int rate = 0;\n\n                for (int i = 1; i < mushroom.length; ++i) {\n                    if (mushroom[i] < mushroom[i - 1]) {\n                        method1 += mushroom[i - 1] - mushroom[i];\n                        rate = Math.max(rate, mushroom[i - 1] - mushroom[i]);\n                    }\n                }\n\n                int method2 = 0;\n                for (int i = 0; i < mushroom.length - 1; ++i) {\n\n                    if (mushroom[i] <= rate) {\n                        method2 += mushroom[i];\n                    } else {\n                        method2 += rate;\n                    }\n                }\n\n                \/\/out.printf(\"rate: %d\\n\", rate);\n                out.printf(\"Case #%d: %d %d\\n\", caseNum, method1, method2);\n            }\n        }\n\n        input.close();\n        out.close();\n    }\n\n}"}
{"idx":"360","func":"class ProblemA {\n\n    public static void main(String[] args) throws IOException\n    {\n        Scanner in = new Scanner(new File(\"A-large.in\"));\n        PrintWriter out = new PrintWriter(new File(\"outputAlarge.txt\"));\n        int t = in.nextInt();\n        for (int tnumber = 1; tnumber <= t; tnumber++)\n        {\n            int n = in.nextInt();\n            int [] a = new int[n];\n            int max = 0;\n            for (int i = 0; i < n; i++) a[i] = in.nextInt();\n            int ans = 0;\n            for (int i = 1; i < n; i++) \n            {\n                if (a[i - 1] - a[i] > 0)\n                {\n                    ans += a[i - 1] - a[i];\n                    if (a[i - 1] - a[i] > max) max = a[i - 1] - a[i];\n                }\n             }\n            int ans1 = 0;\n            \n            for (int i = 1; i < n; i++)\n                if (a[i - 1] < max) ans1 += a[i - 1]; else ans1 += max;\n            \n            out.println(\"Case #\" + tnumber + \": \" + ans + \" \" +  ans1);\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"361","func":"class Mushroom {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new FileReader(args[0]));\n        BufferedWriter writer = new BufferedWriter(new FileWriter(args[0].substring(0, args[0].length() - 2) + \"out\"));\n        int testCases = Integer.parseInt(reader.readLine());\n        System.out.println(\"Test cases: \" + testCases);\n        for (int test = 0; test < testCases; test++) {\n            int n = Integer.parseInt(reader.readLine());\n            String[] splitLine = reader.readLine().split(\" \");\n            int case1 = 0;\n            int case2 = 0;\n            int maxEat = 0;\n            for (int i = 0; i < n - 1; i++) {\n                if (Integer.parseInt(splitLine[i]) > Integer.parseInt(splitLine[i + 1])) {\n                    int eat = Integer.parseInt(splitLine[i]) - Integer.parseInt(splitLine[i + 1]);\n                    case1 += eat;\n                    maxEat = maxEat < eat ? eat : maxEat;\n                }\n            }\n\n            for (int i = 0; i < n - 1; i++) {\n                if (Integer.parseInt(splitLine[i]) < maxEat) {\n                    case2 += Integer.parseInt(splitLine[i]);\n                }else{\n                    case2 += maxEat;\n                }\n            }\n            writer.write(\"Case #\"+(test+1)+\": \"+case1+\" \"+case2+\"\\n\");\n            System.out.println(\"Case #\" + (test + 1) + \": \" + case1 + \" \" + case2+\"\\n\");\n        }\n        reader.close();\n        writer.flush();\n        writer.close();\n    }\n}"}
{"idx":"362","func":"class mushroom {\n    public static void main(String[] args) throws IOException{\n        BufferedReader buf = new BufferedReader(new FileReader(\"mushroom.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"mushroom.out\")));\n        Long n = Long.parseLong(buf.readLine());\n        for(int i = 1; i <= n; i++){\n            Long m = Long.parseLong(buf.readLine());\n            String[] s = buf.readLine().split(\" \");\n            long fsum = 0;\n            long largest = 0;\n            for(int j = 1; j < m; j++){\n                if(Long.parseLong(s[j]) - Long.parseLong(s[j-1]) < 0){\n                    fsum = fsum + Long.parseLong(s[j-1]) - Long.parseLong(s[j]);\n                    if(Long.parseLong(s[j-1]) - Long.parseLong(s[j]) > largest) largest = Long.parseLong(s[j-1]) - Long.parseLong(s[j]);\n                }\n            }\n            long nsum = 0;\n            for(int j = 0; j < m-1; j++){\n                nsum = nsum + Math.min(Long.parseLong(s[j]), largest);\n            }\n            out.println(\"Case #\" + i + \": \" + fsum + \" \" + nsum); \n        }\n        buf.close();\n        out.close();\n    }\n}"}
{"idx":"363","func":"class A {\n    public static void main(String[] args) {\n         try {\n             Scanner scanner = (new Scanner(new File(\"c:\/users\/rafal\/ideaprojects\/src\/Ain.txt\")));\n\n\n             FileOutputStream out = new FileOutputStream(\"c:\/users\/rafal\/ideaprojects\/src\/Aout.txt\");\n\n             int numberOfCases;\n             numberOfCases = scanner.nextInt();\n             scanner.nextLine();\n\n             PrintWriter wr = new PrintWriter(out);\n             for (int i = 0; i < numberOfCases; i++) {\n                 int caseNumber = i + 1;\n                int n = scanner.nextInt();\n                \n                int []nn = new int[n];\n                for (int i1 = 0; i1 < n; i1++) {\n                    nn[i1] = scanner.nextInt();\n                }\n                \n                int maxDiff = 0;\n                int result1 = 0;\n                for (int i2 = 1; i2 < n; i2++) {\n                    if (nn[i2] < nn[i2-1]) {\n                        int diff = nn[i2-1] - nn[i2];\n                        if (diff > maxDiff) {\n                            maxDiff = diff;\n                        }\n                        result1 += diff;\n                    }\n                }\n                \n                int result2 = 0;\n                for (int i3 = 0; i3 < n - 1; i3++) {\n                    if (nn[i3] >= maxDiff) {\n                        result2 += maxDiff;\n                    } else {\n                        result2 += nn[i3];\n                    }\n                }\n                \n                wr.println(\"Case #\" + caseNumber + \": \" + result1 + \" \" + result2);\n                System.out.println(\"Case #\" + caseNumber + \": \" + result1 + \" \" + result2);\n                \/\/ ...\n                 if (i < numberOfCases - 1)\n                    scanner.nextLine();\n             }\n             wr.close();\n             out.close();\n\n         } catch (IOException e) {\n             System.out.println(\"Error: \" + e);\n         }\n     }\n\n\n\n}"}
{"idx":"364","func":"class HelloGoogleJava {\n\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        String encoding = \"UTF-8\";\n        BufferedReader reader = null;\n        String filename= \"\/Users\/dhsingh\/Downloads\/inputA.txt\";\n        String objectFile= \"\/Users\/dhsingh\/Downloads\/output_A.txt\";\n        String contentss=\"\";\n        BufferedWriter bw;\n        bw = new BufferedWriter(new FileWriter(objectFile));\n        try {\n            reader = new BufferedReader(new InputStreamReader(new FileInputStream(filename), encoding));\n            String line = reader.readLine();\n            int T= Integer.parseInt(line);\n            String[]parsed;\n            int sum=0;\n            int first,second;\n            int diff;\n            for (int ii=1; ii<=T;ii++) {\n                sum=0;\n                line = reader.readLine();\n                line = reader.readLine();\n                parsed= line.split(\" \");\n                first=0;\n                diff=Integer.parseInt(parsed[0])-Integer.parseInt(parsed[1]);\n                for(int i=0;i<parsed.length-1;i++){\n                    first+=Integer.parseInt(parsed[i])-Integer.parseInt(parsed[i+1])>0?Integer.parseInt(parsed[i])-Integer.parseInt(parsed[i+1]):0;\n                }\n                for(int i=0;i<parsed.length-1;i++)\n                {    \n                    diff=Integer.parseInt(parsed[i])-Integer.parseInt(parsed[i+1])>diff?Integer.parseInt(parsed[i])-Integer.parseInt(parsed[i+1]):diff;\n                }    \n                second=0;\n                for(int i=0;i<parsed.length-1;i++)\n                {    \n                    second+=Integer.parseInt(parsed[i])-Integer.parseInt(parsed[i+1])<diff?(Integer.parseInt(parsed[i])>diff?diff:Integer.parseInt(parsed[i])):diff;\n                }\n                contentss+=\"Case #\"+ii+\": \"+first+\" \"+second+\"\\n\";\n            }\n            \n            \n            bw.write(contentss);\n            \n        }\n        finally{\n            reader.close();\n            bw.close();\n        }\n\/\/        BB();\n    }\n\n\n}"}
{"idx":"365","func":"class A{\n  public static void main (String[] args) throws Exception{\n    Scanner in = new Scanner (new FileReader(\"A-large.in\"));\n    PrintWriter out = new PrintWriter (\"A.out\");\n    int cases = in.nextInt();\n    for (int casenum = 1; casenum <= cases; casenum++){\n      int n = in.nextInt();\n      int[] mushrooms = new int[n];\n      for (int i = 0; i < n; i++){\n        mushrooms[i] = in.nextInt();\n      }\n      int maxDiff = 0;\n      int total = 0;\n      for (int i = 1; i < n; i++){\n        int diff = mushrooms[i-1] - mushrooms[i];\n        maxDiff = Math.max (maxDiff, diff);\n        total += Math.max(diff, 0);       \n      }\n      int constTotal = 0;\n      for (int i = 0; i < n-1; i++){\n        constTotal += Math.min(maxDiff,mushrooms[i]);\n      }\n      \n      out.println (\"Case #\" + casenum + \": \" + total + \" \" + constTotal);\n    }\n    out.close();\n    in.close();\n  }\n}"}
{"idx":"366","func":"class A {\n    \n    public static void main(String[] args) {\n        \n        String filename = \"A-large.in\";\n        String output = \"output.txt\";\n        Scanner scanner = null;\n        PrintWriter printer = null;\n        \n        try {\n            scanner = new Scanner(new FileReader(filename));\n            printer = new PrintWriter(new FileWriter(output));\n            \n            int tests = scanner.nextInt();\n            for (int test = 1; test <= tests; test++) {\n                \n                \/\/ Input\n                int N = scanner.nextInt();\n                int ini = scanner.nextInt();\n                int[] obs = new int[N - 1];\n                for (int i = 0; i < N - 1; i++) {\n                    obs[i] = scanner.nextInt();                    \n                }\n                \n                int a = 0;\n                int b = 0;\n                \n                int running = ini;\n                for(int ob : obs) {\n                    if(ob < running) \n                        a += (running - ob);\n                    running = ob;\n                }\n                \n                int max = 0;\n                int runningb = ini;\n                for (int ob : obs) {\n                    max = Math.max(max, runningb - ob);\n                    runningb = ob;\n                }\n                runningb = ini;\n                for (int i = 0; i < obs.length; i++) {\n                    int ob = obs[i];\n                    b += Math.min(max, runningb);\n                    runningb = ob;\n                }\n                \n                \/\/System.out.println(String.format(\"Case #%d: %d %d\", test, a, b));\n                printer.println(String.format(\"Case #%d: %d %d\", test, a, b));\n            }            \n            \n        } catch (FileNotFoundException e) {\n            System.out.println(filename + \" not found.\");\n        } catch(IOException e) {\n            System.out.println(e.getMessage());\n        } finally {\n            if (scanner != null) {\n                scanner.close();\n            }\n            if (printer != null) {\n                printer.flush();\n                printer.close();\n            }\n        }\n    }\n}"}
{"idx":"367","func":"class A {\npublic static void main(String [] args) {\n    Scanner scanner = new Scanner(System.in);\n    int nCase = scanner.nextInt();\n    \n    for (int nc = 1; nc <= nCase; nc++) {\n        int N = scanner.nextInt();\n        int[] m = new int[N];\n        for (int i = 0; i < N; i++)\n            m[i] = scanner.nextInt();\n        \n        int y = 0;\n        \n        for (int i = 1; i < N; i++) {\n            if (m[i] < m[i-1])\n                y += m[i-1] - m[i];\n        }\n        \n        int z = 0;\n        int max = 0;\n        \/\/System.out.print(\"max:\");\n        for (int i = 0; i < N-1; i++) {\n            max = Math.max(m[i] - m[i+1], max);\n            \/\/System.out.print(\" \"+max);\n        }\n        \/\/System.out.println();\n        for (int i = 0; i < N-1; i++) {\n            z += Math.min(m[i], max);\n        }\n        \n        System.out.println(\"Case #\" + nc + \": \" + y + \" \" + z);\n    }\n}\n}"}
{"idx":"368","func":"class P1 {\n    static String filename = \".\/src\/A-large.in\";\n\n    public static void main(String[] args) throws IOException {\n        try (Scanner s = new Scanner(new FileReader(filename));\n             FileWriter writer = new FileWriter(new File(filename.substring(0, filename.length() - 2) + \"out\"))) {\n\n            int T = Integer.valueOf(s.nextLine());\n\n            for (int i = 0 ; i < T ; i++) {\n                \/\/ Eat a line\n                s.nextLine();\n\n                String[] intStrings = s.nextLine().split(\" \");\n                int[] ints = new int[intStrings.length];\n                for (int inti = 0 ; inti < intStrings.length ; inti++) {\n                    ints[inti] = Integer.valueOf(intStrings[inti]);\n                }\n                int result = 0;\n                int last = 0;\n                for (int i1 : ints) {\n                    if (i1 < last)\n                        result += last - i1;\n                    last = i1;\n                }\n\n                int min1 = result;\n                int max = 0;\n                int last1 = 0;\n                for (int i3 : ints) {\n                    if (i3 < last1 && (max < (last1 - i3))) {\n                        max = last1 - i3;\n                    }\n                    last1 = i3;\n                }\n                \n                int result1 = 0;\n                for (int i2 = 0 ; i2 < ints.length - 1; i2++) {\n                    int plate = ints[i2];\n                    int eatenThisTime = Math.min(plate, max);\n                    result1 += eatenThisTime;\n                }\n                int min2 = result1;\n\n                writer.write(\"Case #\" + (i + 1) + \": \" + min1 + \" \" + min2 + \"\\n\");\n                System.out.println(\"Case #\" + (i + 1) + \": \" + + min1 + \" \" + min2);\n            }\n        }\n    }\n}"}
{"idx":"369","func":"class A {\n\n    private Scanner scanner;\n    private Writer writer;\n\n    public static void main(String[] args) throws IOException {\n        A a = new A();\n        a.scanner = new Scanner(new FileInputStream(\"src\/cj\/y2015\/r1a\/A-large.in\"));\n        a.writer = new FileWriter(\"src\/cj\/y2015\/r1a\/A-large.out\", false);\n        int t = a.scanner.nextInt();\n        for (int i=0; i<t; i++) {\n            int n = a.scanner.nextInt();\n            int[] mn = new int[n];\n            long eat1 = 0;\n            long eat2 = 0;\n            int max_d = 0;\n            for (int j=0; j<n; j++) {\n                mn[j] = a.scanner.nextInt();\n                if (j>0) {\n                    if (mn[j]<mn[j-1]) {\n                        eat1 += (mn[j-1]-mn[j]);\n                        int tmp = mn[j-1]-mn[j];\n                        if (tmp>max_d)\n                            max_d = tmp;\n                    }\n                }\n            }\n            System.out.println(\"max_d=\" + max_d);\n            double r = ((double)max_d)\/10;\n            \/\/ simulate\n            for (int j=0; j<n; j++) {\n                if (j>0) {\n                    int prev = mn[j-1];\n                    int cur = mn[j];\n                    if (prev>(r*10)) {\n                        eat2 += r*10;\n                    } else {\n                        eat2 += prev;\n                    }\n                }\n            }\n        \n        \n            a.writer.write(\"Case #\" +(i+1)+\": \"+eat1+\" \"+eat2+\"\\n\");\n            System.out.println(\"Case #\" + (i + 1) + \": \" + eat1 + \" \" + eat2);\n        }\n        a.scanner.close();\n        a.writer.close();\n    }\n}"}
{"idx":"370","func":"class R1aA {\npublic static void main(String args[]) throws Exception {\n        \n        String inFile = \"A-large.in\";\/\/ path to input file \n        String outFile =  \"outputA.txt\";\n        \n        LineNumberReader lin = new LineNumberReader(new InputStreamReader(new FileInputStream(inFile)));\n        PrintWriter out = new PrintWriter(new File(outFile));\n        int NCASE = Integer.parseInt(lin.readLine());\n        for(int CASE = 1; CASE <= NCASE; CASE++) {\n            out.print(\"Case #\" + CASE + \": \");\n            String l = lin.readLine();\n            int N=Integer.parseInt(l);\n            String l2 = lin.readLine();\n            String  [] parts = l2.split(\" \");\n            int [] m= new int[N];\n            for (int i=0; i<N; i++){\n                m[i] = Integer.parseInt(parts[i]);\n            }\n            int y=0;\n            int z=0;\n            int max=0;\n\n            for (int i=0; i<N-1; i++){\n                if (m[i]-m[i+1]>=0){\n                    y=y+m[i]-m[i+1];\n                }\n            }\n            \n            for (int i=0; i<N-1; i++){\n                if (m[i]-m[i+1]>=max){\n                    max=m[i]-m[i+1];\n                }\n            }\n            for (int i=0; i<N-1; i++){\n                if (m[i]>=max){\n                    z=z+max;\n                } else {\n                    z=z+m[i];\n                }\n            }\n            out.println(y +\" \"+z); \n            \n        }\n\n        lin.close();\n        out.close();\n    \n        }        \n}"}
{"idx":"371","func":"class MushroomMonster {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int t = sc.nextInt();\n    int[] nums = new int[1000];\n    for (int i = 1; i <= t; i++) {\n      int n = sc.nextInt();\n      int maxGap = 0;\n      int sum1 = 0;\n      int sum2 = 0;\n      for (int j = 0; j < n; j++) {\n        nums[j] = sc.nextInt();\n        if (j > 0) {\n          maxGap = Math.max(maxGap, nums[j - 1] - nums[j]);\n          sum1 += Math.max(0, nums[j - 1] - nums[j]);\n        }\n      }\n      for (int j = 0; j < n - 1; j++) {\n        sum2 += Math.min(maxGap, nums[j]);\n      }\n      System.out.printf(\"Case #%d: %d %d\\n\", i, sum1, sum2);\n    }\n  }\n}"}
{"idx":"372","func":"class A {\n    public static void main(String[] args) throws Exception {\n        Scanner input = new Scanner(System.in);\n        int caseCount = input.nextInt();\n\n        for (int caseNo = 1; caseNo <= caseCount; caseNo++) {\n            int N = input.nextInt();\n            int cs1 = 0;\n            int cr2 = 0;\n            int cs2 = 0;\n            int ary[] = new int[1000];\n\n            int prev = input.nextInt();\n            ary[0] = prev;\n\n            for (int i = 1; i < N; i++) {\n                int nw = input.nextInt();\n                ary[i] = nw;\n                \/\/ System.out.println(\"nw \" + nw);\n                if (prev > nw) {\n                    cs1 = cs1 + (prev - nw);\n                    if (cr2 < (prev - nw)) {\n                        cr2 = (prev - nw);\n                    }\n                }\n                prev = nw;\n                \/\/ System.out.println(\"cs1 \" + cs1);\n            }\n\n            for (int j = 0; j < N - 1; j++) {\n                if (ary[j] > cr2) {\n                    cs2 = cs2 + cr2;\n                } else {\n                    cs2 = cs2 + ary[j];\n                }\n            }\n\n            System.out.println(\"Case #\" + caseNo + \": \" + cs1 + \" \" + cs2);\n        }\n    }\n}"}
{"idx":"373","func":"class ProbA\n{\n    static Scanner sc;\n    static PrintWriter pw;\n    public static void main(String args[])throws IOException\n    {\n        sc=new Scanner(new File(\"input\/A-large.in\")); \/\/For Scanning input file\n        pw=new PrintWriter(new File(\"output\/A-large.out\"));\/\/For writing output file\n        int T=sc.nextInt();\/\/no. of cases\n\n        for(int x=1 ;x<=T; x++)\n        {\n            int N=sc.nextInt();\n            int pc[]=new int[N];\n            int y=0,z=0,rate=0;\n            for(int i=0;i<N;i++)\n            {\n                pc[i]=sc.nextInt();\n                if(i!=0)\n                {\n                    if(pc[i]<pc[i-1])\n                    y+=pc[i-1]-pc[i];\n                    \n                    if((pc[i-1]-pc[i])>rate)\n                    rate=pc[i-1]-pc[i];\n                }\n            }\n            for(int i=0;i<(N-1);i++)\n            {\n                if(pc[i]<rate)\n                z+=pc[i];\n                else\n                z+=rate;\n            }\n            pw.println(\"Case #\"+x+\": \"+y+\" \"+z);\n        }\n        sc.close();\n        pw.close();\n    }\n}"}
{"idx":"374","func":"static void main(String[] arg) {\n    Scanner sc = new Scanner(System.in);\n    int tcc = sc.nextInt();\n    for (int tc = 1; tc <= tcc; ++tc) {\n      int n = sc.nextInt();\n      int[] arr = new int[n];\n      for (int i = 0; i < n; ++i) arr[i] = sc.nextInt();\n      int a = 0;\n      for (int i = 1; i < n; ++i) a += Math.max(0, arr[i-1] - arr[i]);\n      int br = 0;\n      for (int i = 1; i < n; ++i) br = Math.max(br, arr[i-1] - arr[i]);\n      int b = 0;\n      for (int i = 0; i < n - 1; ++i) b += Math.min(br, arr[i]);\n      System.out.printf(\"Case #%d: %d %d%n\", tc, a, b);\n    }\n  }\n}"}
{"idx":"375","func":"class ASecondRound {\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        for (int cases = 1; cases <= T; cases++) {\n            int n = Integer.parseInt(br.readLine());\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int[] nums = new int[n];\n            for (int i = 0; i < n; i++) \n                nums[i] = Integer.parseInt(st.nextToken());\n            int ans1 = 0, ans2 = 0;\n            for (int i = 1; i < nums.length; i++) \n                if(nums[i] < nums[i-1]) ans1 += nums[i-1] - nums[i];\n            double rate = 0;\n            for (int i = nums.length-1; i > 0; i--) \n                rate = Math.max(rate, nums[i-1] - nums[i]);\n            \n            for (int i = 0; i < nums.length-1; i++) {\n                if(nums[i] > rate) ans2 += rate;\n                else ans2 += nums[i];\n            }\n            \n            System.out.println(\"Case #\" + cases + \": \" + ans1 + \" \" + ans2);\n        }\n    }\n}"}
{"idx":"376","func":"static void main(String[] args)\n    {\n    Scanner in=new Scanner(System.in);\n    int ncase=in.nextInt();\n    for(int icase=0;icase<ncase;icase++){\n        int icase1=icase+1;\n        int N=in.nextInt();\n        int[] mush=new int[N];\n        for(int i=0;i<N;i++)\n        mush[i]=in.nextInt();\n\n        int imeth1=0;\n        int imeth2=0;        \n        for(int i=0;i<N-1;i++){\n        if(mush[i]>mush[i+1]){\n            int dif=mush[i]-mush[i+1];\n            imeth1+=dif;\n        }\n        imeth2+=mush[i];\n        }\n        if(imeth2>=mush[N-1]){\n        imeth2=imeth2-mush[N-1];\n        }\n\n        int rate=0;\n\n        for(int i=1;i<N;i++){\n        if(mush[i-1]>mush[i]){\n            int eaten=mush[i-1]-mush[i];\n            int r=eaten;\n            if(r>rate)\n            rate=r;\n        }\n\n        }\n        \n        imeth2=0;\n\n        if(rate!=0){\n        for(int i=0;i<N-1;i++){\n            if(mush[i]>=rate){\n            imeth2+=rate;\n            }else{\n            imeth2+=mush[i];\n            }\n        }\n        }\n        \n\n        System.out.println(\"Case #\"+icase1+\":\"+\" \"+imeth1+\" \"+imeth2);\n    }\n    }\n}"}
{"idx":"377","func":"class CodeJam2015Round1AA {\n\n    public static void main(String[] args) throws Exception {\n        String output = \"\";\n        Scanner input = new Scanner(new FileReader(\".\/A-large.in\"));\n        \n        int numCases = input.nextInt();\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n            int N = input.nextInt();\n            long[] Ms = new long[N];\n            long[] diffs = new long[N - 1];\n            for (int i = 0; i < N; i++) {\n                Ms[i] = input.nextInt();\n            }\n            for (int i = 0; i < N - 1; i++) {\n                diffs[i] = Ms[i] - Ms[i + 1];\n            }\n            long y = 0, maxZ = 0, z = 0;\n            for (long diff : diffs) {\n                if (diff > 0) {\n                    y += diff;\n                }\n                if (maxZ < diff) {\n                    maxZ = diff;\n                }\n            }\n            for (int i = 0; i < N - 1; i++) {\n                if (Ms[i] <= maxZ)\n                    z += Ms[i];\n                else\n                    z += maxZ;\n            }\n            output += String.format(\"Case #%d: %d %d\\n\", caseNum, y, z);\n        }\n        \n        input.close();\n        try (BufferedWriter bw = new BufferedWriter(new FileWriter(\".\/A-large.out\"))) {\n            bw.write(output);\n        }\n    }\n}"}
{"idx":"378","func":"class Mushroom {\n\n  public static void main(String[] args) {\n\n    BufferedReader reader = null;\n    try {\n      reader = new BufferedReader(new FileReader(args[0]));\n      int n = Integer.parseInt(reader.readLine());\n      for (int i = 1; i <= n; ++i) {\n        reader.readLine();\n        Mushroom r = new Mushroom();\n        List<Integer> intArray = new ArrayList<Integer>();\n        for (String s : reader.readLine().split(\" \")) {\n          intArray.add(Integer.parseInt(s));\n        }\n        int x = 0;\n        int max = 0;\n        for (int i1 = 1; i1 < intArray.size(); ++i1) {\n          if (intArray.get(i1) < intArray.get(i1 - 1)) {\n            int d = intArray.get(i1 - 1) - intArray.get(i1);\n            x += d;\n            max = Math.max(max, d);\n          }\n        }\n        int y = 0;\n        for (int i2 = 1; i2 < intArray.size(); ++i2) {\n          y += Math.min(max, intArray.get(i2 - 1));\n        }\n        System.out.println(\"Case #\" + i + \": \" + x + \" \" + y);\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      if (reader != null) {\n        try {\n          reader.close();\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n}"}
{"idx":"379","func":"class Monstor {\n\n    public static void main(String[] args) {\n        Monstor r = new Monstor();\n        File inputFile = new File(\"\/Users\/aganavin\/Desktop\/A-large.in\");\n                BufferedReader br = null;\n                StringBuilder output = new StringBuilder();\n                try {\n                     \/\/ String buffer for storing the output\n                    br = new BufferedReader(new FileReader(inputFile));\n                    int numTests = Integer.parseInt(br.readLine());\n                    int test;\n                    String [] testSplit;\n                    int [] mush;\n                    \n                    \/\/ Loop through each test\n                    for (int testCounter = 0; testCounter < numTests; ++testCounter) {\n                        test=Integer.parseInt(br.readLine());\n                        \n                        testSplit=(br.readLine()).split(\" \");\n                        mush= new int[test];\n                        for(int s=0;s<test;s++)\n                        {\n                            mush[s]=Integer.parseInt(testSplit[s]);\n                        }\n                        int out1=0,out2=0;\n                        int currentDiff=0,maxDiff=0;\n                        out1=0;\n                        for(int s=test-1;s>0;s--)\n                        {\n                            if(mush[s]<mush[s-1])\n                            {\n                                currentDiff=mush[s-1]-mush[s];\n                                out1+=currentDiff;\n                                maxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;\n                                \n                            }\n                        }\n                        for(int s=test-1;s>0;s--)\n                        {\n                            if(mush[s-1]<maxDiff)\n                            {\n                                out2+=mush[s-1];\n                                \n                            }\n                            else\n                            {\n                                out2+=maxDiff;\n                            }\n                        }\n                        System.out.println(\"Case #\"+(testCounter+1)+\": \"+out1+\" \"+out2);\n        \/\/                System.out.println(\"Done\");\n                        output.append(\"Case #\").append((testCounter+1)).append(\": \").append(out1+\" \"+out2);\n                        output.append(\"\\n\");\n                    }\n                } catch (Exception e) {\n        \/\/            System.out.println(e);\n                }\n                File outputFile = new File(\"\/Users\/aganavin\/Desktop\/output1.out\");\n                BufferedWriter writer = null;\n                try\n                {\n                    writer = new BufferedWriter( new FileWriter(outputFile ));\n                    writer.write( output.toString());\n                \n                }\n                catch ( IOException e)\n                {\n                }\n                finally\n                {\n                    try\n                    {\n                        if ( writer != null)\n                        writer.close( );\n                    }\n                    catch ( IOException e)\n                    {\n                    }\n                }\n\n    }\n}"}
{"idx":"380","func":"class mainClass {\n\n    public static void main(String[] args)\n    {\n        BufferedReader cin =  new BufferedReader(new InputStreamReader(System.in));\n\n        String file = null;\n        try {\n            System.out.print(\"Filename: \");\n            file = cin.readLine();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(mainClass.class.getResourceAsStream(file)));\n            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"output.txt\")));\n\n            String line = reader.readLine();\n            int testCases = Integer.parseInt(line);\n\n            for( int i = 0; i < testCases; i++)\n            {\n                \/\/waste line\n                reader.readLine();\n\n                line = reader.readLine();\n\n                Solution obj_Solution = new Solution();\n                String result = obj_Solution.solve(line)+\"\";\n                writer.append(\"Case #\" + (i + 1)).append(\": \").append(result);\n                writer.newLine();\n                System.out.println(\"Case #\" + (i + 1)+\": \"+line);\n                System.out.println(result);\n            }\n\n            writer.close();\n\n        } catch (IOException x) {\n            System.err.format(\"IOException: %s%n\", x);\n        }\n    }\n\n}"}
{"idx":"381","func":"class R1A_A {\n    int n;\n    int[] m;\n    \n    \n    public static void main(String[] args) {\n        R1A_A r = new R1A_A();\n        Scanner sc = new Scanner(System.in);\n        \n        int t = sc.nextInt();\n        for(int test=1;test<=t;test++){\n            r.n = sc.nextInt();\n            \n            r.m = new int[r.n];\n            for(int i=0;i<r.n;i++) r.m[i] = sc.nextInt();\n            \n            int ans1 = 0;\n            int difmax = 0;\n            for(int i=0;i<r.n-1;i++){\n                int dif = r.m[i]-r.m[i+1];\n                if(dif>0){\n                    ans1 += dif;\n                    difmax = Math.max(dif, difmax);\n                }\n            }\n            \n            int ans2 = 0;\n            for(int i=0;i<r.n-1;i++){\n                if(r.m[i]-difmax>0) ans2 += difmax;\n                else ans2 += r.m[i];\n            }\n            \n            System.out.println(\"case #\" + test + \": \" + ans1 + \" \" + ans2);\n        }\n        sc.close();\n    }\n\n}"}
{"idx":"382","func":"class A {\n    private static final String FILE_NAME = \"A-large\";\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(FILE_NAME + \".in\"));\n        PrintStream out = new PrintStream(new File(FILE_NAME + \".out\"));\n        int loopNum = in.nextInt();\n\n        for (int caseNum = 1; caseNum <= loopNum; caseNum++) {\n            out.print(\"Case #\" + caseNum + \": \");\n            int n = in.nextInt();\n            int method1 = 0, method2 = 0;\n            int max = 0;\n            int[] arr = new int[n];\n            arr[0] = in.nextInt();\n            for (int i = 1; i < n; ++i) {\n                arr[i] = in.nextInt();\n                int diff = Math.max(0, arr[i - 1] - arr[i]);\n                method1 += diff;\n                max = Math.max(max, diff);\n            }\n            for (int i = 0; i < n - 1; ++i) {\n                method2 += Math.min(arr[i], max);\n            }\n            out.print(method1 + \" \" + method2);\n            out.println();\n        }\n\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"383","func":"class Round1AProbA {\n    \n    public static void main(String[] args) throws Exception\n    {\n        String file = \"Round1A\/A-large.in\";\n\n        BufferedReader br = new BufferedReader(new FileReader(file));\n        PrintWriter writer = new PrintWriter(\"outAlarge.txt\", \"UTF-8\");\n        String line;\n\n        int T = Integer.parseInt(br.readLine());\n        for(int test=0;test<T;test++)\n        {\n            int N = Integer.parseInt(br.readLine());\n            String[] lines = br.readLine().split(\" \");\n            int[] m = new int[N];\n            for(int i=0;i<lines.length;i++)\n            {\n                m[i] = Integer.parseInt(lines[i]);\n            }\n            int num = 0;\n            for(int i=1;i<N;i++)\n            {\n                if(m[i]<m[i-1])\n                {\n                    num+=m[i-1]-m[i];\n                }\n            }\n            \n            int num1 = num;\n            int rate = 0;\n            for(int i=1;i<N;i++)\n            {\n                if(m[i]<m[i-1])\n                {\n                    rate=Math.max(rate,m[i-1]-m[i]);\n                }\n            }\n            int num3 = 0;\n            for(int i=0;i<N-1;i++)\n            {\n                num3 += Math.min(rate,m[i]);\n            }\n            int num2 = num3;\n            \n            writer.println(\"Case #\"+(test+1)+\": \" + num1 + \" \" + num2);\n        }\n        writer.close();\n    }\n}"}
{"idx":"384","func":"class A {\n    public static void main(String[] args) {\n        try {\n            Scanner in = new Scanner(new FileReader(\"A-large.in\"));\n            PrintWriter out = new PrintWriter(new FileWriter(\"outA.txt\"));\n\n            int cases = in.nextInt();\n            in.nextLine();\n            \n            for(int i = 0; i < cases; i ++){\n                int n = in.nextInt();\n                int[] a = new int[n];\n \n                for(int j = 0; j < a.length; j ++){\n                    a[j] = in.nextInt();\n                }\n                A aa = new A();\n                int total = 0;\n                for(int i1 = 1; i1 < a.length; i1 ++){\n                    if(a[i1 - 1] > a[i1]){\n                        total += (a[i1 - 1] - a[i1]);\n                    }\n                }\n                int total1 = total;\n                int total3 = 0, rate = 0;\n                for(int i1 = 1; i1 < a.length; i1 ++){\n                    if(a[i1 - 1] > a[i1] && (a[i1 - 1] - a[i1] > rate)){\n                        rate = a[i1 - 1] - a[i1];\n                    }\n                }\n                for(int i2 = 0; i2 < a.length - 1; i2 ++){\n                    if(a[i2] < rate){\n                        total3 += a[i2];\n                    }else{\n                        total3 += rate;\n                    }\n                }\n                int total2 = total3;\n                out.println(\"Case #\" + (i + 1) + \": \" + total1 + \" \" + total2);\n            }\n            in.close();\n            out.close();\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"385","func":"class A {\n\n    public static void main(String ... hi) {\n        Scanner in = new Scanner(System.in);\n        int cases = in.nextInt();\n        for(int n=1;n<=cases;n++){\n            \n            int count = in.nextInt();\n            int[] m = new int[count];\n            for(int i=0;i<count;i++) m[i]=in.nextInt();\n            \n            int method1 = 0;\n            for(int i=1;i<count;i++){\n                int d = m[i]-m[i-1];\n                if(d<0){\n                    method1+=Math.abs(d);\n                }\n            }\n            \n            int dif = 0;\n            for(int i=1;i<count;i++){\n                int d = m[i]-m[i-1];\n                if(d<0&&Math.abs(d)>dif){\n                    dif = Math.abs(d);\n                }\n            }\n            int method2 = 0;\n            for(int i=0;i<count-1;i++){\n                if(dif>m[i]){\n                    method2+=m[i];\n                }else{\n                    method2+=dif;\n                }\n            }\n            \n            System.out.printf(\"Case #%d: %s %s\\n\", n, method1, method2);\n        }\n        in.close();\n    }\n    \n}"}
{"idx":"386","func":"static void main(String[]args) throws UnsupportedEncodingException,FileNotFoundException{\n        FileInputStream fis = new FileInputStream(\"A-large.in\") ;\n        Scanner sc = new Scanner(fis);\n        PrintWriter writer = new PrintWriter(\"out1.txt\", \"UTF-8\");\n        int t,x,i,j,n,plate[],eat,eat1,f;\n        t=sc.nextInt();\n        for(x=1;x<=t;x++){\n            n=sc.nextInt();\n            f=0;\n            eat=0;\n            eat1=0;\n            plate = new int[n];\n            plate[0]=sc.nextInt();\n            for(i=1;i<n;i++){\n                plate[i]=sc.nextInt();\n                if(plate[i]<plate[i-1])\n                    eat+=plate[i-1]-plate[i];\n            }\n            for(i=1;i<n;i++){\n                int a = plate[i-1]-plate[i];\n                f=f>a?f:a;\n            }\n            for(i=0;i<n-1;i++){\n                eat1+= plate[i]-f>=0?f:plate[i];\n            }\n            writer.println(\"Case #\"+x+\": \"+eat+\" \"+eat1);\n            \n        }\n        writer.close();\n    }\n}"}
{"idx":"387","func":"class Problem1 {\n\n    public static void main(String[] args) throws FileNotFoundException {\n\n        \/\/hard code the file location\n        \/\/open file\n        \/\/get number of test cases\n        File f = new File(\"A-large.in\");\n        Scanner s = new Scanner(f);\n        String line = s.nextLine();\n        int T = Integer.parseInt(line);\n\n        \/\/open output file\n        File f2 = new File(\"largeresult.txt\");\n        PrintWriter p = new PrintWriter(f2);\n\n        for (int i = 1; i <= T; i++) {\n            int num = Integer.parseInt(s.nextLine());\n            String nums = s.nextLine();\n            int[] vals = new int[num];\n            Scanner scan = new Scanner(nums);\n            for (int j = 0; j < num; j++) {\n                vals[j] = scan.nextInt();\n            }\n            \n            \/\/Calculate for method1\n            int count = 0;\n            for (int j = 0; j < num-1; j++) {\n                if(vals[j] - vals[j+1] > 0) {\n                    count += vals[j] - vals[j+1];\n                }\n            }\n            \n            \/\/Calculate for method2\n            int count2 = 0;\n            int maxrate = 0;\n            for (int j = 0; j < num-1; j++) {\n                if (vals[j] - vals[j+1] > maxrate) {\n                    maxrate = vals[j] - vals[j+1];\n                }\n            }\n            \n            for (int j = 0; j < num - 1; j++) {\n                count2 += Math.min(maxrate, vals[j]);\n            }\n            \n            p.println(\"Case #\" + i + \": \" + count + \" \" + count2);\n            \n        }\n\n\n\n        p.close();\n        s.close();\n    }\n\n}"}
{"idx":"388","func":"class MushroomMonster {\n\n    public static void main(String[] args) {\n\n        MushroomMonster algorithm = new MushroomMonster();\n\n        Scanner scanner = new Scanner(System.in);\n        String testCaseNumber = scanner.nextLine();\n\n        int TEST_CASE_NUMBER = Integer.parseInt(testCaseNumber);\n\n        for (int testNumber = 1; testNumber <= TEST_CASE_NUMBER; testNumber++) {\n\n            String maxLine = scanner.nextLine();\n            \n            Integer max = Integer.parseInt(maxLine);\n            String mushroomsLine = scanner.nextLine();\n            String[] mushroomsString = mushroomsLine.split(\" \");\n            int[] mushrooms = new int[max];\n            \n            for (int i = 0; i < max; i++) {\n                mushrooms[i] = Integer.parseInt(mushroomsString[i]);\n            }\n            \n            int firstMethod = 0;\n            \/\/ first method\n            for (int i = 0; i < max - 1; i++) {\n                int temp = mushrooms[i] - mushrooms[i + 1];\n                if (temp > 0) {\n                    firstMethod += temp;\n                }\n            }\n            \n            \/\/ second method\n            int eatenPerSecond = 0;\n            for (int i = 0; i < max - 1; i++) {\n                int temp = mushrooms[i] - mushrooms[i + 1];\n                if (temp > eatenPerSecond) {\n                    eatenPerSecond = temp;\n                }\n            }\n            \n            int secondMethod = 0;\n            for (int i = 0; i < max - 1; i++) {\n                if (mushrooms[i] - eatenPerSecond >= 0) {\n                    secondMethod += eatenPerSecond;\n                } else {\n                    secondMethod += mushrooms[i];\n                }\n            }\n            String answer = String.valueOf(firstMethod + \" \" + secondMethod);\n\n            System.out.println(\"Case #\" + testNumber + \": \" + answer);\n        }\n\n        scanner.close();\n    }\n}"}
{"idx":"389","func":"class MushroomMonster {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int numTestCases = scanner.nextInt();\n        int numTimes;\n        int[] mushrooms;\n        int maxMushroomsForCase2;\n        long mushroomsCase1;\n        long mushroomsCase2;\n\n        for (int casesIterator = 0; casesIterator < numTestCases; casesIterator++) {\n            numTimes = scanner.nextInt();\n            mushrooms = new int[numTimes];\n            maxMushroomsForCase2 = 0;\n            mushroomsCase1 = 0;\n            mushroomsCase2 = 0;\n\n            mushrooms[0] = scanner.nextInt();\n            for (int timesIterator = 1; timesIterator < numTimes; timesIterator++) {\n                mushrooms[timesIterator] = scanner.nextInt();\n                if (mushrooms[timesIterator] < mushrooms[timesIterator - 1]) {\n                    mushroomsCase1 += mushrooms[timesIterator - 1] - mushrooms[timesIterator];\n                    maxMushroomsForCase2 = Math.max(maxMushroomsForCase2, mushrooms[timesIterator - 1] - mushrooms[timesIterator]);\n                }\n            }\n\n            for (int timesIterator = 0; timesIterator < numTimes - 1; timesIterator++) {\n                mushroomsCase2 += Math.min(mushrooms[timesIterator], maxMushroomsForCase2);\n            }\n\n            System.out.println(\"Case #\" + (casesIterator + 1) + \": \" + mushroomsCase1 + \" \" + mushroomsCase2);\n        }\n    }\n}"}
{"idx":"390","func":"class Mushroom {\n\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(\"mushroom.out\");\n        \n        int numCases = Integer.parseInt(scanner.nextLine());\n        \n        for (int curCase = 1; curCase <= numCases; curCase++) {\n            int numIntervals = Integer.parseInt(scanner.nextLine());\n            \n            String[] intervalStr = scanner.nextLine().split(\" \");\n            int[] intervals = new int[numIntervals];\n            for (int i = 0; i < numIntervals; i++) {\n                intervals[i] = Integer.parseInt(intervalStr[i]);\n            }\n            \n            int minEatFree = 0;\n            int minEatConstant = 0;\n            \n            int maxDrop = 0;\n            \n            for (int i = 1; i < numIntervals; i++) {\n                int difference = intervals[i-1] - intervals[i];\n                minEatFree += Math.max(0, difference);\n                \n                maxDrop = Math.max(maxDrop, difference);\n            }\n            \n            for (int i = 0; i < numIntervals-1; i++) {\n                if (intervals[i] < maxDrop) {\n                    minEatConstant += intervals[i];\n                }\n                else {\n                    minEatConstant += maxDrop;\n                }\n            }\n            \n            out.println(\"Case #\" + curCase + \": \" + minEatFree + \" \" + minEatConstant);\n        }\n        scanner.close();\n        out.close();\n    }\n}"}
{"idx":"391","func":"class AMush {\n\n    \n    public static void main (String [] args){\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for (int t=0; t<T; t++){\n            int n = sc.nextInt();\n            int[] data = new int[n];\n            for (int i=0; i<n; i++){\n                data[i] = sc.nextInt();\n            }\n            int n1 = data.length;\n            int sum1 = 0;\n            int sum2 = 0;\n            int rate = 0;\n            for (int i=1; i<n1; i++){\n                int dm = data[i-1] - data[i];\n                if (dm > 0){\n                    sum1 += dm;\n                    rate = (rate < dm) ? dm : rate;\n                }            \n            }\n            \n            for (int i=0; i<n1-1; i++){\n                int dm = (data[i] < rate) ? data[i] : rate;\n                sum2 += dm;\n            }\n            System.out.println(\"Case #\"+(t+1)+\": \"+sum1+\" \"+sum2);\n        }\n        \n    }\n}"}
{"idx":"392","func":"class problemA {\n\n    public static void main(String[] args) {\n        String results = \"\";\n\n        Scanner input = null;\n        try {\n            input = new Scanner(new File(\"\/home\/lasantha\/Downloads\/A-large.in\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n\n\n        int T = 0, N = 0;\n\n        int y = 0;\n        int z = 0;\n        int rate = 0;\n\n        int temprate = 0;\n\n        T = input.nextInt();\n\n        for (int i = 0; i < T; i++) {\n\n            N = input.nextInt();\n\n            int[] data = new int[N];\n\n            for (int j = 0; j < N; j++) {\n                data[j] = input.nextInt();\n            }\n\n            y = 0;\n            z = 0;\n            rate = 0;\n            temprate = 0;\n\n            for (int j = 0; j < N - 1; j++) {\n                if (data[j] > data[j + 1]) {\n                    y += data[j] - data[j + 1];\n\n                    temprate = (data[j] - data[j + 1]);\n\n                    if (temprate > rate) {\n                        rate = temprate;\n                    }\n\n                }\n\n            }\n\n            for (int j = 0; j < N - 1; j++) {\n                if (data[j]-rate  <0) {\n                    z += data[j];\n                } else {\n                    z += rate;\n                }\n            }\n\n\n\n            results += \"Case #\" + (i + 1) + \": \" + y + \" \" + z + \"\\n\";\n\n        }\n\n        System.out.println(results);\n        BufferedWriter writer = null;\n        try {\n            writer = new BufferedWriter(new FileWriter(\"output.txt\"));\n            writer.write(results);\n            writer.close();\n            System.out.println(\"Done\");\n        } catch (IOException e) {\n        }\n\n    }\n\n\n}"}
{"idx":"393","func":"class Mushrooms{\n    static PrintWriter out;\n    public static void main(String[] args) throws Exception{\n        Scanner reader = new Scanner(System.in);\n        out = new PrintWriter(new File(\"a.out\"));\n        \n        int times = reader.nextInt();\n        for(int t = 1; t <= times; t++){\n            int n = reader.nextInt();\n            int[] v = new int[n];\n            int a = 0, b = 0;\n            int rate = 0;\n            for(int i = 0; i < n; i++){\n                v[i] = reader.nextInt();\n                if(i > 0) a += Math.max(0, v[i-1] - v[i]);\n                if(i > 0) rate = Math.max(rate, v[i-1] - v[i]);\n            }\n            for(int i = 0; i < n-1; i++)\n                b += Math.min(rate, v[i]);\n            String msg = \"Case #\"+t+\": \"+a+\" \"+b;\n            out.println(msg);\n            System.out.println(msg);\n        }\n        out.close();\n    }\n}"}
{"idx":"394","func":"class MushroomMonster {\n\n    static int n;\n    static int[] a;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/        Scanner cin = new Scanner(new File(\"A-small-attempt1.in\"));\n        \/\/        PrintStream cout = new PrintStream(\"A-small-attempt1.out\");\n        Scanner cin = new Scanner(new File(\"A-large.in\"));\n        PrintStream cout = new PrintStream(\"A-large.out\");\n        \/\/                Scanner cin = new Scanner(System.in);\n        \/\/                PrintStream cout = System.out;\n\n        int _case = 0;\n        for (int T = cin.nextInt(); T > 0; T--) {\n            _case++;\n            n = cin.nextInt();\n            a = new int[n];\n            for (int i = 0; i < n; i++)\n                a[i] = cin.nextInt();\n\n            int one = 0;\n            int two = 0;\n            int maxGap = 0;\n            for (int i = 1; i < n; i++)\n                if (a[i] < a[i - 1]) {\n                    one += a[i - 1] - a[i];\n                    maxGap = Math.max(maxGap, a[i - 1] - a[i]);\n                }\n\n            for (int i = 1; i < n; i++)\n                two += Math.min(a[i - 1], maxGap);\n\n            cout.printf(\"Case #%d: %d %d%n\", _case, one, two);\n        }\n\n        cin.close();\n        cout.close();\n    }\n\n}"}
{"idx":"395","func":"class A {\n\n    static final String TYPE = \"A\";\n    static String inputFile;\n    static String outputFile;\n    static String keyFile;\n\n    public static void main(String[] args) throws FileNotFoundException {\n\n        String root = \"data\/CJ2015\/r1A\";\n\n        \/\/ Test\n        inputFile = \"A-large\" + \".in\";\n        outputFile = \"A-large\" + \".out\";\n        keyFile = \"A-large\" + \".key\";\n\n        Scanner in = new Scanner(new File(root, inputFile));\n        PrintWriter out = new PrintWriter(new File(root, outputFile));\n\n        int T = in.nextInt();\n\n        for (int i = 0; i < T; i++) {\n            int N = in.nextInt();\n            int[] m = new int[N];\n            for (int j = 0; j < N; j++) {\n                m[j] = in.nextInt();\n            }\n\n            int res1 = 0;\n            int rate = 0;\n            for (int j = 1; j < N; j++) {\n                if (m[j] < m[j - 1]) {\n                    int sub = m[j - 1] - m[j];\n                    res1 += sub;\n                    if (sub > rate) {\n                        rate = sub;\n                    }\n                }\n            }\n\n            int res2 = 0;\n            System.out.println(i + 1 + \": \" + rate);\n            int sum = 0;\n            for (int j = 0; j < N - 1; j++) {\n                \/\/ sum += m[j];\n                \/\/ if (sum >= rate) {\n                \/\/ sum = sum - rate;\n                \/\/ res2 += rate;\n                \/\/ } else {\n                \/\/ res2 += sum;\n                \/\/ sum = 0;\n                \/\/ }\n                if (m[j] > rate) {\n                    res2 += rate;\n                } else {\n                    res2 += m[j];\n                }\n            }\n            out.println(\"Case #\" + (i + 1) + \": \" + res1 + \" \" + res2);\n\n        }\n\n        in.close();\n        out.close();\n\n        \/\/ check(root);\n\n    }\n\n}"}
{"idx":"396","func":"class A {\n\n    public static void main(String[] args) throws Exception {\n        File input = new File(\"\/Users\/sean\/Desktop\/GG\/a.in\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(input)));\n        File output = new File(\"\/Users\/sean\/Desktop\/GG\/ansA.txt\");\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));\n        int t = Integer.parseInt(reader.readLine());\n        String infos[];\n        long minNeedPlanA, minNeedPlanB;\n        long maxDis;\n        int n;\n        long vals[];\n        for(int i=1; i<=t; ++i){\n            minNeedPlanA = minNeedPlanB = 0;\n            maxDis = 0;\n            n = Integer.parseInt(reader.readLine());\n            infos = reader.readLine().split(\" \");\n            vals = new long[n];\n            vals[0] = Long.parseLong(infos[0]);\n            for(int j=1; j<n; ++j){\n                vals[j] = Long.parseLong(infos[j]);\n                if(vals[j] < vals[j-1]){\n                    minNeedPlanA += (vals[j-1] - vals[j]);\n                    maxDis = Math.max(maxDis, vals[j-1] - vals[j]);\n                }\n            }\n            for(int j=0; j<n-1; ++j){\n                minNeedPlanB += Math.min(vals[j], maxDis);\n            }\n            writer.write(\"Case #\" + i + \": \" + minNeedPlanA + \" \" + minNeedPlanB +\"\\r\\n\");\n        }\n        reader.close();\n        writer.flush();\n    }\n\n}"}
{"idx":"397","func":"class Mushroom {\n\n    public static void main(String[] args) throws IOException {\n        Mushroom r = new Mushroom();\n        FileInputStream fstream = new FileInputStream(\"Mushroom.txt\");\n        BufferedReader br = new BufferedReader(new InputStreamReader(fstream));\n        \n        String strLine;\n        String totalTestCases  = br.readLine();\n        int lineNo = 1;\n        while ((strLine = br.readLine()) != null)   {\n            if(lineNo %2 == 0) {\n                String[] tokens = strLine.split(\" \");\n                int[] input = Stream.of(tokens).mapToInt(Integer::parseInt).toArray();\n                int strategy1 = 0;\n                int strategy2 = 0;\n        \n                int maxDifference = 0 ;\n                for(int i=0;i< input.length-1;i++) {\n                    if(input[i] > input[i+1]) {\n                        if(maxDifference < (input[i]- input[i+1])) {\n                            maxDifference = input[i]- input[i+1];\n                        }\n                        strategy1 += input[i] - input[i+1];\n                    }\n                }\n                for(int i=0;i< input.length-1;i++) {\n                        if(input[i] < maxDifference) {\n                            strategy2 += input[i];\n                        } else {\n                            strategy2 += maxDifference;\n                        }\n                }\n        \n        \n                System.out.println(String.format(\"Case #%d: %d %d\", Mushroom.inputLines++, strategy1, strategy2));\n            }\n            lineNo++;\n        \n        }\n        \n        br.close();\n    }\n    static int inputLines = 1;\n}"}
{"idx":"398","func":"class R1Q1 {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner input = new Scanner(new File(\"in.txt\"));\n        PrintWriter output = new PrintWriter(new File(\"out.txt\"));\n        int count = input.nextInt();\n        int round;\n        int[] mushrooms;\n        int minMethodOne;\n        int minMethodTwo;\n        for(int i = 0; i<count; i++)\n        {\n            round = input.nextInt();\n            mushrooms = new int[round];\n            for(int x = 0; x<round; x++)\n                mushrooms[x] = input.nextInt();\n            int min1 = 0;\n            for(int a1 = 0; a1<mushrooms.length-1; a1++)\n            {\n                if(mushrooms[a1] > mushrooms[a1+1])\n                    min1+= mushrooms[a1] - mushrooms[a1+1];\n            }\n            \n            minMethodOne = min1;\n            int max = 0;\n            int min = 0;\n            for(int a = 0; a<mushrooms.length-1; a++)\n            {\n                if(mushrooms[a] - mushrooms[a+1] > max)\n                    max = mushrooms[a] - mushrooms[a+1];\n            }\n            for(int b = 0; b<mushrooms.length-1; b++)\n            {\n                if(mushrooms[b] < max)\n                    min+= mushrooms[b];\n                else\n                    min+=max;\n            }\n            minMethodTwo = min;\n            output.write(\"Case #\" + (i+1) + \": \" + minMethodOne + \" \" + minMethodTwo + \"\\n\");\n        }\n        output.close();\n    }\n\n}"}
{"idx":"399","func":"class A\n{\n    public static void main(String[] args) throws Exception\n    {\n\/\/        Scanner in = new Scanner(System.in);\n\/\/        PrintWriter out = new PrintWriter(System.out);\n        \n        Scanner in = new Scanner(new File(\"A-large.in\"));\n        PrintWriter out = new PrintWriter(new FileWriter(new File(\"A-large.out\")));\n        \n        int t = in.nextInt();\n        for(int x = 0; x < t; x++)\n        {\n            int n = in.nextInt();\n            \n            long[] array = new long[n];\n            long rate = 0;\n            for(int y = 0; y < n; y++)\n            {\n                array[y] = in.nextInt();\n                \n                if(y > 0)\n                {\n                    rate = Math.max(rate, array[y - 1] - array[y]);\n                }\n            }\n            \n            long result1 = 0;\n            long result2 = 0;\n            for(int z = 0; z < array.length - 1; z++)\n            {\n                result1 += Math.max(0, array[z] - array[z + 1]);\n                result2 += Math.min(rate, array[z]);\n            }\n            \n            out.println(\"Case #\" + (x + 1) + \": \" + result1 + \" \" + result2);\n        }\n        \n        out.close();\n    }\n}"}
{"idx":"400","func":"class Main {\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader in = null;\n        BufferedWriter out = null;\n        try {\n            in = new BufferedReader(new InputStreamReader(new FileInputStream(\"A-large.in\")));\n            out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"A-large.out\")));\n            int testCount = Integer.parseInt(in.readLine());\n            for (int t = 1; t <= testCount; t++) {\n                in.readLine();\n                String[] v = in.readLine().split(\" \");\n                long[] mushrooms = new long[v.length];\n                for (int i = 0; i < v.length; i++) {\n                    mushrooms[i] = Long.parseLong(v[i]);\n                }\n                long first = 0;\n                for (int i = 0; i < mushrooms.length - 1; i++) {\n                    if (mushrooms[i] > mushrooms[i + 1]) {\n                        first += mushrooms[i] - mushrooms[i + 1];\n                    }\n                }\n                long speed = 0;\n                for (int i = 0; i < mushrooms.length - 1; i++) {\n                    if (mushrooms[i + 1] < mushrooms[i]) {\n                        speed = Math.max(speed, (mushrooms[i] - mushrooms[i + 1]));\n                    }\n                }\n                long second = 0;\n                if (speed != 0) {\n                    for (int i = 1; i < mushrooms.length; i++) {\n                        second += Math.min(mushrooms[i - 1], speed);\n                    }\n                }\n                out.write(\"Case #\" + t + \": \" + first + \" \" + second);\n                out.newLine();\n            }\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException ignored) {\n                }\n            }\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException ignored) {\n                }\n            }\n        }\n    }\n}"}
{"idx":"401","func":"class Q1 {\n    public static void main(String... args) {\n        @SuppressWarnings(\"resource\")\n        Scanner in = new Scanner(System.in);\n        int caseCount = in.nextInt();\n        int[] m = new int[1001];\n        for (int caseValue = 1; caseValue <= caseCount; caseValue++) {\n            int N = in.nextInt();\n            for (int i = 0; i < N; i++) {\n                m[i] = in.nextInt();\n            }\n            int result1 = 0; {\n                int prev = m[0];\n                for (int i = 1; i < N; i++) {\n                    int curr = m[i];\n                    result1 += Math.max(0, prev - curr);\n                    prev = curr;\n                }\n            }\n            int result2 = 0; {\n                int minEatenMax = 0;\n                int prev = m[0];\n                for (int i = 1; i < N; i++) {\n                    int curr = m[i];\n                    int minEaten = Math.max(0, prev - curr);\n                    {\n                        if (minEatenMax < minEaten) {\n                            minEatenMax = minEaten;\n                        }\n                    }\n                    prev = curr;\n                }\n                prev = m[0];\n                for (int i = 1; i < N; i++) {\n                    int curr = m[i];\n                    {\n                        if (prev < minEatenMax) {\n                            result2 += prev;\n                        } else {\n                            result2 += minEatenMax;\n                        }\n                    }\n                    prev = curr;\n                }\n            }\n            System.out.println(\"Case #\" + caseValue + \": \" + result1 + \" \" + result2);\n        }\n    }\n}"}
{"idx":"402","func":"class pro1 {\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        int T= scanner.nextInt();\n\n        for( int t=0; t<T; t++){\n            int N = scanner.nextInt();\n            \n            int[] num = new int[N];\n            int[] subt = new int[N-1];\n            num[0] = scanner.nextInt();\n            int max = 0;\n            for( int i=0; i<N-1; i++){\n                num[i+1] = scanner.nextInt();\n                subt[i] = num[i] - num[i+1];\n                max = Math.max(subt[i], max);\n            }\n\n            int ans1 = 0;\n            for( int i=0; i<N-1;i++){\n                if( subt[i] > 0){\n                    ans1 += subt[i];\n                }\n            }\n            \n            int ans2 = 0;\n            for( int i=0; i<N-1;i++){\n                if( num[i] < max){\n                    ans2 += num[i];\n                }\n                else{\n                    ans2 += max;\n                }\n            }\n            \n\n            System.out.println(\"Case #\"+(t+1)+\": \"+ans1+\" \"+ans2);            \n            \n        }\n    }\n}"}
{"idx":"403","func":"class MushroomMonster {\n    public static void main(String[] args) throws NumberFormatException, IOException {\n\/\/        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n        int cases = Integer.parseInt(br.readLine());\n        for(int i =0; i<cases; i++){\n            int numTimes = Integer.parseInt(br.readLine());\n            String[] nums = br.readLine().split(\" \");\n            int[] shrooms = new int[numTimes];\n            for(int j = 0; j < numTimes; j++) {\n                shrooms[j] = Integer.parseInt(nums[j]);\n            }\n            int maxDecrease = 0;\n            int case1shrooms = 0;\n            int case2shrooms = 0;\n            for(int j = 1; j < numTimes; j++) {\n                int diff = shrooms[j-1]-shrooms[j];\n\/\/                System.out.println(diff);\n                if(diff > 0) {\n                    case1shrooms += diff;\n                }\n                if(diff > maxDecrease) {\n                    maxDecrease = diff;\n                }\n            }\n\/\/            System.out.println(maxDecrease);\n            for(int j = 0; j < numTimes-1; j++) {\n                if(shrooms[j] < maxDecrease) {\n                    case2shrooms += shrooms[j];\n                } else {\n                    case2shrooms += maxDecrease;\n                }\n            }\n            System.out.println(\"Case #\" + (i+1) +  \": \" + case1shrooms + \" \" + case2shrooms);\n        }\n    }\n}"}
{"idx":"404","func":"class mushroomEater {\n    private static Scanner sc;\n    public static void main(String[] args) throws FileNotFoundException {\n        sc = new Scanner(new File(\"\/Users\/mac\/Desktop\/A-large.in\"));\n        PrintStream out = new PrintStream(new FileOutputStream(\"\/Users\/mac\/Desktop\/output.txt\"));\n        System.setOut(out);\n        int cases = Integer.parseInt(sc.nextLine());\n        for (int i=1;i<=cases; i++){\n            int N=sc.nextInt();\n            int[] arr = new int[N];\n            for(int j=0;j<N;j++){\n                arr[j] = sc.nextInt();\n            }\n            int ans =0;\n            for(int i1=1;i1<arr.length;i1++){\n                \n                if(arr[i1]<arr[i1-1]){\n                    ans = ans + (arr[i1-1]-arr[i1]);\n                }\n            }\n            \n            int mineater = ans;\n            int n=arr.length;\n            int rate = 0;\n            for(int i2=n-1;i2>0;i2--){\n                int temp = arr[i2-1]-arr[i2];\n                \/\/System.out.println(rate);\n                if (temp>=0 && temp>rate)\n                    rate=temp;\n            }\n            \n            int ans1 = 0;\n            for (int i1=0;i1<n-1;i1++){\n                \n                if (arr[i1]<rate)\n                    ans1 = ans1 +arr[i1];\n                else\n                    ans1 = ans1 + rate;\n            }\n            int constant = ans1;\n            \n            System.out.println(\"Case #\" + i + \": \" + mineater +\" \"+ constant);\n        }\n    \n    }\n    \n}"}
{"idx":"405","func":"class mushroom{\n    public static void main (String [] args) throws IOException {\n        BufferedReader f = new BufferedReader(new FileReader(\"mushroom.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"mushroom.out\")));\n        int t = Integer.parseInt(f.readLine());\n        for(int waka = 0;waka<t;waka++){\n            StringTokenizer st = new StringTokenizer(f.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            int m[] = new int[n];\n            StringTokenizer sc  = new StringTokenizer(f.readLine());\n            System.out.println(n);\n            for(int i = 0;i<n;i++){\n                m[i]=Integer.parseInt(sc.nextToken());\n                System.out.println(\"m[\" + i + \"] is \" + m[i]);\n            }\n            int first = 0;\n            int rate = 0;\n            for(int i = 0;i<n-1;i++){\n                first+=Math.max(0,m[i]-m[i+1]);\n                if(m[i]>m[i+1]){\n                    rate=Math.max(rate,m[i]-m[i+1]);\n                }\n            }\n            int second = 0;\n            for(int i = 0;i<n-1;i++){\n                if(rate>=m[i]){\n                    second +=m[i];\n                }\n                else{\n                    second+=rate;\n                }\n            }\n            out.print(\"Case #\" + (waka+1) + \": \");\n            out.println(first + \" \" + second);\n        }\n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"406","func":"class A {\n\n    public static void main(String[] args) throws IOException {\n        \n        BufferedReader input = new BufferedReader(new FileReader(\"C:\\\\Users\\\\William Li\\\\Desktop\\\\input.txt\"));\n        PrintWriter output = new PrintWriter(new FileWriter(\"C:\\\\Users\\\\William Li\\\\Desktop\\\\output.txt\"));\n        \n        int T = Integer.parseInt(input.readLine());\n        \n        for (int t = 1; t <= T; t++){\n            \n            int N = Integer.parseInt(input.readLine());\n            \n            int method1 = 0;\n            \n            String[] nextLine = input.readLine().split(\" \");\n            int[] mushrooms = new int[N];\n            \n            for (int i = 0; i < nextLine.length; i++){\n                \n                mushrooms[i] = Integer.parseInt(nextLine[i]);\n                \n            }\n            \n            for (int i = 1; i < mushrooms.length; i++){\n                \n                method1 += Math.max(mushrooms[i - 1] - mushrooms[i], 0);\n                \n            }\n            \n            int method2 = 0;\n            int maxdiff = 0;\n            \n            for (int i = 1; i < mushrooms.length; i++){\n                \n                maxdiff = Math.max(mushrooms[i - 1] - mushrooms[i], maxdiff);\n                \n            }\n            \n            for (int i = 0; i < mushrooms.length - 1; i++){\n                \n                if (mushrooms[i] - maxdiff < 0){\n                    \n                    method2 += mushrooms[i];\n                    \n                }else{\n                    \n                    method2 += maxdiff;\n                    \n                }\n                \n            }\n            \n            output.println(\"Case #\" + t + \": \" + method1 + \" \" + method2);\n            \n        }\n        \n        input.close();\n        output.close();\n        \n        System.exit(0);\n        \n    }\n\n}"}
{"idx":"407","func":"class ProblemA {\n\n    public static void main(String[] args) throws Exception {\n        \n        Scanner sc = new Scanner(new File(\"ProblemA.txt.in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"ProblemA.txt.out\")));\n        \n        int T = sc.nextInt();\n        sc.nextLine();\n        \n        for(int i=0;i<T;i++) {\n            int n = sc.nextInt();\n            int m[] = new int[n];\n            int minMethodA = 0;\n            int minMethodB = 0;\n            int maxDiff =0;\n            for(int idx=0;idx<n;idx++) {\n                m[idx] = sc.nextInt();\n                if(idx !=0) {\n                    if (m[idx] < m[idx-1]) {\n                        minMethodA += (m[idx-1] - m[idx]);\n                    }\n                    if((m[idx-1] - m[idx]) > maxDiff) {\n                        maxDiff = (m[idx-1] - m[idx]);\n                    }\n                }\n            }\n            for(int idx=0;idx<n-1;idx++) {\n                if(m[idx] <= maxDiff) {\n                    minMethodB += m[idx];\n                } else {\n                    minMethodB += maxDiff;\n                }\n            }\n            \n            bw.write(\"Case #\" + (i+1) +\": \" + minMethodA + \" \" + minMethodB +\"\\n\");\n        }\n        bw.close();\n        sc.close();\n    }\n}"}
{"idx":"408","func":"class A {\n    public static void main(String [] args) throws IOException {\n        Scanner input = new Scanner(new File(\"A-large.in\"));\n        PrintWriter write = new PrintWriter(\"A-large.out\");\n        int cases = input.nextInt();\n        for(int i = 1; i <= cases; i++) {\n            int steps = input.nextInt();\n            int[] values = new int[steps];\n            for(int j = 0; j < values.length; j++)\n                values[j] = input.nextInt();\n            int maxDist = 0;\n            int decrTotal = 0;\n            for(int j = 1; j < values.length; j++) {\n                int increase = values[j] - values[j-1];\n                if(increase < 0) {\n                    if(maxDist < -increase)\n                        maxDist = -increase;\n                    decrTotal -= increase;\n                }\n            }\n            int secCount = 0;\n            for(int j = 0; j < values.length-1; j++) {\n                secCount += Math.min(values[j], maxDist);\n            }\n            write.printf(\"Case #%d: %d %d%n\", i, decrTotal, secCount);\n        }\n        write.close();\n    }\n}"}
{"idx":"409","func":"class Q5 {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner s = new Scanner(System.in);\n        int numberOfTestCases = Integer.parseInt(s.nextLine());\n        ArrayList<ArrayList<Integer>> trials = new ArrayList<>();\n        for (int i = 0; i < numberOfTestCases; i++) {\n            ArrayList<Integer> myCase = new ArrayList<>();\n            int num = Integer.parseInt(s.nextLine());\n            String str = s.nextLine();\n            for (int j = 1; j < num; j++) {\n                myCase.add(Integer.parseInt(str.substring(0, str.indexOf(\" \"))));\n                str = str.substring(str.indexOf(\" \") + 1);\n            }\n            myCase.add(Integer.parseInt(str));\n            trials.add(myCase);\n        }\n        s.close();\n\n        int counter = 1;\n        for (ArrayList<Integer> c : trials) {\n            \/\/m1\n            int m1Sum = 0;\n            for (int i = 0; i < c.size() - 1; i++) {\n                int prev = c.get(i);\n                int now = c.get(i + 1);\n                if (prev > now) {\n                    m1Sum += prev - now;\n                }\n            }\n            \/\/m2\n            int m2Sum = 0;\n            int greatestDiff = 0;\n            for (int i = 0; i < c.size() - 1; i++) {\n                int prev = c.get(i);\n                int now = c.get(i + 1);\n                if (prev - now > greatestDiff) {\n                    greatestDiff = prev - now;\n                }\n            }\n            for (int i = 0; i < c.size() - 1; i++) {\n                if (c.get(i) < greatestDiff) {\n                    m2Sum += c.get(i);\n                } else {\n                    m2Sum += greatestDiff;\n                }\n            }\n            System.out.println(\"Case #\" + counter + \":\" + \" \" + m1Sum + \" \" + m2Sum);\n            counter++;\n        }\n    }\n\n}"}
{"idx":"410","func":"class MushroomMonster {\n    public static void main(String[] args) throws FileNotFoundException {\n\/\/        Scanner scanner = new Scanner(new FileInputStream(\"A-small-attempt0.in\"));\n\/\/        Scanner scanner = new Scanner(new FileInputStream(\"MM_input.txt\"));\n        Scanner scanner = new Scanner(new FileInputStream(args[0]));\n        scanner.nextLine();\n        int c = 1;\n        while (scanner.hasNext()) {\/\/at most 100\n            int answer1 = 0;\n            int answer2 = 0;\n            scanner.nextLine();\n            StringTokenizer tokens = new StringTokenizer(scanner.nextLine());\n            ArrayList<Integer> listMushroom = new ArrayList<Integer>();\n            while (tokens.hasMoreElements()) { \/\/at most 1000\n                listMushroom.add(Integer.parseInt(tokens.nextToken()));\n            }\n            for (int i = 1; i < listMushroom.size(); i++) {\n                if(listMushroom.get(i-1)>listMushroom.get(i)){\n                    answer1+=listMushroom.get(i-1)-listMushroom.get(i);\n                }\n            }\n            int d = listMushroom.get(0)-listMushroom.get(1);\n            int least = (d>0)?d:0;\n            int most = 10000;\/\/listMushroom.get(0);\n            boolean finish = false;\n            for (int e = least; e<=most&&!finish; e++){\n                answer2=0;\n\/\/                System.out.println(e);\n                for (int i = 1; i < listMushroom.size()&& !finish; i++) {\n                    int a = (e>listMushroom.get(i-1))?listMushroom.get(i-1):e;\n                    if(i==listMushroom.size()-1\n                            &&(listMushroom.get(i-1)-e)<=listMushroom.get(i)){\n                        finish=true;\n                    }\n                    if(listMushroom.get(i-1)-a>listMushroom.get(i)){\n                        break;\n                    }\n                    answer2+=a;\n\/\/                    System.out.print(a+\" \");\n                }\n\/\/                System.out.println();\n            }\n            System.out.println(\"Case #\"+c+\": \"+answer1+\" \"+answer2);\n\/\/            System.out.println(finish);\n            ++c;\n        }\n        scanner.close();\n    }\n}"}
{"idx":"411","func":"class Mushroom {\n    public static void main(String args[]) throws NumberFormatException, IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"input.txt\")));\n        \n        int test_no = Integer.parseInt(br.readLine());\n        \n        BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));    \n    \n        for(int i = 1; i <= test_no; i++)\n        {\n            int stringlength = Integer.parseInt(br.readLine());\n            \n            String[] data = br.readLine().split(\" \");\n            \n            int count_second = 0;\n            int largest_diff = 0;\n            for(int j = 0; j < stringlength -1; j++)\n            {\n                int left = Integer.parseInt(data[j]);\n                int right = Integer.parseInt(data[j+1]);\n                int difference = right - left;\n                if(difference <= 0)\n                    count_second -= difference;\n                if(-difference >= largest_diff)\n                    largest_diff = -difference;\n                \n            }\n            \n            int count_second2 = 0;\n            for(int j = 0; j < stringlength -1; j++)\n            {\n                int left = Integer.parseInt(data[j]);\n                int right = Integer.parseInt(data[j+1]);\n                if(left <= largest_diff)\n                    count_second2 += left;\n                else\n                    count_second2 += largest_diff;\n                \n                \n            }\n            System.out.println(count_second);\n            System.out.println(count_second2);\n            out.write(\"Case #\");\n            out.write(String.valueOf(i));\n            out.write(\": \");\n            out.write(String.valueOf(count_second));\n            out.write(String.valueOf(\" \"));\n            out.write(String.valueOf(count_second2));\n            out.write(\"\\n\");\n        }\n        br.close();\n        out.close();\n        \n        \n    }\n\n\n}"}
{"idx":"412","func":"class A {\n\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new File(\"A-large.in\"));\n        BufferedWriter w = new BufferedWriter(new FileWriter(\"out.txt\"));\n        if (sc.hasNextInt()) {\n            int testNumber = sc.nextInt();\n            for (int i = 1; i <= testNumber; i++) {\n                int input = sc.nextInt();\n                int one = 0;\n                int two = 0;\n                int max = 0;\n                int[] array = new int[input];\n                for (int j = 0; j < input; j++) {\n                    array[j] = sc.nextInt();\n                    if (j != 0 && (array[j-1] - array[j]) >max) {\n                        max = array[j-1]-array[j];\n                    }\n                }\n                for (int j = 0; j < input-1; j++) {\n                    if (array[j] > array[j+1]) {\n                        one += array[j]-array[j+1];\n                    }\n                    if (max >= array[j]) {\n                        two += array[j];\n                    }\n                    if (max < array[j]) {\n                        two += max;\n                    }\n                }\n\/\/                System.out.println(\"Case #\"+i+\": \"+one+\" \"+two);\n                w.write(\"Case #\"+i+\": \"+one+\" \"+two+\"\\n\");\n            }\n        }\n        sc.close();\n        w.close();\n    }\n\n}"}
{"idx":"413","func":"class A {\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        int T, t, N, i, cur, maxdif, s1, s2, r10;\n        double rate;\n        int m[];\n        T = sc.nextInt();\n        for (t = 1; t <= T; t++) {\n            N = sc.nextInt();\n            m = new int[N];\n            cur = 0;\n            maxdif = 0;\n            s1 = 0;\n            s2 = 0;\n            for(i = 0; i < N; i++) {\n                m[i] = sc.nextInt();\n                maxdif = Math.max(cur - m[i], maxdif);\n                s1 += Math.max(cur - m[i], 0);\n                cur = m[i];\n            }\n            rate = (double)maxdif \/ 10;\n            \n            r10 = (int)(rate*10);\n            cur = 0;\n            for(i = 0; i < N; i++) {\n                s2 += Math.min(r10,cur);\n                cur = m[i];\n            }\n                        \n            System.out.println(\"Case #\" + t + \": \" + s1 + \" \" + s2);\n        }\n        sc.close();\n    }\n}"}
{"idx":"414","func":"class A {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src\/A-large.in\"))));\n\n        String output = \"\";\n        int t = sc.nextInt();\n        sc.nextLine();\n        for (int i = 1; i <= t; i++) {\n            int n = sc.nextInt();\n            int[] intervals = new int[n];\n            for (int j = 0; j < n; j++) {\n                intervals[j] = sc.nextInt();\n            }\n            int y = 0;\n            int minPerInterval = 0;\n            for (int j = 1; j < n; j++) {\n                if (intervals[j] < intervals[j-1]) {\n                    y += intervals[j-1]-intervals[j];\n                    if (intervals[j-1]-intervals[j] > minPerInterval)\n                        minPerInterval = intervals[j-1]-intervals[j];\n                }\n            }\n            int z = 0;\n            for (int j = 0; j < n-1; j++) {\n                z += Math.min(minPerInterval, intervals[j]);\n            }\n            output += \"Case #\" + i + \": \" + y + \" \" + z + \"\\n\";\n        }\n        \n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src\/A-large.out\"), \"utf-8\"));\n        bw.write(output);\n        bw.close();\n    }\n}"}
{"idx":"415","func":"class A1 {\n     public static void main(String[] args) throws Exception\n     {\n            Scanner sc = new Scanner(System.in);\n            int T = sc.nextInt();\n            for(int t=1;t<=T;t++){\n                int N = sc.nextInt();\n                int[] mushrooms = new int[N];\n                int[] diff = new int[N-1];\n                long total1=0;\n                long total2=0;\n                int max =0;\n                mushrooms[0]=sc.nextInt();\n                for(int n=1;n<N;n++){\n                    mushrooms[n]=sc.nextInt();\n                    diff[n-1]=mushrooms[n-1]-mushrooms[n];\n                    total1+=Math.max(diff[n-1],0);\n                    if(diff[n-1]>max){\n                        max=diff[n-1];\n                    }\n                }\n                \n                \/\/int c=0;\n                double c = (double)max\/10;\n                \/\/System.out.println(c);\n                boolean check=true;\n                \/\/for(c=0;c<=10000;c++){\n                    total2=0;\n                    check=true;\n                    for(int i=1;i<N;i++){\n                        if(mushrooms[i]==0){                            \n                            if(mushrooms[i-1] > c*10){\n                                check=false;\n                                break;\n                            }else{\n                                total2=total2+ mushrooms[i-1];\n                            }\n                        }else{\n                            if(mushrooms[i-1]-mushrooms[i]>10*c){\n                                check=false;\n                                break;\n                            }else{\n                                if(10*c>=mushrooms[i-1]){                                \n                                    \n                                    total2=total2+mushrooms[i-1];\n                                }else{\n                                    total2=(long) (total2+(int)10*c);\n                                }\n                            }\n                        }\n                    }\n                    \/\/if(check==true){\n                        \/\/System.out.println(c);\n                        System.out.println(\"Case #\"+t+\": \"+total1+\" \" +(total2));\n                        \/\/break;\n                    \/\/}\n                \/\/}\n                \/\/System.out.println(c);\n                \/\/if(check==false)\n                \/\/System.out.println(\"Case #\"+t+\": \"+total1+\" \"+total2);\n                \n            }\n            \n     }\n}"}
{"idx":"416","func":"class Main {\n\n    public static void main(String args[]) {\n        Scanner s = null;\n        PrintWriter out = null;\n\n        try {\n            String inputFilename;\n            if (args.length > 0) {\n                inputFilename = args[0];\n            } else {\n                System.out.print(\"Input file name: \");\n                BufferedReader in = new BufferedReader(new InputStreamReader(\n                        System.in));\n                inputFilename = in.readLine();\n            }\n\n            File f = new File(\"data\/\" + inputFilename);\n            String outputFilename = inputFilename.replaceFirst(\"(\\\\.in)?$\",\n                    \".out\");\n\n            s = new Scanner(new FileReader(f));\n            out = new PrintWriter(new FileWriter(\"data\/\" + outputFilename));\n            int testCases = s.nextInt();\n            for (int t = 1; t <= testCases; ++t) {\n                int sampleCount = s.nextInt();\n                Vector<Integer> samples = new Vector<Integer>(sampleCount);\n                for (int i = 0; i < sampleCount; ++i) {\n                    samples.add(s.nextInt());\n                }\n                int result = 0;\n                for (int i = 1; i < samples.size(); ++i) {\n                    int diff = samples.elementAt(i - 1) - samples.elementAt(i);\n                    if (diff > 0) {\n                        result += diff;\n                    }\n                }\n\n                int method1 = result;\n                int maxDown = 0;\n                for (int i = 1; i < samples.size(); ++i) {\n                    int diff = samples.elementAt(i - 1) - samples.elementAt(i);\n                    if (diff > maxDown) {\n                        maxDown = diff;\n                    }\n                }\n                \n                int result1 = 0;\n                for (int i = 1; i < samples.size(); ++i) {\n                    if (samples.elementAt(i) == 0) {\n                        result1 += samples.elementAt(i - 1);\n                    } else if (samples.elementAt(i - 1) < maxDown) {\n                        result1 += samples.elementAt(i - 1);\n                    } else {\n                        result1 += maxDown;\n                    }\n                }\n                int method2 = result1;\n\n                out.println(\"Case #\" + t + \": \" + method1 + \" \" + method2);\n            }\n\n            out.close();\n            s.close();\n        } catch (Exception e) {\n            System.err.println(e);\n        } finally {\n            if (null != out)\n                out.close();\n            if (null != s)\n                s.close();\n        }\n    }\n}"}
{"idx":"417","func":"static void main(String[] args) throws java.lang.Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine()), n, x, c, r, arr[];\n        String s[], ss;\n        for (int bv = 1; bv <= t; bv++) {\n            n = Integer.parseInt(br.readLine());\n            s = br.readLine().split(\" \");\n            arr = new int[n];\n            for (int i = 0; i < n; i++) {\n                arr[i] = Integer.parseInt(s[i]);\n            }\n            int max = 0;\n            for (int i = 1; i < n; i++) {\n                if ((arr[i-1] - arr[i]) > max) {\n                    max = arr[i -1] - arr[i];\n                }\n            }\n            long ans = 0;\n            for (int i = 0; i < n - 1; i++) {\n                if (arr[i] <= max) {\n                    ans = ans + (long)arr[i];\n                } else {\n                    ans += (long)max;\n                }\n            }\n            long ans1 = 0;\n            for (int i = 1; i < n; i++) {\n                if (arr[i - 1] > arr[i]) {\n                    ans1 += (long)(arr[i - 1] - arr[i]);\n                }\n            }\n            System.out.println(\"Case #\"+bv+\": \"+ans1+\" \"+ans);\n        }\n    }\n}"}
{"idx":"418","func":"class Main {\n  \n  public static void main(String[] args) throws IOException {\n    \n    BufferedReader br = new BufferedReader(new FileReader(new File(\"A-large.in\")));\n    BufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"A-large.out\")));\n    \n    int testCases = Integer.parseInt(br.readLine());\n    \n    for (int i = 0; i < testCases; i++) {\n      \n      int size = Integer.parseInt(br.readLine());\n      \n      int[] input = new int[size];\n      \n      StringTokenizer st = new StringTokenizer(br.readLine());\n      \n      for (int j = 0; j < size; j++) {\n        input[j] = Integer.parseInt(st.nextToken());\n      }\n    long result1 = 0;\n    long result2 = 0;\n    int difference, maxDifference = 0;\n    \n    for (int i1 = 1; i1 < input.length; i1++) {\n      difference = input[i1-1] - input[i1];\n      maxDifference = Math.max(maxDifference, difference);\n      if (difference > 0) {\n        result1 += difference;\n      }\n    }\n    \n    \n    for (int i2 = 0; i2 < input.length - 1; i2++) {\n      result2 += Math.min(input[i2], maxDifference);\n    }\n      \n      String outString = String.valueOf(result1) + \" \" + String.valueOf(result2);\n      \n      bw.write(\"Case #\" + String.valueOf(i+1) + \": \" + outString + \"\\n\");\n    }\n    \n    br.close();\n    bw.close();    \n    \n  }\n\n}"}
{"idx":"419","func":"class gcjround1_1\n{\n    static Scanner sc=new Scanner (System.in);\n    public static void main (String[]args)\n    {\n        \/\/String newLine=\"\"+(char)13;\n        \/\/sc.useDelimiter(newLine);\n\n        int T=sc.nextInt();\n        for (int i=0;i<T;i++)\n        {\n            int N=sc.nextInt();\n            int curr=0;\n            int next=sc.nextInt();\n            int[]a=new int[N];\n                a[0]=next;\n            int max=0;\n            int meth1max=0;\n            for (int i1=1;i1<N;i1++)\n            {\n                 curr=next;\n                 next=sc.nextInt();\n                 a[i1]=next;\n                if (curr-next>max)\n                    max=curr-next;\n                if (curr-next>0)\n                    meth1max+=curr-next;\n            }\n            int sum=0;\n            for (int i2=0;i2<N-1;i2++)\n            {\n                if (a[i2]>max)\n                    sum+=max;\n                else\n                    sum+=a[i2];\n            }\n                System.out.println(\"Case #\"+(i+1)+\": \"+meth1max+\" \"+sum);\n            \/\/number of recorded times\n\n            \/\/System.out.println(\"Case #\"+(i+1)+\": \"+f(N));\n        }\n    }\n}"}
{"idx":"420","func":"class A {\n\n    public static void main(String[] args) {\n\n        A a = new A();\n\n        Scanner sc = new Scanner(System.in);\n\n        int T = sc.nextInt();\n\n        for (int t = 0; t < T; t++) {\n\n            int N = sc.nextInt();\n            int[] mushrooms = new int[N];\n\n            for (int i = 0; i < N; i++) {\n                mushrooms[i] = sc.nextInt();\n            }\n            int ret = 0;\n            for (int i = 1; i < N; i++) {\n                int diff = Math.max(0, mushrooms[i - 1] - mushrooms[i]);\n                ret += diff;\n            }\n\n            String y = Integer.toString(ret);\n            int rate = 0;\n            for (int i = 1; i < N; i++) {\n                rate = Math.max(rate, mushrooms[i - 1] - mushrooms[i]);\n            }\n            \n            int ret1 = 0;\n            for (int i = 0; i < N - 1; i++) {\n                int diff = Math.min(rate, mushrooms[i]);\n                ret1 += diff;\n            }\n            String z = Integer.toString(ret1);\n            System.out.format(\"Case #%d: %s %s\", t + 1, y, z);\n            System.out.println();\n        }\n\n        sc.close();\n\n    }\n}"}
{"idx":"421","func":"class MushroomMonster {\n    \n    static final String CASE_PREFIX = \"Case #\";\n    static final String COLON = \":\";\n    static final String BLANK_SPACE = \" \";\n    static final String COLON_SPACE = COLON+BLANK_SPACE;\n    \n    \/**\n     * \n     * Declare any static variable over here\n     *\/\n    \n    public static void main(String[] args) {\n        \n        String root_path = \"C:\/Vijay\/Workspaces\/GoogleCodeJam\/\";\n        String fileName=root_path+\"inputFiles\/2015\/MushroomMonster\/A-large\";\n        \n        try (Scanner reader = new Scanner(new BufferedReader(new FileReader(fileName+\".in\")));\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName+\"_out.txt\"), \"utf-8\"))    ){\n        \n            \/\/String inputLine = reader.readLine();\n            int T = reader.nextInt();\n            for(int caseNumber=1;caseNumber<=T;caseNumber++){\n                int N = reader.nextInt();\n                int[] mush = new int[N];\n                for(int i=0;i<N;i++){\n                    mush[i] = reader.nextInt();\n                }\n                int result = 0;\n                int a = mush[0];\n                for(int i=1;i<mush.length;i++){\n                    int b = mush[i];\n                    if(b<a){\n                        result+=a-b;\n                    }\n                    a=b;\n                }\n                \n                int result1 = result;\n                int result3 = 0;\n                int rate = 0;\n                int a1 = mush[0];\n                for(int i=1;i<mush.length;i++){\n                    int b=mush[i];\n                    if(b<a1){\n                        int temp = a1-b;\n                        if(rate<temp)\n                            rate=temp;\n                    }\n                    a1=b;\n                }\n                \n                System.out.println(\"Rate-->\"+rate);\n                \n                for(int i=0;i<mush.length-1;i++){\n                    a1=mush[i];\n                    int tem = a1-rate;\n                    if(tem>=0)\n                        result3+=rate;\n                    else{\n                        result3+=rate+tem;\n                        tem=0;\n                    }\n                    \n                }\n                int result2 = result3;\n                \n                \n                \/\/ write output\n                writer.write(CASE_PREFIX+caseNumber+COLON_SPACE+result1+BLANK_SPACE+result2);\n                writer.newLine();\n            }\n            \n        } catch (IOException ex) {\n            Logger.getLogger(MushroomMonster.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        System.out.println(\"Done executing\");\n     }\n    \n  \n    \n}"}
{"idx":"422","func":"class Prob1 {\n\n    public static void main(String[] args) \n    {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        String line = in.nextLine();\n\n        for (int t = 0; t < T; t++) \n        {\n            line = in.nextLine();\n            String[] sN = line.split(\" \");\n            int N = Integer.parseInt(sN[0]);\n            \n            line = in.nextLine();\n            String[] ss = line.split(\" \");\n            \n            int[] Num = new int[N]; \n            for(int i = 0; i<N; i++)\n            {\n                Num[i] = Integer.parseInt(ss[i]);\n            }\n            \n            int min1 = 0;\n            for(int i = 0; i<N-1; i++)\n            {\n                if(Num[i+1]<Num[i])\n                    min1 +=Num[i]-Num[i+1];\n                    \n            }\n            \n            int min2 = 0;\n            ArrayList<Double> diff = new ArrayList<Double>();\n            for(int i = 0; i<N-1; i++)\n            {\n                double temp = Num[i]-Num[i+1];\n                diff.add(temp);\n            }\n            \n            double max_diff = Collections.max(diff);\n            \n            for(int i = 0; i<N-1; i++)\n            {\n                if(Num[i+1]>Num[i])\n                {\n                    if(Num[i]<=max_diff)\n                        min2 += Num[i];\n                    else\n                        min2 += max_diff;\n                }\n                else \n                {\n                    if(Num[i]<max_diff )\n                        min2+= Num[i];\n                    else \n                        min2+= max_diff;\n                }\n            }\n            \n\n            System.out.printf(\"Case #%d: \", t + 1);\n            System.out.println(min1 + \" \"+ min2);\n            \n            \n        }\n    }\n}"}
{"idx":"423","func":"class ProblemAMushroomMonster {\n\n    public static void main(String[] args) throws IOException {\n\n        final BufferedReader reader = new BufferedReader(new FileReader(\"files\/com\/google\/code\/codejam2015\/r1a\/A-large.in\"));\n        final BufferedWriter writer = new BufferedWriter(new FileWriter(\"files\/com\/google\/code\/codejam2015\/r1a\/A-large.out\"));\n\n        final int T = Integer.parseInt(reader.readLine());\n        for (int t = 0; t < T; t++) {\n\n            final int N = Integer.parseInt(reader.readLine());\n            final String[] line = reader.readLine().split(\" \");\n            final int[] m = new int[N];\n            \n            for (int i = 0; i < line.length; i++) {\n                m[i] = Integer.parseInt(line[i]);\n            }\n            \n            int y = 0;\n            int maxDiff = 0;\n            for (int i = 0; i < m.length - 1; i++) {\n                if (m[i] > m[i + 1]) {\n                    final int diff = m[i] - m[i + 1];\n                    y += diff;\n                    if (diff > maxDiff) {\n                        maxDiff = diff;\n                    }\n                }\n            }\n            \n            int z = 0;\n            if (maxDiff > 0) {\n                for (int i = 0; i < m.length - 1; i++) {\n                    if (m[i] > maxDiff) {\n                        z += maxDiff;\n                    } else {\n                        z += m[i];\n                    }\n                }\n            }\n            \n            String result = \"Case #\" + (t + 1) + \": \" + y + \" \" + z;\n            System.out.print(result + \"\\n\");\n            writer.write(result + \"\\n\");\n        }\n        \n        reader.close();\n        writer.close();\n    }\n\n}"}
{"idx":"424","func":"class A {\n    \n    static Scanner in = new Scanner(System.in);\n    \n    static PrintStream out = System.out;\n    \n    public static void main(String[] args) {\n        int T = in.nextInt();\n        \n        for (int test = 1; test <= T; test++){\n            int N = in.nextInt();\n            \n            int[] m = new int[N];\n            \n            for (int i = 0; i < N; i++){\n                m[i] = in.nextInt();\n            }\n            \n            int R1 = 0;\n            \n            for (int i = 1; i < N; i++){\n                if (m[i] - m[i - 1] < 0){\n                    R1 += Math.abs(m[i] - m[i - 1]);\n                }\n            }\n            \n            int maxDiff = 0;\n            \n            for (int i = 0; i < N - 1; i++){\n                maxDiff = Math.max(maxDiff, m[i] - m[i + 1]);\n            }\n            \n            int R2 = 0;\n            \n            \/\/out.println(maxDiff);\n            \n            for (int i = 0; i < N - 1; i++){\n                R2 += Math.min(m[i], maxDiff);\n            }\n            \n            out.println(String.format(\"Case #%d: %d %d\", test, R1, R2));\n        }\n    }\n}"}
{"idx":"425","func":"class MainMushrooms {\n\n    public static void main(String[] args) {\n\n        FileInputStream file;\n        int T;\n        ArrayList<TestMushrooms> tests;\n\n        try {\n\n\/\/            file = new FileInputStream(\"input_Mushrooms\");\n\/\/            file = new FileInputStream(\"A-small-attempt0.in\");\n            file = new FileInputStream(\"A-large.in\");\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(file));\n\n\n            String buff = in.readLine();\n            T = Integer.parseInt(buff);\n            tests = new ArrayList<TestMushrooms>();\n\n            for (int i=0; i<T; i++){\n\n                int N;\n                buff = in.readLine();\n                N = Integer.parseInt(buff);\n\n                int[] s = new int[N];\n                buff = in.readLine();\n                String[] data = buff.split(\" \");                \n                for (int j=0; j<N; j++) {\n                    s[j] = Integer.parseInt(data[j]);\n                }\n                \n                tests.add(new TestMushrooms(N, s));\n            }\n\n            in.close();\n\n\n            BufferedWriter bw = new BufferedWriter(new FileWriter(\"output_Mushrooms\"));\n\n            for (int i=0; i<T; i++) {\n                int ind = i+1;\n                TestMushrooms res = tests.get(i);\n                System.out.println(\"Result \"+ i + \" : \"+ res.getRes1() + \" \" + res.getRes2());\n                bw.write(\"Case #\"+ind+\": \"+res.getRes1()+\" \"+res.getRes2()+\"\\n\");\n            }\n            bw.close();\n\n\n\n\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }    \n}"}
{"idx":"426","func":"class MushroomMonster {\n\n    \/**\n     * @param args\n     * @throws Exception\n     *\/\n    public static void main(String[] args) throws Exception {\n\n        FileReader fileReader = new FileReader(\"C:\/Users\/Lakjeewa\/Desktop\/A-large.in\");\n\n        BufferedReader br = new BufferedReader(fileReader);\n\n        String line = br.readLine();\n\n        int cases = Integer.parseInt(line);\n        \n        PrintWriter writer = new PrintWriter(\n                \"C:\/Users\/Lakjeewa\/Desktop\/A.out\", \"UTF-8\");\n\n        for (int i = 0; i < cases; i++) {\n\n            int N = Integer.parseInt(br.readLine());\n\n            String[] array = br.readLine().split(\" \");\n            int[] nums = new int[N];\n\n            for (int j = 0; j < N; j++) {\n                nums[j] = Integer.parseInt(array[j]);\n            }\n\n            int min = 0;\n            int maxDif = 0;\n\n\n\n            for (int j = 0; j < N - 1; j++) {\n\n                int diff = nums[j] - nums[j + 1];\n\n                if (diff > 0) {\n                    min = min + diff;\n                }\n                \n                if(maxDif < diff){\n                    maxDif = diff;\n                }\n            }\n\n            int total = 0;\n            \/\/double rate = maxDif * 1.0 \/ 10;\n            \n            int eaten = 0;\n\n            for (int j = 0; j < N-1; j++) {\n                \n                int v = nums[j] - maxDif;\n                if(v > 0){\n                    eaten = eaten + maxDif;\n                }else{\n                    eaten = eaten + nums[j];\n                }\n            }\n            \n            \n\n            \/\/System.out.println(\"Case #\" + (i + 1) + \": \" + min + \" \" + eaten);\n            writer.println(\"Case #\" + (i + 1) + \": \" + min + \" \" + eaten);\n        }\n\n        br.close();\n        writer.close();\n    }\n}"}
{"idx":"427","func":"class MushroomMonster {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) throws Exception {\n        \/\/ TODO Auto-generated method stub\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));\n        StringTokenizer st;\n        int T=Integer.parseInt(br.readLine());\n        for(int cn=1;cn<=T;cn++){\n            int N=Integer.parseInt(br.readLine());\n            int m[]=new int[N];\n            st=new StringTokenizer(br.readLine());\n            for(int i=0;i<N;i++){\n                m[i]=Integer.parseInt(st.nextToken());\n            }\n            int ans1=0, maxd=0;\n            for(int i=1;i<N;i++){\n                int diff=Math.max(0,m[i-1]-m[i]);\n                ans1+=diff;\n                maxd=Math.max(maxd, diff);\n            }\n            int ans2=0;\n            for(int i=0;i<N-1;i++){\n                int diff=Math.min(m[i],maxd);\n                ans2+=diff;\n            }\n\n            bw.append(\"Case #\"+cn+\": \"+ans1+\" \"+ans2+\"\\n\");\n        }\n        bw.flush();\n    }\n\n}"}
{"idx":"428","func":"class MushroomMonster {\n    public static void main(String[] args) throws IOException {\n        File input = new File(\"A-large.in\");\n        Scanner sc = new Scanner(input);\n        int numCases = sc.nextInt();\n        for (int i = 1; i <= numCases; i++) {\n            int numM = sc.nextInt();\n            int localMax = 0;\n            int count1 = 0;\n            ArrayList<Integer> diffList = new ArrayList<Integer>();\n            ArrayList<Integer> numList = new ArrayList<Integer>();\n            \n            \n            for (int j = 1; j <= numM; j++){\n                int nextNum = sc.nextInt();\n                numList.add(nextNum);\n                int difference = localMax-nextNum;\n                diffList.add(difference);\n                if (localMax >= nextNum){\n                    count1 += difference;\n                }\n                localMax = nextNum;\n            }\n            int maxDiff = Collections.max(diffList);\n            int total = 0;\n            for (int k = 0; k < numList.size()-1; k++){\n                if (numList.get(k) > maxDiff)\n                    total += maxDiff;\n                else\n                    total += numList.get(k);\n            }\n            \n            System.out.println(\"Case #\"+i + \": \" + count1 + \" \" + total);\n            \n                \n        }\n        sc.close();\n    }\n}"}
{"idx":"429","func":"class A {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        System.setIn(new FileInputStream(new File(\"A_large.in\")));\n        System.setOut(new PrintStream(new FileOutputStream(new File(\"A_large.out\"))));\n        Scanner in = new Scanner(System.in);\n\n        int T = in.nextInt();\n        for (int t = 1; t<=T;t++) {\n            int N = in.nextInt();\n            int[] m = new int[N];\n            for (int i = 0; i < N; i++ ) {\n                m[i] = in.nextInt();\n            }\n\n            int ans1 = 0;\n            int largestDecrease = 0;\n            for (int i = 0; i< N-1; i++ ) {\n                int dec =Math.max(0, m[i]-m[i+1]);\n                ans1 += dec;\n                largestDecrease = Math.max(largestDecrease, dec);\n            }\n\n            int ans2 = 0;\n            for (int i = 0; i < N-1; i++) {\n                ans2 += Math.min(m[i], largestDecrease);\n            }\n\n            System.out.printf(\"Case #%d: %d %d\", t, ans1, ans2);\n            System.out.println();\n\n        }\n    }\n}"}
{"idx":"430","func":"class Run {\n    public static final String fileIn = \"textFiles\/mushrooms\/A-large.in.txt\";\n    public static final String fileOut = \"textFiles\/mushrooms\/large-out.txt\";\n    \n    public static void main(String[] args) \n            throws FileNotFoundException, IOException {\n        PrintWriter writer = new PrintWriter(fileOut, \"UTF-8\");\n        try (BufferedReader br = new BufferedReader(new FileReader(fileIn))) {\n            int numIn = Integer.parseInt(br.readLine());\n            for (int i = 0; i < numIn; i++) {\n                int time = Integer.parseInt(br.readLine());\n                String[] numListString = br.readLine().split(\" \");\n                int[] intList = new int[time];\n                int curr = Integer.parseInt(numListString[0]);\n                intList[0] = curr;\n                int case1Sum = 0;\n                int case2NegMax = 0;\n                for (int j = 1; j < time; j++) {\n                    int next = Integer.parseInt(numListString[j]);\n                    intList[j] = next;\n                    int diff = next - curr;\n                    if (diff < 0) {\n                        case1Sum += -diff;\n                        if (-diff > case2NegMax) {\n                            case2NegMax = -diff;\n                        }\n                    }\n                    curr = next;\n                }\n                int case1 = case1Sum;\n                int case2Sum = 0;\n                for (int j = 0; j < time - 1; j++) {\n                    curr = intList[j];\n                    int next = intList[j+1];\n                    int diff = next - curr;\n                    if (curr < case2NegMax) {\n                        case2Sum += curr;\n                    } else {\n                        case2Sum += case2NegMax;\n                    }\n                }\n                writer.println(\"Case #\" + (i+1) + \": \" + case1 + \" \" + case2Sum);\n            }\n        }\n        writer.close();\n    }\n}"}
{"idx":"431","func":"class Mush {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n\n        for (int i = 0; i < T; i++) {\n            int N = in.nextInt();\n            int[] mush = new int[N];\n            for (int i1 = 0; i1 < N; i1++) {\n                mush[i1] = in.nextInt();\n            }\n            int firstOutput = 0;\n            for (int i2 = 0; i2 < N - 1; i2++) {\n                int diff = mush[i2] - mush[i2+1];\n                if (diff > 0) {\n                    firstOutput += diff;\n                }\n            }\n            \n            int secondOutput = 0;\n            int maxDiff = 0;\n            for (int i3 = 0; i3 < N - 1; i3++) {\n                int diff = mush[i3] - mush[i3+1];\n                if (diff > maxDiff) {\n                    maxDiff = diff;\n                }\n            }\n            \n            for (int i4 = 0; i4 < N - 1; i4++) {\n                if (mush[i4] > maxDiff) {\n                    secondOutput += maxDiff;\n                } else {\n                    secondOutput += mush[i4];\n                }\n            }\n            \n            \n            \n            System.out.println(\"Case #\" + (i + 1) + \": \" + firstOutput + \" \" + secondOutput);\n        }\n        in.close();\n\n    }\n\n}"}
{"idx":"432","func":"class z1_1 {\n\n    public static void main(String[] args) throws Exception {\n        FileWriter fw = new FileWriter(\"C:\\\\output.txt\");\n        BufferedWriter out = new BufferedWriter(fw);\n        \/\/String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\z111.txt\";\n        \/\/String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\A-small-attempt0 (1).in\";\n        \/\/String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\A-generated.in\";\n        String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\A-large (1).in\";\n        Scanner scanner = new Scanner(new File(pathname));\n        int tn = scanner.nextInt();\n        scanner.nextLine();\n        for (int ti = 1; ti <= tn; ti++) {\n            int n = scanner.nextInt();\n            int[] l21 = new int[n];\n            for (int i1=0;i1<n;i1++) {\n                l21[i1] = scanner.nextInt();\n            }\n            int[] l2 = l21;\n            \/\/String s1 = scanner.next();\n            \/\/String s2 = scanner.next();\n            int s1 = 0;\n            int mx = 0;\n            for (int i=1;i<n;i++) {\n                if (l2[i]<l2[i-1]) {\n                    int delta = l2[i - 1] - l2[i];\n                    s1 += delta;\n                    if (delta>mx) {\n                        mx = delta;\n                    }\n                }\n            }\n            int mx2 = 0;\n            int cr=0;\n            for (int i=1;i<n;i++) {\n                cr = l2[i-1];\n                if (l2[i-1]>mx) {\n                    mx2+=mx;\n                } else {\n                    mx2 +=l2[i-1];\n                }\n            }\n            String s;\n            s = \"Case #\" + ti + \": \"+s1+\" \"+mx2;\n            System.out.println(s);\n            out.write(s);\n            out.write(\"\\n\");\n        }\n        out.close();\n    }\n\n}"}
{"idx":"433","func":"static void main(String [] abb){\n        try{\n            Scanner in = new Scanner(new File(\"safia.in\"));\n            PrintWriter writer = new PrintWriter(\"out2.in\", \"UTF-8\");\n            \n            int testcase = in.nextInt();\n            int tab [][] = new int[5][5];\n            \n            for(int p=0;p<testcase;p++){\n            int n = in.nextInt();\n            int inp[] = new int[n];\n            int max=0;\n            for(int i=0;i<n;i++){\n                \n                \n                inp[i]=in.nextInt();\n                if(i!=0){\n                    max=Math.max(max,(inp[i-1]-inp[i]));\n                }\n            }\n            System.out.println(max);\n                int out1=0;\n                int out2=0;\n                \n            for(int j=0;j<n-1;j++){\n                if(inp[j+1]<inp[j]){\n                    out1=inp[j]-inp[j+1]+out1;\n                }\n                if(inp[j]<max){\n                    out2=out2+inp[j];\n                }else{\n                    out2=out2+max;\n                }\n            }\n            \n                writer.println(\"Case #\"+(p+1)+\": \"+out1+\" \"+out2);\n                \n            }\n            \n            \n            \n            \n            writer.close();\n        }catch(IOException e){\n            \n            }\n    }\n}"}
{"idx":"434","func":"class ProblemA {\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        \/\/ TODO READER        \n        \/\/BufferedReader br= new BufferedReader(new FileReader(\"bum.in\"));\n        \/\/BufferedReader br= new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n        BufferedReader br= new BufferedReader(new FileReader(\"A-large.in\"));\n        PrintWriter pw = new PrintWriter(\"ProblemA.txt\", \"UTF-8\");\n        int T=Integer.parseInt(br.readLine());\n        \n        for(int i = 0; i < T; i++){\n            int L = Integer.parseInt(br.readLine());\n            String[] tab =br.readLine().split(\" \");\n            int[] arr = new int[tab.length];\n            for(int j=0;j<tab.length;j++){\n                arr[j]=Integer.parseInt(tab[j]);\n            }\n            \n\n            int x=0;\n            int y=0;\n            int previous = 0;\n            int max=0;\n            for(int m:arr){\n                if(m<previous)x+=previous-m;\n                if(max<previous-m)max=previous-m;\n                previous=m;\n            }\n            System.out.println(max);\n            \/\/if(max%10!=0)max=((max\/10)+1)*10;\n            for(int j=0;j<arr.length-1;j++){\n                int m=arr[j];\n                if(max<m)y+=max;\n                else y+=m;\n            }\n            \n            \n            \n            \n            System.out.print(\"Case #\"+(i+1)+\": \"+x+\" \"+y+\"\\n\");\n            pw.write(\"Case #\"+(i+1)+\": \"+x+\" \"+y+\"\\n\");\n\n        }\n        pw.close();\n    }\n}"}
{"idx":"435","func":"class Mushroom\n{\n\n    public static void main(String[] args) throws FileNotFoundException\n    {\n        Scanner in = new Scanner (new File (\"A-large.in\"));\n        PrintWriter out = new PrintWriter (\"mushroomoutput\");\n        int T = in.nextInt();\n        for (int test = 1; test<=T; test++)\n        {\n            int N = in.nextInt();\n            int [] m = new int [N];\n            for (int i=0; i<N; i++)\n            {\n                m[i]=in.nextInt();\n            }\n            \n            long x=0;\n            for (int i=0; i<=N-2; i++)\n            {\n                if (m[i]>m[i+1])\n                    x+=m[i]-m[i+1];\n            }\n            \n            int maxIndex=0;\n            for (int i=1; i<=N-2; i++)\n            {\n                if (m[i]-m[i+1]>m[maxIndex]-m[maxIndex+1])\n                    maxIndex=i;\n            }\n            int value = m[maxIndex]-m[maxIndex+1];\n            long y=0;\n            if (value<=0)\n                y=0;\n            else\n            {\n                for (int i=0; i<=N-2; i++)\n                {\n                    if (m[i]>=value)\n                        y+=value;\n                    else\n                        y+=m[i];\n                }\n            }\n            out.println(\"Case #\"+test+\": \"+x+\" \"+y);\n            \n        }\n        out.close();\n        in.close();\n\n    }\n\n}"}
{"idx":"436","func":"class A {\n    \n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n    \n        int T = sc.nextInt();\n    \n        for(int z=1; z<=T;z++)\n        {\n            int N = sc.nextInt();\n            int[] arr = new int[N];\n            for(int i=0;i<N;i++)\n                arr[i] = sc.nextInt();\n            \n            int count1 = 0;\n            int count2 = 0;\n            \n            int i = 0;\n            while(i<N-1)\n            {\n                if(arr[i]<arr[i+1])\n                    i++;\n                else\n                {\n                    count1 += arr[i]-arr[i+1];\n                    i++;\n                }\n            }\n            \n            int max = arr[0]-arr[1];\n            for(int j=1;j<N-1;j++)\n                if(max < arr[j]-arr[j+1])\n                    max = arr[j]-arr[j+1];\n            for(int k=0;k<N-1;k++)\n            {\n                if(arr[k]-max <= 0)\n                {\n                    count2 += arr[k];\n                }\n                else\n                    count2 += max;\n            }\n            \n            System.out.println(\"Case #\" + z + \": \" + count1 + \" \" + count2);\n        }\n    }\n    \n    \n}"}
{"idx":"437","func":"class Main {\n\n    public static void main(String[] args) throws IOException {\n\n        Scanner scanner = new Scanner(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"in.large\")));\n        int T = scanner.nextInt();\n        for(int t=0;t<T;t++) {\n            int N = scanner.nextInt();\n            int[] n = new int[N];\n\n            int C = 0;\n            int eat = 0;\n            int Bdelta = 0;\n            for(int i=0;i<N;i++) {\n                int C1 = scanner.nextInt();\n                n[i] = C1;\n                if(C1 < C) {\n                    int delta = (C - C1);\n                    eat += (C - C1);\n                    if(delta > Bdelta) {\n                        Bdelta = delta;\n                    }\n\n                }\n                C = C1;\n            }\n\n            int eat2 = 0;\n            int plate = 0;\n            for(int i=0;i<N-1;i++) {\n                plate = n[i];\n                if(plate >= Bdelta) {\n                    plate -= Bdelta;\n                    eat2+=Bdelta;\n                } else {\n                    eat2 += plate;\n                    plate = 0;\n                }\n\n            }\n\n            System.out.println(\"Case #\" + (t+1) + \": \" + (eat) + \" \" + eat2);\n        }\n    }\n\n}"}
{"idx":"438","func":"class CodeJamR1A2015A {\n    public static Scanner in;\n    public static PrintWriter out;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        in = new Scanner(new File(\"input.txt\"));\n        out = new PrintWriter(new BufferedOutputStream(new FileOutputStream(\n                new File(\"output.txt\"))));\n        int totalCases = in.nextInt();\n        in.nextLine();\n        for (int i = 1; i <= totalCases; i++) {\n            int n = in.nextInt();\n            int oldM=0;\n            int sum1=0;\n            int sum2=0;\n            int mostDiff=0;\n            int[] a = new int[n];\n            a[0] = in.nextInt();\n            oldM=a[0];\n            for (int i2=1; i2<n-1; i2++){\n                a[i2] = in.nextInt();\n                if (a[i2]<oldM) sum1+=(oldM-a[i2]);\n                if ((oldM-a[i2])>mostDiff) mostDiff=(oldM-a[i2]);\n                oldM=a[i2];\n            }\n            int m = in.nextInt();\n            if (m<oldM) sum1 += (oldM - m);\n            if ((oldM-m)>mostDiff) mostDiff=(oldM-m);\n            for (int i1=0;i1<n-1;i1++){\n                if (a[i1]<mostDiff) sum2+=a[i1];\n                else sum2+=mostDiff;\n            }\n            out.println(\"Case #\" + i + \": \"+ sum1+\" \"+sum2);\n        }\n        out.close();\n        System.err.println(\"Completed\");\n    }\n}"}
{"idx":"439","func":"class A {\n    public static void main(String[] args) throws Exception {\n        BufferedReader in = new BufferedReader(new FileReader(\"A.in\"));\n        PrintStream out = new PrintStream(\"A.out\");\n\n        int t = Integer.parseInt(in.readLine());\n        for(int i = 0; i < t; i++) {\n            int n = Integer.parseInt(in.readLine());\n            String[] arr = in.readLine().split(\" \");\n            int[] a = new int[n];\n            for(int j = 0; j < n; j++) {\n                a[j] = Integer.parseInt(arr[j]);\n            }\n            int tot = 0;\n            int max = 0;\n            for(int j = 0; j < n - 1; j++) {\n                if(a[j] > a[j + 1]) {\n                    tot += a[j] - a[j + 1];\n                }\n                max = Math.max(max, a[j] - a[j + 1]);\n            }\n            long tot2 = Long.MAX_VALUE >> 1;\n            for(int j = 0; j <= 100000; j++) {\n                boolean works = true;\n                long temptot = 0;\n                for(int k = 0; k < n - 1; k++) {\n                    if(a[k] <= j) {\n                        temptot += a[k];\n                    } else {\n                        temptot += j;\n                    }\n                    if(j < a[k] - a[k + 1]) {\n                        works = false;\n                    }\n                }\n                if(works) {\n                    tot2 = Math.min(tot2, temptot);\n                }\n            }\n            out.println(\"Case #\" + (i + 1) + \": \" + tot + \" \" + tot2);\n        }\n    }\n}"}
{"idx":"440","func":"class A {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner sc = new Scanner(new File(\"A-large.in\"));\n        int T = sc.nextInt();\n        for(int testC = 1; testC<=T; ++testC)\n        {\n            int N = sc.nextInt();\n            int[] data = new int[N];\n            for(int i=0; i<N; ++i)\n                data[i]=sc.nextInt();\n            int max_dif=0, total_dif=0;\n            for(int i=0; i<N-1; ++i)\n            {\n                if(data[i]-data[i+1]>max_dif)\n                    max_dif=data[i]-data[i+1];\n                if(data[i]-data[i+1]>0)\n                    total_dif+=data[i]-data[i+1];                \n            }\n            int total=0;\n            for(int i=0; i<N-1; ++i)\n            {\n                if(data[i]<max_dif)\n                    total+=data[i];\n                else\n                    total+=max_dif;                \n            }\n            System.out.printf(\"Case #%d: %d %d\\n\", testC, total_dif, total);\n            \n            \n        }\n        \n    }\n}"}
{"idx":"441","func":"static void main(String[] args) throws java.io.IOException {\n        java.io.BufferedReader br =  new java.io.BufferedReader(new java.io.InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine());\n        for (int i = 0; i < t; i++) {\n            int n = Integer.parseInt(br.readLine());\n            int arr[] = new int[n];\n            int diff=0;\n            String s[] = br.readLine().split(\" \");\n            for (int j = 0; j < n; j++) {\n                arr[j] = Integer.parseInt(s[j]);\n            }\n            int max=0;\n            for (int j = 1; j < n; j++) {\n                if(arr[j]<arr[j-1]){\n                    diff+=arr[j-1]-arr[j];\n                    if((arr[j-1]-arr[j])>max){\n                        max=arr[j-1]-arr[j];\n                    }\n                }\n            }\n\/\/            int r = max\/10;\n\/\/\/\/            if(max%10!=0){\n\/\/\/\/                r++;\n\/\/\/\/            }\n\/\/            r=r*10;\n            int diff2=0;\n            for (int j = 0; j < n-1; j++) {\n                if(arr[j]<=max){\n                    diff2=diff2+arr[j];\n                }else{\n                    diff2=diff2+max;\n                }\n            }\n            System.out.println(\"Case #\"+(i+1)+\":\"+\" \"+diff+\" \"+diff2);\n        }\n    }\n}"}
{"idx":"442","func":"class Main {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/ TODO code application logic here\n        Scanner input = new Scanner(new File(\"input.in\"));\n        PrintWriter out=new PrintWriter(new File(\"out\"));\n        int tc;\n        tc = input.nextInt();\n        for (int b = 1; b <= tc; b++) {\n            int e, d = 0, x = 0, y = 0, z = 0;\n            e = input.nextInt();\n            int m[] = new int[e];\n\n            for (int c = 0; c < e; c++) {\n                m[c] = input.nextInt();\n\n            }\n            for (int c = 1; c < e; c++) {\n                d = m[c - 1] - m[c];\n                if (d >= y) {\n                    y = d;\n                }\n                if (d >= 0) {\n                    x += d;\n                }\n            }\n            for (int c = 0; c < e - 1; c++) {\n                if (m[c] <= y) {\n                    z += m[c];\n                }\n                if (m[c] > y) {\n                    z += y;\n                }\n            }\n            out.printf(\"Case #%d: %d %d\\n\",b,x,z);\n        }\n        out.close();\n    }\n\n}"}
{"idx":"443","func":"class Mushroom {\n    public static void main(String[] args) throws IOException{\n        BufferedReader in = new BufferedReader(new FileReader(\"A-large (1).in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"submission.out\")));\n        int T = Integer.parseInt(in.readLine());\n        for(int i = 0; i < T; i++){\n            int ans1 = 0, ans2 = 0, N = Integer.parseInt(in.readLine()); int[] nums = new int[N], diff = new int[N-1];\n            StringTokenizer s = new StringTokenizer(in.readLine());\n            for(int j = 0; j < N; j++){nums[j] = Integer.parseInt(s.nextToken());}\n            for(int j = 0; j < N-1; j++)\n                if(nums[j+1] < nums[j])\n                    ans1 += nums[j]-nums[j+1];\n            for(int j = 0; j < N-1; j++)\n                diff[j] = nums[j] - nums[j+1];\n            int max = 0;\n            for(int j = 0; j < N-1; j++)\n                if(diff[j] > max)\n                    max = diff[j];\n            for(int j = 0; j < N-1; j++){\n                if(nums[j] < max){ans2 += nums[j];}\n                else{ans2 += max;}\n            }\n            out.println(\"Case #\" + (i + 1) + \": \" + ans1 + \" \" + ans2);\n        }\n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"444","func":"class A {\n    public static void main(String[] args) throws IOException,\n            FileNotFoundException {\n        String file = \"A-large\";\n\n        Scanner scan = new Scanner(new BufferedReader(new FileReader(file\n                + \".in\")));\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(file\n                + \".out\")));\n\n        int T = Integer.parseInt(scan.nextLine());\n        for (int t = 1; t <= T; t++) {\n            int N = Integer.parseInt(scan.nextLine());\n            String[] info = scan.nextLine().split(\" \");\n            long[] num = new long[N];\n            for (int i = 0; i < N; i++)\n                num[i] = Long.parseLong(info[i]);\n\n            long y = 0;\n            for (int i = 1; i < N; i++)\n                if (num[i] < num[i - 1])\n                    y += num[i - 1] - num[i];\n\n            long z = 0;\n            long max = 0;\n            for (int i = 1; i < N; i++)\n                if (num[i] <= num[i - 1])\n                    max = Math.max(max, num[i - 1] - num[i]);\n            for (int i = 1; i < N; i++)\n                z += Math.min(num[i - 1], max);\n\n            pw.println(\"Case #\" + t + \": \" + y + \" \" + z);\n        }\n\n        scan.close();\n        pw.close();\n    }\n\n}"}
{"idx":"445","func":"class A1{\n\n  public static void main(String[] args){\n    Scanner inp=new Scanner(System.in);\n    int t=inp.nextInt();\n    for(int i=0;i<t;i++){\n        int n=inp.nextInt();\n        int[] arr=new int[n];\n        for(int j=0;j<n;j++){\n            arr[j]=inp.nextInt();\n        }\n        int sum1=0;\n        int sum2=0;\n        for(int k=0;k<n-1;k++){\n            \n            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;\n            sum1+=y;\n        \n        }\n        int v=0;\n        for(int h=0;h<n-1;h++){\n            v=Math.max(v,arr[h]-arr[h+1]);\n        }\n        for(int d=0;d<n-1;d++){\n            int x=(arr[d]<=v)?arr[d]:v;\n            sum2+=x;\n        }\n\n        System.out.println(\"Case #\"+(i+1)+\": \"+sum1+\" \"+sum2);\n    }\n}\n}"}
{"idx":"446","func":"class MushroomMonster {\n    static {\n\n        try {\n            String input = \"A-large.in\";\n            String output = input.substring(0, input.lastIndexOf('.')) + \".out\";\n            System.setIn(new FileInputStream(input));\n            System.setOut(new PrintStream(new FileOutputStream(output), true));\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(0);\n        }\n\n    }\n\n    public static void main(String[] args) {\n        try (Scanner input = new Scanner(System.in)) {\n            int T = input.nextInt();\n            for (int t = 1; t <= T; t++) {\n                int N = input.nextInt();\n                int m[] = new int[N];\n                int x1 = 0, x2 = 0;\n                int offset = 0;\n                m[0] = input.nextInt();\n                for (int i = 1; i < N; i++) {\n                    m[i] = input.nextInt();\n                    if (m[i] < m[i - 1])\n                        x1 += m[i - 1] - m[i];\n                    offset = Math.max(m[i - 1] - m[i], offset);\n                }\n                if (offset > 0)\n                    for (int i = 0; i < N - 1; i++) {\n                        x2 += Math.min(m[i], offset);\n                    }\n                System.out.printf(\"Case #%d: %d %d\", t, x1, x2);\n                System.out.println();\n            }\n        }\n    }\n}"}
{"idx":"447","func":"class MushroomMonster {\n    public static void main(String[] args) throws IOException {\n        String inputFile = \"src\/MushroomMonster.in\";\n        String outputFile = \"src\/MushroomMonster.out\";\n        BufferedReader br = new BufferedReader(new FileReader(new File(inputFile)));\n        PrintWriter pw = new PrintWriter(new FileWriter(new File(outputFile)));\n        String line = br.readLine();\n        int N = Integer.parseInt(line);\n        int id = 1;\n        for (int i = 0; i < N; ++i) {\n            int D = Integer.parseInt(br.readLine());\n            String[] lineSplit = br.readLine().split(\" \");\n            int[] arr = new int[D];\n            for (int j = 0; j < D; ++j) {\n                arr[j] = (Integer.parseInt(lineSplit[j]));\n            }\n            int sum = 0;\n            for (int i1 = 1; i1 < arr.length; i1++) \n                if (arr[i1] < arr[i1-1]) sum += (arr[i1-1] - arr[i1]);\n            int sum1 = sum;\n            int diff = 0;\n            for (int i1 = 1; i1 < arr.length; ++i1)\n                if (arr[i1-1] - arr[i1] > diff) diff = (arr[i1-1] - arr[i1]);\n            System.out.println(diff);\n            int sum3 = 0;\n            for (int i2 = 1; i2 < arr.length; ++i2) {\n                int eat = (arr[i2-1] < diff? arr[i2-1] : diff);\n                sum3 += eat;\n            }\n            int sum2 = sum3;\n            pw.println(\"Case #\"+id+\": \"+sum1 + \" \" + sum2);\n            id++;\n        }\n        br.close();\n        pw.close();\n    }\n    \n}"}
{"idx":"448","func":"static void main(String[] args) throws FileNotFoundException\n   {\n      File f = new File(\"input1.txt\");\n      Scanner s = new Scanner(f);\n\n      int numTests = s.nextInt();\n\n      for(int i = 0; i < numTests; i++)\n      {\n         int steps = s.nextInt();\n         int[] hist = new int[steps];\n         int firstMethod = 0;\n         int maxEaten = 0;\n         int secondMethod = 0;\n\n         for(int j = 0; j < steps; j++)\n         {\n            hist[j] = s.nextInt();\n            if(j > 0)\n            {\n            if(hist[j] < hist[j-1])\n            {\n               firstMethod += hist[j - 1] - hist[j];\n               if(hist[j - 1] - hist[j] > maxEaten)\n               {\n                  maxEaten = hist[j-1] - hist[j];\n               }\n            }\n         }\n         }\n\n         for(int j = 0; j < steps - 1; j++)\n         {\n            if(hist[j] < maxEaten)\n            {\n               secondMethod += hist[j];\n            }\n            else\n            {\n               secondMethod += maxEaten;\n            }\n         }\n\n         System.out.println(\"Case #\" + (i+1) + \": \" + firstMethod + \" \" + secondMethod);\n      }\n\n\n   }\n}"}
{"idx":"449","func":"class cj_01 {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        int t=0;\n        while(t<n){\n            t++;\n            long result=0;\n            long result2=0;\n            long maxDis=0;\n            int n1=sc.nextInt();\n            long[] a=new long[n1];\n            for(int i=0;i<n1;i++)\n                a[i]=sc.nextInt();\n            for(int i=1;i<n1;i++)\n                if(a[i]<a[i-1])\n                    result+=a[i-1]-a[i];\n            for(int i=0;i<n1-1;i++)\n                maxDis=Math.max(a[i]-a[i+1],maxDis);\n            for(int i=0;i<n1-1;i++)\n                result2+=Math.min(maxDis, a[i]);\n            System.out.println(\"Case #\"+t+\": \"+result+\" \"+result2);\n        }\n    }\n\n}"}
{"idx":"450","func":"class First {\n\n\n    private static final String WORK_DIR = \"C:\\\\users\\\\eamudha\\\\codejam\\\\qualification\\\\first\\\\\";\n\n    public static void main(String[] args) throws Exception {\n        First first = new First();\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + \"input.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\n        int caseCnt = sc.nextInt();\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\n            System.out.println(\"Processing test case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n            int n = sc.nextInt();\n            int[] input = new int[n];\n            long min = 0;\n            long constant = 0;\n            int constantSpeed = Integer.MIN_VALUE;\n            input[0] = sc.nextInt();\n            for (int i = 1; i < n; i++) {\n                input[i] = sc.nextInt();\n                if (input[i] < input[i-1]) {\n                    int diff = input[i-1] - input[i];\n                    min += diff;\n                    if (diff > constantSpeed) {\n                        constantSpeed = diff;\n                    }\n                }\n            }\n            int validConstantSpeed = input[n-2] - input[n-1];\n            if (constantSpeed == Integer.MIN_VALUE) {\n                constantSpeed = input[n-2] - input[n-1];\n            } else {\n                if (validConstantSpeed > 0 && validConstantSpeed > constantSpeed) {\n                    constantSpeed = validConstantSpeed;\n                }\n            }\n            if (constantSpeed > 0) {\n                for (int i = 0; i < n-1; i++) {\n                    if (input[i] > constantSpeed) {\n                        constant += constantSpeed;\n                    } else {\n                        constant += input[i];\n                    }\n                }\n            }\n            pw.printf(\"%d %d\\n\", min, constant);\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"451","func":"class ProblemA {\n\n    public static void main(String[] args) throws FileNotFoundException {\n\/\/        Scanner sc = new Scanner(new File(\"A-practice.in\"));\n\/\/         Scanner sc = new Scanner(new File(\"A-small-attempt0.in\"));\n         Scanner sc = new Scanner(new File(\"A-large.in\"));\n        sc.useLocale(Locale.US);\n        int cases = sc.nextInt();\n\n        for (int i = 1; i <= cases; i++) {\n            System.out.format(Locale.US, \"Case #%d: \", i);\n            int N = sc.nextInt();\n            int[] m = new int[N];\n            int maxDiff = 0;\n            int eaten1 = 0;\n            for (int i1 = 0; i1 < m.length; i1++) {\n                m[i1] = sc.nextInt();\n                if (i1 > 0) {\n                    maxDiff = Math.max(maxDiff, m[i1 - 1] - m[i1]);\n                    if (m[i1 - 1] - m[i1] > 0) {\n                        eaten1 += m[i1 - 1] - m[i1];\n                    }\n                }\n            }\n            int eaten2 = 0;\n            for (int i2 = 0; i2 < m.length - 1; i2++) {\n                eaten2 += Math.min(maxDiff, m[i2]);\n            }\n            System.out.println(eaten1 + \" \" + eaten2);\n        }\n        sc.close();\n    }\n}"}
{"idx":"452","func":"class Round1A {\n\n    public static void main(String[] args) throws Exception {\n\n\/\/        Scanner scanner = new Scanner(System.in);\n        Scanner scanner = new Scanner(new FileReader(\"input.txt\"));\n        int numCases = scanner.nextInt();\n\n        for (int n = 0; n < numCases; n++) { \/\/ Loop through cases\n            int N = scanner.nextInt(); \/\/ Length of the current case\n\n            int eaten1 = 0, eaten2 = 0, prev = 0;\n            int[] numbers = new int[N];\n            int spr = 0; \/\/ ShroomsPerRound for method2\n            for (int i = 0; i < N; i++) { \/\/ Loop current case\n                int k = scanner.nextInt();\n                \/\/ Method One, 10 5 15 5\n                eaten1 += prev - k > 0 ? (prev - k) : 0;\n                \/\/ Fill array for method2\n                numbers[i] = k;\n                spr = prev - k > spr ? prev - k : spr;\n\n                prev = k;\n            }\n\n            \/\/ Method2\n            for (int i = 0; i < N - 1; i++) {\n                eaten2 += numbers[i] - spr >= 0 ? spr : numbers[i];\n            }\n\n            System.out.printf(\"Case #%d: %d %d\\n\", n + 1, eaten1, eaten2);\n        }\n\n\n        scanner.close();\n    }\n}"}
{"idx":"453","func":"class A {\n\n    public static void main(String [] args) throws IOException {\n        String inputFile = \"src\/A-large-0.in\";\n        Scanner in = new Scanner(new File(inputFile));\n        PrintStream out = new PrintStream(inputFile.substring(0, inputFile.length()-2)+\"out\");\n        int cases = in.nextInt();\n        for (int cs = 1; cs <= cases; cs++) {\n            int n = in.nextInt();\n            int [] m = new int[n];\n            for (int i = 0; i<n; i++) {\n                m[i] = in.nextInt();\n            }\n            long y = 0, z = 0, maxDiff = 0;\n            for (int i = 1; i<n; i++) {\n                int diff = Math.max(m[i-1] - m[i], 0);\n                y += diff;\n                maxDiff = Math.max(maxDiff, diff);\n            }\n            for (int i = 0; i<n-1; i++) {\n                z += Math.min(maxDiff, m[i]);\n            }\n            String ans = \"Case #\"+cs+\": \"+y+\" \"+z;\n            out.println(ans);\n            System.out.println(ans);\n        }\n        out.close();\n        in.close();\n    }\n}"}
{"idx":"454","func":"class DriverA {\n\n    public static void main(String[] args) throws IOException {\n        int numCases;\n        \n        File in = new File(\"A-large.in\");\n        FileWriter out = new FileWriter(\"output\");\n        BufferedReader reader = new BufferedReader(new FileReader(in));\n        BufferedWriter writer = new BufferedWriter(out);\n        \n        numCases = Integer.parseInt(reader.readLine());\n        \n        for (int i = 0; i < numCases; i++)\n        {\n            int numInter = Integer.parseInt(reader.readLine());\n            String[] intervals_String = reader.readLine().split(\" \");\n            int[] intervals = new int[numInter];\n            \n            for (int j = 0; j < numInter; j++)\n            {\n                intervals[j] = Integer.parseInt(intervals_String[j]);\n            }\n            int total = 0;\n            int[] operate = new int[intervals.length];\n            \/\/ reverse\n            for (int i1 = 1; i1 <= intervals.length; i1++)\n            {\n                operate[intervals.length - i1] = intervals[i1 - 1];\n            }\n            \n            for (int j = 0, k = 1; k < operate.length; j++, k++)\n            {\n                if(operate[j] < operate[k])\n                {\n                    total += (operate[k] - operate[j]);\n                }\n            }\n            \n            \/\/ All done here\n            \n            \/*\n            for (int j = 0; j < numInter; j++)\n            {\n                System.out.print(intervals[j] + \" \");\n            }\n            System.out.println();\n            *\/\n            \n            int x = total;\n            int total1 = 0;\n            int maxDif = 0;\n            \/\/ find max difference\n            for(int j = 0, k = 1; k < intervals.length; j++, k++)\n            {\n                if((intervals[j] - intervals[k]) > maxDif)\n                {\n                    maxDif = (intervals[j] - intervals[k]);\n                }\n            }\n            \n            for(int h = 0; h < intervals.length - 1; h++)\n            {\n                if(maxDif > intervals[h])\n                {\n                    total1 += intervals[h];\n                }\n                else\n                {\n                    total1 += maxDif;\n                }\n            }\n            int y = total1;\n            System.out.println(x + \" \" + y);\n            writer.write(\"Case #\" + (i + 1) + \": \" + x + \" \" + y + \"\\n\");\n        }\n        reader.close();\n        writer.close();\n    }\n}\n\n\n\/*\n while (keepGoing)\n        {\n            for (int k = 0; k < intervals.length; k++)\n            {\n                if\n            }\n            \n            if((intervals[intervals.length - 2] - intervals[intervals.length - 1]) % rate < 10 * rate)\n            {\n                for(int i = 0; i < intervals.length - 1; i++)\n                    if((10 * rate) > intervals[i])\n                    {\n                        total += intervals[i];\n                    }\n                    else\n                    {\n                        total += (rate * 10);\n                    }\n                keepGoing = false;\n            }\n            else\n            {\n                rate++;\n            }    \n        }\n        *\/"}
{"idx":"455","func":"class MushroomMonster{\n    static String filename = \"A-large\";    \/\/ io filnename here\n    static String inname = filename + \".in\";    \n    static String outname = filename + \".out\";  \n    static int n;\n    public static void main(String[] args){\n        try{\n            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));\n            \/\/Scanner in = new Scanner(System.in);\n            BufferedWriter out = new BufferedWriter(new FileWriter(outname));\n            int t = in.nextInt();\n            in.nextLine();\n            for (int cas = 1; cas <= t; cas++){\n                String ans = \"\";\n                int n = in.nextInt();\n                int[] m = new int[n];\n                for(int i = 0; i < n; i++) m[i] = in.nextInt();\n                int min1 = 0;\n                int min2 = 0;\n                for (int i = 0; i < n-1; i++)\n                    if (m[i]-m[i+1] > 0) min1 += m[i]-m[i+1];\n                int minrate = m[0] - m[1];\n                for (int i = 0; i < n-1; i++)\n                    if (m[i]-m[i+1] > minrate) minrate = m[i]-m[i+1];\n                for (int i = 0; i < n-1; i++)\n                    min2 += Math.min(minrate, m[i]);\n                \n                ans = min1 + \" \" + min2;\n                System.out.print(\"Case #\" + cas + \": \" + ans + \"\\n\");\n                out.write(\"Case #\" + cas + \": \" + ans + \"\\n\");\n            }\n            in.close();\n            out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"456","func":"class Mushrooms {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for (int i = 0; i < t; i++) {\n            \n            int n = sc.nextInt();\n            int[] ar = new int[n];\n            for(int j=0; j<n; j++){\n                ar[j] = sc.nextInt();\n            }\n            long sum = 0;\n            for(int i1=0; i1<ar.length-1;i1++){\n                if(ar[i1]>ar[i1+1]){\n                    sum += ar[i1]-ar[i1+1];\n                }\n            }\n            long c1 = sum;\n            int rate = 0;\n            for(int i2=0; i2<ar.length-1;i2++){\n                if(ar[i2]>ar[i2+1]){\n                    if(ar[i2]-ar[i2+1] > rate){\n                        rate = ar[i2]-ar[i2+1];\n                    }\n                }\n            }\n            \n            long sum1 = 0;\n            for(int i1=0; i1<ar.length-1;i1++){\n                    if(ar[i1] >= rate){\n                        sum1 += rate;\n                    } else {\n                        sum1 += ar[i1];\n                    }\n            }\n            long c2 = sum1;\n            \n            System.out.println(\"Case #\"+(i+1)+\": \"+c1+\" \"+c2);\n\n        }\n    }\n\n}"}
{"idx":"457","func":"class Main {\n    public static PrintWriter out = null;\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        FileReader fr = null;\n        try {\n            fr = new FileReader(\"test\");\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        BufferedReader br = new BufferedReader(fr);\n        Scanner in = new Scanner(br);\n\n        try {\n            out = new PrintWriter(\"output.txt\", \"UTF-8\");\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        int t = Integer.parseInt(in.nextLine());\n        \n        \n        for (int i = 0; i < t; i++) {\n            \/\/String[] dataR = in.nextLine().split(\" \");\n            \/\/TODO: Edit data for each case\n            \/\/===============================\n            int intervals= Integer.parseInt(in.nextLine());\n            String[] dataR = in.nextLine().split(\" \");\n            int[] data= new int[dataR.length];\n            for(int j=0;j<dataR.length;j++){\n                data[j]=Integer.parseInt(dataR[j]);\n            }\n            \n            \/\/===============================\n            out.print(\"Case #\" + (i + 1) + \": \");\n            \/\/ TODO Auto-generated method stub\n            int count1 =0;\n            for(int i3=1;i3<data.length;i3++){\n                if(data[i3-1]>data[i3]){\n                    count1+=data[i3-1]-data[i3];\n                }\n            }\n            out.print(count1+\" \");\n            int max=0;\n            int count=0;\n            for(int i1=1;i1<data.length;i1++){\n                if(data[i1-1]-data[i1]>max){\n                    max=data[i1-1]-data[i1];\n                }\n            }\n            count=max*(data.length-1);\n            for(int i2=0;i2<data.length-1;i2++){\n                if(data[i2]<max){\n                    count-=max-data[i2];\n                }\n            }\n            out.println(count);\n        }\n\n        out.close();\n    }\n\n\n\n\n}"}
{"idx":"458","func":"class Mushroom {\n\n    public static void main(String[] args) {\n            \n        Scanner input = new Scanner(System.in);\n        int T = input.nextInt();\n        for(int i = 1; i<= T; i++) {\n            int N = input.nextInt();\n            int[] m = new int[N];\n            for(int j = 0; j<N; j++) {\n                m[j] = input.nextInt();\n            }\n            long Meth1 = 0;\n            for(int k =0; k<N-1; k++) {\n                if(m[k]-m[k+1] > 0) {\n                    Meth1 += m[k]-m[k+1];\n                }\n            }\n            \n            long Meth2 = 0;\n            long constRate = m[N-2] - m[N-1];\n            \n            for(int l = 0; l<N-1; l++) {\n                if(m[l] <= constRate) {\n                    Meth2 += m[l];\n                }\n                else {\n                    Meth2 += constRate;\n                }\n            }\n            \n            System.out.printf(\"Case #%d: %d %d\\n\",i,Meth1,Meth2);\n            \n        }\n        input.close();\n    }\n\n}"}
{"idx":"459","func":"class MushroomMonster {\n\n    public static void main(String[] args) {\n        Scanner scanner = null;\n        try {\n            scanner = new Scanner(new File(\"input.txt\"));\n        } catch (FileNotFoundException e) {\n            System.out.println(\"Couldn't open input file.\\n\" + e.getMessage());\n            e.printStackTrace();\n        }\n        FileWriter writer = null;\n        try {\n            writer = new FileWriter(new File(\"output.txt\"));\n        } catch (IOException e) {\n            System.out.println(\"Couldn't open\/make output file.\"\n                    + e.getMessage());\n            e.printStackTrace();\n        }\n\n        int numTrials = scanner.nextInt();\n        for (int trial = 1; trial <= numTrials; trial++) {\n            try {\n                writer.write(\"Case #\" + trial + \": \");\n                int N = scanner.nextInt();\n                \n                int previous = scanner.nextInt();\n                int sum = 0;\n                int max = 0;\n                int[] values = new int[N];\n                values[0] = previous;\n                for (int i = 1; i < N; i++) {\n                    int current = scanner.nextInt();\n                    values[i] = current;\n                    int difference = previous - current;\n                    if (difference > 0) {\n                        max = Math.max(difference, max);\n                        sum += difference;\n                    }\n                    previous = current;\n                }\n                int sum2 = 0;\n                for (int i = 0; i < N-1; i++) {\n                    if (values[i] >= max)\n                        sum2 += max;\n                    else\n                        sum2 += values[i];\n                }\n                writer.write(sum + \" \" + sum2);\n                writer.write(\"\\n\");\n            } catch (IOException e) {\n                System.out.println(\"Error on trial #\" + trial + \"\\n\"\n                        + e.getMessage());\n                e.printStackTrace();\n            }\n        }\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        scanner.close();\n        System.out.println(\"Completed Trials!\");\n    }\n}"}
{"idx":"460","func":"class Solution\n{\n    static String filename = \"A-large\";\n    static Scanner input;\n\n    public static void main(String ... orange) throws Exception\n    {\n        File file = new File(filename + \".in\");\n        input = new Scanner(file);\n        PrintWriter writer = new PrintWriter(filename + \".out\", \"UTF-8\");\n\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++)\n        {\n            \/\/ Solve each test case\n            int N = input.nextInt();\n            int room[] = new int[N];\n            for (int i = 0; i < N; i++) {\n                room[i] = input.nextInt(); \n            }\n            \n            \/\/ Method 1\n            int eat1 = 0;\n            for (int i = 1; i < room.length; i++) {\n                if (room[i] < room[i-1]) {\n                    eat1 += room[i-1] - room[i];\n                }\n            }\n            \n            \/\/ Method 2\n            int eat2 = 0;\n            int fastestEatRate = 0;\n            for (int i = 1; i < room.length; i++) {\n                if (room[i-1] - room[i] > fastestEatRate) {\n                    fastestEatRate = room[i-1] - room[i];\n                }\n            }\n            \n            for (int i = 0; i < room.length-1; i++) {\n                if (room[i] < fastestEatRate) {\n                    eat2 += room[i];\n                } else {\n                    eat2 += fastestEatRate;\n                }\n            }\n            String solution = \"\" + eat1 + \" \" + eat2;\n            \n            writer.printf(\"Case #%d: %s\\n\", n + 1, solution);\n            System.out.printf(\"Case #%d: %s\\n\", n + 1, solution);\n        }\n        \n        writer.close();\n        input.close();\n    }\n}"}
{"idx":"461","func":"class A {\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        Scanner sc = new Scanner(new File(\"A-large.in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"out.txt\")));\n        \/\/Scanner sc = new Scanner(System.in);\n        \/\/Scanner sc = new Scanner(new File(\"a.txt\"));\n        int T  = sc.nextInt();\n        for (int i = 0; i < T; i++) {\n            int N = sc.nextInt();\n            int arr[] = new int [N];\n            int met1 = 0;\n            \n            float maxdif = 0;\n            for (int j = 0; j < N; j++) {\n                int n = sc.nextInt();\n                arr[j] = n;\n                \n                if(j != 0 && arr[j] < arr[j-1]){\n                    met1 += arr[j-1] - arr[j];\n                    if(arr[j-1] - arr[j] > maxdif){\n                        maxdif = arr[j-1] - arr[j];\n                    }\n                }\n            }\n            maxdif = maxdif\/10.0f;\n            int met2 = 0;\n            if(maxdif!=0){\n                for (int j = 0; j < arr.length-1; j++) {\n                    if(arr[j] < (maxdif*10)){\n                        met2 += arr[j];\n                    }else{\n                        met2 += maxdif*10;\n                    }\n                }\n            }\n            \n            System.out.println(\"Case #\" + (i+1) + \": \" + met1 + \" \" + met2);\n            bw.write(\"Case #\" + (i+1) + \": \" + met1 + \" \" + met2);\n            bw.newLine();\n            \n        }\n        bw.close();\n    }\n}"}
{"idx":"462","func":"class A {\n\n    public static void main(String[] args) {\n        A a = new A();\n        Scanner in = new Scanner(System.in);\n        int cases = Integer.parseInt(in.nextLine());\n        for (int a1=0; a1<cases; a1++) {\n            int num = Integer.parseInt(in.nextLine());\n            String[] split = in.nextLine().split(\" \");\n            int[] vals = new int[num];\n            for (int i=0; i<num; i++) {\n                vals[i] = Integer.parseInt(split[i]);\n            }\n            int first = 0;\n            int second = 0;\n            int rate = 0;\n            for (int i=0; i<num-1; i++) {\n                if (vals[i+1] < vals[i]) {\n                    first += vals[i] - vals[i+1];\n                    rate = Math.max(rate,vals[i] - vals[i+1]);\n                }\n            }\n            for (int i=0; i<num-1; i++) {\n                second += Math.min(vals[i],rate);\n            }\n            System.out.println(\"Case #\" + (a1+1) + \": \" + first + \" \" + second);\n        }\n    }\n}"}
{"idx":"463","func":"class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt();\n\n        for (int caseNum = 1;  caseNum <= t; caseNum++) {\n            int n = sc.nextInt();\n            int[] nums = new int[n];\n            for (int i = 0; i < n; i++) {\n                nums[i] = sc.nextInt();\n            }\n            int sum1 = 0;\n            int sum2 = 0;\n            int maxDiff = 0;\n\n            for (int i = 0; i < n - 1; i++) {\n                if (nums[i] > nums[i + 1]) {\n                    int diff = nums[i] - nums[i + 1];\n                    if (diff > maxDiff) { \n                        maxDiff = diff;\n                    }\n                    sum1 += diff;\n                }\n            }\n\n            for (int i = 0; i < n - 1; i++) {\n                if (nums[i] < maxDiff) {\n                    sum2 += nums[i];\n                }\n                else {\n                    sum2 += maxDiff;\n                }\n            }\n\n            System.out.printf(\"Case #%d: %d %d\\n\", caseNum, sum1, sum2);\n\n        }\n    }\n}"}
{"idx":"464","func":"class prob1 {\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(new FileReader(\"input\"));\n        PrintWriter out = new PrintWriter(new FileWriter(\"output\"));\n        \n        int cases = in.nextInt();\n        for (int a=0; a<cases; a++) {\n            int number = in.nextInt();\n            int mushrooms[] = new int[number];\n            int num1 = 0;\n            int maxRate = 0;\n\n            for (int b=0; b<number; b++) {\n                mushrooms[b] = in.nextInt();\n                if (b > 0) {\n                    if (mushrooms[b] < mushrooms[b-1]) {\n                        num1 = num1 + (mushrooms[b-1] - mushrooms[b]);\n                    }\n                    \n                    if ((mushrooms[b-1] - mushrooms[b]) > maxRate) {\n                        maxRate = (mushrooms[b-1] - mushrooms[b]);\n                    }\n                }\n            }\n            \n            int num2 = 0;\n            for (int b=0; b<number-1; b++) {\n                if (mushrooms[b] > maxRate) {\n                    num2 = num2 + maxRate;\n                } else {\n                    num2 = num2 + mushrooms[b];\n                }\n            }\n            \n            \/\/System.out.println(num2);\n            out.print(\"Case #\" + (a+1) + \": \" + num1 + \" \" + num2 + \"\\n\");\n            \n        }\n        \n        \/\/ template output:\n        \/\/ out.print(\"Case #\" + (a+1) + \": \" + time + \"\\n\");\n        \n        out.close();\n    }\n}"}
{"idx":"465","func":"class Mushroom {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n\n        ArrayList<String> TestCases;\n        \n        TestCases = new ArrayList<String>();\n        \n        String fileName = \"C:\\\\dev\\\\projects\\\\R1_Mushroom\\\\src\\\\gcj\\\\Example.txt\";\n        \n        try \n        {\n            InputStream in = new FileInputStream(new File(fileName));\n            Scanner reader = new Scanner(in);\n            \n\n            int cntTests = reader.nextInt();\n            \n            for (int i = 0; i<cntTests; i++) \n            {\n                int n = reader.nextInt();\n                ArrayList<Integer> moments = new ArrayList<Integer> ();\n                int max = -1;\n                for (int j = 0; j < n; j++) {\n                    moments.add(reader.nextInt());\n                    \n                }\n                \n                long total_eaten1 = 0;\n                int max_max = moments.get(0);\n                \n                for (int j = 0; j < n-1; j++) {\n                    int eaten_at_moment = moments.get(j) - moments.get(j+1);\n                    \n                    if (eaten_at_moment > 0) {\n                        total_eaten1 = total_eaten1 + eaten_at_moment;\n                    }\n                    \n                    if (eaten_at_moment > max) {\n                        max = eaten_at_moment;\n                    }\n                    \n                }\n                \n                \n                long total_eaten2 = 0;\n                \n                \/\/if (max > max_max) max = max_max;\n                \n                for (int j = 0; j < n-1; j++) {\n                    \n                    \n                    if (moments.get(j) < max) {\n                        total_eaten2 = total_eaten2 + moments.get(j);\n                    } else {\n                        total_eaten2 = total_eaten2 + max;\n                    }\n                    \n                    \n                }\n                \n                TestCases.add(total_eaten1 + \" \" + total_eaten2);\n            }\n             \n            reader.close();\n        } catch (Exception ex)    {\n            System.out.print(ex.getMessage());\n        }\n        \n        String outFileName = \"C:\\\\dev\\\\projects\\\\R1_Mushroom\\\\src\\\\gcj\\\\output.txt\";\n        try { \n        File file = new File(outFileName);\n        BufferedWriter output = new BufferedWriter(new FileWriter(file));\n        for (int i =0; i < TestCases.size(); i++) {\n            output.write(\"Case #\" + (i+1) + \": \" + TestCases.get(i) + \"\\r\\n\");\n        }\n        \n        output.close();\n        } catch ( Exception e ) {\n            e.printStackTrace();\n        }\n\n    }\n\n}"}
{"idx":"466","func":"class Mushroom {\n    public static void main(String[] args) {\n        Scanner S = new Scanner(System.in);\n        int numCases = S.nextInt();\n        \n        for(int i=1; i<=numCases; i++)\n        {\n            case1 = 0;\n            case2 = 0;\n            maxDiff = 0;\n            int n = S.nextInt();\n            int[] arr = new int[n];\n            for(int i1=0; i1<n; i1++){\n                arr[i1] = S.nextInt();\n            }\n            \n            for(int k=0; k<(n-1); k++){\n                int current = arr[k];\n                int next = arr[k+1];\n                maxDiff = Math.max(maxDiff,  current - next);\n                if(current > next){\n                    case1 += current - next;\n                }\n            }\n            \n            for(int k=0; k<(n-1); k++){\n                int current = arr[k];\n                if(current >= maxDiff){\n                    case2 += maxDiff;\n                }\n                else{\n                    case2 += current;\n                }\n            }\n            System.out.printf(\"Case #%d: %d %d\", i, case1, case2);\n            if(i!=numCases)\n                \n                System.out.println();\n        }\n    }\n    public static int case1;\n    public static int case2;\n    public static int maxDiff;\n \n \n}"}
{"idx":"467","func":"class mushroommonster {\n    private static final boolean useStandardInput = false;\n    private static final String filename = \"round1A\/A-large\";\n    private static final boolean log = false;\n\n    \n\n\n    \/\/ ----------------------------------------------------------------------------------------------------------------\n    \/\/ competition helper methods\n\n    private static BufferedReader reader;\n    private static BufferedWriter writer;\n\n    public static void main(String[] args) throws IOException {\n        if (useStandardInput) {\n            reader = new BufferedReader(new InputStreamReader(System.in));\n            writer = new BufferedWriter(new StringWriter());\n        } else {\n            reader = new BufferedReader(new FileReader(filename + \".in\"));\n            writer = new BufferedWriter(new FileWriter(filename + \".out\"));\n        }\n        final int T = Integer.parseInt(reader.readLine());\n        \n        for (int i = 1; i <= T; i++) {\n            int N = Integer.parseInt(reader.readLine());\n            String[] strings = reader.readLine().split(\"\\\\s\");\n            int L = strings.length;\n            int[] ints = new int[L];\n            for (int i3 = 0; i3 < L; i3++) {\n                ints[i3] = Integer.parseInt(strings[i3]);\n            }\n            int[] mushrooms = ints;\n            int N1 = mushrooms.length;\n            int total = 0;\n            for (int i1 = 1; i1 < N1; i1++) {\n                \/\/ if mushrooms decrease\n                if (mushrooms[i1] < mushrooms[i1-1]) {\n                    int diff = mushrooms[i1-1] - mushrooms[i1];\n                    total += diff;\n                }\n            }\n            int result1 = total;\n            int N2 = mushrooms.length;\n            int max = 0;\n            for (int i2 = 1; i2 < N2; i2++) {\n                \/\/ if mushrooms decrease\n                if (mushrooms[i2] < mushrooms[i2-1]) {\n                    int diff = mushrooms[i2-1] - mushrooms[i2];\n                    if (diff > max) max = diff;\n                }\n            }\n            \n            if (log) System.out.println(\"max = \" + max);\n            \n            int total1 = 0;\n            for (int i1 = 1; i1 < N2; i1++) {\n                int x = Math.min(mushrooms[i1-1], max);\n                total1 += x;\n            }\n            int result2 = total1;\n            String output = \"Case #\" + i + \": \" + String.valueOf(result1) + \" \" + String.valueOf(result2) + \"\\n\";\n            System.out.print(\"OUT: \" + output);\n            if (!useStandardInput) {\n                writer.write(output);\n            }\n        }\n        reader.close();\n        writer.close();\n        if (!useStandardInput)\n            System.out.println(\"FINISHED for file \" + filename);\n        System.exit(0);\n    }\n}"}
{"idx":"468","func":"static void main(String[] args) {\n    int t, c;\n    Scanner sc = new Scanner(System.in);\n    t = sc.nextInt();\n    for (c = 1; c <= t; c++) {\n      int n = sc.nextInt();\n      int[] s = new int[n];\n      for (int i = 0; i < n; i++) {\n        s[i] = sc.nextInt();\n      }\n      int total = 0, total1 = 0, maxDiff = 0;\n      for (int i = 1; i < n; i++) {\n        if (s[i-1] > s[i]) {\n          int diff = s[i-1] - s[i];\n          total += diff;\n          maxDiff = Math.max(diff, maxDiff);\n        }\n      }\n      for (int i = 0; i < n-1; i++) {\n        total1 += Math.min(maxDiff, s[i]);\n      }\n      System.out.printf(\"Case #%d: %d %d\\n\", c, total, total1);\n    }\n  }\n}"}
{"idx":"469","func":"class A {\n\n    public static void main(String[] args) throws Exception{\n        BufferedReader br = new BufferedReader(new FileReader(\"C:\/Users\/Nejc\/Desktop\/input.in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"C:\/Users\/Nejc\/Desktop\/output.txt\")));\n        byte T=Byte.parseByte(br.readLine());\n        for(byte t=0; t<T; t++){\n            int y=0;\n            int z=0;\n            int N=Integer.parseInt(br.readLine());\n            String[]split=br.readLine().split(\" \");\n            int[]m=new int[N];\n            for(int i=0; i<N; i++)\n                m[i]=Integer.parseInt(split[i]);\n            int max=0;\n            for(int i=1; i<N; i++){\n                if(m[i]<m[i-1]){\n                    int eaten = m[i-1]-m[i];\n                    y+=eaten;\n                    if(eaten>max)max=eaten;\n                }\n            }\n            for(int i=1; i<N; i++){\n                if(m[i-1]<max)z+=m[i-1];\n                else z+=max;\n            }\n            bw.write(\"Case #\"+(t+1)+\": \"+y+\" \"+z);\n            bw.newLine();\n        }\n        br.close();\n        bw.close();\n        System.out.println(\"done\");\n    }\n}"}
{"idx":"470","func":"class Q4 {\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        String prefix = \"Case #%d: %d %d\";\n        \n        String num = \"A\";\n\/\/        int time = 0;\n\/\/        String file = \"E:\\\\downloads\\\\\" + num + \"-small-attempt\" + time;\n\/\/        String file = \"C-small-attempt1\" + time;\n        \n\/\/        String file = \"E:\\\\downloads\\\\\" + num + \"-large\";\n        String file = num + \"-large\";\n        \n        BufferedReader br = new BufferedReader(new FileReader(file + \".in\"));\n        PrintWriter pw = new PrintWriter(file + \".out\");\n        \n        int t = Integer.parseInt(br.readLine());\n        for (int i = 1; i <= t; i++) {\n            int ans1 = 0;\n            int ans2 = 0;\n            int n = Integer.parseInt(br.readLine());\n            int[] datas = new int[n];\n            String[] raw = br.readLine().split(\" \");\n            for (int j = 0; j < datas.length; j++)\n                datas[j] = Integer.parseInt(raw[j]);\n\n            \/\/1\n            for (int j = 0; j < datas.length - 1; j++) {\n                int f = datas[j];\n                int s = datas[j + 1];\n                \n                if (s < f)\n                    ans1 += (f - s);\n            }\n            \n            \/\/2\n            int max = Integer.MIN_VALUE;\n            for (int j = 0; j < datas.length - 1; j++) {\n                int f = datas[j];\n                int s = datas[j + 1];\n                \n                int c = f - s;\n                if (c > max)\n                    max = c;\n            }\n            \n            for (int j = 0; j < datas.length - 1; j++) {\n                if (datas[j] < max)\n                    ans2 += datas[j];\n                else\n                    ans2 += max;\n            }\n            \n            pw.println(String.format(prefix, i, ans1, ans2));\n        }\n        \n        br.close();\n        pw.close();\n    }\n}"}
{"idx":"471","func":"class MushroomMonster {\n    static int c;\n\n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new FileReader(\"in.in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"out.out\"));\n        int t = Integer.parseInt(br.readLine());\n        for(c = 1; c <= t; c++){\n            long len = Integer.parseInt(br.readLine());\n            \/\/ System.out.println(\"len\" + len);\n            String line = br.readLine();\n            String[] fields = line.split(\" \");\n            long prev = Integer.parseInt(fields[0]);\n            long meth1 = 0;\n            long meth2 = 0;\n            long rate = 0;\n            for(int i = 1; i < len; i++){\n                long curr = Integer.parseInt(fields[i]);\n                if(prev > curr){\n                    meth1 += (prev - curr);\n                }\n                if(prev - rate > curr){\n                    rate = prev - curr;\n                }\n                \/\/ System.out.println(rate);\n                prev = curr;\n            }\n            meth2 = rate * (len - 1);\n            for(int i = 0; i < len - 1; i++){\n                int num = Integer.parseInt(fields[i]);\n                if(num - rate < 0){\n                    meth2 += num - rate;\n                }\n                \/\/ System.out.println(num - rate);\n            }\n            bw.write(\"Case #\" + c + \": \" + meth1 + \" \" + meth2 + \"\\n\");\n        }\n        br.close();\n        bw.close();\n    }\n\n\n}"}
{"idx":"472","func":"class A\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int test = 1, cases = Integer.parseInt(sc.nextLine());\n\n        ArrayList<Integer> mushrooms = new ArrayList<Integer>();\n\n        int times;\n        int last;\n        int curr;\n\n        int minEaten, minRate, rateEaten;\n\n        int i;\n\n        while(test <= cases)\n        {\n            mushrooms.clear();\n\n            times = sc.nextInt();\n\n            last = sc.nextInt();\n            mushrooms.add(last);\n\n            minEaten = 0;\n            minRate = 0;\n\n            for(i = 1; i < times; i++)\n            {\n                curr = sc.nextInt();\n                mushrooms.add(curr);\n\n                if(curr < last)\n                {\n                    minEaten += last - curr;\n                    minRate = Math.max(last - curr, minRate);\n                }\n\n                last = curr;\n            }\n\n            rateEaten = 0;\n\n            for(i = 0; i < mushrooms.size() - 1; i++)\n            {\n                curr = mushrooms.get(i);\n\n                if(minRate > curr)\n                    rateEaten += curr;\n                else rateEaten += minRate;\n            }\n\n            System.out.println(\"Case #\" + test + \": \" + minEaten + \" \" + rateEaten);\n\n            test++;\n        }\n    }\n}"}
{"idx":"473","func":"static void main(String[] args) throws Exception {\n        BufferedReader in = new BufferedReader(new FileReader(args[0]));\n        PrintWriter out = new PrintWriter(args[1]);\n\n        int numberOfCases = Integer.parseInt(in.readLine());\n        for (int caseNumber = 1; caseNumber <= numberOfCases; caseNumber++) {\n            int numIntervals = Integer.parseInt(in.readLine());\n            String[] intervals = in.readLine().split(\" \");\n\n            int firstComp = 0;\n            int secondComp = 0;\n            int minRate = 0;\n\n            int lastInterval = Integer.parseInt(intervals[0]);\n\n            for (int i = 1; i < numIntervals; i++) {\n                int thisInterval = Integer.parseInt(intervals[i]);\n                int drop = lastInterval - thisInterval;\n                if (drop > 0) firstComp += drop;\n                minRate = Math.max(minRate, drop);\n                lastInterval = thisInterval;\n             }\n\n            System.out.println(\"Min: \" + minRate);\n\n            for (int i = 0; i < numIntervals-1; i++) {\n                int interval = Integer.parseInt(intervals[i]);\n                int eaten = interval - Math.max(0, interval - minRate);\n                System.out.println(eaten);\n                secondComp += eaten;\n            }\n\n            out.println(String.format(\"Case #%d: %d %d\", caseNumber, firstComp, secondComp));\n        }\n\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"474","func":"class Mushroom\n{\n    public static void main(String[] args)  throws IOException\n    {\n        Mushroom x = new Mushroom();\n        \/\/Scanner f = new Scanner(new File(\"A-sample.in\"));\n        \/\/Scanner f = new Scanner(new File(\"A-small.in\"));\n        Scanner f = new Scanner(new File(\"A-large.in\"));\n        int[] samples;\n        int numCases = f.nextInt();\n        for(int i=0; i<numCases; i++)\n        {\n            int ans1 = 0;\n            int ans2 = 0;\n            int numSamples = f.nextInt();\n            samples = new int[numSamples];\n            for(int j=0; j<numSamples; j++)\n            {\n                samples[j] = f.nextInt();\n            }\n            \n            \/\/ method 1\n            \/\/ find decrease between time samples & accumulate\n            for(int a1=0; a1<numSamples-1; a1++)\n            {\n                int temp = samples[a1] - samples[a1+1];\n                ans1 += (temp < 0 ? 0 : temp);\n            }\n            \n            \/\/ method 2\n            \/\/ find max delta between sample amounts\n            int max = 0;\n            for(int a2=0; a2<numSamples-1; a2++)\n            {\n                int temp = samples[a2] - samples[a2+1];\n                max = Integer.max(temp, max);\n            }\n            \/\/ accumulate smaller of max delta and current num on plate\n            for(int a2=0; a2<numSamples-1; a2++)\n            {\n                int amtThisTime = Integer.min(samples[a2], max);\n                ans2 += amtThisTime;\n            }\n            \n            System.out.printf(\"Case #%d: %d %d\\n\", i+1, ans1, ans2);\n        }\n    }\n\n    public Mushroom()\n    {\n    }\n}"}
{"idx":"475","func":"class Mushrooms  {\n  public static void main(String[] args) throws IOException {\n    BufferedReader br = new BufferedReader(new FileReader(\n        \"A-large.in.txt\"));\n    File out = new File(\"large.out.txt\");\n    PrintWriter pw = new PrintWriter(out);\n\n    int cases = Integer.parseInt(br.readLine());\n\n    for (int tt = 0; tt < cases; tt++) {\n      int n = Integer.parseInt(br.readLine());\n      String[] s = br.readLine().split(\" \");\n      int[] q = new int[n];\n\n      for (int i = 0; i < n; i++) {\n        q[i] = Integer.parseInt(s[i]);\n      }\n\n\n      int m1 = 0;\n      for (int i = 0; i < n - 1; i++) {\n        int k = q[i + 1] - q[i];\n        if (k < 0) m1 += -k;\n      }\n\n      int m2 = Integer.MAX_VALUE;\n      for (int rate = 0; rate < 10001; rate++) {\n        int count = 0;\n        boolean good = true;\n        int cons = rate;\n        for (int i = 0; i < n - 1; i++) {\n          \/\/cons = rate * 10 > q[i] ? q[i] : rate * 10;\n          if (q[i] - cons > q[i + 1]) {\n            good = false;\n            break;\n          } else {\n            count += q[i] - cons >= 0 ? cons : q[i];\n          }\n        }\n        if (good) {\n          m2 = count;\n          break;\n        }\n\n      }\n\n      pw.println(\"Case #\" + (tt + 1) + \": \" + m1 + \" \" + m2);\n    }\n    br.close();\n    pw.close();\n  }\n}"}
{"idx":"476","func":"class A {\n\n    public static void main(String[] args) throws IOException {\n    BufferedReader inFile = new BufferedReader (new FileReader (\"A-large.in\"));\n    PrintWriter outFile = new PrintWriter (new File (\"a.out\"));\n    StringTokenizer tok = new StringTokenizer(inFile.readLine());\n    int T = Integer.parseInt(tok.nextToken());\n    for (int t = 1 ; t <= T; t ++){\n        tok = new StringTokenizer(inFile.readLine());\n        int N = Integer.parseInt(tok.nextToken());\n        \n        tok = new StringTokenizer(inFile.readLine());\n        int [] m = new int [N];\n        for (int i = 0; i < N; i++){\n        m[i] = Integer.parseInt(tok.nextToken());\n        }\n        \n        int y = 0;\n        for (int i = 1; i < N; i++){\n        if (m[i] < m[i-1]){\n            y += m[i - 1] - m[i];\n        }\n        }\n        \n        int z = 0;\n        int r = 0;\n        for (int i = 1; i < N; i++){\n        if (m[i] < m[i-1]){\n            if (m[i-1] - m[i] > r){\n            r = m[i-1] - m[i];\n            }\n        }\n        }\n        \n        for (int i = 0; i < N - 1; i++){\n        if (m[i] > r){\n            z += r;\n        } else {\n            z += m[i];\n        }\n        }\n        \n        outFile.printf(\"Case #%d: %d %d %n\",t, y, z);\n    }\n    inFile.close();\n    outFile.close();\n    }\n\n}"}
{"idx":"477","func":"class A {\n    public static void main(String[] args) {\n        int testCases;\n\n        Scanner sc = new Scanner(System.in);\n        testCases = sc.nextInt();\n\n        for (int j = 1; j <= testCases; j++) {\n            int n;\n            n = sc.nextInt();\n            Integer[] a = new Integer[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = sc.nextInt();\n            }\n            int q = 0, p = 0, mx = 0;\n            for (int i = 1; i < n; i++) {\n                if (a[i] - a[i - 1] < 0) {\n                    q += (a[i - 1] - a[i]);\n                }\n\n                mx = Math.max(mx, a[i - 1] - a[i]);\n            }\n            for (int i = 0; i < n - 1; i++) {\n                if (a[i] >= mx) p += mx;\n                else p += a[i];\n            }\n            System.out.println(\"Case #\" + j + \": \" + q + \" \" + p);\n        }\n    }\n}"}
{"idx":"478","func":"static int[] ans = new int[10000002];\n\n    public static void main(String[] args) throws Exception {\n        Arrays.fill(ans, -1);\n        ans[0] = 1;\n        ans[1] = 1;\n        for (int i1 = 1; i1 <= 10000000; i1++) {\n            if (ans[i1 + 1] == -1)\n                ans[i1 + 1] = ans[i1] + 1;\n            else{\n                ans[i1+1] = Math.min(ans[i1+1] , ans[i1]+1);\n            }\n            int n = i1;\n            int reverse = 0;\n            while (n != 0) {\n                reverse = reverse * 10;\n                reverse = reverse + n % 10;\n                n = n \/ 10;\n            }\n            int rev = reverse;\n            if (rev <= 10000000) {\n                if (ans[rev] == -1) {\n                    ans[rev] = ans[i1] + 1;\n                } else {\n                    if(ans[i1] < ans[rev])\n                        System.out.println(i1 + \": \" + ans[i1] + \"  \" + ans[rev]);\n                    ans[rev] = Math.min(ans[i1] + 1, ans[rev]);\n                }\n            }\n        }\n        System.out.println(\"end\");\n        PrintWriter printer = new PrintWriter(\"ans.txt\", \"UTF-8\");\n        Scanner sc = new Scanner(System.in);\n        int tc = sc.nextInt();\n        for (int i = 1; i <= tc; i++) {\n            int input = sc.nextInt();\n            printer.println(\"Case #\" + i + \": \" + ans[input]);\n        }\n        printer.close();\n        sc.close();\n    }\n\n}"}
{"idx":"479","func":"class CounterCulture {\n    public static void main(String[] args) throws IOException {\n        String fileName;\n\n\/\/        fileName = \"test.in\";\n        fileName = \"A-small-attempt2.in\";\n        int[] d1 = new int[2000001];\n        \n        d1[1] = 1;\n        Deque<Integer> deque = new ArrayDeque<>();\n        deque.add(1);\n        \n        while (!deque.isEmpty()) {\n            Integer num = deque.pollFirst();\n            int next = num + 1;\n        \n            if (next < d1.length && d1[next] == 0 ) {\n                d1[next] = d1[num] + 1;\n                deque.addLast(next);\n            }\n            int j = num;\n            while (j % 10 == 0) {\n                j = j \/ 10;\n            }\n            StringBuilder reverse1 = new StringBuilder(Integer.toString(j)).reverse();\n            int r1 = Integer.parseInt(reverse1.toString());\n        \n            int reverse = r1;\n            if (reverse >= d1.length) {\n                continue;\n            }\n        \n            if (d1[reverse] == 0) {\n                d1[reverse] = d1[num] + 1;\n                deque.addLast(reverse);\n            }\n        }\n\n        int[] d = d1;\n\n        try (BufferedReader r = new BufferedReader(new FileReader(fileName));\n             BufferedWriter w = new BufferedWriter(new FileWriter(fileName.replace(\".in\", \".out\")))) {\n            Scanner sc = new Scanner(r);\n            int T = sc.nextInt();\n            long startTotal = System.currentTimeMillis();\n            for (int i = 0; i < T; i++) {\n                int n = sc.nextInt();\n                String calc = \"\" + d[n];\n                w.write(\"Case #\" + (i + 1) + \": \" + calc + \"\\n\");\n                w.flush();\n                System.out.println(\"res:\" + calc);\n                System.out.println(\"case \" + +(i + 1) + \". time: \" + (System.currentTimeMillis() - startTotal));\n            }\n            System.out.println(\"Total time: \" + (System.currentTimeMillis() - startTotal));\n        }\n\n    }\n\n\n}"}
{"idx":"480","func":"class CounterCulture {\n    public static void main(String[] args){\n        File a = new File(\"A-small-attempt2 (1).in\");\n        Scanner input = null;\n        try {\n            input = new Scanner(a);\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \/\/Scanner input = new Scanner(System.in);\n        \n        File b = new File(\"A-output.txt\");\n        FileWriter fw = null;\n        try {\n            fw = new FileWriter(b);\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        int number = input.nextInt();\n        int cases = number;\n        int[] answers = new int[1000001];\n        \n        int index = 1;\n        int count = 1;\n        answers[1] = 1;\n        while(index < answers.length){\n            int toBeReversed = index;\n            int reversedCount = 0;\n            while (toBeReversed != 0) {\n                reversedCount = reversedCount * 10 + toBeReversed  % 10;\n                toBeReversed  = toBeReversed  \/ 10;   \n            }\n            index++;\n            count++;\n            if(reversedCount > index && reversedCount < answers.length){\n                answers[reversedCount] = count;\n            }\n            if(index < answers.length){\n                if (count < answers[index] || answers[index] == 0){\n                    answers[index] = count;\n                } else {\n                    count = answers[index];\n                }\n            } \n        }\n        \n        while(number > 0){\n            int n = input.nextInt();\n            int result = answers[n];\n            \n            try {\n                fw.write(\"Case #\" + (cases - number + 1) + \": \" + result + \"\\n\");\n            } catch (IOException e) {\n                \/\/ TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            number--;\n        }\n        \n        try {\n            fw.close();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"481","func":"class Problem1 {\n    public static void main(String[] args) {\n        try {\n            Scanner scanner = new Scanner(new FileReader(\"A-small-attempt1.in\"));\n            int T = scanner.nextInt();\n            long[] N = new long[T];\n            for(int i=0; i<T; i++) {\n                N[i] = scanner.nextLong();\n            }  \n            PrintWriter out = new PrintWriter(new FileWriter(\"output2.txt\"));    \n            for(int i=0; i<T; i++) {\n                long target = N[i];\n                HashMap<Long, Long> map = new HashMap<Long, Long>();\n                LinkedList<Long> list = new LinkedList<Long>();\n                list.add((long)1);\n                map.put((long)1, (long)1);\n                while(!map.containsKey(target)) {\n                    Long current = list.poll();\n                    long temp = current;\n                    long current1 = 0;\n                    while(temp > 0) {\n                        long digit = temp%10;\n                        temp = temp\/10;\n                        current1 = current1 * 10 + digit;\n                    }\n                    Long next = current1;\n                    if(!map.containsKey(next) && next <= target) {\n                        list.add(next);\n                        map.put(next, map.get(current)+1);\n                    }\n                    if(!map.containsKey(current+1)) {\n                        list.add(current+1);\n                        map.put(current+1, map.get(current)+1);\n                    }\n                }           \n                out.println(\"Case #\" + (i+1) + \": \" + map.get(target));\n            }            \n            out.close();           \n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"482","func":"class A {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        \n        \/\/ BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n        \/\/ int numCases = Integer.parseInt(r.readLine());\n        \n        Scanner s = new Scanner(System.in);\n        int numCases = s.nextInt();\n        \n        int max = 1000003;\n        long[] dp = new long[max];\n        dp[1] = 1;\n        dp[2] = 2;\n        for(int i = 3; i < max; ++i)\n        {\n            long first = dp[i-1] + 1;\n            char[] test = String.valueOf((long) i).toCharArray();\n            long res = 0;\n            long mult = 1;\n            for(int i1 = 0; i1 < test.length; ++i1)\n            {\n                int tmp = Integer.valueOf(String.valueOf(test[i1]));\n                if(i1 == test.length-1 && tmp == 0)\n                {\n                    \/\/ es darf kein digit verloren gehen...\n                    res += 10000000000L;\n                }\n                res += tmp * mult;\n                mult *= 10;\n            }\n            long index = res;\n            long second = 0;\n            if(index >= 1 && index < i)\n            {\n                second = dp[(int)index]+1;\n            }\n            if(second > 1 && second < first)\n            {\n                dp[i] = second;\n            }else\n            {\n                dp[i] = first;\n            }\n        }\n        \n        \n        for(int numC = 0; numC < numCases; ++numC)\n        {\n            \n            long n = s.nextLong();\n            \n            \n            System.out.print(\"Case #\");\n            System.out.print(numC+1);\n            System.out.print(\": \");\n            System.out.println(dp[(int)n]);\n        }\n\n    }\n}"}
{"idx":"483","func":"class Main {\n    public static void main(String[] args) throws IOException {\n        Main r = new Main();\n        \/\/        if (new File(\"input.txt\").exists())\n        \/\/            in = new BufferedReader(new FileReader(\"input.txt\"));\n        \/\/        else\n                    r.in = new BufferedReader(new InputStreamReader(System.in));\n                r.out = new PrintWriter(System.out);\n        \/\/        out = new PrintWriter(\"output.txt\");\n                int m = 17;\n                        long x[] = new long[m];\n                        long d[] = new long[m];\n                        d[0] = 1;\n                        for (int i = 1; i < m; i++) {\n                            d[i] = d[i - 1] * 10;\n                        }\n                        x[1] = 1;\n                        x[2] = 11;\n                        for (int i = 3; i < m; i++) {\n                            x[i] = x[i - 1] + (d[(i - 1) \/ 2] - 2) + \n                                    (d[(i - 1) \/ 2 +\n                                       (((i - 1) % 2 == 0) ? 0 : 1)] - 2) + 3;\n                \/\/            System.err.println(x[i]);\n                        }\n                        \n                        int T = Integer.parseInt(r.nextToken());\n                        \n                        \n                        for (int t = 0; t < T; t++) {\n                            \n                            long n = Long.parseLong(r.nextToken());\n                            \n                            int u = 1;\n                            while (d[u] < n)\n                                u++;\n                \/\/            System.err.println(u + \" \" + d[u]);\n                            long ans = x[u];\n                            if (n < 12)\n                                ans = n;\n                            else if (n == d[u])\n                                ans = x[u + 1] - 1;\n                            else {\n                                String s = Long.toString(n);\n                                boolean o = false;\n                                if (s.charAt(s.length() - 1) == '0') {\n                                    s = Long.toString(n - 1);\n                                    o = true;\n                                }\n                                \n                                String k = s.substring(0, s.length() \/ 2);\n                                String v = s.substring(s.length() \/ 2, s.length());\n                                char c[] = k.toCharArray();\n                                for (int i = 0; i < c.length \/ 2; i++) {\n                                    char y = c[i];\n                                    c[i] = c[c.length - i - 1];\n                                    c[c.length - i - 1] = y;\n                                }\n                                long l = Long.parseLong(new String(c));\n                                long r1 = Long.parseLong(v);\n                \/\/                System.err.println(ans + \" \" + l + \" \" + r);\n                                ans += r1 - 1;\n                                if (l > 1)\n                                    ans += l;\n                                if (o) \n                                    ans++;\n                            }\n                            \n                            r.out.println(\"Case #\" + (t + 1) + \": \" + ans);\n                        }\n                r.in.close();\n                r.out.close();        \n    }\n\n    BufferedReader in;\n    PrintWriter out;\n    StringTokenizer st = new StringTokenizer(\"\");\n\n    String nextToken() throws IOException {\n        while (!st.hasMoreTokens())\n            st = new StringTokenizer(in.readLine());\n        return st.nextToken();\n    }\n}"}
{"idx":"484","func":"class CodeJam {\n\n    Scanner in;\n    PrintWriter out;\n\n    \n    static private final String path = \"C:\\\\jam\\\\1B\\\\\";\n    static private final String problem = \"A\";\n    static private final String tests = \"A-small\";\n    \n\n    public static void main(String[] args) {\n        CodeJam r = new CodeJam();\n        try {\n                    r.in = new Scanner(new FileReader(CodeJam.path + CodeJam.problem + \"\\\\\" + CodeJam.tests + \".in\"));\n                    r.out = new PrintWriter(CodeJam.path + CodeJam.problem + \"\\\\\" + CodeJam.tests + \".out\");\n                } catch (IOException e) {\n                    throw new Error(e);\n                    \n        \/\/            in = new Scanner(System.in);\n        \/\/            out = new PrintWriter(System.out);\n        \/\/            out.println(\">\");\n        \/\/            out.flush();\n                }\n                try {\n                    int n = r.in.nextInt();\n                    for (int test = 1; test <= n; test++) {\n                        r.out.print(\"Case #\" + test + \": \");\n                        int n1 = r.in.nextInt();\n                        int ar[] = new int[1 + n1];\n                        ar[1] = 1;\n                        for (int i = 2; i <= n1; i++) {\n                            ar[i] = ar[i - 1] + 1;\n                            StringBuilder s = new StringBuilder(i + \"\");\n                            int rev = Integer.parseInt(s.reverse().toString());\n                            int len = (rev + \"\").length();\n                            int len2 = (i + \"\").length();\n                            if (len == len2 && rev < i) {\n                                ar[i] = Math.min(ar[i], ar[rev] + 1);\n                            }\n                        }\n                        r.out.println(ar[n1]);\n                        r.out.flush();\n                    }\n                } finally {\n                    r.out.close();\n                }\n    }\n}"}
{"idx":"485","func":"static void main(String args[]) {\n        Scanner in = null;\n        try {\n            in = new Scanner(new FileInputStream(\"input.txt\"));\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        try {\n            System.setOut(new PrintStream(\"output.txt\"));\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        int ar[] = new int[1000003];\n        ar[1] = 1;\n        for (int i = 2; i <= 1000000; i++) {\n            if (ar[i] > 0) {\n                ar[i] = Math.min(ar[i], ar[i - 1] + 1);\n            } else {\n                ar[i] = ar[i - 1] + 1;\n            }\n            int x = i;\n            int r = 0;\n            while (x > 0) {\n                r *= 10;\n                r += x % 10;\n                x \/= 10;\n            }\n            if (r <= 1000000) {\n                if (ar[r] == 0) {\n                    ar[r] = ar[i] + 1;\n                } else {\n                    ar[r] = Math.min(ar[r], ar[i] + 1);\n                }\n            }\n        }\n        int T = in.nextInt(); \/\/ the number of cells on the X axis\n        for (int t = 1; t <= T; t++) {\n            in.nextLine();\n            int n = in.nextInt();\n            \n            \n            System.out.println(\"Case #\" + t + \": \" + ar[n]);\n            \n        }\n        \n        \n    }\n \n}"}
{"idx":"486","func":"class A {\n\n    public static int N;\n    public static int[] dp1 = new int[1000010];\n    public static void main(String[] args) {\n        \n        Scanner sc = new Scanner(System.in);\n        int testCases = sc.nextInt();\n        \n        for(int i=0;i<=1000005;i++){\n            \n            if(i <= 20){\n                dp1[i] = i;\n                continue;\n            }\n            dp1[i] = -1;\n        }\n        \n        for(int n=21;n<1000002;n++){\n            \n            if(n % 10 == 0){\n                dp1[n] = dp1[n-1] + 1;\n                continue;\n            }\n            \n            int reverse = 0;\n            int n1 = n;\n            while( n1 != 0 )\n            {\n                  reverse = reverse * 10;\n                  reverse = reverse + n1%10;\n                  n1 = n1\/10;\n            }\n\n            if(reverse < n ){\n                dp1[n] = Math.min(dp1[n-1]+1, dp1[reverse]+1);\n            }else{\n                dp1[n] = dp1[n-1] + 1;\n            }\n            \n        }\n        \n        for(int test=1;test<=testCases;test++){\n            \n            N = sc.nextInt();\n            \n            System.out.println(\"Case #\"+test+\": \"+dp1[N]);\n        }\n\n    }\n\n\/*    public static int dp(int a){\n        \n        if(a == N){\n            return 0;\n        }\n        \n        if(dp1[a] == -1){\n            \n            int reverse = 0;\n            int n = a;\n            while( n != 0 )\n            {\n                  reverse = reverse * 10;\n                  reverse = reverse + n%10;\n                  n = n\/10;\n            }\n            \n            if(reverse <= N && reverse > a){\n                dp1[a] = Math.min(dp(a+1) + 1 , dp(reverse) + 1);\n            }else{\n                dp1[a] = (dp(a+1) + 1);\n            }\n            \n        }\n        \n        return dp1[a];\n    }\n*\/    \n}"}
{"idx":"487","func":"class GoogleCodeJam {\n    public static void main(String[] args) {\n        Scanner input = null;\n        \/\/MagicTrick[] puzzles;\n        \/\/CookieClickerAlpha[] puzzles;\n        CounterCulture[] puzzles;\n        try {\n            input = new Scanner(new FileInputStream(\"input.in\"));\n            \/\/puzzles = MagicTrick.readFile(input);\n            \/\/puzzles = CookieClickerAlpha.readFile(input);\n            puzzles = CounterCulture.readFile(input);\n            input.close();\n        }\n        catch(Exception e) {\n            System.out.println(\"hi\");\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }\n        \n        String[] results = new String[puzzles.length];\n        for(int i = 0; i < puzzles.length; ++i) {            \n            results[i] = \"Case #\" + (int)(i + 1) + \": \" + puzzles[i].solve();\n            System.out.println(\"Case #\" + (int)(i + 1) + \" done\");\n        }        \n        \n        PrintWriter output = null;\n        try {\n            output = new PrintWriter(new FileOutputStream(\"output.txt\"));\n            for(int i = 0; i < results.length; ++i) {\n                output.println(results[i]);\n            }\n            output.close();\n        }\n        catch(Exception e) {\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }\n        \n        \/*PrintWriter output = null;\n        try {\n            output = new PrintWriter(new FileOutputStream(\"output.txt\"));\n            for(int i = 0; i < puzzles.length; ++i) {\n                output.println(\"Case #\" + (int)(i + 1) + \":\");\n                \n                String[] ans = puzzles[i].solve();\n                for(int j = 0; j < ans.length; ++j) {\n                    output.println(ans[j]);\n                }\n                \n                System.out.println(\"Case #\" + (int)(i + 1) + \" done\");\n            }\n            output.close();\n        }\n        catch(Exception e) {\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }*\/\n    }\n}"}
{"idx":"488","func":"class CounterCulture {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        \/\/ int t = in.nextInt();\n        \/\/ for (int _ = 1; _ <= t; _++) {\n        \/\/ long n = in.nextLong();\n        \/\/ int r = 1;\n        \/\/ while (n > 1) {\n        \/\/ long temp = Long.parseLong(new StringBuffer(\"\" + n).reverse()\n        \/\/ .toString());\n        \/\/ r++;\n        \/\/ if (temp < n && n % 10 != 0)\n        \/\/ n = temp;\n        \/\/ else\n        \/\/ n--;\n        \/\/ }\n        \/\/ System.out.println(\"Case #\" + _ + \": \" + r);\n        \/\/ }\n        int MAX = 1000001;\n        LinkedList<Integer>[] E = new LinkedList[MAX];\n        for (int i = 1; i < MAX; i++) {\n            E[i] = new LinkedList<Integer>();\n            E[i].add(i + 1);\n            int temp = Integer.parseInt(new StringBuffer(\"\" + i).reverse()\n                    .toString());\n            if (i % 10 != 0)\n                E[i].add(temp);\n        }\n        Queue<Integer> Q = new LinkedList<Integer>();\n        int[] r = new int[MAX];\n        boolean[] visited = new boolean[MAX];\n        Q.add(1);\n        visited[1] = true;\n        r[1] = 1;\n        while (!Q.isEmpty()) {\n            int temp = Q.poll();\n            for (int x : E[temp])\n                if (x < MAX && !visited[x]) {\n                    visited[x] = true;\n                    r[x] = r[temp] + 1;\n                    Q.add(x);\n                }\n        }\n        int t = in.nextInt();\n        for (int _ = 1; _ <= t; _++) {\n            int n = in.nextInt();\n            System.out.println(\"Case #\" + _ + \": \" + r[n]);\n        }\n    }\n}"}
{"idx":"489","func":"class ProblemA {\n    public static void main(String[] args) {\n        for(int i=1; i<=11; i++) {\n            dp[i] = i;\n        }\n        \n        \/\/actual dp\n        for(int i=1; i<dp.length - 1; i++) {\n            \/\/fill in the one ahead\n            if(dp[i+1] == 0 || dp[i+1] > dp[i] + 1)\n                dp[i+1] = dp[i] + 1;\n            \n            \/\/and the one reversed if needed\n            char[] number = Integer.toString(i).toCharArray();\n            for(int i1=0; i1<number.length\/2; i1++) {\n                char t = number[i1];\n                number[i1] =  number[number.length - i1 - 1];\n                number[number.length - i1 - 1] = t;\n            }\n            int revNo = Integer.parseInt(new String(number));\n            \n            if(revNo > i && revNo < dp.length) {\n                if(dp[revNo] == 0 || dp[revNo] > dp[i] + 1)\n                    dp[revNo] = dp[i] + 1;\n            }\n        }\n        Scanner in = new Scanner(System.in);\n        \n        final int noTests = in.nextInt();\n        in.nextLine();\n        \n        for(int test=1; test<=noTests; test++) {\n            int target = in.nextInt();\n            System.out.printf(\"Case #%d: %d%n\", test, dp[target]);\n        }\n    }\n\n    static int dp[] = new int[1_000_001];\n    \n}"}
{"idx":"490","func":"class CounterCulture {\n\n    static int[] min;\n\n\n    \n\n\/\/    static int next(int x, int N, int max) {\n\/\/        if (x == N) {\n\/\/            return 0;\n\/\/        }\n\/\/        if (x >= limit || max <= 0) {\n\/\/            return Integer.MAX_VALUE;\n\/\/        }\n\/\/        \n\/\/        if (max > N - x) {\n\/\/            max = N - x;\n\/\/        }\n\/\/        \n\/\/        int a = next(x + 1, N, max - 1);\n\/\/        int b = next(reverse(x), N, max - 1);\n\/\/        int result;\n\/\/        if (a <= b) {\n\/\/            result = a;\n\/\/        } else {\n\/\/            result = b;\n\/\/        }\n\/\/        if (result == Integer.MAX_VALUE) {\n\/\/            return Integer.MAX_VALUE;\n\/\/        }\n\/\/        return result + 1;\n\/\/    }\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int t = s.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int N = s.nextInt();\n            min = new int[N + 1];\n            for (int j = N - 1; j >= 0; j--) {\n                min[j] = min[j + 1] + 1;\n                int x = j;\n                int result = 0;\n                while (x != 0) {\n                    result *= 10;\n                    result += x % 10;\n                    x \/= 10;\n                }\n                int r = result;\n                if (r > j && r <= N && min[r] + 1 < min[j]) {\n                    min[j] = min[r] + 1;\n                }\n            }\n            \n            System.out.println(\"Case #\" + i + \": \" + min[0]);\n        }\n    }\n\n}"}
{"idx":"491","func":"static void main(String[] args)\n    {\n    Scanner in=new Scanner(System.in);\n    int ncase=in.nextInt();\n    for(int icase=0;icase<ncase;icase++){\n        int icase1=icase+1;\n        int N=in.nextInt();        \n        int count=0;\n        int [] num=new int[N+1];\n        int iR=0;\n\n        if(N<=20){\n        count=N;\n        }else{\n        for(int i=1;i<=20;i++)\n            num[i]=i;\n\n        for(int i=21;i<=N;i++){\n            String str=Integer.toString(i);\n            iR=Integer.valueOf(new StringBuffer(str).reverse().toString());\n            int min=i;\n\n            if(iR<i&&i%10!=0){\n\n            if(num[iR]+1<min)\n                min=num[iR]+1;\n            }\n\n            for(int j=i-1;j>=i-10;j--)\n            if(num[j]+(i-j)<min){\n                min=num[j]+(i-j);\n            }\n            num[i]=min;\n        }\n        count=num[N];\n        }\n\n\n        System.out.println(\"Case #\"+icase1+\":\"+\" \"+count);\n    }\n    }\n}"}
{"idx":"492","func":"class R1BA {\n\n    static long[] tens = new long[] {\n            1L,\n            10L,\n            100L,\n            1000L,\n            10000L,\n            100000L,\n            1000000L,\n            10000000L,\n            100000000L,\n            1000000000L,\n            10000000000L,\n            100000000000L,\n            1000000000000L,\n            10000000000000L,\n            100000000000000L,\n            1000000000000000L\n    };\n\n    public static void main(String args[]) {\n\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int t = 1; t <= T; t++) {\n\n            final long N = in.nextLong();\n\n            long x = N;\n            long c = 0;\n            long x1 = x;\n            int bits1 = 0;\n            while(x1 > 0) {\n                bits1++;\n                x1 \/= 10;\n            }\n\n            int bits = bits1;\n\n            \/*\n            while(bits > 1) {\n\n                int bits2 = bits \/ 2;\n\n                int lb = 0;\n                long l = 0, h = 0;\n                while(lb < bits2) {\n                    int hb = bits - lb - 1;\n                    l = get(x, lb);\n                    h = get(x, hb);\n                    if (l != h)\n                        break;\n                    if ((lb == 0 && l != 1) || (lb > 0 && l != 0))\n                        break;\n                    lb++;\n                }\n\n                if(lb == 0 && h == 0) {\n                    throw new RuntimeException();\n                }\n\n                if(lb >= bits2) {\n                    \/\/ pattern 1000001..\n                    long all9 = tens[bits - 1] - 1;\n                    c += (x - all9);\n                    x = all9;\n                    bits --;\n                    continue;\n                }\n\n                if(lb == 0) {\n                    if(l > 1) {\n                        x -= (l - 1);\n                        c += (l - 1);\n                    } else if(l == 1) {\n                        \/\/ l == 1, h != l (h > 1)\n                        x = flip(x);\n                        c++;\n                    } else {\n                        \/\/ l = 0\n                        x--;\n                        c++;\n                        bits = bits(x);\n                    }\n                } else {\n                    if(l > 0) {\n                        x -= (l * tens[lb]);\n                        c += (l * tens[lb]);\n                    } else {\n                        x = flip(x);\n                        c++;\n                    }\n                }\n            }\n            *\/\n\n            while(bits > 1) {\n                if(x % 10 == 0) {\n                    x--;\n                    c++;\n                    long x2 = x;\n                    int bits2 = 0;\n                    while(x2 > 0) {\n                        bits2++;\n                        x2 \/= 10;\n                    }\n                    bits = bits2;\n                    continue;\n                }\n                int lb = 0;\n                long lo = 0, hi = 0;\n                while (lb < bits \/ 2) {\n                    int hb = bits - lb - 1;\n                    long l = (x % tens[lb + 1]) \/ tens[lb];\n                    long h = (x % tens[hb + 1]) \/ tens[hb];\n                    lo += (l * tens[lb]);\n                    hi += (h * tens[lb]);\n                    lb++;\n                }\n\n                if(lo > 1) {\n                    \/\/ reduce lower to 1\n                    x -= (lo - 1);\n                    c += (lo - 1);\n                } else {\n                    \/\/ already reduced\n                    if(hi > 1) {\n                        long x2 = x;\n                        long n = 0;\n                        while (x2 > 0) {\n                            long m = x2 % 10;\n                            x2 \/= 10;\n                            n = (n * 10) + m;\n                        }\n                        x = n;\n                        c++;\n                    } else {\n                        \/\/ pattern 1000x0001..\n                        long all9 = tens[bits - 1] - 1;\n                        c += (x - all9);\n                        x = all9;\n                        bits --;\n                    }\n                }\n            }\n\n            c += x;\n\n            System.out.format(\"Case #%d: %d\\n\", t, c);\n        }\n\n    }\n\n}"}
{"idx":"493","func":"class Cup2 {\n    static boolean flag=false;\n \n    static HashSet<String> foodlib ;\n\n    \n    public static void main (String [] args) throws IOException {\n            Scanner sc = new Scanner(new File(\"A-small-attempt0.in\"));\n             PrintWriter out = new PrintWriter(\"r1.txt\");\n             int T;\n             int [] dist = new int[1000001];\n             int pt=1;\n        \n            dist[1]=1;\n             while (pt<1000000)\n             {\n                 if (dist[pt+1]==0 || dist[pt+1]>dist[pt]+1) {\n                     dist[pt+1] =dist[pt]+1;\n                    \/\/ System.out.println(\"case1:pt=\"+pt+\" dist=\"+dist[pt+1]);\n                 \n                 }\n                char[] nchar=String.valueOf(pt).toCharArray();\n                int val=0;\n                for (int i=0;i<nchar.length;i++){\n                    int cval=nchar[i]-'0';\n                    for (int j=1;j<=i;j++)\n                        cval *=10;\n                    val+=cval;\n                }\n                 \n                 int y = val;\n                 if (dist[y]==0 || dist[y]>dist[pt]+1)\n                 {\n                     dist[y]=dist[pt]+1;\n                 }\n           \/\/      System.out.println(\"case2:pt=\"+pt+\" dist=\"+dist[pt+1]);\n                 pt++;\n             }\n          \n              T=Integer.parseInt(sc.nextLine());\n              int count=1;\n\n        \n              while (count<=T)\n              {          \n                  int N = sc.nextInt();\n    \n            \/\/       out.print(\"Case #\"+count+\": \");\n                  out.println(\"Case #\"+count+\": \"+dist[N]);\n                   \n                   count++;\n              } \/\/end one case\n            out.flush();\n        } \/\/ end main\n\n}"}
{"idx":"494","func":"class CounterCulture {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scan = new Scanner(new File(\n                \"C:\/Users\/Ahmed\/Desktop\/Codejam_1\/A-small-attempt1.in\"));\n        \/\/ Scanner scan = new Scanner(System.in);\n        \/\/ PrintWriter print = new PrintWriter(\"a.out\");\n\n        int lines = scan.nextInt();\n        for (int l = 0; l < lines; l++) {\n            int n = scan.nextInt();\n\n            Queue<Integer> queue = new LinkedList<Integer>();\n\n            queue.add(1);\n            queue.add(1);\n            int max = (int) (Math.pow(10, 6) + 3);\n            boolean[] visited = new boolean[max + 1];\n            while (!queue.isEmpty()) {\n                int o = queue.poll();\n                int steps = queue.poll();\n                if (o == n) {\n                    System.out.println(\"Case #\" + (l + 1) + \": \" + steps);\n                    break;\n                }\n                if (o + 1 < max && !visited[o + 1]) {\n                    visited[o + 1] = true;\n                    queue.add(o + 1);\n                    queue.add(steps + 1);\n                }\n                String s = o + \"\";\n                String output = \"\";\n                for (int i = 0; i < s.length(); i++) {\n                    output = s.charAt(i) + output;\n                }\n                int rev = Integer.parseInt(output);\n                if (rev < max && !visited[rev]) {\n                    visited[rev] = true;\n                    queue.add(rev);\n                    queue.add(steps + 1);\n                }\n            }\n\/\/            System.out.println(l);\n        }\n    }\n}"}
{"idx":"495","func":"class Main {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    static int memo[]=new int[1000010];\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/ TODO code application logic here\n        Scanner input=new Scanner(new File(\"input.in\"));\n        int tc=input.nextInt();\n        int n;\n        Arrays.fill(memo, 1000000);\n                    memo[1] = 1;\n        \n        for(int i1 = 1; i1 < 1000000; i1++) {\n            StringBuffer nn=new StringBuffer(i1+\"\");\n            nn=nn.reverse();\n            int reverse = Integer.parseInt(nn.toString());\n            memo[i1+1] = Math.min(memo[i1+1], memo[i1] + 1);\n            memo[reverse] = Math.min(memo[reverse], memo[i1] + 1);\n                   \n        }\n        for (int i = 0; i < tc; i++) {\n            n=input.nextInt();\n           \n            System.out.printf(\"Case #%d: %d \\n\",(i+1),memo[n]);\n        }\n        \n        \n    }\n}"}
{"idx":"496","func":"class A {\n    public static void main(String [] args) throws IOException {\n        Scanner input = new Scanner(System.in);\n        int ct = input.nextInt();\n        int cs = 1;\n        \n        int[] values = new int[1_000_001];\n        Arrays.fill(values, Integer.MAX_VALUE);\n        values[1] = 1;\n        for(int i = 1; i < values.length-1; i++) {\n            values[i+1] = Math.min(values[i+1], values[i]+1);\n            int j = (int)reverse(i);\n            values[j] = Math.min(values[j], values[i]+1);\n        }\n        \n        while(ct-- > 0) {\n            System.out.printf(\"Case #%d: %d%n\", cs++, values[input.nextInt()]);\n        }\n    }\n    \n    public static long reverse(long a) {\n        StringBuilder sb = new StringBuilder(Long.toString(a));\n        sb.reverse();\n        return Long.parseLong(sb.toString());\n    }\n}"}
{"idx":"497","func":"class Codejam1BA {\n\n    public static void main(String[] args) throws FileNotFoundException {\n\n\/\/        Scanner s = new Scanner(System.in);\n        PrintWriter writer = new PrintWriter(\"as.out\");\n        Scanner s = new Scanner(new File(\"as.in\"));\n        int arr[]=new int[10000001];\n        for (int i = 1; i < 11; i++) {\n            arr[i]=i;\n        }\n        String str = \"\";\n        String str2 = \"\";\n        StringBuilder sb;\n        for (int i = 11; i < 10000001; i++) {\n            str=i+\"\";\n            sb = new StringBuilder(str);\n            int ri = Integer.parseInt(sb.reverse().toString());\n            str2 = ri + \"\";\n            if(str.length()==str2.length() && ri<i){\n                arr[i]=Math.min(arr[i-1], arr[ri])+1;\n            }else{\n                arr[i]=arr[i-1]+1;\n            }\n        }\n        int testcase = s.nextInt();\n        for (int i = 0; i < testcase; i++) {\n            int n = s.nextInt();\n\n\/\/            long c = 1;\n\/\/            long x = 1;\n\/\/            String str = \"\";\n\/\/            String str2 = \"\";\n\/\/            StringBuilder sb;\n\/\/            while (1 != n) {\n\/\/                str = n + \"\";\n\/\/                sb = new StringBuilder(str);\n\/\/                long rn = Long.parseLong(sb.reverse().toString());\n\/\/                str2 = rn + \"\";\n\/\/                if (rn < n && rn > 1 && str.length() == str2.length()) {\n\/\/                    n = rn;\n\/\/                    c++;\n\/\/                } else {\n\/\/                    n--;\n\/\/                    c++;\n\/\/                }\n\/\/            }\n\/\/            System.out.println(\"Case #\" + (i + 1) + \": \" + arr[n]);\n            writer.println(\"Case #\" + (i + 1) + \": \" + arr[n]);\n        }\n        writer.close();\n\n    }\n\n\/\/    public static long min(long x) {\n\/\/        if (x == 1) {\n\/\/            return 1;\n\/\/        } else {\n\/\/            String str = x + \"\";\n\/\/            StringBuilder sb = new StringBuilder(str);\n\/\/            long rn = Long.parseLong(sb.reverse().toString());\n\/\/            String str2 = rn + \"\";\n\/\/            if (rn < n && rn > 1 && str.length() == str2.length()) \n\/\/        }\n\/\/    }\n}"}
{"idx":"498","func":"static void main(String args[]) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(in));\n\n        int N = 1000000;\n        LinkedList<Integer> q = new LinkedList<Integer>();\n        LinkedList<Integer> r = new LinkedList<Integer>();\n        q.add(1);\n        r.add(1);\n        HashSet<Integer> set = new HashSet<Integer>();\n        int[] len = new int[N+1];\n        while(!q.isEmpty()) {\n            int x = q.pollFirst();\n            int t = r.pollFirst();\n            if (x > N) continue;\n            if (set.contains(x)) continue;\n            set.add(x);\n            len[x] = t;\n            q.add(x+1);\n            r.add(t+1);\n            int v = 0;\n            while(x > 0) {\n                v *= 10;\n                v += x % 10;\n                x \/= 10;\n            }\n            q.add(v);\n            r.add(t+1);\n        }\n\n        int T = parseInt(br.readLine());\n        for(int i=0;i<T;i++) {\n            int x = parseInt(br.readLine());\n            out.println(\"Case #\" + (i+1) + \": \" + len[x]);\n        }\n    }\n}"}
{"idx":"499","func":"class ASmall {\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(new File(\"A-small-attempt2.in\"));\n        PrintWriter out = new PrintWriter(new File(\"outputASmall.txt\"));\n        int t = in.nextInt();\n        for (int testn = 1; testn <= t; testn++) {\n            int [] a  = new int[1000001];\n            a[0] = 1;\n            int n = in.nextInt();\n            int ans = 0;        \n            LinkedList<Integer> d = new LinkedList<Integer>();\n            d.add(1);\n            while (!d.isEmpty())\n            \n            {\n                int k = d.poll();\n                \/\/System.out.println(k);\n                if (k == n) { \/*System.out.println(k);*\/ ans = a[n - 1]; break; }\n                int k1 = k;\n                int cur = 0;\n                while (k1 > 0)\n                {\n                    cur = cur * 10 + (k1 % 10);\n                    k1 = k1 \/ 10;\n                }\n                int r = cur;\n                if (r <= n && a[r - 1] == 0) { a[r - 1] = a[k - 1] + 1; d.add(r); }\n                if (a[k + 1] == 0) { a[k] = a[k - 1] + 1; d.add(k + 1); }\n                \n            }\n            out.println(\"Case #\" + testn + \": \" + ans);\n            \/\/System.out.println(ans);\n        }\n        \/\/System.out.println(reverse(11112220));\n        in.close();\n        out.close();\n    }\n    \n    \n}"}
{"idx":"500","func":"class A{\n  public static void main(String[] args){\n    distance=new int[1000001];\n    for(int i=0;i<1000001;i++)\n      distance[i]=UNSEEN;\n    Queue<Integer> q=new LinkedList<Integer>();\n    distance[1]=1;\n    q.add(1);\n    while(!q.isEmpty()){\n      int current=q.poll();\n      int d=distance[current];\n    \n      int next=current+1;\n      if(next<1000001 && distance[next]==UNSEEN){\n        int nd=d+1;\n        distance[next]=nd;\n        q.add(next);\n      }\n    int n = current;\n    int result=0;\n    while(n>0){\n      result=10*result+(n%10);\n      n\/=10;\n    }\n      next=result;\n      if(next<1000001 && distance[next]==UNSEEN){\n        int nd=d+1;\n        distance[next]=nd;\n        q.add(next);\n      }\n    }\n    \n    Scanner scanner=new Scanner(System.in);\n    final int cases=scanner.nextInt();\n\n    for(int t=0;t<cases;t++){\n      int n=scanner.nextInt();\n      System.out.println(\"Case #\"+(t+1)+\": \"+distance[n]);\n    }\n  }\n\n  private static int[] distance;\n  private static final int UNSEEN=-1;\n}"}
{"idx":"501","func":"class A {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int testCaseNum = scan.nextInt();\n        long[] ADD = {0, 10, 19, 109, 199, 1099, 1999, 10999, 19999, 109999, 199999, 1099999, 1999999, 10999999, 19999999, 109999999, 199999999};\n\n        for(int i = 0; i < testCaseNum; ++i){\n            String nStr = scan.next().trim();\n            long n = Long.parseLong(nStr);\n\n            if(n <= 9){\n                System.out.println(\"Case #\" + (i + 1) + \": \" + n);\n                continue;\n            }\n\n            long ans = 0;\n            for(int j = 0; j < nStr.length(); ++j){\n                ans += ADD[j];\n            }\n            if(String.valueOf(n - 1).length() != nStr.length()){\n                System.out.println(\"Case #\" + (i + 1) + \": \" + ans);\n                continue;\n            }\n            if(nStr.charAt(0) == '1'){\n                boolean v = true;\n                for(int k = 1; k < (nStr.length() \/ 2); ++k){\n                    v = v && (nStr.charAt(k) == '0');\n                }\n                if(v == true){\n                    long bias = 1;\n                    for(int k = nStr.length() - 1; k >= (nStr.length() \/ 2) ; --k){\n                        ans += Long.parseLong(nStr.substring(k, k+1)) * bias;\n                        bias *= 10;\n                    }\n                    System.out.println(\"Case #\" + (i + 1) + \": \" + ans);\n                    continue;\n                }\n            }\n            long bias = 1;\n            n -= 1;\n            nStr = String.valueOf(n);\n            ans += 1;\n            if(nStr.charAt(0) == '1'){\n                boolean v = true;\n                for(int k = 1; k < (nStr.length() \/ 2); ++k){\n                    v = v && (nStr.charAt(k) == '0');\n                }\n                if(v == true){\n                    bias = 1;\n                    for(int k = nStr.length() - 1; k >= (nStr.length() \/ 2) ; --k){\n                        ans += Long.parseLong(nStr.substring(k, k+1)) * bias;\n                        bias *= 10;\n                    }\n                    System.out.println(\"Case #\" + (i + 1) + \": \" + ans);\n                    continue;\n                }\n            }\n            bias = 1;\n            for(int k = 0; k < (nStr.length() \/ 2); ++k){\n                ans += Long.parseLong(nStr.substring(k, k+1)) * bias;\n                bias *= 10;\n            }\n            bias = 1;\n            for(int k = nStr.length() - 1; k >= (nStr.length() \/ 2) ; --k){\n                ans += Long.parseLong(nStr.substring(k, k+1)) * bias;\n                bias *= 10;\n            }\n\n            System.out.println(\"Case #\" + (i + 1) + \": \" + ans);\n        }\n\n        scan.close();\n    }\n}"}
{"idx":"502","func":"class A {\npublic static void main(String [] args) {\n    Scanner scanner = new Scanner(System.in);\n    int nCase = scanner.nextInt();\n    \n    \/*\n    int[] best = new int[1000001];\n    for (int i = 1; i < best.length; i++)\n        best[i] = i;\n    for (int i = 10; i < best.length; i++) {\n        best[i] = Math.min(best[i], best[i-1]+1);\n        int next = (int) Long.parseLong(new StringBuilder(\"\"+i).reverse().toString());\n        best[next] = Math.min(best[i]+1, best[next]);\n    }\n    \/\/for (int i = 1; i < 200; i++)\n    \/\/    System.out.println(\"\" +i+\": \"+best[i]);\n    \n        \n    for (int nc = 1; nc <= nCase; nc++) {\n        long N = scanner.nextLong();\n        \n        \n        System.out.println(\"Case #\" + nc + \": \" + best[(int)N]);\n    }\n    *\/\n    \n    for (int nc = 1; nc <= nCase; nc++) {\n        long N = scanner.nextLong();\n        long N1 = N;\n        int ans3 = 1;\n        while ((N1 \/= 10) > 0) ans3++;\n        int dN = ans3;\n        long ans = 0;\n        long start = 0;\n        if (N <= 11)\n            ans = N;\n        else {\n            ans = 10;\n            int cd = 2;\n            long d10 = 10;\n            while (cd < dN) {\n                d10 *= 10;\n                long need = d10 - 1;\n                ans += Long.parseLong(new StringBuilder((\"\"+need).substring(0, cd\/2)).reverse().toString());\n                ans += Long.parseLong((\"\"+need).substring(cd\/2, cd));\n                ans++;\n                cd++;\n            }\n            \n            \/\/System.out.print(\"ans: \"+ans+\" \");\n            \/\/ no more reverse\n            long ans1 = ans;\n            ans1 += (N - d10);\n            \n            \/\/System.out.print(\"ans1: \"+ans1+\" \");\n            \/\/ 1 more reverse \n            long ans2 = ans;\n            if (N == d10)\n                ans2 = ans1;\n            else {                \n                if ((int) (N%10) == 0) {\n                    ans2++;\n                    N--;\n                }\n                ans2 += Long.parseLong(new StringBuilder((\"\"+N).substring(0, dN\/2)).reverse().toString());\n                \/\/System.out.print(\"ans2a: \"+ans2+\" \");\n                ans2 += Long.parseLong((\"\"+N).substring(dN\/2, dN));\n                \/\/System.out.println(\"ans2b: \"+ans2+\" \");    \n            }\n            \n            ans =  Math.min(ans1, ans2);\n        }\n        \n        \n        System.out.println(\"Case #\" + nc + \": \" + ans);\n    }\n    \n}\n\n}"}
{"idx":"503","func":"class A {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new FileReader(\"A-large.in\"));\n        PrintWriter out = new PrintWriter(new FileWriter(\n                new File(\"a-large.out\")));\n        int n = sc.nextInt();\n\n        for (int T = 1; n-- > 0; T++) {\n            long N = sc.nextLong();\n            long total = 0;\n            if (N > 10) {\n                total += 10;\n            }\n            if (N >= 100) {\n                total += 10 - 1 + 10;\n                if (N == 100L) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n            if (N >= 1000L) {\n                total += 100 - 1 + 10;\n                if (N == 1000) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n            if (N >= 10000L) {\n                total += 100 - 1 + 100;\n                if (N == 10000) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n            if (N >= 100000L) {\n                total += 1000 - 1 + 100;\n                if (N == 100000) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n            if (N >= 1000000L) {\n                total += 1000 - 1 + 1000;\n                if (N == 1000000) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n            if (N >= 10000000L) {\n                total += 10000 - 1 + 1000;\n                if (N == 10000000) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n            if (N >= 100000000L) {\n                total += 10000 - 1 + 10000;\n                if (N == 100000000) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n            if (N >= 1000000000L) {\n                total += 100000 - 1 + 10000;\n                if (N == 1000000000) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n            if (N >= 10000000000L) {\n                total += 100000 - 1 + 100000;\n                if (N == 10000000000L) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n            if (N >= 100000000000L) {\n                total += 1000000 - 1 + 100000;\n                if (N == 100000000000L) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n            if (N >= 1000000000000L) {\n                total += 1000000 - 1 + 1000000;\n                if (N == 1000000000000L) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n            if (N >= 10000000000000L) {\n                total += 10000000 - 1 + 1000000;\n                if (N == 10000000000000L) {\n                    out.println(\"Case #\" + T + \": \" + total);\n                    System.out.println(\"Case #\" + T + \": \" + total);\n                    continue;\n                }\n            }\n\n            String s = Long.toString(N);\n            if (N <= 10) {\n                total = N;\n            } else if (s.endsWith(\"0\")) {\n                s = Long.toString(N-1);\n                int mid = s.length() \/ 2;\n                String firstMid = s.substring(0, mid);\n                firstMid = new StringBuilder(firstMid).reverse().toString();\n                int firstIntReverse = Integer.parseInt(firstMid);\n\n                String secondMid = s.substring(mid, s.length());\n                int secondInt = Integer.parseInt(secondMid);\n                if (N - Math.pow(10, s.length() - 1) <= firstIntReverse\n                        + secondInt) {\n                    total += N - Math.pow(10, s.length() - 1);\n                } else {\n                    total += firstIntReverse + secondInt + 1;\n                }\n            } else {\n                int mid = s.length() \/ 2;\n                String firstMid = s.substring(0, mid);\n                firstMid = new StringBuilder(firstMid).reverse().toString();\n                int firstIntReverse = Integer.parseInt(firstMid);\n\n                String secondMid = s.substring(mid, s.length());\n                int secondInt = Integer.parseInt(secondMid);\n                if (N - Math.pow(10, s.length() - 1) < firstIntReverse\n                        + secondInt) {\n                    total += N - Math.pow(10, s.length() - 1);\n                } else {\n                    total += firstIntReverse + secondInt;\n                }\n            }\n\n            out.println(\"Case #\" + T + \": \" + total);\n            System.out.println(\"Case #\" + T + \": \" + total);\n        }\n        out.flush();\n    }\n}"}
{"idx":"504","func":"class A {\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    \n    int T = sc.nextInt();\n    for(int cs = 1; cs <= T; cs++) {\n      int N = sc.nextInt();\n        int[] dp = new int[N+1];\n        dp[1] = 1;\n        for(int i = 2; i <= N; i++) {\n          dp[i] = Integer.MAX_VALUE;\n        }\n        for(int i = 1; i < N; i++) {\n          dp[i+1] = Math.min(dp[i+1], dp[i] + 1);\n        int N1 = i;\n        A r1 = new A();\n        int r2 = 0;\n        while(N1 > 0) {\n          r2 *= 10;\n          r2 += N1 % 10;\n          N1 \/= 10;\n        }\n          int r = r2;\n          if(r <= N) {\n            dp[r] = Math.min(dp[r], dp[i] + 1);\n          }\n        }\n    String res = \"\" + dp[N];\n      System.out.println(\"Case #\" + cs + \": \" + res);\n    }\n    \n    sc.close();\n  }\n  \n}"}
{"idx":"505","func":"class a {\n    static int MAX = 1000000;\n    static int[] best = new int[MAX + 1];\n    static {\n        Queue<Integer> q = new LinkedList<>();\n        best[1] = 1;\n        q.add(1);\n        while (!q.isEmpty()) {\n            int n = q.poll();\n            int x = best[n] + 1;\n            if (n < MAX && (best[n + 1] == 0 || best[n + 1] > x)) {\n                best[n + 1] = x;\n                q.add(n + 1);\n            }\n            int k = 0;\n            int m = n;\n            while (m != 0) {\n                k = k * 10 + (m % 10);\n                m = m \/ 10;\n            }\n            if (k < MAX && (best[k] == 0 || best[k] > x)) {\n                best[k] = x;\n                q.add(k);\n            }\n        }\n    }\n    \n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for (int caseNum = 1; caseNum <= t; caseNum++) {\n            int n = sc.nextInt();\n            System.out.println(\"Case #\" + caseNum + \": \" + best[n]);\n        }\n    }\n}"}
{"idx":"506","func":"class CodeJamCounter{\n    public static int[] count;\n\n    public static void main(String[] args) throws Exception{\n        count = new int[1000001];\n        count[1] = 1;\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder out = new StringBuilder();\n        int t = Integer.parseInt(br.readLine().trim());\n        for(int i = 1; i < 1000000; i++){\n            StringBuilder sb = new StringBuilder();\n            sb.append(i);\n            int rev = Integer.parseInt(sb.reverse().toString());\n            if(count[i+1] == 0) count[i+1] = count[i] + 1;\n            else if(count[i] + 1 < count[i+1]) count[i+1] = count[i] + 1;\n            if(count[rev] == 0) count[rev] = count[i] + 1;\n            else if(count[i] + 1 < count[rev]) count[rev] = count[i] + 1;\n        }\n        for(int k = 1; k <= t; k++){\n            int n = Integer.parseInt(br.readLine().trim());\n            out.append(\"Case #\" + k + \": \" + count[n] + \"\\n\");\n        }\n        System.out.print(out);\n    }\n}"}
{"idx":"507","func":"class Main {\npublic static void main(String [] args)throws Exception{\n    BufferedReader br=new BufferedReader(new FileReader(\"C:\/users\/abhishek\/Desktop\/input.txt\"));\n    FileWriter f=new FileWriter(\"C:\/users\/abhishek\/Desktop\/output.txt\");\n    String newLine=System.getProperty(\"line.separator\");\n    int t=Integer.parseInt(br.readLine());\n    int array[]=new int[1000005];\n    Arrays.fill(array,Integer.MAX_VALUE);\n    array[1]=1;\n    for(int i=2;i<=1000000;i++){\n    String str=String.valueOf(i);\n    StringBuilder sb=new StringBuilder(str);\n    str=sb.reverse().toString();\n    int temp=Integer.parseInt(str);\n    array[i]=Math.min(array[i],i);\n    array[i]=Math.min(array[i-1]+1,array[i]);\n    if(temp<=1000001){\n    array[temp]=Math.min(array[temp],array[i]+1);\n    }\n    }\n    System.out.println(array[21]);\n    for(int test=1;test<=t;test++){\n    int n=Integer.parseInt(br.readLine());    \n    f.write(\"Case #\" + test + \": \" + array[n] + newLine);\n    }\n    f.close();\n}\n}"}
{"idx":"508","func":"class Problem1 {\n\n\n    public static void main(String[] args) {\n        \n        int maxN = 1000000;\n        int[] minCount = new int[maxN+1]; \/\/ minCount[i] is for counting from 1 to i\n        minCount[1] = 1;\n        \n        int reverseN;\n        for(int N=2; N<maxN+1; N++){\n            int input = N;\n            int reversedNum = 0;\n            while (input != 0) {\n                reversedNum = reversedNum * 10 + input % 10;\n                input = input \/ 10;   \n            }\n            reverseN = reversedNum;\n            if((N%10 != 0) && reverseN<N){\n                minCount[N] = Math.min(1+minCount[N-1], 1+minCount[reverseN]);\n            } else {\n                minCount[N] = 1+minCount[N-1];\n            }\n        }\n        \n        Scanner scan = new Scanner(System.in);\n        int T = scan.nextInt();\n        scan.nextLine();\n        \n        for(int caseNb=0; caseNb<T; caseNb++){\n            int N = scan.nextInt();\n            scan.nextLine();\n            System.out.println(\"Case #\"+(caseNb+1)+\": \"+minCount[N]);\n        }\n    }\n\n}"}
{"idx":"509","func":"class CounterCultureSlow {\n\n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner(System.in);\n        int cases;\n        int[] distances1 = new int[1000000 + 1];\n        Queue<Integer> ordering = new LinkedList<Integer>();\n        ordering.add(0);\n        while (!ordering.isEmpty())\n        {\n            int n1 = ordering.remove();\n            if (n1 + 1 <= 1000000 && distances1[n1 + 1] == 0)\n            {\n                distances1[n1 + 1] = distances1[n1] + 1;\n                ordering.add(n1 + 1);\n            }\n            char[] digits = String.valueOf(n1).toCharArray();\n            int val = 0;\n            for (int k = digits.length - 1; k >= 0; k--)\n                val = 10 * val + digits[k] - '0';\n            \n            int nr = val;\n            if (nr <= 1000000 && distances1[nr] == 0)\n            {\n                distances1[nr] = distances1[n1] + 1;\n                ordering.add(nr);\n            }\n        }\n        \n        \/\/ Precompute solutions\n        \/\/ This only works for the small cases, but I want it for testing.\n        int[] distances = distances1;\n        \n        cases = input.nextInt();\n        for (int c = 1; c <= cases; c++)\n        {\n            int n = input.nextInt();\n            System.out.printf(\"Case #%d: %d\\n\", c, distances[n]);\n        }\n    }\n\n}"}
{"idx":"510","func":"class CounterCulture\n{\n    public static void main (String[] args) throws IOException\n    {\n        \/\/Scanner scan = new Scanner(System.in);\n        Scanner scan = new Scanner(new File(\"A-small-attempt0.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"A-small-attempt0.out\")));\n        \n        int[] dist = new int[1000001];\n        dist[1] = 1;\n        \n        for (int i=1; i<1000000; i++)\n        {\n            if (dist[i+1]==0 || dist[i+1]>dist[i]+1)\n                dist[i+1] = dist[i]+1;\n            String s1 = Integer.toString(i);\n            String s2 = \"\";\n            for (int i1=0; i1<s1.length(); i1++)\n            s2 = s1.charAt(i1) + s2;\n            int s = Integer.parseInt(s2);\n            if (s>i && (dist[s]==0 || dist[s]>dist[i]+1))\n                dist[s] = dist[i]+1;\n        }\n\n        int t = scan.nextInt();\n        for (int i=1; i<=t; i++)\n            out.println(\"Case #\" + i + \": \" + dist[scan.nextInt()]);\n        \n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"511","func":"class Round1BA {\n    public static int[] visited;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        LinkedList<Integer> queue = new LinkedList<Integer>();\n        int tt = Integer.parseInt(br.readLine().trim());\n        for (int i = 1; i <= tt; i++) {\n            int question = Integer.parseInt(br.readLine().trim());\n            visited = new int[question + 1];\n            visited[1] = 1;\n            queue.addLast(1);\n            if (question == 1) {\n                System.out.println(\"Case #\" + i + \": 1\");\n                continue;\n            }\n            while (!queue.isEmpty()) {\n                Integer j = queue.pollFirst();\n                if (visited[j+1] == 0) {\n                    visited[j+1] = visited[j] + 1;\n                    queue.addLast(j+1);\n                }\n                String s = String.valueOf(j);\n                int index = s.length() - 1;\n                while (s.charAt(index) == '0') index--;\n                int flipped = Integer.parseInt(new StringBuilder(s.substring(0, index+1)).reverse().toString());\n                if (flipped <= question && visited[flipped] == 0) {\n                    visited[flipped] = visited[j] + 1;\n                    queue.addLast(flipped);\n                }\n                if (j+1 == question || flipped == question) break;\n            }\n            queue.clear();\n            System.out.println(\"Case #\" + i + \": \" + visited[question]);\n        }\n        br.close();\n    }\n\n}"}
{"idx":"512","func":"class CounterCulture {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) throws IOException {\n        CounterCulture instance = new CounterCulture();\n        BufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\n        PrintWriter writer = new PrintWriter(\"out.txt\", \"UTF-8\");\n        \n        \n        int MAX = 1000001;\n        \n        int[] res = new int[MAX];\n        \n        res[1] = 1;\n        \n        for(int i=2;i<MAX;++i) {\n            int r = Integer.parseInt(new StringBuffer(new Integer(i).toString()).reverse().toString());\n            int r_r = Integer.parseInt(new StringBuffer(new Integer(r).toString()).reverse().toString());\n            if(r<i && i == r_r) {\n                res[i] = Math.min(res[i-1], res[r])+1;\n            }\n            else\n                res[i] = res[i-1]+1;\n        }\n        \n        \n        \n        try {\n            String line = br.readLine();\n            \n            int t = Integer.parseInt(line);\n            \n            for(int i=1;i<=t;++i) {\n                int n = Integer.parseInt(br.readLine());\n                \n                writer.print(\"Case #\" + new Integer(i).toString() + \": \" + res[n]);\n                \n                if(i<t)\n                    writer.println();\n            }\n        } finally {\n            br.close();\n            writer.close();\n        }\n    }\n\n}"}
{"idx":"513","func":"class Main\n{\npublic static void main(String[] args)throws java.lang.Exception\n{\nBufferedReader in = new BufferedReader(new FileReader(\"A-small-attempt2.in\"));\nPrintWriter out=new PrintWriter(\"output.txt\");\nint t,x1,i,j,n,n1,cnt,v;\nString str1,str2;\n\nt=Integer.parseInt(in.readLine());\n \n \nfor(x1=0;x1<t;x1++)\n{\nn=Integer.parseInt(in.readLine());\n\n\nint[] steps=new int[n+1];\n\nsteps[1]=1;\n\nfor(i=2;i<=n;i++)\n    steps[i]=1000001;\n\n\n\nfor(j=2;j<=n;j++)\n{\nstr1=String.valueOf(j);\n\nstr2=\"\";\n\nfor(i=str1.length()-1;i>=0;i--)\n{\nstr2+=str1.charAt(i);\n}\n\nv=Integer.parseInt(str2);\n\nstr2=String.valueOf(v);\n\nif(v<j && v>=1 && str1.length()==str2.length())\n    {\n    steps[j]=Math.min(steps[v]+1,steps[j-1]+1);\n    }\nelse\n    steps[j]=steps[j-1]+1;\n}\n\nout.println(\"Case #\"+(x1+1)+\": \"+steps[n]);\n\n}\n\nout.flush();\nout.close();\n}\n}"}
{"idx":"514","func":"class A\n{\n    public static void main(String[] args) throws Exception\n    {\n        Scanner s=new Scanner(new FileInputStream(args[0]) );\n        int t=s.nextInt();\n        TreeSet<Long> keresettek=new TreeSet<Long>();\n        LinkedList<Long> keresettek2=new LinkedList<Long>();\n        for (int i=1;i<=t;i++)\n        {\n             \/\/System.out.print(\"Case #\"+i+\": \");\n             long l=s.nextLong();\n             keresettek2.add(l);\n             keresettek.add(l);\n        }\n        TreeMap<Long,Long> ret=new TreeMap<Long, Long>();\n\n        TreeSet<Long> voltmar=new TreeSet<Long>();\n        TreeSet<Long> elements=new TreeSet<Long>();\n        TreeSet<Long> nextelements=new TreeSet<Long>();\n        elements.add((long)1);\n        int kellmeg=keresettek.size();\n        int lepesek=1;\n        if (keresettek.contains((long)1))\n            ret.put((long)1, (long)1);\n        \/\/int max=l.last();\n        \/\/while(kellmeg!=0)\n        while (ret.size()!=keresettek.size())\n        {\n            \/\/if (elements.contains(l)) break;\n        for (Long i1:elements)\n        {\n           if (\n                   \/\/i+1<=max &&\n                   voltmar.contains(i1+1)==false)\n           {\n               if (keresettek.contains(i1+1) && ret.containsKey(i1+1)==false )\n               {\n                   System.err.println(\"betesz hozzaadassal:\"+(i1+1) );\n                   ret.put(i1+1, (long)(lepesek+1) );\n               }\n           nextelements.add(i1+1);\n           }\n           \/\/if (voltmar.contains(i)) continue;\n           Long newertek=Long.parseLong(new StringBuilder(i1.toString()).reverse().toString() );\n           \/\/System.err.println(i+\"->\"+newertek);\n           \/\/if (newertek<=l && new)\n           if (\n                   \/\/newertek<=l &&\n                   voltmar.contains(newertek)==false )\n           {\n               if (keresettek.contains(newertek) && ret.containsKey(newertek)==false)\n               {\n                   System.err.println(\"betesz forditassal:\"+newertek);\n                   ret.put(newertek, (long)(lepesek+1) );\n               }\n\n           nextelements.add(newertek);\n           }\n           \/\/voltmar.add(newertek);\n           voltmar.add(i1);\n        }\n        elements=new TreeSet<Long>(nextelements);\n        nextelements.clear();\n        lepesek++;\n        System.err.println(lepesek);\n        \/\/if (elements.contains(l)) break;\n        }\n        TreeMap<Long,Long> sol=ret;\n        for (int i=1;i<=t;i++)\n        {\n             System.out.println(\"Case #\"+i+\": \"+sol.get(keresettek2.get(i-1)) );\n        }\n    }\n}"}
{"idx":"515","func":"static void main(String[] args)throws IOException {\n        br=new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n        pw=new PrintWriter(new FileOutputStream(\"output_A.in\"));\n        int t=Integer.parseInt(br.readLine());\n        for(int i=2;i<1000001;i++)\n            arr[i]=1000001;\n        arr[1]=1;\n        for(int i1=2;i1<1000001;i1++) {\n            arr[i1]=Math.min(arr[i1-1]+1, arr[i1]);\n            int num=i1;\n            long rev=0;\n            while(num>0) {\n                rev=num%10+rev*10;\n                num\/=10;\n            }\n            \/\/pw.println(rev);\n            if(rev<1000000 && rev>i1)\n                arr[(int)rev]=Math.min(arr[i1]+1, arr[(int)rev]);\n        }\n        for(int i=1;i<=t;i++) {\n            int n=Integer.parseInt(br.readLine());\n            pw.println(\"Case #\"+i+\": \"+arr[n]);\n        }\n        pw.flush();\n    }\n}"}
{"idx":"516","func":"class A {\n  public static final String YES = \"YES\";\n  public static final String NO = \"NO\";\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    PrintWriter out = new PrintWriter(System.out);\n    \n    int tests = in.nextInt();\n    for (int test = 0; test < tests; test++) {\n      int n = in.nextInt();\n    int[] dist = new int[n + 1];\n    boolean[] used = new boolean[n + 1];\n    Arrays.fill(dist, Integer.MAX_VALUE);\n    \n    Queue<Integer> queue = new ArrayDeque<Integer>();\n    queue.add(1);\n    dist[1] = 1;\n    used[1] = true;\n    while (!queue.isEmpty()) {\n      Integer top = queue.poll();\n      int td = dist[top];\n      int n1 = top + 1;\n    int n3 = top;\n    int res = 0;\n    while (n3 != 0) {\n      res *= 10;\n      res += n3 % 10;\n      n3 \/= 10;\n    }\n      int n2 = res;\n      if (n1 > 0 && n1 <= n) {\n        dist[n1] = Math.min(dist[n1], td + 1);\n        if (!used[n1]) {\n          used[n1] = true;\n          queue.add(n1);\n        }\n      }\n      if (n2 > 0 && n2 <= n) {\n        dist[n2] = Math.min(dist[n2], td + 1);\n        if (!used[n2]) {\n          used[n2] = true;\n          queue.add(n2);\n        }\n      }\n    }\n      int ans = dist[n];\n      out.println(String.format(\"Case #%d: %s\", test + 1, ans));\n      out.flush();\n    }\n    \n    in.close();\n    out.close();\n  }\n\n}"}
{"idx":"517","func":"class A {\n    public static void main(String[] args) throws Exception {\n        int MAX = 1000001;\n        int[] mem = new int[MAX];\n         for (int i = 2; i < mem.length; i++) {\n            mem[i] = i;\n        }\n        mem[1] = 1;\n        for (int i = 12; i < mem.length; i++) {\n            mem[i] = Math.min(mem[i], mem[i - 1] + 1);\n            char[] chrs = String.valueOf(i).toCharArray();\n            String ns = \"\";\n            for (int j = chrs.length - 1; j >= 0; j--) {\n                ns += chrs[j];\n            }\n            int nv = Integer.parseInt(ns);\n            if(nv < mem.length) {\n                mem[nv] = Math.min(mem[nv], mem[i] + 1);\n            }\n        }\n        BufferedReader br = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"outputA.txt\"));\n        int nrTests = Integer.parseInt(br.readLine());\n        for(int tNr = 1; tNr <= nrTests; tNr++) {\n            long n = Long.parseLong(br.readLine());\n            pw.println(\"Case #\" + tNr + \": \" + mem[(int)n]);\n        }\n        \n        pw.close();\n        br.close();\n        System.out.println(\"done!\");\n    }\n}"}
{"idx":"518","func":"class Problem1 {\n    public static void main(String[] args) {\n    try {\n        BufferedReader reader = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n        String line = null;\n        List<String> lines1 = new ArrayList<String>();\n        while((line = reader.readLine()) != null) {\n            lines1.add(line);\n        }\n        reader.close();\n        List<String> lines = lines1;\n        List<String> outputLines = new ArrayList<String>();\n        int index = 0;\n        int testCases = Integer.parseInt(lines.get(index++));\n        int max = 1000000;\n        int[] counts = new int[max+1]; \n        Arrays.fill(counts, max);\n        counts[1] = 1;\n        for(int i=1;i<max;i++) {\n            counts[i+1] = Math.min(counts[i]+1, counts[i+1]);\n            int num = i;\n            long rev = 0;\n            while (num != 0)\n            {\n                rev = rev*10 + num % 10;\n                num \/= 10;\n            }\n            long r = rev;\n            if(r > max) {\n            continue;\n            }\n            counts[(int)r] = Math.min(counts[i]+1, counts[(int)r]);\n        }\n        for(int t = 0; t < testCases; t++) {\n            int N = Integer.parseInt(lines.get(index++));\n            String testCaseOutput = \"Case #\" + (t+1) + \": \" +counts[N];\n            System.out.println(testCaseOutput);\n            outputLines.add(testCaseOutput);\n        }\n        StringBuilder strValue = new StringBuilder(\"\");\n        if (outputLines != null) {\n            int i = 0;\n            for (Object v : outputLines) {\n            String value = v.toString();\n            if (i == 0) {\n                strValue.append(value);\n            } else {\n                strValue.append(\"\\n\");\n                strValue.append(value);\n            }\n            i++;\n            }\n        }\n        String output = strValue.toString();\n        FileWriter writer = new FileWriter(\"A-small-attempt0.in\".replace(\".in\", \".out\"));\n        writer.write(output);\n        writer.close();\n    }catch(Exception ex) {\n        ex.printStackTrace();\n    }\n    }\n\n\n}"}
{"idx":"519","func":"class Main {\n    \n    static long answ;\n    \n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        long N;\n        long n;\n        String s, ss;\n        StringBuilder rev;\n        \n        Queue<String> q = new LinkedList<String>();\n        Queue<Long> c = new LinkedList<Long>();\n        HashSet<String> hs = new HashSet<String>();\n        for(int z = 1; z <= T; z++){\n            N = in.nextLong();\n            q.clear();\n            c.clear();\n            hs.clear();\n            hs.add(\"1\");\n            q.add(\"1\");\n            c.add(1l);\n            while(!q.isEmpty()){\n                s = q.poll();\n                answ = c.poll();\n                n = Long.parseLong(s) + 1;\n\n                if(n == N + 1){\n                    break;\n                }\n                ss = Long.toString(n);\n                if(!hs.contains(ss)){\n                    q.add(ss);\n                    hs.add(ss);\n                    c.add(answ + 1);\n                }\n                rev = new StringBuilder(s);\n                ss = rev.reverse().toString();\n                if(!hs.contains(ss)){\n                    q.add(ss);\n                    hs.add(ss);\n                    c.add(answ + 1);\n                }\n            }\n            \n            \n            System.out.println(\"Case #\" + z + \": \" + answ);\n        }\n    }\n    \n    \n    \n    \n}"}
{"idx":"520","func":"class Problem1 {\n\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        File f = new File(\"C:\\\\Users\\\\Pivis\\\\Documents\\\\NetBeansProjects\\\\GCJ_B\\\\src\\\\a.in\");\n        File out = new File(\"C:\\\\Users\\\\Pivis\\\\Documents\\\\NetBeansProjects\\\\GCJ_B\\\\src\\\\a.out\");\n        Scanner in = new Scanner(new FileReader(f));\n        BufferedWriter output = new BufferedWriter(new FileWriter(out));\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i1 = 1; i1 <= 1000000; i1++) {\n            if (i1 <= 20) map.put(i1, i1);\n            else {\n                int r1 = map.get(i1-1);\n                if (i1%10 != 0) {\n                    int num = i1;\n                    int res = 0;\n                    while (num > 0) {\n                        int d = num%10;\n                        res *= 10;\n                        res += d;\n                        num \/=10;\n                    }\n                    int rev = res;\n                    if (rev < i1) {\n                        int r2 = map.get(rev);\n                        map.put(i1, Math.min(r1, r2)+1);\n                    } else {\n                        map.put(i1, r1+1);\n                    }\n                } else {\n                    map.put(i1, r1+1);\n                }\n            }\n        }\n        \n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int N = in.nextInt();\n            String text = \"Case #\" + (i+1) + \": \" + map.get(N) + \"\\n\";\n            output.write(text);\n            \n        }\n        output.close();\n    }\n}"}
{"idx":"521","func":"class A {\n    \n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int i = 0; i < T; i++)\n        {\n            int N = in.nextInt();\n            int[] min = new int[MAX];\n            Arrays.fill(min, MAX+1);\n            \n            min[1] = 1;\n            \n            for (int cur = 1; cur <= N; cur++)\n            {\n                \/\/ The next is the minimum of this + 1 or its value\n                min[cur + 1] = Math.min(min[cur + 1], min[cur] + 1);\n                int num = cur;\n                int ans1 = 0;\n                while (num > 0) {\n                    ans1 *= 10;\n                    ans1 += (num % 10);\n                    num \/= 10;\n                }\n            \n                int reverse = ans1;\n                min[reverse] = Math.min(min[reverse], min[cur] + 1);\n            }\n            int ans = min[N];\n            System.out.printf(\"Case #%d: %d\\n\", i+1, ans);\n        }\n\n    }\n    \n    static int MAX = 1000005;\n\n}"}
{"idx":"522","func":"class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(\n                        System.in\n                        )));\n        StringBuilder builder;\n        long dp[] = new long[1000005];\n        dp[0] = dp[1] = 1;\n        for (int i = 2; i < 20; i++) {\n            dp[i] = i;\n        }\n\n        for (int i = 20; i < dp.length; i++) {\n            int iLength = Integer.toString(i).length();\n            builder = new StringBuilder();\n            builder.append(i);\n            int rev = Integer.parseInt(builder.reverse().toString());\n            int revLength = Integer.toString(rev).length();\n            if (rev < dp.length && rev < i && iLength == revLength) {\n                dp[i] = Math.min(dp[i-1], dp[rev]) + 1;\n            } else {\n                dp[i] = dp[i-1] + 1;\n            }\n        }\n\n        int T = sc.nextInt();\n        for (int t = 1; t <= T; t++) {\n            int N = sc.nextInt();\n            System.out.printf(\"Case #%d: %d\\n\", t, dp[N]);\n        }\n    }\n}"}
{"idx":"523","func":"class A {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scanner = new Scanner(new File(\"input.txt\"));\n        PrintStream ps = new PrintStream(new File(\"output.txt\"));\n        int T = Integer.parseInt(scanner.nextLine());\n        HashSet<Long> set = new HashSet<Long>();\n        HashSet<Long> newSet = new HashSet<Long>();\n        HashSet<Long> tried = new HashSet<Long>();\n        HashSet<Long> temp = null;\n        for (int i = 1; i <= T; i++) {\n            long N = Long.parseLong(scanner.nextLine());\n            int count = 1;\n            set.clear();\n            newSet.clear();\n            tried.clear();\n            set.add(1L);\n            boolean found = N == 1;\n            for (; !found; count++) {\n                for (Long num : set) {\n                    Long reverse = Long.parseLong(new StringBuilder(num\n                            .toString()).reverse().toString());\n                    if (reverse == N || num + 1 == N) {\n                        found = true;\n                        break;\n                    } else {\n                        if (reverse > num && !tried.contains(reverse)) {\n                            tried.add(reverse);\n                            newSet.add(reverse);\n                        }\n                        if (!tried.contains(num + 1)) {\n                            tried.add(num + 1);\n                            newSet.add(num + 1);\n                        }\n                    }\n                }\n                set.clear();\n                temp = set;\n                set = newSet;\n                newSet = temp;\n            }\n            System.out.println();\n            String output = \"Case #\" + i + \": \" + count;\n            System.out.println(output);\n            ps.println(output);\n        }\n        ps.flush();\n        ps.close();\n        scanner.close();\n    }\n}"}
{"idx":"524","func":"class Counter {\n\n    public static void main(String[] args) {\n        String input = \"\/Users\/bhavesh\/Downloads\/A-small-attempt1.in\";\n        String output = \"\/Users\/bhavesh\/Downloads\/output\";\n\n        try {\n            int a[]= new int[1000001];\n            int n;\n            for(int i=0;i<=1000000;i++){\n                a[i]=-1;\n            }\n\n            for(int i = 1; i<=1000000;i++)\n            {\n                if(i<=10)\n                {\n                    a[i]=i;\n                    continue;\n                }\n                int n1 = i;\n                int reverse = 0;\n                while (n1 != 0) {\n                    reverse = reverse * 10;\n                    reverse = reverse + n1 % 10;\n                    n1 = n1 \/ 10;\n                }\n                int ri = reverse;\n                if(ri < i && i%10!=0)\n                    a[i]= (a[i-1]+1< a[ri] + 1)?a[i-1]+1:a[ri] + 1;\n                else\n                    a[i]= a[i-1]+1;\n            }\n            BufferedReader br = new BufferedReader(new FileReader(input));\n            PrintWriter pw = new PrintWriter(output);\n\n            int t = Integer.parseInt(br.readLine().trim());\n\n            int i = 1;\n            while (i <= t) {\n                int num = Integer.parseInt(br.readLine());\n\n                String op = \"Case #\" + i + \": \" +a[num];\n            System.out.println(op);\n                pw.print(op);\n                pw.println();\n                i++;\n            }\n\n            pw.flush();\n            pw.close();\n            br.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n\n}"}
{"idx":"525","func":"class A\n{\n    static long[] POW10 = new long[20];\n    static\n    {\n        POW10[0] = 1;\n        for (int i = 1; i < POW10.length; i++)\n            POW10[i] = POW10[i - 1] * 10;\n    }\n\n    public static void main(String ... orange) throws Exception\n    {\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++)\n        {\n            String s = input.next();\n            long l = Long.parseLong(s);\n            boolean zero = l % POW10[s.length() \/ 2] == 0;\n            if (zero)\n            {\n                l--;\n                s = l + \"\";\n            }\n            long ans = 0;\n            for (int d = 1; d < s.length(); d++)\n                ans += POW10[d \/ 2] + POW10[(d + 1) \/ 2] - 1;\n            String sb = \"0\" + s.substring(0, s.length() \/ 2);\n            if (s.length() > 1 && Long.parseLong(sb) != POW10[s.length() \/ 2 - 1])\n            {\n                ans += Long.parseLong(\"0\" + new StringBuilder(\n                            s.substring(0, s.length() \/ 2)).reverse().toString());\n            }\n            ans += Long.parseLong(\"0\" + s.substring(s.length() \/ 2));\n            if (zero)\n                ans++;\n\n            System.out.printf(\"Case #%d: \", n + 1);\n            System.out.println(ans);\n        }\n    }\n}"}
{"idx":"526","func":"static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n\n        int t = input.nextInt();\n\n        int[] arr = new int[1000001];\n        for (int j = 1, cnt = 1; j <= 1000000; ++j, ++cnt) {\n            if (arr[j] > 0) {\n                if (cnt < arr[j]) {\n                    arr[j] = cnt;\n                } else {\n                    cnt = arr[j];\n                }\n                continue;\n            }\n            arr[j] = cnt;\n            int n = j;\n            int r1 = 0;\n            while (n != 0) {\n                r1 = r1 * 10;\n                r1 = r1 + n % 10;\n                n = n \/ 10;\n            }\n            int r = r1;\n            if (r > j) {\n                arr[r] = cnt + 1;\n            }\n        }\n\n        for (int i = 0; i < t; ++i) {\n            int n = input.nextInt();\n\n            System.out.println(\"Case #\" + (i + 1) + \": \" + arr[n]);\n        }\n\n        input.close();\n    }\n}"}
{"idx":"527","func":"class P1 {\n    public static final String filename = \"A-small-attempt1\";\n    public static Scanner in;\n    public static PrintStream out;\n\n    public static void main(String[] args) throws Exception {\n        in = new Scanner(new File(filename + \".in\"));\n        out = new PrintStream(new FileOutputStream(filename + \".out\"));\n        \n        int num = Integer.parseInt(in.nextLine());\n        for (int i = 1; i <= num; i++) {\n            int n = Integer.parseInt(in.nextLine());\n            int[] arr = new int[n + 1];\n            for (int i2 = 0; i2 <= n; i2++)\n                arr[i2] = i2;\n            \n            for (int i1 = 1; i1 <= n; i1++) {\n                int count = arr[i1 - 1];\n                if (arr[i1] > count)\n                    arr[i1] = count + 1;\n                int num1 = arr[i1];\n                String s = \"\" + i1;\n                String ns = \"\";\n                for (int i2 = 0; i2 < s.length(); i2++)\n                    ns += s.charAt(s.length() - i2 - 1);\n                int x = Integer.parseInt(ns);\n                if (x <= n && x > i1 && arr[x] > arr[i1])\n                    arr[x] = num1 + 1;\n            }\n            int res = arr[n];\n            String s = \"Case #\" + i + \": \" + res;\n            System.out.println(s);\n            out.println(s);\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"528","func":"class countSmall {\n    public static void main(String[] args) {\n        int inf = 20000000;\n        Scanner in = new Scanner(System.in);\n        \n        int cases = in.nextInt();\n        int cn = 0;\n        \n        while (cn++ < cases) {\n            int n =in.nextInt();\n            \n            int[] cost = new int[n+1];\n            Arrays.fill(cost, inf);\n            cost[0] = 0;\n            ArrayDeque<Integer> bfs = new ArrayDeque<Integer>(n);\n            bfs.add(0);\n            \n            while (bfs.size() > 0) {\n                int here = bfs.poll();\n                \n                if (here != n) {\n                    if (cost[here+1] == inf) {\n                        cost[here+1] = cost[here]+1;\n                        bfs.add(here+1);\n                    }\n                    StringBuilder s = new StringBuilder();\n                    s.append(here);\n                    s.reverse();\n                    \n                    int rev = Integer.parseInt(s.toString());\n                    if (rev <= n && cost[rev] == inf) {\n                        cost[rev] = cost[here]+1;\n                        bfs.add(rev);\n                    }\n                    \n                }\n            }\n            \n            System.out.printf(\"Case #%d: %d\\n\", cn, cost[n]);\n            \n        }\n    }\n}"}
{"idx":"529","func":"class CJ2015Round1BA {\n    \n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(\"A-small-attempt1.in\"));\n        \/\/BufferedReader in = new BufferedReader(new FileReader(\"temp.txt\"));\n        PrintWriter out  = new PrintWriter(new File(\"2015Round1BAout.txt\"));\n        int T = Integer.parseInt(in.readLine());\n        Integer[] Ns = new Integer[T];\n        for(int a = 0; a < T; a++){\n            Ns[a] = Integer.parseInt(in.readLine());\n        }\n        List<Integer> okay = Arrays.asList(Ns);\n        int N = Collections.max(okay);\n        int[] nums = new int[N];\n        for(int i = 0; i < N; i++){\n            if (i==0){\n                nums[i]=1;\n            } else {\n                int num = i+1;\n                int reverse=0;\n                while( num != 0 )\n                {\n                    reverse = reverse * 10;\n                    reverse = reverse + num%10;\n                    num = num\/10;\n                }\n                if (reverse<i+1&&reverse>1&&String.valueOf(reverse).length()==String.valueOf(i+1).length()){\n                    nums[i]=Math.min(nums[i-1]+1,nums[reverse-1]+1);\n                } else {\n                    nums[i]=nums[i-1]+1;\n                }\n            }\n        }\n        for(int i = 0; i < T; i++){\n            out.println(\"Case #\"+(i+1)+\": \"+nums[Ns[i]-1]);\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"530","func":"class d {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(d.class.getResourceAsStream(\"a.in\"));\n        System.setOut(new PrintStream(\"d.txt\"));\n        \/\/Scanner in = new Scanner(System.in);\n        int testcases, testcase = 1;\n        testcases = in.nextInt();\n        int N = 1000002;\n        int[] dp = new int[N];\n        Arrays.fill(dp, 1 << 28);\n        dp[1] = 1;\n        for(int i = 2; i < N; i++) {\n            StringBuilder sb = new StringBuilder();\n            sb.append(i);\n            sb.reverse();\n            int rev = Integer.valueOf(sb.toString());\n            dp[i] = Math.min(dp[i - 1] + 1, dp[i]);\n            if(rev < N)\n                dp[rev] = Math.min(dp[rev], dp[i - 1] + 2);\n        }\n        \/\/System.out.println(Arrays.toString(dp));\n        while(testcase <= testcases) {\n            int n = in.nextInt();\n            System.out.println(\"Case #\" + testcase + \": \" + dp[n]);\n            testcase++;\n        }\n    }\n}"}
{"idx":"531","func":"class A {\n    public static void main(String[] args) {\n        int n1 = 1000000;\n        m[1] = 1;\n        for(int i = 2; i < n1 + 1; i++)\n        {\n            int rev = Integer.parseInt(new StringBuilder(String.valueOf(i)).reverse().toString());\n            if(i % 10 !=0 &&rev < i)\n                m[i] = Math.min(m[rev], m[i-1]) + 1;\n            else\n                m[i] = m[i-1]+1;\n        }\n        Scanner in = new Scanner(System.in);\n        int ntests = in.nextInt();\n        \n        for (int test = 1; test <= ntests; test++) {\n            int n = in.nextInt();\n            System.out.println(\"Case #\" + test + \": \" + m[n]);\n        }\n    }\n    static int[] m = new int[1000001];\n}"}
{"idx":"532","func":"class CounterCulture {\n\n    public static void main(String[] args) throws IOException {\n        String inputFile = \"src\/CounterCulture.in\";\n        String outputFile = \"src\/CounterCulture.out\";\n        BufferedReader br = new BufferedReader(new FileReader(new File(inputFile)));\n        PrintWriter pw = new PrintWriter(new FileWriter(new File(outputFile)));\n        String line = br.readLine();\n        int N = Integer.parseInt(line);\n        int id = 1;\n        while ((line = br.readLine()) != null) {\n            int n = Integer.parseInt(line);\n            int[] times = new int[n+1];\n            times[1] = 1;\n            for (int i = 1; i <= n; ++i) {\n                if (times[i] == 0) {\n                    times[i] = times[i-1] + 1;\n                }\n                else times[i] = Math.min(times[i-1] + 1, times[i]);\n                int n1 = i;\n                int reverse = 0;\n                while( n1 != 0 ) {\n                  reverse = reverse * 10;\n                  reverse = reverse + n1%10;\n                  n1 = n1\/10;\n                }\n                int rev = reverse;\n                if (rev > i && rev <= n) {\n                    times[rev] = times[i] +1;\n                }\n                \n            }\n            int num = times[n];\n            pw.println(\"Case #\"+id+\": \"+num);\n            id++;\n        }\n        br.close();\n        pw.close();\n        \/\/ CounterCulture.minTimes(100) ;\n    }\n}"}
{"idx":"533","func":"class Poetry {\n  public static void main(String[] args) {\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n    try {\n      int t = Integer.parseInt(br.readLine());\n      for (int i = 1; i <= t; i++) {\n        int n = Integer.parseInt(br.readLine());\n\n        int[] nums = new int[n+1];\n        for (int j = 1; j <= n; j++) {\n          nums[j] = n-j+1;\n        }\n        nums[n] = 1;\n        for (int j = n-1; j >= 1; j--) {\n          int j1 = j;\n            int r = 0;\n            while (j1 > 0) {\n              r *= 10;\n              r += j1 % 10;\n              j1 \/= 10;\n            }\n        int reverse_j = r;\n          if (reverse_j <= n) {\n            nums[j] = 1 + Math.min(nums[reverse_j],nums[j+1]);\n          } else {\n            nums[j] = 1 + nums[j+1];\n          }\n        }\n\n        bw.write(\"Case #\" + i + \": \" + nums[1]);\n        bw.newLine();\n      }\n\n      bw.flush();\n      bw.close();\n      br.close();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}"}
{"idx":"534","func":"class p1 \n{\n  static int ans=0;\n  public static void main (String[]args)throws IOException\n  {\n    Scanner s=new Scanner (new File(\"A-small-attempt0 (2).in\"));\n    PrintWriter out=new PrintWriter(new FileWriter(\"out.txt\"));\n    \/\/Scanner s=new Scanner (new File(\"in.txt\"));  \n    int cases=s.nextInt();\n    \n    long max=1000000;\n    long best []=new long[(int)max+1];\n    Arrays.fill (best,max+1);\n    best[0]=0;\n    for (int x=1;x<=max;x++)\n    {\n      long a = x;\n        while (a%10==0)\n          a\/=10;\n        String b=\"\";\n        int temp1=(int)Math.log10(a);\n        for (int x1=0;x1<=temp1;x1++)\n        {\n          b+=a%10;\n          a\/=10;\n        }\n    long temp=Long.parseLong(b);\n      if(x%10!=0&&temp<=x)\n        best[x]=Math.min(best[(int)temp]+1,best[x-1]+1);\n      else\n        best[x]=best[x-1]+1;\n    }\n    \n    for (int tt=0;tt<cases;tt++)\n    {\n      long n=s.nextLong(); \n      out.println (\"Case #\"+(tt+1)+\": \"+(best[(int)n]));\n      System.out.println (\"Case #\"+(tt+1)+\": \"+(best[(int)n]));\n    }\n    out.close();\n    s.close();\n  }\n}"}
{"idx":"535","func":"class CounterCulture {\n\n    public static void main(String[] args) throws Exception {\n        long[] ret = new long[1000001];\n        Arrays.fill(ret, Long.MAX_VALUE);\n        ret[0] = 0;\n        for(int i=0; i<1000000; ++i){\n            ret[i+1] = Math.min(ret[i]+1, ret[i+1]);\n            int rev = Integer.valueOf(new StringBuilder(Integer.toString(i)).reverse().toString());\n            if(rev <= 1000000) {\n                ret[rev] = Math.min(ret[i]+1, ret[rev]);\n            }\n        }\n        long[] smallAnswer = ret;\n\n        Scanner s = new Scanner(new File(\"A-small.in\"));\n\n        int caseNum = s.nextInt();\n        for (int t = 1; t <= caseNum; ++t) {\n            int n = s.nextInt();\n\n            System.out.println(\"Case #\" + t + \": \" + smallAnswer[n]);\n        }\n    }\n\n}"}
{"idx":"536","func":"class GCJ2015A2 {\n    static long n;\n    static long[] result = new long[1000001];\n\n    public static void main(String[] args) throws Exception {\n        for (int i = 1; i <= 1000000; i++) {\n            result[i] = i;\n        }\n        while (true) {\n            boolean good = true;\n            for (int i = 1; i <= 1000000; i++) {\n                StringBuilder sb = new StringBuilder(\"\" + i);\n                sb.reverse();\n                int n1 = Integer.parseInt(sb.toString());\n                if (result[i] + 1 < result[n1]) {\n                    result[n1] = result[i] + 1;\n                    good = false;\n                }\n                if (i == 1000000) {\n                    continue;\n                }\n                if (result[i] + 1 < result[i + 1]) {\n                    result[i + 1] = result[i] + 1;\n                    good = false;\n                }\n            }\n            if (good) {\n                break;\n            }\n        }\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for (int k = 1; k <= t; k++) {\n            n = sc.nextLong();\n            System.out.println(\"Case #\" + k + \": \" + result[(int) n]);\n        }\n    }\n\n}"}
{"idx":"537","func":"class Jam {\n\n    public static void main(String[] args) throws IOException{\n        FileReader in = new FileReader(\"src\/A-small-attempt1.in\");\n        BufferedReader br = new BufferedReader(in);\n        int T = Integer.parseInt(br.readLine());\n                 \n        File file = new File(\"src\/output.txt\");\n\n        FileWriter fw = new FileWriter(file.getAbsoluteFile());\n        BufferedWriter bw = new BufferedWriter(fw);        \n        for(int i = 0; i < T; i++){\n            int N = Integer.parseInt(br.readLine());\n            int[] table = new int[N+1];\n            table[1] = 1;\n            table[0] = 0;\n            for(int j = 1; j <= N; j++){\n                int n = j;\n                int reversed = 0;\n                while(n != 0){\n                    reversed = reversed * 10 + n%10;\n                    n = n\/10;\n                }\n                int rev = reversed;\n                int n1 = table[j-1]+1;\n                int n2 = Integer.MAX_VALUE-1;\n                if(rev < j && Integer.toString(rev).length() == Integer.toString(j).length()){\n                    n2 = table[rev];\n                }\n                table[j] = Math.min(n1, n2+1);\n            }\n            bw.write(\"Case #\" + Integer.toString(i+1)+\": \"+Integer.toString(table[N]));\n            bw.newLine();\n        }\n        in.close();\n        bw.close();\n    }\n    \n}"}
{"idx":"538","func":"class Main\n{\n\n    public static void main(String[] args) throws IOException\n    {\n        Main main = new Main();\n        \/\/ streams\n        String inputFileName = \"C:\\\\Users\\\\ahmed\\\\Desktop\\\\Codejam\\\\Input.in\";\n        String outputFileName = \"C:\\\\Users\\\\ahmed\\\\Desktop\\\\Codejam\\\\Output.txt\";\n        main.in = new BufferedReader(new FileReader(inputFileName));\n        main.out = new BufferedWriter(new FileWriter(outputFileName));\n        main.ans = new StringBuilder();\n        \n        \/\/ precompute\n        int n = 1000009;\n        main.dist = new int[n];\n        main.visited = new boolean[n];\n        main.dist[1] = 1;\n        main.visited[1] = true;\n        Queue<Integer> q = new LinkedList<Integer>();\n        Queue<Integer> d = new LinkedList<Integer>();\n        q.add(1);\n        d.add(1);\n        while (!q.isEmpty())\n        {\n            int x1 = q.poll();\n            int distance = d.poll();\n            int next1 = x1 + 1;\n            if (next1 < n)\n                if (!main.visited[next1])\n                {\n                    main.visited[next1] = true;\n                    main.dist[next1] = distance + 1;\n                    q.add(next1);\n                    d.add(distance + 1);\n                }\n            StringBuilder strb = new StringBuilder(x1 + \"\");\n            int next2 = Integer.parseInt(strb.reverse().toString());\n            if (next2 < n)\n                if (!main.visited[next2])\n                {\n                    main.visited[next2] = true;\n                    main.dist[next2] = distance + 1;\n                    q.add(next2);\n                    d.add(distance + 1);\n                }\n        \n        }\n        \n        \/\/ read cases\n        int nCases = Integer.parseInt(main.in.readLine());\n        for (int cas = 1; cas <= nCases; cas++)\n        {\n            int x = Integer.parseInt(main.in.readLine().trim());\n            \n            \/\/ solve\n            main.ans.append(\"Case #\" + cas + \": \" + main.dist[x] + \"\\n\");\n        }\n        \n        \/\/ output\n        System.out.print(main.ans.toString());\n        main.out.write(main.ans.toString());\n        main.out.flush();\n        main.out.close();\n    }\n\n    \/* IO *\/\n    private StringBuilder ans;\n    private BufferedReader in;\n    private BufferedWriter out;\n    private StringTokenizer tok;\n    private int[] dist;\n    private boolean[] visited;\n\n    \/* fields *\/\n}"}
{"idx":"539","func":"class CounterCulture {\n    private static List<Integer> res;\n    private static int up = 1;\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintStream out = System.out;\n        res = new ArrayList<Integer>();\n        res.add(0, 0);\n        res.add(1, 1);\n        \n        int caseNum = in.nextInt();\n        for (int i = 1; i <= caseNum; i++) {\n            if (!in.hasNextInt()) {\n                return;\n            }\n            int numN = in.nextInt();\n            int result = 0;\n            if (numN <= up) {\n                result = res.get(numN);\n            }\n            else {\n                while (up < numN) {\n                    int temp = up;\n                    if (up > reverseInt(up+1)) {\n                        if (reverseInt(reverseInt(up+1)) == up+1){\n                            temp = reverseInt(up+1);\n                        }\n                    }\n                    int tempRes = Math.min(res.get(up)+1, res.get(temp)+1);\n                    res.add(up+1, tempRes);\n                    up++;\n                }\n                result = res.get(numN);\n            }\n            out.printf(\"Case #%d: %d\\n\", i, result);\n            \n        }\n    }\n    \n    private static int reverseInt(int n) {\n        StringBuffer str = new StringBuffer(new Integer(n).toString());\n        return new Integer(str.reverse().toString());\n    }\n}"}
{"idx":"540","func":"class A {\n\n    static Scanner reader;\n    static PrintWriter writer;\n    \n    public static void main(String[] args) throws IOException {\n        reader = new Scanner(new FileReader(\"input\"));\n        writer = new PrintWriter(new FileWriter(\"output\"));\n        int nt = reader.nextInt();\n        for(int tc = 1; tc <= nt; tc++) {\n            int n = reader.nextInt();\n            Queue<Integer> Q = new LinkedList<>();\n            Q.add(0);\n            int[] d = new int[n + 1];\n            Arrays.fill(d, Integer.MAX_VALUE);\n            d[0] = 0;\n            while(d[n] == Integer.MAX_VALUE) {\n                int cur = Q.poll();\n                if(cur + 1 <= n && d[cur + 1] == Integer.MAX_VALUE) {\n                    d[cur + 1] = 1 + d[cur];\n                    Q.add(cur + 1);\n                }\n                StringBuilder sb = new StringBuilder();\n                sb.append(cur);\n                sb = sb.reverse();\n                int r = Integer.parseInt(sb.toString());\n                if(r <= n && d[r] == Integer.MAX_VALUE) {\n                    d[r] = 1 + d[cur];\n                    Q.add(r);\n                }\n            }\n            writer.printf(\"Case #%d: %d\\n\", tc, d[n]);\n        }\n        writer.close();\n        reader.close();\n    }\n    \n}"}
{"idx":"541","func":"class Z1_12 {\n\n    public static void main(String[] args) throws Exception {\n        FileWriter fw = new FileWriter(\"C:\\\\output.txt\");\n        BufferedWriter out = new BufferedWriter(fw);\n        \/\/String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\z1.txt\";\n        String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\A-small-attempt4.in\";\n        \/\/String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\D-large.in\";\n        Scanner scanner = new Scanner(new File(pathname));\n        int tn = scanner.nextInt();\n        scanner.nextLine();\n        int[] xx = new int[1000001];\n        Set<Integer> all = new HashSet<Integer>();\n        for (int x =1;x<=1000000;x++) {\n            all.add(x);\n        }\n        Set<Integer> current = new HashSet<Integer>();\n        current.add(1);\n        xx[1] = 1;\n        int step = 2;\n        while (all.size()>0) {\n            all.removeAll(current);\n            Set<Integer> next = new HashSet<Integer>();\n            for (int x : current) {\n                String xs = String.valueOf(x);\n                String ns = new StringBuilder(xs).reverse().toString();\n                int reverse = Integer.valueOf(ns);\n                if (all.contains(reverse)) {\n                    next.add(reverse);\n                    if (xx[reverse]==0) {\n                        xx[reverse] = step;\n                    }\n                }\n                if (all.contains(x+1)) {\n                    next.add(x+1);\n                    if (xx[x+1]==0) {\n                        xx[x + 1] = step;\n                    }\n                }\n            }\n            current = next;\n            step++;\n        }\n        for (int ti = 1; ti <= tn; ti++) {\n            int n = scanner.nextInt();\n            int x = xx[n];\n            String s;\n            if (x==Integer.MAX_VALUE) {\n                s = \"Case #\" + ti + \": NOT POSSIBLE\";\n            } else {\n                s = \"Case #\" + ti + \": \"+x;\n            }\n            System.out.println(s);\n            out.write(s);\n            out.write(\"\\n\");\n        }\n        out.close();\n    }\n\n}"}
{"idx":"542","func":"class a {\n    public static void main(String[] args){\n        Scanner br = new Scanner(System.in);\n        int t = br.nextInt();\n        for(int c = 1;c<=t;c++){\n            long n = br.nextLong();\n            \n            int ans = 0;\n            \n            HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n            \n            map.put(0l, 0);\n            \n            ArrayDeque<Long> qu = new ArrayDeque<Long>();\n            qu.add(0l);\n            \n            while(qu.size() > 0){\n                long cur = qu.poll();\n                if(cur == n){\n                    ans = map.get(cur);\n                    break;\n                }\n                int dist = map.get(cur);\n                \n                if(!map.containsKey(cur+1)){\n                    map.put(cur+1, dist+1);\n                    qu.add(cur+1);\n                }\n                \n                String rev = new StringBuilder(\"\"+cur).reverse().toString();\n                long next = Long.parseLong(rev);\n                if(!map.containsKey(next)){\n                    map.put(next, dist+1);\n                    qu.add(next);\n                }\n            }\n            \n            System.out.println(\"Case #\"+c+\": \"+ans);\n        }\n    }\n}"}
{"idx":"543","func":"class A {\n\n    public static void main(String[] args) {\n\n        Scanner k = new Scanner(System.in);\n        int T = k.nextInt();\n\n        for(int i = 0; i < T; i++)\n        {\n            long input = k.nextLong();\n            long output = 0;\n\n            while(input != 0)\n            {\n                \/\/System.out.println(input);\n                if(input <= 20)\n                {\n                    output += input;\n                    break;\n                }\n                long flipThis = input;\n                long reverse = 0;\n                while( flipThis != 0 )\n                {\n                    reverse = reverse * 10;\n                    reverse = reverse + flipThis%10;\n                    flipThis = flipThis\/10;\n                }\n                long flipped = reverse;\n                if(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)\/2) == 1)\n                {\n                    input = flipped;\n                }\n                else\n                {\n                    input--;\n                }\n                output++;\n            }\n            System.out.println(\"Case #\"+(i+1)+\": \" + output);\n        }\n    }\n}"}
{"idx":"544","func":"class A {\n\n  public static void main(String[] args) throws FileNotFoundException {\n    Scanner in = new Scanner(new File(\"A-small-attempt0.in\"));\n    PrintWriter out = new PrintWriter(new File(\"A-small-attempt0.out\"));\n\n    int T = in.nextInt();\n    for (int t = 1; t <= T; t++) {\n      \n      int n = in.nextInt();\n      int dp[] = new int[n+1];\n      dp[1] = 1;\n      Queue<Integer> q = new LinkedList<Integer>();\n      q.add(1);\n      \n      while(!q.isEmpty()) {\n        int at = q.poll();\n        int moves = dp[at];\n        if (at == n) break;\n        \n        int next = at + 1;\n        if (next <= n && dp[next] == 0) {\n          dp[next] = moves + 1;\n          q.add(next);\n        } \n        int tmp = at;\n        next = 0;\n        while (tmp > 0) {\n          next = next*10 + tmp % 10;\n          tmp \/= 10;\n        }\n        if (next <= n && dp[next] == 0) {\n          dp[next] = moves + 1;\n          q.add(next);\n        } \n      }\n      \n      out.println(\"Case #\" + t + \": \" + dp[n]);\n    }\n\n    out.close();\n  }\n\n}"}
{"idx":"545","func":"class  Culture{\n   public static void main(String[] args) {\n      Scanner scan = new Scanner(System.in);\n      \n      int[] memo = new int[1000001];\n      \n      for(int i = 1; i < memo.length; i++) {\n         memo[i] = i;\n      }\n      \n      for(int i = 1; i < memo.length; i++) {\n         \/\/System.out.println(i);\n         String inputS = \"\" + i;\n          String outputS = \"\";\n          for(int i1 = inputS.length() - 1; i1 >= 0; i1--) {\n             outputS += inputS.charAt(i1);\n          }\n        int invert = Integer.parseInt(outputS);\n         int offset = 1;\n         while(true) {\n            \n            if(invert >= 1 && invert < memo.length) {\n               if(memo[invert] > memo[i] + offset) {\n                  memo[invert] = memo[i] + offset;\n               } else {\n                  break;\n               }\n            } else {\n               break;\n            }\n            invert++;\n            offset++;\n         }\n      }\n      \n      \/\/System.out.println(\"READY\");\n      \n      int numCases = scan.nextInt();\n      \n      for(int caseNum = 1; caseNum <= numCases; caseNum++) {\n         int countNum = scan.nextInt();\n         \n         System.out.print(\"Case #\" + caseNum + \": \");\n         int startNum = 0;\n         \n         \n         \n         System.out.println(memo[countNum]);\n      }\n      \n   }\n}"}
{"idx":"546","func":"static void main(String args[]) throws Exception\n    {\n        \/\/ BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        \/\/ PrintWriter pw = new PrintWriter(System.out);\n\n        BufferedReader br = new BufferedReader(new     FileReader(\"in.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"try.out\"));\n\n        int T = Integer.parseInt(br.readLine());\n        int TT = T;\n        Arrays.fill(dp,Integer.MAX_VALUE);\n        dp[1]=1;\n\n        for (int i = 1;i<dp.length-1;i++)\n        {\n            dp[i+1]=Math.min(dp[i]+1,dp[i+1]);\n            dp[reverse(i)]=Math.min(dp[i]+1,dp[reverse(i)]);\n        }\n\n\n        while (T-- > 0)\n        {\n            int goal = Integer.parseInt(br.readLine());\n            \n\n\n\n            pw.println(\"Case #\"+(TT-T)+\": \"+dp[goal]);\n            \/\/ System.out.println(\"FOOBAR\");     \n        }\n\n        pw.close();\n    }\n\n\n    static int reverse(int str)\n    {\n        StringBuilder sb = new StringBuilder(Integer.toString(str));\n        sb.reverse();\n        return Integer.parseInt(sb.toString());\n    }\n\n}"}
{"idx":"547","func":"class A {\n\n    public static void main(String[] args) throws Exception{\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(in.readLine());\n        int[] minS = new int[2000000];\n        minS[1] = 1;\n        Queue<Integer> st = new LinkedList<Integer>();\n        st.add(1);\n        while(!st.isEmpty())\n        {\n            int cur = st.poll();\n            if(cur+1 < minS.length && minS[cur+1]==0)\n            {\n                minS[cur+1] = minS[cur]+1;\n                st.add(cur+1);\n            }\n            StringBuilder sb = new StringBuilder(\"\"+cur);\n            int rev = Integer.parseInt(sb.reverse().toString());\n            if(rev < minS.length && minS[rev]==0)\n            {\n                minS[rev] = minS[cur]+1;\n                st.add(rev);\n            }\n        }\n        for (int cas = 1; cas <=T; cas++) {\n            String s = in.readLine();\n            int N = Integer.parseInt(s);\n            System.out.println(\"Case #\"+cas+\": \"+minS[N]);\n        }\n    }\n\n}"}
{"idx":"548","func":"static int[] nums = new int[1000000 + 1];\n\n    public static String reverse(String str) {\n\n        String reversed = new StringBuilder(str).reverse().toString();\n\n        return reversed;\n\n    }\n\n    public static void main (String [] args) throws IOException {\n        BufferedReader f = new BufferedReader(new FileReader(\"test.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"test.out\")));\n        int t = Integer.parseInt(f.readLine());\n        for (int i = 0; i < nums.length; i++) {\n            nums[i] = 0;\n        }\n\n        System.out.println(reverse(\"432100\"));\n        for (int i = 0; i < t; i++) {\n            String numstr = f.readLine();\n            int num = Integer.parseInt(numstr);\n            System.out.println(\"---\" + num);\n            \n            \n            for (int i1 = 1; i1 <= num; i1++) {\n                if ((nums[i1] == 0)) {\n                    int lowest = nums[i1 - 1] + 1;\n                    numstr = Integer.toString(i1);\n                    int reversedInt = Integer.parseInt(reverse(numstr));\n                    String reversed = Integer.toString(reversedInt);\n                    if (numstr.length() == reversed.length() && reversedInt < i1)\n                        lowest = Math.min(lowest, (nums[reversedInt] + 1));\n                    System.out.println(i1 + \", \" + lowest);\n                    nums[i1] = lowest;\n                }\n            }\n            \n            \n            \n            \n            out.println(\"Case #\" + (i+1) + \": \" + nums[num]);\n        }\n\n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"549","func":"class CounterCulture {\n    public static void main(String[] args) throws FileNotFoundException {\n        File input = new File(\"src\/A-small-attempt1.in\");\n\/\/        File input = new File(\"src\/input1\");\n        Scanner sc = new Scanner(input);\n        PrintWriter wr = new PrintWriter(\"output2\");\n        int T = Integer.parseInt(sc.nextLine());\n        for (int i = 0; i< T ; i++) {\n\n            StringBuilder ans = new StringBuilder();\n            ans.append(\"Case #\"+(i+1)+\": \");\n            int N = Integer.parseInt(sc.nextLine());\n            int[] steps = new int[N+1];\n            steps[0]=0;\n            steps[1]=1;\n            for (int j = 2; j<N+1; j++) {\n                if (steps[j]==0) {\n                    steps[j] = steps[j-1] + 1;\n                } else {\n                    steps[j] = Math.min(steps[j],steps[j-1]+1);\n                }\n                StringBuilder tmp = new StringBuilder(\"\"+j);\n                int reverse = Integer.parseInt(tmp.reverse().toString());\n                if (reverse>j && reverse<=N) {\n                    if (steps[reverse]==0) {\n                        steps[reverse]=steps[j]+1;\n                    } else {\n                        steps[reverse] = Math.min(steps[reverse],steps[j]+1);\n                    }\n                }\n            }\n\n            ans.append(steps[N]);\n\n            wr.println(ans);\n            System.out.println(\"case # \"+(i+1)+\" done!\");\n\n        }\n        wr.close();\n    }\n}"}
{"idx":"550","func":"class A {\n    public static void main(String[] args) {\n        try (Scanner sc = new Scanner(System.in)) {\n            int T = sc.nextInt();\n            for (int i = 1; i <= T; ++i) {\n                int ans = -1;\n                int N = sc.nextInt();\n                int[] memo = new int[N+1];\n                for (int j = 1; j <= N; ++j) {\n                    memo[j] = Integer.MAX_VALUE;\n                }\n                for (int j = 1; j <= N; ++j) {\n                    memo[j] = Math.min(memo[j], memo[j-1] + 1);\n                    int k = Integer.parseInt(new StringBuilder(String.valueOf(j)).reverse().toString());\n\n                    if (j != k && k > j && k <= N) {\n                        memo[k] = memo[j] + 1;\n                        \/\/ System.out.println(k + \":\" + memo[k]);\n                    }\n                    \/\/ System.out.println(j + \":\" + memo[j]);\n                }\n                ans = memo[N];\n                System.out.printf(\"Case #%d: %d\\n\", i, ans);\n            }\n        }\n    }\n}"}
{"idx":"551","func":"class A {\n    static Scanner in = new Scanner(System.in);\n    \n    static PrintStream out = System.out;\n    \n    public static void main(String[] args) {\n        int T = in.nextInt();\n        \n        long[] next = new long[2];\n        \n        for (int t = 1; t <= T; t++){\n            long N = in.nextLong();\n            \n            Queue<Long> queue = new LinkedList<>();\n            HashSet<Long> S = new HashSet<>();\n            HashMap<Long, Long> distance = new HashMap<>();\n            \n            queue.add(1L);\n            S.add(1L);\n            distance.put(1L, 0L);\n            \n            while(!queue.isEmpty()){\n                long number = queue.poll();\n                \n                if (number == N){\n                    break;\n                }\n                \n                next[0] = number + 1;\n                StringBuilder builder = new StringBuilder(Long.toString(number));\n                next[1] = Long.parseLong(builder.reverse().toString());\n                \n                for (int i = 0; i < 2; i++){\n                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){\n                        queue.add(next[i]);\n                        S.add(next[i]);\n                        distance.put(next[i], distance.get(number) + 1);\n                    }\n                }\n            }\n            \n            out.println(String.format(\"Case #%d: %d\", t, distance.get(N) + 1));\n        }\n    }\n}"}
{"idx":"552","func":"class A {\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for(int z = 1; z <= t; z ++){\n            int n = in.nextInt();\n            int[] a = new int[n + 1];\n            Arrays.fill(a, -1);\n            a[1] = 1;\n            Queue<Integer> q = new LinkedList<Integer>();\n            q.add(1);\n            while(!q.isEmpty()){\n                int at = q.poll();\n                if(at == n)break;\n                if(at > n)continue;\n                if(a[at + 1] == -1){\n                    a[at + 1] = a[at] + 1;\n                    q.add(at + 1);\n                }\n                long a1 = at;\n                int len = 0;\n                long aa = a1;\n                while(aa!=0){\n                    aa\/=10;\n                    len++;\n                }\n                len--;\n                long ans = 0;\n                while(a1>0){\n                    ans+=(a1%10)*(Math.pow(10,  len));\n                    len--;\n                    a1\/=10;\n                }\n                int to = (int)ans;\n                if(to <= at || to > n || a[to] != -1)\n                    continue;\n                q.add(to);\n                a[to] = a[at] + 1;\n            }\n            System.out.println(\"Case #\" + z + \": \" + a[n]);\n        }\n    }\n}"}
{"idx":"553","func":"class A {\n    Scanner input;\n    PrintWriter output;\n    public static int MAXIMUM = 1000000;\n\n    private static int[] lookup = new int[MAXIMUM + 1];\n\n    public A(Scanner input, PrintWriter output){\n        this.input = input;\n        this.output = output;\n    }\n\n    public static void main(String[] args){\n        final long startTime = System.currentTimeMillis();\n        File file = new File(\"A.in\");\n        Scanner input = null;\n        try {\n            input = new Scanner(file).useLocale(Locale.US);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        PrintWriter output = null;\n        lookup[1] = 1;\n        for(int i = 1; i < MAXIMUM; i++){\n            lookup[i + 1] = lookup[i + 1] == 0 ? lookup[i] + 1 : Math.min(lookup[i + 1], lookup[i] + 1);\n            int flipped = Integer.parseInt(new StringBuilder(((Integer) i).toString()).reverse().toString());\n            if(flipped > i){\n                if(flipped <= MAXIMUM)\n                lookup[flipped] = lookup[flipped] == 0 ? lookup[i] + 1 : Math.min(lookup[flipped], lookup[i] + 1);\n            } else if(lookup[flipped] > lookup[i] + 1) {\n                System.out.println(\"we have to recalculate the past!\");\n            }\n        }\n        try {\n            output = new PrintWriter(\"A.out\", \"UTF-8\");\n        } catch (FileNotFoundException | UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n\n        int problems = input.nextInt();\n        for(int i = 1; i <= problems; i++){\n            A r = new A(input, output);\n            int number = r.input.nextInt();\n            r.output.println(\"Case #\" + i + \": \" + A.lookup[number]);\n        }\n        output.close();\n        final long endTime = System.currentTimeMillis();\n        System.out.println(\"Total execution time: \" + (endTime - startTime) + \" ms\");\n    }\n}"}
{"idx":"554","func":"class A {\n\n    public static void main(String [] args) throws IOException {\n        String inputFile = \"src\/A-small-1.in\";\n        Scanner in = new Scanner(new File(inputFile));\n        PrintStream out = new PrintStream(inputFile.substring(0, inputFile.length()-2)+\"out\");\n        int cases = in.nextInt();\n        for (int cs = 1; cs <= cases; cs++) {\n            long n = in.nextLong();\n            A a = new A(n);\n            String ans = \"Case #\"+cs+\": \"+a.minSteps;\n            out.println(ans);\n            System.out.println(ans);\n        }\n        out.close();\n        in.close();\n    }\n    \n    TreeMap<Long, Integer> queue = new TreeMap<>();\n    HashMap<Long,Integer> seen = new HashMap<>();\n    int minSteps = Integer.MAX_VALUE;\n    \n    public A(long n) {\n        queue.put(n, 1);\n        while(!queue.isEmpty()) {\n            Entry<Long, Integer> e = queue.pollFirstEntry();\n            long v = e.getKey();\n            int s = e.getValue();\n            if (v == 1) {\n                minSteps = Math.min(s, minSteps);\n                continue;\n            }\n            if (s >= minSteps) { continue; }\n            {\n                Integer ps = seen.get(v-1);\n                if (ps == null || ps > s+1) {\n                    queue.put(v-1, s+1);\n                    seen.put(v-1, s+1);\n                }\n            }\n            if (v % 10 != 0) {\n                long vr = Long.parseLong(new StringBuilder(Long.toString(v)).reverse().toString());\n                if (vr < v){\n                    Integer ps = seen.get(vr);\n                    if (ps == null || ps > s+1) {\n                        queue.put(vr, s+1);\n                        seen.put(vr, s+1);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"idx":"555","func":"class Solution2 {\n    public static void main(String[] args) throws IOException {\n        \/\/ BufferedReader br = new BufferedReader(\n        \/\/ new FileReader(\n        \/\/ \"\/Users\/vladimir\/Documents\/workspaceg\/GGL\/src\/codejam15\/B-small-attempt2.in\"));\n        BufferedReader br = new BufferedReader(new FileReader(\"\/Users\/vladimir\/Documents\/workspaceg\/GGL\/src\/codejam15\/A-small-attempt3.in\"));\n        int T = Integer.valueOf(br.readLine());        \n        PrintWriter writer = new PrintWriter(\"\/Users\/vladimir\/Documents\/workspaceg\/GGL\/src\/codejam15\/output.txt\", \"UTF-8\");\n\n        for (int i = 0; i < T; i++) {\n            int N = Integer.valueOf(br.readLine());            \n            int[] tillHere = new int[N + 1];\n            tillHere[1] = 1;            \n            for(int j = 2; j <= N; j++) {\n                if(tillHere[j] != 0) {\n                    tillHere[j] = Math.min(tillHere[j - 1] + 1, tillHere[j]);\n                } else {\n                    tillHere[j] = tillHere[j - 1] + 1;\n                }\n                String s = String.valueOf(j);\n                StringBuffer sb = new StringBuffer();        \n                for(int i1 = s.length() - 1; i1 >= 0; i1--) {\n                    sb.append(s.charAt(i1));\n                }\n                int r = (Integer.valueOf(sb.toString()));\n                if(r <= N && r > j) {\n                    tillHere[r] = tillHere[j] + 1;\n                }\n            }\n                        \n            writer.println(\"Case #\" + (i + 1) + \": \" + tillHere[N]);\n        }\n        writer.close();\n    }\n}"}
{"idx":"556","func":"class A {\n    static PrintWriter pw;\n    public static void main(String args[]) throws Exception{\n        BufferedReader input = new BufferedReader(new FileReader(\"..\/GoogleCodeJam2015R1B\/io\/A-small-attempt0.in\"));\n        pw = new PrintWriter(new FileWriter(\"..\/GoogleCodeJam2015R1B\/io\/output.txt\"));\n        \n        int[] numsper = new int[1000001];\n        for(int j = 0 ; j <= 1000000 ; j ++){\n            numsper[j] = Integer.MAX_VALUE;\n        }\n        numsper[0] = 0;\n        Queue<String> q = new LinkedList<String>();\n        q.add(\"0,0\");\n        while(!q.isEmpty()){\n            String[] s = q.poll().split(\",\");\n            int num = Integer.parseInt(s[0]);\n            int turn = Integer.parseInt(s[1]);\n            if((num + 1) >= 1000001)continue;\n            \n            if(numsper[num + 1] > (turn + 1)){\n                numsper[num + 1] = turn + 1;\n                q.add((num + 1)+\",\"+(turn + 1));\n            }\n            StringBuilder sb = new StringBuilder();\n            sb.append(s[0]);\n            int revnum = Integer.parseInt(sb.reverse().toString());\n            if(numsper[revnum] > (turn + 1)){\n                numsper[revnum] = turn + 1;\n                q.add((revnum)+\",\"+(turn + 1));\n            }\n        }\n        \n        \n        int T = Integer.parseInt(input.readLine());\n        for(int i = 0 ; i < T ; i++){\n            int N = Integer.parseInt(input.readLine());\n            pw.println(\"Case #\"+(i+1)+\": \"+numsper[N]);\n        }\n        pw.flush();\n        input.close();\n        pw.close();\n    }\n}"}
{"idx":"557","func":"static void main (String[] args) throws java.lang.Exception {\n        int T = Integer.parseInt(br.readLine());\n        int[] list1 = new int[1000001];\n        list1[0] = 0;\n        list1[1] = 1;\n        for (int i2=2; i2<1000001; i2++) {\n            list1[i2] = 9999999;\n        }\n        \n        for (int i1=1; i1<1000001; i1++) {\n            String strI = Integer.toString(i1);\n            int reverseI = 0;\n            for (int k=strI.length()-1; k>=0; k--) {\n                reverseI *= 10;\n                reverseI += Integer.parseInt(\"\" + strI.charAt(k));\n            }\n        \n            if (i1 != 1000000) list1[i1+1] = Math.min(list1[i1+1], list1[i1] + 1);\n            if (reverseI <= 1000000) list1[reverseI] = Math.min(list1[reverseI], list1[i1] + 1);\n        }\n        int[] list = list1;\n        for (int i=0; i<T; i++){\n            int N = Integer.parseInt(br.readLine());\n            System.out.println(\"Case #\" + (i + 1) + \": \" + list[N]);\n        }\n    }\n}"}
{"idx":"558","func":"class CounterCulture {\n    CounterCulture(Scanner in, PrintWriter out){\n        int tests = in.nextInt();\n        \n        \n        \n        int[] ans = new int[2000000];\n        Arrays.fill(ans, Integer.MAX_VALUE);\n        ArrayDeque<Integer> q = new ArrayDeque<>();\n        boolean[] seen = new boolean[ans.length];\n        seen[1] = true;\n        q.add(1);\n        int steps = 0;\n        while(!q.isEmpty()){\n            steps++;\n            int size = q.size();\n            for(int i= 0; i<size; i++){\n                int v = q.remove();\n                ans[v] = Math.min(ans[v], steps);\n                int rev = Integer.parseInt(new StringBuilder(\"\"+v).reverse().toString());\n                v++;\n                if(v<ans.length && !seen[v]){\n                    seen[v] = true;\n                    q.add(v);\n                }\n                if(rev<ans.length && !seen[rev]){\n                    seen[rev] = true;\n                    q.add(rev);\n                }\n            }\n        }\n        \n\/\/        System.out.println(tests);\n        \n        for(int t = 1; t<=tests; t++){\n            int n = in.nextInt();\n            out.printf(\"Case #%d: %d\\n\", t, ans[n]);\n        }\n        out.close();\n    }\n    public static void main(String[] args) throws FileNotFoundException {\n        String name = \"A-small-attempt1\";\n\/\/        new CounterCulture(new Scanner(System.in), new PrintWriter(System.out));\n        new CounterCulture(new Scanner(new File(name+\".in\")), new PrintWriter(new File(name+\".out\")));\n    }\n}"}
{"idx":"559","func":"class Problem1 {\n    public static void main(String args[]) throws IOException\n    {\n        long t = System.currentTimeMillis();\n\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        long[] dp = new long[1000001];\n        Arrays.fill(dp, Long.MAX_VALUE\/10);\n        dp[0] = 0;\n        for(int i=1; i<1000001; i++)\n        {\n            dp[i] = Math.min(1 + dp[i-1], dp[i]);\n            if(i % 10 != 0) dp[i] = Math.min(dp[i], 1 + dp[rev(i)]);\n        }\n        for(int ii = 1; ii <= T; ii++)\n        {        \n            int N = Integer.parseInt(br.readLine());\n            System.out.println(\"Case #\"+ii+\": \"+dp[N]);\n        }\n        System.out.println(System.currentTimeMillis()-t);\n    }\n    public static int rev(int N)\n    {\n        String s = N+\"\";\n        s = new StringBuffer(s).reverse().toString();\n        return Integer.parseInt(s);\n    }\n}"}
{"idx":"560","func":"class BigCount {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"b.in\"));\n        \/\/Scanner in = new Scanner(System.in);\n        int cases = in.nextInt();\n        BigInteger twenty = new BigInteger(\"20\");\n        for (int caseNo = 1; caseNo <= cases; caseNo++) {\n            BigInteger val = in.nextBigInteger();\n            int count = 0;\n            \n            while (val.compareTo(twenty) > 0) {\n                String sVal = val.toString();\n                \/\/ char first = sVal.charAt(0);\n                char last = sVal.charAt(sVal.length() - 1);\n                if (last != '1') {\n                    val = val.subtract(BigInteger.ONE);\n                    count++;\n                } else\n                \/\/ We know the last digit is 1\n                if (val.compareTo(new BigInteger(\"1000\")) < 0 ) {\n\n                    int result = 0;\n                            \/\/ System.err.print(\"reverse of \" + i + \" is \");\n                    \/\/        while (i > 0) {\n                    \/\/            result = result * 10 + i % 10;\n                    \/\/            i \/= 10;\n                    \/\/        }\n                            \/\/ System.err.println(result);\n                            \n                            String forward = val.toString();\n                            String bw = \"\";\n                            for (int j = 0; j < forward.length(); j++)\n                                bw = forward.charAt(j) + bw;\n                    BigInteger rev = new BigInteger(bw);\n                    if (rev.compareTo(val) < 0)\n                        val = rev;\n                    else\n                        val = val.subtract(BigInteger.ONE);\n                    count++;\n                } else {\n                    char second = sVal.charAt(sVal.length() - 2);\n                    if (second != '0') {\n                        val = val.subtract(BigInteger.ONE);\n                        count++;\n                    } \/\/ The last 2 digits are 01\n                    \n                    \/\/  DAMNATION, this is ugly!\n                    else if (val.compareTo(new BigInteger(\"100000\"))  < 0) {\n\n                        int result = 0;\n                                \/\/ System.err.print(\"reverse of \" + i + \" is \");\n                        \/\/        while (i > 0) {\n                        \/\/            result = result * 10 + i % 10;\n                        \/\/            i \/= 10;\n                        \/\/        }\n                                \/\/ System.err.println(result);\n                                \n                                String forward = val.toString();\n                                String bw = \"\";\n                                for (int j = 0; j < forward.length(); j++)\n                                    bw = forward.charAt(j) + bw;\n                        BigInteger rev = new BigInteger(bw);\n                        if (rev.compareTo(val) < 0)\n                            val = rev;\n                        else\n                            val = val.subtract(BigInteger.ONE);\n                        count++;\n                    } else {\n                        char third = sVal.charAt(sVal.length() - 3);\n                        if (third != '0') {\n                            val = val.subtract(BigInteger.ONE);\n                            count++;\n                        } \/\/ The last 3 digits are 001\n                        else if (val.compareTo(new BigInteger(\"10000000\")) < 0) {\n\n                            int result = 0;\n                                    \/\/ System.err.print(\"reverse of \" + i + \" is \");\n                            \/\/        while (i > 0) {\n                            \/\/            result = result * 10 + i % 10;\n                            \/\/            i \/= 10;\n                            \/\/        }\n                                    \/\/ System.err.println(result);\n                                    \n                                    String forward = val.toString();\n                                    String bw = \"\";\n                                    for (int j = 0; j < forward.length(); j++)\n                                        bw = forward.charAt(j) + bw;\n                            BigInteger rev = new BigInteger(bw);\n                            if (rev.compareTo(val) < 0)\n                                val = rev;\n                            else\n                                val = val.subtract(BigInteger.ONE);\n                            count++;\n                        }\n                        else {\n                            char fourth = sVal.charAt(sVal.length() - 4);\n                            if (fourth != '0') {\n                                val = val.subtract(BigInteger.ONE);\n                                count++;\n                            } \/\/ The last 4 digits are 0001\n                            else if (val.compareTo(new BigInteger(\"1000000000\")) < 0) {\n\n                                int result = 0;\n                                        \/\/ System.err.print(\"reverse of \" + i + \" is \");\n                                \/\/        while (i > 0) {\n                                \/\/            result = result * 10 + i % 10;\n                                \/\/            i \/= 10;\n                                \/\/        }\n                                        \/\/ System.err.println(result);\n                                        \n                                        String forward = val.toString();\n                                        String bw = \"\";\n                                        for (int j = 0; j < forward.length(); j++)\n                                            bw = forward.charAt(j) + bw;\n                                BigInteger rev = new BigInteger(bw);\n                                if (rev.compareTo(val) < 0)\n                                    val = rev;\n                                else\n                                    val = val.subtract(BigInteger.ONE);\n                                count++;\n                            }\n                            \n                            \/\/  You know, I really should refactor this to make it more general, but what the hell...I'm\n                            \/\/  sorta getting in the cut and paste groove...\n                            else {\n                                char fifth = sVal.charAt(sVal.length() - 5);\n                                if (fifth != '0') {\n                                    val = val.subtract(BigInteger.ONE);\n                                    count++;\n                                } \/\/ The last 5 digits are 00001\n                                else if (val.compareTo(new BigInteger(\"100000000000\")) < 0) {\n\n                                    int result = 0;\n                                            \/\/ System.err.print(\"reverse of \" + i + \" is \");\n                                    \/\/        while (i > 0) {\n                                    \/\/            result = result * 10 + i % 10;\n                                    \/\/            i \/= 10;\n                                    \/\/        }\n                                            \/\/ System.err.println(result);\n                                            \n                                            String forward = val.toString();\n                                            String bw = \"\";\n                                            for (int j = 0; j < forward.length(); j++)\n                                                bw = forward.charAt(j) + bw;\n                                    BigInteger rev = new BigInteger(bw);\n                                    if (rev.compareTo(val) < 0)\n                                        val = rev;\n                                    else\n                                        val = val.subtract(BigInteger.ONE);\n                                    count++;\n                                }                        \n                                else {\n                                    char sixth = sVal.charAt(sVal.length() - 6);\n                                    if (sixth != '0') {\n                                        val = val.subtract(BigInteger.ONE);\n                                        count++;\n                                    } \/\/ The last 6 digits are 000001\n                                    else if (val.compareTo(new BigInteger(\"10000000000000\")) < 0) {\n\n                                        int result = 0;\n                                                \/\/ System.err.print(\"reverse of \" + i + \" is \");\n                                        \/\/        while (i > 0) {\n                                        \/\/            result = result * 10 + i % 10;\n                                        \/\/            i \/= 10;\n                                        \/\/        }\n                                                \/\/ System.err.println(result);\n                                                \n                                                String forward = val.toString();\n                                                String bw = \"\";\n                                                for (int j = 0; j < forward.length(); j++)\n                                                    bw = forward.charAt(j) + bw;\n                                        BigInteger rev = new BigInteger(bw);\n                                        if (rev.compareTo(val) < 0)\n                                            val = rev;\n                                        else\n                                            val = val.subtract(BigInteger.ONE);\n                                        count++;\n                                    }\n                                    else {  \/\/  And one to grow on...\n                                        char seventh = sVal.charAt(sVal.length() - 7);\n                                        if (seventh != '0') {\n                                            val = val.subtract(BigInteger.ONE);\n                                            count++;\n                                        } \/\/ The last 7 digits are 0000001\n                                        else if (val.compareTo(new BigInteger(\"1000000000000000\")) < 0) {\n\n                                            int result = 0;\n                                                    \/\/ System.err.print(\"reverse of \" + i + \" is \");\n                                            \/\/        while (i > 0) {\n                                            \/\/            result = result * 10 + i % 10;\n                                            \/\/            i \/= 10;\n                                            \/\/        }\n                                                    \/\/ System.err.println(result);\n                                                    \n                                                    String forward = val.toString();\n                                                    String bw = \"\";\n                                                    for (int j = 0; j < forward.length(); j++)\n                                                        bw = forward.charAt(j) + bw;\n                                            BigInteger rev = new BigInteger(bw);\n                                            if (rev.compareTo(val) < 0)\n                                                val = rev;\n                                            else\n                                                val = val.subtract(BigInteger.ONE);\n                                            count++;\n                                        }\n                                    }  \/\/  7\n                                }\/\/6\n                            }\/\/5\n                        }\/\/4\n\n\n\n                    }\n\n                }\n            }\n            count += val.intValue();\n\n            System.out.println(\"Case #\" + caseNo + \": \" + count);\n\n        }\n    }\n\n}"}
{"idx":"561","func":"class A {\n\n    static int[] q;\n    \n    \/*************************************************************************\/\n\n    public static void main(String[] args) throws Exception {\n        int n = 1000006;\n        q= new int[n];\n        q[1] = 1;\n        for (int i = 2; i < n; i++) {\n            String s0 = \"\"+i;\n            String s1 = new StringBuilder(s0).reverse().toString();\n            int i1 = Integer.parseInt(s1);\n            int q1 = q[i-1] + 1;\n            int q2 = Integer.MAX_VALUE;\n            if (i % 10 != 0 && i1 < i) {\n                q2 = q[i1] + 1;\n            }\n            q[i] = Math.min(q1, q2);\n        }\n        String load = \"src\/a-small-attempt0.in\";\n        String save = \"src\/a-small-attempt0.out\";\n        in = new Scanner(new File(load));\n        out = new PrintWriter(new File(save));\n        int T = in.nextInt();\n        for (int t = 1; t <= T; t++) {\n            out.print(\"Case #\" + t + \": \");\n            System.out.println(\"Case #\" + t + \": ............\");\n            A r = new A();\n            int N = A.in.nextInt();\n            A.out.println(A.q[N]);\n        }\n        out.close();\n    }\n\n    static Scanner in;\n    static PrintWriter out;\n}"}
{"idx":"562","func":"class AA {\n\n    public static void main(String[] args) throws Exception{\n        Scanner in = new Scanner(new File(\"A.in\"));\n        FileWriter out = new FileWriter(\"aout.txt\");\n        \n        int T = in.nextInt();\n        \n        for (int i = 1; i <= T; i++) {\n            int N = in.nextInt();\n            int n = N;\n            int r = 1;\n            ArrayList<Integer> a = new ArrayList<Integer>();\n            boolean[] b = new boolean[1000001];\n            a.add(new Integer(1));\n            b[1] = true;\n            boolean c = true;\n            if (N <= 20) r = N;\n            else {\n                while (c) {\n                    r++;\n                    int l = a.size();\n                    for (int j = 0; j < l; j++) {\n                        Integer k = a.remove(0);\n                        String s1 = k.toString();\n                        String o = \"\";\n                        \/\/if (n.intValue() % 10 > 0)\n                            for (int i1 = 0; i1 < s1.length();) {\n                                o = s1.substring(i1, ++i1) + o;\n                            }\n                        Integer rev = new Integer(Integer.parseInt(o));\n                        if (!b[rev.intValue()]) {\n                            b[rev] = true;\n                            a.add(rev);\n                        }\n                        if (!b[++k]) {\n                            b[k] = true;\n                            a.add(k);\n                        }\n                        if (rev == N || k == N) {\n                            c = false;\n                            break;\n                        }\n                    }\n                }\n            }\n            String s = \"Case #\" + i + \": \" + r + \"\\n\";\n            System.out.print(s);\n            out.write(s);\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"563","func":"class R1BA {\n\n    \n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for(int i=1; i<=t; i++){\n            long n = in.nextLong();\n            long k = n;\n            int log = 1; \/\/log is num of digits\n            long totalPower = 1;\n            while(k\/10>0){\n                log++;\n                k=k\/10;\n                totalPower = totalPower*10;\n            }\n            \n            long total = 0;\n            if(log == 1){\n                total = n;\n            } else {\n                total = 10;\n                long power = 1;\n                for(int j = 2; j<= log-1; j++){\n                    if(j%2==0) power = power*10;\n                    total+=power; \/\/now we're at 999900001\n                    total+=(1+(j%2)*9)*power-1;\n                }\n                \/\/last power of 10...\n                if(log%2==0) power=power*10;\n                if(n!=totalPower){\n                    long rem = n%(power*(1+(log%2)*9)); \/\/last (log+1)\/2 digits \n                    k = n\/(power*(1+(log%2)*9));\n                    \n                    if(rem==0){\n                        k--;\n                        rem = power*(1+(log%2)*9);\n                    }\n                    if(k<=power\/10){\n                        total+=n-totalPower;\n                    } else {\n                        long power2 = power\/10;\n                        while(k>0){\n                            total+=power2*(k%10);\n                            power2=power2\/10;\n                            k=k\/10;\n                        }\n                        total+=rem;\n                    }\n                }\n                \n            }\n            \n            \n            System.out.print(\"Case #\" + i + \": \");\n            System.out.print(total);\n            System.out.println();\n        }\n        \n        in.close();\n    }\n}"}
{"idx":"564","func":"class A\n{\n\n    static int N;\n\n    static int[] times = new int[1000001];\n\n    public static void main(String[] args) throws IOException\n    {\n        String fileName = \"A-small0\";\n        Scanner in = new Scanner(new File(fileName + \".in\"));\n        PrintWriter out = new PrintWriter(new FileWriter(fileName + \".out\"));\n\n        for (int check = 1; check <= 11; check++)\n            times[check] = check;\n\n        for (int check = 12; check <= 1000000; check++)\n        {\n            times[check] = 1000001;\n        }\n\n        for (int check = 12; check <= 1000000; check++)\n        {\n            int number = check;\n            int reverse1 = 0;\n            while (number > 0)\n            {\n                reverse1 = 10 * reverse1 + number % 10;\n                number \/= 10;\n            }\n            int reverse = reverse1;\n            times[check] = Math.min(times[check], times[check - 1] + 1);\n            if (reverse < times.length - 1)\n                times[reverse] = Math.min(times[reverse], times[check] + 1);\n        }\n\n        int noOfCases = in.nextInt();\n        for (int caseNo = 1; caseNo <= noOfCases; caseNo++)\n        {\n            N = in.nextInt();\n            int noOfTimes = times[N];\n\n            System.out.printf(\"Case #%d: %d%n\", caseNo, noOfTimes);\n            out.printf(\"Case #%d: %d%n\", caseNo, noOfTimes);\n        }\n        in.close();\n        out.close();\n\n    }\n\n}"}
{"idx":"565","func":"class A1 {\n\n    public static void main(String[] args) throws Exception {\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n        int[] C = new int[1000001]; \/\/ min counts\n        for (int i = 0; i < C.length; i++)\n            C[i] = i;\n        for (int n = 2; n <= C.length; n++) {\n            C[n] = Math.min(C[n], C[n - 1] + 1);\n            int r = Integer.parseInt(new StringBuilder(String.valueOf(n)).reverse().toString());\n            if (r > n)\n                C[r] = Math.min(C[r], C[n] + 1);\n        }\n        \n        int T = Integer.parseInt(in.readLine());\n        for (int t = 1; t <= T; t++) {\n            int N = Integer.parseInt(in.readLine());\n            out.println(\"Case #\" + t + \": \" + C[N]);\n        }\n        out.close();\n    }\n\n}"}
{"idx":"566","func":"class Brattleship {\n    \n    public static void main(String[] args) {\n        String root_path = \"C:\/Vijay\/Workspaces\/GoogleCodeJam\/\";\n        String fileName=root_path+\"inputFiles\/2015\/Brattleship\/A-small-attempt0\";\n        \n        String inputFileName = fileName+\".in\";\n        String outputFileName = fileName+\"_out.txt\";\n\n        try (Scanner reader = new Scanner(new BufferedReader(new FileReader(inputFileName)));\n            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFileName), \"utf-8\"))){\n           \n            int T = reader.nextInt();\n            for(int caseN=1;caseN<=T;caseN++){\n                int R = reader.nextInt();\n                int C = reader.nextInt();\n                int W = reader.nextInt();\n                int R1 = R;\n                int result1=0;\n                R1=1;\n                int d=C-W;\n                \n                int a=0;\n                if(d>0){\n                    a=d\/W;\n                    int b=d%W;\n                    if(b>0)\n                        a++;\n                }\n                result1=a+W;\n                int result = result1;\n                \/\/ write output\n                writer.write(\"Case #\"+caseN+\": \"+result);\n                writer.newLine();\n            }\n            \n        } catch (IOException ex) {\n            System.out.println(\"Exception:\"+ex.getMessage());\n        }\n        System.out.println(\"Done executing\");\n     }\n}"}
{"idx":"567","func":"static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        int nData = in.nextInt();\n        in.nextLine();\n        \n        for (int asdf = 0; asdf < nData; asdf++)\n        {\n            \/\/solve the problem\n            int rows = in.nextInt();\n            int cols = in.nextInt();\n            int width = in.nextInt();\n            \n            \/\/main answer\n            int perrow = cols \/ width;\n            int answer = perrow * rows;\n            answer += width - 1;\n            \n            \/\/extra guesses\n            if (cols % width != 0)\n            {\n                answer++;\n            }\n            \n            System.out.println(\"Case #\" + (asdf+1) + \": \" + answer);\n        }\n    }\n}"}
{"idx":"568","func":"class A {\n    public static void main(String[] args) throws IOException {\n        String fileName = \"A-large\";\n        Scanner s = null;\n        PrintWriter p = null;\n        try {\n            s = new Scanner(new FileInputStream(fileName + \".in\"));\n            p = new PrintWriter(new File(fileName + \".out\"));\n        } catch (IOException e) {\n        }\n        int t = s.nextInt();\n        for (int i = 0; i < t; i++) {\n            int r = s.nextInt();    \/\/ row\n            int c = s.nextInt();    \/\/ column\n            int w = s.nextInt();    \/\/ width\n            System.out.println(c \/ w * r + (w - 1) + (c % w == 0 ? 0 : 1));\n            p.println(\"Case #\" + (i + 1) + \": \" + (c \/ w * r + (w - 1) + (c % w == 0 ? 0 : 1)));\n        }\n        p.close();\n        s.close();\n    }\n}"}
{"idx":"569","func":"class A\n{\n    public static void main(String [] args) throws Exception\n    {\n        Scanner input = new Scanner(new File(\"in\"));\n        FileWriter output = new FileWriter(new File(\"out\"));\n        int numCases = input.nextInt();\n        for (int n = 1; n <= numCases; n++)\n        {\n            int R = input.nextInt();\n            int C = input.nextInt();\n            int W = input.nextInt();\n            \n            int result=C\/W;\n            result=result*R;\n            result=result+W;\n            if(C%W==0)\n                result--;\n            \n            System.out.print(\"Case #\"+ n +\": \" + result + \"\\n\");\n            output.write(\"Case #\"+ n +\": \" + result + \"\\n\");\n        }\n        output.flush();\n        output.close();\n    }\n}"}
{"idx":"570","func":"static void main (String[] args) throws java.lang.Exception {\n        int T = Integer.parseInt(br.readLine());\n        for (int i=0; i<T; i++){\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int R = Integer.parseInt(st.nextToken());\n            int C = Integer.parseInt(st.nextToken());\n            int W = Integer.parseInt(st.nextToken());\n            \n            int count = (int)(W + Math.ceil(((double)(C-W)\/W)));\n            \n            int putout = (int)(Math.floor(((double)(C\/W)))) * (R-1);\n            System.out.println(\"Case #\" + (i+1) + \": \" + (count + putout));\n        }\n    }\n}"}
{"idx":"571","func":"class A {\n    public static void main(String[] args) throws FileNotFoundException {\n        Locale.setDefault(Locale.US);\n\/\/        try (Scanner scanner = new Scanner(new File(\"a_example.in\"))) {\n\/\/        try (Scanner scanner = new Scanner(new File(\"a_small.in\"))) {\n        try (Scanner scanner = new Scanner(new File(\"a_large.in\"))) {\n            int numberOfCases = scanner.nextInt();\n                        \n            for (int i = 1; i <= numberOfCases; i++) {\n                int R = scanner.nextInt();\n                int C = scanner.nextInt();\n                int W = scanner.nextInt();\n                \n                int solution = R * (C \/ W) + W;\n                if (C % W == 0) {\n                    solution--;\n                }\n                System.out.println(\"Case #\" + i + \": \" + solution);\n            }\n        }\n    }\n}"}
{"idx":"572","func":"class ProblemA {\n\n    private static final String IN_DIR = \"inputs\";\n    private static final String OUT_DIR = \"outputs\";\n\n    private static final String IN_FILE = \"A-large.in\";\n    private static final String OUT_FILE = \"output_a.txt\";\n    \n    public static void main(String[] args) {\n        Scanner sc = null;\n        BufferedWriter out = null;\n\n        try {\n            sc = new Scanner(new File(IN_DIR + \"\/\" + IN_FILE));\n            out = new BufferedWriter(new FileWriter(OUT_DIR + \"\/\" + OUT_FILE));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        \n        int numTests = sc.nextInt();\n        sc.nextLine();\n        for (int i = 0; i < numTests; i++) {\n            try {\n                int caseNum = i+1;\n                String inrow = sc.nextLine();\n                Scanner sc2 = new Scanner(inrow);\n                int R = sc2.nextInt();\n                int C = sc2.nextInt();\n                int W = sc2.nextInt();\n                \n                \/\/ for all inputs\n                if (C % W == 0) {\n                    out.write(\"Case #\" + caseNum + \": \" + ((C\/W)*R + (W-1)) + \"\" + \"\\n\");\n                } else {\n                    out.write(\"Case #\" + caseNum + \": \" + ((C\/W)*R + W) + \"\" + \"\\n\");\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        \n        try {\n            sc.close();\n            out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    \n}"}
{"idx":"573","func":"class Brattleship {\n\n    private static String inFile=\"A-large.in\";\n    private static String outFile=\"A-large.out\";\n    private static String encoding = \"UTF-8\";\n    \n    public static void main(String[] args) {\n        try {\n            Scanner scanner = new Scanner(new FileInputStream(inFile), encoding);\n            BufferedWriter writer = new BufferedWriter(new FileWriter(outFile));\n            int nCases = Integer.parseInt(scanner.nextLine());\n            \n            for (int i = 0; i < nCases; i++) {\n                System.out.println(\"Case #\" + (i + 1) + \" start\");\n                String[] caseValues = scanner.nextLine().split(\" \");\n                int R=Integer.parseInt(caseValues[0]), C=Integer.parseInt(caseValues[1]), W=Integer.parseInt(caseValues[2]);\n                System.out.println(\" R=\" + R + \" C=\"+C+\" W=\"+W);\n                int score = R*(C\/W)+W;\n                if (C%W==0)\n                score -=1;\n                String val = String.valueOf(score);\n                writer.write(\"Case #\" + (i + 1) + \": \" + val + \"\\n\");\n                System.out.println(\"Case #\" + (i + 1) + \" result: \"+val);\n            }\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n    }\n}"}
{"idx":"574","func":"class A {\n    public static void main(String[] args) throws NumberFormatException,\n            IOException {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"input.txt\"))) {\n            int TC = Integer.parseInt(br.readLine());\n            for (int tc = 1; tc <= TC; tc++) {\n                String[] line = br.readLine().split(\" \");\n                int R = Integer.parseInt(line[0]);\n                int C = Integer.parseInt(line[1]);\n                int W = Integer.parseInt(line[2]);\n\n                int ans = 0;\n                if (C == W)\n                    ans = W;\n                else {\n                    if (C % W == 0)\n                        ans += C \/ W - 1;\n                    else\n                        ans += C \/ W;\n\n                    ans += W;\n                }\n\n                System.out.println(\"Case #\" + tc + \": \" + ans);\n            }\n        }\n    }\n}"}
{"idx":"575","func":"class Main_Round1C_2015_A {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt();\n        for (int casei = 1; casei <= t; casei++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            int w = sc.nextInt();\n\n            int ret = c \/ w * r + w - 1 + (c % w != 0 ? 1 : 0);\n\n            System.out.printf(\"Case #%d: %d\\n\", casei, ret);\n        }\n\n        sc.close();\n    }\n}"}
{"idx":"576","func":"static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(args[0]));\n        PrintWriter out = new PrintWriter(args[0].replace(\".in\", \".out\"));\n\n        int numberOfCases = Integer.parseInt(in.readLine());\n        for (int caseNumber = 1; caseNumber <= numberOfCases; caseNumber++) {\n            out.printf(\"Case #%d: \", caseNumber);\n\n            String[] params = in.readLine().split(\" \");\n            int rows = Integer.parseInt(params[0]);\n            int columns = Integer.parseInt(params[1]);\n            int shipWidth = Integer.parseInt(params[2]);\n\n            int scoutsPerRow = columns \/ shipWidth;\n            int totalScouts = scoutsPerRow * rows;\n            int totalCalls = totalScouts + shipWidth - 1;\n\n            if (columns % shipWidth > 0) totalCalls += 1;\n\n            out.println(totalCalls);\n        }\n\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"577","func":"class a\n{\n\n    public static void main(String [] args)\n    {\n\n        Scanner infile = null;\n        try{\n            \/\/infile = new Scanner(new File(\"D-small.txt\"));\n            infile = new Scanner(new File(\"A-large.txt\"));\n        }\n        catch (FileNotFoundException e)\n        {\n            System.out.println(\"File not found\");\n        }\n        int numCases = infile.nextInt();\n        int row;\n        int col;\n        int width;\n        int ret = 0;\n        int temp;\n        for(int a = 0; a < numCases; a++)\n        {\n            row = infile.nextInt();\n            col = infile.nextInt();\n            width = infile.nextInt();\n            if(col%width == 0)\n                ret = width-1;\n            else\n                ret = width;\n            temp = col\/width;\n            ret+=(temp*row);\n            System.out.println(\"Case #\" + (a+1) + \": \" + ret);\n        }\n\n\n\n    }\n}"}
{"idx":"578","func":"class A {\n    \n    public static void main(String[] args) throws Exception {\n        String filename = \"A-large\";\n        Scanner scan = new Scanner(new FileReader(filename + \".in\"));\n        PrintWriter out = new PrintWriter(filename + \".out\");\n        int problems = scan.nextInt();\n        for (int count = 0; count < problems; count++) {\n            System.out.print(\"Case #\" + (count+1) + \": \");\n            out.print(\"Case #\" + (count+1) + \": \");\n            A r = new A();\n            int r1 = scan.nextInt();\n            int c = scan.nextInt();\n            int w = scan.nextInt();\n            int result = r1*(c\/w);\n            if (c%w == 0) {\n                result += w-1;\n            } else {\n                result += w;\n            }\n            System.out.println(result);\n            out.println(result);\n        }\n        out.flush();\n        out.close();\n        scan.close();\n    }\n    \n}"}
{"idx":"579","func":"class CRoundA {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int i = 0; i < T; i++) {\n            int R = in.nextInt();\n            int C = in.nextInt();\n            int size = in.nextInt();\n            \n            int costPerRow = C \/ size;\n            \n            int ans1 = 0;\n            \n            \/\/ Need to iterate through all rows to first \"hit\" the ship\n            ans1 += costPerRow * R;\n            \n            \/\/ Now that we've hit the ship, we need to hit the rest of it.\n            \n            \/\/ If it divides it evenly, it's jsut the cost of the rest of the ship.\n            if (C % size == 0) {\n                ans1 += (size - 1);\n            }\n            \/\/ Alternatively, he can guarantee at least one \"miss\"\n            else {\n                ans1 += size;\n            }\n            int ans = ans1;\n            System.out.printf(\"Case #%d: %d\\n\", i + 1, ans);\n        }\n\n    }\n\n}"}
{"idx":"580","func":"class Problem1C_A {\n\n    public static void main(String args[]) throws IOException {\n\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"A-large-output1.txt\"));\n\n        int testCases = Integer.parseInt(br.readLine());\n\n        for (int t = 1; t <= testCases; t++) {\n\n            String input = br.readLine();\n            String arr[] = input.split(\" \");\n            int r = Integer.parseInt(arr[0]);\n            int c = Integer.parseInt(arr[1]);\n            int w = Integer.parseInt(arr[2]);\n\n            int count = 0;\n\n            if (w == 1)\n                count = r*c;\n            else if ( w == c )\n                count = w + (r-1);\n            else if (c%w == 0)\n                count = ((r-1)*(c\/w))+((c\/w) + (w-1));\n            else {\n                count = ((r-1)*(c\/w))+((c\/w) + (w-1) + 1);\n            }\n\n            bw.write(\"Case #\" + t +\": \"+count+\"\\r\\n\");\n        }\n        bw.close();\n        br.close();\n    }\n}"}
{"idx":"581","func":"class Brattleship {\n    public static void main(String[] args) throws NumberFormatException, IOException{\n        BufferedReader br = new BufferedReader(new FileReader(args[0]));\n        int cases = Integer.parseInt(br.readLine());\n        for(int i=0;i<cases;i++){\n            String in = br.readLine();\n            String[] input = in.split(\" \");\n            int rows = Integer.parseInt(input[0]);\n            int columns = Integer.parseInt(input[1]);\n            int width = Integer.parseInt(input[2]);\n            int moves = (columns\/width)*rows + (width - 1);\n            int nomiss = columns%width==0 ? 0 : 1;\n            moves += nomiss;\n            System.out.format(\"Case #%d: %d\\n\", i+1, moves);\n        }\n    }\n}"}
{"idx":"582","func":"class A {\n    \n    PrintWriter out;\n    \n    int R, C, W;\n    \n    public static int __ID = 0;\n    public static boolean __ERROR = false;\n    \n    public static void main(String[] args) {\n        int pN = 1;\n        if (args.length == 0) {\n            try {\n                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + \".in\")));\n            } catch (Exception e) {\n            }\n        } else {\n            pN = Integer.parseInt(args[0]);\n        }\n        PrintStream out = System.out;\n        System.setOut(null);\n        Scanner sc = new Scanner(System.in);\n        final int caseN = sc.nextInt();\n        final A[] solvers = new A[caseN];\n        StringWriter[] outs = new StringWriter[caseN];\n        for (int i = 0; i < caseN; i++) {\n            solvers[i] = new A();\n            outs[i] = new StringWriter();\n            solvers[i].out = new PrintWriter(outs[i]);\n            solvers[i].out.printf(\"Case #%d: \", i + 1);\n            A r = solvers[i];\n            r.R = sc.nextInt();\n            r.C = sc.nextInt();\n            r.W = sc.nextInt();\n        }\n        Thread[] ts = new Thread[pN];\n        for (int i = 0; i < pN; i++) {\n            ts[i] = new Thread() {\n                @Override\n                public void run() {\n                    for (;;) {\n                        int id;\n                        synchronized (A.class) {\n                            if (__ID == caseN) return;\n                            id = __ID++;\n                        }\n                        try {\n                            A r = solvers[id];\n                            int res = r.R * (r.C \/ r.W);\n                            if (r.C % r.W > 0) res++;\n                            res += r.W - 1;\n                            r.out.println(res);\n                        } catch (RuntimeException e) {\n                            __ERROR = true;\n                            System.err.printf(\"Error in case %d:%n\", id + 1);\n                            e.printStackTrace();\n                        }\n                        solvers[id].out.flush();\n                        solvers[id] = null;\n                    }\n                }\n            };\n            ts[i].start();\n        }\n        for (int i = 0; i < pN; i++) {\n            try {\n                ts[i].join();\n            } catch (InterruptedException e) {\n                i--;\n                continue;\n            }\n        }\n        for (int i = 0; i < caseN; i++) {\n            out.print(outs[i].toString());\n        }\n        if (__ERROR) out.printf(\"%nError occured!!!%n\");\n    }\n    \n}"}
{"idx":"583","func":"class roundCQ1 {\n     public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int testCase = scan.nextInt();\n        for(int i = 1; i <= testCase; i++){\n            int R = scan.nextInt();\n            int C = scan.nextInt();\n            int W = scan.nextInt();\n            int num1 = R * (C\/W);\n             if(C % W > 0){\n                 num1 = num1 + W;\n             }else{\n                 num1 = num1 + W - 1;\n             }\n            \n            int num = num1;\n            System.out.println(\"Case #\"+i+\": \"+num);\n            \n            \n        }\n    }\n     \n}"}
{"idx":"584","func":"class Main \n{\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder out = new StringBuilder();\n        \n        int testCases = Integer.parseInt(in.readLine());\n        String[] tokens;\n        \n        for(int testNumber = 1; testNumber <= testCases; testNumber++)\n        {\n            out.append(\"Case #\").append(testNumber).append(\": \");\n            \n            tokens = in.readLine().trim().split(\"\\\\s+\");\n            \n            int r = Integer.parseInt(tokens[0]);\n            int c = Integer.parseInt(tokens[1]);\n            int w = Integer.parseInt(tokens[2]);\n            \n            int numberNeededPerRowToGetHit = c \/ w;\n            int additionalNumberToSinkOnceHit;\n            \n            if (w > 1)\n            {\n                if (c > w && c % w != 0)\n                {\n                    additionalNumberToSinkOnceHit = w;\n                }\n                else\n                {\n                    additionalNumberToSinkOnceHit = w - 1;\n                }\n            }\n            else\n            {\n                additionalNumberToSinkOnceHit = 0;\n            }\n            \n            int total = numberNeededPerRowToGetHit * r + additionalNumberToSinkOnceHit;\n            \n            out.append(total).append(\"\\n\");\n        }\n        \n        System.out.println(out);\n    }\n\n}"}
{"idx":"585","func":"class A\n{\n    public static void main(String[] args) throws IOException\n    {\n        Scanner in=new Scanner(System.in);\n        int numRuns=in.nextInt();\n        for (int run=1; run<=numRuns; run++)\n        {\n            int r=in.nextInt(), c=in.nextInt(), w=in.nextInt();\n            int extrarows=(r-1)*(c\/w);\n            \n            \/\/ Shoot c\/w-1 times; \n            int ans=c\/w-1;\n            c-=w*ans;\n            System.out.println(\"Case #\"+run+\": \"+(ans+Math.min(w+1,c)+extrarows));\n        }\n    }\n}"}
{"idx":"586","func":"class Brattleship {\n  static final String inputFileName = \"in.txt\";\n  static final String outputFileName = \"out.txt\";\n  \n  \/**\n   * @param args the command line arguments\n   *\/\n  public static void main(String[] args) {\n    try {\n      File file = new File(inputFileName);\n      Scanner in = new Scanner(file);\n      file = new File(outputFileName);\n      PrintWriter out = new PrintWriter(file);\n      \n      \n      int num = in.nextInt();\n      \n      for(int n=1; n<=num; n++) {\n        int nRows = in.nextInt();\n        int nCols = in.nextInt();\n        int w = in.nextInt();\n        \n        int g = nCols\/w;\n        \n        int e = 1 + nCols%w;\n        int a;\n        if(e==1) {\n          a = 0;\n        } else {\n          a = 1;\n        }\n        \n        \n        int N = nRows * g + (w-1) + a;\n          \n        String str = \"Case #\"+n+\": \"+N;\n        \n        System.out.println(str);\n        out.println(str);\n      }\n      \n      in.close();\n      out.close();\n    } catch (FileNotFoundException ex) {\n      Logger.getLogger(Brattleship.class.getName()).log(Level.SEVERE, null, ex);\n    }\n  }\n}"}
{"idx":"587","func":"class Battleship{\n\n    public static void main (String[] args) throws FileNotFoundException{\n        File f1 = new File(\"1C-Ain\");\n        File f2 = new File(\"1C-Aout\");\n        \/\/Scanner read = new Scanner(f);\n        Scanner read = new Scanner(f1);\n        PrintWriter write = new PrintWriter(f2);\n        int limit = read.nextInt();\n        for (int l = 1; l <= limit; l++){\n            \/\/System.out.println(l);\n            int r = read.nextInt();\n            int c = read.nextInt();\n            int w = read.nextInt();\n            int total = w;\n            \/\/int rtot = (r - 1) \/ w;\n            \/\/int ctot = (c - 1) \/ w;\n            \/\/System.out.println((r - 1) \/ w);\n            \/\/System.out.println((c - 1) \/ w);\n            total += (c - 1) \/ w * r;\n            if (w == 1) total = r * c;\n            write.println(\"Case #\" + l + \": \" + total);\n        }\n        write.close();\n    }\n}"}
{"idx":"588","func":"class A {\n\n    \n\n    \/\/ *************************************************************************************\n    \/\/ *********************************** FRAMEWORK\n    \/\/ ***************************************\n    \/\/ *************************************************************************************\n\n    public static BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n    public static boolean isStandardInput = false;\n\n    public static File input;\n    public static FileReader inputReader;\n    public static BufferedReader in;\n\n    public static File output;\n    public static FileWriter outputWriter;\n    public static BufferedWriter out;\n\n    public static StringTokenizer st;\n\n    public static void main(String[] args) throws Exception {\n        isStandardInput = true;\n        output = new File(\"test.out\");\n        outputWriter = new FileWriter(output);\n        out = new BufferedWriter(outputWriter);\n        isStandardInput = false;\n        input = new File(\"A-large\" + \".in\");\n        inputReader = new FileReader(input);\n        in = new BufferedReader(inputReader);\n        output = new File(\"A-large\" + \".out\");\n        outputWriter = new FileWriter(output);\n        out = new BufferedWriter(outputWriter);\n        \n        int T = Integer.parseInt(TOKEN());\n        \n        for (int t = 0; t < T; t++) {\n            int R = Integer.parseInt(TOKEN());\n            int C = Integer.parseInt(TOKEN());\n            int W = Integer.parseInt(TOKEN());\n            int answer = 0;\n        \n            for (int i = 0; i < R; i++) {\n                answer += C \/ W;\n            }\n            if (C % W != 0) {\n                answer += 1;\n            }\n            answer += (W - 1);\n            String line = \"Case #\" + (t + 1) + \": \" + answer;\n        \n            out.write(line);\n            out.write(\"\\n\");\n            System.out.println(line);\n        }\n        if (in != null)\n            in.close();\n        if (inputReader != null)\n            inputReader.close();\n        \n        if (out != null)\n            out.flush();\n        if (out != null)\n            out.close();\n        if (outputWriter != null)\n            outputWriter.close();\n    }\n\n    \n\n    \/\/ **************** PRINT METHODS ****************\n\n    \n\n    \/\/ **************** INPUT DECLARATION ****************\n\n    \n\n    \/\/ **************** INPUT READING ****************\n\n    static String TOKEN() throws IOException {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(isStandardInput ? stdin.readLine() : in.readLine());\n        return st.nextToken();\n    }\n}"}
{"idx":"589","func":"class Brattleship {\n\n    public static void main(String[] args) throws Exception {\n        String path = \"C:\\\\Users\\\\Ziming\\\\Downloads\\\\\";\n\n        String input = path + \"A-large.in\";\n        String output = path + \"A-large.out\";\n\n\n        List<String> inputLines = new ArrayList<String>();\n\n        BufferedReader reader = new BufferedReader(new FileReader(input));\n        String line = reader.readLine();\n\n        while (line != null) {\n            inputLines.add(line);\n            line = reader.readLine();\n        }\n\n        reader.close();\n\n        StringBuilder outputResult = new StringBuilder();\n\n        int totalCase = Integer.parseInt(inputLines.get(0));\n        inputLines.remove(0);\n\n        for (int cn = 0; cn < totalCase; cn++) {\n            String caseResult = \"\";\n            \n            \/\/ -------------------------------------------\n            \/\/ Solve problem, put result in caseResult.\n            \n            String ln = inputLines.get(0);\n            inputLines.remove(0);\n            \n            String [] paramStrs = ln.split(\" \");\n            int R = Integer.parseInt(paramStrs[0]);\n            int C = Integer.parseInt(paramStrs[1]);\n            int W = Integer.parseInt(paramStrs[2]);\n            \n\/\/            System.out.println(String.format(\"%d %d %d\", R, C, W));\n            if(W == 1) {\n                caseResult = Integer.toString(R*C);\n            } else {\n                int s = 0;\n                s += (C \/ W) * R - 1;\n                int c = C - (C \/ W - 1) * W;\n                int e = c - W;\n            \n                if(e > 0) {\n                    s += 1;\n                }\n                s += W;\n                caseResult = Integer.toString(s);\n            }\n\n            \n            \/\/caseResult = \"0\";\n            \n            \/\/ Solve problem end.\n            \/\/ -------------------------------------------\n            \n            String outputLine = String\n                    .format(\"Case #%d: %s\", cn + 1, caseResult);\n\n            System.out.println(outputLine);\n            if(outputResult.length() > 0) {\n                outputResult.append(\"\\n\");\n            }\n            outputResult.append(outputLine);\n        }\n\n\n        PrintWriter writer = new PrintWriter(output);\n        writer.print(outputResult.toString());\n        writer.flush();\n        writer.close();\n        \n        System.out.println(\"program finished :)\");\n    }\n}"}
{"idx":"590","func":"class A {\n    static PrintWriter pw;\n    public static void main(String args[]) throws Exception{\n        BufferedReader input = new BufferedReader(new FileReader(\"..\/GoogleCodeJam2015R1C\/io\/A-large.in\"));\n        pw = new PrintWriter(new FileWriter(\"..\/GoogleCodeJam2015R1C\/io\/output.txt\"));\n        \n        int T = Integer.parseInt(input.readLine());\n        for(int i = 0 ; i < T ; i++){\n            String[] s = input.readLine().split(\" \");\n            int R = Integer.parseInt(s[0]);\n            int C = Integer.parseInt(s[1]);\n            int W = Integer.parseInt(s[2]);\n            \n            \n            \n            if(C % W == 0){\n                pw.println(\"Case #\"+(i+1)+\": \"+(( C \/ W) * (R - 1) + ((C \/ W) + (W - 1))));\n            }else{\n                pw.println(\"Case #\"+(i+1)+\": \"+(( C \/ W) * (R - 1) + (C \/ W) + W));\n            }\n        }\n        pw.flush();\n        input.close();\n        pw.close();\n    }\n}"}
{"idx":"591","func":"class A {\n\n    private final int input_R, input_C, input_W;\n\n    private final String output;\n\n    public A(final Scanner sc) {\n        super();\n        this.input_R = sc.nextInt();\n        this.input_C = sc.nextInt();\n        this.input_W = sc.nextInt();\n        long nb = this.input_C \/ this.input_W * this.input_R;\n        nb += this.input_W - 1;\n        if (this.input_C % this.input_W != 0) {\n            nb++;\n        }\n        this.output = String.valueOf(nb);\n    }\n\n    public static void main(final String[] args) {\n        try (final Scanner sc = new Scanner(args.length > 0 ? new FileInputStream(args[0]) : System.in);\n                final PrintStream pr = args.length > 1 ? new PrintStream(args[1]) : System.out;) {\n            final int nb_test = sc.nextInt();\n            for (int i = 1; i <= nb_test; i++) {\n                System.out.println(\"Case #\" + i + \": \" + new A(sc));\n            }\n        } catch (final FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"592","func":"class ProblemA {\n    \n    static BufferedWriter bw;\n    \n    public static void main(String[] args) throws Exception {\n        \n        Scanner sc = new Scanner(new File(\"A-large.in\"));\n        bw = new BufferedWriter(new FileWriter(new File(\"output.txt\")));\n            \n        int tc = sc.nextInt();\n        for(int d=1;d<=tc;d++){\n            bw.write(\"Case #\"+String.valueOf(d)+\": \");\n\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            int w = sc.nextInt();\n            \n            int points = (c\/w)*r;\n            if(w>1){\n                points += (w-1);\n                if(c%w > 0)points += 1;\n            }\n\n            bw.write(String.valueOf(points));\n            bw.newLine();\n            bw.flush();   \n        }\n        \n        sc.close();\n        bw.close();\n    }\n}"}
{"idx":"593","func":"class a {\n\n    public static void main(String[] args) {\n\n        Scanner stdin = new Scanner(System.in);\n        int numCases = stdin.nextInt();\n\n        for (int loop=1; loop<=numCases; loop++) {\n\n            int R = stdin.nextInt();\n            int C = stdin.nextInt();\n            int W = stdin.nextInt();\n\n            int res=0;\n\n            if (C%W == 0) {\n                res = R*(C\/W) + W - 1;\n            }\n            else {\n                res = R*(C\/W) + W;\n            }\n\n            System.out.println(\"Case #\"+loop+\": \"+res);\n\n        }\n    }\n}"}
{"idx":"594","func":"static void main(String args[])\n    {\n        Scanner input = new Scanner(System.in);\n        int t = input.nextInt();\n        String output=\"\";\n        for(int i=1;i<=t;i++)\n        {\n            int result=0;\n            int count=1;\n            int r=input.nextInt();\n            int c=input.nextInt();\n            int w=input.nextInt();\n            \/\/ int combi = (r-c+1)*x;\n            \/\/ if(r==c)\n            \/\/     result=c+x-1;\n            \/\/ else\n            \/\/     result=c+combi-(r-c);\n            while(count<=c)\n            {\n                result+=1;\n                count+=w;\n            }\n            result+=w-1;\n            result*=r;\n            output+=\"Case #\"+i+\": \"+result+\"\\n\";            \n        }\n        System.out.print(output);\n    }\n}"}
{"idx":"595","func":"class A2015 {\n\n\n    public static void main(String[] args) throws IOException {\n        A2015 trans = new A2015();\n        File file = new File(\".\/inputs\/\"+A2015.NAME + \".in\");\n        BufferedWriter out = new BufferedWriter(new FileWriter(\".\/output\/\"+A2015.NAME+\".out\"));\n        try {\n            \/\/use buffering, reading one line at a time\n            \/\/FileReader always assumes default encoding is OK!\n            BufferedReader input = new BufferedReader(new FileReader(file));\n            try {\n                String line = input.readLine();\n                int count = Integer.parseInt(line);\n        \n                for (int i=0;i<count;i++) {\n                    line = input.readLine();\n                    System.out.println(line);\n                    StringTokenizer tokens = new StringTokenizer(line.trim());\n                    int[] a= new int[tokens.countTokens()];\n                    int i1 = 0;\n                    while(tokens.hasMoreElements()) {\n                        a[i1++] = Integer.parseInt(tokens.nextToken());\n                    }\n                    int[] params = a;\n                    int rows = params[0];\n                    int cols = params[1];\n                    int width = params[2];\n                    \n                    int count1 = 0;\n                    \n                    int perrow = cols\/width;\n                    \n                    count1 = perrow * rows;\n                    \n                    count1 += width - 1;\n                    \n                    if (perrow*width < cols) {\n                        count1++;\n                    }\n                    String str = Integer.toString(count1);\n                    out.write(\"Case #\"+(i+1)+\": \"+str);\n                    if (i<count-1)\n                        out.write(System.getProperty(\"line.separator\"));\n                    System.out.println(str);\n                }\n            } finally {\n                input.close();\n                out.flush();\n                out.close();\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    private static final String NAME = \"A-large\";\n\n}"}
{"idx":"596","func":"class A {\n\n    public static void main(String[] args) {\n        A a = new A();\n        Scanner in = new Scanner(System.in);\n        int cases = Integer.parseInt(in.nextLine());\n        for (int a1=0; a1<cases; a1++) {\n            int r = in.nextInt();\n            int c = in.nextInt();\n            int w = in.nextInt();\n            if (a1!=cases-1) {\n                in.nextLine();\n            }\n            int base = c\/w;\n            base *= r;\n            if (c%w==0) {\n                base += (w-1);\n            }\n            else {\n                base += w;\n            }\n            System.out.println(\"Case #\" + (a1+1) + \": \" + base);\n        }\n    }\n\n}"}
{"idx":"597","func":"class Round1CProblemA {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new File(\"A-large.in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\n        int testCases = sc.nextInt();\n        for (int t = 0; t < testCases; t++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            int w = sc.nextInt();\n            int res = 0;\n            res += (c \/ w) * (r - 1);\n            res += (c \/ w - 1);\n            res += w + (c % w == 0 ? 0 : 1);\n            out.write(\"Case #\" + (t + 1) + \": \" + res);\n            out.newLine();\n        }\n        out.close();\n    }\n}"}
{"idx":"598","func":"class Main {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        int answ, R, C, W;\n        for(int z  = 1; z <= T; z++){\n            R = in.nextInt();\n            C = in.nextInt();\n            W = in.nextInt();\n            if(W == 1){\n                answ = R * C;\n            }else{\n                answ = ((C + (W - 1)) \/ W);\n                answ *= R;\n                answ += W - 1;\n            }\n            \n            System.out.println(\"Case #\" + z + \": \" + answ);\n            \n        }\n    }    \n\n}"}
{"idx":"599","func":"class ProblemA {\n    public static void main(String[] args) throws FileNotFoundException {\n\/\/        Scanner sc = new Scanner(new File(\"A-small-attempt0.in\"));\n        Scanner sc = new Scanner(new File(\"A-large.in\"));\n\/\/        Scanner sc = new Scanner(new File(\"A.in\"));\n        int cases = sc.nextInt();\n        int count = 1;\n\n        while(cases --> 0) {\n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            int W = sc.nextInt();\n            int turns = 0;\n            \n            if ( W == 1) {\n                turns = R * C;\n            } else {\n            \n                for (int i = W-1; i < C; i += W) {\n                    turns += R;\n                }\n                \n                turns += W - 1;\n                \n                if(C % W != 0) {\n                    turns++;\n                }\n                \n            }\n            \n            System.out.println(\"Case #\" + count + \": \" + turns);\n            \n            count++;\n        }\n        \n        sc.close();\n    }\n}"}
{"idx":"600","func":"class A {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new FileInputStream(\"test_codejam\/a.in\"));\n        PrintWriter out = new PrintWriter(new FileOutputStream(\"test_codejam\/a.out\"));\n\/\/        Scanner in = new Scanner(System.in);\n\/\/        PrintWriter out = new PrintWriter(System.out);\n        int t = in.nextInt();\n        int test = 1;\n        while (t-->0) {\n            int r,c, w, answer = 0;\n            r = in.nextInt();\n            c = in.nextInt();\n            w = in.nextInt();\n            int z = 0;\n            while (z<c) {\n                z+=w;\n                answer+=1;\n            }\n\n            out.println(\"Case #\" + test + \": \" + (answer * r + w - 1));\n            test++;\n        }\n        out.close();\n    }\n\n}"}
{"idx":"601","func":"class first {\n     public static void main(String[] args) {\n            Scanner sin = new Scanner(System.in);\n            int t = sin.nextInt();\n            for(int i = 1; i <= t; i++){\n                int R = sin.nextInt();\n                int C = sin.nextInt();\n                int W = sin.nextInt();\n                int x1 = R * (C\/W);\n                 if(C % W > 0){\n                     x1 = x1 + W;\n                 }else{\n                     x1= x1 + W - 1;\n                 }\n                System.out.println(\"Case #\"+i+\": \"+x1);\n                \n                \n            }\n        }\n         \n       \n         \n}"}
{"idx":"602","func":"class ProbA {\n    public static void main(String[] arg) {\n        Scanner s = new Scanner(System.in);\n        int t = s.nextInt();\n        for(int i =1; i <= t; i++) {\n            int r = s.nextInt();\n            int c = s.nextInt();\n            int w = s.nextInt();\n            int ans = (c-1)\/w + w;\n            System.out.println(\"Case #\" + i +\": \" + ans);\n        }\n    }\n}"}
{"idx":"603","func":"class Pr1C1 {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner s = new Scanner(System.in);\n        int T = s.nextInt();\n        int r, c, w, ans;\n        f: for(int t=1; t<=T; t++){\n            r = s.nextInt();\n            c = s.nextInt();\n            w = s.nextInt();\n            \n            ans = (r-1) * (c\/w);\n            \/\/System.out.println(ans);\n            \n            if(w==1){\n                ans+= c;\n                System.out.println(\"Case #\"+t+\": \"+ans);\n                continue f;\n            }\n            if(w==c){\n                ans+= c;\n                System.out.println(\"Case #\"+t+\": \"+ans);\n                continue f;\n            }\n            \n            if(c<=2*w){\n                ans+=w+1;\n                System.out.println(\"Case #\"+t+\": \"+ans);\n                continue f;\n            }\n            else{\n                ans = ans+ w+1 + ((c-w-1)\/w);\n                System.out.println(\"Case #\"+t+\": \"+ans);\n                continue f;\n            }\n        }\n    }\n\n}"}
{"idx":"604","func":"class _1A {\n\n    public static void main(String[] args) throws IOException {\n        \n            BufferedReader br = null;\n            PrintWriter pw = new PrintWriter(\"output.txt\");\n\n            String line;\n            int maxCaseNum = 0;\n \n            br = new BufferedReader(new FileReader(\"input.txt\"));\n            maxCaseNum = Integer.valueOf(br.readLine());\n \n            for (int caseIdx = 1; caseIdx <= maxCaseNum; caseIdx++) {\n                \/\/String N = br.readLine();\n                line = br.readLine();\n                String[] array = line.split(\" \");\n                int row = Integer.valueOf(array[0]);\n                int col = Integer.valueOf(array[1]);\n                int shipW = Integer.valueOf(array[2]);\n                int ans = 0;\n                \n                if (col == shipW)\n                    ans = row*col;\n                else if (shipW == 1)\n                    ans = row*col;\n                else {\n                    if (col % shipW == 0) {\n                        ans = ((col\/shipW) + (shipW-1)) * row;\n                    }\n                    else {\n                        ans = ((col\/shipW) + (shipW-1) + 1) * row;\n                    }\n                }\n\n                \n                \n                System.out.println(\"Case #\" + caseIdx + \": \" + ans);\n                \n                pw.println(\"Case #\" + caseIdx + \": \" + ans  );\n\n            }\n            \n            br.close();\n            pw.close();\n            \n            System.out.println(\"Done\");\n            \n            \n\n    }\n\n}"}
{"idx":"605","func":"class A {\n\n    \/*************************************************************************\/\n\n    public static void main(String[] args) throws Exception {\n        String load = \"src\/a-small-attempt1.in\";\n        String save = \"src\/a-small-attempt1.out\";\n        in = new Scanner(new File(load));\n        out = new PrintWriter(new File(save));\n        int T = in.nextInt();\n        for (int t = 1; t <= T; t++) {\n            out.print(\"Case #\" + t + \": \");\n            System.out.println(\"Case #\" + t + \": ............\");\n            A r = new A();\n            int R = A.in.nextInt();\n            int C = A.in.nextInt();\n            int W = A.in.nextInt();\n            if (R == 1) {\n                int result = (C-W)\/W + W + (C%W>0?1:0);\n                A.out.println(result);\n            } else\n                A.out.println(0);\n        }\n        out.close();\n    }\n\n    static Scanner in;\n    static PrintWriter out;\n}"}
{"idx":"606","func":"class battleship {\n\n    public static void main(String[] args) throws IOException {\n        int ab;\n        ab = Integer.parseInt(br.readLine().trim());\n        int t = ab;\n        int a[] = new int[3], n, r, c;\n        for (int i = 1; i <= t; i++) {\n\n            s = br.readLine().trim().split(\" \");\n            int i1;\n            for (i1 = 0; i1 < 3; i1++) {\n                a[i1] = Integer.parseInt(s[i1]);\n            }\n            r = a[0];\n            c = a[1];\n            n = a[2];\n            int ans=0;\n           ans+=(r)*(c\/n);\n           int m=c%n; \n           ans+=n;\n           if(m==0){\n           ans-=1;\n           }\n           \n           \n            \n            System.out.println(\"Case #\" + i + \": \" + ans);\n\n        }\n    }\n    static BufferedReader br = new BufferedReader(new InputStreamReader(\n            System.in));\n    private static String s[], w, q;\n}"}
{"idx":"607","func":"class onecq1 {\n    public static void main(String[] args){\n        Scanner scanner;\n        try {\n            scanner = new Scanner(new File(\"A-small-attempt0.in\"));\n            int noofTests = scanner.nextInt();\n            int i=0;\n            while(i<noofTests){\n                int output = 0;                \n                int R = scanner.nextInt();\n                int C = scanner.nextInt();\n                int W = scanner.nextInt();\n                for(int k = 0; k< R;k++){\n                    for(int j = 0; j<C ; j+=W)\n                        output++;\n                }\n                output += (W -1);\n                System.out.println(\"Case #\" + (i+1) + \": \" + output);\n                i++;\n            }\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"608","func":"class first {\n\n    public static void main(String[] args) {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\")))\n        {\n            PrintWriter writer = new PrintWriter(\"solution-A-large.output\", \"UTF-8\");\n            \n            int T = 0; \/\/number of tests\n            \n            String sCurrentLine = br.readLine();\n            T = Integer.parseInt(sCurrentLine);\n            String stringBuffer[] = null;\n            int[] answers = new int[T];\n            for(int testIntance = 1 ; testIntance <= T; ++testIntance){\n                System.out.println(\"inst: \" + testIntance);\n                sCurrentLine = br.readLine();\n                stringBuffer = sCurrentLine.split(\" \");\n                int R = Integer.parseInt(stringBuffer[0]);\n                int C = Integer.parseInt(stringBuffer[1]);\n                int W = Integer.parseInt(stringBuffer[2]);\n                answers[testIntance-1] = (int) (Math.floor(C\/W)*R + W);\n                if(C%W == 0){\n                    answers[testIntance-1]--;\n                }\n                System.out.println(\"Case #\" + testIntance + \": \" + answers[testIntance-1]);\n                writer.println(\"Case #\" + testIntance + \": \" + answers[testIntance-1]);\n        \n            }\n        \n            writer.close();\n        \n        } catch (IOException e) {\n            e.printStackTrace();\n        } \n        \n    }\n\n}"}
{"idx":"609","func":"class A {\n\n    private static final String PATH_INPUT = \"src\/main\/resources\/input\/A-large.in\";\n\n    private static final String PATH_OUTPUT = \"src\/main\/resources\/output\/A-large.out\";\n\n    public static void main(String[] args) throws IOException {\n    List<String> tokens1 = new ArrayList<>();\n        \n        try (BufferedReader reader = Files.newBufferedReader(Paths\n                .get(PATH_INPUT))) {\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n            for (String token : line.split(\"\\\\s\")) {\n                if (!token.isEmpty()) {\n                tokens1.add(token);\n                }\n            }\n            }\n        }\n    List<String> tokens = tokens1;\n\n    int t = Integer.valueOf(tokens.remove(0));\n    for (int i = 0; i < t; i++) {\n        long r = Long.valueOf(tokens.remove(0));\n        long c = Long.valueOf(tokens.remove(0));\n        long w = Long.valueOf(tokens.remove(0));\n\n        long res = (c \/ w) * r;\n        if (c % w == 0) {\n        res += w - 1;\n        } else {\n        res += w;\n        }\n        tokens.add(\"\" + res);\n    }\n\n    try (BufferedWriter writer = Files.newBufferedWriter(Paths\n            .get(PATH_OUTPUT))) {\n        for (int i = 0; i < tokens.size(); i++) {\n        writer.write(\"Case #\" + (i + 1) + \": \" + tokens.get(i));\n        if (i < tokens.size() - 1) {\n            writer.newLine();\n        }\n        }\n    }\n\n    System.out.println(\"Done\");\n    }\n}"}
{"idx":"610","func":"class B {\n\n    public static void main(String[] args) throws Exception{\n        BufferedReader br = new BufferedReader(new FileReader(\"C:\/Users\/Nejc\/Desktop\/input.in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"C:\/Users\/Nejc\/Desktop\/output.txt\")));\n        int T=Integer.parseInt(br.readLine());\n        for(int t=0; t<T; t++){\n            String[] line = br.readLine().split(\" \");\n            int R = Integer.parseInt(line[0]);\n            int C = Integer.parseInt(line[1]);\n            int W = Integer.parseInt(line[2]);\n            int result=0;\n            if(R==1){\n                if(C%W==0)result=C\/W+W-1;\n                else result=C\/W+W;\n            }\n            else System.out.println(\"Error\");\n            bw.write(\"Case #\"+(t+1)+\": \"+result);\n            bw.newLine();\n        }\n        br.close();\n        bw.close();\n        System.out.println(\"done\");\n    }\n}"}
{"idx":"611","func":"class Battleship {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int T = scan.nextInt();\n        for(int t = 1; t <= T; t++) {\n            int R = scan.nextInt();\n            int C = scan.nextInt();\n            int W = scan.nextInt();\n            System.out.println(\"Case #\" + t + \": \" + (R*(C\/W) + W-1 + (C%W==0?0:1)));\n        }\n    }\n}"}
{"idx":"612","func":"class Problem_A {\n\n    public static void main(String[] args) {\n        \/\/String inFile = \"\/\/Users\/\/lixuefei\/\/Documents\/\/JavaWorkspace\/\/Interview\/\/src\/\/GoogleCodeJamRound2\/\/in.txt\";\n        String inFile = \"\/\/Users\/\/lixuefei\/\/Documents\/\/JavaWorkspace\/\/Interview\/\/src\/\/GoogleCodeJamRound2\/\/A-small-attempt0.in\";\n        String outFile = \"\/\/Users\/\/lixuefei\/\/Documents\/\/JavaWorkspace\/\/Interview\/\/src\/\/GoogleCodeJamRound2\/\/result.txt\";\n        int n = 0;\n        String line;\n        try {\n            FileReader fileReader = new FileReader(inFile);\n            BufferedReader br = new BufferedReader(fileReader);\n            FileWriter fileWriter = new FileWriter(outFile);\n            BufferedWriter bw = new BufferedWriter(fileWriter);\n            line = br.readLine();\n            n = Integer.parseInt(line);\n            for(int i = 0; i < n ; i++){\n                line = br.readLine();\n                \n                String[] parts = line.split(\" \");\n                long R = Long.parseLong(parts[0]);\n                long C = Long.parseLong(parts[1]);\n                long W = Long.parseLong(parts[2]);\n                long result = (C-1)\/W+W;\n                bw.write(\"Case #\" + (i+1) + \": \" + result + \"\\n\");\n                \n            }\n            br.close();\n            bw.close();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n\n    }\n}"}
{"idx":"613","func":"class Main {\n\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(\"\/Users\/mesuterhanunal\/Desktop\/in.txt\"));\n            BufferedWriter bw = new BufferedWriter(new FileWriter(\"\/Users\/mesuterhanunal\/Desktop\/out.txt\"));\n\n            int testCase = Integer.parseInt(br.readLine());\n\n            for (int i = 0; i < testCase; i++) {\n                String [] line = br.readLine().split(\"\\\\s+\");\n                int R = Integer.parseInt(line[0]), C = Integer.parseInt(line[1]), W = Integer.parseInt(line[2]);\n\n                double Ratio = C \/ (1.00 * W);\n                int toAdd = (int) Math.ceil(Ratio), Try = 0;\n\n                Try = W + toAdd - 1;\n                Try *= R;\n\n                bw.write(\"Case #\" + (i+1) + \": \" + Try + \"\\n\");\n            }\n\n            br.close();\n            bw.close();\n        }\n\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
782{"idx":"615","func":"class A {\n\n    \/\/private static final String STAGE = \"A-test\";\n    \/\/private static final String STAGE = \"A-small-attempt0\";\n    \/\/ private static final String STAGE = \"A-small-attempt1\";\n    \/\/ private static final String STAGE = \"A-small-attempt2\";\n    private static final String STAGE = \"A-large\";\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = null;\n        PrintStream out = null;\n        try {\n            in = new Scanner(new File(STAGE + \".in\"));\n            out = new PrintStream(new File(STAGE + \".out\"));\n            int t = in.nextInt();\n            int caseNumber = 1;\n            while (caseNumber <= t) {\n                int r = in.nextInt();\n                int c = in.nextInt();\n                int w = in.nextInt();\n                out.println(\"Case #\" + caseNumber++ + \": \" + solve(r, c, w));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n    }\n\n    public static int solve(int r, int c, int w) {\n        int s = r * c;\n        int result = w == 1 ? s : (c \/ w) * r + w - (c % w == 0 ? 1 : 0);\n        return result;\n    }\n}"}
{"idx":"616","func":"class A {\n\n  public static void main(String[] args) throws Exception {\n    Scanner sc = new Scanner(new File(\"data\/a\/A-small-attempt1.in\"));\n    BufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"data\/a\/out\")));\n    int t = sc.nextInt();\n    for (int i = 1; i <= t; i++) {\n      int r = sc.nextInt();\n      int c = sc.nextInt();\n      int w = sc.nextInt();\n      int q = w;\n      if (c \/ w * w == c) {\n        q -= 1;\n      }\n      int s = r * ((c \/ w) + q);\n      System.out.println(\"Case #\" + i + \": \" + s);\n      bw.write(\"Case #\" + i + \": \" + s + \"\\n\");\n    }\n    sc.close();\n    bw.close();\n  }\n}"}
{"idx":"617","func":"class Brattleship\n{\n    private static final String PROBLEM_NAME = Brattleship.class.getSimpleName();\n    private static final String WORK_DIR = \"\/Development\/Projects\/GCJ\/15-1C\/\" + PROBLEM_NAME + \"\/\";\n\/\/    private static final String INPUT_PATH = WORK_DIR + \"sample.in\";\n\/\/    private static final String INPUT_PATH = WORK_DIR + \"A-small-attempt0.in\";\n\/\/    private static final String INPUT_PATH = WORK_DIR + \"A-small-attempt1.in\";\n    private static final String INPUT_PATH = WORK_DIR + \"A-large.in\";\n\/\/    private static final String INPUT_PATH = WORK_DIR + \"debug.in\";\n    private static final String OUTPUT_PATH = INPUT_PATH.replace(\".in\", \".out\");\n    \n    public static void main(String[] args) throws Exception\n    {\n        System.out.println(\"Solving \" + PROBLEM_NAME + \"...\");\n        System.out.println(\"Input: \" + INPUT_PATH);\n        System.out.println(\"Output: \" + OUTPUT_PATH);\n        \n        PrintWriter out = new PrintWriter(OUTPUT_PATH, \"US-ASCII\");\n        Scanner in = new Scanner(new File(INPUT_PATH), \"US-ASCII\");\n        in.useLocale(Locale.US);\n        \n        int testCasesNumber = in.nextInt();\n        in.nextLine();\n        System.out.println(\"Test cases: \" + testCasesNumber);\n        \n        try\n        {\n            for (int testCase = 1; testCase <= testCasesNumber; testCase++)\n            {\n                System.out.println(\"Solving test case: \" + testCase + \"...\");\n                out.print(\"Case #\" + testCase + \": \");\n                Brattleship r = new Brattleship();\n                int R = in.nextInt();\n                int C = in.nextInt();\n                int W = in.nextInt();\n                \n                int mod = C % W;\n                int div = C \/ W;\n                \n                int y = W + (mod == 0 ? 0 : 1) + (div - 1);\n                \n                if (R > 1)\n                    y += Math.max(1, div * (R - 1));\n                \n                out.println(y);\n                out.flush();\n            }\n        }\n        finally\n        {\n            in.close();\n            out.close();\n        }\n        \n        System.out.println(\"All test cases solved!\");\n    }\n}"}
{"idx":"618","func":"class AL {\n    static final boolean _PRACTICE = !true;\n    static final boolean _SAMPLE = !true;\n    static final boolean _SMALL = !true;\n    static final String _PROBLEM = \"A\";\n\n    public static void main(String... args) throws IOException {\n        if (!_SAMPLE) {\n            if (_SMALL) {\n                int i = 0;\n                while (new File(_PROBLEM + \"-small\"\n                + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\").exists())\n                    i++;\n                i--;\n                boolean test = false;\n                if (new File(_PROBLEM + \"-small\"\n                + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\").exists()) {\n                    System.err.println(\"overwrite?(y\/n)\");\n                    char c = (char) System.in.read();\n                    test = c != 'y';\n                }\n                if (test) {\n                    System.setIn(new FileInputStream(_PROBLEM + \"-small\"\n                    + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\"));\n                    System.setOut(new PrintStream(_PROBLEM + \"-small-test.out\"));\n                    AL r = new AL();\n                    Scanner sc = new Scanner(System.in);\n                    int testCase = sc.nextInt();\n                    \n                    for (int k = 1; k <= testCase; k++) {\n                        System.out.printf(\"Case #%d: \", k);\n                        System.err.printf(\"Case #%d: \", k);\n                    \n                        int r1 = sc.nextInt();\n                        int c = sc.nextInt();\n                        int w = sc.nextInt();\n                        \n                        int count = (c \/ w) * r1;\n                        count += (w - 1);\n                        if (c % w != 0) {\n                            count++;\n                        }\n                        \n                        System.out.println(count);\n                        System.err.println(count);\n                        \n                    }\n                    sc.close();\n                    FileReader f1 = new FileReader(_PROBLEM + \"-small-test.out\");\n                    FileReader f2 = new FileReader(_PROBLEM + \"-small\"\n                    + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\");\n                    BufferedReader br1 = new BufferedReader(f1);\n                    BufferedReader br2 = new BufferedReader(f2);\n                    for (int j = 1;; j++) {\n                        String s1 = br1.readLine();\n                        String s2 = br2.readLine();\n                        if (s1 == null && s2 == null) {\n                            System.err.println(\"OK!\");\n                            break;\n                        }\n                        if (s1 == null || s2 == null || !s1.equals(s2)) {\n                            System.err.println(\"failed at line \" + j);\n                            System.err.println(\"expected \" + s2);\n                            System.err.println(\"but \" + s1);\n                            break;\n                        }\n                    }\n                    br1.close();\n                    br2.close();\n                } else {\n                    System.setIn(new FileInputStream(_PROBLEM + \"-small\"\n                    + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\"));\n                    System.setOut(new PrintStream(_PROBLEM + \"-small\"\n                    + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\"));\n                    AL r = new AL();\n                    Scanner sc = new Scanner(System.in);\n                    int testCase = sc.nextInt();\n                    \n                    for (int k = 1; k <= testCase; k++) {\n                        System.out.printf(\"Case #%d: \", k);\n                        System.err.printf(\"Case #%d: \", k);\n                    \n                        int r1 = sc.nextInt();\n                        int c = sc.nextInt();\n                        int w = sc.nextInt();\n                        \n                        int count = (c \/ w) * r1;\n                        count += (w - 1);\n                        if (c % w != 0) {\n                            count++;\n                        }\n                        \n                        System.out.println(count);\n                        System.err.println(count);\n                        \n                    }\n                    sc.close();\n                }\n            } else {\n                System.setIn(new FileInputStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".in\"));\n                System.setOut(new PrintStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".out\"));\n                AL r = new AL();\n                Scanner sc = new Scanner(System.in);\n                int testCase = sc.nextInt();\n                \n                for (int k = 1; k <= testCase; k++) {\n                    System.out.printf(\"Case #%d: \", k);\n                    System.err.printf(\"Case #%d: \", k);\n                \n                    int r1 = sc.nextInt();\n                    int c = sc.nextInt();\n                    int w = sc.nextInt();\n                    \n                    int count = (c \/ w) * r1;\n                    count += (w - 1);\n                    if (c % w != 0) {\n                        count++;\n                    }\n                    \n                    System.out.println(count);\n                    System.err.println(count);\n                    \n                }\n                sc.close();\n            }\n        } else {\n            AL r = new AL();\n            Scanner sc = new Scanner(System.in);\n            int testCase = sc.nextInt();\n            \n            for (int k = 1; k <= testCase; k++) {\n                System.out.printf(\"Case #%d: \", k);\n                System.err.printf(\"Case #%d: \", k);\n            \n                int r1 = sc.nextInt();\n                int c = sc.nextInt();\n                int w = sc.nextInt();\n                \n                int count = (c \/ w) * r1;\n                count += (w - 1);\n                if (c % w != 0) {\n                    count++;\n                }\n                \n                System.out.println(count);\n                System.err.println(count);\n                \n            }\n            sc.close();\n        }\n    }\n}"}
{"idx":"619","func":"class Brattleship {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int[][] dp = new int[11][11];\n        dp[1][1] = 1;\n\n        dp[2][1] = 2;\n        dp[2][2] = 2;\n\n        dp[3][1] = 3;\n        dp[3][2] = 3;\n        dp[3][3] = 3;\n\n        dp[4][1] = 4;\n        dp[4][2] = 3;\n        dp[4][3] = 4;\n        dp[4][4] = 4;\n\n        dp[5][1] = 5;\n        dp[5][2] = 4;\n        dp[5][3] = 4;\n        dp[5][4] = 5;\n        dp[5][5] = 5;\n\n        dp[6][1] = 6;\n        dp[6][2] = 4;\n        dp[6][3] = 4;\n        dp[6][4] = 5;\n        dp[6][5] = 6;\n        dp[6][6] = 6;\n\n        dp[7][1] = 7;\n        dp[7][2] = 5;\n        dp[7][3] = 5;\n        dp[7][4] = 5;\n        dp[7][5] = 6;\n        dp[7][6] = 7;\n        dp[7][7] = 7;\n\n        dp[8][1] = 8;\n        dp[8][2] = 5;\n        dp[8][3] = 5;\n        dp[8][4] = 5;\n        dp[8][5] = 6;\n        dp[8][6] = 7;\n        dp[8][7] = 8;\n        dp[8][8] = 8;\n\n        dp[9][1] = 9;\n        dp[9][2] = 6;\n        dp[9][3] = 5;\n        dp[9][4] = 6;\n        dp[9][5] = 6;\n        dp[9][6] = 7;\n        dp[9][7] = 8;\n        dp[9][8] = 9;\n        dp[9][9] = 9;\n\n        dp[10][1] = 10;\n        dp[10][2] = 6;\n        dp[10][3] = 6;\n        dp[10][4] = 6;\n        dp[10][5] = 6;\n        dp[10][6] = 7;\n        dp[10][7] = 8;\n        dp[10][8] = 9;\n        dp[10][9] = 10;\n        dp[10][10] = 10;\n\n        int T = in.nextInt();\n        for (int t = 0; t < T; t++) {\n            int R = in.nextInt();\n            int C = in.nextInt();\n            int W = in.nextInt();\n            System.out.println(\"Case #\" + (t + 1) + \": \" + dp[C][W]);\n\n        }\n\n    }\n\n}"}
{"idx":"620","func":"class ASecondThird {\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        for (int cases = 1; cases <= T; cases++) {\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int r = Integer.parseInt(st.nextToken());\n            int c = Integer.parseInt(st.nextToken());\n            int w = Integer.parseInt(st.nextToken());\n            int ans = (int)( Math.ceil( r*c\/(w*1.0) ) );\n            if (Math.min( r, c ) > 1) ans += Math.min( r, c);\n            ans += ( w-1 );\n            System.out.println(\"Case #\" + cases + \": \" + Math.min(ans, r*c));\n        }\n    }\n}"}
{"idx":"621","func":"class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for (int t = 0; t < T; t++) {\n            int row = sc.nextInt();\n            int column = sc.nextInt();\n            int width = sc.nextInt();\n\n            int ans = 0;\n            ans += (column \/ width) * row;\n\n            ans += (width - 1);\n            if (column % width != 0) {\n                ans++;\n            }\n            System.out.println(\"Case #\" + (t + 1) + \": \" + ans);\n\n        }\n        sc.close();\n\n    }\n}"}
{"idx":"622","func":"class Main {\npublic static void main(String [] args)throws Exception{\n    BufferedReader br=new BufferedReader(new FileReader(\"C:\/users\/abhishek\/Desktop\/abhi.txt\"));\n    FileWriter f=new FileWriter(\"C:\/users\/abhishek\/Desktop\/output.txt\");\n    String newLine=System.getProperty(\"line.separator\");\n    int t=Integer.parseInt(br.readLine());\n    for(int test=1;test<=t;test++){\n    StringTokenizer st=new StringTokenizer(br.readLine());\n    int r=Integer.parseInt(st.nextToken());\n    int c=Integer.parseInt(st.nextToken());\n    int w=Integer.parseInt(st.nextToken());\n    int ans=(c\/w)*r;\n    if(c%w==0)\n        f.write(\"Case #\" + test + \": \" + (ans+w-1) + newLine);\n    else f.write(\"Case #\" + test + \": \" + (ans+w) + newLine);\n    }\n    f.close();\n}\n}"}
{"idx":"623","func":"class A {\n    private static Scanner scanner;\n    private static PrintWriter writer;\n\n    static {\n        try {\n            scanner = new Scanner(new File(\"input.txt\"));\n            writer = new PrintWriter(\"output.txt\");\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        int tests = scanner.nextInt();\n        for (int t = 1; t <= tests; t++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            int w = scanner.nextInt();\n\n            int res = c \/ w * (r - 1);\n\n            res += c \/ w;\n            if (c % w == 0) {\n                res += w - 1;\n            } else {\n                res += w;\n            }\n\n            writer.println(\"Case #\" + t + \": \" + res);\n        }\n\n        writer.close();\n    }\n}"}
{"idx":"624","func":"class A {\n    public static void main(String[] args) {\n        try {\n            InputStream input = System.in;\n            OutputStream output = System.out;\n\n            if (args.length > 0) {\n                input = new FileInputStream(new File(args[0]));\n            }\n\n            if (args.length > 1) {\n                File outputFile = new File(args[1]);\n\n                if (outputFile.exists()) {\n                    throw new Exception(\"Output file already exists\");\n                }\n\n                output = new FileOutputStream(new File(args[1]));\n            }\n\n            Scanner scanner = new Scanner(input);\n            PrintWriter writer = new PrintWriter(output);\n\n            A a = new A();\n\n            int count = scanner.nextInt();\n            scanner.nextLine();\n\n            for (int i = 0; i < count; i++) {\n                StringBuilder result = new StringBuilder();\n                int r = scanner.nextInt();\n                int c = scanner.nextInt();\n                int w = scanner.nextInt();\n                \n                \n                \n                result.append(r * ( (c - 1) \/ w) +  (w));\n\n\n                writer.println(\"Case #\" + (i + 1) + \": \" + result.toString());\n            }\n\n            writer.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"625","func":"class Brattleship {\n    private static int cases;\n\n    public static void main(String[] args) throws IOException {\n        File in = new File(\"\/Users\/mafulafunk\/Downloads\/A-large.in\");\n\/\/        File in = new File(\"\/Users\/mafulafunk\/Code\/jam\/StoreCredit\/src\/main\/resources\/Brattleship.in\");\n        PrintWriter out = new PrintWriter(\"output.txt\");\n        BufferedReader br = new BufferedReader(new FileReader(in));\n        cases = Integer.valueOf(br.readLine());\n        for (int i = 1; i <= cases; i++) {\n\n\n            String[] strArray = br.readLine().split(\" \");\n            long[] out1 = new long[strArray.length];\n            for (int i1 = 0; i1 < strArray.length; i1++) {\n                out1[i1] = Integer.parseInt(strArray[i1]);\n            }\n            long[] line = out1;\n\n            long rows = line[0];\n            long cols = line[1];\n            long sizeOfShip = line[2];\n\n            long perLine = cols \/ sizeOfShip;\n\n            long sinkTheShip = cols % sizeOfShip == 0 ? sizeOfShip -1 : sizeOfShip;\n\n            out.println(\"Case #\" + i + \": \" + (rows * perLine + sinkTheShip));\n        }\n        out.flush();\n        out.close();\n    }\n\n}"}
{"idx":"626","func":"class R1cA {\n\npublic static void main(String args[]) throws Exception {\n        \n        String inFile = \"A-small-attempt0.in\";\/\/ path to input file \n        String outFile =  \"outputA.txt\";\n        \n        LineNumberReader lin = new LineNumberReader(new InputStreamReader(new FileInputStream(inFile)));\n        PrintWriter out = new PrintWriter(new File(outFile));\n        int NCASE = Integer.parseInt(lin.readLine());\n        for(int CASE = 1; CASE <= NCASE; CASE++) {\n            out.print(\"Case #\" + CASE + \": \");\n            String l = lin.readLine();\n            String  [] parts = l.split(\" \");\n            \n            int R = Integer.parseInt(parts[0]);\n            int C = Integer.parseInt(parts[1]);\n            int W = Integer.parseInt(parts[2]);\n            \n            int score=0;\n            int m=0;\n            \n            if (C%W==0) m=0; else m=1;\n            \n            score =  R*C\/W + W - 1 + m;\n            \n            \n            out.println(score);  \/\/ print result\n        }\n\n        lin.close();\n        out.close();\n    \n        }        \n}"}
{"idx":"627","func":"class R1CA {\n    public static void main(String[] args) throws IOException {\n\n        java.io.BufferedReader r = new java.io.BufferedReader\n                (new java.io.InputStreamReader (System.in));\n\n        String line;\n        int c = 0;\n        int t = Integer.parseInt(r.readLine());\n\n        while(t > 0) {\n            line = r.readLine();\n            String[] components = line.split(\" \");\n            int R = Integer.parseInt(components[0]);\n            int C = Integer.parseInt(components[1]);\n            int W = Integer.parseInt(components[2]);\n\n            int confirmedFirstHit = R * (C \/ W );\n            int a = (C % W == 0) ? 0: 1;\n\n            System.out.println(\"Case #\" + (c + 1) + \": \" + (confirmedFirstHit + W - 1 + a));\n            t--;\n            c++;\n        }\n    }\n}"}
{"idx":"628","func":"class GcjA {\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"output1.txt\"));\n        int nrT = Integer.parseInt(br.readLine());\n        for(int tnr = 1; tnr <= nrT; tnr++) {\n            String[] strs = br.readLine().split(\" \");\n            int r = Integer.parseInt(strs[0]);\n            int c = Integer.parseInt(strs[1]);\n            int w = Integer.parseInt(strs[2]);\n            \n            int res = r * (c \/ w) + w;\n            if(c % w == 0) {\n                res--;\n            }\n            pw.println(\"Case #\" + tnr + \": \" + res);\n        }\n        br.close();\n        pw.close();\n    }\n}"}
{"idx":"629","func":"class MainClass {\n\n    public static void main(String[] args) {\n        int T = 0;\n        try {\n            Scanner scan = new Scanner(new File(\"A-small-attempt0.in\"));\n            T = scan.nextInt();\n            scan.nextLine();\n            \/\/System.out.println(\"Number of test cases is \" + T);\n            for(int i = 0; i < T; i++) {\n                int R, C, W;\n                R = scan.nextInt();\n                C = scan.nextInt();\n                W = scan.nextInt();\n                \n                int answer = 0;\n                \n                for(int j = 0; j < R; j++) {\n                    for(int k = 0; k < C; k += W) {\n                        answer ++;\n                    }\n                }\n                answer += (W - 1);\n                System.out.println(\"Case #\" + (i+1) + \": \" + answer);\n            }\n            \n            \n        }\n        catch(Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n\n}"}
{"idx":"630","func":"class Problem1CA {\n\n    public static void main(String[] args) throws IOException {\n        \n        Scanner sc = new Scanner(new File(args[0]));\n        File outFile = new File(args[1]);\n        FileOutputStream os = new FileOutputStream(outFile);\n        OutputStreamWriter osw = new OutputStreamWriter(os);\n        Writer w = new BufferedWriter(osw);\n                \n        int cases = sc.nextInt();\n\n        for (int i=0; i<cases; ++i) {\n            \n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            int W = sc.nextInt();\n            \n            int shots = (C\/W)*R+W;\n            if (C%W == 0) {\n                --shots;\n            }\n            \n            w.write(\"Case #\" + Integer.toString(i+1) + \": \" + Integer.toString(shots) + \"\\n\");\n        }\n\n        w.close();\n        sc.close();\n    }\n}"}
{"idx":"631","func":"class Brattleship {\n    public static void main(String[] args) throws Exception {\n        String filename = \"A-large.in\";\n        File file = new File(\"\/Users\/tanin\/Downloads\/\" + filename);\n        File outFile = new File(\"\/Users\/tanin\/Downloads\/\" + filename + \".out\");\n        BufferedReader br = new BufferedReader(new FileReader(file));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\n        int testCases = Integer.parseInt(br.readLine());\n        for(int t=1;t<=testCases;t++){\n            String[] tokens = br.readLine().split(\" \");\n            int R = Integer.parseInt(tokens[0]);\n            int C = Integer.parseInt(tokens[1]);\n            int W = Integer.parseInt(tokens[2]);\n            int times = (C \/ W) * R;\n            \n            if ((C % W) > 0) {\n                times += W;\n            } else {\n                times += W - 1;\n            }\n\n            int result = times;\n            String outputLine = \"Case #\" + t + \": \" + result + \"\\n\";\n\n            System.out.print(outputLine);\n            bw.write(outputLine);\n        }\n        br.close();\n        bw.close();\n    }\n}"}
{"idx":"632","func":"class BrattleShip {\n\n    public static void main (String [] args) throws IOException {\n        String root = \"A-small-attempt0\";\n        String fileName = \"C:\\\\Users\\\\Aaron\\\\Downloads\\\\\" + root + \".in\";\n        BufferedReader reader = new BufferedReader (new FileReader(new File(fileName)));\n        int nTestCases = Integer.parseInt(reader.readLine());\n        ArrayList<String> out = new ArrayList<String>();\n        for (int t = 0; t < nTestCases; t++) {\n            String[] bn = reader.readLine().split(\" \");\n            \n            int r = Integer.parseInt(bn[0]);\n            int c = Integer.parseInt(bn[1]);\n            int w = Integer.parseInt(bn[2]);\n            \n            \/\/ 0 is unchecked, 1 is miss, 2 is hit\n            int[][] board = new int[r][c];\n            for (int[] b : board) Arrays.fill(b, 0);\n            \n            \n            \/\/ INIITALLY ASSUME R = 1;\n            \/\/ Stagger the hits\n            int ans = (c % w == 0) ? c \/ w : c \/ w + 1;\n            ans += (w - 1);\n            \n            \n            System.out.println(\"CASE \" + (t + 1) + \": \" + ans);\n            out.add(\"Case #\" + (t+1) + \": \" + ans);\n            System.out.println(\"-----------------\");\n        }\n        \n        PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\Aaron\\\\Downloads\\\\\"+ root + \"-SOL.out\")));\n        for (String s : out) {\n            writer.write(s + \"\\n\");\n        }\n        \n        writer.close();\n        reader.close();\n    }\n}"}
{"idx":"633","func":"class Q11 {\n\n    public static void main(String[] args) {\n        try {\n            Scanner in = new Scanner(new File(\"A-large.in\"));\n            PrintWriter out = new PrintWriter(\"A-large.out\");\n            int numberOfCases = Integer.parseInt(in.nextLine());\n            for (int caseNum = 1; caseNum <= numberOfCases; caseNum++) {\n                int rows = in.nextInt();\n                int columns = in.nextInt();\n                int shipWidth = in.nextInt();\n                int trials = 0;\n                trials += (columns \/ shipWidth) * rows + shipWidth;\n                if(columns % shipWidth == 0) {\n                    trials--;\n                }       \n                out.println(\"Case #\" + caseNum + \": \" + trials);\n            }\n            in.close();\n            out.close();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"634","func":"class ASol {\n\n\n    public static void main(String[] args) {\n        \n        Date d1 = new Date();\n        \/\/solveA(\"a.in\", \"a2.out\");\n        \/\/solveA(\"A-small-attempt0.in\", \"A-small-attempt02.out\");\n        try {\n            \n            FileWriter fw = new FileWriter(\"A-large.out\");\n            BufferedWriter bw = new BufferedWriter(fw);\n            \n            Scanner sc = new Scanner(new File(\"A-large.in\"));\n        \n            long t = sc.nextLong();\n            sc.nextLine();\n            \n            \/\/System.out.println(t);\n            for (long i2 = 0; i2 < t; i2++) {\n                \n                int r = sc.nextInt();\n                int c = sc.nextInt();\n                int w = sc.nextInt();\n                int result = w;\n                if (w == 1) {\n                    result = c*r;\n                } else {\n                    result = (c\/w)*r+(w-1);\n                    if (c % w != 0) {\n                        result += 1;\n                    }\n                    \n                }\n                \n        \n                \n                \n                \n                \n                String rez = \"\"+result;\n                \/\/System.out.println(\"result: \" + rez);\n                bw.write(\"Case #\" + (i2+1) + \": \" + rez + \"\\n\");\n                \n            }\n            \n            \n            bw.flush();\n            bw.close();\n            fw.close();\n            sc.close();\n        } catch (FileNotFoundException e) {\n            \n        } catch (IOException e) {\n            \n        } finally {\n            \n        }        \n        \n        Date d2 = new Date();\n        System.out.println(\"time: \" + (d2.getTime() - d1.getTime()));\n        \n        \n        \n        \n\n\n    }\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n}"}
{"idx":"635","func":"class Brattleship {\n    public static void main(String[] args) throws IOException {\n\/\/        System.out.prLongln(reverse(19));\n\n\/\/        File file = new File(\"A-large.in.txt\");\n\/\/        File file = new File(\"Brattleship.in\");\n        File file = new File(\"A-small-attempt0.in.txt\");\n        File outputFile = new File(\"Brattleship.out\");\n        BufferedWriter bw = new BufferedWriter(new FileWriter(outputFile));\n        BufferedReader br = new BufferedReader(new InputStreamReader(\n                new FileInputStream(file)));\n        Long numberOfTestCases = Long.valueOf(br.readLine());\n        Long count = (long)0;\n        while (count++ < numberOfTestCases) {\n\n            String line=br.readLine();\n            String[] params=line.split(\" \");\n            int R=Integer.valueOf(params[0]);\n            int C=Integer.valueOf(params[1]);\n            int W=Integer.valueOf(params[2]);\n            int singleRow=C\/W+W-1;\n            if(C%W>0){\n                singleRow++;\n            }\n            bw.write(\"Case #\" + String.valueOf(count) + \": \" + String.valueOf(R*singleRow));\n            bw.newLine();\n        }\n\n        bw.close();\n        br.close();\n    }\n}"}
{"idx":"636","func":"class Brattleships \n{\n  public static void main (String [] args) throws IOException\n  {\n    BufferedReader input = new BufferedReader (new FileReader (\"A-large (1).in\"));\n    PrintWriter output = new PrintWriter (new FileWriter (\"output.txt\"));\n    int count = Integer.parseInt(input.readLine ());\n    \n    for (int counter = 1; counter <= count; counter ++)\n    {\n      String [] variables = input.readLine ().split (\" \");\n      \n      int rows = Integer.parseInt (variables [0]);\n      int columns = Integer.parseInt (variables [1]);\n      int width = Integer.parseInt (variables [2]);\n      \n      int answer = rows*((int)Math.floor ((columns*1.0)\/(width*1.0))) + width;\n      if (columns % width == 0)\n        answer --;\n      \n      \n      \n      \n      \n      output.println (\"Case #\" + counter + \": \" + answer);\n    }\n    output.close ();\n  }\n}"}
{"idx":"637","func":"class Solution {\n\n    public static void main(String[] args) throws Exception {\n        \/\/BufferedReader br = new BufferedReader(new FileReader(\"A-sample.in\"));\n        \/\/BufferedReader br = new BufferedReader(new FileReader(\"A-small-attempt1.in\"));\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n        \n        \/\/File file = new File(\"A-sample.out\");\n        \/\/File file = new File(\"A-small.out\");\n        File file = new File(\"A-large.out\");\n        \n        if(!file.exists()) file.createNewFile();\n        FileWriter fw = new FileWriter(file.getAbsolutePath());\n        BufferedWriter bw = new BufferedWriter(fw);\n        \n        int numberOfCases = Integer.parseInt(br.readLine());\n        for(int caseNum = 1; caseNum <= numberOfCases; caseNum++) {\n            \n            String[] setup = br.readLine().split(\" \");\n            int r = Integer.parseInt(setup[0]);\n            int c = Integer.parseInt(setup[1]);\n            int w = Integer.parseInt(setup[2]);\n            \n            int findRow = (c \/ w) * r;\n            int rowRemainder = c % w;\n            \n            int findCol = rowRemainder == 0 ? w - 1 : w;\n            int number = findRow + findCol;\n            \n            String output = \"Case #\" + caseNum + \": \" + number + \"\\n\";\n            System.out.println(output);\n            bw.write(output);\n        }\n        \n        bw.close();\n    }\n}"}
{"idx":"638","func":"class A\n{\n    public static void main(String[] args) throws Exception\n    {\n        Scanner s=new Scanner(new FileInputStream(args[0]) );\n        int t=s.nextInt();\n        TreeSet<Long> keresettek=new TreeSet<Long>();\n        LinkedList<Long> keresettek2=new LinkedList<Long>();\n        for (int i=1;i<=t;i++)\n        {\n            int r=s.nextInt();\n            int c=s.nextInt();\n            int w=s.nextInt();\n             System.out.println(\"Case #\"+i+\": \"+r*\n            ( (c\/w) +(c%w!=0?1:0) +(w-1) ) );\n        }\n    }\n\n\n}"}
{"idx":"639","func":"class CodeJam1 {\n    \n    public static void main(String[] args) {\n        \/\/ Template starts here\n        BufferedReader br = null;\n        try {\n            br = new BufferedReader(new FileReader(\"input.txt\"));\n            int numTestCase = Integer.valueOf(br.readLine());\n            for(int testCase=1; testCase<=numTestCase; testCase++)\n            {\n                System.out.print(\"Case #\" + testCase + \": \");\n                \n                \/\/ Read each test case\n                \n                \/\/ Array\n                String[] qArray = br.readLine().split(\" \");\n                \/\/ Do you need to use long or double?\n                int r = Integer.valueOf(qArray[0]);\n                int c = Integer.valueOf(qArray[1]);\n                int w = Integer.valueOf(qArray[2]);\n                \n                long ansl = 0;\n                \n                \/\/ Logic goes here\n                ansl = r*c\/w;\n                ansl += w;\n                if((w == 1) ||(w == c) || (c%w == 0))\n                {\n                    ansl--;\n                }\n                \n                \n                \/\/ Print output\n                System.out.println(ansl);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \/\/ Template ends here\n    }\n    \n}"}
{"idx":"640","func":"class A {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(args[0]));\n        PrintWriter out = new PrintWriter(args[1], \"UTF-8\");\n\n        int T = Integer.parseInt(br.readLine());\n        for (int t = 1; t <= T; ++t) {\n            out.print(\"Case #\"+t+\": \");            \n\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int R = Integer.parseInt(st.nextToken());\n            int C = Integer.parseInt(st.nextToken());\n            int W = Integer.parseInt(st.nextToken());\n\n            if (W == C)\n                out.println(W+R-1);\n            else if (C < 2*W)\n                out.println(R+W);\n            else if (C == 2*W)\n                out.println(2*R-1+W);\n            else {\n                int rem = C%W;\n                if (rem == 0) {\n                    out.println((C*R)\/W-1+W);\n                }\n                else {\n                    out.println((C\/W)*R+W);\n                }\n            }\n        }\n\n        out.flush();\n        out.close();\n\n        System.exit(0);\n    }\n}"}
{"idx":"641","func":"class A {\n\n    public static void main(String[] args) throws Exception {\n\/\/        Scanner sc = new Scanner(new FileReader(\"data\/sample\"));\n        Scanner sc = new Scanner(new FileReader(\"data\/A-small-attempt0.in\"));\n\/\/        Scanner sc = new Scanner(new FileReader(\"data\/A-large.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"data\/out\"));\n        int caseCount = sc.nextInt();\n        for(int caseNum = 0; caseNum < caseCount; caseNum++) {\n            pw.print(\"Case #\" + (caseNum + 1) + \": \");\n            System.out.print(\"Case #\" + (caseNum + 1) + \": \");\n\n            A template = new A();\n            int R, C, W;\n                    R = sc.nextInt();\n                    C = sc.nextInt();\n                    W = sc.nextInt();\n                    \n                    int fh = R * C \/ W;\n                    int ans = 0;\n                    \n                    boolean edge;\n                    if(C % W == 0) {\n                        edge = true;\n                    } else {\n                        edge = false;\n                    }\n                    \n                    if(edge) {\n                        ans = fh + W - 1;\n                    } else {\n                        ans = fh + W;\n                    }\n                    \n                    System.out.print(ans);\n                    pw.print(ans);\n            \/\/        System.out.println(R + \" \" + C + \" \" + W);\n            \n            System.out.println();\n            pw.println();\n        }\n        \n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n\n}"}
{"idx":"642","func":"class gcjround1C_1\n{\n    static Scanner sc=new Scanner (System.in);\n    public static void main (String[]args)\n    {\n        \/\/String newLine=\"\"+(char)13;\n        \/\/sc.useDelimiter(newLine);\n\n        long T=sc.nextLong();\n        for (long i=0;i<T;i++)\n        {\n            int R=sc.nextInt();\n            int C=sc.nextInt();\n            int W=sc.nextInt();\n            int perRow=(int)Math.ceil(C\/(double)W);\n            System.out.println(\"Case #\"+(i+1)+\": \"+(perRow*R+ (W-1)));\n        }\n    }\n}"}
{"idx":"643","func":"class R20151C_A {\n    \n    private int t;\n    \n    public static void main(String[] args) {\n        R20151C_A r = new R20151C_A();\n        File folder = new File(r.getClass().getSimpleName() + \"_cases\");\n        File inFolder = new File(r.getClass().getSimpleName() + \"_cases\" + \"\/in\");\n        File outFolder = new File(r.getClass().getSimpleName() + \"_cases\" + \"\/out\");\n        \n        if (!folder.isDirectory()) {\n            folder.mkdir();\n        }\n        if (!outFolder.isDirectory()) {\n            outFolder.mkdir();\n        }\n        if (!inFolder.isDirectory()) {\n            inFolder.mkdir();\n        }\n        \n        for (String in : inFolder.list()) {\n            String fileNameCore = in.replace(\".in\", \"\");\n            String outFileName = fileNameCore + \".out\";\n            \n            \n            PrintStream ps = null;\n            Scanner s = null;\n            try {\n                File inFile = new File(r.getClass().getSimpleName() + \"_cases\" + \"\/in\" + \"\/\" + in);\n                File outFile = new File(r.getClass().getSimpleName() + \"_cases\" + \"\/out\" + \"\/\" + outFileName);\n                \n                ps = new PrintStream(outFile);\n                s = new Scanner(inFile);\n                \n                r.t = s.nextInt();\n                for (int i = 0; i < r.t; i++) {\n                    ps.print(\"Case #\" + (i+1) + \": \");\n                    r.R = s.nextInt();\n                    r.C = s.nextInt();\n                    r.W = s.nextInt();\n                    r.m = (r.C \/ r.W) * (r.R - 1);\n                    r.m += Math.max(((r.C - 1) \/ r.W) - 1, 0);\n                    r.m += r.W + (r.W == r.C? 0 : 1);\n                    ps.println(r.m);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                if (s != null) {\n                    s.close();\n                }\n                \n                if (ps != null) {\n                    ps.close();\n                }\n            }\n                \n            \n        }\n    }\n    \n    private int R;\n    \n    private int C;\n    \n    private int W;\n    \n    private int m;\n\n\n}"}
{"idx":"644","func":"class Brattleship {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int T = input.nextInt();\n        for (int i = 0; i < T; i++) {\n            int r = input.nextInt();\n            int c = input.nextInt();\n            int w = input.nextInt();\n            \n            int solution;\n            if (c % w == 0)\n                solution = (c\/w) * r+w-1;\n            else {\n                solution = (c\/w) * r+w;\n            }\n            System.out.println(\"Case #\" + (i+1) + \": \"  + solution);\n        }\n        input.close();\n    }\n\n}"}
{"idx":"645","func":"class Bratteship{\n    \/\/static String filename = \"file\";\n    static String filename = \"A-small-attempt2\";    \/\/ io filnename here\n    static String inname = filename + \".in\";    \n    static String outname = filename + \".out\";  \n    static int n;\n    public static void main(String[] args){\n        try{\n            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));\n            \/\/Scanner in = new Scanner(System.in);\n            BufferedWriter out = new BufferedWriter(new FileWriter(outname));\n            int t = in.nextInt();\n            in.nextLine();\n            for (int cas = 1; cas <= t; cas++){\n                \/\/String ans = \"\";\n                \/\/String g = in.nextLine();\n                \n                int r = in.nextInt();\n                int c = in.nextInt();\n                int saize = in.nextInt();\n                \n                \n                int ans = 0;\n                \n                ans += c\/saize;\n                ans *= r;\n                if ((c%saize!=0)&&(saize!=r)) ans += 1;\n                ans += saize - 1;\n                \n                \/\/System.out.print(\"Case #\" + cas + \": \" + ans + \"\\n\");\n                out.write(\"Case #\" + cas + \": \" + ans + \"\\n\");\n            }\n            in.close();\n            out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"646","func":"class Solution {\n    \n    public static void main(String[] args) throws Throwable {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        StringTokenizer tokenizer = new StringTokenizer(in.readLine());\n        int tn = Integer.parseInt(tokenizer.nextToken());\n        for (int test = 1; test <= tn; test++) {\n            \n            tokenizer = new StringTokenizer(in.readLine());\n\n            \/* start sol *\/\n\n\n\n            int r = Integer.parseInt(tokenizer.nextToken());\n            int c = Integer.parseInt(tokenizer.nextToken());\n            int w = Integer.parseInt(tokenizer.nextToken());\n\n            int res = c\/w;\n            res*=r;\n            if(c%w !=0) {\n                res++;\n            }\n            res+=w-1;\n\n            out.print(\"Case #\" + test + \": \" + res);\n            \/* end sol *\/\n\n\n\n\n            if(test < tn) {\n                out.println();\n            }\n\n\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"647","func":"class A {\n\n    \/**\n     * @param args\n     * @throws FileNotFoundException \n     *\/\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"A-small-attempt1.in\"));\/\/\n        PrintWriter out = new PrintWriter(\"out.txt\");\n        int T = in.nextInt();\n        for(int i=1;i<=T;i++){\n            int r = in.nextInt();\n            int c = in.nextInt();\n            int w = in.nextInt();\n            int res1 = 0;\n            if(r==1){\n                int p = w;\n                while(p<=c){\n                    res1++;\n                    p+=w;\n                }\n                res1+=w;\n                if(p==c+w){\n                    res1--;\n                }\n            }\n            else{\n                int p = w;\n                while(p<=c){\n                    res1++;\n                    p+=w;\n                }\n                res1*=r;\n                res1+=w;\n                if(p==c+w){\n                    res1--;\n                }\n            }\n            int res = res1;\n            out.println(\"Case #\"+i+\": \"+res);            \n        }\n        \n        out.close();\n        in.close();\n\n    }\n}"}
{"idx":"648","func":"class A {\n    public static void main (String[] args) {\n        A r = new A();\n        try {\n            BufferedReader in = new BufferedReader(new FileReader(args[0]));\n            PrintStream out = new PrintStream(args[0] + \".out\");\n            int CASES = Integer.parseInt(in.readLine());\n            for (int CASE = 1 ; CASE <= CASES ; CASE++) {\n                String[] words = in.readLine().split(\" \");\n                int[] ret = new int[words.length];\n                for (int i = 0 ; i < words.length ; i++) ret[i] = Integer.parseInt(words[i]);\n                int[] input = ret;\n                int R = input[0];\n                int C = input[1];\n                int W = input[2];\n                int val = R * C \/ W + (C % W == 0 ? 0 : 1) + W - 1;\n                out.printf(\"Case #%d: %d\\n\", CASE, val);\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}"}
{"idx":"649","func":"class CodeJam_Round {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) throws IOException {\n        \n        int cases;\n        \n        final String filename = \"aA-large.in\";\n        final String outFile = \"aA-large.out\";\n\n        String[] vals;\n        \/\/----------------------------Inits-Go-Here----------------------------\\\\\n        \n        StringBuilder str = new StringBuilder();\n        String temp;\n        \n        try (BufferedReader reader = new BufferedReader(new FileReader(filename));\n                BufferedWriter writer = new BufferedWriter(new FileWriter(outFile))) {\n            \n            \/\/Num of Cases\n            temp = reader.readLine();\n            cases = Integer.valueOf(temp);\n            \n            for (int i = 1; i <= cases; ++i) {\n                temp = reader.readLine();\n                vals = temp.split(\" \");\n                \n                \/\/------------------------Inits-Go-Here------------------------\\\\\n                int R = Integer.parseInt(vals[0]);\n                int C = Integer.parseInt(vals[1]);\n                int W = Integer.parseInt(vals[2]);\n                int sum = 0;\n\n                sum += (C \/ W) * (R - 1);\n                sum += (C - W) \/ W;\n                sum += W;\n\n                if (C % W != 0) {\n                    sum++;\n                }\n\n\n\n\n                str.append(\"Case #\").append(i).append(\": \").append(sum);\n\n                System.out.println(str.toString());\n\n                writer.write(str.toString());\n                writer.newLine();\n\n                str = new StringBuilder();\n            }\n        }\n\n    }\n    \n    \n}"}
{"idx":"650","func":"class Brattleship {\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new FileReader(args[0]));\n        BufferedWriter writer = new BufferedWriter(new FileWriter(args[0].substring(0, args[0].length() - 2) + \"out\"));\n        int testCases = Integer.parseInt(reader.readLine());\n        System.out.println(\"Test cases: \" + testCases);\n        for (int test = 0; test < testCases; test++) {\n            String[] splitLine = reader.readLine().split(\" \");\n            int R = Integer.parseInt(splitLine[0]);\n            int C = Integer.parseInt(splitLine[1]);\n            double W = Double.parseDouble(splitLine[2]);\n            int cells = R*C;\n            int fuller = (int) Math.floor(C \/ W);\n            int completeFuller = fuller * R;\n            int res = (int)(completeFuller + (W - 1) + (C % W == 0 ? 0 : 1) );\n            writer.write(\"Case #\" + (test + 1) + \": \" + res + \"\\n\");\n            System.out.println(\"Case #\" + (test + 1) + \": \" + res + \"\\n\");\n        }\n        reader.close();\n        writer.flush();\n        writer.close();\n    }\n}"}
{"idx":"651","func":"class Q2A {\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int numCases = scan.nextInt();\n        for (int i = 0; i < numCases; i++) {\n            int rows = scan.nextInt();\n            int cols = scan.nextInt();\n            int width = scan.nextInt();\n            int[][] board = new int[rows][cols];\n            int hitcount = 0;\n            int turns = 0;\n            while(hitcount < width) {\n                List<boolean[][]> retval = new ArrayList<>();\n                for (int r1 = 0; r1 < board.length; r1++) {\n                    for (int c1 = 0; c1 < board[0].length - width + 1; c1++) {\n                        \/\/ can place?\n                        boolean canPlace = true;\n                        for (int cc = 0; cc < width; cc++) {\n                            if (board[r1][c1+cc] == 1) { \/\/ miss\n                                canPlace = false;\n                                break;\n                            }\n                        }\n                        if (!canPlace) continue;\n                        boolean[][] shippos = new boolean[board.length][board[0].length];\n                        for (int cc = 0; cc < width; cc++) {\n                            shippos[r1][c1+cc] = true;\n                        }\n                        retval.add(shippos);\n                    }\n                }\n                List<boolean[][]> possibleships = retval;\n                int[][] counts = new int[rows][cols];\n                for (boolean[][] ship: possibleships) {\n                    for (int r = 0; r < rows; r++) {\n                        for (int c = 0; c < cols; c++) {\n                            if (ship[r][c] && board[r][c]==0) counts[r][c]++;\n                        }\n                    }\n                }\n                int highcount = 0;\n                int highrow = 0, highcol = 0;\n                for (int r = 0; r < rows; r++) {\n                    for (int c = 0; c < cols; c++) {\n                        if (counts[r][c] > highcount) {\n                            highrow = r;\n                            highcol = c;\n                            highcount = counts[r][c];\n                        }\n                    }\n                }\n                \/\/ ask for highrow, highcol\n                \/\/ bro will pick board where highrow, highcol is not hit if possible\n                boolean ismiss = false;\n                for (boolean[][] ship: possibleships) {\n                    if (!ship[highrow][highcol]) {\n                        board[highrow][highcol] = 1; \/\/ miss\n                        ismiss = true;\n                        break;\n                    }\n                }\n                if (!ismiss) {\n                    board[highrow][highcol] = 2; \/\/ hit\n                    hitcount++;\n                }\n                turns++;\n            }\n            int result = turns;\n            System.out.println(\"Case #\" + (i + 1) + \": \" + result);\n        }\n    }\n}"}
{"idx":"652","func":"class AL {\n    static final boolean _PRACTICE = false;\n    static final boolean _SMALL = false;\n    static final boolean _FILEOUT = true;\n    static final String _PROBLEM = \"A\";\n\n    private int R, C, W;\n\n    private int compute() {\n        int firstHit = C \/ W * R;\n        return firstHit + (W - 1) + ((C % W == 0) ? 0 : 1);\n    }\n\n    public static void main(String... args) throws IOException {\n        FileInputStream is = null;\n        PrintStream ps = null;\n        if (_SMALL) {\n            int i = 0;\n            while (new File(_PROBLEM + \"-small\"\n            + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\").exists())\n                i++;\n            i--;\n            if (new File(_PROBLEM + \"-small\"\n            + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\").exists()) {\n                System.err.println(\"overwrite?(y\/n)\");\n                char c = (char) System.in.read();\n                if (c != 'y') {\n                    return;\n                }\n            }\n            System.setIn(is = new FileInputStream(_PROBLEM + \"-small\"\n            + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\"));\n            if (_FILEOUT) {\n                System.setOut(ps = new PrintStream(_PROBLEM + \"-small\"\n                + (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\"));\n            }\n            AL r = new AL();\n            Scanner sc = new Scanner(System.in);\n            int t = sc.nextInt();\n            for (int k = 1; k <= t; k++) {\n                System.out.print(\"Case #\" + k + \": \");\n            \n                r.R = sc.nextInt();\n                r.C = sc.nextInt();\n                r.W = sc.nextInt();\n            \n                System.out.println(r.compute());\n            }\n            if (sc != null) {\n                sc.close();\n            }\n        } else {\n            System.setIn(is = new FileInputStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".in\"));\n            if (_FILEOUT) {\n                System.setOut(ps = new PrintStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".out\"));\n            }\n            AL r = new AL();\n            Scanner sc = new Scanner(System.in);\n            int t = sc.nextInt();\n            for (int k = 1; k <= t; k++) {\n                System.out.print(\"Case #\" + k + \": \");\n            \n                r.R = sc.nextInt();\n                r.C = sc.nextInt();\n                r.W = sc.nextInt();\n            \n                System.out.println(r.compute());\n            }\n            if (sc != null) {\n                sc.close();\n            }\n        }\n        if (is != null)\n            is.close();\n        if (ps != null)\n            ps.close();\n    }\n}"}
{"idx":"653","func":"class A {\n    private final int R, C, W;\n\n    \/\/ parse\n    public A(final Scanner sc) {\n        R = sc.nextInt();\n        C = sc.nextInt();\n        W = sc.nextInt();\n    }\n\n    \/\/ Template\n    public static void main(String... args) throws Exception {\n        try (final Scanner sc = new Scanner(System.in)) {\n            final int T = sc.nextInt();\n            final Object[] solvers = new Object[T];\n            for (int i = 0; i < T; i++)\n                solvers[i] = new A(sc);\n            final Iterator<String> results = Arrays.stream(solvers)\n                    .map(s -> s.toString())\n                    .iterator();\n            for (int i = 1; i <= T; i++)\n                System.out.printf(\"Case #%s: %s\\n\", i, results.next());\n        }\n    }\n}"}
{"idx":"654","func":"class A\n{\n    public static void main(String[] args) throws Exception\n    {\n        File file = new File(\"A-small-attempt0.in\");\n        Scanner input = new Scanner(file);\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++)\n        {\n            int r = input.nextInt();\n            int c = input.nextInt();\n            int w = input.nextInt();\n            int[][] b = new int[r][c];\n            int score = 0;\n            for(int j=0; j<r; j++)\n            {\n                int i = 0;\n                while(i < c)\n                {\n                    i += w;\n                    score++;\n                }\n            }\n            score += (w-1);\n            System.out.println(\"Case #\"+(n+1)+\": \"+score);\n        }\n    }\n}"}
{"idx":"655","func":"class A {\n\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        int testCases = reader.nextInt();\n        for(int t = 0; t < testCases; t++){\n            int r = reader.nextInt();\n            int c = reader.nextInt();\n            int w = reader.nextInt();\n            int answer = c \/ w;\n            answer *= r;\n            answer += w - 1;\n            if(c % w > 0){\n                answer++;\n            }\n            System.out.println(\"Case #\" + (t+1) + \": \" + answer);\n        }\n        reader.close();\n    }\n\n}"}
{"idx":"656","func":"class A {\n \n    public static void main(String[] args) throws FileNotFoundException {\n        A r = new A();\n        \/\/Scanner in = new Scanner(System.in);\n        Scanner in = new Scanner(new File(\"al.in\"));\n        PrintWriter out = new PrintWriter(\"al.out\");\n        int tt = Integer.parseInt(in.nextLine());\n        for (int test = 1; test <= tt; test++) {\n            int r1 = in.nextInt();\n            int c = in.nextInt();\n            int w = in.nextInt();\n            int ans = c \/ w + (w - 1) + (c % w == 0 ? 0 : 1) + (r1 - 1) * (c \/ w); \n            \/\/System.out.println(\"Case #\" + test + \": \" + ans);\n            out.println(\"Case #\" + test + \": \" + ans);\n        }\n        \n        out.close();\n    }\n}"}
{"idx":"657","func":"class Problem1 {\n    public static void main(String[] args) {\n    try {\n        BufferedReader reader = new BufferedReader(new FileReader(\"A-small-attempt1.in\"));\n        String line1 = null;\n        List<String> lines1 = new ArrayList<String>();\n        while((line1 = reader.readLine()) != null) {\n            lines1.add(line1);\n        }\n        reader.close();\n        List<String> lines = lines1;\n        List<String> outputLines = new ArrayList<String>();\n        int index = 0;\n        int testCases = Integer.parseInt(lines.get(index++));\n        for(int t = 0; t < testCases; t++) {\n            String line = lines.get(index++);\n            String tokens[] = line.split(\" \");\n            int R = Integer.parseInt(tokens[0]);\n            int C = Integer.parseInt(tokens[1]);\n            int W = Integer.parseInt(tokens[2]);\n            int count = 0;\n            if(C%W ==0) {\n            count = C\/W-1;\n            int x = W;\n            count = count + x;\n            }else {\n            count = C\/W-1;\n            int x = W+1;\n            count = count + x;\n            }\n            Object result = R * count;\n            String testCaseOutput = \"Case #\" + (t+1) + \": \" + result;\n            System.out.println(testCaseOutput);\n            outputLines.add(testCaseOutput);\n        }\n        StringBuilder strValue = new StringBuilder(\"\");\n        if (outputLines != null) {\n            int i = 0;\n            for (Object v : outputLines) {\n            String value = v.toString();\n            if (i == 0) {\n                strValue.append(value);\n            } else {\n                strValue.append(\"\\n\");\n                strValue.append(value);\n            }\n            i++;\n            }\n        }\n        String output = strValue.toString();\n        FileWriter writer = new FileWriter(\"A-small-attempt1.in\".replace(\".in\", \".out\"));\n        writer.write(output);\n        writer.close();\n    }catch(Exception ex) {\n        ex.printStackTrace();\n    }\n    }\n\n\n}"}
{"idx":"658","func":"class a {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(a.class.getResourceAsStream(\"a-in.txt\"));\n        System.setOut(new PrintStream(\"src\/a-out.txt\"));\n       \n        \/\/Scanner in = new Scanner(System.in);\n        int testcases, testcase = 1;\n        testcases = in.nextInt();\n        while(testcase <= testcases) {\n            int r = in.nextInt(), c = in.nextInt(), w = in.nextInt();\n            int ans = (r - 1) * ((c - 1) \/ w + 1);\n            if(c > 2 * w - 1) {\n                ans += ((c - 1) \/ w + w);\n            } else if(c > w) {\n                ans += (w + 1);\n            } else {\n                ans += w;\n            }\n            \/\/System.out.println(r + \" \" + c + \" \" + w);\n            System.out.println(\"Case #\" + testcase + \": \" + ans);\n            testcase++;\n        }\n    }\n\n}"}
{"idx":"659","func":"class TaskA {\n\n    public static void main(String[] args) {\n        long time = System.currentTimeMillis();\n        Scanner sc = new Scanner(new BufferedInputStream(System.in));\n        int t = sc.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            int w = sc.nextInt();\n            int res = c \/ w;\n            if (c % w == 0) {\n                res = res * r + w -1;\n            }\n            else {\n                res = res * r + w;\n            }\n            System.out.println(\"Case #\" + i + \": \" + (long) res);\n        }\n        sc.close();\n        System.err.println(System.currentTimeMillis() - time);\n    }\n\n}"}
{"idx":"660","func":"class Main {\n\n    public static void main(String[] args) throws Exception {\n\n        FileReader in = new FileReader(\"F:\\\\download\\\\A-large.in\");\n        BufferedReader br = new BufferedReader(in);\n        FileWriter out = new FileWriter(\"F:\\\\download\\\\CodeJam\\\\out.txt\");\n        BufferedWriter bw = new BufferedWriter(out);\n        \n        int t = Integer.parseInt(br.readLine());\n        for (int c = 0; c < t; c++){\n\n\/\/            int l = Integer.parseInt(br.readLine());\n\n            String line = br.readLine();\n            StringTokenizer St1 = new StringTokenizer(line, \" \");\n            int ro = Integer.valueOf(St1.nextToken()).intValue();\n            int co = Integer.valueOf(St1.nextToken()).intValue();\n            int w = Integer.valueOf(St1.nextToken()).intValue();\n            \n            int answer = ((int)(co \/ w)) * (ro - 1);\n            answer += w;\n\n            while (true){\n                if (co > w){\n                    co -= w;\n                    answer ++;\n                }\n                else{\n                    break;\n                }\n            }\n            \n            \n            \n            bw.write(String.format(\"Case #%d: %d\\n\", c+1, answer));\n        }\n\n\n        br.close();\n        in.close();\n        bw.close();\n        out.close();\n\n    }\n    \n\n}"}
{"idx":"661","func":"class Z1_1 {\n\n    public static void main(String[] args) throws Exception {\n        FileWriter fw = new FileWriter(\"C:\\\\output.txt\");\n        BufferedWriter out = new BufferedWriter(fw);\n        \/\/String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\z1.txt\";\n        String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\A-small-attempt0.in\";\n        \/\/String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\D-large.in\";\n        Scanner scanner = new Scanner(new File(pathname));\n        int tn = scanner.nextInt();\n        scanner.nextLine();\n        for (int ti = 1; ti <= tn; ti++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            int w = scanner.nextInt();\n            int start  = w;\n            int cnt = 1;\n            while (start<c-w) {\n                cnt++;\n                start += w;\n            }\n            cnt += w;\n            if (w==c) {\n                cnt = w;\n            }\n            String s;\n            if (cnt==Integer.MAX_VALUE) {\n                s = \"Case #\" + ti + \": NOT POSSIBLE\";\n            } else {\n                s = \"Case #\" + ti + \": \"+cnt;\n            }\n            System.out.println(s);\n            out.write(s);\n            out.write(\"\\n\");\n        }\n        out.close();\n    }\n\n}"}
{"idx":"662","func":"class prblmA {\n    final static String PROBLEM_NAME = \"prblmA\";\n    final static String WORK_DIR = \"F:\\\\GCJ\\\\\" + PROBLEM_NAME + \"\\\\\";\n    \n    public static void main(String[] args) throws Exception {\n         \/\/Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-small-attempt1.in\"));\n         Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-large.in\"));\n         \/\/Scanner sc = new Scanner(new FileReader(WORK_DIR + \"input.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\n        int caseCnt = sc.nextInt();\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\n           \/\/ System.out.println(\"Processing test case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n            prblmA r = new prblmA();\n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            int W = sc.nextInt();\n            \n            int count = 0 ;\n            count = (int) Math.floor(C\/W);     \n            count = count*R;\n            if(C%W==0)\n            count = count+W-1; \n            else\n            count = count+W;    \n                       \n             pw.println(count);\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"663","func":"static void main (String[] args) throws java.lang.Exception\n    {\n        \/\/ your code goes here\n        InputStream inputStream = new FileInputStream(\"D:\\\\test2.in\");\n        BufferedReader r = new BufferedReader (new InputStreamReader (inputStream));\n        int numtestcase=0;\n        \/\/while (!(s=r.readLine()).startsWith(\"42\")) System.out.println(s);\n        numtestcase=Integer.parseInt(r.readLine());\n        for(int i=1;i<=numtestcase;i++)\n        {\n            String s=r.readLine();\n            String[] s1=s.split(\" \");\n            int R=Integer.parseInt(s1[0]);\n            int c=Integer.parseInt(s1[1]);\n            int w=Integer.parseInt(s1[2]);\n            int result=0;\n            if(w==1) result=R*c;\n            else\n            if(w==R*c) result=R*c;\n            else\n            if(c%w==0) result=c\/w+w-1;\n            else {\n                int temp=c\/w;\n                result = temp+w;\n            }\n            System.out.println(\"Case #\"+Integer.toString(i)+\": \"+Integer.toString(result));\n\n        }\n    }\n}"}
{"idx":"664","func":"class A {\n    public static void main(String[] args) {\n        A obj = new A();\n        String filame = \"input.txt\";\n        if (args.length > 0) {\n            filame = args[0];\n        }\n        File file = new File(filame);\n        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n            Integer testCasesCount = Integer.parseInt(br.readLine());\n            int testCaseNumber = 1;\n            for (String line; (line = br.readLine()) != null;) {\n                String[] testCase = line.split(\"\\\\s+\");\n                int row = Integer.parseInt(testCase[0]);\n                        int cells = Integer.parseInt(testCase[1]);\n                        int width = Integer.parseInt(testCase[2]);\n                \/\/        char[] visitors = visitorsLine.toCharArray();\n                \/\/        int total = 0;\n                \/\/        int friends = 0;\n                \/\/\n                \/\/        System.out.print(\"Case #\" + testCasesCount + \": \");\n                \/\/        for (int i = 0; i < visitors.length; i++) {\n                \/\/            int shameCount = Character.getNumericValue(visitors[i]);\n                \/\/\n                \/\/            if (total < i) {\n                \/\/\n                \/\/                int frindsToAdd = i - total;\n                \/\/                total += frindsToAdd;\n                \/\/                friends += frindsToAdd;\n                \/\/            }\n                \/\/            total += shameCount;\n                \/\/        }\n                        \/\/System.out.print(row);\n                        \/\/System.out.print(cells);\n                        \/\/System.out.println(width);\n                \n                        int limit =  cells \/ width;\n                        int res = limit + width-1;\n                        \n                        int fin = res * row;\n                        int left = cells % width;\n                        \/\/System.out.println(left);\n                        if(left != 0 && width != 1){\n                            fin++;\n                        }\n                        \n                        System.out.println(\"Case #\"+ testCaseNumber++ +\": \"+ fin);\n                        \/\/System.out.println();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}"}
{"idx":"665","func":"class A\n{\n    public static void main(String [] args) throws Exception\n    {\n        Scanner inScan = new Scanner(System.in);\n        System.out.println(\"Enter the filename\");\n        String filename = inScan.nextLine();\n        BufferedReader b = new BufferedReader(new FileReader(filename));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"out.txt\")));\n\n        int numExamples = Integer.parseInt(b.readLine());\n        for(int i = 0; i < numExamples; i++)\n        {\n            String[] line = b.readLine().split(\" \");\n            int r = Integer.parseInt(line[0]);\n            int c = Integer.parseInt(line[1]);\n            int w = Integer.parseInt(line[2]);\n            int numPerRow = (int)Math.ceil((double)c\/(double)w);\n            int total = numPerRow*r;\n            total = total + w-1;\n            \n            out.print(\"Case #\" + (i+1) + \": \" + total);\n            if(i != numExamples-1)\n                out.println();\n            out.flush();\n        }\n        \n        out.close();\n    }\n    \n    \n}"}
{"idx":"666","func":"class problemA {\n    \n    private static int inst;\n\n    public static void main(String[] args) {\n\n        String input = \"\/Users\/npapa\/Documents\/codejam\/A-large.in\";\n        \/\/String input = \"\/Users\/npapa\/Documents\/codejam\/A-large.in\";\n        String output = \"\/Users\/npapa\/Documents\/codejam\/output\";\n        try {\n            Scanner sc = new Scanner(new FileReader(input));\n            PrintWriter pw = new PrintWriter(output);\n\n            int n = sc.nextInt();\n            sc.nextLine();\n            for (int c = 0; c < n; c++) {\n                System.out.println(\"Test case \" + (c + 1) + \"...\");\n                pw.print(\"Case #\" + (c + 1) + \": \");\n                int r = sc.nextInt();\n                int c1 = sc.nextInt();\n                int n1 = sc.nextInt();\n                System.out.println(r+\" \"+c1+\" \"+n1);\n                int findRow =r*(c1\/n1);\n                        int findShip=0;\n                        if(c1%n1==0)\n                            findShip = n1-1;\n                        else\n                            findShip = n1;\n                \n                \/\/        if(n==1){\n                \/\/            findRow=r*c;\n                \/\/            findShip=0;\n                \/\/        }\n                        System.out.println(\"findRow: \"+findRow+\" findShip: \"+findShip);\n                \n                \n                int res = findRow+findShip;\n                \n                System.out.println(res);\n                pw.print(res);\n                pw.println();\n            }\n            pw.println();\n            pw.flush();\n            pw.close();\n            sc.close();\n        } catch (FileNotFoundException ex) {\n            ex.printStackTrace();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n\n}"}
{"idx":"667","func":"class A {\n  public static void main( String[] args ) {\n    try {\n      FileInputStream fstream = new FileInputStream( \"\/home\/milan\/codeJam2015\/r1c\/A\/large.in\" );\n      DataInputStream in = new DataInputStream( fstream );\n      BufferedReader br = new BufferedReader( new InputStreamReader( in ) );\n      int T = Integer.valueOf( br.readLine() );\n      int i = 1;\n      String strLine;\n      String[] line;\n      while( i <= T ) {\n        strLine = br.readLine();\n        line = strLine.split( \" \" );\n        int R, C, W, res = -1;\n        R = Integer.valueOf( line[0] );\n        C = Integer.valueOf( line[1] );\n        W = Integer.valueOf( line[2] );\n        if( W == C )\n          res = R - 1 + W;\n        else if( C % W == 0 )\n          res = R * ( C \/ W ) + W - 1;\n        else\n          res = R * ( C \/ W ) + W;\n        \/\/System.out.println( \"Case #\" + i + \": \" + res );\n        try {\n          BufferedWriter bw = new BufferedWriter( new FileWriter( new File( \"\/home\/milan\/codeJam2015\/r1c\/A\/large.out\" ), true ) );\n          bw.write( \"Case #\" + i + \": \" + res );\n          bw.newLine();\n          bw.close();\n        }\n        catch( Exception e ) {\n          System.err.println( \"Error: \" + e.getMessage() );\n        }\n        i++;\n      }\n      br.close();\n    }\n    catch( Exception e ) {\/\/Catch exception if any\n      System.err.println( \"Error: \" + e.getMessage() );\n    }\n  }\n}"}
{"idx":"668","func":"static void main(String arg[]) throws IOException{\n        BufferedReader obj=new BufferedReader(new InputStreamReader(System.in));\n        int t=Integer.parseInt(obj.readLine());\n        int t1=t;\n        while(t>0){\n            String s[]=obj.readLine().split(\" \");\n            int r=Integer.parseInt(s[0]);\n            int c=Integer.parseInt(s[1]);\n            int w=Integer.parseInt(s[2]);\n            int ans=0;\n            if(c%w==0){\n                ans=c\/w -1 + w;\n            }\n            else{\n                ans=c\/w + w;\n            }\n            System.out.println(\"Case #\"+ (t1-t+1) + \": \" + ans);\n            t--;\n        }\n    }\n}"}
{"idx":"669","func":"class A {\n    static BufferedReader in;\n    static PrintWriter out;\n\n    public static void main(String[] args) throws IOException {\n        in = new BufferedReader(new FileReader(new File(\n                \"\/Users\/yfo\/Downloads\/a2.in\")));\n        out = new PrintWriter(new FileWriter(new File(\n                \"\/Users\/yfo\/Downloads\/a2_out.in\")));\n\n        int T = Integer.parseInt(in.readLine());\n        for (int t = 0; t < T; t++) {\n            System.out.print((t + 1) + \": \");\n            \n            String[] tok = in.readLine().split(\" \");\n            int R = Integer.parseInt(tok[0]);\n            int C = Integer.parseInt(tok[1]);\n            int W = Integer.parseInt(tok[2]);\n            \n            int x = (C\/W)*R;\n            int m = C%W;\n            \n            x+=(W-1);\n            if (m>0) x++;\n            \n            \n            out.println(\"Case #\" + (t + 1) + \": \"+x);\n            System.out.println(x);\n        }\n\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"670","func":"class A {\n\n    private static final String INPUT = \"A-large.in\";\n    private static final String OUTPUT = \"A-large.out\";\n\n    public static void main(String[] args) {\n        try {\n            Scanner sc = new Scanner(Paths.get(INPUT));\n            StringBuilder sb = new StringBuilder();\n            int cases = sc.nextInt();\n            for (int c = 1; c < cases + 1; c++) {\n                int R = sc.nextInt();\n                int C = sc.nextInt();\n                int W = sc.nextInt();\n\n                String line = \"Case #\" + c + \": \" + solve(R, C, W);\n                System.out.println(line);\n                sb.append(line).append('\\n');\n            }\n            Files.write(Paths.get(OUTPUT), sb.toString().getBytes());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static int solve(int R, int C, int W) {\n        int tryRows = (int) Math.floor((C \/ W) * 1.0);\n        int ret = W + (int) Math.ceil((C - W) * 1.0 \/ W);\n        return tryRows * (R - 1) + ret;\n    }\n}"}
{"idx":"671","func":"class Main {\n\n    public static void main(String[] args) {\n\n        String filename = \"src\/round1B\/input-B\";\n        \/\/String filename = \"src\/round1B\/B-small-practice\";\n        \/\/String filename = \"src\/round1B\/B-large-practice\";\n\n        FileInputStream file;\n        int T;\n\n        try {\n            file = new FileInputStream(filename+\".in\");\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(file));\n\n\n            T = Integer.parseInt(in.readLine());\n\n            BufferedWriter bw = new BufferedWriter(new FileWriter(filename+\".out\"));\n\n            for (int i=0; i<T; i++) {\n                int ind = i+1;\n                \/\/ parser\n                String data[] = in.readLine().split(\" \");\n                int K = Integer.parseInt(data[0]);\n                int L = Integer.parseInt(data[0]);\n                int S = Integer.parseInt(data[0]);\n                \n                char[] key = in.readLine().toCharArray();\n                char[] target = in.readLine().toCharArray();\n\n                int res = 0;\n                \/\/ calcul\n                \/\/ bananes maximales\n                int banana_max = 0;\n                \n                \n                double proba = 1;\n                for (int j=0; j<target.length; j++) {\n                    double cpt=0;\n                    for (int k=0; k<key.length; k++) {\n                        if (key[k]==target[j])\n                            cpt++;\n                    }\n                    proba *= cpt\/(double)K;\n                }\n                \n                System.out.println(\"Result \"+i+\": \"+res);\n                bw.write(\"Case #\"+ind+\": \"+res+\"\\n\");\n            }\n            bw.close();\n\n            in.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"672","func":"class A {\n    public static void main(String[] args) throws IOException {\n    String        pb        = \"A\";\n    Scanner       sc        = new Scanner(new FileReader(new File(pb+\".in\")));\n    PrintWriter   out       = new PrintWriter(new File(pb+\".out\"));\n        StringBuilder resultat  = new StringBuilder(\"\");\n        long time = System.currentTimeMillis();\n        \n        \/\/TEST CASES----------------------------------------------------\n        int TC = sc.nextInt();\n    for (int tc = 1; tc <= TC; tc++) {\n      if(tc!=1) resultat.append(\"\\n\");\n      resultat.append(\"Case #\"+tc+\": \");\n    \n      \/\/READ----------------------------------------------------\n      int R = sc.nextInt();\n      int C = sc.nextInt();\n      int W = sc.nextInt();\n      \n      \n            \/\/SOLVE----------------------------------------------------\n            long res = 0;\n            \n            res += (C\/W)*(R-1);\n            res += C\/W-1;\n            \n            long d = W+C%W;\n            if(d==W)\n              res+=W;\n            else\n              res+=W+1;\n            \n      \/\/PRINT--------------------------------------------------\n            System.out.println(res);\n            resultat.append(res);\n            System.out.println(\"Finished testcase \" + tc + \", time = \" + (System.currentTimeMillis() - time));\n        }\n        \n    \/\/CLOSE----------------------------------------------------\n        out.print(resultat);\n        out.close(); sc.close();\n    }\n\n}"}
{"idx":"673","func":"class A {\n\n    public static void main(String[] args) {\n\n        A algorithm = new A();\n\n        Scanner scanner = new Scanner(System.in);\n\n        String testCaseNumber = scanner.nextLine();\n\n        int TEST_CASE_NUMBER = Integer.parseInt(testCaseNumber);\n\n        for (int testNumber = 1; testNumber <= TEST_CASE_NUMBER; testNumber++) {\n\n            String RCW = scanner.nextLine();\n            \n            int R = Integer.parseInt(RCW.split(\" \")[0]);\n            int C = Integer.parseInt(RCW.split(\" \")[1]);\n            int W = Integer.parseInt(RCW.split(\" \")[2]);\n            \n            int counter = 0;\n            for(int r = 0; r<R;r++) {\n                for (int c = 0; c < C; c++) {\n                    if (c % W == 0) {\n                        counter++;\n                    }\n                }\n            }\n            counter = counter + W - 1;\n            String answer = String.valueOf(counter);\n\n            System.out.println(\"Case #\" + testNumber + \": \" + answer);\n        }\n\n        scanner.close();\n    }\n\n}"}
{"idx":"674","func":"class A {\n\n\/\/    public final static String INPUT_FILE_NAME = \"test.in\";\n\/\/    public final static String INPUT_FILE_NAME = \"A-small-attempt0.in\";\n    public final static String INPUT_FILE_NAME = \"A-large.in\";\n    \n    public FileWriter outputWriter;\n    public Scanner scanner;\n    public StringBuilder output = new StringBuilder();\n    \n    \n    \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n    public static void main(String[] args) throws Exception {\n        A instance = new A();\n        long start = System.currentTimeMillis();\n        \n        File temp = new File(\"output\/\");\n        if (!temp.exists()) {\n            temp.mkdir();\n        }\n        \/\/ Output file\n        instance.outputWriter = new FileWriter(\"output\/output.txt\", false);\n        \/\/ Input file\n        instance.scanner = new Scanner(new File(\"resources\/\" + A.INPUT_FILE_NAME));\n        \/\/ Commons variables\n        int testCaseNumber = 0;\n        \/\/ Test start\n        {\n            int nbTests = Integer.parseInt(instance.scanner.nextLine());\n            \n            for (testCaseNumber = 0; testCaseNumber < nbTests; testCaseNumber++) {\n                int testCaseResult = 0;\n                String[] line = instance.scanner.nextLine().split(\" \");\n                int r = Integer.parseInt(line[0]);\n                int c = Integer.parseInt(line[1]);\n                int w = Integer.parseInt(line[2]);\n                testCaseResult = (c \/ w) * r + (w - 1) + (c % w == 0 ? 0 : 1);\n                instance.output.append(\"Case #\" + (testCaseNumber+1) + \": \" + testCaseResult + \"\\n\");\n            }\n        }\n        \/\/ Closing files\n        instance.outputWriter.write(instance.output.toString(), 0, instance.output.length());\n        instance.scanner.close();\n        instance.outputWriter.close();\n        \n        System.out.println(\"Finished in \" + (System.currentTimeMillis() - start) + \" ms\");\n    }\n    \n}"}
{"idx":"675","func":"final class Brattleship {\n\n    public static void main(final String[] args) {\n        try (Scanner sc = new Scanner(System.in)) {\n            final int t = sc.nextInt();\n            int r;\n            int c;\n            int w;\n            int n;\n            for (int i = 0; i < t; i++) {\n                r = sc.nextInt();\n                c = sc.nextInt();\n                w = sc.nextInt();\n                n = 0;\n                if (w == 1) {\n                    System.out.println(\"Case #\" + (i + 1) + \": \" + r * c);\n                    continue;\n                }\n\n                n = c \/ w + w;\n                if (c % w == 0) {\n                    n--;\n                }\n\n                n += (r - 1) * (c \/ w);\n\n                \/*if ((w & 1) != 0) {\n                    if (c % w > (w >> 1) + 1) {\n                        n++;\n                    }\n                } else {\n                    if (c % w > w >> 1) {\n                        n++;\n                    }\n                }*\/\n\n                \/\/ n = c \/ w + w + c % w;\n                \/*if ((c & 1) != 0) {\n                    if ((w & 1) != 0) {\n                        n--;\n                    } else {\n                        n--;\n                    }\n                } else {\n                    if ((w & 1) != 0) {\n                        \/\/\n                    } else {\n                        \/\/\n                    }\n                }*\/\n\n                System.out.println(\"Case #\" + (i + 1) + \": \" + n);\n            }\n        }\n    }\n}"}
{"idx":"676","func":"class Solution {\n  BufferedReader reader;\n\n  StreamTokenizer tokenizer;\n  Scanner in;\n\n  public static void main(String[] args) throws Exception {\n    Solution r = new Solution();\n    \/\/    in = new Scanner(System.in);\n    \/\/    PrintWriter out = new PrintWriter(System.out);\n        r.in = new Scanner(new File(\"input.txt\"));\n        PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n        r.reader = new BufferedReader(new InputStreamReader(System.in));\n        r.tokenizer = new StreamTokenizer(r.reader);\n        int tcs = r.in.nextInt();\n        for (int tc = 1; tc <= tcs; tc++) {\n          int n = r.in.nextInt();\n            int m = r.in.nextInt();\n            int len = r.in.nextInt();\n        int x = m \/ len * n + len - 1 + ((m%len!=0)?1:0);\n          System.out.println(\"Case #\" + tc + \": \" + x);\n        }\n    \n    \n        r.in.close();\n        r.reader.close();\n        out.close();\n  }\n}"}
{"idx":"677","func":"class P1 {\n\n    public static void main(String[] args) throws Exception {\n        Scanner scan = new Scanner(new File(\"in.txt\"));\n        PrintWriter writer = new PrintWriter(\"out.txt\");\n\n        int cases = scan.nextInt();\n\n        for (int i = 0; i < cases; i++) {\n            int ans = 0;\n\n            int r = scan.nextInt();\n            int c = scan.nextInt();\n            int w = scan.nextInt();\n\n            ans = (r - 1) * (c \/ w) + (c - 1) \/ w + w;\n\n            writer.print(\"Case #\");\n            writer.print(i+1);\n            writer.print(\": \");\n            writer.print(ans);\n            writer.println();\n        }\n\n        scan.close();\n        writer.close();\n    }\n\n}"}
{"idx":"678","func":"class Q1 {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(new File(args[0])));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(args[1]))));\n        int iterationsNum = Integer.parseInt(br.readLine());\n\n\n        for (int i = 0; i < iterationsNum; ++i) {\n            String[] parameters = br.readLine().split(\"\\\\s+\");\n            long Rows = Long.parseLong(parameters[0]);\n            long Columns = Long.parseLong(parameters[1]);\n            long Width = Long.parseLong(parameters[2]);\n\n            long res = Rows * new Double(Math.floor(Columns \/ Width * 1.0)).intValue() + Width - 1;\n\n            if (Columns % Width > 0) {\n                res += 1;\n            }\n\n            \/\/ if (Width == Columns || Columns == 1)\n            \/\/ res -= 1;\n            \/\/ int time = new Double(Math.ceil(Math.log(max) \/ Math.log(2)) + 1).intValue();\n            bw.write(\"Case #\" + (i + 1) + \": \" + res + \"\\n\");\n        }\n\n        br.close();\n        bw.close();\n    }\n\n}"}
{"idx":"679","func":"class CodeJamBrattleship{\n    public static void main(String[] args) throws Exception{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder out = new StringBuilder();\n        int t = Integer.parseInt(br.readLine());\n        for(int k = 1; k <= t; k++){\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int r = Integer.parseInt(st.nextToken());\n            int c = Integer.parseInt(st.nextToken());\n            int w = Integer.parseInt(st.nextToken());\n            int n = r*c\/w;\n            n += w;\n            if(c % w == 0) n--;\n            out.append(\"Case #\" + k + \": \" + n + \"\\n\");\n        }\n        System.out.print(out);\n    }\n}"}
{"idx":"680","func":"class ProblemA {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n\n\/\/        String filenameInput = \"A-sample.in\";\n\/\/        String filenameOutput = \"A-sample.out\";\n        \n\/\/        String filenameInput = \"A-sample-b.in\";\n\/\/        String filenameOutput = \"A-sample-b.out\";\n\n\/\/         String filenameInput = \"A-small-attempt0.in\";\n\/\/         String filenameOutput = \"A-small-attempt0.out\";\n         \n\/\/         String filenameInput = \"A-large-practice.in\";\n\/\/         String filenameOutput = \"A-large-practice.out\";\n         \n        \/\/\n         String filenameInput = \"A-large.in\";\n         String filenameOutput = \"A-large.out\";\n\n        Class currentClass = ProblemA.class;\n        try {\n\n            String path = \"src\/\"\n                    + currentClass.getPackage().getName().replace(\".\", \"\/\");\n            BufferedReader input = new BufferedReader(new FileReader(new File(\n                    path + \"\/\" + filenameInput)));\n            BufferedWriter output = new BufferedWriter(new FileWriter(new File(\n                    path + \"\/\" + filenameOutput)));\n            int numOfTestcases = Integer.parseInt(input.readLine());\n            \/\/ System.out.println(\"Number of Testcases: \" + numOfTestcases);\n            for (int i = 0; i < numOfTestcases; i++) {\n                System.out.println(\"Testnumber : \" + i);\n\n                \n                String[] inputStringArray = input.readLine().split(\" \");\n                int R = Integer.parseInt(inputStringArray[0]);\n                int C = Integer.parseInt(inputStringArray[1]);\n                int W = Integer.parseInt(inputStringArray[2]);\n                \n                int cOverW = C\/W;\n                int maxNumber = cOverW * (R-1);\n                maxNumber += (cOverW-1);\n                maxNumber += W;\n                if(C%W!=0){\n                    maxNumber++;\n                }\n                \n\n\n                String outputString = \"Case #\" + (i + 1) + \": \" + maxNumber;\n                System.out.println(outputString);\n\n                if (i + 1 != numOfTestcases) {\n                    outputString += \"\\n\";\n                }\n                output.write(outputString);\n\n            }\n\n            output.flush();\n            output.close();\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n\n}"}
{"idx":"681","func":"class B {\n    \n    \n    public static void main(String args[]) throws FileNotFoundException, UnsupportedEncodingException{\n        B main = new B();\n        Scanner scan = new Scanner(new File(\"A-large.in\"));\n        \/\/Scanner scan = new Scanner(System.in);\n        int T = Integer.parseInt(scan.nextLine()); \n        PrintWriter writer = new PrintWriter(\"Alarge.out\", \"UTF-8\");\n        for(int cas=1; cas<=T; cas++){            \n            String[] s = scan.nextLine().split(\" \");\n            int R = Integer.parseInt(s[0]);\n            int C = Integer.parseInt(s[1]);\n            int W = Integer.parseInt(s[2]);\n            \n            int nBlanks = C\/W-1;\n            int over = C%W;\n            \n            int nPerRow = 0;\n            if(over==0){\n                nPerRow = nBlanks + W;\n            }else{\n                nPerRow = nBlanks + W + 1;\n            }        \n            \n            int answer = (C\/W)*(R-1) + nPerRow;\n            writer.println(\"Case #\"+cas+\": \"+answer);\n            System.out.println(\"Case #\"+cas+\": \"+answer);\n                \n        }        \n        writer.close();\n    }\n    \n    \n}"}
{"idx":"682","func":"class Q1 {\n    public static void main(String[] args) {\n        try {\n            Scanner sc = new Scanner(new FileInputStream(new File(\"A-large.in\")));\n            BufferedWriter bos = new BufferedWriter(new FileWriter(new File(\"A-large.out\")));\n            int cNum = Integer.parseInt(sc.nextLine());\n            for (int i = 0; i < cNum; i++) {\n                String[] nums = sc.nextLine().split(\" \");\n                int R = Integer.parseInt(nums[0]);\n                int C = Integer.parseInt(nums[1]);\n                int W = Integer.parseInt(nums[2]);\n                int optimal =  (C\/W) * R +W -1; \n                optimal += C%W == 0 ? 0 : 1;\n                bos.write(String.format(\"Case #%d: %d\\n\", i + 1, optimal));\n                bos.flush();\n            }\n            sc.close();\n            bos.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"683","func":"class ProblemA {    \n\n    private static BufferedWriter writer;\n    private static Scanner scanner;\n    \n\nprivate static long r, c, w, score;\n\n    public static void main(String[] args) throws IOException {\n        Path input = Paths.get(\"input.in\");\n        Path output = Paths.get(\"output.txt\");\n        scanner = new Scanner(input);\n        writer = Files.newBufferedWriter(output);\n        int testCases = scanner.nextInt();\n        for (int i = 0; i < testCases; i++) {\n            r = scanner.nextLong();\n            c = scanner.nextLong();\n            w = scanner.nextLong();\n            long shipsPerRow = c\/w;\n            long minScore = 0;\n            for(long i1 = 0; i1 < r - 1; i1++) {\n                minScore += shipsPerRow;\n            }\n            long uncovered = c;\n            while (uncovered > w) {\n                uncovered -= w;\n                minScore++;\n            }\n            if (uncovered == w) {\n                minScore += w;\n            } else {\n                minScore++;\n                minScore += (w-1);            \n            }\n            score = minScore;\n            String out = String.format(\"Case #%d: %d\", i + 1, score);\n            System.err.println(out);\n            writer.write(out);\n            writer.newLine();\n        }\n        writer.close();\n\n    }\n\n}"}
{"idx":"684","func":"class ASmall {\n    \n    \n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(new File(\"A-large.in\"));\n        PrintWriter out = new PrintWriter(new File(\"outputALarge.txt\"));\n        int t = in.nextInt();\n        for (int testn = 1; testn <= t; testn++) {\n            int R = in.nextInt();\n            int C = in.nextInt();\n            int W = in.nextInt();\n            int ans = (R - 1) * (C \/ W);\n            if (C % W == 0) ans += (C \/ W) + W - 1; else ans += (C \/ W) + W;\n            out.println(\"Case #\" + testn + \": \" + ans);\n        }\n        in.close();\n        out.close();\n    }\n    \n    \n}"}
{"idx":"685","func":"class a {\n  public static void main(String[] args)  throws FileNotFoundException {\n\n    Scanner sc;\n    try {\n      sc = new Scanner(new FileReader(\"\/Users\/patcharin\/project\/google\/src\/test.txt\"));\n    } catch (FileNotFoundException e) {\n      return;\n    }\n    int n = sc.nextInt();\n    String tmp = sc.nextLine();\n    String res = \"\";\n    for (int i=1; i<=n; i++) {\n      int row = sc.nextInt();\n      int col = sc.nextInt();\n      int w = sc.nextInt();\n      int min = 0;\n\n      for (int j=0; j<row; j++) {\n        for (int k=0; k<col; k+=w) {\n           min++;\n        }\n      }\n\n      if (i != 1) res += \"\\n\";\n      res += \"Case #\" + i + \": \" + (min+w-1);\n    }\n    System.out.println(res);\n  }\n}"}
{"idx":"686","func":"class R1C_A {\n\n    static BufferedReader br;\n    static PrintWriter pr;\n    static StringTokenizer st;\n\n    public static void main (String[] args) throws IOException {\n        \/\/br = new BufferedReader(new InputStreamReader(System.in));\n        \/\/pr = new PrintWriter(new OutputStreamWriter(System.out));\n        br = new BufferedReader(new FileReader(\"in.txt\"));\n        pr = new PrintWriter(new FileWriter(\"out.txt\"));\n\n        int tt = Integer.parseInt(next());\n        for (int qq = 1; qq <= tt; qq++) {\n            int ans = 0;\n            int r = Integer.parseInt(next());\n            int c = Integer.parseInt(next());\n            int w = Integer.parseInt(next());\n            ans = c\/w + w-1 + (c % w > 0 ? 1 : 0);\n            pr.printf(\"Case #%d: %d\\n\", qq, ans);\n        }\n        \n        pr.close();\n    }\n\n    static String next () throws IOException {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine().trim());\n        return st.nextToken();\n    }\n}"}
{"idx":"687","func":"class A {\n\n    final boolean DEBUG = false;\n    final boolean isSmall = false;\n    final String PACKAGE = \"gcj2015\/r1c\";\n    final String PROBLEM = \"A\";\n    \n    public static void main(String[] args) {\n        A r = new A();\n        if(!r.DEBUG){\n            try {\n                if(r.isSmall)System.setIn(new FileInputStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-small-attempt0.in\")));\n                else System.setIn(new FileInputStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-large.in\")));\n                if(r.isSmall)System.setOut(new PrintStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-small_out-deg.txt\")));\n                else System.setOut(new PrintStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-large_out.txt\")));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int CASE=1;CASE<=T;CASE++){\n            int R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();\n            int w = 0, res = 0;\n            res += R*(C\/W);\n            if (C%W==0)res+=W-1;\n            else res+=W;\n            System.out.println(\"Case #\"+CASE+\": \"+res);\n        }\n    }\n}"}
{"idx":"688","func":"class main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader read=new BufferedReader(new FileReader(\"A-large.in\"));\n            BufferedWriter write=new BufferedWriter(new FileWriter(\"out.in\"));\n            int N=Integer.valueOf(read.readLine());\n            \n            for(int i=0;i<N;i++){\n                String list[]=read.readLine().split(\" \");\n                int R=Integer.parseInt(list[0]);\n                int C=Integer.parseInt(list[1]);\n                int W=Integer.parseInt(list[2]);\n                int b=0;\n                float c=Float.parseFloat(list[1]);\n                float w=Float.parseFloat(list[2]);\n                if(C==W){\n                    b=C+(R-1);\n                }else if(W==1){\n                    b=C*R;\n                }\n                else if(C%2==0){\n                    if(C\/2<W){\n                        b=(C\/W)+W+((C\/W)*(R-1));\n                    }else{\n                        if(C%W==0){\n                            b=(C\/W)+(W-1)+((C\/W)*(R-1));\n                        }else{\n                            b=(C\/W)+W+((C\/W)*(R-1));\n                        }\n                        \n                    }\n                    \n                }else if(C%2!=0){\n                    if(C%W==0){\n                        b=(C\/W)+(W-1)+((C\/W)*(R-1));\n                    }else{\n                        b=(C\/W)+W+((C\/W)*(R-1));\n                    }\n                }\n                    \n                \n                \n                write.write(\"Case #\" + (i+1) + \": \"+ b+\"\\n\");\n                write.flush();\n            }\n        } catch(IOException ex) {\n            ex.printStackTrace();\n    }\n    }\n}"}
{"idx":"689","func":"class Brattleship{\n    static String filename = \"A-large\";    \/\/ io filnename here\n    static String inname = filename + \".in\";    \n    static String outname = filename + \".out\";  \n    static int n;\n    public static void main(String[] args){\n        try{\n            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));\n            \/\/Scanner in = new Scanner(System.in);\n            BufferedWriter out = new BufferedWriter(new FileWriter(outname));\n            int t = in.nextInt();\n            in.nextLine();\n            for (int cas = 1; cas <= t; cas++){\n                \n                int r = in.nextInt();\n                int c = in.nextInt();\n                int w = in.nextInt();\n                int ans1 = 0;\n                ans1 +=  Math.min(c%w, 1)+w + c\/w-1;\n                if (r > 1) ans1 += (r-1)*(c\/w);\n                int ans = ans1;\n                System.out.print(\"Case #\" + cas + \": \" + ans + \"\\n\");\n                out.write(\"Case #\" + cas + \": \" + ans + \"\\n\");\n            }\n            in.close();\n            out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"690","func":"class A {\n    public static void main(String[] args) {\n        File fin = new File(\"src\/Round1C\/A-large.in\");\n        Scanner scan;\n        try {\n            scan = new Scanner(fin);\n        \n            PrintWriter output = new PrintWriter(\"src\/Round1C\/A_test.out2.txt\");\n            int T = scan.nextInt();\n            for(int i = 0; i < T; i++)\n            {\n                int R = scan.nextInt();\n                int CC = scan.nextInt();\n                int W = scan.nextInt();\n                int C = CC;\n                System.out.println(R + \" \" + C + \" \" + W);\n                int result = 0;\n                result += C \/ W * (R - 1);\n                System.out.println(C + \" > \" + (2 * W + 1));\n                while (C > 2 * W) {\n                    C -= W;\n                    result++;\n                }\n                System.out.println((W+1) + \" \" + result);\n\n                if (C == W)\n                    result += W;\n                else\n                    result += W + 1;\n                System.out.println((W+1) + \" \" + result);\n\n                output.println(\"Case #\" + (i + 1) + \": \" + result);\n                System.out.println(\"Case #\" + (i + 1) + \": \" + R + \" \" + CC + \" \" + W + \"\\t result :\" + result);\n            }\n            scan.close();\n            output.close();\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"691","func":"class A {\n\n\/\/    private static final String FNAME = \"test\";\n    private static final String FNAME = \"small-0\";\n\/\/    private static final String FNAME = \"large-0\";\n\n    public static void main(String[] args) throws IOException {\n        String fname = \"data\/\" + A.class.getSimpleName() + \"-\" + FNAME + \".\";\n        Scanner sc = new Scanner(Paths.get(fname + \"in\"));\n        PrintWriter w = new PrintWriter(fname + \"out\");\n\n        int T = sc.nextInt();\n        for (int tc = 0; tc < T; tc++) {\n\n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            int W = sc.nextInt();\n\n            int res = R * C \/ W + W - (C % W == 0 ? 1 : 0);\n\n            w.printf(\"Case #%d: %d\\n\", tc + 1, res);\n        }\n\n        w.close();\n    }\n}"}
{"idx":"692","func":"class Brattleship {\n    \n    public static void main(String[] args) {  \n        Scanner s = new Scanner(System.in);\n        int t = s.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int r = s.nextInt();\n            int c = s.nextInt();\n            int w = s.nextInt();\n            int result = 0;\n            if (r > 1) {\n                result = (r - 1) * (c \/ w);\n            }\n            result += (c - w) \/ w;\n            if ((c - w) % w != 0) {\n                result++;                \n            }\n            result += w;\n            System.out.println(\"Case #\" + i + \": \" + result);\n        }\n    }\n    \n}"}
{"idx":"693","func":"class Main {\n\n    static Scanner stdin = new Scanner(System.in);    \n    \n    public static void main(String[] args) {\n        int cases = stdin.nextInt();\n        for (int i = 0; i < cases; i++) {\n            Main mt = new Main();\n            mt.r = Main.stdin.nextInt();\n            mt.c = Main.stdin.nextInt();\n            mt.w = Main.stdin.nextInt();\n            int full = mt.c\/mt.w;\n            int first = full*mt.r;\n            mt.result = first + mt.w - 1 + (mt.c%mt.w==0?0:1);\n            System.out.println(\"Case #\"+(1+i)+\": \"+\"\"+mt.result);\n        }\n    }    \n\n    int r,c,w,result;\n    \n}"}
{"idx":"694","func":"class Battleship\n{\n    public static void main(String[] args) throws NumberFormatException, IOException\n    {\n        BufferedReader input = new BufferedReader(new FileReader(args[0]));\n        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(args[0].contains(\"in\") ?\n                args[0].replace(\"in\", \"out\") : args[0] + \".out\"));\n        int testCases = Integer.parseInt(input.readLine());\n        for (int i = 0; i < testCases; i++)\n        {\n            String[] tokens = input.readLine().split(\" \");\n            int r = Integer.parseInt(tokens[0]), c = Integer.parseInt(tokens[1]), w = Integer.parseInt(tokens[2]);\n            int rc = c \/ w +  w - 1;\n            if( c % w != 0) \n                rc++;\n            String solution = (rc * r) + \"\";\n            out.write(\"Case #\" + (i + 1) + \": \" + solution + \"\\n\");\n        }\n        input.close();\n        out.close();\n    } \n}"}
{"idx":"695","func":"class Brattleship {\n    \n    public static void main(String[] args) throws NumberFormatException, IOException {\n        \n        \/\/System.setIn(new FileInputStream(\"a.in\"));\n        \/\/System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(\"a_s.out\")), true));\n                \n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        int totalCaseNumber = Integer.parseInt( reader.readLine() );\n        for(int caseNo=1 ; caseNo<=totalCaseNumber ; caseNo++ ) {\n            String line = reader.readLine();\n            String[] parts = line.split(\" \"); \n            int R = Integer.parseInt(parts[0]);\n            int C = Integer.parseInt(parts[1]);\n            int W = Integer.parseInt(parts[2]);\n            \n            int res = (C \/ W)*R + (C%W == 0 ? W-1 : W);\n            \n            System.out.println(\"Case #\" + caseNo + \": \" + res );\n        }\n        reader.close();\n    }\n}"}
{"idx":"696","func":"class A\n{  \n    public static void main(String[] args) throws Exception\n    {\n    int T;    \n        RandomAccessFile in = new RandomAccessFile(args[0],\"r\");\n        T=Integer.parseInt(in.readLine());\n        \n\n        for (int i=1; i<=T; i++)\n        {\n          String[] temp=in.readLine().split(\"[ ]+\");          \n          int R=Integer.parseInt(temp[0]);\n          int C=Integer.parseInt(temp[1]);\n          int W=Integer.parseInt(temp[2]);\n        int ans1=(R-1)*(C\/W)+(C\/W)+(W-1);\n        if (C%W>=1) ans1++;                    \n\n      String ans=\"\"+ans1;\n      System.out.println(\"Case #\"+i+\": \"+ans);\n    }\n\n        in.close();\n    }\n}"}
{"idx":"697","func":"class ProblemA {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"\/Users\/bfa\/Documents\/workspace\/cf300\/src\/A-large.in\"));\n        Formatter format = new Formatter(new File(\"\/Users\/bfa\/Documents\/workspace\/cf300\/src\/large.out\"));\n        int t = in.nextInt();\n        for (int i = 1; i <= t; ++i) {\n            int r = in.nextInt();\n            int c = in.nextInt();\n            int w = in.nextInt();\n\n            int k = c \/ w;\n\n            int result = r * k;\n            result+=(w-1);\n\n            if (c % w != 0) {\n                result++;\n            }\n\n            \n            format.format(\"Case #%d: %d%n\", i, result);\n        }\n        format.flush();\n        format.close();\n        in.close();\n    }\n\n}"}
{"idx":"698","func":"class ProblemA {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(\"A-large (2).in\"));\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"a.out\"));\n        int tests = Integer.parseInt(reader.readLine());\n        int currTest = 1;\n        while (currTest <= tests) {\n            String[] line = reader.readLine().split(\" \");\n            int R = Integer.parseInt(line[0]);\n            int C = Integer.parseInt(line[1]);\n            int W = Integer.parseInt(line[2]);\n            long count = 0;\n            count += C \/ W;\n            count *= R;\n            if (W > 1) {\n                if ((C % W) !=0) {\n                    count += W;\n                }\n                else count += W - 1;\n            }\n            System.out.println(\"Case #\"+currTest+\": \"+count);\n            currTest++;\n        }\n        reader.close();\n        writer.flush();\n        writer.close();\n    }\n\n}"}
{"idx":"699","func":"class Brattleship{\n\n    public static void main(String[] args) {\n        Scanner scanner = null;\n        try {\n            scanner = new Scanner(new File(\"input.txt\"));\n        } catch (FileNotFoundException e) {\n            System.out.println(\"Couldn't open input file.\\n\" + e.getMessage());\n            e.printStackTrace();\n        }\n        FileWriter writer = null;\n        try {\n            writer = new FileWriter(new File(\"output.txt\"));\n        } catch (IOException e) {\n            System.out.println(\"Couldn't open\/make output file.\" + e.getMessage());\n            e.printStackTrace();\n        }\n        \n        int numTrials = scanner.nextInt();\n        for (int trial = 1; trial <= numTrials; trial++) {\n            try {\n                writer.write(\"Case #\" + trial + \": \");\n                int R = scanner.nextInt();\n                int C = scanner.nextInt();\n                int W = scanner.nextInt();\n                int steps = R*(C\/W) + W - 1; \/\/ R*(C\/W) + (W-1)\n                if (C % W != 0)\n                    steps++;\n                writer.write(steps + \"\");\n                writer.write(\"\\n\");\n            }catch (IOException e) {\n                System.out.println(\"Error on trial #\" + trial + \"\\n\" + e.getMessage());\n                e.printStackTrace();\n            }\n        }\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        scanner.close();\n        System.out.println(\"Completed Trials!\");\n    }\n}"}
{"idx":"700","func":"class A {\n    public static void main(String... args) throws Exception{\n        \/\/Scanner input = new Scanner(new File(\"in.txt\"));\n        Scanner input = new Scanner(new File(\"A-small-attempt2.in\"));\n        int numCases = input.nextInt();\n        \/\/Scanner sinput = new Scanner(System.in);\n        System.setOut(new PrintStream(\"a2.out\"));\/\/System.out.print\u306e\u51fa\u529b\u5148\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u3048\u308b\n        for (int n = 0; n < numCases; n++) {\n                int r = input.nextInt();\n                int c = input.nextInt();\n                int w = input.nextInt();\n                \/\/System.out.println(\"r=\"+r+\" c=\"+c+\" w=\"+w);\n                \n                int num=0;\n                \n                if(r*c\/w!=1){\n                    num = (r*c)\/w+w-1;\n                    if((r*c)%w!=0) num++;\n                }\n                else{\n                    num = w+1;\n                }\n                if(num>r*c) num=r*c;\n            System.out.printf(\"Case #%d: %d\\n\", n + 1, num);\n        }\n    }\n}"}
{"idx":"701","func":"class codejam2015_1C_A {\n    static PrintWriter out = null;\n    static FileInputStream in = null;\n    Scanner sc;\n\n    int N;\n    Integer R, C, W;\n\n    public static void main(String[] args) {\n        try {\n            System.setIn(new BufferedInputStream(new FileInputStream(args.length > 0 ? args[0] : (codejam2015_1C_A.class.getName() + \".in\"))));\n        } catch (Exception e) {\n        }\n        codejam2015_1C_A r = new codejam2015_1C_A();\n        try {\n            codejam2015_1C_A.in = new FileInputStream(\"src\/com\/resources\/smallInput.txt\");\n            codejam2015_1C_A.out = new PrintWriter(\"src\/com\/resources\/output.txt\");\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();  \/\/To change body of catch statement use File | Settings | File Templates.\n        }\n        r.sc = new Scanner(codejam2015_1C_A.in);\n        int caseN = r.sc.nextInt();\n        for (int caseID = 1; caseID <= caseN; caseID++) {\n            r.R = r.sc.nextInt();\n            r.C = r.sc.nextInt();\n            r.W = r.sc.nextInt();\n            codejam2015_1C_A.out.printf(\"Case #%d: \", caseID);\n            System.out.printf(\"Case #%d: \", caseID);\n            long solution=0;\n            solution += (r.R-1)*(r.C\/r.W);\n            \n            solution += (r.C-1)\/r.W;\n            solution += r.W;\n            \n            codejam2015_1C_A.out.println(solution);\n            System.out.println(solution);\n            System.out.flush();\n        }\n        codejam2015_1C_A.out.close();\n    }\n}"}
{"idx":"702","func":"class Problem1A {\n    private static final boolean DEBUG = false;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Problem1A prog = new Problem1A();\n\n        Scanner in = new Scanner(new FileReader(args[0]));\n        final int cntCases = in.nextInt();\n\n        for (int caseNum = 1; caseNum <= cntCases && in.hasNextLine(); caseNum++) {\n            try {\n                in.nextLine(); \/\/discard!\n                final int ROWS = in.nextInt();\n                final int COLUMNS = in.nextInt();\n                final int WIDTH = in.nextInt();\n                int cnt = (COLUMNS\/WIDTH) * ROWS;\n                \n                int leftover = COLUMNS%WIDTH;\n                if (leftover != 0) {\n                    cnt++;\n                }\n                \n                cnt += (WIDTH-1);\n\n                int ans1 = cnt;\n                System.out.println(\"Case #\" + caseNum + \": \" + ans1);\n            }\n            catch (NoSuchElementException ex) {\n                if (DEBUG) System.out.println(\"err: \" + ex);\n            }\n        }\n    }\n\n}"}
{"idx":"703","func":"class Brattleship {\n    public static final String FILENAME = \"A-large\";\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(\"src\/\" + FILENAME\n                + \".in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"src\/\"\n                + FILENAME + \".out\"));\n        Scanner sc = new Scanner(in);\n        int t = sc.nextInt();\n        for (int tt = 1; tt <= t; tt++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            int w = sc.nextInt();\n            int ret = (r - 1) * (c \/ w);\n            if ((c \/ w) * w == c) {\n                ret += c \/ w - 1 + w;\n            } else {\n                ret += c \/ w + w;\n            }\n            out.write(\"Case #\" + tt + \": \" + ret + \"\\n\");\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"704","func":"class R1C_A {\n    int r, c, w;\n    int[][] map;\n    \/*\n    int[][] ans = new int[][]{\n                                     {1},\n                                  {2, 2},\n                               {3, 3, 3},\n                            {4, 4, 3, 4},\n                         {5, 5, 4, 4, 5},\n                      {6, 6, 5, 4, 4, 6},\n                   {7, 7, 6, 5, 5, 5, 7},\n                {8, 8, 7, 6, 5, 5, 5, 8},\n             {9, 9, 8, 7, 6, 5, 5, 6, 9},\n        {10, 10, 9, 8, 7, 6, 6, 5, 6, 10},\n    };\n    *\/\n    \n    public static void main(String[] args) {\n        R1C_A r = new R1C_A();\n        Scanner sc = new Scanner(System.in);\n        \n        r.map = new int[11][11];\n        for(int i=1;i<11;i++){ \/\/c \n            for(int j=1;j<=i;j++){ \/\/w\n                if(j==1 || j==i) r.map[i][j] = i;\n                else if(j>=i\/2+i%2) r.map[i][j] = j+1;\n                else r.map[i][j] = r.map[i-j][j] + 1;\n                \/\/System.out.print(map[i][j] + \" \");\n            }\n            \/\/System.out.println();\n        }\n        \n                \n        int t = sc.nextInt();\n        for(int test=1;test<=t;test++){\n            r.r = sc.nextInt();\n            r.c = sc.nextInt();\n            r.w = sc.nextInt();\n            \n            \n            System.out.println(\"case #\" + test + \": \" + r.map[r.c][r.w]);\n        }\n        sc.close();\n    }\n\n}"}
{"idx":"705","func":"class Solver {\n    static Scanner input;\n    static Writer  output;\n    public static void main(String args[]) {\n        if(args.length != 1){\n            System.out.println(\"Please specify the input file\");\n            return;\n        }\n\n        String filename = args[0];\n        File f = new File(filename);\n        BufferedReader br;\n\n        if (!f.exists()) {\n            System.out.println(\"Couldn't find file \"+filename);\n            return;\n        } else if (f.isDirectory()) {\n            System.out.println(filename+\" is a directory\");\n            return;\n        }\n\n        try {\n            br = new BufferedReader (new FileReader (f));\n            input = new Scanner(br);\n        } catch (IOException iox){\n            System.out.println(\"Problem reading \" + filename );\n        }\n\n        try {\n            output = new BufferedWriter(\n                        new OutputStreamWriter(\n                            new FileOutputStream(filename+\".out\"), \"utf-8\"));\n            int T = input.nextInt();\n            for(int caseNum=0; caseNum<T; caseNum++){\n                int R = input.nextInt();\n                int C = input.nextInt();\n                int W = input.nextInt();\n            \n                int clearCount = C\/W; \/\/will round down\n                int hasExtra = C%W;\n                int findCount = clearCount + (W-1) + ((hasExtra!=0)?1:0);\n                int result = clearCount*(R-1) + findCount;\n            \n                output.write(\"Case #\"+(caseNum+1)+\": \");\n                output.write(\"\"+result);\n                output.write(\"\\n\");\n            }\n        } catch (IOException ex) {\n            System.out.println(\"Couldn't open an output file\");\n            return;\n        }\n\n        try{\n            output.close();\n            input.close();\n        } catch (IOException ex) {\n        }\n    }\n}"}
{"idx":"706","func":"class Main\n{\n    public static void main(String args[]) throws Exception\n    {\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n        int cases = Integer.parseInt(br.readLine());\n        \n        for(int i = 0; i < cases; i++)\n        {\n            System.out.print(\"Case #\" + (i+1) + \": \");\n            \n            StringTokenizer st = new StringTokenizer(br.readLine());\n            \n            int r = Integer.parseInt(st.nextToken());\n            int t = Integer.parseInt(st.nextToken());\n            int w = Integer.parseInt(st.nextToken());\n            \n            \/\/System.out.println( \"\" + r + \" \" + t + \" \" + w );\n            int answer = -1;\n            \n            int movesForFirstHit = 0;\n            int hitPosition = w;\n            for(int i1 = w; i1 <= t; i1 += w )\n            {\n                movesForFirstHit++;\n                hitPosition = i1;\n            }\n            \n            \n            int movesToEliminateRows = movesForFirstHit * (r-1);\n            \n            \n            \n            if(hitPosition == t)\n            {\n                \/\/System.out.println(\"LAST\");\n                answer = movesForFirstHit + movesToEliminateRows + (w-1);\n            }\n            else\n            {\n                answer = movesForFirstHit + movesToEliminateRows + w;\n            }\n            \n            \/\/System.out.println(hitPosition);\n            \/\/System.out.println(movesForFirstHit);\n            System.out.println(\"\" + answer);\n        }\n    }\n}"}
{"idx":"707","func":"class A {\n    public static void main(String[] args) throws FileNotFoundException {\n        File file = new File(\"A-large.in\");\n        Scanner stdin = new Scanner(file);\n        \/\/Scanner stdin = new Scanner(System.in);\n        int numCases = stdin.nextInt();\n        for(int i = 1; i<=numCases; i++){\n        \n        }\n    }\n}"}
{"idx":"708","func":"class A {\n\n\n    private static final String WORK_DIR = \"C:\\\\users\\\\eamudha\\\\codejam\\\\2015\\\\1C\\\\\";\n\n    public static void main(String[] args) throws Exception {\n        A a = new A();\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-small.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"A-small.out\"));\n        int caseCnt = sc.nextInt();\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\n            System.out.println(\"Processing test case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            int w = sc.nextInt();\n            if (w == 1) {\n                pw.println(c);\n            } else if (w == c) {\n                pw.println(w);\n            } else {\n                pw.println(((c-1)\/w) + w);\n            }\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"709","func":"class Main {\n\n    public static Scanner input = new Scanner(System.in);\n    public static void main(String[] args) {\n\n        int numInputs = input.nextInt();\n        for(int i = 0; i<numInputs;i++){\n            int R = input.nextInt();\n            int C = input.nextInt();\n            int W = input.nextInt();\n            int result;\n            if((W<=C\/2&&C%W==0)||W==C) {\n                result = C \/ W * R + W - 1;\n            }else {\n                result = C\/W*R+W;\n            }\n            int r = result;\n            System.out.println(\"Case #\"+(i+1)+\": \"+r);\n        }\n    }\n}"}
{"idx":"710","func":"class a {\n    public static void main(String[] args) {\n\n\n        File fileout=new File(\"C:\/Users\/Nikhil Gupta\/Desktop\/A-ans.out\");\n        File file=null;\n        PrintWriter writer=null;\n        Scanner in=null;\n        int r,c,w;\n        try{\n         file = new File(\"C:\/Users\/Nikhil Gupta\/Desktop\/A-small.in\");\n         in = new Scanner(file);\n         writer = new PrintWriter(fileout, \"UTF-8\");\n        }\n        catch(Exception e){}\n        int T=in.nextInt();\n        for(int j=1;j<=T;j++)\n            {r=in.nextInt();\n            c=in.nextInt();\n            w=in.nextInt();\n            if(r==1)\n            {if(c%w==0)\n                writer.println(\"Case #\"+j+\": \"+((c\/w)+(w-1)));\n             else\n            writer.println(\"Case #\"+j+\": \"+((c\/w)+w));\n                }\n                else\n                {\n                    if(c%w==0)\n                        writer.println(\"Case #\"+j+\": \"+((c\/w)+(w-1)+((c\/w)*(r-1))));\n                     else\n                    writer.println(\"Case #\"+j+\": \"+((c\/w)+w+((c\/w)*(r-1))));\n                }\n            }\n        writer.close();\n    }\n}"}
{"idx":"711","func":"static void main(String args[]) {\n        Scanner in = null;\n        try {\n            in = new Scanner(new FileInputStream(\"input.txt\"));\n            System.setOut(new PrintStream(new File(\"output.txt\")));\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        int T = in.nextInt();\n        for (int t = 1; t <= T; t++) {\n            int r = in.nextInt();\n            int c = in.nextInt();\n            int w = in.nextInt();\n            int ans = r * c;\n            if ( w > 1) {\n                ans = r * ((c - 1) \/ w) + w;\n                if (c % w == 0) {\n                    ans += r - 1;\n                }\n            }\n            \n            System.out.println(\"Case #\" + t + \": \" + ans);\n        }\n    }\n \n}"}
{"idx":"712","func":"class BS3 {\n   public static void main(String[] args) {\n      Scanner scan = new Scanner(System.in);\n      int numCases = scan.nextInt();\n      \n      for(int caseNum = 1; caseNum <= numCases; caseNum++) {\n         int numRows = scan.nextInt();\n         int numCols = scan.nextInt();\n         int shipWidth = scan.nextInt();\n         \n         System.out.print(\"Case #\" + caseNum + \": \");\n         \n         int findInRowMin = numCols\/shipWidth;\n         int finishShip = shipWidth - (numCols % shipWidth == 0 ? 1 : 0);\n         System.out.println(numRows * findInRowMin + finishShip);\n         \n      }\n      \n   }\n}"}
{"idx":"713","func":"class Battelship {\n\n    public static void main(String[] args) throws Exception {\n        String name = \"A-large\";\n        String path = \"\";\n\n        Locale.setDefault(Locale.US);\n\n        Scanner sc = new Scanner(new File(path + name + \".in\"));\n        PrintWriter pw = new PrintWriter(path + name + \"ans.out\");\n\/\/        Scanner sc = new Scanner(System.in);\n\/\/        PrintWriter pw = new PrintWriter(System.out);\n\n        int testCases = sc.nextInt();\n        for (int testCase = 1; testCase <= testCases; testCase++) {\n            int res=0;\n            int fres=0;\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            int w = sc.nextInt();\n            \n            if(c\/w<2 && c%w!=0)\n                res=w+1;\n            else\n            {    if(c\/w==1)\n                    res=w;\n                else\n            {\n                int fix=(c\/w)-1;\n                int rem=c-(w*fix);\n                if(rem\/w<2 && c%w!=0)\n                    res=fix+w+1;\n                else\n                    res=fix+w;\n\n            }\n            }\n            fres=(c\/w)*(r-1)+res;\n                    \n\n            \n\n            \n            System.out.println(\"testcase:\"+testCase+\" \"+fres);\n            pw.printf(\"Case #\" + testCase + \": \"+ fres+\"\\n\");\n            pw.flush();\n        }\n\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"714","func":"class Brattleship {\n    public static void main(String[] args) throws IOException {\n        String[] input;\n        if (args.length > 0) { input = args; }\n        else {\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            String x = null;\n            int size = Integer.parseInt(in.readLine());\n            input = new String[size];\n            for (int i=0; i<size; i++) {\n                input[i] = in.readLine();\n            }\n        }\n        int counter = 1;\n        String[] temp;\n        int r, c, w, score, base;\n        for (String s: input) {\n            temp = s.split(\" \");\n            r = Integer.parseInt(temp[0]);\n            c = Integer.parseInt(temp[1]);\n            w = Integer.parseInt(temp[2]);\n            score = 0;\n            base = c \/ w;\n            score = base * r;\n            score += w - 1;\n            if (c % w != 0) { score++; }\n            System.out.println(\"Case #\" + counter + \": \" + score);\n            counter++;\n        }\n    }\n}"}
{"idx":"715","func":"class ProblemA{\n\n    public static void main(String[] args){\n        try{\n            FileReader in = new FileReader(\"A-small-attempt0.in\");\n            BufferedReader reader = new BufferedReader(in);\n            String line = null;\n            String text = \"\";\n            int i = 0;\n            while ((line = reader.readLine()) != null) {\n                text = text + line + \" \";\n            }\n            String[] parts = text.split(\"\\\\s\");\n            Integer testCases = Integer.valueOf(parts[0]);\n            Integer columns, rows, width, temp;\n            int[] answer = new int[testCases];\n            for(int i1 = 0; i1 < testCases; i1++){\n                temp = 0;\n                rows = Integer.valueOf(parts[(i1*3+1)]);\n                columns = Integer.valueOf(parts[(i1*3+2)]);\n                width = Integer.valueOf(parts[(i1*3+3)]);\n                if(columns%width == 0){\n                    temp = (columns\/width)+width-1;\n                }\n                else{\n                    temp = (columns\/width)+width;\n                }\n                temp = temp*rows;\n                answer[i1] = temp;\n            }\n            try{\n                PrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n                \n                for(int j = 0; j < testCases; j++){\n                    int place = j+1;\n                    \n                    out.println(\"Case #\"+place+\": \"+answer[j]);\n                }\n                out.close();\n            }catch(Exception e){\n                e.printStackTrace();}\n        }catch(Exception e){e.printStackTrace();}\n    }\n}"}
{"idx":"716","func":"class A {\n    public static void main(String args[]) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        int R, C, W;\n        for (int I = 1; I <= T; I++) {\n            R = in.nextInt();\n            C = in.nextInt();\n            W = in.nextInt();\n            if (C % W == 0) {\n                System.out.println(\"Case #\" + I + \": \" + (R * (C \/ W) + W - 1));\n            } else {\n                System.out.println(\"Case #\" + I + \": \" + (R * (C \/ W) + W));\n            }\n        }\n    }\n}"}
{"idx":"717","func":"class A {\n    public static void main(String[]args) throws Exception\n    {\n        Scanner scan=new Scanner(new File(\"A-large.in\"));\n        PrintWriter o=new PrintWriter(new File(\"Aoutl0.txt\"));\n        int n=Integer.parseInt(scan.nextLine());\n        for(int i=1;i<=n;i++)\n        {\n            String[]cs=scan.nextLine().split(\" \");\n            int r=Integer.parseInt(cs[0]);\n            int c=Integer.parseInt(cs[1]);\n            int w=Integer.parseInt(cs[2]);\n            int ans=(int)(Math.floor(1.0*c\/w))*r;\n            if(c%w==0)\n                ans+=w-1;\n            else\n                ans+=w;\n\n\n            o.println(\"Case #\"+i+\": \"+ans);    \n        }\n        scan.close();\n        o.close();\n    }\n}"}
{"idx":"718","func":"class Prog\n{\n    public static void main(String [] args)throws Exception\n    {\n        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(read.readLine());\n        int i=1;\n        while(i<=t)\n        {\n            String str = read.readLine();\n            String [] arr = str.split(\" \");\n            int r,c,w,ans=0;\n            r = Integer.parseInt(arr[0]);\n            c = Integer.parseInt(arr[1]);\n            w = Integer.parseInt(arr[2]);\n            \n            if(c == w)\n            {\n                ans = c;\n            }\n            else if(w==1)\n            {\n                ans = c;\n            }\n            else\n            {\n                ans += c\/w;\n                if ( ans*w == c)\n                {\n                    ans--;\n                }\n                ans += w;\n            }\n            ans = ans * r;\n            \n            System.out.println(\"Case #\"+i+\": \"+ans);\n            i++;\n        }\n    }\n}"}
{"idx":"719","func":". *\/\nclass CodeF\n{\n    public static void main (String[] args) throws java.lang.Exception, IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String str = br.readLine();\n        int val = Integer.parseInt(str);\n        int cnum = 1;\n        while((str=br.readLine()) != null)\n        {\n            String[] temp = str.split(\" \");\n            int r = Integer.parseInt(temp[0]);\n            int c = Integer.parseInt(temp[1]);\n            int w = Integer.parseInt(temp[2]);\n            int ans = 0;\n            if (c%w == 0){ ans = ((c\/w) + w - 1)*r; }\n            else { ans = ((c\/w) + w)*r; }\n            System.out.println(\"Case #\"+cnum +\": \"+ans);\n            cnum++;\n        }\n    }\n}"}
{"idx":"720","func":"class cj_2015_R1C_A {\n\n    public static void main(String[] args) {\n        Scanner read = new Scanner(System.in);\n        int n = read.nextInt();\n        for (int i = 1; i <= n; i++) {\n            int r = read.nextInt();\n            int c = read.nextInt();\n            int w = read.nextInt();\n            System.out.printf(\"Case #%d: %d\\n\", i, r * c \/ w + w + (c % w == 0 ? -1 : 0));\n        }\n        read.close();\n    }\n\n}"}
{"idx":"721","func":"class CodeJam2015Round1CA {\n\n    public static void main(String[] args) throws Exception {\n        String out = \"\";\n        Scanner in = new Scanner(new FileReader(\".\/A-large.in\"));\n        \n        int numCases = in.nextInt();\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n            out += \"Case #\" + caseNum + \": \";\n            int r = in.nextInt(); \/\/ 1 for small dataset\n            int c = in.nextInt();\n            int w = in.nextInt();\n            \n            if (r == 1) {\n                if (c == w || w == 1 || c - w == 1)\n                    out += c + \"\\n\";\n                else {\n                    int ans = c;\n                    int count = 0;\n                    while (ans >= 2 * w) {\n                        ans -= w;\n                        count++;\n                    }\n                    if (ans > w)\n                        count++;\n                    count += w;\n                    out += count + \"\\n\";\n                }\n            }\n            else {\n                if (c == w) {\n                    int ans = c + (r - 1);\n                    out += ans + \"\\n\";\n                }\n                else if (c - w < w) {\n                    int ans = w + 1 + (r - 1);\n                    out += ans + \"\\n\";\n                }\n                else if (w == 1) {\n                    int ans = c * r;\n                    out += ans + \"\\n\";\n                }\n                else {\n                    int ans = c;\n                    int count = 0;\n                    while (ans >= 2 * w) {\n                        ans -= w;\n                        count++;\n                    }\n                    count++;\n                    count *= r;\n                    if (ans == w)\n                        count--;\n                    count += w;\n                    out += count + \"\\n\";\n                }\n            }\n        }\n        \n        in.close();\n        try (BufferedWriter bw = new BufferedWriter(new FileWriter(\".\/A-large.out\"))) {\n            bw.write(out);\n        }\n    }\n}"}
{"idx":"722","func":"class A {\n\n    private static final String FILE_NAME = \"A-large\";\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(FILE_NAME + \".in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(FILE_NAME + \".out\"));\n\n        int t = Integer.parseInt(in.readLine());\n        for (int c = 1; c <= t; ++c) {\n            String[] split = in.readLine().split(\" \");\n            int rows = Integer.parseInt(split[0]);\n            int columns = Integer.parseInt(split[1]);\n            int width = Integer.parseInt(split[2]);\n\n            int turns = rows*(columns\/width);\n            if (columns%width > 0) {\n                ++turns;\n            }\n            turns += width-1;\n\n            String ans = String.format(\"Case #%d: %d\\n\", c, turns);\n            out.write(ans);\n            System.out.print(ans);\n        }\n        out.close();\n    }\n}"}
{"idx":"723","func":"class A {\n\n    public static void main(String[] args) {\n\n         try {\n         System.setOut(new PrintStream(\"src\/output.out\"));\n         } catch (FileNotFoundException e) {\n         e.printStackTrace();\n         }\n        \n         Scanner in = null;\n         try {\n         in = new Scanner(new File(\"src\/A-small-attempt1 (2).in\"));\n         } catch (FileNotFoundException e) {\n         e.printStackTrace();\n         }\n\n\/\/        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int res = 0;\n            int r = in.nextInt();\n            int c = in.nextInt();\n            int w = in.nextInt();\n            \n            if(w == c) {\n                res = c;\n            } else {\n                if(w == 1) {\n                    res = c;\n                } else {\n                    int cheats = c \/ w;\n                    if(cheats <= 1) {\n                        res = w + 1;\n                    } else {\n                        if(c % w == 0) {\n                            res = w + cheats - 1;\n                        } else {\n                            res = w + cheats;\n                        }\n                    }\n                }\n            }\n            System.out.println(\"Case #\" + (i + 1) + \": \" + res);\n        }\n    }\n\n}"}
{"idx":"724","func":"class A {\n    public static void main(String args[]) throws Exception {\n        \/\/BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedReader br=new BufferedReader(new FileReader(\"A-large.in\"));\n        PrintWriter pw = new PrintWriter(\"Aout.txt\");\n        int n = Integer.parseInt(br.readLine());\n        String line;\n\n        for (int q = 1; q <= n; q++) {\n            line = br.readLine();\n            Scanner sc = new Scanner(line);\n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            int W = sc.nextInt();\n            int ans = (C \/ W) * R + (C % W == 0 ? 0 : 1) + W - 1;\n            System.out.println(\"Case #\" + q + \": \" + ans);\n            pw.println(\"Case #\" + q + \": \" + ans);\n        }\n        pw.close();\n    }\n}"}
{"idx":"725","func":"class A {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        \n        Scanner in = new Scanner(new File(\"c:\\\\codejam2015\\\\a\\\\small.in\"));\n        PrintWriter out = new PrintWriter(new File(\n                \"c:\\\\codejam2015\\\\a\\\\small.out\"));\n        int numTests = in.nextInt();\n        for (int i = 1; i <= numTests; i++) {\n            long start = System.currentTimeMillis();\n                    \n                    int r = in.nextInt();\n                    int c = in.nextInt();\n                    int w = in.nextInt();\n                    \n                    \n                    System.out.println(\"solving = \" + r + \", \" + c + \", \" + w);\n                    solved = new boolean[c];\n                    Arrays.fill(solved, false);\n                    \n            \/\/        int maxStart = 0;\n            \/\/        int maxEnd = c -1;\n            \/\/        int max = c;\n                    \n                    Queue<int[]> q = new LinkedList<int[]>();\n            \/\/        \n                    q.offer(new int[]{0, c-1});\n            \/\/        \n                    int numHits = 0;\n                    \n                    int max = c;\n                    \n                    while(max > w) {\n                        numHits ++;\n                        max = max - w;\n                    }\n                    \n                    numHits = numHits * r;\n                    if(max == w) {\n                        numHits = numHits + (r -1);\n                    }\n                    numHits = numHits + w;\n                    \n            \/\/        while(!q.isEmpty()) {\n            \/\/            numHits++;\n            \/\/            \n            \/\/            int[] maxMarkers = q.poll();\n            \/\/            int maxStart = maxMarkers[0];\n            \/\/            int maxEnd = maxMarkers[1];\n            \/\/            int marked = (maxStart + maxEnd) \/ 2;\n            \/\/            solved[marked] = true;\n            \/\/            if((maxEnd - marked) >= w) {\n            \/\/                q.offer(new int[]{marked + 1, maxEnd});\n            \/\/            }\n            \/\/            if((marked - maxStart) >= w) {\n            \/\/                q.offer(new int[]{maxStart, marked - 1});\n            \/\/            }\n            \/\/            if(q.isEmpty()) {\n            \/\/                int max = (maxEnd - maxStart) + 1;\n            \/\/                if(max > w) {\n            \/\/                    numHits += w;\n            \/\/                } else {\n            \/\/                    numHits += (w -1);\n            \/\/                }\n            \/\/            }\n            \/\/        }\n                    \n            \/\/        \n            \/\/        if(w == 1) {\n            \/\/            numHits = c;\n            \/\/        } else {\n            \/\/        while(max >= w) {\n            \/\/            int marked = (maxStart + maxEnd) \/ 2;\n            \/\/            System.out.println(\"marking \" + marked);\n            \/\/            solved[marked] = true;\n            \/\/            numHits++;\n            \/\/            \n            \/\/            int[] newMax = findMax();\n            \/\/            System.out.println(\"max \" + Arrays.toString(newMax));\n            \/\/            if(newMax[1] > w) {\n            \/\/                max = newMax[1];\n            \/\/                maxStart = newMax[0];\n            \/\/                maxEnd = newMax[1] -1;\n            \/\/            } else {\n            \/\/                if(max > w) {\n            \/\/                    numHits += w;\n            \/\/                } else {\n            \/\/                    numHits += (w - 1);\n            \/\/                }\n            \/\/                break;\n            \/\/            }\n            \/\/        }\n            \/\/        }\n                    System.out.println(\"numHits \" + numHits);\n            \n                    out.println(\"Case #\" + i + \": \" + numHits);\n        }\n\n        out.close();\n    }\n\n    static boolean[] solved;\n\n\n}"}
{"idx":"726","func":"class P1\n{\n  public static void main (String[] args) throws Exception\n  {\n    Scanner in = new Scanner(new File(\"A-small-attempt0.in\"));\n    \/\/Scanner in = new Scanner(System.in);\n    PrintWriter out = new PrintWriter(new FileWriter(\"out.txt\"));\n    int n = in.nextInt();\n    \n    for(int t =0; t<n; t++)\n    {\n      int r =  in.nextInt();\n      int c = in.nextInt();\n      int w = in.nextInt();\n      int answer = (int)(Math.ceil(c*1.0\/w*1.0))-1+w;\n      answer *=r;\n      String ans = \"\"+answer;\n      out.println(\"Case #\" + (t+1) + \": \" + ans);\n      System.out.println(\"Case #\" + (t+1) + \": \" + ans);\n    }\n\n    in.close();\n    out.close();\n  }\n}"}
{"idx":"727","func":"class R1CP1 {\n\n    public static void main(String[] args) throws Exception {\n        String file = \"A-small-attempt1\";\n\/\/        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedReader br = new BufferedReader(new FileReader(file + \".in\"));\n        PrintStream ps = new PrintStream(new FileOutputStream(file + \".out\"));\n        int testcases = Integer.parseInt(br.readLine());\n        for(int t = 0; t < testcases; t++){\n            String[] ln = br.readLine().split(\" \");\n            int r = Integer.parseInt(ln[0]);\n            int c = Integer.parseInt(ln[1]);\n            int w = Integer.parseInt(ln[2]);\n            \n            int precal = (int)(Math.ceil((double)(c - w) \/ w) + w);\n            ps.println(\"Case #\" + (t + 1) + \": \" + precal);\n        }\n    }\n\n}"}
{"idx":"728","func":"class a {\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for (int caseNum = 1; caseNum <= t; caseNum++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            int w = sc.nextInt();\n            int g = (r - 1) * (c \/ w) + w + (c \/ w);\n            if ((c % w) == 0) {\n                g--;\n            }\n            System.out.println(\"Case #\" + caseNum + \": \" + g);\n        }\n    }\n}"}
{"idx":"729","func":"class TaskA {\n    public int caseNumber;\n    Formatter output;\n    Scanner input;\n    final String file = \"A-large.in\";\n    \n    public TaskA(){\n        caseNumber = 1;\n        try{\n            output = new Formatter(\"result.out\");\n            input = new Scanner(new File(file));\n        }\n        catch(Exception ex){\n            System.out.print(ex.getMessage() + \"\/n\");\n        }\n    }\n    \n    public static void main(String[] args){\n        TaskA app = new TaskA ();\n        int T = app.input.nextInt();\n        int R, C, W, result;\n        \n        for (int i = 0; i < T; i++){\n            R = app.input.nextInt();\n            C = app.input.nextInt();\n            W = app.input.nextInt();\n            \n            result = R*(C\/W) + W;\n            \n            if(C % W == 0)\n                result--;\n            String msg = result + \"\";\n            \n            app.output.format(\"Case #%d: %s\\n\", app.caseNumber, msg);\n            System.out.printf(\"Case #%d: %s\\n\", app.caseNumber, msg);\n            app.caseNumber++;\n        }\n        \n        try{\n            app.output.close();\n            System.out.print(\"Output is closed\\n\");\n        }\n        catch(Exception ex1){\n            System.out.print(ex1.getMessage() + \"\\n\");\n        }\n        try{\n            app.input.close();\n            System.out.print(\"Input is closed\\n\");\n        }\n        catch(Exception ex){\n            System.out.print(ex.getMessage() + \"\\n\");\n        }\n        System.out.print(\"Done\");\n    }\n}"}
{"idx":"730","func":"class Brattleship {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int T = scan.nextInt();\n        for (int t=0; t<T; t++) {\n            int R = scan.nextInt();\n            int C = scan.nextInt();\n            int W = scan.nextInt();\n            int result = C \/ W * R + (W - 1);\n            if (C % W > 0) {\n                result++;\n            }\n            System.out.println(\"Case #\"+(t+1)+\": \"+result);\n        }\n    }\n}"}
{"idx":"731","func":"class Brattleship {\n    public static Scanner in = new Scanner(System.in);\n    public static PrintWriter PW = new PrintWriter(System.out);\n\n    public static void main(String[] args) throws IOException {\n        int cases = in.nextInt();\n\n        for (int c = 1; c <= cases; c++) {\n            int result=0;\n            int R = in.nextInt(), C = in.nextInt(), W=in.nextInt();\n            \n            result = R*((C+W-1)\/W)+W-1;\n            \n            PW.println(\"Case #\" + c + \": \" + result);\n        }\n\n        PW.close();\n    }\n}"}
{"idx":"732","func":"class Q1 {\n\n    public static void main(String[] args) throws Exception {\n        String directory = \"D:\\\\Work\\\\eclipse\\\\workspace\\\\CodeJam2015\\\\src\\\\round1c\\\\q1\\\\\";\n        String fileName = \"A-large\";\n        \/\/String fileName = \"testA\";\n        File file = new File(directory + fileName + \".in\");\n        File outFile = new File(directory + fileName + \".out\");\n        BufferedReader br = new BufferedReader(new FileReader(file));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\n        int testCases = Integer.parseInt(br.readLine());\n        for (int t = 1; t <= testCases; t++) {\n            \/*\n             * Your code here\n             *\/\n            String input1 = br.readLine();\n            String[] arr1 = input1.split(\" \");\n            \n            R = Integer.parseInt(arr1[0]);\n            C = Integer.parseInt(arr1[1]);\n            W = Integer.parseInt(arr1[2]);\n            \n            int fmove = C \/ W;\n            int smove = W;\n            if (C % W == 0) {\n                smove--;\n            }\n            \n            int bmove = (C \/ W) * (R - 1);\n            int total = bmove + fmove + smove;\n            String answer = total + \"\";\n\n            String response = \"Case #\" + t + \": \" + answer + \"\\n\";\n            bw.write(response);\n\n            \/\/System.out.println(input1 + \"\/\/\");\n            \/\/System.out.println(response);\n        }\n        br.close();\n        bw.close();\n    }\n\n    static int R;\n    static int C;\n    static int W;\n}"}
{"idx":"733","func":"class Main {\n\n    public static void main(String[] args) {\n        try {\n            Scanner scanner = new Scanner(new FileInputStream(\"input.txt\"));\n            scanner.useLocale(Locale.ENGLISH);\n            BufferedWriter out = new BufferedWriter(new FileWriter(\"output.txt\"));\n            int tests = scanner.nextInt();\n            for (int i = 0; i < tests; i++) {\n                int r = scanner.nextInt();\n                int c = scanner.nextInt();\n                int w = scanner.nextInt();\n                int perRow = c \/ w;\n                int result = r*perRow;\n                if (c % w == 0) {\n                    result--;\n                }\n                result += w;\n                out.write(\"Case #\" + (i + 1) + \": \" + result + \"\\n\");\n            }\n            out.close();\n        } catch (FileNotFoundException e) {\n            \/\/ ????\n        } catch (IOException e) {\n            \/\/ ????\n        }\n    }\n}"}
{"idx":"734","func":"class CodeJam1 {\n    public static void main(String args[]){\n        Scanner scan = new Scanner(System.in);\n        int T = scan.nextInt();\n        \n        for(int i = 0 ; i < T;i++){\n            int R = scan.nextInt();\n            int C = scan.nextInt();\n            int W = scan.nextInt();\n            int count =0;\n            if(W ==1)\n                count = C * R;\n            else\n            {\n                int prs = (int)Math.ceil((double)C\/W);\n                count = prs*R+W-1;\n            }\n            System.out.printf(\"Case #%d: %d\\n\",i+1,count);\n        }\n    }\n}"}
{"idx":"735","func":"class Problem1 {\n\n    public static void main(String[] args) throws IOException {\n    Scanner scan = new Scanner(System.in);\n    BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\n    int T = scan.nextInt();\n    for(int i11=1;i11<=T;i11++){\n        int r = scan.nextInt(),c=scan.nextInt(),w=scan.nextInt();\n        out.write(\"Case #\"+i11+\": \"+getAns(r,c,w)+\"\\n\");\n    }\n    scan.close();\n    out.close();}\n\n    private static int getAns(int a, int c, int w) {\n        int firstHit = 1+(int)(c-1)\/w;\n        return firstHit+w-1;\n    }\n\n}"}
{"idx":"736","func":"class Brattleship {\n    public static void main(String[] args){\n        File a = new File(\"A-small-attempt0 (2).in\");\n        Scanner input = null;\n        try {\n            input = new Scanner(a);\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \/\/Scanner input = new Scanner(System.in);\n        \n        File b = new File(\"A-output.txt\");\n        FileWriter fw = null;\n        try {\n            fw = new FileWriter(b);\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        int number = input.nextInt();\n        int cases = number;\n        \n        while(number > 0){\n            int r = input.nextInt();\n            int c = input.nextInt();\n            int w = input.nextInt();\n            \n            int result = 0;\n            if (w == 1){\n                result = r * c;\n            } else {\n                result = (c - 1) \/ w + w;\n            }\n            \n            try {\n                fw.write(\"Case #\" + (cases - number + 1) + \": \" + result + \"\\n\");\n            } catch (IOException e) {\n                \/\/ TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            number--;\n        }\n        \n        try {\n            fw.close();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"737","func":"class Brattleship {\n    \n    \n    \n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n            BufferedWriter bw = new BufferedWriter(new FileWriter(\"A-small-attempt0.out\"));\n            \n            int numCases = Integer.parseInt(br.readLine());\n            \n            int casectr = 1;\n            for (int c = 0; c < numCases; c++, casectr++) {\n                String[] line = br.readLine().split(\" \");\n                int row = Integer.parseInt(line[0]); \/\/ small: row = 1\n                int col = Integer.parseInt(line[1]);\n                int width = Integer.parseInt(line[2]);\n                \n                int res = 0;\n                switch (col) {\n                case 1:\n                    res = 1;\n                    break;\n                case 2:\n                    res = 2;\n                    break;\n                case 3:\n                    res = 3;\n                    break;\n                case 4:\n                    switch (width) {\n                    case 1:\n                        res = 4;\n                        break;\n                    case 2:\n                        res = 3;\n                        break;\n                    case 3:\n                        res = 4;\n                        break;\n                    case 4:\n                        res = 4;\n                        break;\n                    }\n                    break;\n                case 5:\n                    switch (width) {\n                    case 1:\n                        res = 5;\n                        break;\n                    case 2:\n                        res = 4;\n                        break;\n                    case 3:\n                        res = 4;\n                        break;\n                    case 4:\n                        res = 5;\n                        break;\n                    case 5:\n                        res = 5;\n                        break;\n                    }\n                    break;\n                case 6:\n                    switch (width) {\n                    case 1:\n                        res = 6;\n                        break;\n                    case 2:\n                        res = 4;\n                        break;\n                    case 3:\n                        res = 4;\n                        break;\n                    case 4:\n                        res = 5;\n                        break;\n                    case 5:\n                        res = 6;\n                        break;\n                    case 6:\n                        res = 6;\n                        break;\n                    }\n                    break;\n                case 7:\n                    switch (width) {\n                    case 1:\n                        res = 7;\n                        break;\n                    case 2:\n                        res = 5;\n                        break;\n                    case 3:\n                        res = 5;\n                        break;\n                    case 4:\n                        res = 5;\n                        break;\n                    case 5:\n                        res = 6;\n                        break;\n                    case 6:\n                        res = 7;\n                        break;\n                    case 7:\n                        res = 7;\n                        break;\n                    }\n                    break;\n                case 8:\n                    switch (width) {\n                    case 1:\n                        res = 8;\n                        break;\n                    case 2:\n                        res = 5;\n                        break;\n                    case 3:\n                        res = 5;\n                        break;\n                    case 4:\n                        res = 5;\n                        break;\n                    case 5:\n                        res = 6;\n                        break;\n                    case 6:\n                        res = 7;\n                        break;\n                    case 7:\n                        res = 8;\n                        break;\n                    case 8:\n                        res = 8;\n                        break;\n                    }\n                    break;\n                case 9:\n                    switch (width) {\n                    case 1:\n                        res = 9;\n                        break;\n                    case 2:\n                        res = 6;\n                        break;\n                    case 3:\n                        res = 5;\n                        break;\n                    case 4:\n                        res = 6;\n                        break;\n                    case 5:\n                        res = 6;\n                        break;\n                    case 6:\n                        res = 7;\n                        break;\n                    case 7:\n                        res = 8;\n                        break;\n                    case 8:\n                        res = 9;\n                        break;\n                    case 9:\n                        res = 9;\n                        break;\n                    }\n                    break;\n                case 10:\n                    switch (width) {\n                    case 1:\n                        res = 10;\n                        break;\n                    case 2:\n                        res = 6;\n                        break;\n                    case 3:\n                        res = 6;\n                        break;\n                    case 4:\n                        res = 6;\n                        break;\n                    case 5:\n                        res = 6;\n                        break;\n                    case 6:\n                        res = 7;\n                        break;\n                    case 7:\n                        res = 8;\n                        break;\n                    case 8:\n                        res = 9;\n                        break;\n                    case 9:\n                        res = 10;\n                        break;\n                    case 10:\n                        res = 10;\n                        break;\n                    }\n                    break;\n                }\n                    \n                bw.write(\"Case #\" + casectr + \": \" + res);\n                bw.newLine();\n            }\n            \n            br.close();\n            bw.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (NumberFormatException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \n    }\n    \n}"}
{"idx":"738","func":"class Counter {\n\n        List<Integer> cases = new ArrayList<Integer>();\n        List<Integer> R =  new ArrayList<Integer>();\n        List<Integer> C =  new ArrayList<Integer>();\n        List<Integer> W =  new ArrayList<Integer>();\n        List<Integer> res =  new ArrayList<Integer>();\n        public static void main(String[] args)\n        {\n            Counter so = new Counter();\n            \n            \/\/so.readFile(\"A-large.in\");\n            Scanner scanner;\n            try {\n                scanner = new Scanner(new File(\"A-large.in\"));\n            \n                int testCases = scanner.nextInt();\n            \n                scanner.nextLine();\n                for(int i=0; i<testCases; ++i)\n                {\n                    so.R.add(scanner.nextInt());\n                    so.C.add(scanner.nextInt());\n                    so.W.add(scanner.nextInt());\n                    \n                }\n                \n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            \n            for(int i1=0; i1<so.W.size(); ++i1)\n            {\n                int w = so.W.get(i1);\n                int r = so.R.get(i1);\n                int c = so.C.get(i1);\n                \n                int val;\n                \n                int valami;\n                int utolso;\n                \n                if(c%w == 0)\n                {\n                    valami = 0;\n                    utolso = 0;\n                } else \n                {\n                    valami = 2*w - (w-1+1+(c%w))+1;\n                    \/\/utolso = valami + (w-valami)-1;\n                    utolso = 1;\n                }\n                \n                \/\/System.out.println(\"valami: \" + valami);\n                \/\/System.out.println(\"utolso: \" + utolso);\n                \n                if(c*r==w)\n                {\n                    val = w;\n                    so.res.add(val);\n                    continue;\n                }\n                        \n                if(r==1){\n                    val = (int) ((Math.floor(c \/ w) + (w -1))) + utolso; \n                    so.res.add(val);\n                    continue;\n                }\n                \n                if(r>1){\n                    val = (int) ((r-1) * (Math.floor(c \/ w))) + (int)(Math.floor(c \/ w) +  (w -1)) + utolso; \n                    \n                    so.res.add(val);\n                    continue;\n                }\n                \n            }\n            \n            PrintWriter writer;\n            try {\n                writer = new PrintWriter(\"A-large.out\");\n                \n                int counter = 0;\n                for(int i=0; i<so.res.size();++i)\n                {\n                    writer.print(\"Case #\" + (++counter) + \": \" + so.res.get(i));\n                    if(counter<so.res.size())\n                    {\n                        writer.println();\n                    }\n                }\n                \n                writer.close();\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n\n}"}
{"idx":"739","func":"class r11 {\n    public static void main(String[] args) {\n        try {\n\n            Scanner input=new Scanner(new File(args[0]));\n            PrintWriter output=new PrintWriter(args[1]) ;\n            int casenumber = input.nextInt();\n            for(int i=0;i<casenumber;i++){\n                int R = input.nextInt(),C=input.nextInt(),W=input.nextInt(),count=0;\n                if(C%W == 0)\n                    count=(R-1)*(C\/W)+C\/W+W-1;\n                else\n                    count=(R-1)*(C\/W)+C\/W+W;\n                output.println(\"Case #\"+(i+1)+\": \"+count);\n            }\n            output.flush();\n        }catch(FileNotFoundException e){}\n\n    }\n}"}
{"idx":"740","func":"class Codejam1CA {\n    \n    public static void main(String[] args) throws FileNotFoundException {\n        \n\/\/        Scanner s=new Scanner(System.in);\n        PrintWriter writer=new PrintWriter(\"al.out\");\n        Scanner s=new Scanner(new File(\"al.in\"));\n        int testcase=s.nextInt();\n        for (int i = 0; i < testcase; i++) {\n            int r=s.nextInt();\n            int c=s.nextInt();\n            int l=s.nextInt();\n            int x=c\/l;\n            int xx=x*r;\n            int ans=xx+l-1;\n            \n            if(c%l!=0 && l!=1){\n                ans++;\n            }\n            \n            \n            \n            \n            \n            \n            System.out.println(\"Case #\"+(i+1)+\": \"+ans);\n            writer.println(\"Case #\"+(i+1)+\": \"+ans);\n        }\n        writer.close();\n        \n    }\n    \n}"}
{"idx":"741","func":"class A1 {\n    private static String _inputPath = \"c:\\\\temp\\\\competition\\\\A1.in\";\n    private static String _outputPath = \"c:\\\\temp\\\\competition\\\\A1.out\";\n\n    public static void main(String[] args) {\n        Scanner input = null;\n        PrintStream output = null;\n        try {\n            input = new Scanner(new File(_inputPath));\n            output = new PrintStream(_outputPath);\n        \n            int numberOfTestCases = input.nextInt();\n            for (int i = 0; i < numberOfTestCases; ++i){\n                int R = input.nextInt();\n                int C = input.nextInt();\n                int W = input.nextInt();\n        \n                if (W == 1) {\n                    String resultString = String.format(\"Case #%d: %d\", i + 1, R * C);\n                    output.println(resultString);\n                    continue;\n                }\n        \n                int score = (C \/ W) > 1 ? (C \/ W * R) - 1 : 0;\n                score += ((C % W) == 0) ? W : W + 1;\n        \n                String resultString = String.format(\"Case #%d: %d\", i + 1, score);\n                output.println(resultString);\n            }\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (input != null) {\n                input.close();\n            }\n        \n            if (output != null) {\n                output.close();\n            }\n        }\n    }\n}"}
{"idx":"742","func":"class A {\n    static Scanner sc;\n    public static void main(String[] args) throws FileNotFoundException {\n        sc = new Scanner(args.length > 0 ? new FileInputStream(args[0]) : System.in);\n        int numCases = sc.nextInt();\n        for (int nCase=1; nCase<=numCases; nCase++) {\n            Object[] args1 = { nCase };\n            System.out.printf(\"Case #%d: \", args1);\n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            int W = sc.nextInt();\n            \n            int perRow = (int)Math.floor((double)C \/ W);\n            int extraHit = C % W > 0 ? W : W-1;\n            Object[] args2 = { R * perRow + extraHit };\n            System.out.printf(\"%d\\n\", args2);\n        }\n        sc.close();\n    }\n\n}"}
{"idx":"743","func":"class q1{\n    public static void main(String[]args) throws UnsupportedEncodingException,FileNotFoundException{\n        FileInputStream fis = new FileInputStream(\"A-large.in\") ;\n        Scanner sc = new Scanner(fis);\n        PrintWriter writer = new PrintWriter(\"out2.txt\", \"UTF-8\");\n        long w,r,c,res;\n        int i,j;\n        int test = sc.nextInt();\n        for(i=1;i<=test;i++){\n            r=sc.nextLong();\n            c=sc.nextLong();\n            w=sc.nextLong();\n            res=r*(c\/w)+(w-1);\n            if(c%w!=0)\n            res=res+1;\n            writer.println(\"Case #\"+i+\": \"+res);\n            System.out.println(\"Case #\"+i+\": \"+res);\n        }\n        writer.close();\n    }\n}"}
{"idx":"744","func":"class CJRC1 {\n\n    public static void main(String[] args) throws FileNotFoundException{\n        Scanner sc = new Scanner(new File(\"input.txt\"));\n        PrintWriter pw = new PrintWriter(\"OUTPUT.TXT\");\n        int T = sc.nextInt();\n        int r,c,w,rez;\n        for(int t=0; t<T; ++t){\n            r = sc.nextInt();\n            c =sc.nextInt();\n            w = sc.nextInt();\n            rez = c\/w;\n            rez *=r;\n            rez +=w-1;\n            if(c%w > 0)\n                rez+=1;\n            pw.println(\"Case #\" + (t+1) + \": \" + rez );\n        }\n        pw.close();\n    }\n    \n}"}
{"idx":"745","func":"class A{\n  public static void main (String[] args) throws Exception{\n    Scanner in = new Scanner (new FileReader(\"A-large.in\"));\n    PrintWriter out = new PrintWriter (\"A.out\");\n    int cases = in.nextInt();\n    for (int casenum = 1; casenum <= cases; casenum++){\n      \n      int r = in.nextInt();\n      int c = in.nextInt();\n      int w = in.nextInt();\n      int score = c\/w*(r - 1);\n      score += (int)Math.ceil((double)c\/(double)w);\n      score += w - 1;\n      \n      out.println (\"Case #\" + casenum + \": \" + score);\n    }\n    out.close();\n    in.close();\n  }\n}"}
{"idx":"746","func":"class A {\n    public static String cc = \"Case #{0}: {1}\";\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(\"A.in\"));\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"A.out\"));\n        int n = Integer.parseInt(reader.readLine().trim());\n        for (int i = 0; i < n; i++) {\n            int ans = 0;\n            String[] strs = reader.readLine().trim().split(\" +\");\n            int p1 = Integer.parseInt(strs[0]);\n            int p2 = Integer.parseInt(strs[1]);\n            int m = Integer.parseInt(strs[2]);\n\n            ans += p1 * (p2 % m == 0 ? p2 \/m : p2 \/m+1);\n            ans += m-1;\n            writer.write(MessageFormat.format(cc, i + 1, ans));\n            writer.newLine();\n        }\n        writer.close();\n        reader.close();\n    }\n}"}
{"idx":"747","func":"class A {\n\n    Scanner sc = new Scanner(getClass().getResourceAsStream(IN));\n    static final String FILENAME = \"A-large\";\n    \/\/ static final String FILENAME = \"A-small-attempt0\";\n    static final String IN = FILENAME + \".in\";\n    static final String OUT = FILENAME + \".out\";\n    PrintStream out;\n\n    public static void main(String args[]) throws Exception {\n        A r = new A();\n        r.sc.useLocale(Locale.US);\n        \n        r.out = new PrintStream(new FileOutputStream(A.OUT));\n        \n        int t = r.sc.nextInt();\n        for (int i = 1; i <= t; i++) {\n            r.sc.nextLine();\n            r.out.print(\"Case #\" + i + \": \");\n            int R = r.sc.nextInt();\n            int C = r.sc.nextInt();\n            int W = r.sc.nextInt();\n            int m = C \/ W;\n            m=m*R;\n            if (C % W!=0)\n                m++;\n            m=m+(W-1);\n            r.out.print(m);\n            r.out.println();\n        }\n        r.sc.close();\n        r.out.close();\n    }\n\n}"}
{"idx":"748","func":"class Problem1 {\n\n    static int solve1(int r, int c, int w) {\n        if(c % w == 0)\n            return r*(c\/w) + w-1;\n        return r*(c\/w) + w;\n    }\n\n    public static void main(String... args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for(int i=1; i <= T; i++) {\n            int ans = solve1(in.nextInt(), in.nextInt(), in.nextInt());\n            System.out.println(\"Case #\" + i + \": \" + ans);\n        }\n        \n        in.close();\n    }\n\n\n}"}
{"idx":"749","func":"class Problem1 {\n    public static void main(String[] args) {\n        try {\n            Scanner scanner = new Scanner(new FileReader(\"A-small-attempt0.in\"));\n            int T = scanner.nextInt();\n            int[] Rs = new int[T];\n            int[] Cs = new int[T];\n            int[] Ws = new int[T];\n            for(int i=0; i<T; i++) {\n                Rs[i] = scanner.nextInt();\n                Cs[i] = scanner.nextInt();\n                Ws[i] = scanner.nextInt();\n            }  \n            PrintWriter out = new PrintWriter(new FileWriter(\"output1.txt\"));        \n            for(int i=0; i<T; i++) {\n                int count = Cs[i]\/Ws[i];\n                count += Ws[i]-1;\n                if(Cs[i]%Ws[i] != 0) {\n                    count++;\n                }\n                count *= Rs[i];\n                out.println(\"Case #\" + (i+1) + \": \" + count);\n            }\n            out.close();           \n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"750","func":"class ProblemA {\n\n    \/**\n     * @param args\n     *            : first arg - input file, second arg - output file\n     *\/\n    public static void main(String[] args) {\n        if (args.length != 2) {\n            System.out.println(\"Missing parameters (2 required)\");\n            System.out.println(\" * parameter 1 - input file\");\n            System.out.println(\" * parameter 2 - output file\");\n            return;\n        }\n        \n        BufferedReader reader = null;\n        BufferedWriter writer = null;\n        \n        try {\n            reader = new BufferedReader(new FileReader(args[0]));\n            writer = new BufferedWriter(new FileWriter(args[1]));\n\n            String s_t = reader.readLine();\n            int t = Integer.valueOf(s_t).intValue();\n            \n            for (int i = 1; i <= t; i++) {\n                String line = reader.readLine();\n                String[] vars = line.split(\" \");  \n                \n                int r = Integer.valueOf(vars[0]).intValue();\n                int c = Integer.valueOf(vars[1]).intValue();\n                int w = Integer.valueOf(vars[2]).intValue();\n                \n                int result = 0;\n                \n                int perR = c \/ w;\n                \n                result = r * perR + w;\n                \n                if (c % w == 0) {\n                    result = result - 1; \n                }\n                \n                writer.write(\"Case #\" + i + \": \" + result);\n                writer.newLine();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (reader != null)\n                    reader.close();\n            } catch (IOException e) {\n            }\n            try {\n                if (writer != null)\n                    writer.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n\n}"}
{"idx":"751","func":"class Main {\n    \n    public static void main(String[] args) throws IOException {\n        if(!INPUT.isDirectory())\n            throw new RuntimeException(\"Input folder dosen't exist\");\n        for(File file : INPUT.listFiles(f -> f.getName().endsWith(\".in\"))) {\n            File outputFile = new File(file.getAbsolutePath().replaceAll(\"\\\\.([^\\\\.]*)$\", \"\")+\".out\");\n            BufferedReader inputReader = new BufferedReader(new FileReader(file));\n            PrintWriter outputWriter = new PrintWriter(outputFile);\n            int testNum = Integer.parseInt(inputReader.readLine());\n            for (int i=0; i<testNum; i++) {\n                String[] rcw = inputReader.readLine().split(\" \");\n                int r = Integer.parseInt(rcw[0]);\n                int c = Integer.parseInt(rcw[1]);\n                int w = Integer.parseInt(rcw[2]);\n                int res = c\/w * r;\n                if (c % w != 0)\n                    res += 1;\n                res += (w-1);\n                int answer = res;\n                outputWriter.format(\"Case #%d: %d\\n\", (i+1), answer);\n            }\n            inputReader.close();\n            outputWriter.close();\n        }\n    }\n    \n    public static final File INPUT = new File(\"d:\/TEST\/\");\n    \n}"}
{"idx":"752","func":"class CodeJamA {\n    public static void main(String[] args) throws IOException {\n\n        Scanner input = new Scanner(new FileReader(\"A-small-attempt0.in\"));\n        try {\n            \/\/ READ PROBLEM DATA\n            Integer testCases = input.nextInt();\n            input.nextLine();\n            for (int i = 1; i <= testCases; i++) {\n                int rows = input.nextInt();\n                int columns = input.nextInt();\n                int width = input.nextInt();\n                \n                int minimumHitsPerRow = columns \/ width + (columns % width == 0 ? 0 : 1);\n                int totalInitialHits = minimumHitsPerRow * rows;\n                \n                int totalHits = totalInitialHits + width - 1;\n                \n                System.out.println(\"Case #\" + i + \": \" + totalHits);\n            }\n\n        } finally {\n            input.close();\n        }\n    }\n\n}"}
{"idx":"753","func":"class A {\n\n    private A() {\n    }\n\n    public static void main(final String[] args) throws Exception {\n        final A a = new A();\n        final BufferedReader in = new BufferedReader(new FileReader(new File(\"f.in\")));\n        System.setOut(new PrintStream(a.getClass().getSimpleName() + \".out\"));\n        final String line = in.readLine();\n        final int test = Integer.parseInt(line);\n        \n        \n        start: for (int w = 1; w <= test; w++) {\n        \n            final String s = in.readLine();\n            final String[] ss = s.split(\" \");\n            final int r = Integer.parseInt(ss[0]);\n            final int c = Integer.parseInt(ss[1]);\n            final int x = Integer.parseInt(ss[2]);\n        \n            if (x == c) {\n                System.out.println(\"Case #\" + w + \": \" + x * r);\n                continue;\n            }\n        \n            final int m = c % x;\n            final int d = m + x;\n        \n            if (c <= d) {\n                \/\/ \/ FIXME\n                System.out.println(\"Case #\" + w + \": \" + (x + 1) * r);\n                continue;\n            }\n        \n        \n            int q = (c \/ x) - 1;\n            if (m == 0) {\n                q--;\n            }\n        \n            System.out.println(\"Case #\" + w + \": \" + (q + (x + 1)) * r);\n        }\n    }\n\n    long[] mas = new long[41];\n    final Set<Long> qq = new HashSet<Long>();\n\n}"}
{"idx":"754","func":"class A {\n\n    public static void main(String[] args) throws Exception{\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String line = reader.readLine();\n        int caseNum = 1;\n        while((line = reader.readLine()) != null) {\n            String[] parts = line.split(\" \");\n            int R = Integer.parseInt(parts[0]);\n            int C = Integer.parseInt(parts[1]);\n            int W = Integer.parseInt(parts[2]);\n            int result = 0;\n\n            if(W == 1) {\n                result = R*C;\n            } else {\n                for(int i = W; i < C; i += W) {\n                    result += R;\n                }\n                result += W;\n            }\n\n            System.out.println(\"Case #\" + caseNum + \": \" + result);\n            caseNum++;\n        }\n    }\n}"}
{"idx":"755","func":"class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int numOfTests = sc.nextInt();\n\n        for (int i = 1; i < numOfTests + 1; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            int w = sc.nextInt();\n            int val = 0;\n\n            int div = c \/ w;\n            if (c % w != 0) {\n                div++;\n            }\n\n            System.out.println(\"Case #\" + i + \": \" + (r*(div+w-1)));\n\n        }\n    }\n}"}
{"idx":"756","func":"static void main(String[] args)\n    {\n        testCases = new int[sc.nextInt()][3];\n        outputs = new int[testCases.length];\n        \n        for(int i = 0; i < testCases.length; i++)\n        {\n            for(int j = 0; j < 3; j++)\n            {\n                testCases[i][j] = sc.nextInt();\n            }\n        }\n        for(int i = 0; i < testCases.length; i++)\n        {\n            outputs[i] = (((int)(testCases[i][1]\/testCases[i][2])) * testCases[i][0]) + (testCases[i][2]-1) + ((int)Math.ceil((double)testCases[i][1]\/(double)testCases[i][2])-((int)(testCases[i][1]\/testCases[i][2])));\n        }\n        for(int i = 0; i < outputs.length; i++)\n        {\n            System.out.println(\"Case #\" + (i+1) + \": \" + outputs[i] + \"\");\n        }\n    }\n}"}
{"idx":"757","func":"class ProblemA {\n\n    public static void main(String[] args) {\n\n        String INPUT = args[0];\n        int caseNumber = 1;\n        int cases;\n\n        try {\n            Scanner readIn = new Scanner(new File(INPUT));\n            \/\/ Read in the number of cases\n            cases = readIn.nextInt();\n            readIn.nextLine();\n\n            while (caseNumber <= cases) {\n\n                \/\/ Read in the variables\n                int R = readIn.nextInt();\n                int C = readIn.nextInt();\n                int W = readIn.nextInt();\n\n                readIn.nextLine();\n                \/\/ For every row that isn't the answer, we must call\n                \/\/ every wth square in order to\n                \/\/ hit the ship at least once\n                \/\/\n                int result1 = 0;\n                \n                result1 = (R - 1) * (C \/ W);\n                \n                \/\/ Once all the other rows have been searched,\n                \/\/ we must find it in the last row.\n                \n                \/\/\n                result1 += C \/ W + W - 1;\n                \n                if (C % W != 0) {\n                    result1 += 1;\n                }\n\n                \/\/ Solve the problem\n                int result = result1;\n\n                \/\/print result\n                System.out.println(\"Case #\" + caseNumber + \": \" + result);\n                caseNumber++;\n            }\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n}"}
{"idx":"758","func":"class Main {\n\n    public static void main(String[] s1) throws Exception {\n        Main r = new Main();\n        File out = new File(\"output.txt\");\n        Scanner in = new Scanner(new File(\"input.txt\"));\n        PrintStream ostr = new PrintStream(new FileOutputStream(out));\n        int T = in.nextInt();\n        int N = 0;\n        while(N++<T){\n            int r1 = in.nextInt();\n            int c = in.nextInt();\n            int w = in.nextInt();\n            int result = (c\/w)*r1 +w;\n            if (c%w<1)\n                result--;\n            ostr.printf(\"Case #%d: %d%n\", N, result);\n        }\n    }\n\n}"}
{"idx":"759","func":"class Battleship {\n\n    public static void main(String[] args) throws IOException {\n        if (args.length != 1) {\n            System.out.println(\"Usage: java Battleship [inputFile]\");\n            System.exit(0);\n        }\n        String input = args[0];\n        Scanner scanner = new Scanner(new File(input));\n        PrintWriter out = new PrintWriter(input.substring(0, input.length()-3) + \".out\");\n        \n        int numCases = scanner.nextInt();\n        \n        for (int curCase = 1; curCase <= numCases; curCase++) {\n            int R = scanner.nextInt();\n            int C = scanner.nextInt();\n            int W = scanner.nextInt();\n            int score = 0;\n            \n            int numOnRow = C \/ W;\n            if (C % W != 0) {\n                numOnRow++;\n            }\n            score += (R-1) * numOnRow;\n            \n            score += C \/ W + (W-1);\n            if (C % W != 0) {\n                score++;\n            }\n            \n            int minScore = score;\n            \n            out.println(\"Case #\" + curCase + \": \" + minScore);\n        }\n        scanner.close();\n        out.close();\n    }\n}"}
{"idx":"760","func":"class Ships {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n\n        ArrayList<Long> TestCases;\n        \n        TestCases = new ArrayList<Long>();\n        \n        String fileName = \"C:\\\\dev\\\\projects\\\\R3_1Ships\\\\src\\\\Example.txt\";\n        \n        try \n        {\n            InputStream in = new FileInputStream(new File(fileName));\n            Scanner reader = new Scanner(in);\n            \n\n            int cntTests = reader.nextInt();\n            \n            for (int i = 0; i<cntTests; i++) \n            {\n                System.out.println(\"TEST NUMBER \" + i);\n                long R = reader.nextInt();\n                long C = reader.nextInt();\n                long W = reader.nextInt();\n                \n                System.out.println(R+\" \"+C+\" \"+W);\n                \n                long result = 0;\n                \n                result = C \/ W;\n                result = result * R;\n                \n                if (C % W !=0) {\n                    result = result + 1;\n                }\n                \n\n                result = result + ( W - 1); \n                \n                TestCases.add(result);\n                System.out.println(result);\n            \n            }\n            reader.close();\n        } catch (Exception ex)    {\n            ex.printStackTrace();\n        }\n        \n        String outFileName = \"C:\\\\dev\\\\projects\\\\R3_1Ships\\\\src\\\\output.txt\";\n        try { \n        File file = new File(outFileName);\n        BufferedWriter output = new BufferedWriter(new FileWriter(file));\n        for (int i =0; i < TestCases.size(); i++) {\n            output.write(\"Case #\" + (i+1) + \": \" + TestCases.get(i));\n            output.newLine();\n        }\n        \n        output.close();\n        } catch ( Exception e ) {\n            e.printStackTrace();\n        }\n        System.out.println(\"Done\");\n\n    }\n\n\n}"}
{"idx":"761","func":"class Q8 {\n    public static void main(String args[]) throws IOException{\n        String co;\n        String str[];\n        int n,ans,r,c,w;\n        File f = new File(\"C:\\\\file\\\\code jam\\\\q1.txt\");                    \n        FileInputStream fi = new FileInputStream(f) ;\n        BufferedReader br= new BufferedReader(new InputStreamReader(fi));\n        File fa = new File(\"C:\\\\file\\\\code jam\\\\ans1.txt\");\n        FileOutputStream fo = new FileOutputStream(fa) ;\n        BufferedWriter bw= new BufferedWriter(new OutputStreamWriter(fo));\n            n=Integer.parseInt(br.readLine());    \n            for(int i=1;i<=n;i++){\n                str=br.readLine().split(\" \");\n                r=Integer.parseInt(str[0]);\n                c=Integer.parseInt(str[1]);\n                w=Integer.parseInt(str[2]);                \n                float mid=(float)c\/(float)w;\n                \/\/System.out.println(\"\"+mid);\n                mid=(float) Math.ceil(mid);\n                \/\/System.out.println(\"\"+mid);\n                if(w==c){\n                    ans=w;\n                }\n                else {\n                    ans=(int) (mid+w-1);\n                }\n                \n                System.out.println(\"Case #\"+i+\": \"+ans);\n                bw.write(\"Case #\"+i+\": \"+ans);\n                bw.newLine();\n            }            \n            bw.close();        \n        }\n    }"}
{"idx":"762","func":"class ca_2015 {\n\n    public static void main(String[] args) {\n        int x=0,T=0;\n        Scanner s1= new Scanner(System.in);\n        T = s1.nextInt();\n        while(T!=0)\n        {\n            T--;\n            x++;\n            int R = s1.nextInt();\n            int C = s1.nextInt();\n            int W = s1.nextInt();\n            int cal = ((C-1)\/W)+W;\n            if(R != 1)\n                cal += ((R-1)*(C\/W));\n            if(W > C)\n                cal = 0;\n            System.out.println(\"Case #\" + x + \": \" + cal);\n        }\n\n    }\n\n}"}
{"idx":"763","func":"class A {\n    public static void main (String[]args)throws IOException{\n        BufferedReader x=new BufferedReader(new FileReader(\"Alarge.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"Alarge.out\")));\n        int t=Integer.parseInt(x.readLine());\n        int[][]dp=new int[21][21];\n        for (int i=1; i<=20; i++){\n            dp[i][1]=i;\n            dp[i][i]=i;\n            dp[i][i-1]=i;\n        }\n        for (int i=1; i<=20; i++){\n            for (int j=2; j<=i\/2; j++){\n                if (i%j==0){\n                    dp[i][j]=dp[2*j-1][j]+i\/j-2;\n                }else{\n                    dp[i][j]=dp[2*j-1][j]+i\/j-1;\n                }\n            }\n            for (int j=i\/2+1; j<=i; j++){\n                dp[i][j]=dp[2*i-2*j][i-j]+2*j-i;\n            }\n        }\n        for (int cases=1; cases<=t; cases++){\n            StringTokenizer st=new StringTokenizer(x.readLine());\n            int r=Integer.parseInt(st.nextToken());\n            int c=Integer.parseInt(st.nextToken());\n            int w=Integer.parseInt(st.nextToken());\n            out.println(\"Case #\"+cases+\": \"+((r-1)*(c\/w)+dp[c][w]));\n        }\n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"764","func":"class Brattleship\n{\n    public static void main (String[] args) throws IOException\n    {\n        \/\/DecimalFormat df = new DecimalFormat(\"0.0######\");\n        \/\/Scanner scan = new Scanner(System.in);\n        Scanner scan = new Scanner(new File(\"A-large.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"A-large.out\")));\n        int t = scan.nextInt();\n        \n        for (int i=1; i<=t; i++)\n        {\n            int rows = scan.nextInt();\n            int cols = scan.nextInt();\n            int wid = scan.nextInt();\n            int cnt=0;\n            boolean[][] grid = new boolean[rows][cols];\n            for (int r=0; r<rows; r++)\n            {\n                int loc = wid-1;\n                while (loc<cols)\n                {\n                    grid[r][loc] = true;\n                    cnt++;\n                    loc += wid;\n                }\n                if (r==0)\n                {\n                    if (cnt==1)\n                    {\n                        cnt += Math.min(wid, cols-1);\n                    }\n                    else\n                    {\n                        cnt += wid;\n                        if (cols%wid==0)\n                            cnt--;\n                    }\n                }\n            }\n           \n            out.println(\"Case #\" + i + \": \" + cnt);\n        }\n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"765","func":"class ASmall {\n    public static void main(String[] args) throws IOException {\n\n        BufferedReader in = new BufferedReader(new FileReader(\"A-small-attempt1.in\"));\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"A-small-attempt1.out\"));\n        \n        String line = in.readLine();\n        int n = Integer.parseInt(line);\n        for(int i=0; i<n; i++){\n            line = in.readLine();\n            String[] arr = line.split(\" \");\n            int r = Integer.parseInt(arr[0]);\n            int c = Integer.parseInt(arr[1]);\n            int w = Integer.parseInt(arr[2]);\n            long min = 0;\n            \n            for(int x = 0; x < r-1; x++){\n                min = min + (c\/w);\n            }\n            if(c-w == 0){\n                min = min + w;\n            }else if(c-w < w){\n                min = w + 1;\n            }else{\n                min = (long) (min + Math.ceil((double)c\/(double)w));\n                min = min + w - 1;\n            }\n            System.out.println(\"Case #\"+(i+1)+\": \"+min+\"\\n\");\n            writer.write(\"Case #\"+(i+1)+\": \"+min+\"\\n\");\n        }\n        in.close();\n        writer.close();\n    }\n}"}
{"idx":"766","func":"class A2 {\n    public static void main(String[] args) throws IOException {\n        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"A-large.in\"));\n        BufferedReader br = new BufferedReader(new InputStreamReader(bis));\n        PrintWriter out = new PrintWriter(new File(\"A-large.out\"));\n        StringTokenizer st;\n        int cases = Integer.parseInt(br.readLine().trim()), R, C, W;\n        for (int c = 1; c <= cases; c++) {\n            st = new StringTokenizer(br.readLine());\n            R = Integer.parseInt(st.nextToken());\n            C = Integer.parseInt(st.nextToken());\n            W = Integer.parseInt(st.nextToken());\n            int res = (R-1)*(C\/W)+(C\/W+W+(C%W==0?-1:0));\n            out.println(\"Case #\" + c + \": \" + res);\n        }\n        out.close();\n    }\n}"}
{"idx":"767","func":"class ProblemA {\n    public static void main(String[] args) throws FileNotFoundException {\n        FileReader f= new FileReader(\"C:\\\\Users\\\\Ismael\\\\Desktop\\\\inputA.txt\");\n        PrintWriter out =new PrintWriter(\"C:\\\\Users\\\\Ismael\\\\Desktop\\\\outputA.txt\");\n        Scanner in = new Scanner(f);\n        int cant= in.nextInt();\n\n        for (int i = 0; i < cant; i++) {\n            double R= in.nextInt();\n            double C= in.nextInt();\n            double W= in.nextInt();\n            \n            double res=W+Math.ceil((C-W)\/W);\n\n            \n            \n            \n            \n            out.println(\"Case #\"+(i+1)+\": \"+(int)res);\n        }\n            \n            \n        \n        in.close();\n        out.close();\n    }\n\n}"}
{"idx":"768","func":"class Brattleship {\n\n    private static final String INPUT_FILE_NAME = \"\/home\/wlq\/workspace\/leetcode\/src\/codejam\/A-large.in\";\n\n    public static void main(String[] args) throws IOException {\n        File file = new File(INPUT_FILE_NAME);\n        InputStreamReader in = null;\n        StringBuffer pzFile = new StringBuffer();\n        in = new InputStreamReader(new FileInputStream(file));\n        BufferedReader buffer = new BufferedReader(in);\n        String line = null;\n        int testCaseNumber = 0;\n        int testCaseIndex=1;\n        boolean isFirstLine = true;\n        while ((line = buffer.readLine()) != null) {\n            if (isFirstLine) {\n                testCaseNumber = Integer.valueOf(line.trim());\n                isFirstLine = false;\n                continue;\n            }\n            String[] tempString = line.split(\" \");\n            int r = Integer.valueOf(tempString[0].trim());\n            int c = Integer.valueOf(tempString[1].trim());\n            int w = Integer.valueOf(tempString[2].trim());\n\n            int result = 0;\n\n            result = c \/ w;\n            result = result * r;\n            if (c % w == 0) {\n                result += w - 1;\n            } else {\n                result += w;\n            }\n\n            \/\/ begin to handle\n\n            \/\/ System.out.println(\"Case #\" + testCaseIndex + \": \" + additionalClap);\n            File outFile = new File(INPUT_FILE_NAME + \".out\");\n            if (!outFile.exists()) {\n                try {\n                    outFile.createNewFile();\n                } catch (IOException e) {\n                    \/\/ TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            }\n            FileWriter fileWritter = null;\n            try {\n                fileWritter = new FileWriter(outFile, true);\n                BufferedWriter bufferWritter = new BufferedWriter(fileWritter);\n                bufferWritter.append(\"Case #\" + testCaseIndex + \": \" + result + \"\\n\");\n                bufferWritter.flush();\n                fileWritter.flush();\n                bufferWritter.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            testCaseIndex++;\n\n        }\n\n    }\n\n}"}
{"idx":"769","func":"class Battleship {\n\n    static int T;\n;\n    \n    public static void main(String[] args) {\n        Scanner scan;\n\n        int R,C,W;\n        int[] dp;\n        int[] misses;\n        try {\n            FileWriter fstream = new FileWriter(\"out.txt\");\n            BufferedWriter out = new BufferedWriter(fstream);\n            scan = new Scanner(new File(\"input.txt\"));\n            \n            T = scan.nextInt();\n            \n            for (int t=0; t<T; t++) {\n                \n                R = scan.nextInt();\n                C = scan.nextInt();\n                W = scan.nextInt();\n                dp = new int[C+1];\n                misses = new int[C+1];\n                for (int i=0; i<W; i++) {\n                    dp[i] = Integer.MIN_VALUE;\n                    misses[i] = 0;\n                }\n                \n                dp[W] = W;\n                misses[W] = 1;\n                for (int i=W+1; i<=C; i++){\n                    misses[i] = (i\/W);\n                    int min = Integer.MAX_VALUE;\n                    for (int j=1; j<=i; j++){\n                        int temp = Math.max(misses[j-1]+ dp[i-j], misses[i-j] + dp[j-1]);\n                        if (temp != Integer.MIN_VALUE) {\n                            min = Math.min(min, temp+1);\n                        }\n                        \n\n                    }\n                    int hit = W+1;\n                    if (W == 1) hit = 1;\n                    dp[i] = Math.max(min, hit);\n                }\n                \n                int result = dp[C] + (R-1)*(C\/W);\n                out.write(\"Case #\" + (t+1) + \": \" + result + \"\\n\");\n                out.flush();\n            }\n            \n\n        } catch (Exception e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"770","func":"class Jam2015_1CA {\n    public static void main(String[] args) {\n        Scanner    scanIn    = new Scanner(System.in);\n        \n        int T    = scanIn.nextInt();\n        \n        for(int i=0; i<T; ++i) {\n            Jam2015_1CA    inst    = new Jam2015_1CA();\n            int        r    = scanIn.nextInt();\n            int        c    = scanIn.nextInt();\n            int        w    = scanIn.nextInt();\n            int    total    = r*c;\n            int    ret1        = 0;\n            \n            \/\/    scan\n            ret1    = r*(c\/w);\n            \n            if(c % w == 0) {\n                ret1    += w-1;\n            } else if( w == 1) {\n            } else {\n                ret1    += w;\n            }\n            \n            int    ret    = ret1;\n            \n            System.out.println(\"Case #\" + (i+1) + \": \" + ret);\n        }\n        \n        scanIn.close();\n    }\n}"}
{"idx":"771","func":"class Main {\n    private static StreamTokenizer in;\n    private static Scanner ins;\n    private static PrintWriter out;\n\n    public static void main(String[] args) {\n\n        try {\n            in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n            ins = new Scanner(System.in);\n            out = new PrintWriter(System.out);\n            try {\n                if (System.getProperty(\"xDx\") != null) {\n                    in = new StreamTokenizer(new BufferedReader(new FileReader(\"input.txt\")));\n                    ins = new Scanner(new FileReader(\"input.txt\"));\n                    out = new PrintWriter(new FileWriter(\"output.txt\"));\n                }\n            } catch (Exception e) {\n                in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n                ins = new Scanner(System.in);\n                out = new PrintWriter(System.out);\n            }\n            Main r = new Main();\n            Main.in.nextToken();\n            int T = (int) Main.in.nval;\n            for (int i = 0; i < T; i++) {\n                int r1 = r.nextInt(), c = r.nextInt(), w = r.nextInt();\n                int answ = (c \/ w) * r1;\n                answ += (c % w > 0 ? w : w - 1);\n                Main.out.printf(\"Case #%d: %d\\n\", i + 1, answ);\n            }\n            out.close();\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    private int nextInt() throws IOException {\n        in.nextToken();\n        return (int) in.nval;\n    }\n\n}"}
{"idx":"772","func":"class SolutionA {\n    static Scanner scanner = new Scanner (System.in);\n    static PrintStream out = System.out;\n\n    public static void main(String[] args) {\n        long T = Long.valueOf(scanner.next());\n\n        for (long i = 1; i <= T; ++i) {\n            System.out.print(\"Case #\" + i + \": \");\n            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();\n            \n            long ans = (R - 1) * C;\n            \n            if (C % W == 0) {\n                out.println (ans + C\/W - 1 + W);\n            } else {\n                out.println (ans + C\/W + W);\n            }\n        }\n\n    }\n}"}
{"idx":"773","func":"static void main(String [] abb){\n        try{\n            Scanner in = new Scanner(new File(\"safia.in\"));\n            PrintWriter writer = new PrintWriter(\"out2.in\", \"UTF-8\");\n            \n            int testcase = in.nextInt();\n            \n            for(int q=0;q<testcase;q++){\n                int r= in.nextInt();\n                int c = in.nextInt();\n                int w = in.nextInt();\n                int e= c%w;\n                int out=0;\n                \/\/if(e==w-1)\n                 out =(c\/w)+w;\n                \n                \/\/System.out.println(out+\" \"+e);\n                \/\/if(c\/)\n                if(w==1){\n                    out =c;\n                    \n                }else{\n                out =(c\/w)+w;\n                if(c%w==0){\n                    out--;\n                }\n                }\n                \n                writer.println(\"Case #\"+(q+1)+\": \"+out);\n                \n            }\n            \n            \n            \n            \n            writer.close();\n        }catch(IOException e){\n            \n            }\n    }\n}"}
{"idx":"774","func":"class Main{\n    public static void main(String [] args)throws IOException{\n    BufferedReader readTxt=new BufferedReader(new FileReader(new File(\"A-large.in\")));\n    String textLine=\"\";\n    String str=\"\";\n     while(( textLine=readTxt.readLine())!=null){\n            str+=textLine+\" \";\n      }\n    String[] strArray=str.split(\" \");\n    int [] numberArray=new int[strArray.length];\n    for(int i=0;i<strArray.length;i++){\n        numberArray[i]=Integer.valueOf(strArray[i]);\n    }\n    int num= numberArray[0];\n    int [] sum=new int[num+1];\n    for(int i=1;i<=num;i++){\n        int r=numberArray[(i-1)*3+1];\n        int c=numberArray[(i-1)*3+2];\n        int w=numberArray[(i-1)*3+3];\n        if(c%w!=0){\n            sum[i]=r*(c\/w)+w;\n        }\n        else sum[i]=r*(c\/w)+w-1;\n    }\n    FileWriter fw = new FileWriter(\"output.txt\");  \n    BufferedWriter bufw = new BufferedWriter(fw);  \n       \/\/ String line = null;  \n        for(int i=1;i<=num;i++){  \n            bufw.write(\"Case #\"+i+\": \"+sum[i]);  \n            bufw.newLine();  \n            bufw.flush();  \n        }  \n    bufw.close();   \n\n}      \n}"}
{"idx":"775","func":"class CaseE {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        int T,R,C,W,i,j,k;\n        Scanner sca = new Scanner(System.in);\n        T =  Integer.parseInt(sca.next());\n        int ans[] = new int[T];\n        for (i=0;i<T;i++){\n            R =  Integer.parseInt(sca.next());\n            C = Integer.parseInt(sca.next());\n            W = Integer.parseInt(sca.next());\n            if (W==1) {\n                ans[i]=R*C;\n            }\n            else {\n            if (C%W==0) ans[i] = R*(C\/W)+W-1;\n            else { ans[i]= (int) (R*Math.floor(C\/W)+W);}\n\n            }\n        }\n        for (i=0;i<T;i++){\n            System.out.println(\"Case #\"+(i+1)+\": \"+ans[i]);\n        }\n        \n    }\n\n}"}
{"idx":"776","func":"class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt();\n\n        for (int caseNum = 1;  caseNum <= t; caseNum++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            int w = sc.nextInt();\n\n            int tries;\n            if (c % w == 0) {\n                tries = (r * (c \/ w)) + (w - 1);\n            }\n            else {\n                tries = (r * (c \/ w)) + w;\n            }\n            System.out.printf(\"Case #%d: %d\\n\", caseNum, tries);\n        }\n    }\n}"}
{"idx":"777","func":"class Q1 {\n    public static void main(String... args) {\n        @SuppressWarnings(\"resource\")\n        Scanner in = new Scanner(System.in);\n        int caseCount = in.nextInt();\n        for (int caseValue = 1; caseValue <= caseCount; caseValue++) {\n            int R = in.nextInt();\n            int C = in.nextInt();\n            int W = in.nextInt();\n            int result = 0;\n            int eliminateR = R - 1;\n            if (eliminateR > 0) {\n                result += eliminateR * (\n                        \/\/ C = 1 .. 2W-1, 1\n                        \/\/   = 2W .. 3W-1, 2\n                        Math.max(1, C \/ W)\n                        );\n            }\n            int c = C;\n            while (c > 2 * W - 1) {\n                result++;\n                c -= W;\n            }\n            \/\/ assert(c <= 2 * W - 1 && c >= W);\n            if (c == W) {\n                result += W; \/\/ W>=1\n            } else if (c == W + 1){ \/\/ W>=2\n                result += W + 1;\n                \/\/ xWx\n                \/\/ ?w\n            } else if (c == W + 2) { \/\/ W>=3\n                result += W + 1;\n                \/\/ xxWxx\n                \/\/ _?w\n            } else if (c == W + 3) { \/\/ W>=4\n                result += W + 1;\n            } else {\n                result += W + 1;\n            }\n            System.out.println(\"Case #\" + caseValue + \": \" + result);\n        }\n    }\n}"}
{"idx":"778","func":"class A {\n\n    public static void main(String args[]) throws FileNotFoundException {\n        final String defaultFile = A.class.getName()+\".in\";\n        final PrintStream out;\n        final InputStream in;\n        if (args.length==0) {\n            in = new FileInputStream(\"test\/\"+defaultFile);\n            out =System.out;\n\n        } else {\n            in = new FileInputStream(\"resources\/\"+args[0]);\n            out = new PrintStream(new FileOutputStream(\"result\/\"+args[0]));\n        }\n        Scanner scanner = new Scanner(in);\n        int nbTest = scanner.nextInt();\n        for (int i=0;i<nbTest;i++) {\n            scanner.nextLine();\n            Long W = scanner.nextLong();\n            Object res = ((long)Math.ceil((double)scanner.nextLong()\/(double)W))+(W-1);\n            out.println(\"Case #\"+(i+1)+\": \"+res);\n        }\n\n    }\n\n\n}"}
{"idx":"779","func":"static void main(String[] args) throws Exception {\n        int T = Integer.parseInt(NL());\n        for (int ii = 1; ii <= T; ii++) {\n            NL();\n            int R, C, W;\n            R = Integer.parseInt(NT());\n            C = Integer.parseInt(NT());\n            W = Integer.parseInt(NT());\n            print(ii, solve(R, C, W));\n        }\n    }\n\n    private static void print(int ii, int sol) {\n        System.out.printf(\"Case #%d: %d%n\", ii, sol);\n    }\n\n    private static int solve(int R, int C, int W) {\n        int res = (R-1) * singleRow(C, W);\n        return res + simple(C, W);\n    }\n\n    private static int simple(int C, int W) {\n        if (C == W) return C;\n        return (C >= 2 * W) ? 1 + simple(C - W, W) : W+1;\n    }\n\n    private static int singleRow(int C, int W) {\n        return C > W ? 1 + singleRow(C - W, W) : 1;\n    }\n    \n}"}
{"idx":"780","func":"class A{\n    \n    static int t,r,c,w,a;\n    static String line,str;\n    static String[] row;\n    static boolean debug = false;\n    \n    public static void main(String [ ] args) throws IOException{\n        int i,j,k;\n        \n        \n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n        try {\n            File file = new File(\"aaa.out\");\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n            \n            FileWriter fw = new FileWriter(file.getAbsoluteFile());\n            BufferedWriter bw = new BufferedWriter(fw);\n            \n            line = br.readLine();\n            t = Integer.valueOf(line); \/\/1 <= T <= 100.\n\n            \n            for(i = 0; i < t; i++){\n                \n                line = br.readLine();\n                row = line.split(\"\\\\s\");\n                r = Integer.valueOf(row[0]);\n                c = Integer.valueOf(row[1]);\n                w = Integer.valueOf(row[2]);\n                \n                \/\/1 <= n <= 10^6.\n                debug = false;\n                a=0;\n                \n                if (r == 1 && c==w) {\n                    a=w;\n                } else if (w==1) {\n                    a=r*c;\n                } else { \/\/ c>=w>1\n                    j = c%w; \/\/>=0\n                    k = c\/w; \/\/>=1\n                    if(j==0){\n                        a = k*(r-1)+k + w-1;\n                    } else {\n                        a = k*(r-1)+k + w;\n                    }\n                }\n                \n                if(debug) System.out.println(\"-------\");\n                bw.write(\"Case #\"+(i+1)+\": \"+a+\"\\n\");\n            }\n            \n            bw.close();\n\n        } finally {\n            br.close();\n        }\n    }\n}"}
{"idx":"781","func":"class Main\n{\npublic static void main(String[] args)throws java.lang.Exception\n{\nBufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\nPrintWriter out=new PrintWriter(\"output.txt\");\nint t,x1,r,c,w,val,res;\n\nt=Integer.parseInt(in.readLine());\n \n \nfor(x1=0;x1<t;x1++)\n{\nStringTokenizer st1=new StringTokenizer(in.readLine());\n\nr=Integer.parseInt(st1.nextToken());\nc=Integer.parseInt(st1.nextToken());\nw=Integer.parseInt(st1.nextToken());\n\n\nval=c\/w;\nres=r*val;\nres+=(w-1);\n\nif(c%w!=0)\n    res+=1;\n\n\nif(w==1)\n    res=r*c;\n\nout.println(\"Case #\"+(x1+1)+\": \"+res);\n\n\n}\n\nout.flush();\nout.close();\n}\n}"}
{"idx":"782","func":"class A {\n    private static final String inFile = \"A-small-attempt0 (1).in\";\n    private static final String outFile = \"A-out.txt\";\n\n    public static void main(String args[]) throws IOException {\n        Scanner scanner = new Scanner(new FileReader(inFile));\n        int T = scanner.nextInt();\n        FileWriter fw = new FileWriter(outFile);\n\n        for (int t = 1; t <= T; ++t) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            int w = scanner.nextInt();\n            fw.write(String.format(\"Case #%d: %s\\n\", t, solve(r, c, w)));\n        }\n        fw.close();\n    }\n\n    private static int solve(int r, int c, int w) {\n        int res = ((c - 1) \/ w + 1) * (r - 1) + w + (c - 1) \/ w;\n        return res;\n    }\n}"}
{"idx":"783","func":"class p1 \n{\n  public static void main (String[]args)throws IOException\n  {\n    Scanner s=new Scanner (new File(\"A-small-attempt1.in\"));\n    \/\/Scanner s=new Scanner (new File(\"in.txt\"));\n    PrintWriter out=new PrintWriter(new FileWriter(\"out.txt\"));\n    \/\/Scanner s=new Scanner (new File(\"in.txt\"));\n    int ans=0;\n    int cases=s.nextInt();\n    for (int tt=0;tt<cases;tt++)\n    {\n      ans=0;\n      int r=s.nextInt();\n      int c=s.nextInt();\n      int w=s.nextInt();\n      ans=c\/w-1;\n      int extra=c%w;\n      ans+=(w);\n      if (extra!=0)\n        ans+=1;\n      ans*=r;\n      \n      out.println (\"Case #\"+(tt+1)+\": \"+ans);\n      System.out.println (\"Case: #\"+(tt+1)+\": \"+ans);\n    }\n    out.close();\n  }\n}"}
{"idx":"784","func":"class A {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        \n        final int noTests = in.nextInt();\n        in.nextLine();\n        \n        for(int test=1; test<=noTests; test++) {\n            int R = in.nextInt();\n            int C = in.nextInt();\n            int W = in.nextInt();\n            \n            int hits = (R * (C\/W)) + W - 1;\n            \n            if(C % W != 0)\n                hits++;\n            \n            System.out.printf(\"Case #%d: %d%n\", test, hits);\n        }\n    }\n}"}
{"idx":"785","func":"abstract class Main1C_A {\n    \n    private static final String IN_NAME = \"A-large\";\n\n    public static void main(String[] args) throws Exception {\n        \/\/ Open input and output files. (stdin and stdout are not used because\n        \/\/ of the lack of support for using a file as stdin in Eclipse.)\n        InputStream inStream = new FileInputStream(\n            String.format(\"input\/%s.in\", IN_NAME));\n        OutputStream outStream = new FileOutputStream(\n            String.format(\"output\/%s-out.txt\", IN_NAME));\n        \n        Scanner in = new Scanner(new BufferedInputStream(inStream));\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(outStream));\n        \n        int numCases = in.nextInt();\n        for (int caseIdx = 1; caseIdx <= numCases; caseIdx++) {\n            \n            \/\/ Read the test case.\n            int height = in.nextInt();\n            int width = in.nextInt();\n            int boatWidth = in.nextInt();\n            int result1 = 0;\n                    \n                    int toRemoveRow = width \/ boatWidth;\n                    \n                    \/\/ Narrow down possibilities to a single row.\n                    result1 += (height - 1) * toRemoveRow;\n                    \n                    \/\/ Narrow down possibilities to the right 2 * boatWidth positions.\n                    \/\/ TODO: Probably could do this without having to loop.\n                    int remaining = width;\n                    while (remaining >= 2 * boatWidth) {\n                        remaining -= boatWidth;\n                        result1++;\n                    }\n            \/\/        int remaining = width;\n            \/\/        if (width >= 2 * boatWidth) {\n            \/\/            int numHits = (int) Math.ceil(\n            \/\/                (width - (2 * boatWidth - 1)) \/ (double) boatWidth);\n            \/\/            int numHits = (width \/ (double) boatWidth) - 2;\n            \/\/            result += numHits;\n            \/\/            remaining = width - (numHits * boatWidth);\n            \/\/        }\n                    \n                    \/\/ Now find the boat.\n                    result1 += boatWidth;\n                    if (remaining != boatWidth) {\n                        result1++;\n                    }\n            \n            \/\/ Solve this test case;\n            int result = result1;\n            \n            \/\/ Print the result.\n            String resultStr = String.format(\"%s\", result);\n            String fullResultStr = String.format(\"Case #%s: %s\", caseIdx,\n                resultStr);\n            out.println(fullResultStr);\n            System.out.println(fullResultStr);\n        }\n        \n        in.close();\n        out.close();\n    }\n}"}
{"idx":"786","func":"class Sample {    \n    \n    public static final String INPUT_FILE = \"A-large.in\";\n    public static final String OUTPUT_FILE = \"output_A-large.txt\";\n    \n    public static final String CASE_STRING_BEFORE = \"Case #\";\n    public static final String CASE_STRING_AFTER = \": \";\n    \n    Scanner scanner = null;\n    File outputFile;\n    PrintStream pout = null;\n    int totalTests;\n    int testNo;\n    \/\/DecimalFormat formatter = new DecimalFormat(\"#0.0000000\");\n    \n    \/\/ArrayList<Integer> plates = null;\n    int row;\n    int col;\n    int width;\n    int turn;\n    \n    public static void main(String argv[]){\n        \n        Sample cards = new Sample();\n        try {\n            cards.scanner = new Scanner(new File(Sample.INPUT_FILE));\n            cards.outputFile = new File(Sample.OUTPUT_FILE);\n            \n            if(cards.outputFile.exists()){\n                cards.outputFile.delete();\n            }\n            \n            cards.outputFile.createNewFile();\n            \n            cards.pout = new PrintStream(cards.outputFile);\n            \n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        cards.totalTests = cards.scanner.nextInt();\n        \n        for(int i=1;i<=cards.totalTests;i++){\n            cards.testNo = i;\n            \/\/plates = new ArrayList<Integer>();\n            cards.row = 0;\n            cards.col = 0;\n            cards.width = 0;\n            cards.turn = 0;\n            cards.row = cards.scanner.nextInt();\n            cards.col = cards.scanner.nextInt();\n            cards.width = cards.scanner.nextInt();\n            cards.turn = cards.col\/cards.width;\n            cards.turn += (cards.width-1);\n            \n            if(cards.col%cards.width == 0){\n                \/\/ no action required\n            }else{\n                cards.turn++;\n            }\n            if(cards.row>1){\n                cards.row--;\n                int misses = cards.col\/cards.width;\n                int missTurns = misses * cards.row;\n                cards.turn += missTurns;\n            }\n            \n            \n            \n            cards.pout.print(Sample.CASE_STRING_BEFORE + cards.testNo + Sample.CASE_STRING_AFTER);\n            \n            cards.pout.println(\"\"+cards.turn);\n        }\n        \n        cards.scanner.close();\n        cards.pout.flush();\n        cards.pout.close();\n        \n    }\n    \n    \n    \n\/\/    public class IntegerComparator implements Comparator<Integer> {\n\/\/\n\/\/        @Override\n\/\/        public int compare(Integer o1, Integer o2) {\n\/\/            return o2.compareTo(o1);\n\/\/        }\n\/\/    }\n\n}"}
{"idx":"787","func":"class Battleship {\n    \n    public static void main( String[] args ) throws Exception {\n            BufferedReader in = new BufferedReader(new FileReader(\"in.txt\"));\n            BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\n            String line = in.readLine();\n            int t = new Integer(line);\n            \n            \n            for (int caseNum=1; caseNum<=t; caseNum++) {\n                line = in.readLine();\n                String[] sa = line.split(\" \");\n                int r = new Integer(sa[0]);\n                int c = new Integer(sa[1]);\n                int w = new Integer(sa[2]);\n                \n                int answer = ((c\/w)+(Math.min(c%w, 1)))+w-1;\n                \n                if (c\/w == 1) answer= Math.min(c, w+1);\n                \n                if (r>1) answer+=(c\/w)*(r-1);\n\n                \n                out.write(\"Case #\"+caseNum+\": \"+answer+\"\\n\");\n\n            }\n            \n            \n            in.close();\n            out.flush();\n            out.close();\n\n        }\n\n\n\n}"}
{"idx":"788","func":"class CJ2015Round1CA {\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\n        \/\/BufferedReader in = new BufferedReader(new FileReader(\"temp.txt\"));\n        PrintWriter out  = new PrintWriter(new File(\"2015Round1CAout.txt\"));\n        int T = Integer.parseInt(in.readLine());\n        for(int a = 1; a < T+1; a++){\n            String[] nums = in.readLine().split(\" \");\n            int R = Integer.parseInt(nums[0]);\n            int C = Integer.parseInt(nums[1]);\n            int W = Integer.parseInt(nums[2]);\n            int rowguess = (C-W)\/W;\n            int ret = rowguess*R+R-1;\n            ret +=W;\n            if (C%W!=0){\n                ret++;\n            }\n            System.out.println(\"Case #\"+a+\": \"+ret);\n            out.println(\"Case #\"+a+\": \"+ret);\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"789","func":"class test {\n\n    private static int T;\n    private static long oo=Long.MAX_VALUE;\n    private static long base=1000000007;\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(new FileInputStream(\"test.txt\"));\n        PrintWriter out = new PrintWriter(new FileOutputStream(\"output.txt\"));\n        int T=in.nextInt();\n        for (int test = 0; test < T; test++) {\n            int res=0;\n            int r=in.nextInt();\n            int c=in.nextInt();\n            int w = in.nextInt();\n            int resi;\n            if (c%w==0) resi=c\/w+w-1;\n            else resi=c\/w+w;\n            int resno=c\/w;\n            res=resno*(r-1)+resi;\n            out.println(\"Case #\"+(test+1)+\": \"+res);\n        }\n        out.close();\n    }\n\n}"}
{"idx":"790","func":"class s {\n    public static void main(String[] args) throws IOException {\n        FileInputStream in = new FileInputStream(\n                \"D:\/works\/java\/G1A\/bin\/A-large (2).in\");\n        Scanner s = new Scanner(in);\n        PrintWriter out = new PrintWriter(new FileWriter(\n                \"D:\/works\/java\/G1A\/bin\/Abig.out\"));\n\n        int n = Integer.parseInt(s.next());\n        for (int i = 1; i <= n; i++) {\n            int r = s.nextInt(), c = s.nextInt(), w = s.nextInt(), j = -1, count = 0;\n            int a[] = new int[c];\n            if (w == 1) {\n                System.out.println(\"Case #\" + i + \": \" + c * r);\n                out.println(\"Case #\" + i + \": \" + c * r);\n\n            } else {\n                j += w;\n                while (j < c) {\n                    a[j] = 1;\n                    System.out.print(j + \" \");\n                    j += w;\n                    count++;\n                }j-=w;\n                count*=r;\n                if (c - j - 1 > 0) {\n                    count++;System.out.print(1);\n                }\n                System.out.println(w - 1);\n                count += w - 1;\n                System.out.println(\"Case #\" + i + \": \" + count);\n                out.println(\"Case #\" + i + \": \" + count);\n\n            }\n        }\n        out.close();\n\n    }\n}"}
{"idx":"791","func":"class Solution {\n    \n    \n    \n    public static void main(String[] args) throws IOException, FileNotFoundException {\n        \/\/Read, NOTICE: nextInt() does not advance but nextLine() do!\n        Scanner in=new Scanner(new FileReader(\"A-large (2).in\"));\n        \/\/Scanner in=new Scanner(System.in);\n        \/\/Write\n        FileWriter fw=new FileWriter(\"outputTest.txt\");\n        BufferedWriter bw=new BufferedWriter(fw);\n        \n        int T=in.nextInt();\n       for (int t=0;t<T;t++){\n           int R=in.nextInt();\n           int C=in.nextInt();\n           int W=in.nextInt();\n           \n           int discoverCost=C\/W;\n           \n           int lastChange=C%W;\n           \n           int output=(lastChange==0?0:1)+discoverCost*R+W-1;\n           \n           bw.write(\"Case #\"+(t+1)+\": \"+output+\"\\n\");\n           \n       }\n        \n        \/\/bw.write(\"Case #\"+(t+1)+\": \"+output+\"\\n\");\n            \n            \n        \n        \n        \n            \/\/System.out.println();\n            \/\/bw.write(\"Case #\"+(t+1)+\":\"+\"\\n\");\n    \n        \n            \n        \n        \n        \n            \n            \n        \n        \n        \/\/test Write part\n        \/\/bw.write(\"asd is art\\n\");\n        \/\/bw.write(\"hahaha\");\n        \n        \n        \/\/epilogue\n        bw.close();\n        \n        }\n    \n\n}"}
{"idx":"792","func":"class A {\n    \n    public static void main(String[] args) throws IOException{\n        \n        File fileIn = new File(\"FILEIN.in\");\n        PrintWriter writer = new PrintWriter(\"FILEOUT.txt\", \"UTF-8\");\n        Scanner in = new Scanner(fileIn);\n        int numCases = in.nextInt();\n        \n        for(int i = 0; i < numCases; i++){\n            writer.printf(\"Case #%d: \", i+1);\n            \/\/writer.printf(\"Case #%d:\\r\\n\", i+1);\n            \n            \/\/BEGIN CODE HERE\n            int R = in.nextInt(); \/\/NUM OF GAMES\n            int C = in.nextInt(); \/\/LENGTH OF EACH GAME\n            int W = in.nextInt(); \/\/LENGTH OF SHIP\n            \n            int min = (R) * (C \/ W);\n            if(W < C && W > 1 && (C % W != 0) && (C != W)) min += 1;\n            min += W - 1;\n            writer.println(min);\n            \/\/END CODE HERE\n            \n        }\n        System.out.println(\"DONE\");\n        in.close();\n        writer.close();\n    }\n}"}
{"idx":"793","func":"class A {\n\n    Scanner             sc       = new Scanner(getClass().getResourceAsStream(IN));\n    static final String FILENAME = \"A-small\";\n    static final String IN       = FILENAME + \".in\";\n    static final String OUT      = FILENAME + \".out\";\n    PrintStream         out      = System.out;\n\n    public static void main(String args[]) throws Exception {\n        A r = new A();\n        int t = r.sc.nextInt();\n        for (int i = 1; i <= t; i++) {\n            r.out.print(\"Case #\" + i + \": \");\n            int ans = 0;\n            int R = r.sc.nextInt();\n            int C = r.sc.nextInt();\n            int W = r.sc.nextInt();\n            \n            ans += R * ((C - 1)\/W);\n            ans += R * W;\n            \n            r.out.println(ans);\n        }\n        r.sc.close();\n        r.out.close();\n    }\n}"}
{"idx":"794","func":"class Task1 {\n    public static void main(String[] args) throws FileNotFoundException {\n        File file = new File(\"D:\/Development\/Competitions\/GoogleCodeJam\/GoogleCodeJam2015\/data\/Round1C\/A-large.in\");\n        PrintStream out = new PrintStream(new FileOutputStream(\"D:\/Development\/Competitions\/GoogleCodeJam\/GoogleCodeJam2015\/data\/Round1C\/A-large.out\"));\n        System.setOut(out);\n        Scanner sc = new Scanner(file);\n        \/\/Scanner sc = new Scanner(System.in);\n        \n        int T = sc.nextInt();\n        int[] result = new int[T];\n        \n        for (int i = 0; i < T; ++i)\n        {\n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            int W = sc.nextInt();\n            \n            int numberOfTotalMisses = (C \/ W) - 1;\n            result[i] = numberOfTotalMisses + W;\n            if (C % W != 0)\n                result[i]++;\n            result[i] += (R - 1) * (C \/ W);\n        }\n        sc.close();\n        \n        for (int i = 0; i < T; ++i)\n            System.out.printf(\"Case #%d: %d\\n\", i + 1, result[i]);\n    }\n}\n\n\n\/*\nProblem\n\n\n*\/"}
{"idx":"795","func":"class Solution {\n\n    public static void main(String[] args) throws Exception {\n        Solution r = new Solution();\n        Scanner sc = new Scanner(new FileReader(\"input.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n        \n        int caseCnt = sc.nextInt();\n        \n        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {\n            pw.print(\"Case #\" + (caseNum + 1) + \": \");\n        \n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            int W = sc.nextInt();\n        \n            int rawChecks = C \/ W;\n        \n            int res = (R - 1) * rawChecks;\n            if (C % W == 0) {\n                res += rawChecks + W - 1;\n            } else {\n                res += rawChecks + W;\n            }\n        \n            pw.println(res);\n        \n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"796","func":"class Solver {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(\"input.in\"));\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.out\"));\n\n        int t = Integer.parseInt(reader.readLine());\n\n        for (int c = 1; c <= t; ++c) {\n            int result = 0;\n            \n            String[] values = reader.readLine().split(\" \");\n            int rows = Integer.parseInt(values [0]);\n            int cows = Integer.parseInt(values[1]);\n            int w = Integer.parseInt(values[2]);\n            \n            int perRow = cows \/ w;\n            result = perRow * rows;\n            \n            int currentCow = (cows \/ w) * w;\n            if (currentCow == cows) {\n                result += (w - 1);\n            } else {\n                result += w;\n            }\n            \n            \n            System.out.println(\"Case #\" + c + \": \" + result);\n            writer.write(\"Case #\" + c + \": \" + result);\n            writer.newLine();    \n        }\n        \n        writer.flush();\n        writer.close();\n        reader.close();\n    }\n\n}"}
{"idx":"797","func":"class c1 {\n\n    \/**\n     * @param args\n     * @throws IOException \n     *\/\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(new FileReader(\"input\"));\n        PrintWriter out = new PrintWriter(new FileWriter(\"output\"));\n        \n        int cases = in.nextInt();\n        for (int a=0; a<cases; a++) {\n            int rows = in.nextInt();\n            int cols = in.nextInt();\n            int width = in.nextInt();\n            \n            int tries = cols \/ width;\n            tries = tries * rows;\n            tries--;\n        \n            tries = tries+width;\n            if (cols % width != 0) {\n                tries++;\n            }\n            out.print(\"Case #\" + (a+1) + \": \" + tries + \"\\n\");\n            \n        }\n        \n        \/\/ template output:\n        \/\/ out.print(\"Case #\" + (a+1) + \": \" + time + \"\\n\");\n        \n        out.close();\n\n    }\n\n}"}
{"idx":"798","func":"class question1 {\n\n    \n    public static void main(String[] args) throws FileNotFoundException, IOException {    \n        String file = \"small1.in\";\n        \n        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n            String line;\n            Integer N = Integer.parseInt(br.readLine());\n            for (int n = 0; n < N; n++) {\n                String[] RCW = br.readLine().split(\" \");\n                Integer R = Integer.parseInt(RCW[0]);\n                Integer C = Integer.parseInt(RCW[1]);\n                Integer W = Integer.parseInt(RCW[2]);\n                \n                int guess_per_row = C \/ W;\n                \n                int last = ((C \/ W) + W - 1) + ((R-1) * guess_per_row);\n                \n                if (C%W != 0) last += 1;\n\n                System.out.println(\"Case #\" + (n+1) + \": \" + last);    \n\n            }\n        }\n        \n\n    }\n    \n    \/*\n    public int brute_force(int C, int[] moves) {\n        int max = 0;\n        for (int i = 0; i < C; i++) {\n            if (moves[i] == 0) { \n                int[] temp = Arrays.copyOf(moves, C);\n                temp[i] = 1;\n                int hit = \n            }\n                int minmax = brute_force(moves)\n        }\n    }*\/\n    \n    \n}"}
{"idx":"799","func":"class Main {\n\n    public static void main(String[] args) {\n        Scanner in = null;\n        PrintWriter out = null;\n        try {\n            \/\/these variables handle input and output from plain text files\n            in = new Scanner(new FileReader(\"input.in\"));\n            out = new PrintWriter(\"output.txt\");\n\n            int cases = in.nextInt();\n            for (int caseIndex = 1; caseIndex <= cases ; caseIndex++) {\n\n                int r = in.nextInt();\n                int c = in.nextInt();\n                int w= in.nextInt();\n                int result = (c \/ w) * r + (w-1);\n                if(c%w!=0){\n                    result++;\n                }\n                out.printf(\"Case #%d: %d\\n\",caseIndex,result);\n                out.flush();\n\n\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (in != null)\n                in.close();\n            if (out != null)\n                out.close();\n        }\n    }\n}"}
{"idx":"800","func":"public class Main {\n\n    public static void main(String[]args) throws NumberFormatException, IOException{\n\/\/        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n         BufferedReader br = new BufferedReader(new FileReader(\"input.in\"));\n         PrintWriter out = new PrintWriter(\"output.txt\");\n        int t = Integer.parseInt(br.readLine());\n        \n        \n        for(int i = 0;i<t;i++){\n            String[]in = br.readLine().split(\" \");\n            \n            int r = Integer.parseInt(in[0]);\n            int c = Integer.parseInt(in[1]);\n            int w = Integer.parseInt(in[2]);\n            out.println(\"Case #\"+(i+1)+\": \"+(int)(Math.ceil((c*1.0\/w)) - 1 + w)*r);\n            \n            \n        }\n        \n        br.close();\n        out.close();\n        \n    }\n\n\n}"}
{"idx":"801","func":"class Brattleship {\n\n    public static void main(String[] args) {\n        Reader r = new InputStreamReader(System.in);\n        BufferedReader b = new BufferedReader(r);\n        try {\n            \/\/ get no. of testcases\n            int testCaseNo = Integer.parseInt(b.readLine());\n            int[] minCount = new int[testCaseNo];\n            int index = 0;\n            while (testCaseNo != 0) {\n                String StrList = b.readLine();\n                String[] splitList = StrList.split(\" \");\n                int n = Integer.parseInt(splitList[0]);\n                int m = Integer.parseInt(splitList[1]);\n                int w = Integer.parseInt(splitList[2]);\n                if( n==1 && m==w){\n                    minCount[index] = w;\n                }else if( w==1){\n                    minCount[index] = n*m;\n                } else {\n                    minCount[index] = (w+((m-w)\/w)+((m-w)%w==0?0:1))+((n-1)*(m-w));\n                }\n                index++;\n                testCaseNo--;\n            }\n\n            for (int k = 0; k < minCount.length; k++) {\n                System.out.println(\"Case #\" + (k + 1) + \": \"\n                        + minCount[k]);\n            }\n\n        } catch (Exception e) {\n            System.out.println(\"invalid inputs !!! \\n\"+ e.getMessage());\n        } \n\n    }\n\n}"}
{"idx":"802","func":"class Brattleship {\n    public static void main(String[] args) {\n        try\n        {\n            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(f.readLine());\n            FileWriter fout = new FileWriter(\"brattleship.out\");\n            for(int i = 1; i <= t; i++)\n            {\n                StringTokenizer st = new StringTokenizer(f.readLine());\n                int r = Integer.parseInt(st.nextToken());\n                int c = Integer.parseInt(st.nextToken());\n                int w = Integer.parseInt(st.nextToken());\n                int[] dp = new int[c+1];\n                dp[w] = w + r - 1;\n                for(int j = w + 1; j <= 2*w - 1; j++)\n                {\n                    if(j > c)\n                        break;\n                    dp[j] = w+1 + r-1;\n                }\n                for(int j = 2*w; j <= c; j++)\n                {\n                    dp[j] = Math.max(dp[j-w] + r, w + 1);\n                }\n                System.out.println(\"Case #\" + i + \": \" + dp[c]);\n                fout.write(\"Case #\" + i + \": \" + dp[c] + \"\\n\");\n            }\n            f.close();\n            fout.close();\n        }\n        catch(IOException e)\n        {\n            System.out.println(e);\n        }\n\n\n    }\n\n}"}
{"idx":"803","func":"class Brattleship {\n\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new FileReader(\"resources\/round1c\/Brattleship\/A-large.in\"));\n        \/\/BufferedReader reader = new BufferedReader(new FileReader(\"resources\/round1c\/Brattleship\/Teste.in\"));\n\n        int quantidadeTeste = Integer.parseInt(reader.readLine());\n        int teste = 1;\n        while (teste <= quantidadeTeste) {\n            String[] currentLine = reader.readLine().split(\" \");\n\n            int rows = Integer.parseInt(currentLine[0]);\n            int columns = Integer.parseInt(currentLine[1]);\n            int shipSize = Integer.parseInt(currentLine[2]);\n\n            int fistHit = columns \/ shipSize * rows;\n\n            int miss = columns % shipSize > 0 ? 1 : 0;\n\n            int plays = fistHit + miss + shipSize - 1;\n            System.out.println(\"Case #\" + teste + \": \" + plays);\n\n            teste++;\n        }\n    }\n\n}"}
{"idx":"804","func":"class Main {\n    final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    final String LINE_SPR = System.getProperty(\"line.separator\");\n    final int BIG_MOD = 1000000007;\n\n    public static void main(String[] args) throws Exception {\n        Main r = new Main();\n        int nt = Integer.parseInt(r.br.readLine().trim());\n        for(int t = 0; t < nt; t++) {\n            String[] nums = r.br.readLine().split(\" \");\n            int r1 = Integer.parseInt(nums[0]);\n            int c = Integer.parseInt(nums[1]);\n            int w = Integer.parseInt(nums[2]);\n        \n            int max = (c \/ w) * (r1 - 1);\n            max += ((c - 1) \/ w) + w;\n            System.out.println(\"Case #\" + (t+1) + \": \" + Integer.toString(max));\n        }\n    }\n}"}
{"idx":"805","func":"class Happy {\n\n    public static void main(String[] args) {\n        Happy r = new Happy();\n        BufferedReader in = null;\n        BufferedWriter out = null;\n        \n        try{\n            in = new BufferedReader(new FileReader(\"A-large.in\"));\n            out = new BufferedWriter(new FileWriter(\"A-large.out\"));\n            \/\/in = new BufferedReader(new FileReader(\"test.in\"));\n            \/\/out = new BufferedWriter(new FileWriter(\"test.out\"));\n            int T = Integer.parseInt(in.readLine());\n            System.out.println(\"T=\"+T);\n            for(int i=0;i<T;i++){\n                System.out.print(\"Case #\"+(i+1)+\": \");\n                out.write(\"Case #\"+(i+1)+\": \");\n        \n        \n        \n                String[] line = in.readLine().split(\" \");\n                int R = Integer.parseInt(line[0]);\n                int C = Integer.parseInt(line[1]);\n                int W = Integer.parseInt(line[2]);\n                int ans = 0;\n        \n                if(W==1){\n                    ans = C * R;\n                } else if(W==2){\n                    ans = ans + (C\/W)*R;\n                    if(C%W==0){\n                        ans = ans + 1;\n                    } else {\n                        ans = ans + 2;\n                    }\n                } else {\n                    ans = ans + (C\/W)*R;\n                    int ret = C%W;\n                    if(ret==0){\n                        ans = ans + W - 1;\n                    } else{\n                        ans = ans + W - 1 + 1;\n                    }\n                }\n        \n                \n        \n        \n                System.out.print(ans+\"\\n\");\n                out.write(ans+\"\\n\");\n        \n        \n            }\n        \n            in.close();\n            out.close();\n        }catch(Exception e){\n            e.printStackTrace();\n            try{\n                in.close();\n                out.close();\n            }catch(Exception ee){\n                ee.printStackTrace();\n            }\n        }\n        System.out.print(\"Ha Ha :D\\n\");\n    }\n\n}"}
{"idx":"806","func":"static void main(String arg[])\n    {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt(), r, c, w, ans;\n        StringBuilder p = new StringBuilder();\n        \n        for (int no = 1; no <= t; no++)\n        {\n            r = scan.nextInt();\n            c = scan.nextInt();\n            w = scan.nextInt();\n            ans = (w + c \/ w - 1) * r;\n            if(c % w != 0)\n                ans += 1;\n            p.append(String.format(\"Case #%d: %d\\n\", no, ans));\n        }\n        System.out.print(p);\n    }\n}"}
{"idx":"807","func":"class ProbA {\n    private static Reader in;\n    private static PrintWriter out;    \n    public static final String NAME = \"A-small-practice.in\";        \n    public static final String OUTNAME = \"output.out\";\n    \n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new FileReader(NAME));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(OUTNAME));\n        \n        String output = \"\";\n        int cases = Integer.valueOf(sc.nextLine());\n        for (int c = 1; c <= cases; c++) {\n            output += \"Case #\" + c + \": \";\n            \n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            int W = sc.nextInt();\n            \n            int guess = 0;\n            int totalCells = R * C;\n            if (totalCells % W == 0) {\n                guess = totalCells\/W + (W-1);\n            } else {\n                guess = totalCells\/W + (W);\n            }\n            \n            output += guess + \"\\n\";\n            \n            if (sc.hasNext()) sc.nextLine();\n        }        \n        bw.write(output);\n        bw.close();\n    }\n}"}
{"idx":"808","func":"class P1\n{\n    public static void main( String[] args ) throws Exception\n    {\n        File inputFile = new File( \"inputfiles\/round2\/P1\/input.txt\" );\n        FileReader fr = new FileReader( inputFile );\n        BufferedReader br = new BufferedReader( fr );\n        \n        int numOfTestCases = Integer.parseInt( br.readLine() );\n        \n        File outputFile = new File( \"inputfiles\/round2\/P1\/output.txt\" );\n        outputFile.delete();\n        outputFile.createNewFile();\n        FileWriter fw = new FileWriter( outputFile );\n        BufferedWriter bw = new BufferedWriter( fw );\n        \n        for ( int i = 0; i < numOfTestCases; i++ )\n        {\n            String[] rc = br.readLine().split( \" \" );\n            int R = Integer.parseInt( rc[0] );\n            int C = Integer.parseInt( rc[1] );\n            \n            char[][] grid = new char[R][C];\n            \n            for ( int j = 0; j < R; j++ )\n            {\n                String row = br.readLine();\n                for ( int k = 0; k < row.length(); k++ )\n                    grid[j][k] = row.charAt( k );\n            }\n            \n            int changeNum = 0;\n            boolean possible = true;\n            \n            main: for ( int i1 = 0; i1 < R; i1++ )\n                for ( int j = 0; j < C; j++ )\n                {\n                    char field = grid[i1][j];\n                    if ( field == '.' )\n                        continue;\n                    \n                    boolean isArrowUp = false;\n                    for ( int k = 0; k < i1; k++ )\n                        if ( grid[k][j] != '.' )\n                        {\n                            isArrowUp = true;\n                            break;\n                        }\n                    \n                    boolean isArrowDown = false;\n                    for ( int k = i1+1; k < R; k++ )\n                        if ( grid[k][j] != '.' )\n                        {\n                            isArrowDown = true;\n                            break;\n                        }\n                    \n                    boolean isArrowLeft = false;\n                    for ( int k = 0; k < j; k++ )\n                        if ( grid[i1][k] != '.' )\n                        {\n                            isArrowLeft = true;\n                            break;\n                        }\n                    \n                    boolean isArrowRight = false;\n                    for ( int k = j+1; k < C; k++ )\n                        if ( grid[i1][k] != '.' )\n                        {\n                            isArrowRight = true;\n                            break;\n                        }\n                    \n                    if ( !isArrowUp && !isArrowDown && !isArrowLeft && !isArrowRight )\n                    {\n                        possible = false;\n                        break main;\n                    }\n                    \n                    if ( field == '^' && !isArrowUp )\n                        changeNum++;\n                    \n                    if ( field == 'v' && !isArrowDown )\n                        changeNum++;\n                    \n                    if ( field == '>' && !isArrowRight )\n                        changeNum++;\n                    \n                    if ( field == '<' && !isArrowLeft )\n                        changeNum++;\n                }\n            \n            String s = \"Case #\" + (i+1) + \": \" + ( possible ? changeNum : \"IMPOSSIBLE\" ) + \"\\n\";\n            bw.append( s );\n            bw.flush();\n        }\n        \n        bw.flush();\n        fw.flush();\n        \n        bw.close();\n        fw.close();\n    }\n}"}
{"idx":"809","func":"class A\n{\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));\n        \n        int numRuns=Integer.parseInt(in.readLine());\n        for (int run=1; run<=numRuns; run++)\n        {\n            StringTokenizer tok=new StringTokenizer(in.readLine());\n            int r=Integer.parseInt(tok.nextToken()), c=Integer.parseInt(tok.nextToken());\n            int[][] dir=new int[r][c];\n            int[][] row=new int[r][c];\n            int[][] col=new int[c][r];\n            int[] inRow=new int[r];\n            int[] inCol=new int[c];\n            \n            for (int i=0; i<r; i++)\n            {\n                String line=in.readLine();\n                for (int j=0; j<c; j++)\n                {\n                    if (line.charAt(j)!='.')\n                    {\n                        row[i][inRow[i]]=j;\n                        inRow[i]++;\n                        col[j][inCol[j]]=i;\n                        inCol[j]++;\n                    }\n                    if (line.charAt(j)=='<')\n                        dir[i][j]=0;\n                    else if (line.charAt(j)=='^')\n                        dir[i][j]=1;\n                    else if (line.charAt(j)=='>')\n                        dir[i][j]=2;\n                    else if (line.charAt(j)=='v')\n                        dir[i][j]=3;\n                }\n            }\n            \n            int changes=0;\n            boolean[] okay={false, false, false, false};\n            int colPos;\n            for (int i=0; i<r && changes>=0; i++)\n                for (int j=0; j<inRow[i] && changes>=0; j++)\n                {\n                    colPos=Arrays.binarySearch(col[row[i][j]], 0, inCol[row[i][j]], i);\n                    okay[0]=j>0;\n                    okay[1]=colPos>0;\n                    okay[2]=j<inRow[i]-1;\n                    okay[3]=colPos<inCol[row[i][j]]-1;\n                    \n                    if (okay[dir[i][row[i][j]]])\n                        continue;\n                    else if (okay[0] || okay[1] || okay[2] || okay[3])\n                        changes++;\n                    else\n                        changes=-1;\n                }\n            System.out.print(\"Case #\"+run+\": \");\n            if (changes==-1)\n                System.out.println(\"IMPOSSIBLE\");\n            else\n                System.out.println(changes);\n        }\n    }\n}"}
{"idx":"810","func":"class Solution {\n\n    public static void main(String[] args) throws Exception {\n        Solution r = new Solution();\n        Scanner sc = new Scanner(new FileReader(\"input.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n        \n        int caseCnt = sc.nextInt();\n        \n        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {\n            pw.print(\"Case #\" + (caseNum + 1) + \": \");\n        \n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            int res = 0;\n            String board[] = new String[R];\n            sc.nextLine();\n            for (int i = 0; i < R; i++) {\n                board[i] = sc.nextLine();\n            }\n            int max = 101;\n            int dirX[] = {-1, 1, 0, 0};\n            int dirY[] = {0, 0, 1, -1};\n            String dir = \"^v><\";\n            boolean possible = true;\n            for (int i = 0; i < R && possible; i++) {\n                for (int j = 0; j < C && possible; j++) {\n                    int curDir = dir.indexOf(board[i].charAt(j));\n                    int curX = i;\n                    int curY = j;\n                    boolean reachEnd = false;\n                    if (curDir >= 0) {\n                        for (int k = 0; k < max; k++) {\n                            curX = curX + dirX[curDir];\n                            curY = curY + dirY[curDir];\n                            if (curX < R && curX >= 0 && curY < C && curY >= 0) {\n                                if (board[curX].charAt(curY) != '.')\n                                    break;\n                            } else {\n                                reachEnd = true;\n                                break;\n                            }\n                        }\n                        if (reachEnd) {\n                            possible = false;\n                            for (int d = 0; d < 4 && !possible; d++) {\n                                curX = i;\n                                curY = j;\n                                for (int k = 0; k < max; k++) {\n                                    curX = curX + dirX[d];\n                                    curY = curY + dirY[d];\n                                    if (curX < R && curX >= 0 && curY < C && curY >= 0) {\n                                        if (board[curX].charAt(curY) != '.') {\n                                            possible = true;\n                                            res++;\n                                            break;\n                                        }\n                                    } else {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (!possible) {\n                pw.println(\"IMPOSSIBLE\");\n            } else {\n                pw.println(res);\n            }\n        }\n        \n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"811","func":"class Pegman {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"A-large.in\"));\n        PrintWriter out = new PrintWriter(new File(\"Pegman.out\"));\n\/\/        Scanner in = new Scanner(System.in);\n\/\/        PrintWriter out = new PrintWriter(System.out);\n\n        int[] dr = {0, 1, 0, -1};\n        int[] dc = {1, 0, -1, 0};\n        String lookup = \">v<^\";\n        int loops = in.nextInt();\n        for (int loop = 0; loop < loops; loop++) {\n            int r = in.nextInt();\n            int c = in.nextInt();\n            in.nextLine();\n\n            char[][] arr = new char[r][];\n            for (int i = 0; i < r; i++) {\n                arr[i] = in.nextLine().toCharArray();\n            }\n            int ans = 0;\n            big: for (int i = 0; i < r; i++) {\n                out: for (int j = 0; j < c; j++) {\n                    if (arr[i][j] != '.') {\n                        int d = lookup.indexOf(arr[i][j]);\n                        int a = i + dr[d];\n                        int b = j + dc[d];\n                        while(a >= 0 && b >= 0 && a < r && b < c) {\n                            if(arr[a][b] != '.')\n                                continue out;\n                            a += dr[d];\n                            b += dc[d];\n                        }\n                        ans++;\n                        for (d = 0; d < 4; d++) {\n                            a = i + dr[d];\n                            b = j + dc[d];\n                            while(a >= 0 && b >= 0 && a < r && b < c) {\n                                if(arr[a][b] != '.')\n                                    continue out;\n                                a += dr[d];\n                                b += dc[d];\n                            }\n                        }\n                        ans = -1;\n                        break big;\n                    }\n                }\n            }\n\n\n            out.printf(\"Case #%d: %s%n\", loop + 1, ans >= 0 ? ans : \"IMPOSSIBLE\");\n        }\n\n\n        out.close();\n        in.close();\n    }\n}"}
{"idx":"812","func":"class Main{\n    static boolean[][] hashLeft;\n    static boolean[][] hashRight;\n    static boolean[][] hashUp;\n    static boolean[][] hashDown;\n    static char[][] map;\n    public static void main(String[] args){\n        Scanner sc=new Scanner(System.in);\n        int T=sc.nextInt();\n        for (int t=1;t<=T;t++){\n            int r=sc.nextInt();\n            int c=sc.nextInt();\n            sc.nextLine();\n            hashLeft=new boolean[r][c];\n            hashRight=new boolean[r][c];\n            hashUp=new boolean[r][c];\n            hashDown=new boolean[r][c];\n            map=new char[r][c];\n            for (int i=0;i<r;i++){\n                String temp=sc.nextLine();                        \n                for (int j=0;j<c;j++){\n                    map[i][j]=temp.charAt(j);\n                }\n            }\n            for (int i=0;i<r;i++){\n                for (int j=1;j<c;j++){\n                    if (hashLeft[i][j-1]){\n                        hashLeft[i][j]=true;\n                    }else{\n                        if (map[i][j-1]!='.'){\n                            hashLeft[i][j]=true;\n                        }\n                    }\n                }\n            }\n            \n            for (int i=1;i<r;i++){\n                for (int j=0;j<c;j++){\n                    if (hashUp[i-1][j]){\n                        hashUp[i][j]=true;\n                    }else{\n                        if (map[i-1][j]!='.'){\n                            hashUp[i][j]=true;\n                        }\n                    }\n                }\n            }\n            \n            for (int i=0;i<r;i++){\n                for (int j=c-2;j>=0;j--){\n                    if (hashRight[i][j+1]){\n                        hashRight[i][j]=true;\n                    }else{\n                        if (map[i][j+1]!='.'){\n                            hashRight[i][j]=true;\n                        }\n                    }\n                }\n            }\n            \n            for (int i=r-2;i>=0;i--){\n                for (int j=0;j<c;j++){\n                    if (hashDown[i+1][j]){\n                        hashDown[i][j]=true;\n                    }else{\n                        if (map[i+1][j]!='.'){\n                            hashDown[i][j]=true;\n                        }\n                    }\n                }\n            }\n            \n            int ans=0;\n            \n            boolean find=false;\n            label:\n            for (int i=0;i<r;i++){\n                for (int j=0;j<c;j++){\n                    char cc=map[i][j];\n                    if (cc=='.'){\n                        continue;\n                    }\n                    if (cc=='>'){\n                        if (hashRight[i][j]){\n                            continue;\n                        }\n                        if (hashLeft[i][j]||hashUp[i][j]||hashDown[i][j]){\n                            ans++;\n                        }else{\n                            find=true;\n                            break label;\n                        }\n                    }\n                    if (cc=='<'){\n                        if (hashLeft[i][j]){\n                            continue;\n                        }\n                        if (hashRight[i][j]||hashUp[i][j]||hashDown[i][j]){\n                            ans++;\n                        }else{\n                            find=true;\n                            break label;\n                        }\n                    }\n                    if (cc=='v'){\n                        if (hashDown[i][j]){\n                            continue;\n                        }\n                        if (hashLeft[i][j]||hashUp[i][j]||hashRight[i][j]){\n                            ans++;\n                        }else{\n                            find=true;\n                            break label;\n                        }\n                    }\n                    if (cc=='^'){\n                        if (hashUp[i][j]){\n                            continue;\n                        }\n                        if (hashLeft[i][j]||hashDown[i][j]||hashRight[i][j]){\n                            ans++;\n                        }else{\n                            find=true;\n                            break label;\n                        }\n                    }\n                }\n            }\n            if (find){\n                System.out.println(\"Case #\"+t+\": IMPOSSIBLE\");\n            }else{\n                System.out.println(\"Case #\"+t+\": \"+ans);\n            }\n        }\n    }\n}"}
{"idx":"813","func":"class A {\n\n    public static void main(String[] args) throws IOException {\n        A r = new A();\n        Scanner sc = new Scanner(new FileReader(\"A-large.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"A-large.out\"));\n        \n        int nc = sc.nextInt();\n        for (int tc = 1; tc <= nc; tc++) {\n        \n            int r1 = sc.nextInt();\n            int c = sc.nextInt();\n            char[][] g = new char[r1][c];\n            for (int i = 0; i < r1; i++) {\n                g[i] = sc.next().toCharArray();\n            }\n        \n            boolean imp = false;\n            int ans = 0;\n            for (int j = 0; j < c; j++) {\n                int i = 0;\n                while (i < r1) {\n                    if (g[i][j] == '.')\n                        i++;\n                    else if (g[i][j] == '^') {\n                        boolean ok = false;\n                        int i1 = i - 1;\n                        while (i1 >= 0) {\n                            if (g[i1][j] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            i1--;\n                        }\n                        i1 = i + 1;\n                        while (i1 < g.length) {\n                            if (g[i1][j] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            i1++;\n                        }\n                        int j1 = j - 1;\n                        while (j1 >= 0) {\n                            if (g[i][j1] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            j1--;\n                        }\n                        j1 = j + 1;\n                        while (j1 < g[0].length) {\n                            if (g[i][j1] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            j1++;\n                        }\n                        imp |= !ok;\n                        ans++;\n                        break;\n                    } else\n                        break;\n                }\n            }\n            for (int j = 0; j < c; j++) {\n                int i = r1 - 1;\n                while (i >= 0) {\n                    if (g[i][j] == '.')\n                        i--;\n                    else if (g[i][j] == 'v') {\n                        boolean ok = false;\n                        int i1 = i - 1;\n                        while (i1 >= 0) {\n                            if (g[i1][j] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            i1--;\n                        }\n                        i1 = i + 1;\n                        while (i1 < g.length) {\n                            if (g[i1][j] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            i1++;\n                        }\n                        int j1 = j - 1;\n                        while (j1 >= 0) {\n                            if (g[i][j1] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            j1--;\n                        }\n                        j1 = j + 1;\n                        while (j1 < g[0].length) {\n                            if (g[i][j1] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            j1++;\n                        }\n                        imp |= !ok;\n                        ans++;\n                        break;\n                    } else\n                        break;\n                }\n            }\n        \n            for (int i = 0; i < r1; i++) {\n                int j = 0;\n                while (j < c) {\n                    if (g[i][j] == '.')\n                        j++;\n                    else if (g[i][j] == '<') {\n                        boolean ok = false;\n                        int i1 = i - 1;\n                        while (i1 >= 0) {\n                            if (g[i1][j] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            i1--;\n                        }\n                        i1 = i + 1;\n                        while (i1 < g.length) {\n                            if (g[i1][j] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            i1++;\n                        }\n                        int j1 = j - 1;\n                        while (j1 >= 0) {\n                            if (g[i][j1] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            j1--;\n                        }\n                        j1 = j + 1;\n                        while (j1 < g[0].length) {\n                            if (g[i][j1] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            j1++;\n                        }\n                        imp |= !ok;\n                        ans++;\n                        break;\n                    } else\n                        break;\n                }\n            }\n            for (int i = 0; i < r1; i++) {\n                int j = c - 1;\n                while (j >= 0) {\n                    if (g[i][j] == '.')\n                        j--;\n                    else if (g[i][j] == '>') {\n                        boolean ok = false;\n                        int i1 = i - 1;\n                        while (i1 >= 0) {\n                            if (g[i1][j] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            i1--;\n                        }\n                        i1 = i + 1;\n                        while (i1 < g.length) {\n                            if (g[i1][j] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            i1++;\n                        }\n                        int j1 = j - 1;\n                        while (j1 >= 0) {\n                            if (g[i][j1] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            j1--;\n                        }\n                        j1 = j + 1;\n                        while (j1 < g[0].length) {\n                            if (g[i][j1] != '.') {\n                                ok = true;\n                                break;\n                            }\n                            j1++;\n                        }\n                        imp |= !ok;\n                        ans++;\n                        break;\n                    } else\n                        break;\n                }\n            }\n            String ansStr = imp ? \"IMPOSSIBLE\" : (ans + \"\");\n            pw.printf(\"Case #%d: %s\\n\", tc, ansStr);\n        }\n        \n        pw.close();\n        sc.close();\n    }\n\n}"}
{"idx":"814","func":"class A {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"Round22015\/A_l.in\"));\n        System.setOut(new PrintStream(\"src\/Round22015\/A_l.out\"));\n        int T = Integer.parseInt(br.readLine());\n        for (int t= 1; t <= T ;t++){\n            System.out.print(String.format(\"Case #%d: \",t));\n            \n            String tmp[] = br.readLine().trim().split(\"\\\\s+\");\n            int R = Integer.parseInt(tmp[0]);\n            int C = Integer.parseInt(tmp[1]);\n            String map[] = new String[R];\n            for (int i = 0 ;i < R ; i++){\n                map[i] = br.readLine();\n            }\n            int ans = 0;\n            boolean isPosible = true;\n            boolean chkR[][] = new boolean[R][C];\n            boolean chkL[][] = new boolean[R][C];\n            boolean chkU[][] = new boolean[R][C];\n            boolean chkD[][] = new boolean[R][C];\n            for (int k = Math.max(R,C)+1; k > 0 ; k--){\n                for (int i = 0 ; i < R; i++){\n                    for (int j = 0 ; j < C ;j++){\n                        if (map[i].charAt(j) != '.'){\n                            if (i > 0) chkD[i-1][j] = true;\n                            if (i < R-1) chkU[i+1][j] = true;\n                            if (j > 0) chkR[i][j-1] = true;\n                            if (j < C-1) chkL[i][j+1] = true;\n                        } \n                        if (i > 0 && chkU[i-1][j]) {\n                            chkU[i][j] = true;\n                        } \n                         if (j > 0 && chkL[i][j-1]) {\n                            chkL[i][j] = true;\n                        } \n                         if (i < R-1 && chkD[i+1][j]) {\n                            chkD[i][j] = true;\n                        } \n                         if (j < C-1 && chkR[i][j+1]) {\n                            chkR[i][j] = true;\n                        }\n                    }\n                }\n            }\n            \n            for (int i = 0 ; i < R ;i++){\n                for (int j = 0 ; j< C; j++){\n                    if (map[i].charAt(j)!='.'&&!chkL[i][j]&&!chkR[i][j]&&!chkU[i][j]&&!chkD[i][j]){\n                        isPosible = false;\n                    }\n                }\n            }\n            \n            if (!isPosible){\n                System.out.println(\"IMPOSSIBLE \");\n            } else {\n                for (int r = 0 ; r <R ; r++){\n                    for (int c = 0 ; c < C ; c++){\n                        char a = map[r].charAt(c);\n                        if (a == '<' && !chkL[r][c]) ans++;\n                        if (a == '>' && !chkR[r][c]) ans++;\n                        if (a == 'v' && !chkD[r][c]) ans++;\n                        if (a == '^' && !chkU[r][c]) ans++;\n                    }\n                }\n                System.out.println(ans);\n            }\n        }\n        \n    }\n\n}"}
{"idx":"815","func":"class MainClass {\n    \n    public static void main(String[] args) throws IOException, InterruptedException {\n        BufferedReader fr = new BufferedReader(new FileReader(new File(\"input.txt\")));\n        FileWriter fw = new FileWriter(new File(\"result.txt\"));\n        String firstLine = fr.readLine();\n        int nbCases = Integer.parseInt(firstLine);\n        for (int numCase =0; numCase<nbCases; numCase++){\n\n            String line = fr.readLine();\n            int R = Integer.parseInt(line.split(\" \")[0]);\n            int C = Integer.parseInt(line.split(\" \")[1]);\n            char[][] fleches = new char[R][C];\n            \n            for (int i =0; i<R; i++){\n                line = fr.readLine();\n                for (int j =0; j<C; j++){\n                    fleches[i][j]=line.charAt(j);\n                }\n            }\n            \n\n            int result = 0;\n            \n            for (int i =0; i<R; i++){\n                for (int j =0; j<C; j++){\n                    if (fleches[i][j]=='.'){\n                        continue;\n                    }\n                    boolean needsToChange = true;\n                    if (fleches[i][j]=='<'){\n                        for (int k = j-1; k>=0; k--){\n                            if (fleches[i][k]!='.'){\n                                needsToChange=false;\n                                break;\n                            }\n                        }\n                    }\n                    if (fleches[i][j]=='>'){\n                        for (int k = j+1; k<C; k++){\n                            if (fleches[i][k]!='.'){\n                                needsToChange=false;\n                                break;\n                            }\n                        }\n                    }\n                    \n                    if (fleches[i][j]=='^'){\n                        for (int k = i-1; k>=0; k--){\n                            if (fleches[k][j]!='.'){\n                                needsToChange=false;\n                                break;\n                            }\n                        }\n                    }\n                    if (fleches[i][j]=='v'){\n                        for (int k = i+1; k<R; k++){\n                            if (fleches[k][j]!='.'){\n                                needsToChange=false;\n                                break;\n                            }\n                        }\n                    }\n                    if (needsToChange){\n\n                        boolean changeable = false;\n                        for (int k = i+1; k<R; k++){\n                            if (fleches[k][j]!='.'){\n                                changeable=true;\n                                break;\n                            }\n                        }\n                        for (int k = i-1; k>=0; k--){\n                            if (fleches[k][j]!='.'){\n                                changeable=true;\n                                break;\n                            }\n                        }\n                        for (int k = j+1; k<C; k++){\n                            if (fleches[i][k]!='.'){\n                                changeable=true;\n                                break;\n                            }\n                        }\n                        for (int k = j-1; k>=0; k--){\n                            if (fleches[i][k]!='.'){\n                                changeable=true;\n                                break;\n                            }\n                        }\n                        if (changeable){\n                            result++;\n                        }\n                        else{\n                            result=Integer.MIN_VALUE;\n                            break;\n                        }\n                    }\n                }\n            }\n            if (result<0){\n\n                fw.write(\"Case #\"+(numCase+1)+\": IMPOSSIBLE\\n\");\n            }\n            else{\n            \n            fw.write(\"Case #\"+(numCase+1)+\": \"+result+\"\\n\");\n            }\n            \n        }\n        fw.close();\n        System.out.println(\"finished\");\n    }\n\n}"}
{"idx":"816","func":"class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt();\n\n        for (int caseNum = 1;  caseNum <= t; caseNum++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n\n            char[][] grid = new char[r][c];\n            for (int i = 0; i < r; i++) {\n                grid[i] = sc.next().toCharArray();\n            }\n\n            int count = 0;\n            boolean isImpossible = false;\n            for (int i = 0; i < r; i++) {\n                boolean firstFound = false;\n                boolean lastFound = false;\n                char first = '.';\n                int firstIdx = -1;\n                char last = '.';\n                int lastIdx = -1;\n                for (int j = 0; j < c; j++) {\n                    if (!firstFound) {\n                        if (grid[i][j] != '.') {\n                            first = grid[i][j];\n                            firstIdx = j;\n                            firstFound = true;\n                        }\n                    }\n                    else {\n                        if (grid[i][j] != '.') {\n                            last = grid[i][j];\n                            lastIdx = j;\n                            lastFound = true;\n                        }\n                    }\n                }\n                if (lastFound) {\n                    if (first == '<') {\n                        count += 1;\n                    }\n                    if (last == '>') {\n                        count += 1;\n                    }\n                }\n                else {\n                    if (first == '<' || first == '>') {\n                        grid[i][firstIdx] = '*';\n                    }\n                }\n                \/\/ System.out.printf(\"first: %c, firstIdx: %d, last: %c, lastIdx: %d\\n\", first, firstIdx, last, lastIdx);\n                \/\/ System.out.println(i + \" \" + count);\n            }\n\n            for (int j = 0; j < c; j++) {\n                boolean firstFound = false;\n                boolean lastFound = false;\n                char first = '.';\n                int firstIdx = -1;\n                char last = '.';\n                int lastIdx = -1;\n                for (int i = 0; i < r; i++) {\n                    if (grid[i][j] == '*') {\n                        count += 1;\n                    }\n\n                    if (!firstFound) {\n                        if (grid[i][j] != '.') {\n                            first = grid[i][j];\n                            firstIdx = i;\n                            firstFound = true;\n                        }\n                    }\n                    else {\n                        if (grid[i][j] != '.') {\n                            last = grid[i][j];\n                            lastIdx = i;\n                            lastFound = true;\n                        }\n                    }\n                }\n                if (lastFound) {\n                    if (first == '^') {\n                        count += 1;\n                    }\n                    if (last == 'v') {\n                        count += 1;\n                    }\n                }\n                else {\n                    if (first == '^' || first == 'v') {\n                        grid[firstIdx][j] = '&';\n                    }\n                    else if (first == '*') {\n                        isImpossible = true;\n                    }\n                }\n            }\n            \/*\n            for (int i = 0; i < r; i++) {\n                for (int j = 0; j < c; j++) {\n                    System.out.print(grid[i][j]);\n                }\n                System.out.println();\n            }\n            System.out.println(count);\n            *\/\n\n            for (int i = 0; i < r; i++) {\n                boolean firstFound = false;\n                boolean lastFound = false;\n                boolean ampFound = false;\n                char first = '.';\n                int firstIdx = -1;\n                char last = '.';\n                int lastIdx = -1;\n                for (int j = 0; j < c; j++) {\n                    if (grid[i][j] == '&') {\n                        ampFound = true;\n                        count += 1;\n                    }\n                    if (!firstFound) {\n                        if (grid[i][j] != '.') {\n                            first = grid[i][j];\n                            firstIdx = j;\n                            firstFound = true;\n                        }\n                    }\n                    else {\n                        if (grid[i][j] != '.') {\n                            last = grid[i][j];\n                            lastIdx = j;\n                            lastFound = true;\n                        }\n                    }\n                }\n                if (ampFound && !lastFound) {\n                    isImpossible = true;\n                }\n            }\n            \/\/ System.out.println(count);\n\n            \/*\n            for (int i = 0; i < r; i++) {\n                for (int j = 0; j < c; j++) {\n                    System.out.print(grid[i][j]);\n                }\n                System.out.println();\n            }\n            *\/\n                \n            if (isImpossible) {\n                System.out.printf(\"Case #%d: IMPOSSIBLE\\n\", caseNum);\n            }\n            else {\n                System.out.printf(\"Case #%d: %d\\n\", caseNum, count);\n            }\n        }\n    }\n}"}
{"idx":"817","func":"class A {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src\/A-large.in\"))));\n\n        String output = \"\";\n        int t = sc.nextInt();\n        sc.nextLine();\n        for (int i = 1; i <= t; i++) {\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            sc.nextLine();\n            char[][] grid = new char[r][c];\n            for (int j = 0; j < r; j++) {\n                grid[j] = sc.nextLine().toCharArray();\n            }\n            int arrowsToChange = 0;\n            boolean isImpossible = false;\n            for (int j = 0; j < r; j++) {\n                for (int k = 0; k < c; k++) {\n                    char g = grid[j][k];\n                    if (g=='.')\n                        continue;\n                    if (g=='^') {\n                        boolean needsToChange = true;\n                        for (int m = j-1; m >= 0; m--) {\n                            if (grid[m][k] != '.') {\n                                needsToChange = false;\n                                break;\n                            }\n                        }\n                        if (needsToChange) {\n                            boolean impossible = true;\n                            for (int m = j+1; m < r; m++) {\n                                if (grid[m][k] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            for (int m = k-1; m >= 0; m--) {\n                                if (grid[j][m] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            for (int m = k+1; m < c; m++) {\n                                if (grid[j][m] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            if (impossible)\n                                isImpossible = true;\n                            else\n                                arrowsToChange++;\n                        }\n                    }\n                    if (g=='v') {\n                        boolean needsToChange = true;\n                        for (int m = j+1; m < r; m++) {\n                            if (grid[m][k] != '.') {\n                                needsToChange = false;\n                                break;\n                            }\n                        }\n                        if (needsToChange) {\n                            boolean impossible = true;\n                            for (int m = j-1; m >= 0; m--) {\n                                if (grid[m][k] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            for (int m = k-1; m >= 0; m--) {\n                                if (grid[j][m] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            for (int m = k+1; m < c; m++) {\n                                if (grid[j][m] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            if (impossible)\n                                isImpossible = true;\n                            else\n                                arrowsToChange++;\n                        }\n                    }\n                    if (g=='<') {\n                        boolean needsToChange = true;\n                        for (int m = k-1; m >= 0; m--) {\n                            if (grid[j][m] != '.') {\n                                needsToChange = false;\n                                break;\n                            }\n                        }\n                        if (needsToChange) {\n                            boolean impossible = true;\n                            for (int m = j+1; m < r; m++) {\n                                if (grid[m][k] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            for (int m = j-1; m >= 0; m--) {\n                                if (grid[m][k] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            for (int m = k+1; m < c; m++) {\n                                if (grid[j][m] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            if (impossible)\n                                isImpossible = true;\n                            else\n                                arrowsToChange++;\n                        }\n                    }\n                    if (g=='>') {\n                        boolean needsToChange = true;\n                        for (int m = k+1; m < c; m++) {\n                            if (grid[j][m] != '.') {\n                                needsToChange = false;\n                                break;\n                            }\n                        }\n                        if (needsToChange) {\n                            boolean impossible = true;\n                            for (int m = j-1; m >= 0; m--) {\n                                if (grid[m][k] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            for (int m = k-1; m >= 0; m--) {\n                                if (grid[j][m] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            for (int m = j+1; m < r; m++) {\n                                if (grid[m][k] != '.') {\n                                    impossible = false;\n                                    break;\n                                }\n                            }\n                            if (impossible)\n                                isImpossible = true;\n                            else\n                                arrowsToChange++;\n                        }\n                    }\n                }\n            }\n            String tempOut = \"\";\n            if (isImpossible)\n                tempOut = \"IMPOSSIBLE\";\n            else\n                tempOut = \"\"+arrowsToChange;\n            output += \"Case #\" + i + \": \" + tempOut + \"\\n\";\n        }\n        \n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src\/A-large.out\"), \"utf-8\"));\n        bw.write(output);\n        bw.close();\n    }\n}"}
{"idx":"818","func":"class Pegman {\n    \n    public static void main(String[] args) throws Exception {\n        File inputFile = new File(\"A-large.in\");\n        Scanner in = new Scanner(inputFile);\n        File outputFile = new File(\"output.txt\");\n        PrintWriter out = new PrintWriter(outputFile);\n\n        int T = in.nextInt();\n        for (int t=0; t<T; t++) {\n            int R = in.nextInt();\n            int C = in.nextInt();\n            char[][] A = new char[R][];\n            for (int r=0; r<R; r++) {\n                A[r] = in.next().toCharArray();\n            }\n            boolean ok = true;\n            int answer = 0;\n            for (int r=0; r<R; r++) {\n                for (int c=0; c<C; c++) {\n                    if (A[r][c] == '.') continue;\n                    boolean up = false;\n                    for (int rr=r-1; rr>=0; rr--) {\n                        if (A[rr][c] != '.') {\n                            up = true;\n                        }\n                    }\n                    boolean down = false;\n                    for (int rr=r+1; rr<R; rr++) {\n                        if (A[rr][c] != '.') {\n                            down = true;\n                        }\n                    }\n                    boolean left = false;\n                    for (int cc=c-1; cc>=0; cc--) {\n                        if (A[r][cc] != '.') {\n                            left = true;\n                        }\n                    }\n                    boolean right = false;\n                    for (int cc=c+1; cc<C; cc++) {\n                        if (A[r][cc] != '.') {\n                            right = true;\n                        }\n                    }\n                    boolean exists = up || down || left || right;\n                    if (exists) {\n                        if ((A[r][c] == '^' && !up) || (A[r][c] == 'v' && !down)\n                                || (A[r][c] == '>' && !right) || (A[r][c] == '<' && !left)) {\n                            answer++;\n                        }\n                    } else {\n                        ok = false;\n                    }\n                }\n            }\n            \n            String s = ok ? Integer.toString(answer) : \"IMPOSSIBLE\";\n            out.println(\"Case #\"+(t+1)+\": \" + s);\n        }\n\n        out.close();\n    }\n    \n}"}
{"idx":"819","func":"class A {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(new File(\"A-large (4).in\"));\n        PrintWriter out = new PrintWriter(\"AL.out\");\n        int tc = in.nextInt();\n        int[] di = new int[128];\n        int[] dj = new int[128];\n\n        di['v'] = 1;\n        dj['v'] = 0;\n\n        di['>'] = 0;\n        dj['>'] = 1;\n\n        di['^'] = -1;\n        dj['^'] = 0;\n\n        di['<'] = 0;\n        dj['<'] = -1;\n\n        for (int cc = 1; cc <= tc; cc++) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            char[][] map = new char[n][];\n            for (int i = 0; i < n; i++)\n                map[i] = in.next().toCharArray();\n\n            int[] rcount = new int[n];\n            int[] ccount = new int[m];\n\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    if (map[i][j] != '.') {\n                        rcount[i]++;\n                        ccount[j]++;\n                    }\n                }\n            }\n            int count = 0;\n            boolean impossible = false;\n            for (int i = 0; i < n && !impossible; i++) {\n                for (int j = 0; j < m && !impossible; j++) {\n                    if (map[i][j] != '.') {\n                        int ci = i + di[map[i][j]];\n                        int cj = j + dj[map[i][j]];\n                        boolean found = false;\n                        while (ci >= 0 && ci < n && cj >= 0 && cj < m) {\n                            if (map[ci][cj] != '.')\n                                found = true;\n                            ci += di[map[i][j]];\n                            cj += dj[map[i][j]];\n                        }\n                        if (!found) {\n                            count++;\n                            if (rcount[i] == 1 && ccount[j] == 1) {\n                                impossible = true;\n                            }\n                        }\n                    }\n                }\n            }\n            if (impossible) {\n                System.out.printf(\"Case #%d: %s\\n\", cc, \"IMPOSSIBLE\");\n                out.printf(\"Case #%d: %s\\n\", cc, \"IMPOSSIBLE\");\n\n            } else {\n                System.out.printf(\"Case #%d: %d\\n\", cc, count);\n                out.printf(\"Case #%d: %d\\n\", cc, count);\n            }\n        }\n        out.close();\n    }\n}"}
{"idx":"820","func":"class Pegman {\n    public static void main(String[] args) throws Exception {\n        String fileName = args[0];\n        Pegman obj = new Pegman();\n        BufferedReader br = new BufferedReader(new FileReader(fileName));\n        BufferedWriter bw = new BufferedWriter(\n                new FileWriter(fileName + \".out\"));\n        \n        int T = Integer.parseInt(br.readLine());\n        for (int i = 0; i < T; i++) {\n            String str = br.readLine();\n            StringTokenizer token = new StringTokenizer(str, \" \");\n            int R = Integer.parseInt(token.nextToken());\n            int C = Integer.parseInt(token.nextToken());\n            int[][] map = new int[C][R];\n            for (int j = 0 ; j < R ; j++) {\n                str = br.readLine();\n                for (int k = 0 ; k < C ; k++) {\n                    switch (str.charAt(k)) {\n                    case '^':\n                        map[k][j] = 1;\n                        break;\n                    case '>':\n                        map[k][j] = 2;\n                        break;\n                    case 'v':\n                        map[k][j] = 3;\n                        break;\n                    case '<':\n                        map[k][j] = 4;\n                        break;\n                    default:\n                        map[k][j] = 0;\n                        break;\n                    }\n                }\n            }\n            int ans = 0;\n            for (int j = 0 ; j < R; j++) {\n                for (int k = 0 ; k < C ; k++) {\n                    if (map[k][j] == 0) {\n                        continue;\n                    }\n                    int x = k;\n                    int y = j;\n                    boolean flg = false;\n                    while (true) {\n                        x += obj.DIR[map[k][j]][0];\n                        y += obj.DIR[map[k][j]][1];\n                        if ( x < 0 || x >= C || y < 0 || y >= R ) {\n                            break;\n                        }\n                        if (map[x][y] != 0) {\n                            flg = true;\n                            break;\n                        }\n                    }\n                    if (flg) {\n                        continue;\n                    }\n                    flg = false;\n                    for (int d = 1 ; d <= 4 ; d++ ) {\n                        if (map[k][j] == d) {\n                            continue;\n                        }\n                        x = k;\n                        y = j;\n                        while (true) {\n                            x += obj.DIR[d][0];\n                            y += obj.DIR[d][1];\n                            if ( x < 0 || x >= C || y < 0 || y >= R ) {\n                                break;\n                            }\n                            if (map[x][y] != 0) {\n                                flg = true;\n                                break;\n                            }\n                        }\n                        if (flg) {\n                            break;\n                        }\n                    }\n                    if (flg) {\n                        ans += 1;\n                        continue;\n                    } else {\n                        ans = -1;\n                        break;\n                    }\n                }\n                if (ans == -1) {\n                    break;\n                }\n            }\n        \n            if (ans == -1) {\n                bw.write(\"Case #\" + (i + 1) + \": \" + \"IMPOSSIBLE\");\n            } else {\n                bw.write(\"Case #\" + (i + 1) + \": \" + ans);\n            }\n            bw.write(\"\\r\\n\");\n        }\n        bw.close();\n        br.close();\n    }\n\n    final int[][] DIR = {{0,0},{0,-1},{1,0},{0,1},{-1,0}};\n}"}
{"idx":"821","func":"class Main {\n  public static void main(String[] args) {\n    Scanner s = new Scanner(System.in);\n    int T = s.nextInt();\n    for (int t = 1; t <= T; t++) {\n      int r = s.nextInt(), c = s.nextInt();\n      s.nextLine();\n      char[][] v = new char[r][c];\n      for (int i = 0; i < r; i++) {\n        String line = s.nextLine();\n        for (int j = 0; j < c; j++) {\n          v[i][j] = line.charAt(j);\n        }\n      }\n      boolean[][][] f = new boolean[r][c][4];\n      \/\/ up\n      for (int j = 0; j < c; j++) {\n        boolean flag = false;\n        for (int i = 0; i < r; i++) {\n          if (v[i][j] != '.') {\n            f[i][j][0] = flag;\n            flag = true;\n          }\n        }\n      }\n      \/\/ down\n      for (int j = 0; j < c; j++) {\n        boolean flag = false;\n        for (int i = r - 1; i >= 0; i--) {\n          if (v[i][j] != '.') {\n            f[i][j][1] = flag;\n            flag = true;\n          }\n        }\n      }\n      \/\/ left\n      for (int i = 0; i < r; i++) {\n        boolean flag = false;\n        for (int j = 0; j < c; j++) {\n          if (v[i][j] != '.') {\n            f[i][j][2] = flag;\n            flag = true;\n          }\n        }\n      }\n      \/\/ right\n      for (int i = 0; i < r; i++) {\n        boolean flag = false;\n        for (int j = c - 1; j >= 0; j--) {\n          if (v[i][j] != '.') {\n            f[i][j][3] = flag;\n            flag = true;\n          }\n        }\n      }\n      \/\/ check everyone\n      int ans = 0;\n      for (int i = 0; i < r; i++) {\n        for (int j = 0; j < c; j++) {\n          if (v[i][j] != '.') {\n            boolean valid = true;\n            switch (v[i][j]) {\n              case '^':\n                valid = f[i][j][0];\n                break;\n              case 'v':\n                valid = f[i][j][1];\n                break;\n              case '<':\n                valid = f[i][j][2];\n                break;\n              case '>':\n                valid = f[i][j][3];\n                break;\n              default:\n                System.out.println(\"ERROR\");\n                break;\n              }\n            if (!valid) {\n              ans++;\n              boolean fail = true;\n              for (int k = 0; k < 4; k++) {\n                if (f[i][j][k]) {\n                  fail = false;\n                  break;\n                }\n              }\n              if (fail) {\n                ans = -1;\n                break;\n              }\n            }\n          }\n        }\n        if (ans == -1) {\n          break;\n        }\n      }\n      if (ans == -1) {\n        System.out.println(String.format(\"Case #%d: IMPOSSIBLE\", t));\n      } else {\n        System.out.println(String.format(\"Case #%d: %d\", t, ans));\n      }\n    }\n    s.close();\n  }\n}"}
{"idx":"822","func":"class P1 {\n\n    Scanner scio=new Scanner(System.in);\n    int caseNum=0;\n    int[][] dir = {{0,0},{-1,0},{1,0},{0,-1},{0,1}};\n        \n    public static void main(String[] args) {\n        P1 r = new P1();\n        try {\n            File file=new File(\"A-large.in\");\n            r.scio=new Scanner(file); \n        } catch (FileNotFoundException e) {}\n        \n        int t=r.scio.nextInt();\n        String s=r.scio.nextLine();\n        \n        for(int i=0;i<t;++i) {\n            r.caseNum=i+1;\n            int n=r.scio.nextInt();\n            \/\/String sss=this.scio.nextLine();\n            int m=r.scio.nextInt();\n            String ss=r.scio.nextLine();\n            \n            \n            int[][] a=new int[n+10][m+10];\n            for(int i1=0;i1<n+10;++i1)\n                for (int j=0;j<m+10;++j) a[i1][j]=-1;\n            \n            for(int i3=1;i3<=n;++i3) {\n                String s1=r.scio.nextLine();\n                char[] c=s1.toCharArray();\n                for (int j=1;j<=m;++j) {\n                    if (c[j-1]=='.') a[i3][j] = 0;\n                    if (c[j-1]=='^') a[i3][j] = 1;\n                    if (c[j-1]=='v') a[i3][j] = 2;\n                    if (c[j-1]=='<') a[i3][j] = 3;\n                    if (c[j-1]=='>') a[i3][j] = 4;\n                }\n            }\n            \n            \n            int cnt=0;\n            for (int i2=1; i2<=n;++i2) {\n                for (int j=1; j<=m; ++j) {\n                    if (a[i2][j]==0) continue;\n                    int[] good = new int[5]; \n                    for (int t1=0;t1<5;++t1) good[t1]=0;\n                    for(int t2=1;t2<=4;++t2) {\n                        int x=i2; int y=j;\n                        while(a[x][y]!=-1) {\n                            x+=r.dir[t2][0];\n                            y+=r.dir[t2][1];\n                            if (a[x][y]>0) {\n                                good[t2]=1; ++good[0];\n                                break;\n                            }\n                        }\n                    }\n                    if (good[0]==0) cnt=-1 * n * m * 2;\n                    if (good[a[i2][j]] ==0) ++cnt;\n                }\n            }\n            if (cnt<0) {\n                System.out.println(\"case #\"+r.caseNum+\": \" + \"IMPOSSIBLE\");            \n            } else {\n                System.out.println(\"case #\"+r.caseNum+\": \" + cnt);\n            }\n        }\n    }\n\n}"}
{"idx":"823","func":"class Main {\n\n    static int r ;\n    static int c;\n    public static void main(String[] args) {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedOutputStream bos = new BufferedOutputStream(System.out);\n        String eol = System.getProperty(\"line.separator\");\n        byte[] eolb = eol.getBytes();\n        try {\n            String str = br.readLine();\n            int t = Integer.parseInt(str);\n            for(int i = 0 ; i < t ; i++) {\n                int ans = 0;\n                str = br.readLine();\n                int blank = str.indexOf(\" \");\n                r = Integer.parseInt(str.substring(0, blank));\n                c = Integer.parseInt(str.substring(blank+1));\n                char[][]ar = new char[r][c];\n                for(int j = 0 ; j < r ; j++) {\n                    str = br.readLine();\n                    ar[j] = str.toCharArray();\n                }\n                boolean impos = false;\n                boolean val = false;\n                int row = 0;\n                int col = 0;\n                for(int j = 0 ; j < r ; j++) {\n                    for(int k = 0 ; k < c ; k++) {\n                        switch(ar[j][k]) {\n                        case '^' :\n                            row = j-1;\n                            if(row>=0) {\n                                while(ar[row][k]=='.') {\n                                    row--;\n                                    if(row<0) {\n                                        break;\n                                    }\n                                }\n                            }\n                            if(row<0) {\n                                ans++;\n                            }\n                            boolean ans1 = true;\n                            for(int a = 0 ; a < j ; a++) {\n                                if(ar[a][k]!='.') {\n                                    ans1 = false;\n                                }\n                            }\n                            for(int a = 0 ; a < k ; a++) {\n                                if(ar[j][a]!='.') {\n                                    ans1 = false;\n                                }\n                            }\n                            for(int a = j+1 ; a < r ; a++) {\n                                if(ar[a][k]!='.') {\n                                    ans1 = false;\n                                }\n                            }\n                            for(int a = k+1 ; a < c ; a++) {\n                                if(ar[j][a]!='.') {\n                                    ans1 = false;\n                                }\n                            }\n                            val = ans1;\n                            if(val==true){\n                                impos= true;\n                            }\n                            break;\n                        case '<' :\n                            col = k-1;\n                            if(col>=0) {\n                                while(ar[j][col]=='.') {\n                                    col--;\n                                    if(col<0) {\n                                        break;\n                                    }\n                                }\n                            }\n                            if(col<0) {\n                                ans++;\n                            }\n                            boolean ans2 = true;\n                            for(int a = 0 ; a < j ; a++) {\n                                if(ar[a][k]!='.') {\n                                    ans2 = false;\n                                }\n                            }\n                            for(int a = 0 ; a < k ; a++) {\n                                if(ar[j][a]!='.') {\n                                    ans2 = false;\n                                }\n                            }\n                            for(int a = j+1 ; a < r ; a++) {\n                                if(ar[a][k]!='.') {\n                                    ans2 = false;\n                                }\n                            }\n                            for(int a = k+1 ; a < c ; a++) {\n                                if(ar[j][a]!='.') {\n                                    ans2 = false;\n                                }\n                            }\n                            val = ans2;\n                            if(val==true){\n                                impos= true;\n                            }\n                            break;\n                        case '>' :\n                            col = k+1;\n                            if(col<c) {\n                                while(ar[j][col]=='.') {\n                                    col++;\n                                    if(col>=c) {\n                                        break;\n                                    }\n                                }\n                            }\n                            if(col>=c) {\n                                ans++;\n                            }\n                            boolean ans3 = true;\n                            for(int a = 0 ; a < j ; a++) {\n                                if(ar[a][k]!='.') {\n                                    ans3 = false;\n                                }\n                            }\n                            for(int a = 0 ; a < k ; a++) {\n                                if(ar[j][a]!='.') {\n                                    ans3 = false;\n                                }\n                            }\n                            for(int a = j+1 ; a < r ; a++) {\n                                if(ar[a][k]!='.') {\n                                    ans3 = false;\n                                }\n                            }\n                            for(int a = k+1 ; a < c ; a++) {\n                                if(ar[j][a]!='.') {\n                                    ans3 = false;\n                                }\n                            }\n                            val = ans3;\n                            if(val==true){\n                                impos= true;\n                            }\n                            break;\n                        case 'v' :\n                            row = j+1;\n                            if(row<r) {\n                                while(ar[row][k]=='.') {\n                                    row++;\n                                    if(row>=r) {\n                                        break;\n                                    }\n                                }\n                            }\n                            if(row>=r) {\n                                ans++;\n                            }\n                            boolean ans4 = true;\n                            for(int a = 0 ; a < j ; a++) {\n                                if(ar[a][k]!='.') {\n                                    ans4 = false;\n                                }\n                            }\n                            for(int a = 0 ; a < k ; a++) {\n                                if(ar[j][a]!='.') {\n                                    ans4 = false;\n                                }\n                            }\n                            for(int a = j+1 ; a < r ; a++) {\n                                if(ar[a][k]!='.') {\n                                    ans4 = false;\n                                }\n                            }\n                            for(int a = k+1 ; a < c ; a++) {\n                                if(ar[j][a]!='.') {\n                                    ans4 = false;\n                                }\n                            }\n                            val = ans4;\n                            if(val==true){\n                                impos= true;\n                            }\n                            break;\n                        case '.' :\n                            break;\n                        }\n                    }\n                }\n                bos.write(\"Case #\".getBytes());\n                bos.write(new Integer(i+1).toString().getBytes());\n                bos.write(\": \".getBytes());\n                if(impos) {\n                    bos.write(\"IMPOSSIBLE\".getBytes());\n                } else {\n                    bos.write(new Integer(ans).toString().getBytes());\n                }\n                bos.write(eolb);\n            }\n            bos.flush();\n        } catch(IOException ioe) {\n            ioe.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"824","func":"class GoogleCodeJam {\n    public static void main(String[] args) {\n        Scanner input = null;\n        \/\/MagicTrick[] puzzles;\n        \/\/CookieClickerAlpha[] puzzles;\n        Pegman[] puzzles;\n        try {\n            input = new Scanner(new FileInputStream(\"input.in\"));\n            \/\/puzzles = MagicTrick.readFile(input);\n            \/\/puzzles = CookieClickerAlpha.readFile(input);\n            puzzles = Pegman.readFile(input);\n            input.close();\n        }\n        catch(Exception e) {\n            System.out.println(\"hi\");\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }\n        \n        String[] results = new String[puzzles.length];\n        for(int i = 0; i < puzzles.length; ++i) {            \n            results[i] = \"Case #\" + (int)(i + 1) + \": \" + puzzles[i].solve();\n            System.out.println(\"Case #\" + (int)(i + 1) + \" done\");\n        }        \n        \n        PrintWriter output = null;\n        try {\n            output = new PrintWriter(new FileOutputStream(\"output.txt\"));\n            for(int i = 0; i < results.length; ++i) {\n                output.println(results[i]);\n            }\n            output.close();\n        }\n        catch(Exception e) {\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }\n        \n        \/*PrintWriter output = null;\n        try {\n            output = new PrintWriter(new FileOutputStream(\"output.txt\"));\n            for(int i = 0; i < puzzles.length; ++i) {\n                output.println(\"Case #\" + (int)(i + 1) + \":\");\n                \n                String[] ans = puzzles[i].solve();\n                for(int j = 0; j < ans.length; ++j) {\n                    output.println(ans[j]);\n                }\n                \n                System.out.println(\"Case #\" + (int)(i + 1) + \" done\");\n            }\n            output.close();\n        }\n        catch(Exception e) {\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }*\/\n    }\n}"}
{"idx":"825","func":"static void main(String args[]) {\n        Scanner in = null;\n        try {\n            in = new Scanner(new FileInputStream(\"input.txt\"));\n            System.setOut(new PrintStream(new File(\"output.txt\")));\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        Map<Character, Integer> map = new HashMap<Character, Integer> ();\n        map.put('<', 1);\n        map.put('^', 2);\n        map.put('>', 4);\n        map.put('v', 8);\n        \n        int T = in.nextInt();\n        for (int t = 1; t <= T; t++) {\n            \/\/in.nextLine();\n            int r = in.nextInt();\n            int c = in.nextInt();\n            String ar[] = new String[r];\n            in.nextLine();\n            for (int i = 0 ; i < r; i++) ar[i] = in.nextLine();\n            \n            int ne[][] = new int[r][c];\n            \n            for (int i = 0; i < r; i++) {\n                int l = -1;\n                int p = -1;\n                for (int j = 0; j < c; j++) {\n                    if (ar[i].charAt(j) != '.') {\n                        if (l == -1) {\n                            l = j;\n                            ne[i][j] += 1;\n                        }\n                        p = j;\n                    }\n                }\n                if (p != -1) {\n                    ne[i][p] += map.get('>');\n                }\n            }\n            \n            for (int j = 0; j < c; j++) {\n                int u = -1;\n                int d = -1;\n                for (int i = 0; i < r; i++) {\n                    if (ar[i].charAt(j) != '.') {\n                        if (u == -1) {\n                            u = i;\n                            ne[i][j] += map.get('^');\n                        }\n                        d = i;\n                    }\n                }\n                if (d != -1) {\n                    ne[d][j] += map.get('v');\n                }\n            }\n            \n            int count = 0;\n            for (int i = 0; i < r; i++) {\n                if (count == -1) {\n                    break;\n                }\n                for (int j = 0; j < c; j++) {\n                    if (ar[i].charAt(j) != '.') {\n                        if (ne[i][j] != 0) {\n                            char ch = ar[i].charAt(j);\n                            if (ne[i][j] == 15) {\n                                count = -1;\n                                break;\n                            } else {\n                                if ((map.get(ch) & ne[i][j]) != 0) {\n                                    count ++;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (count == -1) {\n                    break;\n                }\n            }\n            \n            System.out.println(\"Case #\" + t + \": \" + (count == -1 ? \"IMPOSSIBLE\" : count));\n        }\n    }\n \n}"}
{"idx":"826","func":"class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int nT = sc.nextInt();\n        for(int T=1; T<=nT; ++T)\n        {\n            int R=sc.nextInt(), C=sc.nextInt();\n            \n            int[][] map = new int[R][C];\n            char[] line = new char[C];\n\n            int[] dr = {0,-1, 0, 1, 0};\n            int[] dc = {0, 0, 1, 0,-1};\n            \n            for(int r=0; r<R; ++r)\n            {\n                line = sc.next().toCharArray();\n                for(int c=0; c<C; ++c)\n                {\n                    switch(line[c])\n                    {\n                    case '.': map[r][c]=0; break;\n                    case '^': map[r][c]=1; break;\n                    case '>': map[r][c]=2; break;\n                    case 'v': map[r][c]=3; break;\n                    case '<': map[r][c]=4; break;\n                    }\n                }\n            }\n            \n\n            int total=0;\n            boolean possible=true;\n            for(int r=0; r<R && possible; ++r)\n            {\n                for(int c=0; c<C && possible; ++c)\n                {\n                    if(map[r][c]==0)\n                        continue;\n                    int d=1;\n                    int r1 = r+d*dr[map[r][c]];\n                    int c1 = c+d*dc[map[r][c]];\n                    while((0<=r1 && r1<R && 0<=c1 && c1<C) && map[r+d*dr[map[r][c]]][c+d*dc[map[r][c]]]==0)\n                        ++d;\n                    int r2 = r+d*dr[map[r][c]];\n                    int c2 = c+d*dc[map[r][c]];\n                    if(!(0<=r2 && r2<R && 0<=c2 && c2<C)) \/\/fell off\n                    {\n                        boolean found = false;\n                        for(int del=1; del<=4; ++del)\n                        {\n                            d=1;\n                            int r3 = r+d*dr[del];\n                            int c3 = c+d*dc[del];\n                            while((0<=r3 && r3<R && 0<=c3 && c3<C) && map[r+d*dr[del]][c+d*dc[del]]==0)\n                                ++d;\n                            int r4 = r+d*dr[del];\n                            int c4 = c+d*dc[del];\n                            if((0<=r4 && r4<R && 0<=c4 && c4<C)) \/\/found arrow\n                            {\n                                found = true;\n                                break;\n                            }\n                        }\n                        if(!found)\n                            possible=false;\n                        else\n                            ++total;\n                    }\n                }\n            }\n            \n            if(possible)\n                System.out.println(\"Case #\"+T+\": \"+total);\n            else\n                System.out.println(\"Case #\"+T+\": IMPOSSIBLE\");\n        }\n            \n    }\n}"}
{"idx":"827","func":"class Pegman {\n\n  static int n;\n  static int l;\n  static int ans;\n\n  static int r, c;\n\n  public static void main(String[] args) throws FileNotFoundException {\n            Scanner cin = new Scanner(new File(\"A-small-attempt0.in\"));\n            PrintStream cout = new PrintStream(\"A-small-attempt0.out\");\n    \/\/        Scanner cin = new Scanner(new File(\"A-large-practice.in\"));\n    \/\/        PrintStream cout = new PrintStream(\"A-large-practice.out\");\n\/\/    Scanner cin = new Scanner(System.in);\n\/\/    PrintStream cout = System.out;\n\n    int _case = 0;\n\n    int[] dx = { 0, 0, 1, -1 };\n    int[] dy = { 1, -1, 0, 0 };\n    for (int T = cin.nextInt(); T > 0; T--) {\n      _case++;\n      r = cin.nextInt();\n      c = cin.nextInt();\n      char[][] a = new char[r][];\n      for (int i = 0; i < r; i++)\n        a[i] = cin.next().toCharArray();\n\n      int ans = 0;\n      for (int i = 0; i < r; i++)\n        for (int j = 0; j < c; j++) {\n          if (a[i][j] != '.') {\n            boolean good = false;\n            int dir = 0;\n            if (a[i][j] == '>')\n              dir = 0;\n            else if (a[i][j] == '<')\n              dir = 1;\n            else if (a[i][j] == 'v')\n              dir = 2;\n            else\n              dir = 3;\n\n            for (int x = i + dx[dir], y = j + dy[dir]; x >= 0 && x < r && y >= 0 && y < c; x += dx[dir], y += dy[dir]) {\n              if (a[x][y] != '.') {\n                good = true;\n                break;\n              }\n            }\n\n            if (good)\n              continue;\n            else {\n              boolean found = false;\n              for (int k = 0; k < 4; k++) {\n                for (int x = i + dx[k], y = j + dy[k]; x >= 0 && x < r && y >= 0 && y < c; x += dx[k], y += dy[k])\n                  if (a[x][y] != '.') {\n                    found = true;\n                    break;\n                  }\n              }\n              if (!found) {\n                ans = Integer.MAX_VALUE;\n              } else {\n                ans++;\n              }\n            }\n          }\n        }\n\n      if (ans == Integer.MAX_VALUE)\n        cout.printf(\"Case #%d: IMPOSSIBLE%n\", _case);\n      else\n        cout.printf(\"Case #%d: %d%n\", _case, ans);\n\n    }\n\n    cin.close();\n    cout.close();\n  }\n}"}
{"idx":"828","func":"class a {\npublic static void main(String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int T = input.nextInt();\n    for(int t = 0; t<T; t++)\n    {\n        System.out.print(\"Case #\"+(t+1)+\": \");\n        int n = input.nextInt(), m = input.nextInt();\n        char[][] grid = new char[n][m];\n        for(int i = 0; i<n; i++) grid[i] = input.next().toCharArray();\n        boolean poss = true;\n        int[][] count = new int[n][m];\n        boolean[][] bad = new boolean[n][m];\n        int[] di = new int[]{0, 1, 0, -1};\n        int[] dj = new int[]{1, 0, -1, 0};\n        char[] cs = new char[]{'>','v','<','^'};\n        for(int i = 0; i<n; i++)\n            for(int j = 0; j<m; j++)\n            {\n                if(grid[i][j] == '.') continue;\n                for(int k = 0; k<4; k++)\n                {\n                    boolean edge = false;\n                    int ati = i, atj = j;\n                    while(true)\n                    {\n                        ati += di[k];\n                        atj += dj[k];\n                        if(ati < 0 || atj < 0 || ati >= n || atj >= m)\n                        {\n                            edge = true;\n                            break;\n                        }\n                        if((ati != i || atj != j) && grid[ati][atj] != '.') break;\n                    }\n                    if(edge)\n                    {\n                        count[i][j]++;\n                        if(grid[i][j] == cs[k]) bad[i][j] = true;\n                    }\n                }\n            }\n        int res = 0;\n        for(int i = 0; i<n && res != -1; i++)\n            for(int j = 0; j<m && res != -1; j++)\n            {\n                if(bad[i][j]) res++;\n                if(count[i][j] == 4) res = -1;\n                \n            }\n        System.out.println(res == -1 ? \"IMPOSSIBLE\" : res);\n    }\n}\n}"}
{"idx":"829","func":"class ProblemA {\n        \n    public static void main(String[] args) throws NumberFormatException, IOException {\n        FileWriter writer = new FileWriter(\"C:\/Users\/Max\/Documents\/Java Workspaces\/Google Code Jam\/Round 2 2015\/src\/output.txt\");        \n        try {\n            BufferedReader br = new BufferedReader(new FileReader(\"C:\/Users\/Max\/Documents\/Java Workspaces\/Google Code Jam\/Round 2 2015\/src\/input.txt\"));\n            int numCases = Integer.parseInt(br.readLine());\n            for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n                String line = br.readLine();\n                Scanner sc = new Scanner(line);\n                int r = sc.nextInt();\n                int c = sc.nextInt();\n                char[][] grid = new char[r][c];\n                for(int i = 0; i < r; i++){\n                    line = br.readLine();\n                    for(int j = 0; j < c; j++){\n                        grid[i][j] = line.charAt(j);\n                    }\n                }\n                int needsChanging = 0;\n                boolean[][] needChangeRow = new boolean[r][c];\n                boolean[][] needChangeCol = new boolean[r][c];\n                boolean[][] impossibleRow = new boolean[r][c];\n                boolean[][] impossibleCol = new boolean[r][c];\n                for(int i = 0; i < r; i++){\n                    int firstCol = 0;\n                    while(firstCol < c && grid[i][firstCol] == '.'){\n                        firstCol++;\n                    }\n                    if(firstCol < c && grid[i][firstCol] != '>'){\n                        needChangeRow[i][firstCol] = true;\n                    }\n                    int lastCol = c - 1;\n                    while(lastCol >= 0 && grid[i][lastCol] == '.'){\n                        lastCol--;\n                    }\n                    if(lastCol >= 0 && grid[i][lastCol] != '<'){\n                        needChangeRow[i][lastCol] = true;\n                    }\n                    if(firstCol == lastCol){\n                        impossibleRow[i][firstCol] = true;\n                    }\n                    for(int j = firstCol + 1; j < lastCol; j++){\n                        if(grid[i][j] == 'v' || grid[i][j] == '^'){\n                            needChangeRow[i][j] = true;\n                        }\n                    }\n                }\n                for(int j = 0; j < c; j++){\n                    int firstRow = 0;\n                    while(firstRow < r && grid[firstRow][j] == '.'){\n                        firstRow++;\n                    }\n                    if(firstRow < r && grid[firstRow][j] != 'v'){\n                        needChangeCol[firstRow][j] = true;\n                    }\n                    int lastRow = r - 1;\n                    while(lastRow >= 0 && grid[lastRow][j] == '.'){\n                        lastRow--;\n                    }\n                    if(lastRow >= 0 && grid[lastRow][j] != '^'){\n                        needChangeCol[lastRow][j] = true;\n                    }\n                    if(firstRow == lastRow){\n                        impossibleCol[firstRow][j] = true;\n                    }\n                    for(int i = firstRow + 1; i < lastRow; i++){\n                        if(grid[i][j] == '<' || grid[i][j] == '>'){\n                            needChangeCol[i][j] = true;\n                        }\n                    }\n                }\n                boolean impossible = false;\n                for(int i = 0; i < r; i++){\n                    for(int j = 0; j < c; j++){\n                        if(needChangeCol[i][j] && needChangeRow[i][j]){\n                            needsChanging++;\n                        }\n                        if(impossibleRow[i][j] && impossibleCol[i][j]){\n                            impossible = true;\n                        }\n                    }\n                }\n                if(impossible){\n                    writer.write(\"Case #\" + caseNum + \": \" + \"IMPOSSIBLE\" + \"\\n\");\n                } else {\n                    writer.write(\"Case #\" + caseNum + \": \" + \"\" + needsChanging + \"\\n\");\n                }\n                \n            }\n            br.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        writer.close();\n    }\n}"}
{"idx":"830","func":"class A {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        int T = in.nextInt();\n\n        for (int t = 1; t <= T; t++) {\n            int res = 0;\n            int R = in.nextInt();\n            int C = in.nextInt();\n            in.nextLine();\n\n            char[][] board = new char[R][C];\n            int[] rowArrows = new int[R];\n            int[] colArrows = new int[C];\n\n            for (int r = 0; r < R; r++) {\n                board[r] = in.nextLine().toCharArray();\n            }\n\n            for (int r = 0; r < R; r++) {\n                boolean first = true;\n                char lastArrow = '.';\n                for (int c = 0; c < C; c++) {\n                    if (board[r][c] != '.') {\n                        if (first && board[r][c] == '<') {\n                            res++;\n                        }\n                        first = false;\n                        lastArrow = board[r][c];\n                        rowArrows[r]++;\n                    }\n                }\n                if (lastArrow == '>') {\n                    res++;\n                }\n            }\n\n            for (int c = 0; c < C; c++) {\n                boolean first = true;\n                char lastArrow = '.';\n                for (int r = 0; r < R; r++) {\n                    if (board[r][c] != '.') {\n                        if (first && board[r][c] == '^') {\n                            res++;\n                        }\n                        first = false;\n                        lastArrow = board[r][c];\n                        colArrows[c]++;\n                    }\n                }\n                if (lastArrow == 'v') {\n                    res++;\n                }\n            }\n\n            boolean imp = false;\n            for (int r = 0; r < R; r++) {\n                for (int c = 0; c < C; c++) {\n                    if (board[r][c] != '.') {\n                        if (rowArrows[r] == 1 && colArrows[c] == 1) {\n                            imp = true;\n                            break;\n                        }\n                    }\n                }\n                if (imp) {\n                    break;\n                }\n            }\n            \n            if (imp) {\n                System.out.format(\"Case #%d: IMPOSSIBLE\\n\", t);\n            } else {\n                System.out.format(\"Case #%d: %d\\n\", t, res);\n            }\n\n        }\n\n        in.close();\n    }\n\n}"}
{"idx":"831","func":"class Pegman {\n    static int c;\n    static char[][] arr;\n\n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new FileReader(\"in.in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"out.out\"));\n        int t = Integer.parseInt(br.readLine());\n        for(c = 1; c <= t; c++){\n            bw.write(\"Case #\" + c + \": \");\n            String line = br.readLine();\n            String[] fields = line.split(\" \");\n            int r = Integer.parseInt(fields[0]);\n            int c = Integer.parseInt(fields[1]);\n            arr = new char[r][c];\n            for(int i = 0; i < r; i++){\n                line = br.readLine();\n                for(int j = 0; j < c; j++){\n                    arr[i][j] = line.charAt(j);\n                }\n            }\n            boolean viable = true;\n            int count = 0;\n            for(int i = 0; i < r; i++){\n                for(int j = 0; j < c; j++){\n                    if(arr[i][j] != '.'){\n                        boolean found = false;\n                        if(arr[i][j] == '>'){\n                            for(int k = j + 1; k < c; k++){\n                                if(arr[i][k] != '.'){\n                                    found = true;\n                                    break;\n                                }\n                            }\n                        }\n                        else if(arr[i][j] == '<'){\n                            for(int k = j - 1; k >= 0; k--){\n                                if(arr[i][k] != '.'){\n                                    found = true;\n                                    break;\n                                }\n                            }\n                        }\n                        else if(arr[i][j] == 'v'){\n                            for(int k = i + 1; k < r; k++){\n                                if(arr[k][j] != '.'){\n                                    found = true;\n                                    break;\n                                }\n                            }\n                        }\n                        else if(arr[i][j] == '^'){\n                            for(int k = i - 1; k >= 0; k--){\n                                if(arr[k][j] != '.'){\n                                    found = true;\n                                    break;\n                                }\n                            }\n                        }\n                        if(found){\n                            continue;\n                        }\n                        boolean works = false;\n                        for(int k = 0; k < r; k++){\n                            if(k == i) continue;\n                            if(arr[k][j] != '.'){\n                                works = true;\n                                break;\n                            }\n                        }\n                        for(int k = 0; k < c; k++){\n                            if(k == j) continue;\n                            if(arr[i][k] != '.'){\n                                works = true;\n                                break;\n                            }\n                        }\n                        if(works){\n                            count++;\n                        }\n                        else{\n                            viable = false;\n                            break;\n                        }\n                    }\n                }\n                if(!viable) break;\n            }\n            if(viable){\n                bw.write(count + \"\\n\");\n            }\n            else{\n                bw.write(\"IMPOSSIBLE\\n\");\n            }\n\n        }\n        br.close();\n        bw.close();\n    }\n\n\n\n\n\n\n\n\n\n}"}
{"idx":"832","func":"class Main {\n    public static void main(String[] args) {\n        try {\n            Scanner in = new Scanner(new File(\"a.in\"));\n            PrintStream out = new PrintStream(\"a.out\");\n            int T = in.nextInt();\n            System.out.println(T);\n            for(int C=1;C<=T;C++){\n                System.out.println(\"case:\"+C);\n                int M = in.nextInt();\n                int N = in.nextInt();\n                char[][] mat = new char[M][N];\n                in.nextLine();\n                for(int i=0;i<M;i++){\n                    String temp = in.nextLine();\n                    for(int j=0;j<N;j++)\n                        mat[i][j] = temp.charAt(j);\n                }\n                int ans = 0;\n                boolean res = true;\n                for(int i=0;i<M;i++){\n                    for(int j=0;j<N;j++){\n                        if (mat[i][j]!='.'){\n                            boolean[] dir = new boolean[4];\n                            for(int x=0;x<i;x++)\n                                if (mat[x][j]!='.') {\n                                    dir[0] = true;\n                                    break;\n                                }\n                            for(int x=i+1;x<M;x++)\n                                if (mat[x][j]!='.') {\n                                    dir[1] = true;\n                                    break;\n                                }\n                            for(int y=0;y<j;y++)\n                                if (mat[i][y]!='.'){\n                                    dir[2] = true;\n                                    break;\n                                }\n                            for(int y=j+1;y<N;y++)\n                                if (mat[i][y]!='.'){\n                                    dir[3] = true;\n                                    break;\n                                }\n                            boolean can = false;\n                            for(int d=0;d<4;d++)\n                                if (dir[d]) can = true;\n                            if(!can){\n                                res = false;\n                                break;\n                            }\n                            if (mat[i][j]=='^' && dir[0]) continue;\n                            if (mat[i][j]=='v' && dir[1]) continue;\n                            if (mat[i][j]=='<' && dir[2]) continue;\n                            if (mat[i][j]=='>' && dir[3]) continue;\n                            ans++;\n                        }\n                    }\n                    if (!res) break;\n                }\n                if (!res) out.println(\"Case #\"+C+\": IMPOSSIBLE\");\n                else out.println(\"Case #\"+C+\": \"+ans);\n            }\n            in.close();\n            out.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"833","func":"class ProbA {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int numcases = sc.nextInt();\n        for(int curcase = 1; curcase<=numcases; curcase++)\n        {\n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            sc.nextLine();\n            int [][] board = new int[R][C];\n            HashSet[][] restrictions = new HashSet[R][C];\n            for(int i=0;i<R;i++)\n            {\n                String s = sc.nextLine();\n                \n                for(int j=0;j<C;j++)\n                {\n                    restrictions[i][j] = new HashSet();\n                    if(s.charAt(j)=='^')\n                    board[i][j] = 1;\n                    if(s.charAt(j)=='>')\n                    board[i][j] = 2;\n                    if(s.charAt(j)=='v')\n                    board[i][j] = 3;\n                    if(s.charAt(j)=='<')\n                    board[i][j] = 4;                    \n                }\n            }\n\n            for(int i=0;i<R;i++)\n            {\n                    for(int j=0;j<C;j++)\n                    {\n                        if(board[i][j]!=0)\n                        {\n                            restrictions[i][j].add(4);\n                            break;\n                        }\n                    }\n                    for(int j=C-1;j>=0;j--)\n                    {\n                        if(board[i][j]!=0)\n                        {\n                            restrictions[i][j].add(2);\n                            break;\n                        }\n                    }\n            }\n            \n            for(int j=0;j<C;j++)\n            {\n                    for(int i=0;i<R;i++)\n                    {\n                        if(board[i][j]!=0)\n                        {\n                            restrictions[i][j].add(1);\n                            break;\n                        }\n                    }\n                    for(int i=R-1;i>=0;i--)\n                    {\n                        if(board[i][j]!=0)\n                        {\n                            restrictions[i][j].add(3);\n                            break;\n                        }\n                    }\n            }\n            \n            long count = 0;\n            LOOP:\n            for(int i=0;i<R;i++)\n            {\n                for(int j=0;j<C;j++)\n                {\n                    if(restrictions[i][j].size()==4)\n                    {\n                        count = Long.MAX_VALUE;\n                        break LOOP;\n                    }else{\n                        if(restrictions[i][j].contains(board[i][j]))\n                            count++;\n                    }\n                    \n                }\n            }\n                        \n            if(count < Long.MAX_VALUE)\n            System.out.println(\"Case #\"+curcase+\": \"+count);\n            else\n            System.out.println(\"Case #\"+curcase+\": IMPOSSIBLE\");\n        }\n    }\n}"}
{"idx":"834","func":"class A {\nstatic int dx[] = {0, -1, 0, 1, 0};\nstatic int dy[] = {0, 0, 1, 0, -1};\npublic static void main(String [] args) {\n    Scanner scanner = new Scanner(System.in);\n    int nCase = scanner.nextInt();\n    \n    for (int nc = 1; nc <= nCase; nc++) {\n        int R = scanner.nextInt();\n        int C = scanner.nextInt();\n        scanner.nextLine();\n        \n        char[][] map = new char[R][C];\n        \n        for (int i = 0; i < R; i++) {\n            String in = scanner.nextLine();\n            for (int j = 0; j < C; j++)\n                switch (in.charAt(j)) {\n                    case '.':\n                        map[i][j] = 0;\n                        break;\n                    case '^':\n                        map[i][j] = 1;\n                        break;\n                    case '>':\n                        map[i][j] = 2;\n                        break;\n                    case 'v':\n                        map[i][j] = 3;\n                        break;\n                    case '<':\n                        map[i][j] = 4;\n                        break;\n                }\n        }\n        \n        int ans = 0;\n        \n        for (int i = 0; i < R && ans >= 0; i++)\n            for (int j = 0; j < C; j++)\n                if (map[i][j] > 0) {\n                    int R1 = map.length;\n                    int C1 = map[0].length;    \n                    int oldDir = map[i][j];\n                    int ans1 = -1;\n                    for (int dir = 1; dir <= 4 && ans1 != 0; dir++) {\n                        int nx = i + dx[dir];\n                        int ny = j + dy[dir];\n                        while (0 <= nx && nx < R1 && 0 <= ny && ny < C1) {\n                            if (map[nx][ny] > 0) {\n                                if (dir == oldDir) {\n                                    ans1 = 0;\n                                    break;\n                                } else {\n                                    ans1 = 1;\n                                    break;\n                                }\n                            }\n                            nx = nx + dx[dir];\n                            ny = ny + dy[dir];\n                        }\n                        \/\/System.out.printf(\"x:%d y:%d oldDir:%d dir:%d ans:%d\", x, y, oldDir, dir, ans);\n                    }\n                    int need = ans1;\n                    if (need < 0) {\n                        ans = -1;\n                        break;\n                    } else\n                        ans += need;\n                }\n                    \n        if (ans >= 0)\n            System.out.println(\"Case #\" + nc + \": \" + ans);\n        else\n            System.out.println(\"Case #\" + nc + \": IMPOSSIBLE\");\n    }\n}\n}"}
{"idx":"835","func":"class A {\n\n    final boolean DEBUG = false;\n    final boolean isSmall = false;\n    final String PACKAGE = \"gcj2015\/r2\";\n    final String PROBLEM = \"A\";\n    \n    int[][] d = {{-1, 0},{0,1},{1,0},{0,-1}};\n    \n    public static void main(String[] args) {\n        A r = new A();\n        if(!r.DEBUG){\n            try {\n                if(r.isSmall)System.setIn(new FileInputStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-small-attempt1.in\")));\n                else System.setIn(new FileInputStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-large.in\")));\n                if(r.isSmall)System.setOut(new PrintStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-small_out.txt\")));\n                else System.setOut(new PrintStream(new File(\".\/src\/\"+r.PACKAGE+\"\/\"+r.PROBLEM+\"-large_out.txt\")));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int CASE=1;CASE<=T;CASE++){\n            int r1 = sc.nextInt(), c = sc.nextInt();\n            char[][] map = new char[r1][];\n            int[] countR = new int[r1], countC = new int[c];\n            for(int i=0;i<r1;i++){\n                map[i]=sc.next().toCharArray();\n                for(int j=0;j<c;j++)if(map[i][j]!='.'){\n                    countR[i]++; countC[j]++;\n                }\n            }\n            boolean imp = false;\n            for(int i=0;i<r1;i++)for(int j=0;j<c;j++)if(map[i][j]!='.'){\n                int rc = 0, rb = 0;\n                for(int k=0;k<c;k++)if(map[i][k]!='.')rc++;\n                for(int k=0;k<r1;k++)if(map[k][j]!='.')rb++;\n                if(rc==1 && rb==1)imp=true;\n            }\n            if(imp){\n                System.out.println(\"Case #\"+CASE+\": IMPOSSIBLE\"); continue;\n            }\n            \n            int res = 0;\n            for(int i=0;i<r1;i++)for(int j=0;j<c;j++)if(map[i][j]!='.'){\n                \n                int k = 0;\n                switch(map[i][j]){\n                case '^': k = 0; break;\n                case '>': k = 1; break;\n                case 'v': k = 2; break;\n                case '<': k = 3; break;\n                }\n                int pi = i+r.d[k][0], pj = j+r.d[k][1];\n                boolean out = true;\n                \n                while(0 <= pi && pi < r1 && 0 <= pj && pj < c){\n                    if(map[pi][pj]!='.'){\n                        out = false; break;\n                    }\n                    pi+=r.d[k][0]; pj+=r.d[k][1];\n                }\n                if(out)res++;\n            }\n            \n            System.out.println(\"Case #\"+CASE+\": \"+res);\n        }\n    }\n}"}
{"idx":"836","func":"class A\n{\n    static int[] dr = {0, -1, 0, 1};\n    static int[] dc = {1, 0, -1, 0};\n\n    public static void main(String args[])\n    {\n        Scanner scan = new Scanner(System.in);\n\n        int T = scan.nextInt();\n        for(int ca=1;ca <= T;ca++)\n        {\n            int R = scan.nextInt();\n            int C = scan.nextInt();\n            char[][] a = new char[R][C];\n            for(int i=0;i < R;i++)\n            {\n                String str = scan.next();\n                for(int j=0;j < C;j++)\n                    a[i][j] = str.charAt(j);\n            }\n\n            int ans = 0;\n            boolean poss = true;\n\n            for(int i=0;i < R;i++)\n            for(int j=0;j < C;j++)\n            {\n                if(a[i][j] == '.') continue;\n\n                int dd = -1;\n                switch(a[i][j])\n                {\n                    case '>': dd = 0; break;\n                    case '^': dd = 1; break;\n                    case '<': dd = 2; break;\n                    case 'v': dd = 3; break;\n                }\n\n                boolean safe = false;\n                for(int ddd=0;ddd < 4;ddd++)\n                {\n                    int r = i;\n                    int c = j;\n                    while(true)\n                    {\n                        r += dr[ddd];\n                        c += dc[ddd];\n                        if (r >= 0 && r < R && c >= 0 && c < C)\n                        {\n                            if(a[r][c] != '.')\n                            {\n                                safe = true;\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            if(ddd == dd) \n                            {\n                                ans++;\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                poss &= safe;\n            }\n\n            System.out.println(\"Case #\" + ca + \": \" + (poss ? ans : \"IMPOSSIBLE\"));\n        }\n    }\n}"}
{"idx":"837","func":"class A2 {\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\n        int ntests = Integer.parseInt(bf.readLine());\n        for (int tc = 1; tc <= ntests; tc++) {\n            String[] line = bf.readLine().split(\" \");\n            int r = Integer.parseInt(line[0]);\n            int c = Integer.parseInt(line[1]);\n            char[][] grid = new char[r][];\n            for (int i = 0; i < r; i++) {\n                grid[i] = bf.readLine().toCharArray();\n            }\n\n            boolean isImpossible = false;\n            int numChanged = 0;\n            int[][] dirs = { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 } };\n            \/\/ this is n^3, but we could make it faster if we wanted\n            for (int i = 0; i < r; i++) {\n                for (int j = 0; j < c; j++) {\n                    int curDir = 0;\n                    switch (grid[i][j]) {\n                    case '.':\n                        \/\/ safe, nothing to do\n                        continue;\n                    case '^':\n                        curDir = 0;\n                        break;\n                    case '>':\n                        curDir = 1;\n                        break;\n                    case 'v':\n                        curDir = 2;\n                        break;\n                    case '<':\n                        curDir = 3;\n                        break;\n                    }\n\n                    boolean hasArrowInCurDir = false;\n                    for (int[] pos = { i + dirs[curDir][0], j + dirs[curDir][1] }; pos[0] >= 0 && pos[1] >= 0 && pos[0] < r\n                            && pos[1] < c; pos[0] += dirs[curDir][0], pos[1] += dirs[curDir][1]) {\n                        if (grid[pos[0]][pos[1]] != '.') {\n                            hasArrowInCurDir = true;\n                            break;\n                        }\n                    }\n                    if (!hasArrowInCurDir) {\n                        for (int otherDirs = 0; otherDirs <= 3; otherDirs++) {\n                            if (otherDirs == curDir)\n                                continue;\n\n                            for (int[] pos = { i + dirs[otherDirs][0], j + dirs[otherDirs][1] }; pos[0] >= 0 && pos[1] >= 0\n                                    && pos[0] < r && pos[1] < c; pos[0] += dirs[otherDirs][0], pos[1] += dirs[otherDirs][1]) {\n                                if (grid[pos[0]][pos[1]] != '.') {\n                                    hasArrowInCurDir = true;\n                                    break;\n                                }\n                            }\n\n                            if (hasArrowInCurDir) {\n                                break;\n                            }\n                        }\n\n                        if (hasArrowInCurDir) {\n                            numChanged++;\n                        } else {\n                            isImpossible = true;\n                        }\n                    }\n                }\n            }\n\n            if (isImpossible) {\n                System.out.println(\"Case #\" + tc + \": \" + \"IMPOSSIBLE\");\n            } else {\n                System.out.println(\"Case #\" + tc + \": \" + numChanged);\n            }\n        }\n    }\n}"}
{"idx":"838","func":"class Gcj1 {\n    static final char LEFT = '<', RIGHT = '>', DOWN = 'v', UP = '^', DOT = '.';\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"output1.txt\"));\n        int nrT = Integer.parseInt(br.readLine());\n\n        for (int testNr = 1; testNr <= nrT; testNr++) {\n            String[] strs = br.readLine().split(\" \");\n            int r = Integer.parseInt(strs[0]);\n            int c = Integer.parseInt(strs[1]);\n            int[][] map = new int[r][c];\n            for (int i = 0; i < map.length; i++) {\n                String str = br.readLine();\n                for (int j = 0; j < c; j++) {\n                    map[i][j] = str.charAt(j);\n                }\n            }\n\n            boolean impossibleCase = false;\n            for (int i = 0; i < map.length && !impossibleCase; i++) {\n                for (int j = 0; j < map[i].length && !impossibleCase; j++) {\n                    if (map[i][j] == DOT) {\n                        continue;\n                    }\n                    boolean isOk = false;\n                    for (int k = 0; k < map.length; k++) {\n                        if (k == i) {\n                            continue;\n                        }\n                        if (map[k][j] != DOT) {\n                            isOk = true;\n                            break;\n                        }\n                    }\n                    if (isOk) {\n                        continue;\n                    }\n                    for (int k = 0; k < map[0].length; k++) {\n                        if (k == j) {\n                            continue;\n                        }\n                        if (map[i][k] != DOT) {\n                            isOk = true;\n                            break;\n                        }\n                    }\n                    if (!isOk) {\n                        impossibleCase = true;\n                        break;\n                    }\n                }\n            }\n\n            if (impossibleCase) {\n                pw.println(\"Case #\" + testNr + \": IMPOSSIBLE\");\n                continue;\n            }\n\n            int res = 0;\n            for (int i = 0; i < map.length && !impossibleCase; i++) {\n                for (int j = 0; j < map[i].length && !impossibleCase; j++) {\n                    if (map[i][j] == DOT) {\n                        continue;\n                    }\n                    boolean needsChange = true;\n                    if (map[i][j] == RIGHT) {\n                        for (int k = j + 1; k < map[i].length; k++) {\n                            if (map[i][k] != DOT) {\n                                needsChange = false;\n                                break;\n                            }\n                        }\n                    } else if (map[i][j] == LEFT) {\n                        for (int k = 0; k < j; k++) {\n                            if (map[i][k] != DOT) {\n                                needsChange = false;\n                                break;\n                            }\n                        }\n                    } else if (map[i][j] == UP) {\n                        for (int k = 0; k < i; k++) {\n                            if (map[k][j] != DOT) {\n                                needsChange = false;\n                                break;\n                            }\n                        }\n                    } else if (map[i][j] == DOWN) {\n                        for (int k = i + 1; k < map.length; k++) {\n                            if (map[k][j] != DOT) {\n                                needsChange = false;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (needsChange) {\n                        res++;\n                    }\n                }\n            }\n\n            pw.println(\"Case #\" + testNr + \": \" + res);\n        }\n        br.close();\n        pw.close();\n\n        System.out.println(\"done!\");\n    }\n}"}
{"idx":"839","func":"class A {\n\n  static final String FILENAME = \"A-large\";\n  static final String IN = FILENAME + \".in\";\n  static final String OUT = FILENAME + \".out\";\n  Scanner sc;\n  BufferedWriter out;\n\n  public static void main(String args[]) throws Exception {\n    A r = new A();\n    r.sc = new Scanner(new File(A.IN));\n    r.out = new BufferedWriter(new FileWriter(A.OUT));\n    int t = Integer.parseInt(r.sc.nextLine());\n    for (int i = 1; i <= t; i++) {\n      r.out.write(\"Case #\" + i + \": \");\n      int r1 = r.sc.nextInt();\n    int c = r.sc.nextInt();\n    String[] map = new String[r1];\n    for (int i2 = 0; i2 < r1; i2++) {\n      map[i2] = r.sc.next();\n    }\n    boolean[][][] limit = new boolean[r1][c][4];\n    for (int i4 = 0; i4 < r1; i4++) {\n      int j = 0;\n      \/\/ left\n      for (j = 0; j < c; j++) {\n        if (map[i4].charAt(j) != '.') {\n          break;\n        }\n      }\n      if (j < c) {\n        limit[i4][j][0] = true;\n      }\n      \/\/ right\n      for (j = c - 1; j >= 0; j--) {\n        if (map[i4].charAt(j) != '.') {\n          break;\n        }\n      }\n      if (j >= 0) {\n        limit[i4][j][1] = true;\n      }\n    }\n    for (int j = 0; j < c; j++) {\n      int i1 = 0;\n      \/\/ top\n      for (i1 = 0; i1 < r1; i1++) {\n        if (map[i1].charAt(j) != '.') {\n          break;\n        }\n      }\n      if (i1 < r1) {\n        limit[i1][j][2] = true;\n      }\n      \/\/ bottom\n      for (i1 = r1 - 1; i1 >= 0; i1--) {\n        if (map[i1].charAt(j) != '.') {\n          break;\n        }\n      }\n      if (i1 >= 0) {\n        limit[i1][j][3] = true;\n      }\n    }\n    int res = 0;\n    boolean ok = true;\n    for (int i3 = 0; i3 < r1; i3++) {\n      for (int j = 0; j < c; j++) {\n        if (limit[i3][j][0] && limit[i3][j][1] && limit[i3][j][2] && limit[i3][j][3]) {\n          ok = false;\n          break;\n        }\n        switch (map[i3].charAt(j)) {\n          case '<':\n            if (limit[i3][j][0]) {\n              res++;\n            }\n            break;\n          case '>':\n            if (limit[i3][j][1]) {\n              res++;\n            }\n            break;\n          case '^':\n            if (limit[i3][j][2]) {\n              res++;\n            }\n            break;\n          case 'v':\n            if (limit[i3][j][3]) {\n              res++;\n            }\n          default:\n            break;\n        }\n      }\n    }\n    r.out.write(ok ? Integer.toString(res) : \"IMPOSSIBLE\");\n    r.out.newLine();\n    r.out.flush();\n    }\n    r.sc.close();\n    r.out.close();\n  }\n}"}
{"idx":"840","func":"class A {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\nnextcase:\n        for (int zz = 1; zz <= T; zz++) {\n            int R = in.nextInt();\n            int C = in.nextInt();\n            int[][] G = new int[R][C];\n            for (int i = 0; i < R; i++) {\n                String S = in.next();\n                for (int j = 0; j < C; j++) {\n                    char c = S.charAt(j);\n                    if (c == '.')\n                        G[i][j] = EMPTY;\n                    else if (c == '<')\n                        G[i][j] = LEFT;\n                    else if (c == '>')\n                        G[i][j] = RIGHT;\n                    else if (c == 'v')\n                        G[i][j] = DOWN;\n                    else if (c == '^')\n                        G[i][j] = UP;\n                }\n            }\n            int ans = 0;\n            for (int r = 0; r < R; r++) {\n                for (int c = 0; c < C; c++) {\n                    if (G[r][c] == EMPTY)\n                        continue;\n                    boolean[] ok = new boolean[4];\n                    boolean any = false;\n                    for (int d = 0; d < 4; d++) {\n                        int nr = r + dr[d];\n                        int nc = c + dc[d];\n                        ok[d] = false;\n                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {\n                            if (G[nr][nc] != EMPTY) {\n                                ok[d] = true;\n                                any = true;\n                                break;\n                            }\n                            nr += dr[d];\n                            nc += dc[d];\n                        }\n                    }\n                    if (!any) {\n                        System.out.format(\"Case #%d: IMPOSSIBLE\\n\", zz);\n                        continue nextcase;\n                    }\n                    if (!ok[G[r][c]-1]) {\n                        ans++;\n                    }\n                }\n            }\n            System.out.format(\"Case #%d: %d\\n\", zz, ans);\n        }\n    }\n    static int[] dr = {-1, 0, 1, 0};\n    static int[] dc = {0, -1, 0, 1};\n    static int EMPTY = 0;\n    static int UP = 1;\n    static int LEFT = 2;\n    static int DOWN = 3;\n    static int RIGHT = 4;\n}"}
{"idx":"841","func":"class A {\n    \n    PrintWriter out;\n    \n    int R, C;\n    char[][] cs;\n    \n    char[] D = {'^', '<', 'v', '>'};\n    int[] dx = {1, 0, -1, 0}, dy = {0, 1, 0, -1};\n    \n    public static int __ID = 0;\n    public static boolean __ERROR = false;\n    \n    public static void main(String[] args) {\n        int pN = 1;\n        if (args.length == 0) {\n            try {\n                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + \".in\")));\n            } catch (Exception e) {\n            }\n        } else {\n            pN = Integer.parseInt(args[0]);\n        }\n        PrintStream out = System.out;\n        System.setOut(null);\n        Scanner sc = new Scanner(System.in);\n        final int caseN = sc.nextInt();\n        final A[] solvers = new A[caseN];\n        StringWriter[] outs = new StringWriter[caseN];\n        for (int i = 0; i < caseN; i++) {\n            solvers[i] = new A();\n            outs[i] = new StringWriter();\n            solvers[i].out = new PrintWriter(outs[i]);\n            solvers[i].out.printf(\"Case #%d: \", i + 1);\n            A r = solvers[i];\n            r.R = sc.nextInt();\n            r.C = sc.nextInt();\n            r.cs = new char[r.R][];\n            for (int i1 = 0; i1 < r.R; i1++) r.cs[i1] = sc.next().toCharArray();\n        }\n        Thread[] ts = new Thread[pN];\n        for (int i = 0; i < pN; i++) {\n            ts[i] = new Thread() {\n                @Override\n                public void run() {\n                    for (;;) {\n                        int id;\n                        synchronized (A.class) {\n                            if (__ID == caseN) return;\n                            id = __ID++;\n                        }\n                        try {\n                            A r = solvers[id];\n                            boolean[][][] dame = new boolean[r.R][r.C][4];\n                            for (int d = 0; d < 4; d++) {\n                                for (int i = 0; i < r.R; i++) {\n                                    for (int j = 0; j < r.C; j++) {\n                                        int i1 = i - r.dx[d];\n                                        int i2 = j - r.dy[d];\n                                        if ((i == 0 || i == r.R - 1 || j == 0 || j == r.C - 1) && (!(0 <= i1 && i1 <= r.R - 1) || !(0 <= i2 && i2 <= r.C - 1))) {\n                                            int x = i, y = j;\n                                            while (0 <= x && x <= r.R - 1 && 0 <= y && y <= r.C - 1) {\n                                                if (r.cs[x][y] != '.') {\n                                                    dame[x][y][d] = true;\n                                                    break;\n                                                }\n                                                x += r.dx[d];\n                                                y += r.dy[d];\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            int res = 0;\n                            boolean impossible = false;\n                            for (int i = 0; i < r.R; i++) {\n                                for (int j = 0; j < r.C; j++) if (r.cs[i][j] != '.') {\n                                    boolean ok = true, can = false;\n                                    for (int k = 0; k < 4; k++) {\n                                        if (r.cs[i][j] == r.D[k] && dame[i][j][k]) ok = false;\n                                        if (!dame[i][j][k]) can = true;\n                                    }\n                                    if (!ok) res++;\n                                    if (!can) impossible = true;\n                                }\n                            }\n                            if (impossible) r.out.println(\"IMPOSSIBLE\");\n                            else r.out.println(res);\n                        } catch (RuntimeException e) {\n                            __ERROR = true;\n                            System.err.printf(\"Error in case %d:%n\", id + 1);\n                            e.printStackTrace();\n                        }\n                        solvers[id].out.flush();\n                        solvers[id] = null;\n                    }\n                }\n            };\n            ts[i].start();\n        }\n        for (int i = 0; i < pN; i++) {\n            try {\n                ts[i].join();\n            } catch (InterruptedException e) {\n                i--;\n                continue;\n            }\n        }\n        for (int i = 0; i < caseN; i++) {\n            out.print(outs[i].toString());\n        }\n        if (__ERROR) out.printf(\"%nError occured!!!%n\");\n    }\n    \n}"}
{"idx":"842","func":"class R2A {\npublic static void main(String[] args) {\n        String prblm=\"A\"; boolean fl=true;\n        String filein=prblm+\"-\"+((fl)?\"large\":\"small\")+\".in.txt\";\n        String fileout=prblm+\"-\"+((fl)?\"large\":\"small\")+\".out.txt\";\n        try {\n            BufferedReader fr= new BufferedReader(new FileReader(filein));\n            BufferedWriter fw= new BufferedWriter(new FileWriter(fileout));\n            String s=fr.readLine();\n            int T=Integer.parseInt(s);\n            for (int i = 1; i <= T; i++) {\n                s=fr.readLine();\n                String[] tok=s.split(\" \");\n                int R=Integer.parseInt(tok[0]);\n                int C=Integer.parseInt(tok[1]);\n                int[][] mt=new int[R][C];\n                for (int j = 0; j < R; j++) {\n                    s=fr.readLine();\n                    for (int h = 0; h < C; h++) {\n                        switch (s.charAt(h)){\n                        case '^': mt[j][h]=1; break;\n                        case '<': mt[j][h]=2; break;\n                        case 'v': mt[j][h]=3; break;\n                        case '>': mt[j][h]=4; break;\n                        }\n                    }\n                }\n                int nch=0;\n                int[][] mtd=new int[R][C];\n                for (int h = 0; h < C; h++) {\n                    int k=0;\n                    while (k<R && mt[k][h]==0) k++;\n                    if (k<R) { mtd[k][h]++;\n                        if (mt[k][h]==1) nch++;\n                    }\n                    k=R-1;\n                    while (k>=0 && mt[k][h]==0) k--;\n                    if (k>=0) { mtd[k][h]++;\n                        if (mt[k][h]==3) nch++;\n                    }                    \n                }\n                for (int j = 0; j < R; j++) {\n                    int k=0;\n                    while (k<C && mt[j][k]==0) k++;\n                    if (k<C) { mtd[j][k]++;\n                        if (mt[j][k]==2) nch++;\n                    }\n                    k=C-1;\n                    while (k>=0 && mt[j][k]==0) k--;\n                    if (k>=0) { mtd[j][k]++;\n                        if (mt[j][k]==4) nch++;\n                    }\n                }\n                boolean f=false;\n                for (int j = 0; j < R && !f; j++) {\n                    for (int h = 0; h < C && !f; h++) {\n                        if (mtd[j][h]==4) f=true;\n                    }\n                }\n                if (f) s=\"IMPOSSIBLE\";\n                else s=\"\"+nch;\n                System.out.println(s);\n                fw.write(\"Case #\"+i+\": \"+ s  +\"\\n\");\n            }\n            fr.close();\n            fw.close();\n        } catch (Exception e) {            \n            e.printStackTrace();\n        }        \n    }\n}"}
{"idx":"843","func":"class A {\n    public static void main(String[] args) throws IOException,\n            FileNotFoundException {\n        String file = \"A-large\";\n\n        Scanner scan = new Scanner(new BufferedReader(new FileReader(file\n                + \".in\")));\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(file\n                + \".out\")));\n\n        int T = Integer.parseInt(scan.nextLine());\n        for (int t = 1; t <= T; t++) {\n            String[] info = scan.nextLine().split(\" \");\n            int R = Integer.parseInt(info[0]);\n            int C = Integer.parseInt(info[1]);\n            char[][] grid = new char[R][C];\n            for (int r = 0; r < R; r++)\n                grid[r] = scan.nextLine().toCharArray();\n\n            char[] arrow = { '^', '>', 'v', '<' };\n            int[] dr = { -1, 0, 1, 0 };\n            int[] dc = { 0, 1, 0, -1 };\n            int cnt = 0;\n            boolean impossible = false;\n            for (int r = 0; r < R; r++)\n                for (int c = 0; c < C; c++)\n                    if (grid[r][c] != '.') {\n                        boolean stop = false;\n                        boolean found = false;\n                        for (int d = 0; d < 4; d++) {\n                            int nr = r, nc = c;\n                            while (true) {\n                                nr += dr[d];\n                                nc += dc[d];\n                                if (nr < 0 || nr >= R || nc < 0 || nc >= C)\n                                    break;\n                                if (grid[nr][nc] != '.') {\n                                    found = true;\n                                    if (arrow[d] == grid[r][c])\n                                        stop = true;\n                                    break;\n                                }\n                            }\n                        }\n                        if (!found)\n                            impossible = true;\n                        if (!stop)\n                            cnt++;\n                    }\n            if (impossible)\n                pw.println(\"Case #\" + t + \": IMPOSSIBLE\");\n            else\n                pw.println(\"Case #\" + t + \": \" + cnt);\n        }\n\n        scan.close();\n        pw.close();\n    }\n\n}"}
{"idx":"844","func":"class A {\n\n    static StringTokenizer st;\n    static BufferedReader br;\n    static PrintWriter pw;\n    static boolean[][]used;\n    \n    public static void main(String[] args) throws IOException{\n        br = new BufferedReader(new InputStreamReader(System.in));\n        pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        int test = Integer.parseInt(next());\n        for (int t = 1; t <= test; t++) {\n            System.out.print(\"Case #\"+t+\": \");\n            int n = Integer.parseInt(next());\n            int m = Integer.parseInt(next());\n            char[][]a = new char[n+1][m+1];\n            for (int i = 1; i <= n; i++) {\n                String s = next();\n                for (int j = 1; j <= m; j++) {\n                    a[i][j] = s.charAt(j-1);\n                }\n            }\n            int ans = 0;\n            for (int i = 1; i <= n; i++) {\n                for (int j = 1; j <= m; j++) {\n                    if (a[i][j] != '.') {\n                        boolean found = false;\n                        int add = 1;\n                        for (int k = i+1; k <= n; k++) {\n                            if (a[k][j] != '.') {\n                                if (a[i][j]=='v')\n                                    add = 0;\n                                found = true;\n                            }\n                        }\n                        for (int k = i-1; k >= 1; k--) {\n                            if (a[k][j] != '.') {\n                                if (a[i][j]=='^')\n                                    add = 0;\n                                found = true;\n                            }\n                        }\n                        for (int k = j+1; k <= m; k++) {\n                            if (a[i][k] != '.') {\n                                if (a[i][j]=='>')\n                                    add = 0;\n                                found = true;\n                            }\n                        }\n                        for (int k = j-1; k >= 1; k--) {\n                            if (a[i][k] != '.') {\n                                if (a[i][j]=='<')\n                                    add = 0;\n                                found = true;\n                            }\n                        }\n                        if (!found) {\n                            ans = -1;\n                            break;\n                        }\n                        ans += add;\n                    }\n                }\n            }\n            if (ans==-1)\n                System.out.println(\"IMPOSSIBLE\");\n            else {\n                System.out.println(ans);\n            }\n        }\n        pw.close();\n    }\n\n    private static String next() throws IOException{\n        while (st==null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine());\n        return st.nextToken();\n    }\n\n}"}
{"idx":"845","func":"class Pegman {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) throws Exception {\n        \/\/ TODO Auto-generated method stub\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));\n        StringTokenizer st;\n        int T=Integer.parseInt(br.readLine());\n        for(int cn=1;cn<=T;cn++){\n            st=new StringTokenizer(br.readLine());\n            int R=Integer.parseInt(st.nextToken());\n            int C=Integer.parseInt(st.nextToken());\n            char arr[][]=new char[R][C];\n            for(int i=0;i<R;i++){\n                String str=br.readLine();\n                for(int j=0;j<C;j++){\n                    arr[i][j]=str.charAt(j);\n                }\n            }\n            \/\/count how many point out\n            LinkedList<Integer> list=new LinkedList<Integer>();\n            for(int i=0;i<R;i++){\n                for(int j=0;j<C;j++){\n                    int dx=0, dy=0;\n                    if(arr[i][j]=='.')\n                        continue;\n                    else if(arr[i][j]=='^'){\n                        dx=-1;dy=0;\n                    }\n                    else if(arr[i][j]=='v'){\n                        dx=1;dy=0;\n                    }\n                    else if(arr[i][j]=='<'){\n                        dx=0;dy=-1;\n                    }\n                    else if(arr[i][j]=='>'){\n                        dx=0;dy=1;\n                    }\n                    int cx=i+dx, cy=j+dy;\n                    while(cx>=0&&cx<R&&cy>=0&&cy<C){\n                        if(arr[cx][cy]!='.')\n                            break;\n                        cx+=dx;\n                        cy+=dy;\n                    }\n                    if(cx<0||cx>=R||cy<0||cy>=C){\n                        list.add(i*100+j);\n                    }\n                }\n            }\n            \/\/find if can change direction\n            boolean okay=true;\n            for(int li:list){\n                int i=li\/100, j=li%100;\n                int dx[]={-1,1,0,0};\n                int dy[]={0,0,-1,1};\n                boolean found=false;\n                for(int dn=0;dn<4;dn++){\n                    int cx=i+dx[dn], cy=j+dy[dn];\n                    while(cx>=0&&cx<R&&cy>=0&&cy<C){\n                        if(arr[cx][cy]!='.'){\n                            found=true;\n                            break;\n                        }\n                        cx+=dx[dn];\n                        cy+=dy[dn];\n                    }\n                }\n                if(!found)\n                    okay=false;\n            }\n            \n            int ans=list.size();\n            if(okay)\n                bw.append(\"Case #\"+cn+\": \"+ans+\"\\n\");\n            else\n                bw.append(\"Case #\"+cn+\": IMPOSSIBLE\\n\");\n        }\n        bw.flush();\n    }\n\n}"}
{"idx":"846","func":"class A {\n    \n    PrintWriter out;\n    \n    int N, D;\n    long S0, As, Cs, Rs;\n    long M0, Am, Cm, Rm;\n    \n    int[] S;\n    int[] M;\n    \n    public static int __ID = 0;\n    public static boolean __ERROR = false;\n    \n    public static void main(String[] args) {\n        int pN = 1;\n        if (args.length == 0) {\n            try {\n                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + \".in\")));\n            } catch (Exception e) {\n            }\n        } else {\n            pN = Integer.parseInt(args[0]);\n        }\n        PrintStream out = System.out;\n        System.setOut(null);\n        Scanner sc = new Scanner(System.in);\n        final int caseN = sc.nextInt();\n        final A[] solvers = new A[caseN];\n        StringWriter[] outs = new StringWriter[caseN];\n        for (int i = 0; i < caseN; i++) {\n            solvers[i] = new A();\n            outs[i] = new StringWriter();\n            solvers[i].out = new PrintWriter(outs[i]);\n            solvers[i].out.printf(\"Case #%d: \", i + 1);\n            A r = solvers[i];\n            r.N = sc.nextInt();\n            r.D = sc.nextInt();\n            r.S0 = sc.nextLong();\n            r.As = sc.nextLong();\n            r.Cs = sc.nextLong();\n            r.Rs = sc.nextLong();\n            r.M0 = sc.nextLong();\n            r.Am = sc.nextLong();\n            r.Cm = sc.nextLong();\n            r.Rm = sc.nextLong();\n        }\n        Thread[] ts = new Thread[pN];\n        for (int i = 0; i < pN; i++) {\n            ts[i] = new Thread() {\n                @Override\n                public void run() {\n                    for (;;) {\n                        int id;\n                        synchronized (A.class) {\n                            if (__ID == caseN) return;\n                            id = __ID++;\n                        }\n                        try {\n                            A r = solvers[id];\n                            r.S = new int[r.N];\n                            r.M = new int[r.N];\n                            r.S[0] = (int)r.S0;\n                            r.M[0] = (int)r.M0;\n                            for (int i1 = 1; i1 < r.N; i1++) {\n                                r.S[i1] = (int)((r.S[i1 - 1] * r.As + r.Cs) % r.Rs);\n                                r.M[i1] = (int)((r.M[i1 - 1] * r.Am + r.Cm) % r.Rm);\n                            }\n                            r.M[0] = 0;\n                            for (int i2 = 1; i2 < r.N; i2++) r.M[i2] %= i2;\n                            int[] min = new int[r.N], max = new int[r.N];\n                            min[0] = max[0] = r.S[0];\n                            for (int i = 1; i < r.N; i++) {\n                                min[i] = max[i] = r.S[i];\n                                min[i] = min(min[i], min[r.M[i]]);\n                                max[i] = max(max[i], max[r.M[i]]);\n                            }\n                            int[] sum = new int[1000010];\n                            for (int i = 0; i < r.N; i++) if (min[i] + r.D >= max[i]) {\n                                sum[max(0, max[i] - r.D)]++;\n                                sum[min[i] + 1]--;\n                            }\n                            for (int i = 0; i < sum.length - 1; i++) {\n                                sum[i + 1] += sum[i];\n                            }\n                            int res = 0;\n                            for (int i = 0; i < sum.length; i++) res = max(res, sum[i]);\n                            r.out.println(res);\n                        } catch (RuntimeException e) {\n                            __ERROR = true;\n                            System.err.printf(\"Error in case %d:%n\", id + 1);\n                            e.printStackTrace();\n                        }\n                        solvers[id].out.flush();\n                        solvers[id] = null;\n                    }\n                }\n            };\n            ts[i].start();\n        }\n        for (int i = 0; i < pN; i++) {\n            try {\n                ts[i].join();\n            } catch (InterruptedException e) {\n                i--;\n                continue;\n            }\n        }\n        for (int i = 0; i < caseN; i++) {\n            out.print(outs[i].toString());\n        }\n        if (__ERROR) out.printf(\"%nError occured!!!%n\");\n    }\n    \n}"}
{"idx":"847","func":"class A {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int zz = 1; zz <= T; zz++) {\n            int N = in.nextInt();\n            int D = in.nextInt();\n            long S0 = in.nextInt();\n            long As = in.nextInt();\n            long Cs = in.nextInt();\n            long Rs = in.nextInt();\n            long M0 = in.nextInt();\n            long Am = in.nextInt();\n            long Cm = in.nextInt();\n            long Rm = in.nextInt();\n\n            int[] P = new int[N];\n            int[] S = new int[N];\n            P[0] = (int)M0;\n            S[0] = (int)S0;\n            for (int i = 1; i < N; i++) {\n                P[i] = (int)((P[i-1] * Am + Cm) % Rm);\n                S[i] = (int)((S[i-1] * As + Cs) % Rs);\n            }\n\n            int[] L = new int[N];\n            int[] H = new int[N];\n            L[0] = S[0];\n            H[0] = S[0];\n            ArrayList<Integer> add = new ArrayList<Integer>();\n            ArrayList<Integer> remove = new ArrayList<Integer>();\n            for (int i = 0; i < N; i++) {\n                if (i != 0) {\n                    P[i] %= i;\n                    L[i] = L[P[i]];\n                    H[i] = H[P[i]];\n                    L[i] = min(L[i], S[i]);\n                    H[i] = max(H[i], S[i]);\n                }\n\n                int a = H[i] - D;\n                int r = L[i];\n                \/\/System.out.println(i+\" \"+a+\" \"+r);\n                if (a <= r) {\n                    add.add(a);\n                    remove.add(r);\n                }\n            }\n            Collections.sort(add);\n            Collections.sort(remove);\n            int aat = 0;\n            int rat = 0;\n            int total = 0;\n            int ans = 0;\n            while (aat < add.size() && rat < remove.size()) {\n                if (add.get(aat) <= remove.get(rat)) {\n                    total++;\n                    aat++;\n                } else {\n                    total--;\n                    rat++;\n                }\n                ans = max(ans, total);\n            }\n            System.out.format(\"Case #%d: %d\\n\", zz, ans);\n        }\n    }\n}"}
{"idx":"848","func":"class MakeLoveNotWar {\n\n  public static void main(String[] args) throws FileNotFoundException {\n    Scanner in = new Scanner(new File(\"B-large (1).in\"));\n    PrintWriter out = new PrintWriter(new File(\"hippieOutL.txt\"));\n    long numTests = in.nextLong();\n\n    for (long test = 0; test < numTests; test++) {\n      in.nextLine();\n      long testSize = in.nextLong();\n      ArrayList<Integer> heights = new ArrayList<Integer>();\n      for(long linenum = 0; linenum < 2*testSize-1; linenum++){\n\n        in.nextLine();\n        for(int col = 0; col < testSize; col++){\n          Integer h = in.nextInt();\n          if(heights.contains(h)){\n            heights.remove(h);\n          }\n          else{\n            heights.add(h);\n          }\n        }\n\n      }\n      Collections.sort(heights);\n      out.print(\"Case #\" + (test+1) + \": \");\n      if(heights.size() > 0){\n        out.print(heights.get(0));\n        for(int i = 1; i < heights.size(); i++){\n          out.print(\" \" + heights.get(i));\n        }\n      }\n      out.println();\n    }\n    out.close();\n    in.close();\n  }\n\n}"}
{"idx":"849","func":"class Solution2 {\n\n    public static void main(String[] args) {\n        \n        Scanner scanner=new Scanner(System.in);\n        int t=scanner.nextInt();\n        for(int i=0; i<t; i++){\n            int n=scanner.nextInt();\n            int[] ht = new int[2501];\n            for(int x=0; x<n; x++){\n                for(int y=0; y<(2*n-1); y++){\n                    ht[scanner.nextInt()]++;\n                }\n            }\n            System.out.print(\"Case #\"+(i+1)+\": \");\n            for(int j=1; j<ht.length; j++){\n                if(ht[j]<1 || ht[j]%2==0){\n                    continue;\n                }\n                System.out.print(j+\" \");\n            }\n            System.out.println();\n        }\n        \n    }\n}"}
{"idx":"850","func":"class RankAndFile {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int numberOfTestCases = in.nextInt();\n        int x = 1;\n        Map<Integer, List<List<Integer>>> testCaseMap = new HashMap<Integer, List<List<Integer>>>();\n        for (int i = 0; i < numberOfTestCases; i++) {\n            List<List<Integer>> inputRowColumnList = new ArrayList<List<Integer>>();\n            Integer gridSize = in.nextInt();\n            for (int j = 0; j < (2*gridSize - 1) ; j ++) {\n                List<Integer> inputList = new ArrayList<Integer>();\n                for (int k = 0; k < gridSize; k++) {\n                    inputList.add(in.nextInt());\n                }\n                inputRowColumnList.add(inputList);\n            }\n            testCaseMap.put(i, inputRowColumnList);\n        }\n        for (int i = 0; i< numberOfTestCases; i++) {\n            List<Integer> missingList1 = new ArrayList<Integer>();\n            Map<Integer, Integer> oddEvenMap = new HashMap<Integer, Integer>();\n            for (List<Integer> list : testCaseMap.get(i)) {\n                for (Integer height : list) {\n                    Integer oddEvenCount = oddEvenMap.get(height);\n                    if (null == oddEvenCount) {\n                        oddEvenCount = 1;\n                        oddEvenMap.put(height, oddEvenCount);\n                    } else {\n                        oddEvenCount = oddEvenCount + 1;\n                        oddEvenMap.put(height, oddEvenCount);\n                    }\n                }\n            }\n            for (Map.Entry<Integer, Integer> entry : oddEvenMap.entrySet()) {\n                Integer height = entry.getKey();\n                Integer oddEven = entry.getValue();\n                if (oddEven % 2 != 0) {\n                    missingList1.add(height);\n                }\n            }\n            Collections.sort(missingList1);\n            List<Integer> missingList = missingList1;\n            System.out.print(\"Case #\" + x + \":\");\n            for (Integer temp : missingList) {\n                System.out.print(\" \" + temp);\n            }\n            System.out.println();\n            x++;\n        }\n    }\n\n}"}
{"idx":"851","func":"class main {\n    public static void main(String[] args) throws IOException{\n        BufferedReader bf = new BufferedReader(new FileReader(\"\/Users\/yonggoo\/Desktop\/B-large.in\"));\n        FileWriter fw = new FileWriter(\"\/Users\/yonggoo\/Desktop\/1a_2_l.txt\", true);\n        int T = Integer.parseInt(bf.readLine());\n        for(int i = 1; i <= T; i++){\n            int N = Integer.parseInt(bf.readLine());\n            List<Integer> result = new ArrayList<Integer>();\n            for(int k = 1; k <= 2*N-1; k++)\n                for(String val : bf.readLine().split(\" \"))\n                    result.add(Integer.parseInt(val));\n\n            Set<Integer> unqResult = new HashSet<Integer>(result);\n            String result_str = \"\";\n            for(Integer v : unqResult)\n                if(Collections.frequency(result, v)%2 == 1)\n                    result_str += \" \" + v;\n\n            result_str = result_str.substring(1);\n            String[] temp = result_str.split(\" \");\n            int[] real = new int[temp.length];\n            for(int iii = 0; iii < temp.length; iii++)\n                real[iii] = Integer.parseInt(temp[iii]);\n                \n            Arrays.sort(real);\n            String result_go = \"\";\n            for(int val : real){\n                result_go += \" \" + val;\n            }\n            fw.write(\"Case #\" + i + \":\");\n            fw.write(result_go);\n            fw.write(\"\\n\");\n        }\n        fw.flush();\n    }\n}"}
{"idx":"852","func":"class RankAndFile {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        int runs = Integer.parseInt(sc.nextLine().trim());\n        for(int run = 1 ; run <= runs ; run++) {\n            System.out.print(\"Case #\" + run + \":\");\n            \n            int N = Integer.parseInt(sc.nextLine().trim());\n            TreeSet<Integer> list = new TreeSet<Integer>();\n            \n            for(int i = 0 ; i < 2*N - 1 ; i++) {\n                String[] line = sc.nextLine().split(\"\\\\s+\");\n                for(String sNum : line) {\n                    int num = Integer.parseInt(sNum);\n                    if(list.contains(num)) {\n                        list.remove(num);\n                    } else {\n                        list.add(num);\n                    }\n                }\n            }\n            \n            for(int num : list) {\n                System.out.print(\" \" + num);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"853","func":"class rankAndFile\n{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        int numberOfTests = in.nextInt();\n\n        \/\/ in.nextLine();\n        for (int i = 0; i < numberOfTests; i++)\n        {\n            int n = in.nextInt();\n            int [] arr = new int[2500];\n            for (int j = 1; j < 2 * n; j++){\n                for (int k = 1; k <= n; k++){\n                    arr[in.nextInt() - 1]++;\n                }\n            }\n\n            System.out.print(\"Case #\" + (i + 1) + \":\");\n\n            int found = 0;\n            for (int k = 0; k < 2500; k++){\n                if (arr[k] != 0 && arr[k] % 2 != 0){\n                    System.out.print(\" \" + (k + 1));\n                    found++;\n                    if (found == n){\n                        break;\n                    }\n                }\n            }\n            System.out.println(\"\");\n        }  \n    }\n}"}
{"idx":"854","func":"class Problem2 {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        for(int a =0; a < n; a++){\n            int k = input.nextInt();\n            ArrayList<Integer> hugeList = new ArrayList<Integer>();\n            for(int b = 0; b < k*((2*k)-1); b++){\n                hugeList.add(input.nextInt());\n            }\n            int[] freqDist = new int[50000];\n            for(Integer b:hugeList){\n                freqDist[b]++;\n            }\n            ArrayList<Integer> output = new ArrayList<Integer>();\n            for(int b = 0; b < freqDist.length; b++){\n                if(freqDist[b]%2 != 0){\n                    output.add(b);\n                }\n            }\n            Collections.sort(output);\n            System.out.print(\"Case #\" + (a+1) + \":\" + \" \");\n            for(int b = 0; b < output.size(); b++){\n                System.out.print(output.get(b)+\" \");\n            }\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"855","func":"class P2{\n\n   public static void main(String[] args){\n       \n      Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n      int T=in.nextInt();\n      \n      \n      for(int i=0;i<T;i++){\n          int N=in.nextInt();\n          HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();   \n          HashSet<Integer> numbers=new HashSet<Integer>();\n          int index0=0;\n          for(int j=0;j<2*N-1;j++){\n              for(int k=0;k<N;k++){\n                  int s=in.nextInt();\n                  if(hm.containsKey(s)){\n                      int number=hm.get(s)+1;\n                      hm.remove(s);\n                      hm.put(s, number);\n                  }\n                  else{\n                      hm.put(s, 1);\n                      numbers.add(s);\n                  }\n                      \n              }\n          }\n          \n          \n          int[] missing=new int[N];\n          int index=0;\n          for(int num:numbers){\n              int value=hm.get(num);\n              if(value%2==1){\n                  missing[index]=num;\n                  index+=1;\n              }\n          }\n         \n         java.util.Arrays.sort(missing);\n         \n         String out=\"\";\n         for(int missed:missing){\n             out=out+missed+\" \";\n         }\n          \n         System.out.println(\"Case #\"+(i+1)+\": \"+out);\n      }\n\n      in.close();\n      \n   }\n}"}
{"idx":"856","func":"class RankAndFile {\n\n    private static boolean debug = false;\n\n    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt();\n\n        for (int _t = 1; _t <= t; _t++) {\n\n            int n = sc.nextInt();\n            sc.nextLine();\n\n            List<Integer> list = new ArrayList<>(2*n-1);\n            for (int _n=0; _n<2*n-1; _n++) {\n                String[] arr = sc.nextLine().split(\" \");\n                for (int i=0; i<arr.length; i++) {\n                    list.add(Integer.parseInt(arr[i]));\n                }\n            }\n            \/\/ Build histo\n            Map<Integer, Integer> histo = new HashMap<>();\n            for (int i=0; i<list.size(); i++) {\n                int key = list.get(i);\n                if (histo.containsKey(key)) {\n                    histo.put(key, histo.get(key)+1);\n                } else {\n                    histo.put(key, 1);\n                }\n            }\n            \n            List<Integer> odd = new ArrayList<>();\n            for (Map.Entry<Integer, Integer> e : histo.entrySet()) {\n                if (e.getValue() % 2 == 1) {\n                    odd.add(e.getKey());\n                }\n            }\n            Collections.sort(odd);\n            \n            StringBuilder sb = new StringBuilder();\n            for (int i=0; i<odd.size(); i++) {\n                sb.append(String.format(\"%d \", odd.get(i)));\n            }\n\n            String result = sb.toString().trim();\n            System.out.printf(\"Case #%d: %s%n\", _t, result);\n        }\n    }\n}"}
{"idx":"857","func":"class RankAndFile {\n    public static void main(String a[]) throws IOException {\n        Scanner scanner = new Scanner(System.in);\n        File file = new File(\"RankAndFile.txt\");\n        FileOutputStream fileOutputStream = new FileOutputStream(file);\n        BufferedWriter bufferedWriter  = new BufferedWriter(new OutputStreamWriter(fileOutputStream));\n        int n = Integer.parseInt(scanner.nextLine());\n        int x=1;\n        while(n-->0) {\n            Map<String,Integer> map = new HashMap<>();\n            int arrLength=Integer.parseInt(scanner.nextLine());\n            int noOfLines = arrLength*2;\n            noOfLines--;\n            while(noOfLines-->0) {\n                String line = scanner.nextLine();\n                String str[] = line.split(\" \");\n                for (String s : str) {\n                    Integer count = map.get(s);\n                    if (count == null)\n                        count = 0;\n                    map.put(s, ++count);\n                }\n            }\n            int []arr=new int[arrLength];\n            int index=0;\n            for (Map.Entry<String, Integer> entry : map.entrySet())\n            {\n                if(entry.getValue()%2!=0)\n                    arr[index++]=Integer.valueOf(entry.getKey());\n                if(index==arrLength)\n                    break;\n\n            }\n            Arrays.sort(arr);\n            String temp=\"\";\n            for(int i:arr)\n                temp+=i+\" \";\n            bufferedWriter.write(\"Case #\" + x++ + \": \" +temp+\"\\n\");\n        }\n        bufferedWriter.flush();\n        bufferedWriter.close();\n        }\n}"}
{"idx":"858","func":"class RankAndFile\n{\n    public static void main(String[] args)\n    {\n        StringBuilder sb = new StringBuilder();\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        String [] soldiers = new String[]{};\n        List<Integer> soldierList = new ArrayList<Integer>();\n        int n = 0;\n        int intCount = 0;\n        int sld = 0;\n        int sldIndex = 0;\n        \n        for(int i = 1; i < t + 1; i++)\n        {\n            sb.append(\"Case #\" + i + \": \");\n            n = sc.nextInt();\n            sc.nextLine();\n            soldierList.clear();\n            intCount = ((n * n) + (n * (n - 1)));\n            \n            for(int j = 0; j < intCount; j++)\n            {\n                sld = (Integer) sc.nextInt();\n                sldIndex = soldierList.indexOf(sld);\n                \n                if(sldIndex > -1)\n                {\n                    soldierList.remove(sldIndex);\n                }\n                else\n                {\n                    soldierList.add(sld);\n                }\n            }\n        \n            soldierList.sort(null);\n            for(int j = 0; j < soldierList.size(); j++)\n            {\n                sb.append(soldierList.get(j));\n                if(j < soldierList.size() - 1) sb.append(\" \");\n            }\n            \n            if(i < t) sb.append(\"\\n\");\n        }\n        \n        System.out.println(sb);\n    }\n}"}
{"idx":"859","func":"class B {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int numCases = in.nextInt();\n        for (int thisNum = 1; thisNum <= numCases; thisNum++) {\n            int numRows = in.nextInt();\n            Integer[][] allRows = new Integer[numRows * 2 - 1][numRows];\n            for ( int i = 0; i < numRows * 2 - 1; i++ )\n            {\n                Integer[] nextRow = new Integer[ numRows ];\n                for ( int row = 0; row < numRows; row++ )\n                    nextRow[ row ] = in.nextInt();\n                allRows[ i ] = nextRow;\n            }\n            for ( int row = 0; row < numRows; row++ ) {\n                for (int col = 0; col < numRows; col++) {\n                    for ( int j = 0; j < numRows * 2 - 1; j++ ) {\n                        Integer[] testRow = allRows[ j ];\n                        for ( int k = 0; k < numRows * 2 - 1; k++ ) {\n                            if ( k != j && allRows[ k ][row].equals( allRows[ j ][col] ) ) {\n                                allRows[k][row] = -1;\n                                allRows[j][col] = -1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            Vector<Integer> result = new Vector<Integer>(numRows);\n\n            for ( int j = 0; j < numRows * 2 - 1; j++ ) {\n                for (int col = 0; col < numRows; col++) {\n                    if ( allRows[ j ][col] != -1 )\n                        result.add( allRows[ j ][ col ]);\n                }\n            }\n\n            Integer[] resultArray = (Integer[]) result.toArray(new Integer[ numRows]);\n            Arrays.sort( resultArray );\n\n            String output = \"\";\n            for (int col = 0; col < numRows; col++) {\n                output += resultArray[ col ] + \" \";\n            }\n\n            output = output.trim();\n\n            \/\/ Print results\n            System.out.format(\"Case #%d: %s\\n\", thisNum, output);\n        }\n    }\n\n}"}
{"idx":"860","func":"class QuestionTwo {\n\n    public static void main(String[] args) throws Exception {\n\n        QuestionTwo questionTwo = new QuestionTwo();\n\/\/        String fileName = \"B-small-attempt1\";\n\/\/        String fileName = \"small\";\n        String fileName = \"B-large\";\n        String inputFile = \"codeJam\/2016\/round_one\/question_two\/\" + fileName + \".in\";\n        String outputFIle = \"\/Users\/sdu\/Dropbox\/workspace\/eclipse\/JavaPractice\/src\/main\/java\/com\/sdu\/practice\/codeJam\/round_one\/q2_\" + fileName + \".out\";\n\n        ClassLoader classLoader = questionTwo.getClass().getClassLoader();\n        File file = new File(classLoader.getResource(inputFile).getFile());\n        \n        try (Scanner scanner = new Scanner(file)) {\n        \n            String line = scanner.nextLine();\n            int t = Integer.parseInt(line.trim());\n        \n            int caseT = 0;\n        \n            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n                    new FileOutputStream(outputFIle), \"utf-8\"));\n        \n            while (++caseT <= t) {\n                int[] array = new int[2501];\n                ArrayList<Integer> result = new ArrayList<>();\n                String rStr = \"\";\n        \n                line = scanner.nextLine();\n                int n = Integer.parseInt(line.trim());\n                int r = 0;\n                while (++r < 2*n) {\n                    line = scanner.nextLine();\n                    String[] chars = line.trim().split(\" \");\n                    for (int j = 0; j < n; j++) {\n                        array[Integer.valueOf(chars[j])]++;\n                    }\n        \n                }\n        \n                for (int j=0; j< 2500; j++) {\n                    if (array[j] % 2 != 0) {\n                        result.add(j);\n                    }\n                }\n        \n                for (int j = 0; j < result.size(); j++) {\n                    rStr = rStr + result.get(j) + \" \";\n                }\n        \n                rStr = rStr.trim();\n        \n                writer.write(\"Case #\" + caseT + \": \" + rStr);\n                writer.newLine();\n            }\n            scanner.close();\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}"}
{"idx":"861","func":"class B {\n    \n    public static void main(String[] args) {\n        B b = new B();\n        try{\n            BufferedReader br=new BufferedReader(new FileReader(\"B-large.in\"));\n            BufferedWriter out=new BufferedWriter(new FileWriter(\"B-large.in\".split(\"\\\\.\")[0]+\"_output.txt\"));\n            String s;\n        \n            if((s=br.readLine())!=null){\n                int noLines = Integer.parseInt(s);\n                if(noLines!=0){\n                    for (int index = 0; index < noLines; index++) {\n                        if ((s = br.readLine()) != null) {\n                            int[][] inputMatrix = new int[2*Integer.parseInt(s.trim()) - 1][Integer.parseInt(s.trim())];\n                            for(int i=0;i<(2*Integer.parseInt(s.trim()) - 1);i++){\n                                String inA = br.readLine();\n                                String[] tokenizer = inA.split(\" \");\n                                for(int j =0;j<tokenizer.length;j++){\n                                    inputMatrix[i][j] = Integer.parseInt(tokenizer[j]);\n                                }\n                            }\n                            String outputString = \"Case #\" + (index + 1) + \": \";\n                            HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n                            for(int[] in : inputMatrix){\n                                for(int key : in){\n                                    if(hm.containsKey(key)){\n                                        hm.put(key, hm.get(key)+1);\n                                    }\n                                    else{\n                                        hm.put(key, 1);\n                                    }\n                                }\n                            }\n                            \n                            List<Integer> tempList = new ArrayList<>();\n                            for(int key:hm.keySet()){\n                                if(hm.get(key)%2 != 0){\n                                    tempList.add(key);\n                                }\n                            }\n                            \n                            Collections.sort(tempList);\n                            \n                            String returnStr = \"\";\n                            for(int rI:tempList){\n                                returnStr += rI+\" \";\n                            }\n                            String output1 = returnStr.trim();\n                            outputString += output1;\n                            System.out.println(outputString);\n                            out.write(outputString);\n                            out.newLine();\n                        }\n                    }\n                }\n            }\n            out.close();\n            br.close();\n        }\n        catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"862","func":"class test6 {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        Long t = in.nextLong();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n          int line = in.nextInt();\n          System.out.print(\"Case #\" + i + \":\");\n          int[] result = new int[line];\n          HashSet<Integer> hs = new HashSet<Integer>();\n          for (int j = 1; j <= line * 2 - 1; j++) {\n              for (int k = 1; k <= line; k++) {\n                  int number = in.nextInt();\n                  if (hs.contains(number)) {\n                      hs.remove(number);\n                  } else {\n                      hs.add(number);\n                  }\n              }\n          }\n          int j = 0;\n          for (Integer ele : hs) {\n              result[j] = ele;\n              j++;\n          }\n          Arrays.sort(result);\n          for (Integer ele : result) {\n              System.out.print(\" \" + ele);\n          }\n          System.out.println();\n        }\n    }\n}"}
{"idx":"863","func":"class ProblemB {\n    static BufferedReader buffReader = null;\n    static BufferedWriter buffWriter = null;\n    static FileReader fileReader = null;\n    static FileWriter fileWriter = null;\n    static String input_test = \"D:\/Programming\/workspace\/test\/test.in\";\n    static String input_small =  \"D:\/Programming\/workspace\/test\/B-small-attempt0.in\";\n    static String input_large = \"D:\/Programming\/workspace\/test\/B-large.in\";\n\n    public static final void main(String[] args){\n        try {\n\/\/            fileReader = new FileReader(input_test);\n\/\/            fileReader = new FileReader(input_small);\n            fileReader = new FileReader(input_large);\n            buffReader = new BufferedReader(fileReader);\n            fileWriter = new FileWriter(\"D:\/Programming\/workspace\/test\/problem_B.out\");\n            buffWriter = new BufferedWriter(fileWriter);\n\n            int total_size = Integer.parseInt(buffReader.readLine());\n            \/\/iterate through every input line\n            for(int i=1; i<=total_size; i++){\n                int N = Integer.parseInt(buffReader.readLine());\n                int size = N * (2 * N - 1);\n                int index = 0;\n                int[] arr = new int[size];\n                for(int j=0; j<2*N-1; j++){\n                    String[] line = buffReader.readLine().split(\" \");\n                    for(int k=0; k<N; k++){\n                        arr[index] = Integer.parseInt(line[k]);\n\/\/                        System.out.println(arr[index]);\n                        index++;\n                    }\n                }\n                \n                Arrays.sort(arr);\n                int count = 1;\n                int pre = arr[0];\n                int cur = -2;\n                String result = \"\";\n                for(int x=1; x<size; x++){\n                    \n                    cur = arr[x];\n\/\/                    System.out.println(\"cur = \" + cur + \" pre = \" + pre);\n                    \n                    \n                    if(cur == pre){\n                        count++ ;\n                    }else{\n                        if ((count & 1) != 0) {\n                            result = result + \" \"+ pre;\n                        }\n                        pre = cur;\n                        count = 1;\n                    }\n                    \n                    if((x == size -1) && (count == 1)) {\n                        result = result + \" \"+ pre;\n                    }\n                    \n    \n                }\n                \n\n                System.out.println(\"Case #\" +i+\":\"+ result);\n                buffWriter.write(\"Case #\" +i+\":\" + result);\n                buffWriter.newLine();\n                buffWriter.flush();\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                buffWriter.flush();        \n                buffWriter.close();\n                buffReader.close();\n                fileReader.close();\n                fileWriter.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    \n}"}
{"idx":"864","func":"class prblmB {\n    final static String PROBLEM_NAME = \"prblmB\";\n    final static String WORK_DIR = \"F:\\\\GCJ\\\\\" + PROBLEM_NAME + \"\\\\\";\n      \n    public static void main(String[] args) throws Exception {\n        \/\/Scanner sc = new Scanner(new FileReader(WORK_DIR + \"B-small-attempt0.in\"));\n        \/\/Scanner sc = new Scanner(new FileReader(WORK_DIR + \"B-small-attempt1.in\"));\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + \"B-large.in\"));\n        \/\/Scanner sc = new Scanner(new FileReader(WORK_DIR + \"input.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\n        int caseCnt = sc.nextInt();\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\n            System.out.println(\"Processing test case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n            prblmB r = new prblmB();\n            int N = sc.nextInt();\n                        int ar[][] = new int[2*N-1][N];\n                        int br[] = new int[2501];\n                        for(int i=0;i<2*N-1;i++)\n                        { for(int j=0;j<N;j++)\n                         {\n                             ar[i][j] = sc.nextInt();\n                             if(br[ar[i][j]]==0)\n                                 br[ar[i][j]]=1;\n                             else\n                                 br[ar[i][j]]=0;\n                            \n                         }                 \n                       }\n                       \n                     for(int i=0;i<2501;i++)\n                         {\n                            if(br[i]==1)\n                             pw.print(i+\" \");\n                         }                 \n            pw.println();\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"865","func":"class Problem2 {\n\n  public static void main(String[] args) {\n\n    Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\n    int i = 0;\n    int cases = Integer.parseInt(sc.nextLine());\n\n    while (i < cases) {\n\n      String line = sc.nextLine();\n      int qtd = Integer.parseInt(line);\n\n      String[] lines = new String[(qtd*2)-1];\n      for (int j = 0; j < (qtd*2)-1; j++) lines[j] = sc.nextLine();\n    int[] qtds = new int[2500];\n    \n    for (String line1 : lines) {\n    \n      String[] values = line1.split(\" \");\n    \n      for (String value : values) {\n    \n        int val = Integer.parseInt(value);\n        qtds[val-1]++;\n    \n      }\n    \n    }\n    \n    ArrayList<Integer> results = new ArrayList<>();\n    \n    for (int i2 = 0; i2 < qtds.length; i2++) {\n    \n      if (qtds[i2]%2 != 0) {\n    \n        results.add(i2+1);\n    \n      }\n    \n    }\n    \n    Object[] ints = results.toArray();\n    Arrays.sort(ints);\n    \n    String result1 = \"\";\n    for (int i1 = 0; i1 < results.size(); i1++) {\n    \n      if (i1 != 0) result1 = result1 + \" \";\n      result1 = result1 + ints[i1];\n    \n    }\n\n      String result = result1;\n      i++;\n\n      System.out.println(\"Case #\" + i + \": \" + result);\n\n    }\n\n  }\n\n}"}
{"idx":"866","func":"class B {\n\n    String smallInput = \"res\/r1A\/B\/b_small.in\";\n    String smallOutput = \"res\/r1A\/B\/b_small.out\";\n    String bigInput = \"res\/r1A\/B\/b_big.in\";\n    String bigOutput = \"res\/r1A\/B\/b_big.out\";\n\n    int n;  \/\/ number of cases\n    int d;\n    int a[] = new int[2501];\n\n\n    public static void main(String[] args) {\n\n        B b = new B();\n        try {\n            Scanner sc = new Scanner(new FileReader(b.smallInput));\n            PrintWriter pw = new PrintWriter(b.smallOutput);\n            b.n = sc.nextInt();\n        \n            for(int c=1; c<=b.n; c++) {\n                b.d = sc.nextInt();\n                for(int i1=0; i1<2501; i1++) {\n                    b.a[i1] = 0;\n                }\n                for (int i = 0; i < 2 * b.d * b.d - b.d; i++) {\n                    int r = sc.nextInt();\n                    b.a[r]++;\n                }\n                pw.print(\"Case #\"+c+\":\");\n                for(int j=0; j<2501; j++) {\n                    if(b.a[j]%2==1)\n                        pw.print(\" \"+j);\n                }\n                pw.println();\n            }\n            sc.close();\n            pw.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        \/\/b.solve();\n        \/\/b.writeOutput();\n    }\n}"}
{"idx":"867","func":"class RankFile {\n    public static void main(String args[]) throws NumberFormatException, IOException {\n        BufferedReader bufferReader = new BufferedReader(new FileReader(\"C:\\\\Users\\\\anaka\\\\Desktop\\\\trial.in\"));\n        int noOfTestCases = Integer.parseInt(bufferReader.readLine());\n        List resultList = new ArrayList();\n        for (int count = 0; count < noOfTestCases; count++) {\n            int number =  Integer.parseInt(bufferReader.readLine());\n            int[] heights = new int[2501];\n            for(int i=1; i<=2*number-1; i++){\n                String line = bufferReader.readLine();\n                String[] splitLine = line.split(\"\\\\s+\");\n                for(int j=0; j<splitLine.length; j++){\n                    int parsedInt = Integer.parseInt(splitLine[j]);\n                    if(heights[parsedInt] == 0){\n                        heights[parsedInt] = 1;\n                    }else{\n                        heights[parsedInt] = heights[parsedInt] + 1;\n                    }\n                }\n            }\n            resultList.add(heights);\n        }\n        bufferReader.close();\n        File file = new File(\"C:\\\\Users\\\\anaka\\\\Desktop\\\\output.txt\");\n        if (!file.exists()) {\n            file.createNewFile();\n        }\n        FileWriter fileWriter = new FileWriter(file.getAbsoluteFile());\n        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);\n        for (int count = 0; count < resultList.size(); count++) {\n            int testCaseNumber = count + 1;\n            bufferedWriter.write(\"Case #\" + testCaseNumber + \": \");\n            int[] result = (int[]) resultList.get(count);\n            for(int i=0; i<result.length; i++){\n                if (result[i] % 2 != 0) {\n                    bufferedWriter.write(i + \" \");\n                }\n            }\n            bufferedWriter.write(System.lineSeparator());\n        }\n        bufferedWriter.close();\n    }\n\n}"}
{"idx":"868","func":"class Main {\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int testCaseNum = in.nextInt();\n\n    for (int i = 1; i <= testCaseNum; i++) {\n      int n = in.nextInt();\n      TreeMap<Integer, Integer> note = new TreeMap<Integer, Integer>();\n      for(int j = 0; j < 2 * n - 1; j++) {\n        for (int x = 0; x < n; x++) {\n          int soldier = in.nextInt();\n          if (note.containsKey(soldier)) {\n            note.put(soldier, note.get(soldier) + 1);\n          } else {\n            note.put(soldier, 1);\n          }\n        }\n      }\n\n      StringBuffer ret = new StringBuffer(\"Case #\");\n    ret.append(i);\n    ret.append(\": \");\n    \n    ArrayList<Integer> missing = new ArrayList<Integer>();\n    for(Map.Entry<Integer, Integer> entry : note.entrySet()) {\n      if (entry.getValue() % 2 == 1) {\n        missing.add(entry.getKey());\n      }\n    }\n    \n    Collections.sort(missing);\n    \n    System.out.print(ret);\n    for (int i1 = 0; i1 < missing.size(); i1++) {\n      System.out.print(missing.get(i1));\n      if(i1 != missing.size() -1) System.out.print(\" \");\n    }\n    System.out.println(\"\");\n    }\n  }\n}"}
{"idx":"869","func":"static void main (String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int numCases = sc.nextInt();\n        \/\/ System.out.println(\"here\");\n        StringBuilder out = new StringBuilder();\n        for (int h = 1; h <= numCases; h++) {\n            int [] heights = new int[2501];\n            int n = sc.nextInt();\n            for (int i = 0; i < (2*n)-1; i++) {\n                for (int k = 0; k < n; k++) {\n                    int val = sc.nextInt();\n                    heights[val]++;\n                }\n            }\n            \/\/ System.out.println(\"Heights: \" + Arrays.toString(heights));\n            \n            out.append(String.format(\"Case #%d:\", h));\n            for (int i = 0; i < heights.length; i++) {\n                if (heights[i] % 2 == 1) {\n                    out.append(\" \" + i);\n                }\n            }\n            out.append(\"\\n\");\n        }\n        System.out.print(out+\"\");\n    }\n}"}
{"idx":"870","func":"class B {\n\n    public static void main(String [] args) throws IOException {\n            \/\/Scanner s = new Scanner(new BufferedReader(new FileReader(\"B-small-attempt0.in\")));\n            Scanner s = new Scanner(new BufferedReader(new FileReader(\"B-large.in\")));\n           \/\/ Scanner s = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n            int ncase = s.nextInt();\n            for (int i = 1; i <= ncase; i++) {\n                int N = s.nextInt();\n                int[] Height = new int[2501];\n                for (int i1 = 1; i1 <= 2*N - 1; i1++) {\n                    for (int j = 1; j <= N; j++) {\n                        int h = s.nextInt();\n                        Height[h-1]++;\n                    }\n                }\n                \n                System.out.printf(\"Case #%d:\", i);\n                for (int i2 = 0; i2 <= 2500; i2++) {\n                    if( Height[i2] % 2 == 1 ) {\n                        System.out.printf(\" %d\", i2+1);\n                    }\n                }\n                System.out.printf(\"\\n\");\n            }\n            s.close();\n    }\n\n}"}
{"idx":"871","func":"class PanCakes\n{\n    HashMap<Integer, Integer> result;\n    private Scanner scan;\n    private int length, cases=0;\n    private String inS;\n    private char lastSeen; \n    private FileWriter fw;\n    private ArrayList<Integer> output;\n    \n    public PanCakes() throws IOException\n    {\n        File outputFile = new File(\"\/home\/devil\/java\/testjava\/src\/Result.txt\");\n        this.fw = new FileWriter(outputFile);\n        this.scan = new Scanner(new BufferedReader(new FileReader(new File(\"\/home\/devil\/java\/testjava\/src\/B-large.in\"))));\n        this.length = this.scan.nextInt();\n        this.output= new ArrayList<Integer>();\n        this.result = new HashMap<Integer, Integer>();\n    }\n    \n    public static void main(String args[])\n    {\n        \n        PanCakes flip;\n        try {\n            flip = new PanCakes();\n            for(int i=0;i<flip.length;i++)\n            {\n                flip.cases++;\n                Integer input = flip.scan.nextInt();\n                int read = 0;\n                for(int i1=0;i1<input*((2*input)-1);i1++)\n                {\n                    read = flip.scan.nextInt();\n                    if(flip.result.containsKey(read))\n                        flip.result.put(read, flip.result.get(read)+1);\n                    else\n                        flip.result.put(read, 1);\n                }\n                for (Map.Entry<Integer, Integer> entry : flip.result.entrySet())\n                {\n                    if(entry.getValue()%2==1)\n                        flip.output.add(entry.getKey());\n                }\n                Collections.sort(flip.output);\n                StringBuilder builder = new StringBuilder();\n                for(Integer fi: flip.output)\n                {\n                    builder.append(fi);\n                    builder.append(\" \");\n                }\n                flip.fw.write(\"Case #\" + flip.cases + \": \"+builder+ \"\\n\");\n                flip.output.clear();\n                flip.result.clear();\n            }\n            flip.fw.close();\n        } catch (Exception e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"872","func":"class B {\n    \n    public static void main(String[] args) throws IOException\n    {\n        Scanner file = new Scanner(new File(\"b-large.in\"));\n        PrintWriter out = new PrintWriter(new FileWriter(new File(\"out.txt\")));\n        int zz = file.nextInt();\n        for(int i = 1;i<=zz;i++)\n        {\n            int[] n = new int[2501];\n            int N = file.nextInt();\n            for(int j = 0;j<N*N*2-N;j++)\n            {\n                int next = file.nextInt();\n                \/\/System.out.println(next);\n                n[next]++;\n            }\n            String ans = \"\";\n            for(int j = 0;j<2501;j++)\n            {\n                if(n[j]%2==1)\n                    ans+=j+\" \";\n            }\n            out.printf(\"Case #%d: %s%n\",i,ans);\n        }\n        out.close();\n    }\n    \n}"}
{"idx":"873","func":"class main{\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        int n;\n        for (int i = 1; i <= T; i++)\n        {\n            System.out.printf(\"Case #%d:\",i);\n            int N = in.nextInt();\n            int[]  arr= new int[(2*N-1)*N];\n            for (int j = 0; j < arr.length ; j++) {\n                arr[j]=in.nextInt();\n            }\n            Arrays.sort(arr);\n\n            int count=0;\n            for (int j = 1; j <arr.length ; j+=2) {\n                if(arr[j-1]!=arr[j]) {\n                    System.out.print(\" \"+arr[j-1]);\n                    j--;\n                    count++;\n                }\n            }\n            if(count!=N){\n                System.out.print(\" \"+arr[arr.length-1]);\n            }\n\n            System.out.println();\n        }\n\n\n\n    }\n}"}
{"idx":"874","func":"class B\n{\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader in  = new BufferedReader(new FileReader(\"B.in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"B.out\"));\n\n        int T = Integer.parseInt(in.readLine());\n        for(int t=1;t<=T;t++)\n        {\n            int N = Integer.parseInt(in.readLine());\n            int[] freq = new int[2501];\n            for(int i=0;i<2*N-1;i++)\n            {\n                StringTokenizer st = new StringTokenizer(in.readLine());\n                for(int j=0;j<N;j++)\n                    freq[Integer.parseInt(st.nextToken())]++;\n            }\n\n            out.write(\"Case #\"+t+\": \");\n            for(int i=1;i<=2500;i++)\n                if(freq[i] % 2 == 1)\n                    out.write(i+\" \");\n            out.write(\"\\n\");\n        }\n\n        in .close();\n        out.close();\n    }\n}"}
{"idx":"875","func":"class Q2 {\n    public static void main(String[] args) throws IOException {\n        FileInputStream in = null;\n        in = new FileInputStream(\"input.in\");\n        DataInputStream input = new DataInputStream(in);\n        BufferedReader br = new BufferedReader(new InputStreamReader(in));\n        String line = \"\";\n        line = br.readLine();\n        int numberOfCases = Integer.parseInt(line);\n        FileOutputStream out = null;\n        out = new FileOutputStream(\"out.txt\");\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(out));\n        for(int i =0;i<numberOfCases;i++){\n            int n = Integer.parseInt(br.readLine());\n            int[] heights = new int[2501];\n            for(int j=0;j<2*(n)-1;j++){\n                line = br.readLine();\n                \/\/System.out.println(line);\n                String[] intsString = line.split(\" \");\n                \/\/System.out.println(line);\n                for(int k=0;k<intsString.length;k++){\n                    heights[Integer.parseInt(intsString[k])]+=1;\n                }\n            }\n            String answer = \"\";\n            for(int j=0;j<2501;j++){\n                if(heights[j]%2!=0){\n                    answer += j+\" \";\n                }\n            }\n            \n            \n            bw.write(\"Case #\"+(i+1)+\": \"+answer+\"\\n\");\n        }\n        br.close();\n        bw.close();\n    }\n}"}
{"idx":"876","func":"class Main\n{\n   public static void main(String[] args) throws Exception\n   {\n      Scanner inp = new Scanner(new File(\"inLarge.txt\"));\n      PrintWriter pw = new PrintWriter(new File(\"outLarge.txt\"));\n      int c = 0;\n      int cases = inp.nextInt();\n      while( c < cases )\n      {\n         int n = inp.nextInt();\n         int[] h = new int[2501];\n         int[] m = new int[n];\n         for( int i=0; i<2*n*n-n; i++ )\n         {\n            h[inp.nextInt()]++;\n         }\n         int p = 0;\n         for( int i=0; i<2500; i++ )\n         {\n            if( h[i] % 2 != 0 )\n            {\n               m[p] = i;\n               p++;\n            }\n         }\n         String r = \"\";\n         for( int i=0; i<n; i++ ) \n         {\n            r += \" \" + m[i];\n         }\n         System.out.println(\"Case #\" + (c+1) + \":\" + r );\n         pw.println(\"Case #\" + (c+1) + \":\" + r );\n         \n         c++;\n      }\n      pw.close();\n   }\n}"}
{"idx":"877","func":"class Round1B {\n    public static void main(String[] args){\n        Round1B t = new Round1B();\n        Scanner scan;\n        try {\n            scan = new Scanner(new File(\"input.txt\"));\n            PrintStream p = new PrintStream(\"output.txt\");\n            long num = scan.nextLong();\n            for(long i = 1; i <= num; i++){\n                scan.nextLine();\n                \n                int sizeN = scan.nextInt();\n                int[] array = new int[2501];\n                \n                for (int j = 0; j < 2 * sizeN - 1; j++) {;\n                    for (int k = 0; k < sizeN; k++) {\n                        int current = scan.nextInt();\n                        array[current]++;\n                    }\n                } \n                \n                String answer = \"\";\n                for (int r = 1; r <= 2500; r++) {\n                    if (array[r] % 2 != 0) {\n                        answer += r + \" \";\n                    }\n                }\n        \n                p.println(\"Case #\" + i + \": \" + answer);\n                System.out.println(\"Case #\" + i + \": \" + answer);\n        \n            }\n            p.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n    \n}"}
{"idx":"878","func":"class RankandFile {\n    public static void main(String[] args) throws FileNotFoundException {\n        System.setOut(new PrintStream(new File(\"ans2.txt\")));\n        Scanner a=new Scanner(new BufferedInputStream(new FileInputStream(\"2.txt\")));\n        int caseNum=a.nextInt();\n        for (int i=1;i<=caseNum;i++) {\n            int n=a.nextInt();\n            System.out.print(\"Case #\"+i+\": \");\n            HashMap<Integer,Integer> myMap=new HashMap<Integer,Integer>();\n            for (int j=0;j<2*n-1;j++) {\n                for (int k=0;k<n;k++) {\n                    int s=a.nextInt();\n                    if (myMap.containsKey(s)) {\n                        myMap.put(s, myMap.get(s)+1);\n                    } else {\n                        myMap.put(s,1);\n                    }\n                }\n            }\n            ArrayList<Integer> b=new ArrayList<Integer>();\n            for (Integer p:myMap.keySet()) {\n                \/\/System.out.println(p+\" \"+myMap.get(p));\n\n                if (myMap.get(p) % 2!=0) {\n                    b.add(p);\n                }\n            }\n            Collections.sort(b);\n            for (int k=0;k<b.size();k++) {\n                System.out.print(b.get(k)+\" \");\n\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"879","func":"class RankAndFile {\n\n    public static void main(String[] args) throws Exception {\n        int caseNo = 1;\n        boolean noRead = false;\n        try (BufferedReader br = new BufferedReader(new FileReader(\n                \"C:\\\\Users\\\\fengze\\\\scala_workspace\\\\jam\\\\input.txt\"));\n                FileWriter fw = new FileWriter(\"output.txt\")) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                if (!noRead) {\n                    noRead = true;\n                    continue;\n                } else {\n                    int n = Integer.parseInt(line);\n                    String[] lines = new String[2 * n - 1];\n                    for (int i = 0; i < lines.length; i++) {\n                        lines[i] = br.readLine();\n                    }\n                    RankAndFile rf = new RankAndFile(n, lines);\n                    int[] result = new int[rf.n];\n                    \n                    Map<Integer, Integer> map = new HashMap<>();\n                    \n                    for (int i1 = 0; i1 < 2 * rf.n - 1; i1++) {\n                        String[] temp = rf.list[i1].split(\"\\\\s+\");\n                        for (int j = 0; j < rf.n; j++) {\n                            Integer height = Integer.parseInt(temp[j]);\n                            if (map.containsKey(height)) {\n                                Integer count = map.get(height);\n                                map.put(height, count + 1);\n                            } else {\n                                map.put(height, 1);\n                            }\n                        }\n                    }\n                    \n                    int i2 = 0;\n                    for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n                        if (entry.getValue() % 2 != 0) {\n                            result[i2] = entry.getKey();\n                            i2++;\n                        }\n                    }\n                    \n                    Arrays.sort(result);\n                    int[] array = result;\n                    StringBuilder sb = new StringBuilder();\n                    for(int i = 0; i < array.length; i ++) {\n                        sb.append(' ');\n                        sb.append(array[i]);\n                    }\n                    fw.write(\"Case #\" + caseNo + \":\" + sb.toString() + \"\\r\\n\");\n                    caseNo++;\n                }\n\n            }\n        }\n    }\n\n    private int n;\n    private String[] list;\n\n    public RankAndFile(int n, String[] list) {\n        this.n = n;\n        this.list = list;\n    }\n}"}
{"idx":"880","func":"class RankAndFile {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n\n        for (int i = 0; i < t; i++) {\n            int N = sc.nextInt();\n            int[] count = new int[2501];\n            int[] arr = new int[N];\n            for (int j = 0; j < 2 * N - 1; j++) {\n                for (int k = 0; k < N; k++) {\n                    count[sc.nextInt()]++;\n                }\n            }\n            int initial = -1;\n            int s = 0;\n            for (int j = 0; j < 2501; j++) {\n                if (count[j] % 2 == 1) {\n                    arr[s++] = j;\n                    if (s == N) {\n                        break;\n                    }\n                }\n            }\n            Arrays.sort(arr);\n            System.out.print(\"Case #\"+(i+1)+\":\");\n            for(int j=0;j<N;j++){\n                System.out.print(\" \"+arr[j]);\n            }\n            System.out.println(\"\");\n        }\n\n    }\n\n}"}
{"idx":"881","func":"class Round1Rank {\n\n    static BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\n    static ArrayList<String> list = new ArrayList<String>();\n\n    static Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n\n    public static void main(String[] args) throws Exception {\n        \/\/ TODO Auto-generated method stub\n\n        int n = Integer.parseInt(bf.readLine());\n\n        for (int i = 0; i < n; i++) {\n\n            int m = Integer.parseInt(bf.readLine());\n            int Len = (2 * m) - 1;\n            int[] ans = new int[m];\n            int ansC = 0;\n            for (int j = 0; j < Len; j++) {\n                for (String s : bf.readLine().split(\" \")) {\n                    int c = Integer.parseInt(s);\n                    if (map.containsKey(c)) {\n                        int val = map.get(c);\n                        map.put(c, val + 1);\n                    } else {\n                        map.put(c, 1);\n                    }\n                }\n            }\n\n            for (Entry<Integer, Integer> item : map.entrySet()) {\n                if (item.getValue() % 2 != 0)\n                    ans[ansC++] = item.getKey();\n            }\n            Arrays.sort(ans);\n            String fans = \"\";\n            for (int j = 0; j < ans.length; j++) {\n                fans += \" \" + ans[j];\n            }\n            map.clear();\n            list.add(fans);\n        }\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(\"Case #\" + (i + 1) + \":\" + list.get(i));\n        }\n    }\n\n}"}
{"idx":"882","func":"class B {\n    private static final String INPUT = \"B-large.in\";\n    private static final String OUTPUT = \"B-large.out\";\n\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new File(INPUT));\n        StringBuilder sb = new StringBuilder();\n        int cases = sc.nextInt();\n        for (int c = 0; c < cases; c++) {\n            int n = sc.nextInt();\n            int[][] lists = new int[2 * n - 1][n];\n            for (int i = 0; i < 2 * n - 1; i++) {\n                for (int j = 0; j < n; j++) {\n                    lists[i][j] = sc.nextInt();\n                }\n            }\n            String line = \"Case #\" + (c + 1) + \": \" + solve(lists);\n            sb.append(line).append('\\n');\n            System.out.println(line);\n        }\n        Files.write(Paths.get(OUTPUT), sb.toString().getBytes());\n    }\n\n    private static String solve(int[][] lists) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int[] list : lists) {\n            for (int i : list) {\n                int count = map.getOrDefault(i, 0);\n                map.put(i, count + 1);\n            }\n        }\n\n        List<Integer> list = map.keySet().stream().filter(k -> map.get(k) % 2 == 1).sorted().collect(toList());\n\n        return Joiner.on(' ').join(list);\n    }\n}"}
{"idx":"883","func":"class RankandFile {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        \/\/sc.next();\n        for (int cases = 1; cases <= T; cases++) {\n            int N = sc.nextInt();\n            \/*int[][] arr = new int[2*N-1][N];\n            int[][] sorted = new int[N][N];\n            for (int i = 0; i < 2*N-1; i++) {\n                for (int j = 0; j < N; j++) {\n                    arr[i][j] = sc.nextInt();\n                    \/\/System.out.print(s + \" \");\n                    \n                }\n                \/\/System.out.println();\n            }\n            for (int i = 0; i < 2*N-1; i++) {\n                for (int j = 0; j < N; j++) {\n                    System.out.print(arr[i][j] + \" \");\n                }\n                System.out.println();\n            }\n            for (int round = 0; round < N; round++) {\n                int min = 5000;\n                int row = -1, col = -1;\n                for (int i = 0; i < 2*N-1; i++) {\n                    for (int j = 0; j < round; j++)\n                        if (arr[i][j] != sorted[])\n                    if (arr[i][round] < min) {\n                        min = arr[i][round];\n                        row = i;\n                    } else if (arr[i][round] <= min) {\n                        col = i;\n                    }\n                }\n                for (int i = round; i < N; i++)\n                    sorted[round][i] = arr[row][i];\n                for (int i = round; i < N; i++)\n                    sorted[i][round] = arr[col][i];\n\n                System.out.println(\"BBBBBB\");\n                for (int i = 0; i < N; i++) {\n                    for (int j = 0; j < N; j++) {\n                        System.out.print(sorted[i][j] + \" \");\n                    }\n                    System.out.println();\n                }\n        \n            }*\/\n            int[] seen = new int[2501];\n            for (int i = 0; i < 2*N-1; i++) {\n                for (int j = 0; j < N; j++) {\n                    int k = sc.nextInt();\n                    seen[k]++;\n                }\n            }\n            System.out.print(\"Case #\" + cases + \":\");\n            for (int i = 0; i <= 2500; i++) {\n                if (seen[i] % 2 == 1)\n                    System.out.print(\" \" + i);\n            }\n            System.out.println();\n            \n            \/*System.out.println(\"Case #\" + cases + \": \");\n            for (int i = 0; i < N; i++) {\n                for (int j = 0; j < N; j++) {\n                    System.out.print(sorted[i][j] + \" \");\n                }\n                System.out.println();\n            }*\/\n        }\n        sc.close();\n    }\n\n}\n\/*\n1\n3\n1 2 3\n2 3 5\n3 5 6\n2 3 4\n1 2 3\n*\/"}
{"idx":"884","func":"class B {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        int C = in.nextInt();\n        for (int thisCase = 1; thisCase <= C; thisCase++) {\n            int counts[] = new int[2500];\n            int N = in.nextInt();\n            for (int i = 0; i < 2*N-1; i++) {\n                for (int j = 0; j < N; j++) {\n                    counts[in.nextInt()-1]++;\n                }\n            }\n            System.out.printf(\"Case #%d:\", thisCase);\n            for (int i = 0; i < 2500; i++) {\n                if (counts[i] %2 == 1) {\n                    System.out.printf(\" %d\", (i+1));\n                }\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"885","func":"class RankAndFile {\n    \n    public static void main(String[] args) {\n        \n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n            int N = in.nextInt();\n            int[][] data = new int[2*N - 1][N];\n            int[] map = new int[2501];\n            for (int j = 0; j < 2*N-1; j++)\n                for (int j2 = 0; j2 < N; j2++) {\n                    data[j][j2] = in.nextInt();\n                    map[data[j][j2]]++;\n                }\n            int[] finalArr = new int[N];\n            int idx = 0;\n            for (int j = 0; j < 2501; j++) {\n                if((map[j]&1) == 1)\n                    finalArr[idx++] = j;\n            }\n            Arrays.sort(finalArr);\n            System.out.print(\"Case #\" + i + \": \");\n            for (int j = 0; j < finalArr.length; j++) {\n                System.out.print(finalArr[j] + \" \");\n            }\n            System.out.println();\n         }\n     }\n}"}
{"idx":"886","func":"class google_rankandfile {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n\ntry{\n            \n            BufferedReader br = new BufferedReader(new FileReader(\"B-large0.in\"));\n            int l=0;\n            String line=\"\";\n            int t = Integer.parseInt(br.readLine());\n            String[] s = new String[t];\n            \/*while ((line = br.readLine()) != null) {\n                \/\/System.out.println(line);\n                \n                s[l] = line;\n                l++;\n            }*\/\n            \n            for(int i=0;i<t;i++)\n            {\n                int N = Integer.parseInt(br.readLine());\n                \/\/System.out.println(N);\n                List<String> matrix =new ArrayList<String>();\n                Map<String,Integer> hm = new HashMap<String,Integer>();\n                \/\/System.out.println(N);\n                int lines = 2*N-1;\n                for(int j=0;j<lines;j++)\n                {\n                    matrix.add(br.readLine());\n                \/\/    System.out.println(matrix.get(j));\n                    String[] temp = matrix.get(j).split(\" \");\n                    for(int k=0;k<temp.length;k++)\n                    {\n                        if(!hm.containsKey(temp[k]))\n                        {\n                            \/\/System.out.println(\"arr: \"+temp[k]);\n                            hm.put(temp[k],1);\n                            \/\/System.out.println(\"hm: \"+hm.get(arr[i][j]));\n                        }\n                        else\n                        {\n                            hm.put(temp[k], hm.get(temp[k])+1);\n                        }\n                    \n                    }\n                }\n                \n                \/\/ System.out.println(matrix.get(j));\n                \n                 \n                List<String> res = new ArrayList<String>();\n                \/\/System.out.println(\"key: \"+1+\" value: \"+hm.get(1));\n                for(String k : hm.keySet())\n                {\n                    \/\/System.out.println(\"key: \"+k+\" value: \"+hm.get(k));\n                    if(hm.get(k)%2!=0)\n                    {\n                        res.add(k);\n                    }\n                }\n                List<Integer> res1 = new ArrayList<Integer>();\n                for(int z=0;z<res.size();z++)\n                {\n                    res1.add(Integer.parseInt(res.get(z)));\n                }\n                Collections.sort(res1);\n                System.out.print(\"Case #\"+(i+1)+\": \"); \/\/ change case number\n                for(int p=0;p<res1.size();p++)\n                {\n                    System.out.print(res1.get(p)+\" \");\n                }\n                System.out.println();\n\n                \/\/char[] \n                \n                \/\/System.out.println(\"Case #\"+(i+1)+\": \"+count);\n            }\n            \n        }catch (Exception e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n\n        \n        \/*\n        int arr[][] = {{1,2,3},{2,3,5},{3,5,6},{2,3,4},{1,2,3}};\n        \n        Map<Integer,Integer> hm = new HashMap<Integer,Integer>();\n        for(int i=0;i<arr.length;i++)\n        {\n            for(int j=0;j<arr[0].length;j++)\n            {\n                if(!hm.containsKey(arr[i][j]))\n                {\n                    \/\/System.out.println(\"arr: \"+arr[i][j]);\n                    hm.put(arr[i][j],1);\n                    \/\/System.out.println(\"hm: \"+hm.get(arr[i][j]));\n                }\n                else\n                {\n                    hm.put(arr[i][j], hm.get(arr[i][j])+1);\n                }\n            }\n        }\n        \n        List<Integer> res = new ArrayList<Integer>();\n        \/\/System.out.println(\"key: \"+1+\" value: \"+hm.get(1));\n        for(Integer k : hm.keySet())\n        {\n            \/\/System.out.println(\"key: \"+k+\" value: \"+hm.get(k));\n            if(hm.get(k)%2!=0)\n            {\n                res.add(k);\n            }\n        }\n        \n        Collections.sort(res);\n        System.out.print(\"Case #\"+(1)+\": \"); \/\/ change case number\n        for(int i=0;i<res.size();i++)\n        {\n            System.out.print(res.get(i)+\" \");\n        }\n        *\/\n    }\n\n}"}
{"idx":"887","func":"class Main {\n    public static void main(String[] args){\n        Scanner scanner = new Scanner(System.in);\n        int t = scanner.nextInt();\n        for(int x = 1; x <= t; ++x){\n            int n = scanner.nextInt();\n            boolean[] soldiers = new boolean[2500];\n            for(int i = 0; i < 2 * n - 1; ++i){\n                for(int j = 0; j < n; ++j){\n                    int s = scanner.nextInt();\n                    soldiers[s-1] = !soldiers[s-1];\n                }\n            }\n            int count = 0;\n            System.out.print(\"Case #\" + x + \": \");\n            for(int i = 1; i <= 2500; ++i){\n                if(soldiers[i-1]){\n                    ++count;\n                    if(count < n){\n                        System.out.print(i + \" \");\n                    }\n                    else{\n                        System.out.println(i);\n                    }\n                }\n                \n            }\n        }\n    }\n}"}
{"idx":"888","func":"class B\n{\n\n    public static void main(String[] args) throws Exception\n    {\n        File file = new File(\"B-large.in\");\n        Scanner input = new Scanner(file);\n        int numCases = input.nextInt();\n        boolean[] digits = new boolean[2501];\n        for (int n = 0; n < numCases; n++)\n        {\n            String s = \"\";\n            for(int j=0;j<2501;j++)\n                digits[j]=false;\n            int r = input.nextInt();\n            int nums = 2*r*r-r;\n            for(int i=0;i<nums;i++){\n                int a = input.nextInt();\n                digits[a] = digits[a] ? false : true;\n            }\n            for(int i=0;i<2501;i++)\n                if(digits[i])\n                    s = s + i + \" \";\n            s = s.trim();\n            System.out.println(\"Case #\"+(n+1)+\": \"+s);\n        }\n    }\n}"}
{"idx":"889","func":"static void main(String[] args)throws IOException{\n        BufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\n        int n, lim = Integer.parseInt(sc.readLine()), a, b, c;\n        String cad;\n        int [] array;\n        ArrayList<Integer> lista = new ArrayList<Integer>();\n        StringTokenizer st;\n        for (int i = 1; i <= lim; i++) {\n            n = Integer.parseInt(sc.readLine());\n            array = new int[2501];\n            for (int filas = 0; filas < 2*n-1; filas++) {\n                cad = sc.readLine();\n                st = new StringTokenizer(cad);\n                for (int datos = 0; datos < n; datos++) {\n                    array[Integer.parseInt(st.nextToken())]++;\n                }\n            }\n            for (int r = 1; r < 2501; r++) {\n                if (array[r] % 2 != 0) {\n                    lista.add(r);\n                }\n            }\n\n            System.out.print(\"Case #\"+i+\":\");\n            for (Integer t: lista) {\n                System.out.print(\" \"+t);\n            }\n            System.out.println(\"\");\n            lista.clear();\n        }        \n    }\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\/*\n        double a, b, p;\n        final double pi = 3.1415926535; \n        Intervalo intervalo = new Intervalo(2.0, 3.0);\n        Funcion funcion = new Funcion();\n        \n        \/\/ Biseccion\n        \/*\n        Biseccion biseccion = new Biseccion(intervalo, 0.0001, funcion);    \n        biseccion.ejecutar_Algoritmo();    \n        System.out.println(biseccion.getRespuesta());\n        *\/\n\n        \/\/ Punto Fijo\n        \/*\n        PuntoFijo algoritmo_PuntoFijo = new PuntoFijo(0.000000001, 1.5, 4, funcion);\n        algoritmo_PuntoFijo.ejecutar_Algoritmo();\n        System.out.println(algoritmo_PuntoFijo.getRespuesta());\n        \n\n        MetodoNewton algoritmo_MetodoNewton = new MetodoNewton(0.0001, 1, 10, funcion);\n        algoritmo_MetodoNewton.ejecutar_Algoritmo();\n        System.out.println(algoritmo_MetodoNewton.getRespuesta());\n\n*\/"}
{"idx":"890","func":"class ProblemB {\n    public static void main (String[] args) throws FileNotFoundException {\n\n        FileReader file = new FileReader(\"B-large.in\");\n        Scanner in = new Scanner(file);\n        PrintWriter out = new PrintWriter(\"output.txt\");\n\n        int t = in.nextInt();\n\n        for(int b = 1; b<=t; b++) {\n            int n = in.nextInt();\n            int[] a = new int[2501];\n            int[] result = new int[n];\n            int k = 0;\n            for (int i = 0; i < ((2 * n - 1) * n); i++) {\n                a[in.nextInt()] += 1;\n\n            }\n\n            for(int j = 0; j<a.length; j++)\n            {\n                if(!((a[j] % 2)== 0))\n                {\n                    result[k] = j;\n                    k++;\n                }\n\n            }\n            String output =\"\";\n            for(int s = 0; s<result.length; s++)\n            {\n                output += \" \" + result[s];\n            }\n            out.println(\"Case #\" + b +\":\" + output);\n        }\n\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"891","func":"class Main {\n\n    \n    public static void main(String[] args){\n        \/\/ Construct BufferedReader from FileReader\n        String fileName = \"C:\/\/GoogleCodeJam\/input.in\";\n        BufferedReader br;\n        try {\n            br = new BufferedReader(new FileReader(fileName));\n        \n        String line1 = null;\n        int nLine = 0;\n        int nCases = 0;\n        \n        int currentCase = 0;\n        int currentN = 0;\n        int N = 0;\n        boolean readN = false;\n        \n        while ((line1 = br.readLine()) != null) {\n            if(nLine > 0){\n                if(currentCase < nCases){\n                \/\/System.out.println(line);\n                if(!readN){\n                    N = Integer.valueOf(line1);\n                    InputUtils.inputs[currentCase] = new String[2*N-1];\n                    readN = true;\n                }else{\n                    InputUtils.inputs[currentCase][currentN] = line1;\n                    currentN++;\n                    if(currentN >= 2*N-1){\n                        currentN = 0;\n                        readN = false;\n                        N = 0;\n                        currentCase++;\n                    }\n                }\n                }else{\n                    break;\n                }\n            }else{\n                nCases = Integer.valueOf(line1);\n                InputUtils.inputs = new String[nCases][];\n            }\n            nLine++;\n        }\n        \n        br.close();\n        \n        } catch (FileNotFoundException e1) {\n            e1.printStackTrace();\n        } catch (IOException e2) {\n            e2.printStackTrace();\n        }\n        List<String> solutionList = new ArrayList<String>();\n        int T = InputUtils.inputs.length;\n\n        System.out.println(\"COMPUTING...\");\n        for (int nCase = 1; nCase <= T; nCase ++) {\n            \/\/ CODE STARTS HERE \/\/\n              int NumMax = InputUtils.inputs[nCase-1].length;\n              boolean[] numbers = new boolean[2501];\n              Arrays.fill(numbers, false);\n              List<Integer> solution = new ArrayList<Integer>();\n              \n              for(int i = 0; i < NumMax; i++){\n                  String[] line = InputUtils.inputs[nCase-1][i].split(\" \");\n                  for(int j = 0; j < line.length; j++){\n                      if(numbers[Integer.valueOf(line[j])]){\n                          numbers[Integer.valueOf(line[j])] = false;\n                      }else{\n                          numbers[Integer.valueOf(line[j])] = true;\n                      }\n                  }\n              }\n              \n              for(int k = 0; k < numbers.length; k++){\n                  if(numbers[k]) solution.add(k);\n              }\n              \n              Collections.sort(solution);\n              \n              String caseString = \"\";\n\n              for (int s : solution)\n              {\n                  caseString += s + \" \";\n              }\n              \n              caseString = caseString.trim();\n               \n              System.out.println(\"Case #\"+nCase+\": \"+caseString);\n              solutionList.add(\"Case #\"+nCase+\": \"+caseString);\n              \/\/ CODE ENDS HERE \/\/\n        }\n        \n        System.out.println(\"DONE!\");\n        \n        FileWriter writer;\n        try {\n            writer = new FileWriter(\"C:\/\/GoogleCodeJam\/output.in\");\n            for(String str: solutionList) {\n                  writer.write(str + System.getProperty(\"line.separator\"));\n                }\n                writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } \n        \n    }\n}"}
{"idx":"892","func":"class RankAndFile {\n    \n    public static void main(String[] args) throws Exception {\n        File inputFile = new File(\"B-large.in\");\n        Scanner in = new Scanner(inputFile);\n        File outputFile = new File(\"output.txt\");\n        PrintWriter out = new PrintWriter(outputFile);\n\n        int T = in.nextInt();\n        for (int t=0; t<T; t++) {\n            int N = in.nextInt();\n            int[] stat = new int[2501];\n            for (int i=0; i<N*(2*N-1); i++) {\n                int height = in.nextInt();\n                stat[height]++;\n            }\n            StringBuilder output = new StringBuilder();\n            for (int i=1; i<=2500; i++) {\n                if (stat[i]%2 == 1) {\n                    output.append(' ').append(i);\n                }\n            }\n            \n            out.println(\"Case #\"+(t+1)+\":\" + output);\n        }\n\n        out.close();\n    }\n    \n}"}
{"idx":"893","func":"class RankFile {\n    \n    public static void main(String[] args) {\n        \n        if(args.length == 0) {\n            \n            System.out.println(\"No arguments provided\");\n            return;\n            \n        }\n        \n        try {\n            \n            File file = new File(args[0]);\n            Scanner input = new Scanner(file);\n            FileWriter fileOut = new FileWriter(\"output.txt\");\n            BufferedWriter writer = new BufferedWriter(fileOut);\n                        \n            \/\/Simple. Find the numbers which appear an odd number of times in the given lists then order them.\n            \n            int numTests = input.nextInt();\n            \n            int i;\n            \n            for(i = 0; i < numTests; i++) {\n                \n                int lineLength = input.nextInt();\n                \n                \/\/Read in the 2*n - 1 lines. Storing the heights in a hashtable\n                \/\/key =  height, value =  num occurances\n                Hashtable<Integer, Integer> heights = new Hashtable<Integer, Integer>();\n                int j;\n                \n                for(j = 0; j < (2*lineLength - 1)*lineLength; j++) {\n                    \n                    Integer nextHeight = input.nextInt();\n                    \n                    if(heights.containsKey(nextHeight)) {\n                        heights.put(nextHeight, new Integer(heights.get(nextHeight)+1));\n                    } else {\n                        heights.put(nextHeight, 1);\n                    }\n                    \n                }\n                \n                \/\/Put all odd occurance heights in an arrayList\n                ArrayList<Integer> oddHeights = new ArrayList<Integer>();\n                \n                for(Integer height : heights.keySet()) {\n                    \n                    if(heights.get(height)%2 == 1) {\n                        \n                        oddHeights.add(height);\n                        \n                    }\n                    \n                }\n                \n                \/\/Sort the arrayList\n                Collections.sort(oddHeights);\n                \n                \/\/Print it\n                writer.write(\"Case #\" + (i+1) +  \":\");\n                for(j = 0; j < oddHeights.size(); j++) {\n                    \n                    writer.write(\" \" + oddHeights.get(j));\n                    \n                }\n                writer.write(\"\\n\");\n                \n            }\n            \n            writer.close();\n            fileOut.close();\n            input.close();\n            \n        } catch(FileNotFoundException e) {\n            \n            System.out.println(\"Error reading input file\");\n            \n        } catch(IOException e) {\n            \n            System.out.println(\"Error writing output\");\n            \n        }\n        \n    }\n\n}"}
{"idx":"894","func":"class rankandfile {\n\n\n      public static void main (String [] args) throws IOException {\n        \/\/ Use BufferedReader rather than RandomAccessFile; it's much faster\n        BufferedReader f = new BufferedReader(new FileReader(\"B-large(1).in\"));\n                                                      \/\/ input file name goes above\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"rankandfile.out\")));\n        \/\/ Use StringTokenizer vs. readLine\/split -- lots faster\n        StringTokenizer st = new StringTokenizer(f.readLine());\n                              \/\/ Get line, break into tokens\n        \n       \/\/enter program here\n        int cases = Integer.parseInt(st.nextToken());\n        for (int i = 0; i<cases; i++){\n            st = new StringTokenizer(f.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            LinkedList<int[]> vals = new LinkedList<int[]>();\n            for (int j = 0 ; j<2*n-1; j++){\n                st = new StringTokenizer(f.readLine());\n                int[] holder = new int[n];\n                for (int k = 0; k<n; k++){\n                    holder[k] =(Integer.parseInt(st.nextToken()));\n                }\n                \n                vals.add(holder);\n                \n                \n            }\n            \/**\n            for (int j = 0; j<vals.size(); j++){\n                for (int k = 0; k<n; k++){\n                    System.out.print(vals.get(j)[k]+\" \");\n                }System.out.println();\n            }**\/\n            \n            LinkedList<int[]> store1 = new LinkedList<int[]>();\n            LinkedList<int[]> store2 = new LinkedList<int[]>();\n            int index = 0;\n            int missing = -1;\n            while (index<n){\n                \n                int min = Integer.MAX_VALUE;\n                for (int j = 0; j<vals.size(); j++){\n                    if (vals.get(j)[index]<min){\n                        min = vals.get(j)[index];\n                    }\n                }\n                \n                int count = 0;\n                for (int j = 0; j<vals.size(); j++){\n                    \/\/System.out.println(count+\" \"+j+\" \"+vals.size());\n\n                    if (vals.get(j)[index]==min){\n                        if (count == 0) store1.add(Arrays.copyOf(vals.get(j),n));\n                        if (count == 1) store2.add(Arrays.copyOf(vals.get(j),n));\n                        vals.remove(j); j-=1;\n                                                count++;\n                    }\n                    \n                }\n                \n                int[] holder = {};\n                if (count<2) store2.add(holder);\n                if (count<2) missing = index;\n                \n                index++;\n            }\n            \n            String ans = \"\";\n            for (int j = 0; j<n; j++){\n                if (j==missing) ans+= store1.get(missing)[missing]+\" \";\n                else if (store1.get(j)[missing] == store1.get(missing)[j]) ans+=store2.get(j)[missing]+\" \";\n                else ans+= store1.get(j)[missing]+\" \";\n                \/\/System.out.println(ans);\n            }\n            System.out.println(\"Case #\"+(i+1)+\": \"+ans.trim());\n            out.println(\"Case #\"+(i+1)+\": \"+ans.trim());\n        }\n    \n        \n        \/\/ answer output\n\n        out.close();        \n        System.exit(0);                               \/\/ don't omit this!\n      }\n\n}"}
{"idx":"895","func":"class Task2 {\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        List<List<Integer>> testCaseAll = new ArrayList<List<Integer>>();\n        try (BufferedReader br = new BufferedReader(new FileReader(\"D:\\\\input.txt\"))) {\n            String line;\n            br.readLine();\n            while ((line = br.readLine()) != null) {\n                List<Integer> base = new ArrayList<Integer>();\n                for (int i = 0; i < (Integer.valueOf(line)*2-1); i++) {\n                    String[] parts = br.readLine().split(\" \");\n                    for (String string : parts) {\n                        base.add(Integer.valueOf(string));\n                    }\n                    \n                }\n                testCaseAll.add(base);\n            }\n            List<String> result = new ArrayList<>();\n\n            \n            for (List<Integer> numbers : testCaseAll) {\n                List<Integer> clone = new ArrayList<Integer>(numbers);\n                Collections.sort(clone);\n                Integer highest = clone.get(clone.size()-1);\n                String resultValue = \"\";\n                for (int i = 0; i <= highest; i++) {\n                    int amount = Collections.frequency(numbers, Integer.valueOf(i));\n                    if (amount != 0 && amount%2 != 0)\n                        resultValue = resultValue + \" \" + String.valueOf(i);\n                }\n                System.out.println(\"done\");\n                result.add(resultValue);\n            }\n\n            PrintWriter pw = new PrintWriter(new FileWriter(\"D:\\\\outPut.txt\"));\n\n            int i = 1;\n            for (String string : result) {\n                pw.println(\"Case #\" + i + \": \" + string);\n                i++;\n            }\n            pw.close();\n\n        }\n    }\n}"}
{"idx":"896","func":"static void main(String[] args) {\n  Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n  int io=in.nextInt();\n  for(int pq=1;pq<=io;pq++)\n  {\n    int tot=in.nextInt();\n    int ar[][]=new int[(2*tot)-1][tot];\n    int odd[]=new int[tot];\n    int even[]=new int[tot*tot];\n    int evennum=0,oddnum=0;\n    \/\/ int row[][]=new int[tot][tot];\n    \/\/ int col[][]=new int[tot][tot];\n    \/\/ int final[][] = new int[tot][tot];\n    for(int p=0;p<(2*tot)-1;p++)\n    {\n      for(int q=0;q<tot;q++)\n        ar[p][q]=in.nextInt();\n    }\n    for(int p=0;p<(2*tot)-1;p++)\n    {\n      AB:for(int q=0;q<tot;q++)\n      {\n        for(int k=0;k<evennum;k++)\n        {\n          if(ar[p][q]==even[k]) continue AB;\n        }\n        for(int k=0;k<oddnum;k++)\n        {\n          if(ar[p][q]==odd[k]) continue AB;\n        }\n        int total=0;\n        for(int m=0;m<(2*tot)-1;m++)\n        {\n          for(int n=0;n<tot;n++)\n          {\n            if(ar[p][q]==ar[m][n])\n              total++;\n          }\n        }\n        if(total%2==0)\n          {\n            even[evennum]=ar[p][q];\n            evennum++;\n          }\n          else\n          {\n            odd[oddnum]=ar[p][q];\n            oddnum++;\n          }\n      }\n    }\n    Arrays.sort(odd);\n    System.out.print(\"Case #\"+pq+\": \");\n    for(int o=0;o<odd.length;o++)\n    {\n      System.out.print(odd[o]+\" \");\n    }\n    System.out.println();\n  }\n}\n}\n    \/\/ for(int l=0;l<ar.length;l++)\n    \/\/ {\n    \/\/   int small=ar[l][0];\n    \/\/   int pos=l;\n    \/\/   for(int m=l+1;m<ar.length;m++)\n    \/\/   {\n    \/\/     if(ar[m][0]<small)\n    \/\/     {\n    \/\/       small=ar[m][0];\n    \/\/       pos=m;\n    \/\/     }\n    \/\/   }\n    \/\/   for(int o=0;o<tot;o++)\n    \/\/   {\n    \/\/     int temp=ar[l][o];\n    \/\/     ar[l][o]= ar[pos][o];\n    \/\/     ar[pos][o]=temp;\n    \/\/   }\n    \/\/ }\n    \/\/ }\n    \/\/   int c=0,r=0;\n    \/\/   for(int o=0;o<(2*tot-1);o++)\n    \/\/   {\n    \/\/       if(r==0)\n    \/\/       {\n    \/\/         for(int ro=0;ro<tot;ro++)\n    \/\/           final[0][ro]=ar[o][ro];\n    \/\/         r++;\n    \/\/       }\n    \/\/       else\n    \/\/       {\n    \/\/         for(int ro=0;ro<tot;ro++)\n    \/\/         {\n    \/\/           if(ar[o][0]==final[0][co])\n    \/\/           {\n    \/\/\n    \/\/           }\n    \/\/         }\n    \/\/       }\n      \/\/   if(c==0)\n      \/\/   {\n      \/\/     for(int ro=0;ro<tot;ro++)\n      \/\/       row[0][ro]=ar[o][ro];\n      \/\/     c++;\n      \/\/   }\n      \/\/   else\n      \/\/   {\n      \/\/     boolean n=false;\n      \/\/     int m;\n      \/\/     for(m=0;m<tot;m++)\n      \/\/     {\n      \/\/       if(ar[o][m]<=row[c-1][m])\n      \/\/         n=true;\n      \/\/     }\n      \/\/     if(n==false)\n      \/\/     {\n      \/\/       for(m=0;m<tot;m++)\n      \/\/       {\n      \/\/         row[c][m]=ar[o][m];\n      \/\/       }\n      \/\/       c++;\n      \/\/     }\n      \/\/     else\n      \/\/     {\n      \/\/       for(m=0;m<tot;m++)\n      \/\/       {\n      \/\/         col[r][m]=ar[o][m];\n      \/\/       }\n      \/\/       r++;\n      \/\/     }\n      \/\/   }\n      \/\/ }\n      \/\/ if(c==tot)\n      \/\/ {\n      \/\/   for(int y=0;y<tot;y++)\n      \/\/   {\n      \/\/     if(row[y][0]!=col[y][0])\n      \/\/     {System.out.println(Arrays.deepToString(row));\n      \/\/       System.out.println(Arrays.deepToString(col));\n      \/\/       System.out.print(\"Case #\"+pq+\": \");\n      \/\/       for(int u=0;u<tot;u++)\n      \/\/       {\n      \/\/         System.out.print(row[u][y]+\" \");\n      \/\/       }\n      \/\/       System.out.println();\n      \/\/       break;\n      \/\/     }\n      \/\/   }\n      \/\/ }\n      \/\/ else\n      \/\/ {\n      \/\/   for(int y=0;y<tot;y++)\n      \/\/   {\n      \/\/     if(row[y][0]!=col[y][0])\n      \/\/     {System.out.println(Arrays.deepToString(row));\n      \/\/       System.out.println(Arrays.deepToString(col));\n      \/\/       System.out.print(\"Case #\"+pq+\": \");\n      \/\/       for(int u=0;u<tot;u++)\n      \/\/       {\n      \/\/         System.out.print(col[u][y]+\" \");\n      \/\/       }\n      \/\/       System.out.println();\n      \/\/       break;\n      \/\/     }\n      \/\/   }"}
{"idx":"897","func":"class Main {\n    public static void main(String[] args) throws IOException {\n        String file = \"B-large.in\";\n        BufferedReader br = new BufferedReader(new FileReader(file));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"out.txt\"));\n        int n = Integer.parseInt(br.readLine());\n        for (int i = 0; i < n; i++) {\n            int len = Integer.parseInt(br.readLine());\n            ArrayList<Integer> nums = new ArrayList<>();\n            ArrayList<Integer> shows = new ArrayList<>();\n            for (int j = 0; j < len * 2 - 1; j++) {\n                String s = br.readLine();\n                String[] ss = s.split(\" \");\n                for (int k = 0; k < ss.length; k++) {\n                    int a = Integer.parseInt(ss[k]);\n                    if (nums.contains(a)) {\n                        shows.set(nums.lastIndexOf(a), shows.get(nums.lastIndexOf(a)) + 1);\n                    } else {\n                        nums.add(a);\n                        shows.add(1);\n                    }\n                }\n            }\n            int[] ints = new int[len];\n            for (int j = 0, k = 0; j < nums.size(); j++) {\n                if (shows.get(j) % 2 != 0)\n                    ints[k++] = nums.get(j);\n            }\n            Arrays.sort(ints);\n            StringBuilder sb = new StringBuilder();\n            sb.append(ints[0]);\n            for (int j = 1; j < ints.length; j++) {\n                sb.append(\" \").append(ints[j]);\n            }\n            bw.write(\"Case #\" + (i + 1) + \": \" + sb.toString());\n            bw.newLine();\n        }\n        br.close();\n        bw.close();\n    }\n}"}
{"idx":"898","func":"static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t, n, i, j;\n\n        t = sc.nextInt();\n        for(i=1; i<=t; i++) {\n            n = sc.nextInt();\n            int[] arr = new int[(2*n-1)*n];\n            for(j=0; j<arr.length; j++)\n                arr[j] = sc.nextInt();\n            int[] distinct = new int[arr.length]; \n            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n            int p = 0;\n            for(j=0; j<arr.length; j++) {\n                if(!map.containsKey(arr[j])) {\n                    distinct[p++] = arr[j];\n                    map.put(arr[j], 1);\n                }\n                else\n                    map.put(arr[j], map.get(arr[j]) + 1);\n            }\n            int cnt = 0;\n            int[] missing = new int[n];\n            for(j=0; j<p; j++)\n                if(map.get(distinct[j]) % 2 != 0)\n                    missing[cnt++] = distinct[j];\n            Arrays.sort(missing);\n\n            System.out.print(\"Case #\" + i + \":\");\n            for(j=0; j<n; j++)\n                System.out.print(\" \" + missing[j]);\n            System.out.println();\n        }\n    }\n}"}
{"idx":"899","func":"class A2 {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n\n        for (int z = 1; z <= t; ++z) {\n            int N = in.nextInt();\n            int[][] arr = new int[N][N];\n            List<int[]> separate = new ArrayList<>();\n            List<int[]> rows = new ArrayList<>();\n            List<int[]> cols = new ArrayList<>();\n\n            HashMap<Integer, Integer> all = new HashMap<>();\n            for (int i = 0; i < 2*N - 1; i++) {\n                for (int j = 0; j < N; j++) {\n                    int n = in.nextInt();\n                    if (all.containsKey(n)) {\n                        all.put(n, all.get(n) + 1);\n                    } else {\n                        all.put(n, 1);\n                    }\n                }\n            }\n            List<Integer> missing = new ArrayList<>();\n\n\n            for (int n : all.keySet()) {\n                if (all.get(n) % 2 != 0) {\n                    missing.add(n);\n                }\n            }\n            Collections.sort(missing);\n\/\/            List<Integer> fsts = new ArrayList<>();\n\/\/            for (int i = 0; i < 2*N - 1; i++) {\n\/\/                int[] temp = new int[N];\n\/\/                for (int j = 0; j < N; j++) {\n\/\/                    temp[j] = in.nextInt();\n\/\/                }\n\/\/                separate.add(temp);\n\/\/                fsts.add(temp[0]);\n\/\/            }\n\/\/\n\/\/            int fst = fsts.indexOf(Collections.min(fsts));\n\/\/            int[] fstrow = separate.get(fst);\n\/\/            rows.add(fstrow);\n\/\/\n\/\/            separate.remove(fst);\n\/\/            fsts.remove(fst);\n\/\/            List<Integer> missing = new ArrayList<>();\n\/\/            int ind = -1;\n\/\/            boolean valid = false;\n\/\/            boolean rm = false;\n\/\/\n\/\/            for (int i = 0; i < fstrow.length; i++) {\n\/\/                if (fsts.contains(fstrow[i])) {\n\/\/                    int j = fsts.indexOf(fstrow[i]);\n\/\/                    cols.add(separate.get(j));\n\/\/                    separate.remove(j);\n\/\/                    fsts.remove(j);\n\/\/                } else {\n\/\/                    missing.add(fstrow[i]);\n\/\/                    ind = i;\n\/\/                }\n\/\/            }\n\/\/            if (ind != -1) {\n\/\/                for (int[] row : separate) {\n\/\/                    missing.add(row[ind]);\n\/\/                }\n\/\/            }\n\/\/\n\/\/            if (ind == -1) {\n\/\/                for (int[] row: separate) {\n\/\/                    rows.add(row);\n\/\/                }\n\/\/                int[] col = cols.get(0);\n\/\/                for (int i = 1; i < col.length; i++) {\n\/\/                    if (! fsts.contains(col[i])) {\n\/\/                        ind = i;\n\/\/                        break;\n\/\/                    }\n\/\/                }\n\/\/                System.out.println(cols.size());\n\/\/                for (int[] c : cols){\n\/\/                    missing.add(c[ind]);\n\/\/                }\n\/\/            }\n\n            System.out.print(\"Case #\" + z + \":\" );\n            for (int k : missing) {\n                System.out.print(\" \" + k);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"900","func":"class Solution {\n\n    public static void main(String[] args) {\n        \/* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. *\/\n    Scanner scnr=new Scanner(System.in);\n    \n    int t=scnr.nextInt();\n    String ans[]=new String[t];\n    scnr.nextLine();   \n    for(int i=0;i<t;i++){\n        HashMap<Integer,Boolean> data=new HashMap<>();\n        int n=scnr.nextInt();\n        Integer j=0;\n        Integer constant=2*n*n-n;\n        while(j<constant){\n            Integer in=scnr.nextInt();\n            if(data.containsKey(in)){\n                data.remove(in);\n            }\n            else{\n                data.putIfAbsent(in, false);\n            }\n            j++;\n        }\n        StringBuilder reqString=new StringBuilder();\n        for(j=1;j<=2500;j++){\n            if(data.containsKey(j)){\n                reqString.append(j);\n                reqString.append(\" \");\n            }\n        }\n        \n        ans[i]=reqString.toString();\n    }\n    for(int i=0;i<t;i++){\n        System.out.println(\"Case #\"+(i+1)+\": \"+ans[i]);\n    }\n    } \n    }"}
{"idx":"901","func":"class b {\n\n    \/\/public static int[][] arrs;\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        int t = in.nextInt();\n\n        for(int caseN = 1; caseN <= t; caseN++) {\n            int n = in.nextInt();\n            \/\/arrs = new int[2 * n - 1][n];\n            int[] counts = new int[2501];\n            for(int i = 0; i < 2 * n - 1; i++)\n                for(int ii = 0; ii < n; ii++) {\n                    int x = in.nextInt();\n                    counts[x]++;\n                }\n\n            System.out.print(\"Case #\" + caseN + \":\");\n            for(int i = 1; i < 2501; i++) {\n                if(counts[i] > 0 && counts[i] % 2 == 1)\n                    System.out.print(\" \" + i);\n            }\n            System.out.println();\n        }\n\n    }\n\n\n}"}
{"idx":"902","func":". *\/\nclass Ideone\n{\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        DataInputStream in = new DataInputStream(System.in);\n        int t,h;\n        t= Integer.parseInt(in.readLine());\n        int heights[]= new int[2502];\n        for(int k=0;k<2501;k++)\n            heights[k]=0;\n        for(int i=1;i<=t;i++)\n        {\n            int n;\n            n= Integer.parseInt(in.readLine());\n            for(int j=1;j<2*n;j++)\n            {\n                String line=in.readLine();\n                StringTokenizer st= new StringTokenizer(line);\n                for(int x=0;x<n;x++)\n                {\n                    h=Integer.parseInt(st.nextToken());\n                    System.out.print(h+\" \");\n                    heights[h]=heights[h]+1;\n                }\n                    System.out.println(\"\");\n            }\n            String s=\"\";\n            for(int k=0;k<2502;k++)\n            {\n                if(heights[k]%2!=0)\n                    s=s+k+\" \";\n                heights[k]=0;\n            }\n            s=s.trim();\n            System.out.println(\"Case #\"+i+\": \"+s);\n        }\n    }\n}"}
{"idx":"903","func":"class RankAndFile {\n\n    public static void main(String[] args) throws FileNotFoundException{\n      Scanner in = new Scanner(new File(args[0]));\n      int t = in.nextInt();\n      \n     for(int i = 0; i < t; i++) {\n       int n = in.nextInt();\n       \n       int[][] lists = new int[2*n - 1][n];\n       for(int j = 0 ; j < 2 * n - 1; j++) {\n          for(int k = 0; k < n; k++) {\n            lists[j][k] = in.nextInt();            \n          }\n       }\n       \n       int[] heightOccurences = new int[2501];\n       for(int j = 0 ; j < 2 * n - 1; j++) {\n          for(int k = 0; k < n; k++) {\n            heightOccurences[lists[j][k]]  += 1;\n          }\n       }\n       System.out.format(\"Case #%d:\", i + 1);\n       for(int j = 1; j < heightOccurences.length; j++) {\n         if(heightOccurences[j] % 2 != 0) {\n          System.out.format(\" %d\", j);\n         }\n       }\n       System.out.format(\"%n\");       \n       \n     }\n    }\n\n}"}
{"idx":"904","func":"class RankAndFile {\n\/\/    static private final String INPUT = \"G:\/C-competitions\/CodeJam\/2016\/Round 1A\/Problem 2\/sample_input.txt\";\n\/\/    static private final String OUTPUT = \"G:\/C-competitions\/CodeJam\/2016\/Round 1A\/Problem 2\/sample_output.txt\";\n\n\/\/    static private final String INPUT = \"G:\/C-competitions\/CodeJam\/2016\/Round 1A\/Problem 2\/s_input_attempt0.in\";\n\/\/    static private final String OUTPUT = \"G:\/C-competitions\/CodeJam\/2016\/Round 1A\/Problem 2\/s_output_attempt0.txt\";\n    \n    static private final String INPUT = \"G:\/C-competitions\/CodeJam\/2016\/Round 1A\/Problem 2\/b_input.in\";\n    static private final String OUTPUT = \"G:\/C-competitions\/CodeJam\/2016\/Round 1A\/Problem 2\/b_output.txt\";\n    \n    static private Scanner in;\n    \n    public static void main(String[] args) {\n        FileInputStream instream = null;  \n          PrintStream outstream = null;  \n         \n          try {  \n              instream = new FileInputStream(INPUT);  \n              outstream = new PrintStream(new FileOutputStream(OUTPUT));  \n              System.setIn(instream);  \n              System.setOut(outstream);  \n          } catch (Exception e) {  \n              System.err.println(\"Error Occurred.\");  \n          }  \n         \n          in = new Scanner(System.in);  \n          int T=in.nextInt();\n          \n          for (int t=1;t<=T;t++) {  \n              System.out.print(\"Case #\"+t+\":\");\n              int N=in.nextInt();\n            int[] flags=new int[2502];\n            for(int i=0;i<N*(2*N-1);i++) {\n                int x=in.nextInt();\n                flags[x]++;\n            }\n            for(int i=1;i<2501;i++) {\n                if((flags[i]%2)!=0)\n                    System.out.print(\" \"+i);\n            }\n            System.out.println();                                       \n          }\n          System.err.println(\"done.\");\n          in.close();\n          return;\n    }\n\n}"}
{"idx":"905","func":"class Round1B {\n    public static void main(String[] args) throws NumberFormatException, IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"input\")));\n        \n        int test_no = Integer.parseInt(br.readLine());\n        \n        BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\n        \n        for(int i = 1; i <= test_no; i++)\n        {\n            int N = Integer.parseInt(br.readLine());\n            ArrayList<String> alllist = new ArrayList<String>();\n            int[] count = new int[2500];\n            for(int j = 0; j < 2 * N - 1;j++)\n            {\n                String[] oneline = br.readLine().split(\" \");\n                for(int k = 0; k < N; k++)\n                    count[Integer.parseInt(oneline[k]) - 1]++;\n            }\n            StringBuilder result = new StringBuilder();\n            \/\/System.out.println(count[14]);\n            for(int m = 0; m < 2500; m++)\n            {\n                if(count[m] % 2 == 1)\n                {\n                    result.append(String.valueOf(m+1));\n                    result.append(\" \");\n                }\n            }\n            System.out.println(result.toString().trim());\n                \n\n            out.write(\"Case #\");\n            out.write(String.valueOf(i));\n            out.write(\": \");\n            out.write(result.toString().trim());\n            out.write(\"\\n\");    \n\/\/            System.out.println(result.toString());\n        }\n        br.close();\n        out.close();        \n    }\n\n}"}
{"idx":"906","func":"class B {\n    \n    private static String fn = \"B-large\";\n    private static boolean isSubmit = true;\n    \n    public static void main(String[] args) throws FileNotFoundException {\n        if (isSubmit) {\n            System.setIn(new FileInputStream(\"test\/\" + fn + \".in\"));\n            System.setOut(new PrintStream(\"test\/\" + fn + \".out\"));\n        }\n        \n        Scanner in = new Scanner(System.in);\n        int t0 = in.nextInt();\n        for (int i0 = 1; i0 <= t0; i0++) {\n            int n = in.nextInt();\n            int[] a = new int[2510];\n            for (int i = 0; i < n * (2 * n - 1); i++) {\n                a[in.nextInt()]++;\n            }\n            \n            System.out.print(\"Case #\" + i0 + \":\");\n            for (int i = 1; i <= 2500; i++) {\n                if (a[i] % 2 != 0) {\n                    System.out.print(\" \" + i);\n                }\n            }\n            System.out.println();\n        }\n        \n        in.close();\n    }\n}"}
{"idx":"907","func":"class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for (int i = 1; i <= T; i++) {\n            int N = sc.nextInt();\n            HashMap<Integer, Integer> map = new HashMap<>();\n            for (int j = 0; j < N * (2 * N - 1); j++) {\n                int n = sc.nextInt();\n                if (map.containsKey(n)) {\n                    map.put(n, map.get(n) + 1);\n                } else {\n                    map.put(n, 1);\n                }\n            }\n            ArrayList<Integer> list = new ArrayList<>();\n            for (int k : map.keySet()) {\n                if (map.get(k) % 2 == 1) {\n                    list.add(k);\n                }\n            }\n            Collections.sort(list);\n            System.out.print(\"Case #\" + i + \":\");\n            for (int k : list) {\n                System.out.print(\" \" + k);\n            }\n            System.out.println();\n        }\n        sc.close();\n    }\n}"}
{"idx":"908","func":"class QB {\n    private static Reader in;\n    private static PrintWriter out;\n    public static final String NAME = \".\\\\codeJamRound1\\\\B-large\";\n\n    public static void main(String[] args) throws IOException {    \n        \n        out = new PrintWriter(new BufferedWriter(new FileWriter(NAME + \".out\")));\n        File file = new File(NAME+\".in\");\n        \n        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n            int T = Integer.parseInt(br.readLine());\n            String line;\n            for(int i=0; i<T; i++){\n                int N = Integer.parseInt(br.readLine());\n                Map<Integer, Integer> map = new HashMap<>();\n                \n                for(int k=0; k<2*N-1; k++){\n                    line = br.readLine();                \n                    String[] numStr = line.split(\" \");\n\n                    for(int j=0; j<numStr.length; j++){\n                        int key = Integer.parseInt(numStr[j]);\n                        \/\/System.out.println(key);\n                        \/\/System.out.println(map);\n                        if(map.containsKey(key)){\n                            map.remove(key);\n                        }else{\n                            map.put(key, 1);\n                        }\n                    }\n                }\n\n                \/\/System.out.println(map);\n                \n                List<Integer> singleNum = new ArrayList<>(map.keySet());\n                Collections.sort(singleNum);\n                StringBuilder result = new StringBuilder();\n                for(int e: singleNum){\n                    result.append(\" \" + e);\n                }\n                \n                out.println(\"Case #\" + (i+1) + \":\" + result.toString());\n            }\n            \n        }\n        \n        out.close();\n        System.exit(0);\n        \n    }\n}"}
{"idx":"909","func":"class Solder {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(\"resources\/A-large-solder.in\"));\n        FileWriter fw = new FileWriter(\"resources\/A-large-solder.out\");\n        int C = new Integer(in.readLine());        \n\n        for (int i = 1; i <= C; i++){\n            int N = new Integer(in.readLine());\n            int[][] heights = new int [2500*2500][2];            \n            for (int j = 0; j < 2*N - 1; j++){\n                StringTokenizer st = new StringTokenizer(in.readLine());\n                for (int v = 0; v < N; v++){\n                    int height = new Integer(st.nextToken());\n                    boolean matched = false;\n                    int i1 = 0;\n                    for (; i1 < N * N && heights[i1][0] > 0;  i1++){\n                        if (height == heights[i1][0]){\n                            heights[i1][1]++;    \n                            matched = true;\n                        }\n                    }\n                    if (!matched) {\n                        heights[i1][0] = height;\n                        heights[i1][1]++;\n                    }\n                }\n            }            \n            ArrayList result = new ArrayList();\n            for(int i2 = 0; i2 < N * N && heights[i2][0] > 0; i2++){\n                if (heights[i2][1] % 2 == 1)\n                    result.add(heights[i2][0]);\n            }        \n            Collections.sort(result);\n            fw.write(\"Case #\" + i + \": \");\n            for (int i1 = 0; i1 < result.size(); i1++ ){\n                fw.write(result.get(i1) + \" \");\n            }\n            fw.write(\"\\n\");\n        }        \n        fw.flush();\n        fw.close();\n    }\n    \n\n}"}
{"idx":"910","func":"class B {\n    Scanner sc;\n    PrintWriter pw;\n    int N;\n    int[][] h;\n    \n    public static void main(String[] args) throws Exception{\n        String filePrefix = args.length>0?args[0]:\"B-large\";\n\n        try {\n            B r = new B();\n            r.sc = new Scanner(new FileReader(filePrefix + \".in\"));\n            r.pw = new PrintWriter(new FileWriter(filePrefix + \".out\"));\n            int ntest = r.sc.nextInt();\n            for(int test=1; test<=ntest; test++) {\n                Scanner sc = r.sc;\n                r.N = sc.nextInt();\n                r.h = new int[2*r.N-1][r.N];\n                for(int i=0; i<2*r.N-1; i++)\n                    for(int j=0; j<r.N; j++)\n                        r.h[i][j] = sc.nextInt();\n                r.pw.print(\"Case #\" + test + \": \");\n                System.out.print(\"Case #\" + test + \": \");\n                int[] count = new int[2500];\n                for(int i=0; i<2*r.N-1; i++)\n                    for(int j=0; j<r.N; j++)\n                        count[r.h[i][j]-1]++;\n                \n                int[] ans = new int[r.N];\n                int idx=0;\n                for(int i=0; i<2500; i++)\n                    if(count[i]%2!=0)\n                        ans[idx++] = i+1;\n                \n                for(int i=0; i<r.N; i++) {\n                    Object s = ans[i] + (i==r.N-1 ? \"\\n\" : \" \");\n                    r.pw.print(s);\n                    System.out.print(s);\n                }\n            }\n            System.out.println(\"Finished.\");\n            r.sc.close();\n            r.pw.close();\n        } catch(Exception e) {\n            System.err.println(e);\n        }\n    }\n    \n}"}
{"idx":"911","func":"class Main {\n\n    static FileReader fr;\n    static Scanner sc;\n    static FileWriter fw;\n\n    public static void main(String[] args) throws IOException {\n        fr = new FileReader(\"B-large.in\");\n        fw = new FileWriter(\"output.txt\");\n        sc = new Scanner(fr);\n        sc.useLocale(Locale.US);\n\n        int t = sc.nextInt();\n        sc.nextLine();\n\n        for (int i=1; i<=t; i++) {\n            String str = \"Case #\"+i+\": \";\n            System.out.print(str);\n            fw.write(str);\n            int n = sc.nextInt();\n            int heights[] = new int[2501];\n            \n            for (int l=0; l<2*n-1; l++) {\n                for (int i1=0; i1<n; i1++) {\n                    int height = sc.nextInt();\n                    heights[height]++;\n                }\n            }\n            \n            boolean first = true;\n            for (int height=0; height<heights.length; height++) {\n                if (heights[height] % 2 != 0) {\n                    if (!first) {\n                        System.out.print(\" \");\n                        fw.write(\" \");\n                    }\n                    String str2 = height+\"\";\n                    System.out.print(str2);\n                    fw.write(str2);\n                    first = false;\n                }\n            }\n            String str1 = \"\" + \"\\n\";\n            System.out.print(str1);\n            fw.write(str1);\n        }\n\n        sc.close();\n        fw.close();\n        fr.close();\n    }\n}"}
{"idx":"912","func":"class B {\n    public static void main(String[] args) throws IOException {\n        final Scanner sc = new Scanner(new FileReader(\"Bin.in\"));\n        final BufferedWriter w = new BufferedWriter(new FileWriter(\"Bout.txt\"));\n\n        if (sc.hasNext()) {\n            final int testNumber = sc.nextInt();\n            for (int test = 1; test <= testNumber; test++) {\n                int N = sc.nextInt();\n                String answer = \"\";\n\n                HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();\n                for (int j = 0; j < ((N*N*2)-N); j++) {\n                    Integer num = sc.nextInt();\n                    if (!map.containsKey(num)) {\n                        map.put(num,1);\n                    } else {\n                        map.replace(num, map.get(num)+1);\n                    }\n                }\n                ArrayList<Integer> al = new ArrayList<Integer>();\n                for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n                    if ((entry.getValue() %2) ==1) {\n                        al.add(entry.getKey());\n                    }\n                }\n                int temp;\n                for (int i = 1; i < al.size(); i++) {\n                    for (int j = i; j > 0; j--) {\n                        if (al.get(j-1) > al.get(j)) {\n                            temp = al.get(j-1);\n                            al.set(j-1,al.get(j));\n                            al.set(j, temp);\n                        }\n                    }\n                }\n                for (int num : al) {\n                    answer += num + \" \";\n                }\n\n                w.write(\"Case #\"+test+\": \"+answer+\"\\n\");\n                System.out.println(\"Case #\"+test+\": \"+answer);\n            }\n        }\n        sc.close();\n        w.flush();\n        w.close();\n    }\n}"}
{"idx":"913","func":"static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int t = scanner.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int length = scanner.nextInt();\n            int[][] c = new int [2*length-1][length];\n            int[] p = new int[2501];\n            for (int j = 0; j < 2501; j++) {\n                p[j] = 0;\n            }\n            for (int j = 0; j < 2*length-1; j++) {\n                for (int k = 0; k < length; k++) {\n                    c[j][k] = scanner.nextInt();\n                    p[c[j][k]] ++;\n                }\n            }\n            int[] pc = new int[length];\n            int x = 0;\n            for (int j = 1; j < 2501; j++) {\n                if (p[j] %2 != 0) {\n                    pc[x++] = j;\n                }\n            }\n            Arrays.sort(pc);\n            System.out.print(\"Case #\" + i + \":\");\n            for (int j = 0; j < length; j++) {\n                System.out.print(\" \" + pc[j]);\n            }\n            System.out.println(\"\");\n        }\n    }\n\n}"}
{"idx":"914","func":"final class RankandFileSolver {\n\n    \/** Scanner instance that allows to parse problem input. **\/\n    private final Scanner scanner;\n\n    \/**\n     * Default constructor.\n     * \n     * @param scanner Scanner instance that allows to parse problem input. \n     *\/\n    private RankandFileSolver(final Scanner scanner) {\n        this.scanner = scanner;\n    }\n\n    \/**\n     * Solver entry point.\n     * \n     * @param args Command line parameters.\n     * @throws FileNotFoundException If input file could not be parsed.\n     *\/\n    public static void main(final String [] args) throws FileNotFoundException {\n        final File file = new File(args[0]);\n        final Scanner scanner = new Scanner(file);\n        final int n = scanner.nextInt();\n        final RankandFileSolver solver = new RankandFileSolver(scanner);\n        for (int i = 0; i < n; i++) {\n            System.out.print(\"Case #\" + (i + 1) + \": \");\n            int n1 = solver.scanner.nextInt();\n            boolean[] m = new boolean[2501];\n            for (int i3 = 1; i3 <= 2500; i3++) {\n                m[i3] = false;\n            }\n            \n            for (int i2 = 0; i2 < n1 * 2 - 1; i2++) {\n                for (int j = 0; j < n1; j++) {\n                    int t = solver.scanner.nextInt();    \n                    m[t] = !m[t];\n                }\n            }\n            \n            boolean first = true;\n            for (int i1 = 1; i1 <= 2500; i1++) {\n                if (m[i1]) {\n                    if (first) {\n                        System.out.print(i1);\n                        first = false;\n                    } else {\n                        System.out.print(\" \" + i1);\n                    }\n                }\n            }\n            System.out.println();\n        }\n        scanner.close();\n    }\n\n}"}
{"idx":"915","func":"class RankAndFile {\n\n\n    public static void main(String[] args) throws IOException {\n        \n        String path =  \"B-large.in\";\n        File f = new File(path);\n        PrintWriter out = null;\n        \n        \n        try{\n            File fi = new File(\"resultBlarge.txt\");\n            fi.createNewFile();\n            out = new PrintWriter(fi);\n            Scanner sc = new Scanner(f);\n            int num = sc.nextInt();\n            \/\/sc.nextLine();\n            \n            for(int k=0; k<num; k++){\n                \n                int n = sc.nextInt();\n                \/\/ sc.nextLine();\n            TreeSet<Integer> lista = new TreeSet<>();    \n                \n                for(int i=0; i<(2*n)-1; i++){\n                    \n                    for(int j=0; j<n; j++){\n                        \n                        int z = sc.nextInt();\n                    \/\/    System.out.println(z);\n                        \n                        if(lista.contains(z)){\n                            \/\/System.out.println(\"Removing: \" + lista.toString());\n                            \/\/boolean flag = lista.remove(z);\n                            lista.remove(z);\n                            \n                        }else {\n                            \/\/System.out.println(\"Adding: \" + lista.toString());\n                            lista.add(z);    \n                        }\n                    }\n                    \n                }\n                \n            \/\/    Collections.sort(lista);\n\n                out.printf(\"Case #%d: \", (k+1));\n                for(Integer i : lista){\n                    \n                    out.print(i + \" \");\n                    \n                }\n            out.println();\n            }\n            \n            sc.close();\n        } catch (FileNotFoundException e){\n            System.out.println(\"File not found.\");\n            \n        }finally{\n            out.close();\n        \n        }\n\n    }\n    \n    \n}"}
{"idx":"916","func":"class RankAndFile {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner scan=new Scanner(System.in);\n        int T=scan.nextInt();\n        \/\/        scan.nextLine();\n        for(int i=1;i<=T;i++){\n            int n=scan.nextInt();\n            HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>(); \n            for(int j=0;j<(2*n*n)-n;j++){\n                int input=scan.nextInt();\n                if(hm.containsKey(input)){\n                    hm.put(input, hm.get(input)+1);\n                }\n                else{\n                    hm.put(input,1);\n                }\n            }\n            Iterator it = hm.entrySet().iterator();\n            ArrayList<Integer> aList=new ArrayList();\n            while (it.hasNext()) {\n                Map.Entry pair = (Map.Entry)it.next();\n                if(((int)pair.getValue())%2==1){\n                    aList.add((int)pair.getKey());\n                }\n                it.remove(); \n            }\n            Collections.sort(aList);\n            String s=\"\";\n            while(!aList.isEmpty()){\n                s=s+aList.remove(0)+\" \";\n            }\n            System.out.print(\"Case #\"+i+\": \"+s.trim()+\"\\n\");\n        }\n\n    }\n\n}"}
{"idx":"917","func":"class B\n{\n\n    public static void main (String [] args)\n    {\n        Scanner sc = new Scanner(System.in);\n\n        int nocase = sc.nextInt();\n        sc.nextLine();\n        for(int ind=1; ind<=nocase; ind++)\n        {\n            \n            int N = sc.nextInt();\n            HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n            for(int r=0; r<2*N-1; r++)\n            for(int c=0; c<N; c++)\n            {\n                int n = sc.nextInt();\n                int count = 0;\n                if(hm.containsKey(n)) count = hm.get(n);\n                hm.put(n, count+1);\n            }\n\n            Set<Integer> ks = hm.keySet();\n            ArrayList<Integer> L = new ArrayList<Integer>();\n            for(Integer n: ks)\n            {\n                int count = hm.get(n);\n                if(count%2 != 0)\n                    L.add(n);\n            }\n            Collections.sort(L);\n\n            StringBuffer sb = new StringBuffer();\n            for(Integer n: L)\n            {\n                sb.append(n);\n                sb.append(' ');\n            }\n            String soln = sb.toString();\n            System.out.printf(\"Case #%d: %s\\n\", ind, soln);\n        }\n    }\n\n}"}
{"idx":"918","func":"class Solution {\n    public static void main(String[] args){\n        \n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int i = 1; i <= T; i++){\n            \n            int numR = sc.nextInt();\n            \/\/number of lines\n            int[] arr = new int[2505];\n            for(int j = 0; j < numR*2-1; j++){\n                \/\/number of integers\n                for(int k = 0; k < numR; k++){\n                    int temp = sc.nextInt();\n                    \/\/System.out.println(\"Here\"+ temp);\n                    arr[temp]++;\n                }\n            }\n            ArrayList<Integer> list = new ArrayList<Integer>();\n            for(int x = 0; x < arr.length; x++){\n                if( arr[x] % 2 == 1){\n                    list.add(x);\n                }\n            }\n            Collections.sort(list);\n            System.out.print(\"Case #\"+i+\": \");\n            int p = 0;\n            for( p = 0; p < list.size()-1; p++){\n                System.out.print(list.get(p)+\" \");\n            }\n            System.out.println(list.get(p));\n        }\n        \n        \n    }\n}"}
{"idx":"919","func":"class Main {\n\n    private static HashSet<Integer> sSet = new HashSet<Integer>();\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        for (int i = 1; i <= t; ++i) {\n            int n = in.nextInt();\n            sSet.clear();\n            int totalNumber = n * (2 * n - 1);\n            for (int count = 0; count < totalNumber; count++) {\n                int current = in.nextInt();\n                if (sSet.contains(current)) {\n                    sSet.remove(current);\n                } else {\n                    sSet.add(current);\n                }\n            }\n            Integer[] sorted = sSet.toArray(new Integer[]{});\n            Arrays.sort(sorted);\n            System.out.print(\"Case #\" + i + \":\");\n            for (int c : sorted) {\n                System.out.print(\" \");\n                System.out.print(c);\n            }\n            System.out.print(\"\\n\");\n        }\n    }\n\n}"}
{"idx":"920","func":"class RankAndFile {\n        \n    \/\/ Fixed Code Begins *********\n    private static int count = 0;\n    private static final String INPUT_FILE = \"input.txt\";\n    private static final Path OUTPUT_PATH = Paths.get(\"output.txt\");\n    \n    private static final List<String> TESTS = new ArrayList<>();\n    private static final List<String> OUTPUT = new ArrayList<>();\n    \n    public static void main(String[] args) throws IOException {\n        try (BufferedReader br = new BufferedReader(new FileReader(INPUT_FILE))) {\n            String line;\n            int t = Integer.parseInt(br.readLine());\n            \n            for(int i = 0; i < t; i++){\n                int n = Integer.parseInt(br.readLine());\n                int matrix[][] = new int[2*n - 1][];\n                for(int j = 0; j < 2*n - 1; j++) {\n                    matrix[j] = new int[n];\n                    String[] row = br.readLine().split(\" \");\n                    for(int k = 0; k < n; k++)\n                    {\n                        matrix[j][k] = Integer.parseInt(row[k]);\n                    }\n                }\n                HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n                for(int i2 = 0; i2 < 2 * n - 1; i2++)\n                {\n                    for(int j = 0; j < n; j++)\n                    {\n                        int element = matrix[i2][j];\n                        if(map.containsKey(element))\n                            map.put(element,map.get(element)+1);\n                        else\n                            map.put(element,1);\n                    }\n                              \n                }\n                int[] arr = new int[n];\n                int i1 = 0;\n                for(int height: map.keySet())\n                {\n                    if(map.get(height) % 2 == 0)\n                        continue;\n                    \n                    arr[i1++] = height;\n                }\n                StringBuilder sb = new StringBuilder();\n                Arrays.sort(arr);\n                for(int element: arr)\n                    sb.append(element).append(\" \");\n                \n                int c = OUTPUT.size() + 1;\n                OUTPUT.add(\"Case #\" + c + \": \" + sb.toString().trim());\n            }\n            \n        }\n        Files.write(OUTPUT_PATH, OUTPUT,Charset.defaultCharset());\n    }\n}"}
{"idx":"921","func":"class RankAndFile {\n    static String inputFile = \"\";\n    static String outputFile = \"\";\n    static Scanner in;\n\n    static {\n        outputFile = \"B.out\";\n    }\n\n    public static void main(String[] args) throws IOException {\n        in = new Scanner(new BufferedReader((new FileReader(\"\/Users\/sandz\/Downloads\/B-large.in\"))));\n        BufferedWriter out = new BufferedWriter(new FileWriter(outputFile));\n        int testCases = in.nextInt();\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 1; i <= testCases; i++) {\n            int n = in.nextInt();\n            Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n            for (int i1 = 0; i1 < 2 * n - 1; i1++) {\n                for (int j = 0; j < n; j++) {\n                    int row = in.nextInt();\n                    Integer count = map.get(row);\n                    if (count == null) {\n                        count = 0;\n                    }\n                    map.put(row, ++count);\n                }\n            }\n            List<Integer> x = new LinkedList<Integer>();\n            for (Integer key : map.keySet()) {\n                int count = map.get(key);\n                if (count % 2 == 1) {\n                    x.add(key);\n                }\n            }\n            Collections.sort(x);\n            \n            StringBuffer buffer = new StringBuffer();\n            for (Integer integer : x) {\n                buffer.append(integer + \" \");\n            }\n            String ans = buffer.toString();\n            stringBuilder.append(\"CASE #\" + (i) + \": \" + ans + \"\\n\");\n        }\n        System.out.println(stringBuilder.toString());\n        out.write(stringBuilder.toString());\n        out.flush();\n        in.close();\n        out.close();\n    }\n\n}"}
{"idx":"922","func":"class B\n{\n    public static void main(String[] args) throws Exception\n    {\n        out = new PrintWriter(new FileWriter(\"out.txt\"));\n        int t = Integer.parseInt(next());\n        for (int r = 1; r <= t; r++)\n        {\n            int n = Integer.parseInt(next());\n            int[] heights = new int[2501];\n            for (int i = 0; i < 2 * n - 1; i++)\n                for (int j = 0; j < n; j++)\n                    heights[Integer.parseInt(next())]++;\n            \n            ArrayList<Integer> missing = new ArrayList<Integer>();\n            for (int i = 1; i <= 2500; i++)\n                if (heights[i] % 2 != 0)\n                    missing.add(i);\n            Collections.sort(missing);\n            \n            String ans = \"\";\n            for (int num : missing)\n                ans += num + \" \";\n            ans = ans.trim();\n            out.printf(\"Case #%d: %s\\n\", r, ans);\n        }\n        out.close();\n    }\n\n    static BufferedReader br = new BufferedReader(new InputStreamReader(\n            System.in));\n    static PrintWriter out;\n    static StringTokenizer st;\n\n    static String next() throws IOException\n    {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine().trim());\n        return st.nextToken();\n    }\n}"}
{"idx":"923","func":"class RankAndFile {\n\n\n    public static void main(String[] args){\n\n\n        Scanner input;\n        Formatter output;\n        int b = 1;\n        try{\n            output = new Formatter( \"output.txt\" );\n            input = new Scanner(new File( \"B-large(1).in\" ));\/\/Change to console while coding\n            \/\/input = new Scanner(System.in);\n            int T = input.nextInt();\n\n            for (int i = 0 ; i < T ; i++ ) {\n                int N = input.nextInt();\n                int[][] grid = new int[(2*N)-1][N];\n                int[][] sqr = new int[N][N];\n                for(int j = 0 ; (j < (2*N)-1) ; j++){\n                    for( int k = 0 ; k < N ; k++ ){\n                        grid[j][k] = input.nextInt();\n                    }\n                }\n                int[] miss = new int[50000];\n                for (int c = 0; c < ((2*N)-1) ; c++) {\n                    for (int d = 0; d < N; d++) {\n                        miss[grid[c][d]]++;\n                    }\n                }\n                int []num = new int[N];\n                int count = 0;\n                for (int c = 0; c < 2500 ; c++) {\n                    if((miss[c]%2) != 0){\n                        num[count] = c;\n                        count++;\n                    }\n                }\n\n                output.format(\"Case #%d: \",(i+1));\n                for (int c = 0; c < N ; c++) {\n                    output.format(\"%d \",num[c]);\n                }\n                output.format(\"\\n\");\n\n            }\n            output.close();\n        }\n        catch (Exception e){\n            e.printStackTrace();\n        }\n\n\n\n\n    }\n}"}
{"idx":"924","func":"class RankFile {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        \n        BufferedReader br = new BufferedReader(new FileReader(args[0]));\n\n        int numCases = Integer.parseInt(br.readLine());\n\n        for (int i = 0; i < numCases; i++) {\n            int N = Integer.parseInt(br.readLine());\n            \n            System.out.print(\"Case #\" + (i+1) + \":\");\n            \n            int numRows = (N * 2) - 1;\n            \n            int[] sortedList = new int[N * ((2 * N) - 1)];\n            \n            int index = 0;\n            \n            for (int j = 0; j < numRows; j++) {\n                String[] s = br.readLine().split(\" \");\n                for (String st : s)\n                    sortedList[index++] = Integer.parseInt(st);\n            }\n            \n            Arrays.sort(sortedList);\n            \n            index = 0;\n            while (index < sortedList.length) {\n                int a = sortedList[index];\n                int b = 0;\n                if (index + 1 >= sortedList.length) {\n                    b = -1;\n                } else {\n                    b = sortedList[index + 1];\n                }\n                \n                if (a == b) {\n                    index += 2;\n                } else {\n                    System.out.print(\" \" + a);\n                    index ++;\n                }\n                    \n            }\n            \n            System.out.println();\n        }\n\n    }\n}"}
{"idx":"925","func":"class Go \n{\n    static LinkedList<BigInteger> divisorList=new LinkedList<BigInteger>();\n    public static void main(String args[]) throws IOException\n    {\n        File inputFileName = new File(\"D:\\\\Eclipse3\\\\CodeJam2016\\\\src\\\\Input\\\\B-large (1).in\");\n        File outputFileName = new File(\"D:\\\\Eclipse3\\\\CodeJam2016\\\\src\\\\Output\\\\B-large (1).out\");\n\n        FileReader fileReader=null;\n        BufferedReader bufferedReader=null;\n        \n        FileWriter fileWriter=null;\n        BufferedWriter bufferedWriter=null;\n        \n        try\n        {\n            \n            String line = null;\n            \n            int lineNo=0;\n            int caseNo=0,noOfCases;\n            \n            String string2Write;\n            \n            fileReader = new FileReader(inputFileName);\n            bufferedReader = new BufferedReader(fileReader);\n            \n            fileWriter = new FileWriter(outputFileName);\n            bufferedWriter = new BufferedWriter(fileWriter);\n\n            int argNo=0; \/\/0 means Test cases, 1 means N, 2 means matrix\n            int matrixN=-1;\n            \n            while((line = bufferedReader.readLine()) != null) \n            {\n                \n                switch(argNo)\n                {\n                    case 0:\n                        argNo=1;\n                        break;\n                    case 1:\n                        matrixN=Integer.valueOf(line);\n                        caseNo++;\n                        argNo=2;\n                    case 2:\n                        int[][] matrix=new int[2*matrixN-1][matrixN];\n                        \n                        for(int i=0;i<(2*matrixN-1);i++)\n                        {\n                            line = bufferedReader.readLine();\n                            String[] numbersInString=line.split(\" \");\n                            int col=0;\n                            \n                            for(String s:numbersInString)\n                            {\n                                matrix[i][col]=Integer.valueOf(s);\n                                col++;\n                            }\n                            \n                        }\n                    HashMap<Integer,Integer> countHeights=new HashMap<Integer,Integer>();\n                    int[] missingRowOrColumn1=new int[matrixN];\n                    \n                    for(int r=0;r<matrix.length;r++)\n                    {\n                        for(int c=0;c<matrix[r].length;c++)\n                        {\n                            int currentHeight=matrix[r][c];\n                            if(countHeights.containsKey(currentHeight))\n                            {\n                                int existingCounts=countHeights.get(currentHeight);\n                                countHeights.put(currentHeight, (existingCounts+1));\n                            }\n                            else\n                            {\n                                countHeights.put(currentHeight, 1);\n                            }\n                        }\n                    }\n                    int i1=0;\n                    \n                    for(int height:countHeights.keySet())\n                    {\n                        int count=countHeights.get(height);\n                        \n                        if(count%2!=0)\n                        {\n                            missingRowOrColumn1[i1]=height;\n                            i1++;\n                        }\n                    }\n                    \n                    \n                    Arrays.sort(missingRowOrColumn1);\n                        \n                        int[] missingRowOrColumn=missingRowOrColumn1;\n                        string2Write=\"Case #\"+String.valueOf(caseNo)+\": \";\n                        \n                        for(int i=0;i<missingRowOrColumn.length;i++)\n                        {\n                            string2Write=string2Write+(String.valueOf(missingRowOrColumn[i]))+\" \";\n                        }\n                        string2Write=string2Write+\"\\n\";\n                        \n                        bufferedWriter.write(string2Write);\n                        argNo=1;\n                        break;\n                }\n                \n            }\n        }\n        catch(Exception ex)\n        {\n            ex.printStackTrace();\n        }\n        finally\n        {\n            bufferedReader.close();\n            bufferedWriter.close();\n        }\n        \n        \n    }\n\n}"}
{"idx":"926","func":"class Jam2016_1AB {\n    public static void main(String[] args) {\n        Scanner    scanIn    = new Scanner(System.in);\n        \n        int T    = scanIn.nextInt();\n        \n        for(int i=0; i<T; ++i) {\n            Jam2016_1AB    inst    = new Jam2016_1AB();\n            int        n        = scanIn.nextInt();\n            int N = 2*n-1;\n\n            int[][]        d    = new int[N][n];\n            \n            for(int j=0; j<N; ++j) {\n                for(int k=0; k<n; ++k) {\n                    d[j][k]    = scanIn.nextInt();\n                }\n            }\n            int    n1 = d[0].length;\n            int[] h = new int[2501];\n            \n            for(int i1=0; i1<d.length; ++i1) {\n                for(int j1=0; j1<n1; ++j1) {\n                    h[d[i1][j1]]++;\n                }\n            }\n            \n            int idx = 0;\n            int[] ret1 = new int[n1];\n            for(int i2=0; i2<2501; ++i2) {\n                int dd = h[i2];\n                if(dd%2 != 0)\n                    ret1[idx++] = i2;\n            }\n            \n            int[] ret = ret1;\n\n            System.out.print(\"Case #\" + (i+1) + \":\");\n            for(int j: ret)\n                System.out.print(\" \" + j);\n            System.out.println();\n        }\n        \n        scanIn.close();\n    }\n\n}"}
{"idx":"927","func":"class RankAndFile {\n    \n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        int casetotal = 0;\n        int casenumber = 1;\n        int totalline = 0;\n        String line = \"\";\n        \n        try (FileReader fr = new FileReader(\"data\/B-large.in\"); BufferedReader br = new BufferedReader(fr); FileWriter fw = new FileWriter(\"data\/B-large.out\"); PrintWriter bw = new PrintWriter(fw);) {\n            while ((line = br.readLine()) != null) {\n                if (totalline == 0) {\n                    casetotal = Integer.parseInt(line);\n                    totalline++;\n                    continue;\n                }\n                \n                if (casenumber > casetotal) {\n                    System.out.println(\"###Error: The casenumber has problem!!!\");\n                    System.out.println(\"###Error: This error happened in line number\" + totalline);\n                    System.exit(0);\n                }\n                \/**\n                 * processing\n                 *\/\n                HashMap<Integer, Integer> count=new HashMap<Integer,Integer>();\n                int N=Integer.parseInt(line);\n                for(int i=0;i<2*N-1;i++){\n                    line = br.readLine();\n                    String[] arrS=line.split(\" \",N);\n                    for(String s:arrS){\n                        int no=Integer.parseInt(s);\n                        if(count.get(no)!=null)\n                            count.put(no, count.get(no)+1);\n                        else\n                            count.put(no,1);\n                    }\n                    totalline++;\n                }\n                \n                ArrayList<Integer> list=new ArrayList<Integer>();\n                for(int key:count.keySet()){\n                    if(count.get(key)%2==1)\n                        list.add(key);\n                }\n                Collections.sort(list);\n                \n                bw.print(\"Case #\"+casenumber+\": \");\n                for(int no:list){\n                    bw.print(no);\n                    bw.print(\" \");\n                }\n                bw.println();\n                \n                casenumber++;\n                totalline++;\n            }\n        }\n        \n    }\n    \n}"}
{"idx":"928","func":"class  Round1AProblemB {\n        public static void main(String[] args) throws Exception {\n            Round1AProblemB r = (new  Round1AProblemB());\n            Scanner sc = new Scanner(new FileReader(\"input.in\"));\n            PrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n            int T = sc.nextInt();\n            for (int t=0; t<T; t++) {\n                String ans = \"\";\n                List<Integer> list = new ArrayList<Integer>();\n                System.out.println(\"Now case \" + (t+1));\n                int N = sc.nextInt();\n                for(int i=0; i<(2*N-1)*N;i++){\n                    String s = sc.next();\n                    if(list.contains(Integer.valueOf(s))){\n                        list.remove(list.indexOf(Integer.valueOf(s)));\n                    }else{\n                        list.add(Integer.valueOf(s));\n                    }\n                }\n                Collections.sort(list);\n                pw.print(\"Case #\" + (t+1) + \":\");\n                Iterator<Integer> it = list.iterator();\n                while (it.hasNext()) {\n                    pw.print( \" \" + it.next());\n                }\n                pw.println();\n            }\n            pw.flush();\n            pw.close();\n            sc.close();\n        }\n    }"}
{"idx":"929","func":"class rank{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n        for(int i=0;i<num;i++){\n            System.out.print(\"Case #\"+(i+1)+\": \");\n            int n = sc.nextInt();\n            int[] ar = new int[2505]; \n            int max = 0;\n            for(int j=0;j<(2*n-1)*n;j++){\n                int temp = sc.nextInt();\n                ar[temp]++;\n                if(temp>max){\n                    max = temp;\n                }\n            }\n\n            ArrayList<Integer> arr = new ArrayList<Integer>();\n            for(int m= 0;m<=max;m++){\n                if(ar[m]%2!=0){\n                    arr.add(m);\n                }\n            }\n\n            for(int nn=0;nn<arr.size()-1;nn++){\n                System.out.print(arr.get(nn)+\" \");\n            }\n            System.out.println(arr.get(arr.size()-1));\n        }\n    \n    }\n}"}
{"idx":"930","func":"class RankAndFile {\n    public static void main(String[] args) {\n        FileInputStream fis = null;\n        try {\n            fis = new FileInputStream(\"B\/B-large.in\");\n            PrintStream ps = new PrintStream(new FileOutputStream(\"B\/large-result.out\"));\n            System.setIn(fis);\n            System.setOut(ps);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        Scanner in = new Scanner(System.in);\n        PrintStream out = System.out;\n\n        int t = in.nextInt();\n        for (int i = 1; i <= t; i++){\n            int n = in.nextInt();\n            int[] height = new int[2501];\n            int num = (2 * n - 1) * n;\n            for (int j = 0; j < num; j++) {\n                int h = in.nextInt();\n                height[h]++;\n            }\n\n            out.format(\"Case #%d:\", i);\n            for (int j = 1; j < height.length; j++) {\n                if (height[j] % 2 == 1) out.format(\" %d\", j);\n            }\n            out.println();\n        }\n    }\n\n}"}
{"idx":"931","func":"class RankAndFile {\n    private int mT = -1;\n    private int[] mN;\n    private String[][] mNData;\n    \n    public static void main(String[] args) {\n        RankAndFile countingSheep = new RankAndFile();\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(\".\/src\/rankandfile.txt\"));\n            countingSheep.mT = Integer.parseInt(br.readLine());\n            \n            countingSheep.mN = new int[countingSheep.mT];\n            countingSheep.mNData = new String[countingSheep.mT][];\n            for(int i=0; i<countingSheep.mT; i++) {\n                countingSheep.mN[i] = Integer.parseInt(br.readLine());\n                countingSheep.mNData[i] = new String[2*countingSheep.mN[i]-1];\n                for(int j=0; j < 2*countingSheep.mN[i]-1; j++) {\n                    countingSheep.mNData[i][j] = br.readLine();\n                }\n            }\n            br.close();\n            \n            \n            System.out.println(\"Total testcases: \" + countingSheep.mT);\n            for(int i=0; i<countingSheep.mT; i++) {\n                System.out.println(\"Testcase #\" + i + \": \" + countingSheep.mN[i]);\n                for(int j=0; j<2*countingSheep.mN[i]-1; j++) {\n                    System.out.println(countingSheep.mNData[i][j]);\n                }\n            }\n            for (int i=0; i<countingSheep.mT; i++) {\n                        int N = countingSheep.mN[i];\n                        HashMap<String, Integer> mCountTable = new HashMap<>();\n                        for(int j=0; j<2*N-1; j++) {\n                            String[] numbers = countingSheep.mNData[i][j].split(\" \");\n                            for(int k =0; k<numbers.length; k++) {\n                                if(mCountTable.containsKey(numbers[k])) {\n                                    mCountTable.put(numbers[k], mCountTable.get(numbers[k])+1);\n                                } else {\n                                    mCountTable.put(numbers[k], 1);\n                                }\n                            }\n                        }\n                        \n                        \n                        \n                        Set<String> keys = mCountTable.keySet();\n                        ArrayList<Integer> mMiss = new ArrayList<>();\n                        for(String key : keys) {\n            \/\/                System.out.println(key + \":\" + mCountTable.get(key));\n                            if(mCountTable.get(key) % 2 != 0) {\n                                mMiss.add(Integer.parseInt(key));\n                            }\n                        }\n                        \n                        java.util.Collections.sort(mMiss);\n            \/\/            for(int l=0; l<mMiss.size()  ; l++) {\n            \/\/                System.out.println(mMiss.get(l));\n            \/\/            }\n                        \n                        String str = \"\";\n                        for(int l=0; l<mMiss.size() -1 ; l++) {\n                            str += mMiss.get(l) + \" \";\n                        }\n                        str += mMiss.get(mMiss.size() -1);\n                        \n                        String data = \"Case #\" + (i+1) + \": \" + str;\n                        try {\n                            PrintWriter    writer = new PrintWriter(new BufferedWriter(new FileWriter(\".\/src\/rankandfile_out.txt\", true)));\n                            writer.println(data);\n                            writer.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n        } catch (NumberFormatException | IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"932","func":"class RankAndFile {\n    private static BufferedReader br = null;\n    private static BufferedWriter bw = null;\n    public static void main(String[] args) throws Exception {\n        br = new BufferedReader(new FileReader(\"B-large.in\"));\n        bw = new BufferedWriter(new FileWriter(\"result.txt\"));\n        int size = Integer.parseInt(br.readLine());\n        String line = \"\";\n        int index = 0;\n        while(size !=0 ){\n            index++;\n            line = br.readLine();\n            int length = Integer.parseInt(line);\n            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n            for(int j=0;j<2*length-1;j++){\n                line = br.readLine();\n                String[] strs = line.split(\" \");\n                int[] hes = new int[strs.length];\n                for(int i=0;i<hes.length;i++){\n                    hes[i] = Integer.parseInt(strs[i]);\n                    if(map.containsKey(hes[i])){\n                        map.put(hes[i], map.get(hes[i])+1);\n                    }else{\n                        map.put(hes[i], 1);\n                    }\n                }\n            }\n            Iterator<Integer> iterator = map.keySet().iterator();\n            ArrayList<Integer> res = new ArrayList<Integer>();\n            while(iterator.hasNext()){\n                int key = iterator.next();\n                if(map.get(key)%2==1)\n                    res.add(key);\n            }\n            Collections.sort(res);\n            String finalres = \"\";\n            for(Integer i : res){\n                finalres += (i+\" \");\n            }\n            String info =\"Case #\"+index+\": \"+finalres;\n            System.out.println(info);\n            bw.write(info);\n            bw.newLine();\n            size--;\n        }\n        if(bw != null){\n            bw.close();            \n        }\n        if(br != null){\n            br.close();\n        }\n        \n    }\n}"}
{"idx":"933","func":"class round1ad {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int t = s.nextInt();\n        for(int i=0; i<t; i++) {\n            int n = s.nextInt();\n            int a[] = new int[3000];\n            for(int j=0; j<3000; j++) {\n                a[j]=0;\n            }\n            for(int j=0; j<n*((2*n)-1); j++) {\n                int x = s.nextInt();\n                a[x]++;\n            }\n            int y[] = new int[n];\n            int count=0;\n            for(int j=0; j<3000; j++) {\n                if(a[j]%2==1) {\n                    y[count]=j;\n                    count++;\n                }\n            }\n            Arrays.sort(y);\n            System.out.print(\"Case #\" + (i+1) + \": \");\n            for(int j=0; j<n; j++) {\n                System.out.print(y[j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"934","func":"class RankAndFile {\n    public static void main(String[] args){        \n        Scanner scanner = new Scanner(System.in);\n        int testcases = Integer.parseInt(scanner.nextLine());\n        for(int i=1; i<=testcases; i++){\n            int N = Integer.parseInt(scanner.nextLine());\n            List<List<Integer>> matrix = new ArrayList<List<Integer>>();\n            \n            for(int j=0; j<2*N-1; j++){\n                String[] arr = scanner.nextLine().split(\" \");\n                List<Integer> list = new ArrayList<Integer>();\n                for(int k=0; k<arr.length; k++){\n                    list.add(Integer.parseInt(arr[k]));\n                }\n                matrix.add(list);\n            }\n            \n            System.out.print(String.format(\"Case #%d: \", i));\n            Set<Integer> set = new HashSet<Integer>();\n            \n            for(int i1=0; i1<matrix.size(); i1++){\n                for(int j=0; j<matrix.get(i1).size(); j++){\n                    int num = matrix.get(i1).get(j);\n                    if(set.contains(num)){\n                        set.remove(num);\n                    }else{\n                        set.add(num);\n                    }\n                    \n                }\n            }\n            \n            int[] arr = new int[N];\n            int index = 0;\n            for(int num : set){\n                arr[index++] = num;\n            }\n            \n            Arrays.sort(arr);\n            \n            for(int i2=0; i2<arr.length; i2++){\n                System.out.print(arr[i2] + \" \");\n            }\n            System.out.println();\n        }\n        scanner.close();\n    }\n    \n}"}
{"idx":"935","func":"class RankFile {\n\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        Scanner sc = new Scanner(new File (\"B-large.in\"));\n        PrintWriter out = new PrintWriter(new File(\"B-large.out\"));\n        PrintWriter debug = new PrintWriter(new File(\"debug-bl.txt\"));\n        \n        int a = sc.nextInt();\n        sc.nextLine();\n        \n        for (int i = 0; i < a; i++) {\n            int size = sc.nextInt();\n            sc.nextLine();\n            \n            Set<Integer> odds = new TreeSet<>();\n            \n            for (int j = 0; j < size*2-1; j++) {\n                for (int k = 0; k < size; k++) {\n                    int h = sc.nextInt();\n                    \n                    if (odds.contains(h))\n                        odds.remove(h);\n                    else\n                        odds.add(h);\n                }\n            }\n            \n            Iterator<Integer> left = odds.iterator();\n            String output = \"\";\n            while(left.hasNext()) \n                output += (left.next() + \" \");\n            \n            out.printf(\"CASE #%d: %s%n\", i + 1, output.trim());\n        }\n        \n        \n        \n        sc.close();\n        out.close();\n        debug.close();\n    }\n}"}
{"idx":"936","func":"class B {\n\n    public static void main(String... args) throws Exception {\n        File file = new File(loc);\n        File[] paths = file.listFiles();\n        List<File> input = new ArrayList<File>();\n        for (File f : paths) {\n            String s = f.getName();\n            if (s.startsWith(name_class) && s.endsWith(\".in\"))\n                input.add(f);\n        }\n        \n        if (input.isEmpty()) {\n            System.err.println(\"LEYENDO DE CONSOLA\");\n            in = new BufferedReader(new InputStreamReader(System.in));\n        } else {\n            File last_file = input.get(0);\n            for (File f : input) {\n                if (f.lastModified() > last_file.lastModified())\n                    last_file = f;\n            }\n        \n            in = new BufferedReader(new FileReader(last_file.toString()));\n            System.err.println(\"LEYENDO DE ARCHIVO\");\n        \n        }\n        FileWriter fw = new FileWriter(loc + \"\/output.txt\");\n        out = new PrintWriter(fw);\n\n        int casos = Integer.parseInt(in.readLine());\n        for (int casito = 1; casito <= casos; casito++) {\n            B r = new B();\n            int n = Integer.parseInt(B.nextToken());\n            int MAX = 2500;\n            boolean[] bs = new boolean[MAX+1];\n            for(int i =0; i < 2*n - 1;i++) {\n                int[] ret1 = new int[n];\n                for (int i1 = 0; i1 < n; i1++)\n                    ret1[i1] = Integer.parseInt(B.nextToken());\n                int[] arr = ret1;\n                for(int a : arr)\n                    bs[a] = !bs[a];\n            }\n            List<Integer> ret = new ArrayList<>();\n            for(int i = 1; i<bs.length;i++){\n                if(bs[i])\n                    ret.add(i);\n            }\n            StringBuilder str = new StringBuilder();\n            for(int i =0;i<ret.size();i++){\n                if(i !=0)\n                    str.append(\" \");\n                str.append(ret.get(i));\n            }\n            Object o = str;\n\n            out.println(\"Case #\" + casito + \": \" + o);\n            System.out.println(\"Case #\" + casito + \": \" + o);\n        }\n        out.close();\n    }\n\n    public static BufferedReader in;\n    public static PrintWriter out;\n    static String name_class = \"B\"; \/\/\n    static String loc = \"\/home\/miguel\/workspace\/CodeJam\/1A2016\/src\"; \/\/\n\n    static StringTokenizer strTok = new StringTokenizer(\"\");\n\n    static String nextToken() throws IOException {\n        while (!strTok.hasMoreTokens())\n            strTok = new StringTokenizer(in.readLine());\n        return strTok.nextToken();\n    }\n\n}"}
{"idx":"937","func":"class RankFile {\n\n    public static void main(String[]args)\n    {\n        try\n        {\n            Scanner sc = new Scanner(new FileReader(\"B-large (1).in\"));\n            FileWriter fw = new FileWriter(new File(\"Output.txt\"));\n            PrintWriter pw = new PrintWriter(fw);\n                \n            int t = sc.nextInt();\n            sc.nextLine();\n                \n            for(int r = 1; r <= t; r++)\n            {\n                int n = sc.nextInt();\n                ArrayList<Integer> list = new ArrayList<Integer>();\n                for(int i = 0; i < 2*n-1; i++)\n                {\n                    for(int j = 0; j<n; j++)\n                    {\n                        int temp = sc.nextInt();\n                        boolean add = true;\n                        for (int k = 0; k < list.size();k++)\n                        {\n                            if(temp == list.get(k))\n                            {\n                                list.remove(k);\n                                add = false;\n                                break;\n                            }\n                        }\n                        if(add)\n                            list.add(temp);\n                    }\n                }\n                Collections.sort(list);\n                \n                pw.print(\"Case #\" + r + \":\");\n                for(int i = 0; i < n; i++ )\n                {\n                    pw.print(\" \"+list.get(i));\n                }\n                pw.println();\n            }\n            pw.flush();    \n            pw.close();\n        }\n            catch(IOException ioe)\n            {\n                System.out.print(ioe);\n            }\n\n    }\n\n}"}
{"idx":"938","func":"static final String CASE = \"Case #\";\n    Hashtable<String, Integer> rep;\n    public static void main(String[] args) throws IOException {\n        Main r = new Main();\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int cases=Integer.parseInt(br.readLine());\n        String line = \"\";\n        String resp=\"\";\n        for(int i=1; i<=cases;i++){\n            int n = Integer.parseInt(br.readLine());\n            r.rep = new Hashtable<>();\n            for(int j=0;j<n*2-1;j++){\n                line = br.readLine();\n                String[] nums = line.split(\" \");\n                for(int i2=0; i2<nums.length; i2++){\n                    Integer n1 = r.rep.get(nums[i2]);\n                    if(n1==null){\n                        r.rep.put(nums[i2], 1);\n                    }else{\n                        r.rep.put(nums[i2], n1+1);\n                    }\n                }\n            }\n            Enumeration<String> k = r.rep.keys();\n            int i1=0;\n            int[] r1 = new int[n];\n            while(k.hasMoreElements()){\n                String actual = k.nextElement();\n                int repeticiones = r.rep.get(actual);\n                if(repeticiones%2!=0){\n                    r1[i1]=Integer.parseInt(actual);\n                    i1++;\n                }\n            }\n            String resp1=\"\";\n            for(int i2=0; i2<r1.length; i2++){\n                if(i2!=0) resp1+=\" \";\n                for(int j=i2+1;j<r1.length; j++){\n                    if(r1[i2]>r1[j]){\n                        int temp = r1[i2];\n                        r1[i2]=r1[j];\n                        r1[j]=temp;\n                    }\n                }\n                resp1+=r1[i2];\n            }\n            String ans = resp1;\n            resp+=(Main.CASE+i+\": \"+ans+\"\\n\");\n        }\n        System.out.print(resp);\n    }\n\n}"}
{"idx":"939","func":"class Main {\n    public static void main(String[] args) throws FileNotFoundException {\n        FileInputStream fis = null;\n        fis = new FileInputStream(\"B-large.in\");\n        PrintStream ps = new PrintStream(new FileOutputStream(\"B-large.out\"));\n        System.setIn(fis);\n        System.setOut(ps);\n        Scanner input = new Scanner(System.in);\n        PrintStream out = System.out;\n        int t = input.nextInt();\n        \/\/ test\n        \n        for (int i = 1; i <= t; i++){\n            int n = input.nextInt();\n            int[] height = new int[2501];\n            int number = (2 * n - 1) * n;\n            for (int j = 0; j < number; j++) {\n                int h = input.nextInt();\n                height[h]++;\n            }\n            out.format(\"Case #%d:\", i);\n            \/\/ \u8f93\u51fa\u683c\u5f0f\u63a7\u5236\n            \n            for (int h = 1; h < height.length; h++) {\n                if (height[h] % 2 == 1) out.format(\" %d\", h);\n            }\n            out.println();\n        }\n    }\n\n}"}
{"idx":"940","func":"class RankFile {\n\n    public static void main(String[] args) throws IOException {\n        File inFile = new File(\"yearOf2016\/B-large.in\");\n        File outFile = new File(\"yearOf2016\/testOutput.txt\");\n        if (!outFile.exists()) {\n             outFile.createNewFile();\n          }\n        \n        Scanner reader = new Scanner(inFile);\n        PrintWriter writer = new PrintWriter(outFile);\n        \n        int cases = reader.nextInt();\n        int caseIdx = 1;\n        \n        while(caseIdx <= cases){\n            int N = reader.nextInt();\n            HashMap<Integer, Integer> numList = new HashMap<>();\n            for(int n = 0; n < (2*N - 1)*N; n++){\n                int s = reader.nextInt();\n                if(!numList.containsKey(s)){\n                    numList.put(s, 1);\n                }\n                else{\n                    int temp = numList.get(s);\n                    numList.put(s, temp+1);\n                }\n            }\n            \n            ArrayList<Integer> result = new ArrayList<>();\n            \n            for(int key : numList.keySet()){\n                if(numList.get(key) % 2 != 0){\n                    result.add(key);\n                }\n            }\n            \n            Collections.sort(result);\n            writer.print(\"Case #\" + caseIdx + \":\");\n            \n            for(int r : result){\n                writer.print(\" \"+ r);\n            }\n            writer.println(\" \");\n            \n            caseIdx += 1;\n        }\n        \n        reader.close();\n        writer.close();\n\n    }\n\n}"}
{"idx":"941","func":"class B {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scanner = new Scanner(new File(\"b.in\"));\n        PrintWriter writer = new PrintWriter(new File(\"b.out\"));\n\n        int t = scanner.nextInt();\n        for (int tt = 1; tt <= t; ++tt) {\n            writer.print(\"Case #\" + tt + \":\");\n\n            int n = scanner.nextInt();\n            int m = 2 * n - 1;\n            boolean flag[] = new boolean[2501];\n            Arrays.fill(flag, false);\n            for (int i = 0; i < m; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    int x = scanner.nextInt();\n                    flag[x] = !flag[x];\n                }\n            }\n\n            ArrayList<Integer> result = new ArrayList<Integer>();\n            for (int i = 1; i <= 2500; ++i) {\n                if (flag[i]) {\n                    result.add(i);\n                }\n            }\n\n            Collections.sort(result);\n\n            for (int i : result) {\n                writer.print(\" \" + i);\n            }\n            writer.println();\n        }\n\n        scanner.close();\n        writer.close();\n    }\n\n}"}
{"idx":"942","func":"class B {\n\n  public static void main(String[] args) throws Exception {\n    \/\/Scanner in = new Scanner(System.in);\n    Scanner in = new Scanner(new File(\"B-large.in\"));\n    PrintWriter out = new PrintWriter(new FileWriter(\"out.txt\"));\n    int tests = in.nextInt();\n    for (int t = 1; t <= tests; t++) {\n      int n = in.nextInt();\n      int[] count = new int[2501];\n      for (int i = 0; i < 2*n-1; i++) {\n        for (int j = 0; j < n; j++) {\n          count[in.nextInt()]++;\n        }\n      }\n      out.print(\"Case #\" + t + \":\");\n      for (int i = 1; i <= 2500; i++) {\n        if (count[i] % 2 != 0) out.print(\" \" + i);\n      }\n      out.println();\n    }\n    in.close();\n    out.close();\n  }\n}"}
{"idx":"943","func":"class Main {\n\n    \/**\n     * @param args\n     * @throws IOException \n     *\/\n    public static void main(String[] args){\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        for(int i = 1 ; i <= t; i++){\n            int n = in.nextInt();\n            int[] a = new int[n*(n+(n-1))];\n            for(int j = 0; j < n*(n+(n-1)); j++){\n                a[j] = in.nextInt();\n            }\n            Arrays.sort(a);\n            System.out.print(\"Case #\" + i + \": \" );\n            for(int j=0; j < n*(n+(n-1));){\n                if((j+1) != n*(n+(n-1)) && a[j] == a[j+1]){\n                    j+=2;\n                }else{\n                    System.out.print(a[j] + \" \");\n                    j++;\n                }\n            }\n            System.out.println();\n        }\n        in.close();\n        \n    }\n\n}"}
{"idx":"944","func":"class Main {\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int T = sc.nextInt();\n    for(int test=1;test<=T;test++) {\n      int N = sc.nextInt();\n      int rows = 2*N-1;\n      int arr[][]=new int[rows][N];\n      for(int i=0;i<rows;i++) {\n        for(int j=0;j<N;j++) {\n          arr[i][j]=sc.nextInt();\n        }\n      }\n      for(int bm=0;bm<(1<<rows);bm++) {\n        if (Integer.bitCount(bm)!=N)\n          continue;\n        int Test[][]=new int[N][N];\n        int r=0;\n        for(int j=0;j<rows;j++) {\n          if ((bm&(1<<j))>0) {\n            for(int c=0;c<N;c++) {\n              Test[r][c]=arr[j][c];\n            }\n            r++;\n          }\n        }\n        \/*System.out.println(\"===Before sort===\");\n        for(int i=0;i<N;i++) {\n          for(int j=0;j<N;j++) {\n            System.out.print(Test[i][j]+\" \");\n          }\n          System.out.println();\n        }*\/\n        boolean continu=false;\n        for(int i=0;i<N;i++) {\n          for(int j=i+1;j<N;j++) {\n            for(int k=0;k<N;k++) {\n              if (Test[i][k]==Test[j][k]) {\n                continu=true;\n              }\n            }\n          }\n        }\n        if(continu)continue;\n        int cond = 0;\n        for(int i=0;i<N;i++) {\n          cond = 0;\n          for(int j=i+1;j<N;j++) {\n            for(int k=0;k<N;k++) {\n              if (Test[i][k]>Test[j][k]) {\n                for(int k1=0;k1<N;k1++) {\n                  int tmp=Test[i][k1];\n                  Test[i][k1]=Test[j][k1];\n                  Test[j][k1]=tmp;\n                }\n              }\n            }\n          }\n\n\n        }\n\n        \/*System.out.println(\"===After sort===\");\n        for(int i=0;i<N;i++) {\n          for(int j=0;j<N;j++) {\n            System.out.print(Test[i][j]+\" \");\n          }\n          System.out.println();\n        }*\/\n        boolean columns[]=new boolean[N];\n        int checkings=0;\n        for(int j=0;j<rows;j++) {\n          if ((bm&(1<<j))==0) {\n            for(int c=0;c<N;c++) {\n              int temp=0;\n              for(r=0;r<N;r++) {\n                if (Test[r][c]!=arr[j][r]) {\n                  break;\n                } else {\n                  temp++;\n                }\n              }\n              if (temp==N) {\n                if (!columns[c]){\n                  columns[c]=true;\n                  checkings++;\n                }\n              }\n            }\n          }\n        }\n        if (checkings!=(N-1)) {\n          continue;\n        }\n        boolean found=false;\n        for(int i=0;i<N;i++) {\n          if (!columns[i]) {\n            System.out.print(\"Case #\"+test+\": \");\n            for(int j=0;j<N;j++) {\n              \/\/ System.out.println(\"answer\");\n              System.out.print(Test[j][i]+\" \");\n            }\n            System.out.println();\n            found=true;\n          }\n        }\n        if(found) break;\n      }\n    }\n  }\n}"}
{"idx":"945","func":"class RankFile {\n    \/\/ final static String PROBLEM_NAME = \"GCJTemplate\";\n    \/\/ final static String WORK_DIR = \"\/Users\/anishnag\/Desktop\/Google Code Jam 2016\/Round 1\" + PROBLEM_NAME + \"\/\";\n\n    public static void main(String[] args) throws Exception{\n        Scanner sc = new Scanner(new FileReader(\"input.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n        int caseCnt = sc.nextInt();\n        for (int caseNum=0; caseNum<caseCnt; caseNum++){\n            System.out.println(\"Processing Test Case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum + 1) + \": \");\n            RankFile r = new RankFile();\n            int n = sc.nextInt();\n              Integer[][] input = new Integer[2 * n - 1][n];\n              int[] count = new int[2501];\n              String result = \"\";\n            \n              for (int i = 0; i < input.length; i++) {\n                for (int j = 0; j < input[i].length; j++) {\n                  input[i][j] = sc.nextInt();\n                  count[input[i][j]]++;\n                }\n              }\n            \n              for (int i = 1; i < count.length; i++) {\n                if (count[i] % 2 != 0) {\n                  result += (i + \" \");\n                }\n              }\n            \n              pw.write(result.substring(0, result.length() - 1) + \"\\n\");\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"946","func":"class BSol {\n\n\n    public static void main(String[] args) {\n        \n        Date d1 = new Date();\n        \/\/solveB(\"b.in\", \"b.out\");\n        try {\n            \n            FileWriter fw = new FileWriter(\"B-large.out\");\n            BufferedWriter bw = new BufferedWriter(fw);\n            \n            Scanner sc = new Scanner(new File(\"B-large.in\"));\n        \n            long t = sc.nextLong();\n            sc.nextLine();\n            \n            \n            \n            \/\/System.out.println(t);\n            for (long i2 = 0; i2 < t; i2++) {\n                \n                int n = sc.nextInt();\n                sc.nextLine();\n        \n                int lines [][] = new int [2*n-1][n];\n                \n                for (int i = 0; i < 2*n-1; i++) {\n                    for (int j = 0; j < n; j++) {\n                        int a = sc.nextInt();\n                        lines[i][j] = a;\n                    }\n                    \/\/sc.nextLine();\n                }\n                HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n                for (int i = 0; i < lines.length; i++) {\n                    for (int j = 0; j < n; j++) {\n                        int h = lines[i][j];\n                        \n                        if (!map.containsKey(h)) {\n                            map.put(h, 1);\n                        } else {\n                            map.put(h, map.get(h)+1);\n                        }\n                        \/\/System.out.print(lines[i][j] + \" \");\n                    }\n                    \/\/System.out.println();\n                }\n                \n                \n                \/\/System.out.println(\"missing heights: \");\n                Set<Entry<Integer, Integer>> entrySet = map.entrySet();\n                ArrayList<Integer> m = new ArrayList<Integer>();\n                for (Entry<Integer, Integer> entry : entrySet) {\n                    if (entry.getValue() % 2 == 1) {\n                        \/\/System.out.println(entry.getKey()  + \" \" + entry.getValue());\n                        m.add(entry.getKey());\n                    }\n                }\n                Collections.sort(m);\n                \n                String result = \"\";\n                if (m.size() == n) {\n                    \/\/System.out.println(m);\n                    for (int i = 0; i < m.size(); i++) {\n                        result += m.get(i);\n                        if (i != m.size()-1) {\n                            result += \" \";\n                        }\n                    }\n                } else {\n                    result = null;\n                    System.out.println(\"Error \");\n                }\n                \n                String rez =  result;\n                \/\/System.out.println(\"result: \" + rez);\n                bw.write(\"Case #\" + (i2+1) + \": \" +  rez + \"\\n\");\n                \n            }\n            \n            \n            bw.flush();\n            bw.close();\n            fw.close();\n            sc.close();\n        } catch (FileNotFoundException e) {\n            \n        } catch (IOException e) {\n            \n        } finally {\n            \n        }        \n        \/\/solveB(\"B-small-attempt0.in\", \"B-small-attempt0.out\");\n        \n        Date d2 = new Date();\n        \/\/System.out.println(\"time: \" + (d2.getTime() - d1.getTime()));\n        \n        \n        \n        \n\n\n    }\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n}"}
{"idx":"947","func":"class B {\n\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n        Scanner scan = new Scanner(System.in);\n        int T = scan.nextInt();\n        PrintWriter writer = new PrintWriter(\"outputB.txt\", \"UTF-8\");\n       \n        for (int k = 1; k <= T; k++) {   \n            int[] heights = new int[2501];\n             int N = scan.nextInt();\n            for (int i = 0; i < 2 * N - 1; i++) {\n                for (int j = 0; j < N; j++) {\n                    int currNum = scan.nextInt();\n                    heights[currNum]++;\n                }\n            }\n            int c = 0;\n            int[] missed = new int[N];\n            for (int i = 1; i < 2501; i++) {\n                if (heights[i] % 2 == 1) {\n                    missed[c] = i;\n                    c++;\n                }\n            }\n            Arrays.sort(missed);\n            writer.print(\"Case #\" + k + \": \");\n            for (int i = 0; i < N; i++) {\n                if (i == N - 1) {\n                    writer.print(missed[i]);\n                } else {\n                    writer.print(missed[i] + \" \");\n                }\n            }\n            writer.println();\n        }\n        writer.close();\n    }\n}"}
{"idx":"948","func":"class RankAndFile{\n    \n    static final String filename = \"C:\/Users\/Kevin\/algs4\/CodeJam\/RankAndFile\/B-large.in\";\n    static final String output = \"largeoutput.txt\";\n    \n    \n    \n    \n    \n    public static void main(String[] args){\n       \n        try{\n            Scanner sc = new Scanner(new FileInputStream(new File(filename)));\n            int no_of_times = sc.nextInt();\n            \n            for(int i = 0; i < no_of_times; ++i){\n                int N = sc.nextInt();\n                int[][] array = new int[2*N-1][N];\n                for (int j = 0; j < 2*N-1; ++j) {\n                    for (int k = 0; k < N; ++k) {\n                        array[j][k] = sc.nextInt();\n                    }\n                }\n                HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n                \n                int[] ret = new int[array[0].length];\n                \n                for (int j1 = 0; j1 < array.length; ++j1) {\n                    for (int k = 0; k < array[0].length; ++k) {\n                        if (!count.containsKey(array[j1][k])) {\n                            count.put(array[j1][k], 1);\n                        } else {\n                            count.put(array[j1][k], count.get(array[j1][k])+1);\n                        }\n                    }\n                }\n                \n                int index = 0;\n                \n                for (Integer key : count.keySet()) {\n                    if (count.get(key) % 2 != 0) {\n                        ret[index] = key;\n                        index++;\n                    }\n                }\n                \n                Arrays.sort(ret);\n                \n                int[] soln = ret;\n                \n                FileOutputStream fos = new FileOutputStream(output, true);\n                fos.write((\"Case #\" + (i+1) + \":\").getBytes());\n                for (int j = 0; j < soln.length; ++j) {\n                    fos.write((\" \" + soln[j]).getBytes());\n                }\n                fos.write((\"\\n\").getBytes());\n                fos.close();\n                \n                \n            }\n            sc.close();\n        }\n        catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n    \n    \n}"}
{"idx":"949","func":"class RankAndFile {\n    public static void main(String[] args) throws FileNotFoundException {\n    \/\/ TODO Auto-generated method stub\n    Scanner sc = new Scanner(new File(\"B-large.in\"));\n    int max = sc.nextInt();\n    for (int kkkk = 0; kkkk < max; kkkk++) {\n        \/\/ int a = sc.nextInt();\n        int lineNumber = sc.nextInt();\n        sc.nextLine();\n        HashMap<String, Integer> map = new HashMap<String, Integer>();\n        String[] line = new String[2 * lineNumber];\n        for (int i = 0; i < 2 * lineNumber - 1; i++) {\n        String[] m = sc.nextLine().split(\" \");\n        for (String s : m) {\n            if (map.get(s) == null) {\n            map.put(s, 1);\n            } else {\n            if (map.get(s) == 0) {\n                map.put(s, 1);\n\n            } else {\n                map.put(s, 0);\n\n            }\n            }\n\n        }\n        }\n        ArrayList<Integer> arr = new ArrayList<Integer>();\n        for (String key : map.keySet()) {\n        if(map.get(key)==1 && key !=\"\"){\n            \n            arr.add(Integer.parseInt(key));\n        }\n        }\n        Collections.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"Case #\" + (kkkk + 1) + \": \");\n        \n        for(Integer k:arr){\n        sb.append(k+\" \");\n        }\n        String str = sb.toString();\n        System.out.println(str.substring(0,str.length()-1));\n        \n\n        \n    }\n\n    }\n\n}"}
{"idx":"950","func":"class RankAndFile {\n    \n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        BufferedReader br = new BufferedReader(new FileReader(args[0]));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(args[1]));\n        \n        int totalCases = Integer.parseInt(br.readLine());\n        \n        for(int i=0;i<totalCases;i++){\n            int n = Integer.parseInt(br.readLine());\n            int[] counter = new int[2501];\n            int linesGiven = 2*n-1;\n            String missingLine1 =\"\";\n            for(int i1=0;i1<linesGiven;i1++){\n                String temp = br.readLine();\n            \n                String[] tempArray = temp.split(\" \");\n                \n                for(int i2=0; i2<tempArray.length;i2++){\n                    int index = Integer.parseInt(tempArray[i2]);\n                    counter[index]++;\n                }\n            }\n            String line = \"\";\n            for(int i1=0;i1<counter.length;i1++){\n                if(counter[i1]!=0){\n                    if(counter[i1]%2!=0){\n                        line=line + \" \" + i1;\n                    }\n                }\n            }\n            missingLine1 = line;\n            String missingLine = missingLine1;\n            String result = \"Case #\" + (i+1) + \": \" + missingLine;\n            bw.write(result);\n            bw.newLine();\n        }\n        \n        br.close();\n        bw.flush();\n        bw.close();\n    }\n\n}"}
{"idx":"951","func":"class soldier{\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\n        int count = in.nextInt();\n\n        for (int k = 0; k < count; k++) {\n\n        int sideSize = in.nextInt();\n        int[] side = new int[sideSize * (2 * sideSize - 1)];\n        ArrayList<Integer> sideToSort = new ArrayList<>();\n\n            for (int i = 0; i < side.length; i++) {\n                side[i] = in.nextInt();\n            }\n\n            for (int i = 0; i < side.length; i++) {\n                int counter = 1;\n\n                for (int j = 0; j < side.length; j++) {\n                    if (i != j && side[i] == side[j]) {\n                        counter++;\n                    }\n                }\n\n                if (counter % 2 != 0 && !sideToSort.contains(side[i])) {\n                    sideToSort.add(side[i]);\n                }\n                if (sideToSort.size() == sideSize) {\n                    break;\n                }\n            }\n\n            Collections.sort(sideToSort);\n\n                System.out.print(\"Case #\" + (k + 1) +\": \");\n                for (int j = 0; j < sideToSort.size(); j++) {\n                    System.out.print(sideToSort.get(j) + \" \");\n                }\n                System.out.println();\n        }\n    }\n\n}"}
{"idx":"952","func":"static void main(String []args){\n        Scanner s=new Scanner(System.in);\n        int T=s.nextInt();\n        for(int i=1; i<=T; i++){\n            int n=s.nextInt();\n            int k=((n*2)-1)*n;\n            int arreglo[]=new int[2501];\n            for(int j=0; j<2501; j++){\n                arreglo[j]=0;\n            }\n            for(int j=0; j<k; j++){\n                int alt=s.nextInt();\n                arreglo[alt]++;\n            }\n            System.out.print(\"Case #\"+i+\":\");\n            for(int j=0; j<2501; j++){\n                if( arreglo[j]%2==1 ){\n                    System.out.print(\" \"+j);\n                }\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"953","func":"class B\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n\n        int T = sc.nextInt();\n\n        for(int i = 0; i < T; i++)\n        {\n            String res = \"\";\n            int N = sc.nextInt();\n            int d[] = new int[2500];\n            List<Integer> r = new ArrayList<>();\n\n            for(int j = 0; j < (2*N-1)*N; j++)\n            {\n                d[sc.nextInt()-1]++;\n            }\n            for(int j = 0; j < 2500; j++)\n            {\n                if(d[j]%2 != 0) r.add(j+1);\n            }\n            Collections.sort(r);\n            res += r.get(0);\n            for(int j = 1; j < r.size(); j++) res += \" \"+r.get(j);\n\n            System.out.println(\"Case #\"+(i+1)+\": \"+res);\n        }\n    }\n}"}
{"idx":"954","func":"class B_RankAndFile {\n\n    private final String missingLine;\n\n    public B_RankAndFile(final int N, int[][] lines) {\n        super();\n        Set<Integer> oddNumbers = new TreeSet<>();\n        for (int j = 0; j < 2 * N - 1; j++) {\n            for (int k = 0; k < N; k++) {\n                if (oddNumbers.contains(lines[j][k])) {\n                    oddNumbers.remove(lines[j][k]);\n                } else {\n                    oddNumbers.add(lines[j][k]);\n                }\n            }\n        }\n        StringBuilder missingLineBuilder = new StringBuilder();\n        for (Integer n : oddNumbers) {\n            missingLineBuilder.append(String.format(\"%d \", n.intValue()));\n        }\n        this.missingLine = missingLineBuilder.substring(0, missingLineBuilder.length() - 1);\n    }\n\n    public static void main(final String[] args) {\n        try (final Scanner sc = new Scanner(args.length > 0 ? new FileInputStream(args[0]) : System.in);\n                final PrintStream pr = args.length > 1 ? new PrintStream(args[1]) : System.out;) {\n            final int nb_test = sc.nextInt();\n            for (int i = 1; i <= nb_test; i++) {\n                final int nb = sc.nextInt();\n                final int[][] matrix = new int[2 * nb - 1][nb];\n                for (int j = 0; j < 2 * nb - 1; j++) {\n                    for (int k = 0; k < nb; k++) {\n                        matrix[j][k] = sc.nextInt();\n                    }\n                }\n                B_RankAndFile test = new B_RankAndFile(nb, matrix);\n                StringBuilder output = new StringBuilder(\n                        String.format(\"Case #%d: %s\", i, test.missingLine));\n                System.out.println(output.toString());\n            }\n        } catch (final FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"955","func":"class rank_and_file {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int num = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n    \n    for (int i = 1 ; i<= num; i++){\n        int N = in.nextInt();\n        HashSet<Integer> set = new HashSet<Integer>();\n        for (int j=0; j<2*N-1; j++){\n            for (int k = 0; k < N; k ++){\n                int cur = in.nextInt();\n                if (set.contains(cur)){\n                    set.remove(cur);\n                }\n                else {\n                    set.add(cur);\n                }\n            }\n        }\n        int[] rst = new int[set.size()];\n        int index = 0;\n        for (int j : set){\n            rst[index] = j;\n            index++;\n        }\n        Arrays.sort(rst);\n        StringBuilder sb = new StringBuilder();\n        for (int j = 0; j < rst.length; j++){\n            sb.append(rst[j] + \" \");\n        }\n        System.out.println(\"Case #\" + i + \": \" + sb.toString().trim());    \n        \n    }\n    \n  }\n}"}
{"idx":"956","func":"class B {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner( System.in );\n\n        Integer t = input.nextInt();\n\n        for( int testCase = 0; testCase < t; testCase++ ) {\n            int n = input.nextInt();\n\n            int[] heights = new int[2500];\n            Arrays.fill( heights, 0 );\n\n            for( int i = 0; i < n * 2 - 1; i++ ) {\n                for( int j = 0; j < n; j++ ) {\n                    int h = input.nextInt();\n    \n                    heights[h - 1]++;\n                }\n            }\n\n            List<Integer> missingRow = new ArrayList<Integer>(n);\n            for( int i = 0; i < heights.length; i++ ) {\n                if( heights[i] % 2 != 0 ) {\n                    missingRow.add( i );\n                }\n            }\n\n            Collections.sort( missingRow );\n\n            System.out.print( \"Case #\" + ( testCase + 1 ) + \":\" );\n            for( Integer i : missingRow ) {\n                System.out.print( \" \" + ( i + 1 ) );\n            }\n            System.out.println();\n        }\n\n        input.close();\n    }\n\n}"}
{"idx":"957","func":"class RankAndFile {\n    public static void main(String[] args) throws IOException{\n        Scanner kb = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(new FileWriter(\"rankfile.out\"));\n        \/\/PrintStream out = System.out;\n        int cases = kb.nextInt();\n        for(int n=0; n < cases; n++) {\n            out.print(\"Case #\" + (n + 1) + \":\");\n            \n            int len = kb.nextInt();\n            \n            int[] heights = new int[2501];\n            \n            for(int i=0; i < len * 2 - 1; i++) {\n                for (int j=0; j < len; j++) {\n                    heights[kb.nextInt()]++;\n                }\n            }\n            \n            for (int i=0; i <= 2500; i++) {\n                if (heights[i] % 2 == 1)\n                    out.print(\" \" + i);\n            }\n            \n            out.println();\n        }\n        out.close();\n    }\n}"}
{"idx":"958","func":"class RankFiles {\n    public static void main(String[] args) throws IOException{\n        RankFiles rf = new RankFiles();\n        \/\/System.out.println(lw.lastWord(\"CAB\"));\n        String inputPath = args[0];\n        String outputPath = args[1];\n        FileReader fileReader = new FileReader(inputPath);\n        BufferedReader bufferedReader = new BufferedReader(fileReader);\n        String line = null;\n        int size = Integer.parseInt(bufferedReader.readLine());\n        \/\/String[] tests = new String[size];\n        ArrayList<ArrayList<ArrayList<Integer>>> tests = new ArrayList<ArrayList<ArrayList<Integer>>>();\n        int i = 0;\n        while(i < size) {\n            int d = Integer.parseInt(bufferedReader.readLine());\n            ArrayList<ArrayList<Integer>> test = new ArrayList<ArrayList<Integer>>();\n            for (int j = 2*d - 1; j > 0; j--){\n                line = bufferedReader.readLine();\n                ArrayList<Integer> lineHeights = new ArrayList<Integer>();\n                for (String s : line.split(\" \")) lineHeights.add(Integer.parseInt(s));\n                test.add(lineHeights);\n            }\n            tests.add(test);\n            i++;\n        }   \n        \/\/ Always close files.\n        bufferedReader.close();\n        ArrayList<String> output = new ArrayList<String>();\n        for (int j = 0; j < size; j++) {\n            \/\/int out = pc.flipAllPancakes(tests[j]);\n            ArrayList<ArrayList<Integer>> test = tests.get(j);\n            HashMap<Integer, Integer> stats = new HashMap<Integer, Integer>();\n            int[] res = new int[(test.size()+1)\/2];\n            for (ArrayList<Integer> ai : test){\n                for (Integer h : ai){\n                    if (stats.containsKey(h)) stats.put(h, stats.get(h)+1);\n                    else stats.put(h, 1);\n                }\n            }\n            int k = 0;\n            for (Integer h : stats.keySet()){\n                if (stats.get(h)%2 == 1) res[k++] = h; \n            }\n            Arrays.sort(res);\n            StringBuilder sb = new StringBuilder();\n            for (int ni : res) sb.append(\" \"+ni);\n            String out = sb.toString();\n            output.add(\"Case #\"+(j+1)+\":\"+out);\n            System.out.println(out);\n        }\n        \n        Path file = Paths.get(outputPath);\n        Files.write(file, output, Charset.forName(\"UTF-8\"));\n    }\n}"}
{"idx":"959","func":"class RankandFile {\n\n    private static String infileName, outFileName;\n    private static BufferedReader reader;\n    private static BufferedWriter writer;\n\n    public static void main(String[] args) throws IOException {\n\n        infileName = args[0];\n        outFileName = infileName.substring(0, infileName.indexOf('.')).concat(\n                \".out\");\n        reader = Files.newBufferedReader(Paths.get(infileName));\n        writer = Files.newBufferedWriter(Paths.get(outFileName));\n        int numTests = Integer.parseInt(reader.readLine());\n        for (int i = 0; i < numTests; i++) {\n            int len = Integer.parseInt(reader.readLine());\n            int[][] in = new int[2*len - 1][len];\n            int count = 0;\n            int j1 = 0;\n            for (; count < 2*len - 1; count++) {\n                for (String s1 : reader.readLine().split(\"\\\\s\")) {\n                    in[count][j1++] = Integer.parseInt(s1);\n                }\n                j1 = 0;\n            }\n            int hights[][] = in;\n            Map<Integer, Integer> m = new HashMap<Integer, Integer>();\n            for (int i1 = 0; i1 < 2*len - 1; i1++)\n                for (int j = 0; j < len; j++) {\n                    int num = hights[i1][j];\n                    if (m.get(num) == null)\n                        m.put(num, 1);\n                    else {\n                        m.put(num, m.get(num) + 1);\n                    }\n                }\n            Set<Integer> s = new TreeSet<Integer>();\n            for (Entry<Integer, Integer> e : m.entrySet()) {\n                if (e.getValue() % 2 != 0)\n                    s.add(e.getKey());\n            }\n            Iterator<Integer> iterator = s.iterator();\n            String str = \"\";\n            while (iterator.hasNext()) {\n                str = str + iterator.next() +\" \";\n            }\n            String ans = str.trim();\n            writer.write(\"Case #\" + (i + 1) + \": \" + (ans));\n            writer.newLine();\n        }\n        reader.close();\n        writer.close();\n    }\n}"}
{"idx":"960","func":"class probB {\n    static  String input = \"probB.in\";\n    static  String output = \"probB.out\";\n    public static void main(String[] args) throws IOException{\n\/\/        BufferedReader in =new BufferedReader(new InputStreamReader(System.in));\n\/\/        PrintWriter out = new PrintWriter(System.out);\n        BufferedReader in =new BufferedReader(new FileReader(input));\n    PrintWriter out = new PrintWriter(new FileWriter(output));\n        \n        int t = Integer.parseInt(in.readLine());\n        \n        for(int i=1; i<=t; i++){\n            out.print(\"Case #\"+i+\": \");\n            int n = Integer.parseInt(in.readLine());\n            HashMap<Integer, Integer> map = new HashMap<>();\n            \n            for(int i1=1; i1<n*2; i1++){\n                StringTokenizer tok = new StringTokenizer(in.readLine());\n                while(tok.hasMoreTokens()){\n                    int a = Integer.parseInt(tok.nextToken());\n                    if(map.containsKey(a)){\n                        map.put(a, map.get(a)+1);\n                    }    else {\n                        map.put(a, 1);\n                    }\n                }\n            }\n            \n            ArrayList<Integer> res = new ArrayList<>();\n            \n            Iterator<Integer> iter = map.keySet().iterator();\n            while(iter.hasNext()){\n                int height = iter.next();\n                int count = map.get(height);\n                \n                if(count%2==1){\n                    res.add(height);\n                }\n            }\n            \n            Collections.sort(res);\n            for(int a: res){\n                out.print(a+\" \");\n            }\n            \n            if(res.size()!=n){\n                System.out.println(\"error\");\n            }\n            out.println();\n        }\n        out.flush();\n    }\n    \n}"}
{"idx":"961","func":"class LinkedList {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int cases = in.nextInt();\n        int[] inte;\n        int counter = 1;\n        ArrayList<Integer> arr;\n        while(cases-- > 0){\n            inte = new int[2501];\n            int n = in.nextInt();\n            for(int i = 0; i < 2*n-1; i++){\n                for(int j = 0; j < n; j++){\n                    int a = in.nextInt();\n                    inte[a]++;\n                }\n            }\n            arr = new ArrayList<>();\n            for (int i = 0; i < 2501; i++){\n                if (inte[i]%2 ==1)\n                    arr.add(i);\n            }\n            Collections.sort(arr);\n            System.out.print(\"Case #\"+counter+\": \");\n            for (int i = 0; i < n; i++){\n                System.out.print(arr.get(i)+\" \");\n            }\n            System.out.println(\"\");\n            counter++;\n        }\n    \n    }\n    \n}"}
{"idx":"962","func":"class B {\n    public static void main(String[] args) throws FileNotFoundException {\n        FileInputStream fin = new FileInputStream(\"B-large.in.txt\");\n        Scanner scanner = new Scanner(fin);\n        FileOutputStream fout = new FileOutputStream(\"B-large.out.txt\");\n        PrintWriter writer = new PrintWriter(fout);\n        int testCount = scanner.nextInt();\n        for (int testCase = 1; testCase <= testCount; ++testCase) {\n            int n = scanner.nextInt();\n            int[][] a = new int[2*n-1][n];\n            for (int i = 0; i < 2*n-1; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    a[i][j] = scanner.nextInt();\n                }\n            }\n            Map<Integer, Integer> m = new HashMap<>();\n            for (int[] ar : a) {\n                for (int e : ar) {\n                    if (!m.containsKey(e)) {\n                        m.put(e, 0);\n                    }\n                    m.put(e, m.get(e) + 1);\n                }\n            }\n            int[] res1 = new int[a[0].length];\n            int i1 = 0;\n            for (int e : m.keySet()) {\n                if (m.get(e) % 2 == 1) {\n                    res1[i1++] = e;\n                }\n            }\n            Arrays.sort(res1);\n            int[] res = res1;\n            String out = \"\" + res[0];\n            for (int i = 1; i < res.length; ++i) {\n                out += \" \" + res[i];\n            }\n            writer.printf(\"Case #%d: %s\\n\", testCase, out);\n        }\n        writer.close();\n    }\n}"}
{"idx":"963","func":"class TaskB {\n    public static void main(String args[]){\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n            int test = Integer.parseInt(in.readLine());\n            int a[];\n            for (int t = 1; t <= test; t++) {\n                int n = Integer.parseInt(in.readLine());\n                a = new int [3000];\n                for (int i = 0; i < (2 * n - 1); i++) {\n                    StringTokenizer st = new StringTokenizer(in.readLine());\n                    for (int j =0 ;j < n; j++) {\n                        int x = Integer.parseInt(st.nextToken());\n                        a[x]++;\n                    }\n                }\n\n                int pos = 0;\n                int ans[] = new int [n];\n                for (int i = 0; i < a.length; i++) {\n                    if (a[i] % 2 == 1) {\n                        ans[pos++] = i;\n                    }\n                }\n\n\n                Arrays.sort(ans);\n                System.out.print(\"Case #\" + t + \": \");\n                for (int i = 0; i < n; i++) {\n                    System.out.print(ans[i]+\" \");\n                }\n                System.out.println();\n            }\n\n            in.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"964","func":"class Rank {\n    public static void main(String[] args) throws Exception {\n        List<String[]> lines = new ArrayList<String[]>();\n        try (BufferedReader br = new BufferedReader(new FileReader(new File(\n                \"round1\/B-large.in\")))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                lines.add(line.split(\" \"));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        String h = \"\";\n        int testCases = Integer.valueOf(lines.get(0)[0].trim());\n        int prevN = 0;\n        for (int z = 0; z < testCases; z++) {\n            int n = Integer.valueOf(lines.get(z + 1 + prevN)[0].trim());\n            int p = n * 2 - 1;\n            List<Integer> list = new ArrayList<Integer>();\n            for (int i = 0; i < p; i++) {\n                String[] st = lines.get(z + i + 2 + prevN);\n                for (String s : st) {\n                    Integer a = Integer.valueOf(s);\n                    if (list.contains(a)) {\n                        list.remove(a);\n                    } else {\n                        list.add(a);\n                    }\n                }\n            }\n        \n            Collections.sort(list);\n            StringBuilder sb = new StringBuilder(list.size());\n            for (Integer c : list)\n                sb.append(c + \" \");\n            String result1 = sb.toString();\n        \n            h += \"Case #\" + (z + 1) + \": \" + new String(result1) + \"\\n\";\n            prevN += 2 * n - 1;\n        }\n        String result = h;\n        System.out.println(result);\n        PrintWriter writer = new PrintWriter(\"round1\/B-large.txt\", \"UTF-8\");\n        writer.println(result);\n        writer.close();\n\n    }\n\n}"}
{"idx":"965","func":"class b {\n\n    public static void main(String[] args) {\n\n        Scanner stdin = new Scanner(System.in);\n        int numCases = stdin.nextInt();\n\n\n        for (int loop=1; loop<=numCases; loop++) {\n\n            int[] freq = new int[2501];\n            int n = stdin.nextInt();\n\n            for (int i=0; i<n*(2*n-1); i++)\n                freq[stdin.nextInt()]++;\n\n            System.out.print(\"Case #\"+loop+\":\");\n            for (int i=1; i<2500; i++)\n                if (freq[i]%2 == 1)\n                    System.out.print(\" \"+i);\n            System.out.println();\n        }\n    }\n\n\n}"}
{"idx":"966","func":"static void main(String args[])throws IOException\n{ \nFileInputStream in =new FileInputStream(\"B-large.in\");\nFileOutputStream outer =  new FileOutputStream(\"output.txt\");\nInputStreamReader inn=new InputStreamReader(in);\nBufferedReader br=new BufferedReader(inn);\nPrintWriter ob=new PrintWriter(outer,true);\nString bb=br.readLine();int i;\nint t=Integer.parseInt(bb);int j=0;\nwhile(t-->0)\n{\n++j;\nString a=br.readLine();\nint n=Integer.parseInt(a);\nint k[]=new int[2501];\nfor(i=1;i<2*n;i++)\n{\nString b[]=br.readLine().split(\" \");\nfor(int l=0;l<n;l++)\nk[Integer.parseInt(b[l])]++;\n}\nob.print(\"Case #\"+j+\": \");\nfor(i=1;i<=2500;i++)\n{\nif(k[i]%2!=0)\nob.print(i+\" \");\n}\nob.println();\n}\nin.close();\nouter.flush();\nouter.close();\n}\n\n}"}
{"idx":"967","func":"static void main(String[] args) throws Exception {\n        File file = new File(\"\/Volumes\/Macintosh HD\/Users\/avorobyev\/Downloads\/B-large.in\");\n        Scanner input = new Scanner(file);\n\n        int totalCases = input.nextInt();\n\n        for (int i = 1; i < totalCases + 1; i++) {\n\n            check = new HashMap<Integer, Integer>();\n\n            int n = input.nextInt();\n            for (int j = 0; j < 2 * n - 1; j++) {\n                for (int k = 0; k < n; k++) {\n                    Integer m = input.nextInt();\n                    if (check.get(m) == null) {\n                        check.put(m, 1);\n                    } else {\n                        Integer old = check.get(m);\n                        Integer newOld = old + 1;\n                        check.put(m, newOld);\n                    }\n                }\n            }\n\n            ArrayList<Integer> toSort = new ArrayList<>();\n\n            Iterator it = check.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry pair = (Map.Entry) it.next();\n                Integer toCheck = (Integer) pair.getValue();\n                if ((toCheck % 2) != 0) {\n                    toSort.add((Integer) pair.getKey());\n                }\n            }\n\n            Collections.sort(toSort);\n\n            System.out.print(\"Case #\" + i + \": \");\n\n            for (int j = 0; j < n; j++) {\n                System.out.print(toSort.get(j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"968","func":"class Rank {\n\n    \/**\n     * @param args\n     * @throws IOException \n     *\/\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        File file = new File(\"C:\\\\Users\\\\manju\\\\Downloads\\\\B-large.in.txt\");\n        File outFile = new File(\"C:\\\\Users\\\\manju\\\\Downloads\\\\B-large.out.txt\");\n        BufferedReader br = new BufferedReader(new FileReader(file));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\n        int testCases = Integer.parseInt(br.readLine());\n        for(int t=1;t<=testCases;t++)\n        {\n            String line = br.readLine().trim();\n            Integer n = Integer.parseInt(line);\n            int endIn = 2*n-1;\n            int a[][] = new int [n][n];\n            List<List<Integer>> inList = new ArrayList<List<Integer>>();\n            Set<Integer> out = new TreeSet<Integer>();\n            \/\/Set<String> stList = new TreeSet<String>();\n            Map<Integer, Integer> itMap = new HashMap<Integer, Integer>();\n            for(int i=0; i< endIn;i++)\n            {\n                line = br.readLine().trim();\n                String[] numberArray = line.split(\" \");\n                \n                \n                char ch[] = line.toCharArray();\n                \/\/List<Integer> list = new ArrayList<Integer>();\n                for (String number : numberArray) {\n                    int key = Integer.parseInt(number);\n                   \/\/ list.add(key);\n                    if(!(itMap.containsKey(key)))\n                    {\n                        itMap.put(key, 1);\n                    }\n                    else\n                    {\n                        itMap.put(key, itMap.get(key)+1);\n                    }\n                }\n                \/\/inList.add(list);\n                \/\/System.out.println(list);\n            }\n            System.out.println(itMap);\n            \n            for(Entry<Integer, Integer> entry : itMap.entrySet())\n            {\n                if (entry.getValue()%2!=0)\n                {\n                    out.add(entry.getKey());\n                }\n            }\n            System.out.println(out);\n            \n\n            bw.write(\"Case #\" + t +\": \");\n            for(Integer i : out)\n            {\n                bw.write(i + \" \");\n            }\n            if(t !=testCases)\n            {\n                bw.newLine();\n            }\n\n            \n        }\n        br.close();\n        bw.close();\n        \n        \n            \n    }\n\n}"}
{"idx":"969","func":"class CodeJam {\n     public static void main(String[] args) throws NumberFormatException, IOException {\n             BufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\n             BufferedWriter bw=new BufferedWriter(new FileWriter(\"soldiers.txt\"));\n            \n            int T,N=0;\n            String l;\n               T = Integer.valueOf(br.readLine());\n            for (int i=0;i<T;i++)\n                {\n                String s=\"\";\n                N = Integer.valueOf(br.readLine());\n                int[][] lists = new int[2*N -1][N];\n                for(int j=0;j<(2*N-1);j++){\n                    l=br.readLine();\n                    for(int k=0;k<N;k++)\n                        lists[j][k]=Integer.valueOf(l.split(\" \")[k]);\n                }\n                \n                int c=0;\n                for (int m=1;m<2501;m++){\n                    c=0;\n                    for(int j=0;j<(2*N-1);j++)\n                        for(int k=0;k<N;k++)if(lists[j][k]==(m))c++;\n                        if(c%2!=0)s=s+m+\" \";\n                    }\n                \n                \n                bw.write(\"Case #\"+(i+1)+\": \"+s);bw.newLine();\n            }\n            br.close();\n            bw.close();\n       }\n}"}
{"idx":"970","func":"class List {\n\n    static StringTokenizer st;\n    static BufferedReader sc;\n    static PrintWriter pw;\n\n    public static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));\n    BufferedReader in = new BufferedReader(new FileReader(\"F:\\\\JAVA\\\\eclipse\\\\input.in\")); \n    pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(\n            System.out)));\n    String str;\n    int [] a = new int [2510];\n    String text = in.readLine(); \n    int T=Integer.parseInt(text);     \n    for (int tc=0;tc<T;tc++) {\n        int n = Integer.parseInt(in.readLine()); \n        int[] out = new int[n];\n        for (int i=0;i<2*n-1;i++) {\n            text = in.readLine();\n            String [] tmp = text.split(\" \");\n            for (int j=0;j<tmp.length;j++) {\n                a[Integer.parseInt(tmp[j])]++;\n            }            \n        }\n        int cnt = 0;\n        for (int i=0;i<a.length;i++) {\n            if (a[i]!=0) {\n                if (a[i]%2==1) {\n                    out[cnt]=i;\n                    cnt++;\n                }                        \n            }\n        }\n        Arrays.sort(out);\n        String s = \"\";\n        for (int i=0;i<out.length;i++) {\n            s += Integer.toString(out[i])+ \" \";\n        }\n        pw.println(\"Case #\"+(tc+1)+\": \"+s.substring(0,s.length()-1));\n    }\n    \/\/pw.println(arr.size());\n    pw.close();\n\n    }\n\n\n\n}"}
{"idx":"971","func":"class Small {\n  static boolean IS_DEBUG = false;\n  public static void main(String[] args) throws Exception{\n\/\/    int[][] aii = new int[][]{\n\/\/        {1,2,3},\n\/\/        {2,3,5},\n\/\/        {3,5,6},\n\/\/        {2,3,4},\n\/\/        {1,2,3}\n\/\/    };\n\/\/    solve(aii);\n    \/\/\/\/ GCJ\u5171\u901a \u3053\u3053\u304b\u3089\n    \/\/String filename = \"src\/year2016\/r1a\/b\/B-small-attempt0\";\n    String filename = \"src\/year2016\/r1a\/b\/B-large\";\n    try(PrintWriter out = new PrintWriter(new File(filename + \".out\")); Scanner scan = new Scanner(new File(filename + \".in\"))){\n      \n      final int T = scan.nextInt();\n      StringBuilder ret = new StringBuilder();\n      for (int i = 0; i < T; i++) {\n        ret.append(\"Case #\"+(i+1)+\": \");\n        \/\/\/\/ \u554f\u984c\ufffd\ufffd\u3092\u8aad\u3093\u3067solve()\u306b\u6e21\u3059 \u3053\u3053\u304b\u3089\n        int N = scan.nextInt();\n        int[][] aai = new int[2*N-1][N];\n        for(int j=0; j<2*N-1; j++) {\n          int[] ai = new int[N];\n          for(int k=0; k<N; k++) ai[k] = scan.nextInt();\n          aai[j] = ai;\n        }\n        \/\/ \u5947\u6570\u56de\u3057\u304b\u767b\u5834\u3057\u306a\u3044\u6570\u5024\u304cN\u500b\u3042\u308b\u306f\u305a\n        Map<Integer, Integer> m = new HashMap<>();\n        for(int[] ai: aai) for(int i2: ai) {\n          m.computeIfPresent(i2, (k,v) -> v+1);\n          m.putIfAbsent(i2, 1);\n        }\n        List<Integer> l = new ArrayList<>();\n        for(Map.Entry<Integer, Integer> e : m.entrySet()) {\n          if(e.getValue()%2==1) {\n            l.add(e.getKey());\n          }\n        }\n        Collections.sort(l);\n        StringBuilder ret1 = new StringBuilder();\n        for(Integer i1 : l){\n          ret1.append(i1.toString());\n          ret1.append(' ');\n        }\n        if(IS_DEBUG) System.out.println(ret1.substring(0, ret1.length()-1));\n        String ans = ret1.substring(0, ret1.length()-1);\n        if( IS_DEBUG ) System.out.println(ans);\n        ret.append(ans);\n        \/\/\/\/ \u554f\u984c\u6587\u3092\u8aad\u3093\u3067solve()\u306b\u6e21\u3059 \u3053\u3053\u307e\u3067\n        ret.append(\"\\n\");\n      }\n      out.write(ret.substring(0, ret.length()-1));\n      out.flush();\n    }\n    \/\/\/\/ GCJ\u5171\u901a \u3053\u3053\u307e\u3067\n  }\n}"}
{"idx":"972","func":"class Main{\n  \n  public static void main(String[]args){\n    \n    Scanner in = new Scanner(System.in);\n    int T = in.nextInt();\n    \n    for(int zz = 1; zz <= T; zz++){\n      int N = in.nextInt();\n      \n      int[] soldiers = new int[N*(2*N-1)];\n      \n      for(int i = 0; i < N*(2*N-1); i++){\n        soldiers[i] = in.nextInt();\n      }\n      \n      Arrays.sort(soldiers);\n    int[] found = new int[N];\n    int foundIndex = 0;\n    \n    int currentNum = soldiers[0];\n    int numSum = 1;\n    \n    for(int i1 = 1, len = soldiers.length; i1 < len; i1++){\n      int currentCheck = soldiers[i1];\n      if(currentNum == currentCheck){\n        numSum++;\n      }else{\n        if(numSum % 2 == 1){\n          found[foundIndex] = currentNum;\n          foundIndex++;\n        }\n        numSum = 1;\n        currentNum = currentCheck;\n      }\n    }\n    \n    if(numSum % 2 == 1){\n          found[foundIndex] = currentNum;\n        }\n      \n      int[] answer = found;\n      \n      System.out.printf(\"Case #%d: \", zz);\n      \n      for(int i = 0; i < N; i++){\n        System.out.printf(\"%d \", answer[i]);\n      }\n      System.out.println();\n    }\n    \n  }\n}"}
{"idx":"973","func":"static void main(String[] args) {\n\n    Scanner sc=new Scanner(System.in);\n     int tt=sc.nextInt();\n     \n    \n   int c;\n     for(int z=0;z<tt;z++)\n     {\n          int n=sc.nextInt();\n          \n        \n         int[] a=new int[2501];\n         for(int i=0;i<(2*n)-1;i++)\n         {\n             for(int j=0;j<n;j++)\n             {\n                 c=sc.nextInt();\n                 a[c]+=1;\n                \n                 \n                \n                 \n                 \n                 \n             }\n                \n         }\n           \n       \n         Arrays.sort(a);\n           System.out.print(\"Case #\" + (z+1) + \":\" +\" \" );\n          for(int i=0;i<2501;i++)\n          if(a[i]%2!=0){\n           System.out.print(a[i] + \" \");}\n           System.out.println();\n         }\n         \n         \n}}"}
{"idx":"974","func":"class Rank {\n    public static void main (String[] args) throws IOException {\n        FileReader fin = new FileReader(\"RankInput.txt\");\n        BufferedReader bin = new BufferedReader (fin);\n        int t = Integer.parseInt(bin.readLine());\n        FileWriter fout = new FileWriter(\"RankOutput.txt\");\n        BufferedWriter bout = new BufferedWriter(fout);\n        PrintWriter pout = new PrintWriter(bout);\n        for (int i = 0; i < t; i++) {\n            int n = Integer.parseInt(bin.readLine());\n            String answer = \"\";\n            int count[] = new int[2501];\n            for (int j = 0; j < 2501; j++) count[j] = 0;\n            for (int j = 0; j < 2*n-1; j++) {\n                String s = bin.readLine();\n                StringTokenizer sb = new StringTokenizer(s);\n                for (int k = 0; k < n; k++) {\n                    int l = Integer.parseInt(sb.nextToken());\n                    count[l]++;\n                }\n            }\n            for (int j = 1; j < 2501; j++) {\n                if (count[j]%2 == 1) {\n                    answer = answer + \"\" + j + \" \";\n                }\n            }\n            pout.println(\"Case #\"+(i+1)+\": \"+answer.trim());\n        }\n        pout.close();\n    }\n}"}
{"idx":"975","func":"class Main {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(new File(\"B.in\")));\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(new File(\"B.out\"))));\n\n        int T = Integer.parseInt(br.readLine());\n        \n        for (int t = 0; t < T; t++) {\n            int[] count = new int[2500+1];\n            int N = Integer.parseInt(br.readLine());\n            for (int i = 0; i < N*2-1; i++) {\n                String[] str = br.readLine().split(\" \");\n                for (int j = 0; j < N; j++) {\n                    count[Integer.parseInt(str[j])]++;\n                }\n            }\n            pw.print(\"Case #\"+(t+1)+\":\");\n            for (int i = 1; i < count.length; i++) {\n                if (count[i] % 2 > 0) pw.print(\" \"+i);\n            }\n            pw.println();\n            pw.flush();\n        }\n        \n        pw.close();\n        br.close();\n    }\n}"}
{"idx":"976","func":"class probB \n{\n    public static void main(String[] args) throws IOException\n    {\n        Scanner in = new Scanner(new File(\"B-large.in\"));\n        PrintWriter out = new PrintWriter(new File(\"fileBoutput.txt\"));\n        int times = Integer.parseInt(in.nextLine());\n        for(int i = 0; i<times; i++)\n        {\n            int size = in.nextInt();\n            in.nextLine();\n            \n            Set<Integer> odds = new TreeSet<>();\n            \n            for (int j = 0; j < size*2-1; j++) \n            {\n                for (int k = 0; k < size; k++) \n                {\n                    int h = in.nextInt();\n                    \n                    if (odds.contains(h))\n                        odds.remove(h);\n                    else\n                        odds.add(h);\n                }\n            }\n            Iterator<Integer> remain = odds.iterator();\n            String result = \"\";\n            while(remain.hasNext()) \n                result += (remain.next() + \" \");\n            System.out.println(\"Case #\" + (i+1) + \": \" + result);\n            out.println(\"Case #\" + (i+1) + \": \" + result);\n        }\n        in.close();\n        out.close();\n    }    \n}"}
{"idx":"977","func":"class Problem2 {\n    public static void main(String[] args) throws FileNotFoundException {\n        \n        \/\/hard code the file location\n        \/\/open file\n        \/\/get number of test cases\n        File f = new File(\"B-large.in\");\n        Scanner s = new Scanner(f);\n        String line = s.nextLine();\n        int T = Integer.parseInt(line);\n        \n        \/\/open output file\n        File f2 = new File(\"largeoutput.txt\");\n        PrintWriter p = new PrintWriter(f2);\n        \n        \n        for ( int j = 1; j <= T; j++) {\n            int[] counts = new int[2500];\n            int n = s.nextInt();\n            for (int i = 0; i < 2*n*n-n; i++) {\n                int tmp = s.nextInt();\n                counts[tmp-1]++;\n            }\n            String result = \"\";\n            for (int i = 0; i < counts.length; i++) {\n                if (counts[i] % 2 != 0) {\n                    result += (i+1) + \" \";\n                }\n            }\n            p.println(\"Case #\" + j + \": \" + result);\n               \n        \n        }\n        \n        p.close();\n        s.close();\n    }\n    \n}"}
{"idx":"978","func":"class RankAndFile {\n\n    public static void main(String args[]) throws Exception {\n        Writer writer = null;\n        Scanner scanner = null;\n        try{\n            scanner= new Scanner(new BufferedReader(new FileReader(\"input_files\/B-large.in\")));\n            writer = new BufferedWriter(new OutputStreamWriter(\n                    new FileOutputStream(\"output_files\/rankfile_output_large.txt\"), \"utf-8\")); \n\n            int noOfTestCases = scanner.nextInt();\n            System.out.println(noOfTestCases);\n\/\/            Set<Integer> set =null;\n            SortedSet<Integer> sortedSet =null; \n\n            for(int i =0;i<noOfTestCases;i++){\n                HashMap<Integer, Integer> map = new HashMap<>();\n\/\/                set = new HashSet<>();\n                sortedSet = new TreeSet<>(); \n                int noOfValues = scanner.nextInt();\n\/\/                System.out.println(\"no of values : \"+noOfValues);\n                for(int j=0;j<(noOfValues*2-1)*noOfValues;j++){\n                    int val = scanner.nextInt();\n                    if(!map.containsKey(val))\n                        map.put(val, 1);\n                    else{\n                        int value = map.get(val);\n                        map.put(val, value+1);\n                    }\n                }\n\n                for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n                    int key = entry.getKey();\n                    int value = entry.getValue();\n\/\/                    System.out.println(key + \" : \"+value);\n                    if(value%2!=0){\n                        sortedSet.add(key);\n                        if(sortedSet.size()==noOfValues)\n                            break;\n                    }\n                }\n\n                String printLine = \"Case #\"+(i+1)+\": \";\n\/\/                System.out.println(Arrays.toString(sortedSet.toArray()));\n\/\/                for(int p =0;p<set.size();p++)\n                    for(Integer in : sortedSet)\n                        printLine+=in+\" \";\n                    printLine = printLine.trim();\n                    printLine+=\"\\n\";\n                    writer.write(printLine);\n            }\n        }\n\n        catch (Exception e){\n            e.printStackTrace();\n        }\n        finally {\n            scanner.close();\n            writer.close();    \n        }\n    }\n\n}"}
{"idx":"979","func":"class ProblemB {\n    \n    public static void main(String[] args) {\n        Scanner inputScanner = new Scanner(System.in);\n        \n        \/\/ Get the number of test cases\n        int totalCases = inputScanner.nextInt();\n        for (int caseId = 1; caseId <= totalCases; caseId++) {\n            \/\/ Read the word set\n            int n = inputScanner.nextInt();\n            Integer[] numbers = new Integer[n * (2 * n - 1)];\n            for (int i = 0; i < numbers.length; i++) {\n                numbers[i] = inputScanner.nextInt();\n            }\n            HashMap<Integer, Integer> timesMap = new HashMap<Integer, Integer>();\n            \n            for (Integer num : numbers) {\n                Integer times = timesMap.get(num);\n                if (times == null)\n                    times = 1;\n                else\n                    times++;\n                timesMap.put(num, times);\n            }\n            \n            Integer[] oddTimesNums = new Integer[n];\n            int count = 0;\n            for (Entry<Integer, Integer> entry : timesMap.entrySet()) {\n                Integer num = entry.getKey();\n                Integer times = entry.getValue();\n                \n                if (times % 2 != 0) {\n                    oddTimesNums[count] = num;\n                    count++;\n                }\n            }\n            \n            Arrays.sort(oddTimesNums);\n            Integer[] result = oddTimesNums;\n            \n            StringBuilder sb = new StringBuilder();\n            sb.append(result[0]);\n            for (int i = 1; i < n; i++) {\n                sb.append(' ');\n                sb.append(result[i]);\n            }\n            \n            \/\/ Print the result\n            System.out.println(\"Case #\" + caseId + \": \" + sb.toString());\n        }\n        \n        inputScanner.close();\n    }\n}"}
{"idx":"980","func":"class MainClass {\n    static Scanner scan;\n    static PrintWriter writer;\n\n    public static void main(String[] args) {\n        File file = new File(\"E:\/\/B-large.in\");\n        try {\n            writer = new PrintWriter(\"E:\/\/B-large.out\");\n            scan = new Scanner(file);\n            int test = scan.nextInt();\n            scan.nextLine();\n            for(int i=0;i<test;i++) {\n                writer.print(\"Case #\" + (i + 1) + \": \");\n                int n = scan.nextInt();\n                        HashMap<Integer, Integer> M = new HashMap<>();\n                        int[][] A = new int[n*2-1][n];\n                        for(int i2=0;i2<n*2-1;i2++) {\n                            for(int j=0;j<n;j++) {\n                                int tmp = scan.nextInt();\n                                if(M.containsKey(tmp)) {\n                                    int t = M.get(tmp);\n                                    M.remove(tmp);\n                                    M.put(tmp, t+1);\n                                } else {\n                                    M.put(tmp, 1);\n                                }\n                                \/\/A[i][j] = scan.nextInt();\n                            }\n                        }\n                        Set<Integer> K = M.keySet();\n                        List<Integer> KQ = new ArrayList<>();\n                        for (Integer i3 : K) {\n                            int t = M.get(i3);\n                            if(t%2==1)\n                                KQ.add(i3);\n                        }\n                        Collections.sort(KQ);\n                        for(int i1=0;i1<KQ.size();i1++) {\n                            writer.print(KQ.get(i1) + \" \");\n                        }\n                        writer.println();\n                \/\/        for(int i=1;i<n*2-1;i++) {\n                \/\/            if(A[i-1][0] > A[i][0]) {\n                \/\/                int[] B = new int[n];\n                \/\/                for(int j = 0;j < n;j++)\n                \/\/                    B[j] = A[i-1][j];\n                \/\/                for(int j = 0;j < n;j++)\n                \/\/                    A[i-1][j] = A[i][j];\n                \/\/                for(int j = 0;j < n;j++)\n                \/\/                    A[i][j] = B[j];\n                \/\/            }\n                \/\/        }\n                \/\/        int[][] C = new int[n][n];\n                \/\/        for(int i=0;i<n;i++)\n                \/\/            C[0][i] = A[0][i];\n                \/\/        int i = 0;\n                \/\/        int j = 1;\n                \/\/        while (true) {\n                \/\/            if(A[j][0] == C[i][0]) {\n                \/\/                for(int k=0;k<n;k++)\n                \/\/                    C[i][k] = A[j][k];\n                \/\/            } else {\n                \/\/\n                \/\/            }\n                \/\/        }\n            }\n            writer.close();\n        } catch (Exception e1) {\n            e1.printStackTrace();\n        }\n    }\n}"}
{"idx":"981","func":"class RankOfFile {\n\n    public static void main(String[] args) throws IOException {\n\n        Scanner in = new Scanner(new File(\"B-large.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n        RankOfFile test = new RankOfFile();\n\n        int n = in.nextInt();\n\n        for (int i = 0; i < n ;i++) {\n            int k = in.nextInt();\n            Map<Integer, Integer> map = new TreeMap<Integer, Integer>() {\n            };\n            for (int j = 0; j < (2*k-1)*k; j++) {\n                String s = in.next();\n                int num = Integer.parseInt(s);\n                if (map.containsKey(num)) {\n                    map.put(Integer.parseInt(s),map.get(num)+1);\n                } else {\n                    map.put(Integer.parseInt(s), 1);\n                }\n            }\n            String[] sb = new String[k];\n            int kk = 0;\n            Set set2 = map.entrySet();\n            Iterator iterator2 = set2.iterator();\n            while(iterator2.hasNext()) {\n                Map.Entry me2 = (Map.Entry)iterator2.next();\n                if ((int)me2.getValue() % 2 != 0) {\n                    sb[kk] = String.valueOf(me2.getKey());\n                    kk++;\n                }\n\n            }\n\n\n            pw.print(\"Case #\" + (i + 1) + \": \");\n            pw.println(String.join(\" \", sb));\n        }\n        pw.flush();\n        pw.close();\n        in.close();\n\n    }\n}"}
{"idx":"982","func":"class B {\n    \n    \n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        \n        int tc = sc.nextInt();\n        int n;\n                \n        int tmp;\n        \n            \n        for(int i=0; i<tc; ++i){\n            n = sc.nextInt();\n            \n            int[] hei = new int[2501];\n            \n            int[] row = new int[n];\n            \n            for(int a=0; a<2*n-1; ++a){\n                for(int b=0; b<n; ++b){\n                    tmp = sc.nextInt();\n                    hei[tmp]++;\n                }\n            }\n            \n            int pos = 0;\n            \n            for(int a=0; a<2501; ++a){\n                if(hei[a] % 2 != 0){\n                    row[pos] = a;\n                    pos++;\n                }\n            }\n            \n            Arrays.sort(row);\n            \n            \n            System.out.printf(\"Case #%d: \", i+1);\n            \n            for(int a=0; a<n-1; ++a){\n                System.out.printf(\"%d \", row[a]);\n            }\n            System.out.printf(\"%d%n\", row[n-1]);\n        }\n        \n        sc.close();\n    }\n}"}
{"idx":"983","func":"class BRank_File {\n    static Scanner reader;\n    static PrintWriter outWrite;\n    static int n,res[],m,a[][];\n    static int c[]=new int[3000];\n    public static void main(String[] args) throws Exception {\n        reader=new Scanner(new File(\"B-large.in\"));\n        outWrite=new PrintWriter(new File(\"B-output.txt\"));\n        int nTest=reader.nextInt();\n        int i,j;\n        for (int test=1;test<=nTest;test++){\n            n=reader.nextInt();\n            m=(2*n)-1;\n            a=new int[m][n];\n            for (i=0;i<m;i++){\n                for (j=0;j<n;j++) \n                    a[i][j]=reader.nextInt();\n            }\n            if (test>1) outWrite.println();\n            int i1,j1;\n            Arrays.fill(c, 0);\n            res=new int[n];\n            for (i1=0;i1<m;i1++)for (j1=0;j1<n;j1++)\n                c[a[i1][j1]]++;\n            j1=0;\n            for (i1=0;i1<c.length;i1++){\n                if ((c[i1]%2)==1){\n                    res[j1]=i1; j1++;\n                }\n            }\n            outWrite.print(\"Case #\" + test+\": \");\n            for (j=0;j<res.length;j++){\n                if (j>0) outWrite.print(\" \");\n                outWrite.print(res[j]);\n            }\n        }\n        outWrite.close();\n\n    }\n\n}"}
{"idx":"984","func":"class B {\n    public static void main (String [] arg) {\n        Scanner sc = new Scanner(System.in);\n        int T = Integer.parseInt(sc.nextLine());\n        for (int ii = 1; ii<=T; ++ii) {\n            \n            int N = sc.nextInt();\n            int [] heights = new int [3000];\n            for (int i = 0; i<2*N-1; ++i) {\n                for (int j = 0; j<N; ++j) {\n                    int height = sc.nextInt();\n                    heights[height]++;\n                }\n            }\n            int [] ans = new int [N+1];\n            int ptr = 0;\n            System.err.print(ii + \" : \");\n            for (int i = 0; i<heights.length; ++i) {\n                if (heights[i] % 2 == 1) {\n                    ans[ptr] = i;\n                    ptr++;\n                    System.err.print(i + \" \");\n                }\n            }\n            System.err.println();\n            \n            System.out.printf(\"Case #%d: \", ii);\n            for (int i = 0; i<N; ++i) {\n                System.out.print(ans[i]);\n                if (i != N-1) System.out.print(\" \");\n                if (i == N-1) System.out.println();\n            }\n        }\n    }\n}"}
{"idx":"985","func":"class Soldier {\n\n\n    public static void main(String []args) throws IOException {\n\n        FileReader fr = new FileReader(\"B-large.in\");\n        BufferedReader br = new BufferedReader(fr);\n        String s;\n\n\n        \/\/Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int T;\n        if((s = br.readLine()) != null)\n            T = Integer.parseInt(s);\/\/c.nextInt();\n        else\n        {\n            System.out.println(\"File has nothing to read.\");\n            return;\n        }\n        if(T < 1 || T > 100) {\n            System.out.println(\"Improper number of test cases.\");\n            return;\n        }\n        \n        HashMap<Integer, Integer>  obj = new HashMap<Integer, Integer>();\n        int N;\n        Integer arr[][];int one = 1;\n        String strarr[];\/\/ = new String();\n        for(int k = 0;k < T;k++) {\n            obj.clear();\n            if((s = br.readLine()) != null)\n                N = Integer.parseInt(s);\/\/c.nextInt();\n            else {\n                System.out.println(\"File has nothing to read.\");\n                return;\n            }\n            arr = new Integer[2 * N - 1][N];\n            for(int i = 0;i < 2 * N - 1;i++) {\n                if((s = br.readLine()) == null) {\n                    System.out.println(\"File has nothing to read.\");\n                    return;\n                }\n                strarr = null;\n                strarr = s.split(\" \");\n                for(int j = 0;j < N;j++) {\n                    arr[i][j] = Integer.parseInt(strarr[j]);\n                    if(!obj.containsKey(arr[i][j]))\n                        obj.put((Integer) arr[i][j],(Integer)  1);\n                    else\n                        obj.put((Integer)arr[i][j], (Integer)(obj.get(arr[i][j]) + 1));\n                }    \n            }\n    \n            Set setobj = obj.entrySet();\n            Iterator it = setobj.iterator();\n            int out[] = new int[N];int i = 0;\n            while(it.hasNext()) {\n                Map.Entry me = (Map.Entry) it.next();\n                int temp = (int)me.getValue();\n                if(temp % 2  == 1) {\n                    out[i] = (int)me.getKey(); i++;\n                }\n                        \n            }\n            Arrays.sort(out);\n            System.out.print(\"Case #\" + (k + 1) + \": \");\n            for(int j = 0;j < N;j++)\n                System.out.print(out[j] + \" \");\n            System.out.println();\n            \n            \n        }\n\n    }\n\n}"}
{"idx":"986","func":"class RankAndFile {\n\n    static Scanner input;\n    static PrintWriter output;\n    static int testCases;\n    static final String inFileName = \"in.txt\";\n    static final String outFileName = \"RankAndFile.txt\";\n    \n    public static void main(String[] args) throws FileNotFoundException {\n        \n        input = new Scanner(new File(inFileName));\n        output = new PrintWriter(new File(outFileName));\n        testCases = input.nextInt();\n        \n        StringBuilder answer;\n        int N;\n        \n        int[] list;\n        \n        \n        for(int i = 0; i<testCases; i++)\n        {\n            N = input.nextInt();\n            input.nextLine();\n            \n            answer = new StringBuilder();\n            list = new int[2*N*N-N];\n            for(int x = 0; x<2*N*N-N; x++)\n            {\n                list[x] = input.nextInt();\n            }\n            \n            Arrays.sort(list);\n            int temp,count=1;\n            temp = list[0];\n            for(int y = 1; y<list.length; y++)\n            {\n                if(temp == list[y])\n                    count++;\n                else\n                {\n                    if(count%2 != 0)\n                    {\n                        answer.append(temp + \" \");\n                    }\n                    count = 1;\n                    temp = list[y];\n                }\n            }\n            if(count%2 != 0)\n            {\n                answer.append(temp + \" \");\n            }\n            \n            output.write(\"Case #\" + (i+1) + \": \" + answer.toString().trim() + \"\\n\");\n        }\n        \n        input.close();\n        output.close();\n    }\n    \n}"}
{"idx":"987","func":"class B{\n  public static void main(String[] args) throws Exception{\n    BufferedReader in = new BufferedReader(new FileReader(\"B-large.in\"));\n    int t = Integer.parseInt(in.readLine());\n    String[] input = new String[t];\n    int[] sizes = new int[t];\n    PrintWriter out = new PrintWriter(\"output.txt\");\n    for (int i = 0; i < t; i++){\n    int size = Integer.parseInt(in.readLine());\n    sizes[i] = size;\n    String temp = in.readLine();\n    for(int j = 1;j<2*size-1;j++){\n            temp+= \" \"+in.readLine();\n    }\n    input[i] = temp;\n    }\n    for(int i = 0;i<t;i++){\n    int n = sizes[i];\n    String j = input[i];\n    int[] list = new int[2501];\n    for(int i2 = 0;i2<2501;i2++){\n        list[i2] = 0;\n    }\n    String[] lst = j.split(\" \");\n    int l = lst.length;\n    for(int i1 = 0;i1<l;i1++){\n        int temp = Integer.parseInt(lst[i1]);\n        list[temp]++;\n    }\n    int[] ans = new int[n];\n    int count = 0;\n    int i3 = 0;\n    while(count<n){\n        i3++;\n        if(list[i3]%2==1){\n        ans[count] = i3;\n        count++;\n        }\n    }\n    Arrays.sort(ans);\n    String res = \"\";\n    for(int d = 0;d<n-1;d++){\n        res+=ans[d]+\" \";\n    }\n    res+=ans[n-1];\n    String output = res;\n    out.println(\"Case #\"+(i+1)+\": \"+output);\n    }\n    out.close();\n    }\n}"}
{"idx":"988","func":"class ProblemA {\n    static final String PROBLEM = \"rankfile\";\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        Scanner s = new Scanner(new File(PROBLEM+\".in\"));\n        int n = s.nextInt();\n        s.nextLine();\n        \n        FileWriter fw = new FileWriter(new File(PROBLEM+\".out\"));\n        for (int i=0; i<n; i++) {\n            int size = s.nextInt();\n            ArrayList<ArrayList<Integer>> data = new ArrayList<ArrayList<Integer>>();\n            for (int j=0; j<size * 2 - 1; j++) {\n                ArrayList<Integer> thisSet = new ArrayList<Integer>();\n                for (int p=0; p<size; p++) {\n                    thisSet.add(s.nextInt());\n                }\n                data.add(thisSet);\n            }\n            \n            int[] distributions = new int[2501];\n                for (ArrayList<Integer> arr: data) {\n                    for (int x: arr) {\n                        System.out.print(x+\" \");\n                        distributions[x]++;\n                    }\n                    System.out.println();\n                }\n            int[] odd = new int[size * size];\n            int oddCount = 0;\n            for (int p=0; p<distributions.length; p++) {\n                if (distributions[p] % 2 == 1) {\n                    odd[oddCount++] = p;\n                }\n            }\n            for (int p=0; p<odd.length; p++) {\n                if (odd[p] == 0) {\n                    odd[p] = Integer.MAX_VALUE;\n                }\n            }\n            Arrays.sort(odd);\n            String output = \"\";\n            for (int p=0; p<size; p++) {\n                output+= \" \"+odd[p];\n            }\n            fw.write(\"Case #\"+(i+1)+\":\"+output+\"\\n\");\n        }\n        \n        \n        \/\/fw.write(\"\"+answer);\n        fw.close();\n        s.close();\n    }\n\n}"}
{"idx":"989","func":"class Q2 {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader bf = new BufferedReader(new FileReader(\"input.in\"));\n        String count = null;\n        FileWriter fw = new FileWriter(\"output.out\");  \n        count = bf.readLine();\n        ArrayList<Integer> times = new ArrayList<Integer>();\n        for (int i = 0; i < Integer.parseInt(count); i++) {\n                times.clear();\n                for (int i1 = 0; i1 < 2501 ;i1++) {\n                    Integer a = new Integer(0);\n                    times.add(i1, a);\n                }\n                Integer n = Integer.parseInt(bf.readLine());\n                for (int i2 = 1; i2 < 2*n; i2++) {\n                    String lines = bf.readLine();\n                    String []nums = lines.split(\" \");\n                    for (int i1 = 0; i1 < nums.length; i1++) {\n                        Integer temp = Integer.parseInt(nums[i1]);\n                        times.set(temp, times.get(temp) + 1);\n                    }\n                }\n                String buffers = \"\";\n                for (Integer i1 = 0; i1 < 2501; i1 ++) {\n                    if (times.get(i1) % 2 != 0) {\n                        buffers += i1.toString() + \" \";\n                    }\n                }\n\n                fw.write(\"Case #\" + (i + 1) + \": \" + buffers + \"\\n\");\n\n        }\n        bf.close();\n        fw.close();\n    }\n}"}
{"idx":"990","func":"class B {\n\n    public static void main(String[] args) {\n\n\/\/        String in = \"\/Users\/Moshin\/Code Jam\/\/small.in\";\n\/\/        String out = \"\/Users\/Moshin\/Code Jam\/small.out\";\n        String in = \"\/Users\/Moshin\/Code Jam\/large.in\";\n        String out = \"\/Users\/Moshin\/Code Jam\/large.out\";\n    \n        try {\n\n            BufferedReader bufferedReader = new BufferedReader(new FileReader(in));\n            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(out));\n\n            \/\/ Total number of test cases\n            int noOfTestCases = Integer.valueOf(bufferedReader.readLine());\n            \n            \n        \n            for (int t = 0; t < noOfTestCases; t++){\n                \n                List<Integer> distinctHeights = new ArrayList<>();\n                Map<Integer,Integer> heightCounts = new HashMap<>();\n                List<Integer> resultArray = new ArrayList<>();\n                \n                int n = Integer.parseInt(bufferedReader.readLine());\n                int l = 2*n-1;\n                for(int i=0; i<l; i++){\n                    \n                    String line = bufferedReader.readLine();\n                    String[] heights = line.split(\" \");\n                    \n                    for(String tempHeight:heights) {\n                        \n                        int height = Integer.valueOf(tempHeight);\n                        \n                        if(distinctHeights.contains(height)) heightCounts.put(height,heightCounts.get(height)+1);\n\n                        else {\n                        \n                            distinctHeights.add(height);\n                            heightCounts.put(height, 1);\n                        \n                        }\n                    }\n                    \n                }\n                \n                for(Integer tempHeight:distinctHeights)\n                    if(heightCounts.get(tempHeight)%2==1)\n                        resultArray.add(tempHeight);\n                \n                Collections.sort(resultArray);\n                \n                \n                bufferedWriter.write(\"Case #\" + (t + 1) + \": \" + resultArray.toString().replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\",\",\"\") + \"\\n\");\n\n                \n\n            }\n                \n            bufferedReader.close();\n            bufferedWriter.close();\n\n        }catch (Exception exception) {\n            \n            exception.printStackTrace();\n        \n        }\n\n    }\n\n\n\n}"}
{"idx":"991","func":"class B {\n    \n    public static void main(String[] args) throws FileNotFoundException {\n    try (Scanner sc =\n         new Scanner(new BufferedReader(new FileReader(new File(args[0]))))\n         ) {\n        int iterations = sc.nextInt();\n        for (int i = 0; i < iterations; i++) {\n            int N = sc.nextInt();\n            Map<Integer, Integer> m = new HashMap<>(); \/\/ height, count\n            int max = N * N * 2 - N;\n            for (int j = 0; j < max; j++) {\n            int nxt = sc.nextInt();\n            if (!m.containsKey(nxt)) {\n                m.put(nxt, 1);\n            } else {\n                m.put(nxt, m.get(nxt) + 1);\n            }\n            }\n            Set<Integer> anws = new TreeSet<>();\n            String ans = \"\";\n            for (Integer k : m.keySet()) {\n            if (m.get(k) % 2 != 0)\n                anws.add(k);\n            }\n            \n            Integer[] is = new Integer[N];\n            Arrays.sort(anws.toArray(is));\n\n            for (int iis : is) {\n            ans += \" \" + iis;\n            }\n            System.out.printf(\"Case #%d:%s\\n\", i + 1, ans);\n        }\n        }\n    }\n\n}"}
{"idx":"992","func":"class code2 {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n            int j = in.nextInt();\n            System.out.print(\"Case #\"+i+\": \");\n            ArrayList<Integer> list = new ArrayList();\n            for(int a = 0; a<j*(2*j-1); a++) {\n                list.add(in.nextInt());\n            }\n            Collections.sort(list);\n            int tmp = 0;\n            for(int a = 0; a<list.size(); a++) {\n                if(tmp != list.get(a)) {\n                    int count = Collections.frequency(list, list.get(a));\n                    if(count %2 != 0) {\n                        System.out.print(list.get(a)+\" \");\n                    }\n                    tmp = list.get(a);\n                }\n            }\n            System.out.println();\n        }\n\n    }\n\n}"}
{"idx":"993","func":"class RankFile {\n\n    public RankFile () {\n    }\n\n    public static void main(String [] argv) {\n        RankFile t = new RankFile();\n        try {\n            \/\/BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"B-small-attempt0.in\")));\n            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"B-large.in\")));\n            \/\/BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"test.in\")));\n            String line = br.readLine();\n            int numCases = Integer.parseInt(line);\n            int N = 0;\n            for(int i=0; i<numCases; i++) {\n                N = Integer.parseInt(br.readLine());\n                int [] n = new int [2501];\n                for(int j=0; j<2*N-1; j++) {\n                    line = br.readLine();\n                    String [] tokens = line.split(\" \"); \n                    for(int k=0;k<N;k++)\n                        n[ Integer.parseInt(tokens[k]) ] ++;\n                }\n                StringBuffer sb = new StringBuffer();\n                for(int k=0; k<2501; k++) {\n                    if(n[k] % 2 == 1)\n                        sb.append(Integer.toString(k) + \" \");\n                }\n                System.out.println(\"Case #\" + (i+1) + \": \" +sb.toString().trim() );\n            }\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"994","func":"class Main2 {\n    \n    public static int T, N, M;\n    public static int[][] map;\n    public static int[][] input;\n    public static int[] minIndex;\n    public static boolean[] visited;\n    public static int cnt;\n    \n    public static void main(String[] arg) throws IOException {\n         \n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringBuffer sb = new StringBuffer();\n        \n        T = Integer.parseInt(br.readLine());\n        \n        for(int t = 1 ; t <= T ; t++){\n            sb.append(\"Case #\"+t+\":\" );\n            N = Integer.parseInt(br.readLine());\n            M = 2*N-1;\n            input = new int[M][N];\n            int[] height = new int[2501];  \n            \n            for(int i = 0 ; i < M ; i++){\n                StringTokenizer st = new StringTokenizer(br.readLine());\n                \n                for(int j = 0 ; j < N ; j++){\n                    input[i][j] = Integer.parseInt(st.nextToken());\n                    height[input[i][j]] += 1;\n                }\n            }\n            \n            for(int i = 0 ; i <= 2500 ; i++){\n                if(height[i]%2 == 1){\n                    sb.append(\" \").append(i);\n                }\n            }\n            sb.append(\"\\n\");\n        }\n        \n        System.out.println(sb);\n    }\n}"}
{"idx":"995","func":"class RankFile {\n     public static void main(String[] args) {\n            Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n         \/\/Scanner in = new Scanner(System.in);\n            int loops = in.nextInt();\n            \/\/String line = in.nextLine();\n            for (int loop = 1; loop <= loops; ++loop) {\n               int n = in.nextInt();\n               \/\/ArrayList<ArrayList<Integer>> lines = new ArrayList<ArrayList<Integer>>();\n               TreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();\n               \n               for (int i = 0; i < 2*n - 1; i++) { \n                   \/\/lines.add(new ArrayList<Integer>());\n                   for (int j = 0; j < n; j++) {\n                       int temp = in.nextInt();\n                       if (!map.containsKey(temp)) \n                           map.put(temp, 0);\n                       int value = map.get(temp);\n                       map.put(temp, value+1);\n                       \/\/lines.get(i).add(temp);\n                   }\n               }\n               \n               TreeSet<Integer> set = new TreeSet<Integer>();\n               for (Map.Entry<Integer, Integer> entry: map.entrySet()) {\n                   if (entry.getValue() % 2 == 1)\n                       set.add(entry.getKey());\n               }\n               \n               \/\/lines.sort(Comparator.comparing(k -> k.get(0)));\n               \n               StringBuilder builder = new StringBuilder();\n               for (int value : set) {\n                   builder.append(\" \" + value);\n               }\n             \n                   String out = String.format(\"Case #%1$s:%2$s\", loop, builder.toString());\n                   System.out.println(out);\n            }\n            in.close();\n     }\n}"}
{"idx":"996","func":"class B {\n    public static void main(String[] args) throws IOException {\n        if (args == null || args.length == 0) {\n            System.err.println(\"dude, I need to know the input file name\");\n            System.exit(-1);\n        }\n\n        BufferedReader br = new BufferedReader(new FileReader(args[0]));\n        try {\n            String input = br.readLine();\n            \n            \/\/ first line is # of cases.\n            int numCases = Integer.parseInt(input);\n            input = br.readLine();\n            for (int i = 1; i <= numCases; i++) {\n                int n = Integer.parseInt(input); \/\/n\n                List<String> lists = new ArrayList<String>(2*n-1);\n                for (int j = 1; j < 2*n; j++) {\n                    lists.add(br.readLine());\n                }\n                Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n                for (int i2= 0; i2< lists.size(); i2++) {\n                    @SuppressWarnings(\"resource\")\n                    Scanner ss = new Scanner(lists.get(i2));\n                    for (int j = 0; j < n; j++) {\n                        int found = ss.nextInt();\n                        if (map.containsKey(found)) {\n                            int val = map.get(found)+1;\n                            map.put(found, val);\n                        } else {\n                            map.put(found, 1);\n                        }\n                    }\n                }\n                List<Integer> out = new ArrayList<Integer>(n);\n                for (Integer in : map.keySet()) {\n                    if ((map.get(in).intValue()&1) != 0) out.add(in);\n                }\n                Collections.sort(out);\n                List<Integer> missing = out;\n                StringBuilder output = new StringBuilder(\"Case #\");\n                output.append(i).append(\":\");\n                for (int i1 =0; i1 < missing.size(); i1++) {\n                    output.append(\" \").append(missing.get(i1));\n                }\n                \n                System.out.println(output.toString());\n                input = br.readLine();\n            }\n        } finally {\n            br.close();\n        }\n    }\n}"}
{"idx":"997","func":"class RankAndFile {\n  public static void main(String []args) {\n    Scanner in = new Scanner(System.in);\n    final int T = in.nextInt();\n    for (int i = 1; i <= T; i++) {\n      final int N = in.nextInt();\n      int []h = new int[2501];\n      for (int j = 0; j < (2 * N - 1) * N; j++)\n        h[in.nextInt()]++;\n      System.out.print(\"Case #\" + i + \":\");\n      for (int j = 0; j < h.length; j++)\n        if (h[j] % 2 == 1)\n          System.out.print(\" \" + j);\n      System.out.println();\n    }\n  }\n}"}
{"idx":"998","func":"class Square {\n\n    public static void main(String[] args) throws IOException {\n        String filename = \"C:\/Users\/Administrator\/Desktop\/B-small-attempt1.in\";\n        FileReader fr = new FileReader(filename);\n        BufferedReader br =  new BufferedReader(fr);\n        \n        FileWriter fw = new FileWriter(\"C:\/Users\/Administrator\/Desktop\/out_b.txt\");\n        BufferedWriter bw = new BufferedWriter(fw);\n        \n        String line;\n        String inputs[] = new String[10000000];\n        int N = 0;\n        while ( (line = br.readLine()) != null){\n            inputs[N] = line;\n            System.out.println(inputs[N]);\n            N++;\n        }\n        int T = Integer.valueOf(inputs[0]);\n        int case_num = 1;\n        for (int i=1;i<N;){\n            int n = Integer.valueOf(inputs[i]);\n            i++;\n            \/\/ArrayList<String> list = new ArrayList<String>();\n            HashMap<String, Integer> map = new HashMap<String, Integer>();\n            for (int k=0;k<2*n-1;i++,k++){\n                String array[] = inputs[i].split(\" \");\n                \n                for (int m=0;m<array.length;m++){\n                    if (map.containsKey(array[m])){\n                        int times = map.get(array[m]);\n                        map.put(array[m], times+1);\n                    }\n                    else{\n                        map.put(array[m], 1);\n                    }\n                }\n            }\n            ArrayList<String> list = new ArrayList<String>();\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                String key = entry.getKey().toString();\n                int times = entry.getValue();\n                \/\/System.out.println(key+\":::::\"+times);\n                if (times%2 != 0)\n                    list.add(key);\n            }\n            int array[] = new int [list.size()];\n            for (int j=0;j<array.length;j++)\n                array[j] = Integer.valueOf(list.get(j));\n            Arrays.sort(array);\n            bw.write(\"Case #\"+case_num+\": \");\n            for (int j=0;j<array.length;j++){\n                if (j<array.length-1)\n                    bw.write(array[j]+\" \");\n                else\n                    bw.write(array[j]+\"\\n\");\n            }\n            case_num++;\n        }\n        bw.flush();\n    }\n\n}"}
{"idx":"999","func":"class B {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int i = 1; i<= T; i++) {\n            int N = sc.nextInt();\n            int[] in = new int[2501];\n            for(int j = 0; j<2*N-1; j++) {\n                for(int k = 0; k<N; k++) {\n                    in[sc.nextInt()]++;\n                }\n            }\n            String s = \"Case #\" + i + \":\";\n            for(int j = 1; j<2501; j++) {\n                if(in[j]%2 != 0) {\n                    s = s + \" \" + j;\n                }\n            }\n            System.out.println(s);\n            \n        }\n    }\n}"}
{"idx":"1000","func":"class RankAndFile {\n    public static void main(String[] args) throws FileNotFoundException {\n        File file = new File(args[0]);\n        Scanner scanner = new Scanner(file);\n        long nCases = scanner.nextLong();\n        scanner.nextLine();\n        for (int i = 1; i <= nCases; i++) {\n            long n = scanner.nextLong();\n            scanner.nextLine();\n            Map<Integer, Integer> counter = new HashMap<>();\n            for(int j = 0; j < 2 * n - 1; j++) {\n                for(int k = 0; k < n; k++) {\n                    int value = scanner.nextInt();\n                    Integer count = counter.get(value);\n                    if(count == null) {\n                        counter.put(value, 1);\n                    } else {\n                        counter.put(value, count + 1);\n                    }\n                }\n            }\n            SortedSet<Integer> out = new TreeSet<>();\n            for(Integer key : counter.keySet()) {\n                if(counter.get(key) % 2 == 1) {\n                    out.add(key);\n                }\n            }\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Case #\").append(i).append(\":\");\n            out.stream().forEach(v -> sb.append(\" \").append(v));\n            System.out.println(sb.toString());\n        }\n    }\n}"}
{"idx":"1001","func":"class g2 {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n            \n          int n = in.nextInt();\n          \/\/System.out.println(n);\n          \n          HashMap<Integer, Integer> map=new HashMap<>();\n          for(int j=0;j<2*n-1;j++){\n              for(int k=0;k<n;k++){\n                  int temp=in.nextInt();\n                  if(!map.containsKey(temp)){\n                      map.put(temp, 1);\n                  }else{\n                      map.put(temp, map.get(temp)+1);\n                  }\n              }\n          }\n          \n          PriorityQueue<Integer> q=new PriorityQueue<>();\n          for(Entry<Integer, Integer> s: map.entrySet()){\n              if(s.getValue()%2==1){\n                  q.add(s.getKey());\n              }\n          }\n          \n         \n          System.out.print(\"Case #\" + i + \": \" );  \n         \n          int temp;\n          for(temp=q.poll();!q.isEmpty();temp=q.poll()){\n              System.out.print(temp+\" \");\n          }\n          System.out.print(temp+\"\\n\");\n          \n        }\n      }\n}"}
{"idx":"1002","func":"class ProblemB {\n\nstatic final String FILENAME = \"B-large\";\nstatic final String IN = FILENAME + \".in\";\nstatic final String OUT = FILENAME + \".out\";\n\/\/static PrintStream out = System.out;\nstatic Scanner sc;\nstatic PrintWriter out;\n\npublic static void main(String args[]) throws Exception {\n    sc = new Scanner(new File(IN));\n    out = new PrintWriter(OUT);\n    ProblemB r = new ProblemB();\n    \/\/ out = new PrintStream(new FileOutputStream(OUT));\n    int t = ProblemB.sc.nextInt();\n    for (int i = 1; i <= t; i++) {\n        ProblemB.out.print(\"Case #\" + i + \": \");\n        int ans = 0;\n        int n = ProblemB.sc.nextInt();\n        int marks[] = new int[2501];\n        \n        for (int i1 = 0; i1 < n*2 - 1; ++i1) {\n            for (int j = 0; j < n; ++j) {\n                int tmp = ProblemB.sc.nextInt();\n                marks[tmp] ++;\n            }\n        }\n        \n        for (int i2 = 1; i2 <= 2500; i2++) {\n            if (marks[i2]%2 != 0) {\n                ProblemB.out.print(i2);\n                ProblemB.out.print(\" \");\n            }\n        }\n        \n        ProblemB.out.println();\n    }\n    ProblemB.sc.close();\n    ProblemB.out.close();\n}\n\n}"}
{"idx":"1003","func":"class rank {\n\n    public static void main (String[] args) {\n\n    Scanner in = new Scanner(System.in);\n\n    int count = in.nextInt();\n    for (int l = 0; l < count; l++) {\n\n        int n = in.nextInt();\n\n        int[] array = new int[2501];\n        for (int i = 0; i < 2501; i++) {\n        array[i] = 0;\n        }\n\n        for (int j = 0; j < ((2*n*n)-n); j++) {\n        int next = in.nextInt();\n        array[next] = array[next]+1;\n        }\n\n        System.out.print(\"Case #\" + (l+1) + \":\");\n\n        for (int i = 0; i < 2501; i++) {\n        if (array[i]%2 == 1)\n            System.out.print(\" \" + i);\n        }\n\n        System.out.println();\n\n\n    }\n\n    }\n\n}"}
{"idx":"1004","func":"class rankandfile {\n\n    public static void main(String [] args) {\n        String filePath = \"C:\\\\Users\\\\Victor\\\\IdeaProjects\\\\googleJam\\\\files\\\\B-large (1).in\";\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(filePath));\n            BufferedWriter bw = new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\Victor\\\\IdeaProjects\\\\googleJam\\\\files\\\\rankandfileresults.txt\"));\n            int count = 1;\n            Integer t = Integer.parseInt(br.readLine());\n\n            for (int tt =0; tt<t; tt++){\n                int[] heightArray = new int[2500];\n                Integer n = Integer.parseInt(br.readLine());\n                ArrayList<Integer> missing = new ArrayList<Integer>();\n\n                StringBuilder sb = new StringBuilder();\n                for (int nn = 0; nn < 2*n-1; nn++) {\n                    String list = br.readLine();\n                    for (int nnn = 0; nnn < n; nnn++) {\n                        Integer height = Integer.parseInt(list.split(\"\\\\s+\")[nnn]);\n                        heightArray[height-1] = heightArray[height-1] + 1;\n                    }\n                }\n                for (int i=0; i< heightArray.length; i++) {\n                    if (heightArray[i]%2 != 0 ){\n                        missing.add(i+1);\n                    }\n                }\n\n                Collections.sort(missing);\n                for (Integer height : missing){\n                    sb.append(height);\n                    sb.append(\" \");\n                }\n                bw.write(\"Case #\" + count + \": \" + sb.toString());\n                count++;\n                bw.newLine();\n\n\n            }\n            br.close();\n            bw.close();\n\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n\n    }\n}"}
{"idx":"1005","func":"class RankAndFile {\n\n  public static void main(String args[]) {\n    Scanner in = new Scanner(System.in);\n    int T = Integer.parseInt(in.nextLine());\n\n    for (int i = 1; i <= T; i++) {\n      Set<Integer> odd = new HashSet<>();\n      int N = Integer.parseInt(in.nextLine());\n      for (int j = 0; j < 2 * N - 1; j++) {\n        for (int k = 0; k < N; k++) {\n          int x = in.nextInt();\n          if (odd.contains(x)) {\n            odd.remove(x);\n          } else {\n            odd.add(x);\n          }\n        }\n\n        in.nextLine();\n      }\n\n      StringBuilder sb = new StringBuilder();\n      for (int x : odd.stream().sorted().collect(Collectors.toList())) {\n        sb.append(x);\n        sb.append(\" \");\n      }\n\n      sb.deleteCharAt(sb.length() - 1);\n      System.out.printf(\"Case #%d: %s%n\", i, sb.toString());\n    }\n\n    in.close();\n  }\n}"}
{"idx":"1006","func":"class test14 {\n    public static void main(String[] arg) throws Exception{\n        FileInputStream fis=new FileInputStream(\"B-large.in\");  \n        System.setIn(fis); \n        PrintStream ps=new PrintStream(new FileOutputStream(\"Output2\"));  \n        System.setOut(ps);\n        Scanner sc = new Scanner(System.in);\n        int N =sc.nextInt();        \n        for(int i=0;i<N;i++){\n            int numsize = sc.nextInt();\n            int[] nums = new int[(2*numsize-1)*numsize];\n            for(int j=0;j<nums.length;j++){\n                nums[j]=sc.nextInt();\n            }\n            System.out.print(\"Case #\"+(i+1)+\": \");\n            HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();\n            for(int i1 = 0; i1 < nums.length; i1++){\n                if(!map.containsKey(nums[i1])){\n                    map.put(nums[i1],1);\n                }else{\n                    map.put(nums[i1],map.get(nums[i1])+1);\n                }\n            }\n            Iterator it= map.keySet().iterator();\n            int sizeone = 0;\n            while(it.hasNext())\n            {\n                int key = (int)it.next();\n                if(map.get(key)%2==1){sizeone+=1;}\n            }\n            int[] res1=new int[sizeone];\n            int k=0;\n            Iterator it2= map.keySet().iterator();\n            while(it2.hasNext())\n            {\n                int key2 = (int)it2.next();\n                if(map.get(key2)%2==1){\n                    res1[k]=key2;\n                    ++k;\n                }\n            }\n            int[] res=res1;\n            Arrays.sort(res);\n            for(int j=0;j<res.length;j++){\n                System.out.print(res[j]+\" \");\n            }\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"1007","func":"class R1B {\n    public static void main(String args[]){\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int t=1;t<=T;t++){\n            int N = sc.nextInt();\n            int[] counts = new int[2501];\n            for(int i=0;i<N*(2*N-1);i++){\n                counts[sc.nextInt()]++;\n            }\n            System.out.print(\"Case #\"+t+\":\");\n            for(int i=0;i<2501;i++){\n                if(counts[i]%2==1){\n                    System.out.print(\" \"+i);\n                }\n            }\n            System.out.println();\n        }\n        sc.close();\n    }\n}"}
{"idx":"1008","func":"class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(\n                System.in)));\n        int testCases = in.nextInt();\n        for (int i = 1; i <= testCases; i++) {\n            int N = in.nextInt();\n\n            Map<Integer, Boolean> temp = new HashMap<Integer, Boolean>();\n            for (int j = 1; j <= (2 * N - 1); j++) {\n                for (int k = 1; k <= N; k++) {\n                    int soldHeight = in.nextInt();\n                    if (temp.containsKey(soldHeight)) {\n                        temp.remove(soldHeight);\n                    } else {\n                        temp.put(soldHeight, true);\n                    }\n                }\n            }\n\n            List<Integer> sortedKeys = new ArrayList<Integer>(temp.keySet());\n            Collections.sort(sortedKeys);\n            \n            String missingRowOrCol = \"\";\n\n            for (int k = 0; k < sortedKeys.size();k++) {\n                missingRowOrCol += \" \" + sortedKeys.get(k);\n            }\n\n            System.out.println(\"Case #\" + i + \":\" + missingRowOrCol);\n        }\n    }\n}"}
{"idx":"1009","func":"class B\n{\n    public static void main(String[] args) throws IOException {\n        long start = System.currentTimeMillis();\n        Scanner scanner = new Scanner(new File(\".\/input_large.txt\"));\n        PrintWriter writer = new PrintWriter(\".\/output_large.txt\");\n        int nTests = scanner.nextInt();\n        scanner.nextLine(); \/\/skip line (i.e., next line)\n        \n        int bigN;\n        int numSheets;\n        \n        int[] possibleHeights; \n        \n        for (int i = 0; i < nTests; i++) {\n            bigN = scanner.nextInt();\n            numSheets = 2*bigN - 1;\n            \n            possibleHeights = new int[2501];\n            \n            writer.print(\"Case #\" + (i+1) + \":\");\n            \n            for(int j = 0; j < numSheets; j++)\n            {\n                scanner.nextLine(); \/\/skip line (i.e., next line)\n                for(int k = 0; k < bigN; k++)\n                {\n                    possibleHeights[scanner.nextInt()]++;\n                }\n            }\n            \n            for(int height = 0; height < possibleHeights.length; height++)\n            {\n                if(possibleHeights[height]%2 == 1) writer.print(\" \" + height);\n            }\n             \n            writer.println(); \/\/next line of output...\n        }\n        scanner.close();\n        writer.close();\n        long finish = System.currentTimeMillis();\n        System.out.println(\"Time=\" + (finish - start) + \"ms\");\n    }\n}"}
{"idx":"1010","func":"class Main\n{\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        \/\/-----------------------------------------------------------\n        int casos=Integer.parseInt(br.readLine()), N;\n        \n        String rta, aux[];\n        LinkedList<Integer> soldados=new LinkedList<Integer>(), segunda=new LinkedList<Integer>();\n        \n        for(int c=1; c<=casos; c++)\n        {\n            N=Integer.parseInt(br.readLine());\n            soldados.clear();\n            segunda.clear();\n            rta=\"\";\n            \n            for(int i=0; i<2*N-1; i++)\n            {\n                aux=br.readLine().split(\"\\\\s+\");\n                for(int j=0; j<N; j++)\n                    soldados.add(Integer.parseInt(aux[j]));\n            }\n            \n            Collections.sort(soldados);\n            while(!soldados.isEmpty())\n            {\n                int este=soldados.poll();\n                if(!soldados.isEmpty())\n                {\n                    int otro=soldados.peek();\n                    if(este==otro) soldados.poll();\n                    else segunda.add(este);\n                }\n                else segunda.add(este);\n            }\n            \n            rta=segunda.toString();\n            rta=rta.substring(1, rta.length()-1).replaceAll(\",\",\"\");\n            \n            System.out.printf(\"Case #%d: %s\\n\", c, rta);\n        }\n        \/\/-----------------------------------------------------------\n        br.close();\n    }\n}"}
{"idx":"1011","func":"class RandAndFile {\n\n    static int[][] matrix;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for(int testcase = 1; testcase <= t; testcase++) {\n\n            int n = sc.nextInt();\n            List<Integer> list = new ArrayList<Integer>();\n\n            \/\/each list\n            for(int a=0; a<n*2-1; a++) {\n\n                \/\/each element in the list\n                for(int b=0; b<n; b++) {\n                    list.add(sc.nextInt());\n                }\n\n            }\n\n            list.sort(new Comparator<Integer>() {\n                @Override\n                public int compare(Integer o1, Integer o2) {\n                    if(o1 > o2) return 1;\n                    else if(o1 < o2) return -1;\n                    else return 0;\n                }\n            });\n\n            List<Integer> answer = new ArrayList<Integer>();\n            int size = list.size();\n            int prev = list.get(0);\n            int count = 1;\n\n            for(int i=1; i<size; i++) {\n                if(list.get(i) != prev) {\n\n                    if(count % 2 == 1) {\n                        answer.add(prev);\n                    }\n\n                    count = 1;\n                    prev = list.get(i);\n\n                } else {\n                    count++;\n                }\n            }\n\n            if(count % 2 == 1) {\n                answer.add(prev);\n            }\n\n            System.out.printf(\"Case #%d:\", testcase);\n            for(int j=0; j<answer.size(); j++) {\n                System.out.print(\" \" + answer.get(j));\n            }\n            System.out.println();\n\n\n        }\n    }\n}"}
{"idx":"1012","func":"class B1A {\n    public static void main(String[]args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        for(int t = 1; t <= T; t++){\n            int N = Integer.parseInt(br.readLine());\n            TreeMap<Integer, Integer> count = new TreeMap<Integer, Integer>();\n            for(int i = 0; i < N*2-1; i++){\n                String[] split = br.readLine().split(\" \");\n                for(String s : split){\n                    int num = Integer.parseInt(s);\n                    if(count.containsKey(num)){\n                        count.put(num, count.get(num)+1);\n                    }\n                    else{\n                        count.put(num, 1);\n                    }\n                }\n            }\n            System.out.print(\"CASE #\" + t + \":\");\n            for(Map.Entry<Integer, Integer> e : count.entrySet()){\n                if(e.getValue() % 2 == 1) System.out.print(\" \"+ e.getKey());\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1013","func":"class ProblemB {\n\n    private static final String PROBLEM_CODE = \"B\";\n    private static final String INPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-large.in\", PROBLEM_CODE);\n\/\/    private static final String INPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-small-attempt0.in\", PROBLEM_CODE);\n    private static final String OUTPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-out%s.txt\", PROBLEM_CODE, System.currentTimeMillis());\n\n\n    private static final String FORMAT = \"Case #{0}: {1}\";\n\n    public static void main(String[] args) {\n        ProblemB app = new ProblemB();\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(ProblemB.INPUT_PATH))))) {\n            List<String> answerList = new ArrayList<String>();\n            int testCaseCount = Integer.parseInt(br.readLine());\n            for (int testCaseIndex = 0; testCaseIndex < testCaseCount; testCaseIndex++) {\n                \n                int n = Integer.parseInt(br.readLine());\n                int[][] elem = new int[2*n-1][n];\n                for(int i = 0 ; i < 2*n-1;i++) {\n                    String[] line = br.readLine().split(\" \");\n                    for(int j = 0 ; j < n; j++) {\n                        elem[i][j] = Integer.parseInt(line[j]);\n                    }\n                }\n                Map<Integer, Integer> map = new HashMap<>();\n                for(int[] eA: elem) {\n                    for(int e : eA) {\n                        Integer num = map.get(e);\n                        if(num == null) {\n                            num = 0;\n                        }\n                        num++;\n                        map.put(e, num);\n                    }\n                }\n                \n                Map<Integer, Integer> useMap = new TreeMap<>();\n                for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n                    if(entry.getValue() % 2 == 1) {\n                        Integer useNum = useMap.get(entry.getKey());\n                        if(useNum == null) {\n                            useNum = new Integer(0);\n                        }\n                        useNum++;\n                        useMap.put(entry.getKey(), useNum);\n                    }\n                }\n                \n                StringBuilder sb = new StringBuilder();\n                for(int k : useMap.keySet()) {\n                    int v = useMap.get(k);\n                    for(int i = 0 ; i < v; i++) {\n                        sb.append(k + \" \");\n                    }\n                }\n                String answer = sb.substring(0, sb.length() - 1); \n                answerList.add(answer);\n                \n                System.out.printf(\"%s: %s : %s \\r\\n\", testCaseIndex + 1, elem, answer);\n            }\n            try (BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File (ProblemB.OUTPUT_PATH))))){\n                for (int i = 0; i < answerList.size(); i++) {\n                    Object[] ans = new Object[2];\n                    ans[0] = String.valueOf(i + 1);\n                    ans[1] = answerList.get(i);\n                    String write = MessageFormat.format(ProblemB.FORMAT, ans);\n                    bufferedWriter.write(write);\n                    bufferedWriter.newLine();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n\/\/        int n = 3;\n\/\/        int[][] elem= new int[][]{\n\/\/            {2, 3, 5},\n\/\/            {2, 3, 4},\n\/\/            {1, 2, 3},\n\/\/            {3, 5, 6},\n\/\/            {1, 2, 3},\n\/\/        };\n\/\/        System.out.println(app.solveProblem(n, elem));\n        \n        \n    }\n}"}
{"idx":"1014","func":"class B {\n\n    public static void main(String[] args) {\n        Scanner in = null;\n        B b = new B();\n        try {\n            in = new Scanner(System.in);\n            int count = in.nextInt();\n            for (int test = 1; test <= count; test++) {\n                int N = in.nextInt();\n                int[][] lists = new int[2 * N - 1][N];\n                for (int j = 0; j < 2 * N - 1; j++) {\n                    for (int k = 0; k < N; k++) {\n                        lists[j][k] = in.nextInt();\n                    }\n                }\n                HashMap<Integer, Integer> map = new HashMap<>();\n                int[] result1 = new int[N];\n                StringBuilder res = new StringBuilder();\n                int pivot = 0;\n                for (int j = 0; j < lists.length; j++) {\n                    for (int k = 0; k < N; k++) {\n                        if (map.containsKey(lists[j][k])) {\n                            int count1 = map.get(lists[j][k]);\n                            map.put(lists[j][k], count1 + 1);\n                        } else {\n                            map.put(lists[j][k], 1);\n                        }\n                    }\n                }\n                for (Integer key : map.keySet()) {\n                    int count2 = map.get(key);\n                    if (count2 % 2 != 0) {\n                        result1[pivot] = key;\n                        pivot++;\n                    }\n                }\n                Arrays.sort(result1);\n                for (int i = 0; i < N; i++) {\n                    res.append(\" \" + result1[i]);\n                }\n                String result = res.toString();\n                System.out.println(\"Case #\" + test + \":\" + result);\n            }\n            in.close();\n        } catch (Exception e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1015","func":"class Rank{\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) {\n        \/\/ TODO code application logic here\n        Scanner s=new Scanner(System.in);\n        int t=s.nextInt();\n        for(int f=1;f<=t;f++)\n        {\n            int n=s.nextInt();\n            \/\/int[] arr=new int[(2*n-1)*3];\n            int[] arr1=new int[2501];\n            \n            int len=(2*n-1)*n;\n            for(int i=0;i<len;i++)\n            {             \n                arr1[s.nextInt()]++;\n            }\n            System.out.print(\"Case #\"+f+\": \");\n            for(int i=0;i<2501;i++)\n            {\n                if(arr1[i]%2!=0)\n                    System.out.print(i+\" \");\n            }\n            System.out.println();\n        }\n        \n    }\n    \n}"}
{"idx":"1016","func":"class SolutionB {\n\n    private File input;\n    \n    private File output;\n    \n    private String inputSource = \"input\/B\/in.txt\";\n    \n    private String outputSource = \"output\/B\/out.txt\";\n\n    private int N;\n    \n    public static void main(String[] args) {\n        try {\n            SolutionB r = new SolutionB();\n            r.input = new File(r.inputSource);\n            Scanner s1 = new Scanner(r.input);\n            r.N = s1.nextInt();\n            Scanner s = s1;\n            r.output = new File(r.outputSource);\n            PrintWriter w1 = new PrintWriter(r.output);\n            PrintWriter w = w1;\n            for(int i = 1; i <= r.N; i++) {\n                int c = s.nextInt();\n                int[] p1 = new int[(2*c-1)*c+1];\n                p1[0] = c;\n                for(int i1=1; i1<=(2*c-1)*c;i1++) {\n                    p1[i1] = s.nextInt();\n                }\n                int[] p = p1;\n                int c1 = p[0];\n                int[] h = new int[2501];\n                for(int j=0; j<=2500; j++) {\n                    h[j] = 0;\n                }\n                for(int i1=1; i1<p.length; i1++) {\n                    h[p[i1]]++;\n                }\n                int[] sol1 = new int[c1];\n                int ind = 0;\n                for(int j=0; j<=2500; j++) {\n                    if(h[j]%2 != 0) {\n                        sol1[ind] = j;\n                        ind++;\n                    }\n                }\n                int[] sol = sol1;\n                w.print(\"Case #\" + i + \":\");\n                Arrays.stream(sol).forEach(s11 -> w.print(\" \" + s11));\n                w.println();\n            }\n            w.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"1017","func":"class B {\n\n    public static void main(String[] args) {\n        Scanner sc = null;\n        PrintWriter w = null;\n        try {\n            w = new PrintWriter(\n                    new BufferedWriter(\n                            new FileWriter(\"out-rankfile-l.txt\", false)));\n            sc = new Scanner(new File(\"B-large.in\"));\n\/\/             sc = new Scanner(\"1\\n\" +\n\/\/                     \"3\\n\" +\n\/\/                     \"1 2 3\\n\" +\n\/\/                     \"2 3 5\\n\" +\n\/\/                     \"3 5 6\\n\" +\n\/\/                     \"2 3 4\\n\" +\n\/\/                     \"1 2 3\\n\"\n\/\/             );\n\n            sc.useDelimiter(\" |\\n\");\n\n            int T = sc.nextInt();\n            for (int z = 0; z < T; z++) {\n                N = sc.nextInt();\n                sc.nextLine();\n                list = new ArrayList<>(2*N - 1);\n                for(int i=0;i< 2*N - 1;i++){\n                    String s = sc.nextLine();\n                    list.add(s.split(\" \"));\n                }\n                String result = \"\";\n                TreeSet<Integer> res = new TreeSet<>();\n                HashSet<String> set = new HashSet<>();\n                \n                for(String[] s: list){\n                    for(String ss : s){\n                        if(set.contains(ss)) set.remove(ss);\n                        else set.add(ss);\n                    }\n                }\n                \n                for(String ss: set){\n                    res.add(Integer.valueOf(ss));\n                }\n                \n                for(Integer in : res){\n                    result += (in + \" \");\n                }\n                result = result.substring(0, result.length() - 1);\n\n                \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n                String ress = result;\n                System.out.println(\"Case #\" + (z + 1) + \": \" + ress);\n                w.println(\"Case #\" + (z + 1) + \": \" + ress);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            sc.close();\n            w.close();\n        }\n    }\n\n    \/\/\/\/\/\/\/\/\/\/\/variables\n    static int N;\n\/\/    static int[] Ns;\n    static ArrayList<String[]>  list;\n\n}"}
{"idx":"1018","func":"class RankAndFile {\n\n    public static void main(String[] args) {\n        try\n        {\n            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n            int t = Integer.parseInt(f.readLine());\n            FileWriter fout = new FileWriter(\"rankandfile.out\");\n            for(int i = 1; i <= t; i++)\n            {\n                int n = Integer.parseInt(f.readLine());\n                int[] count = new int[2501];\n                for(int j = 0; j < 2*n - 1; j++)\n                {\n                    StringTokenizer st = new StringTokenizer(f.readLine());\n                    for(int k = 0; k < n; k++)\n                    {\n                        int height = Integer.parseInt(st.nextToken());\n                        count[height]++;\n                    }\n                }\n                StringBuffer s = new StringBuffer(\"\");\n                for(int j = 1; j <= 2500; j++)\n                {\n                    if(count[j]%2 == 1)\n                        s.append(j + \" \");\n                }\n                String output = s.toString().trim();\n                System.out.println(\"Case #\" + i + \": \" + output);\n                fout.write(\"Case #\" + i + \": \" + output + \"\\n\");\n            }\n            f.close();\n            fout.close();\n        }\n        catch(IOException e)\n        {\n            e.printStackTrace();\n        }\n\n\n    }\n\n}"}
{"idx":"1019","func":"class RP2 {\npublic static void main(String[] args)throws IOException{\n    \n     try {\n        \n         File newTextFile = new File(\"\/Users\/classxiaoli\/Downloads\/output.txt\");\n         FileWriter fw = new FileWriter(newTextFile);\n         BufferedReader reader = new BufferedReader(new FileReader(\"\/Users\/classxiaoli\/Downloads\/B-large.in\"));\n       \/\/  BufferedReader reader = new BufferedReader(new FileReader(\"\/Users\/classxiaoli\/Downloads\/input.in\"));\n      \/\/   BufferedReader reader = new BufferedReader(new FileReader(\"\/Users\/classxiaoli\/Downloads\/B-small-attempt0.in\"));\n         int i=0;\n        \n         String line;\n         reader.readLine();\n         \n         while ((line= reader.readLine()) != null) {\n             i++;\n             int a =Integer.parseInt(line);\n             Map<Integer,Integer> map=new HashMap<Integer,Integer>();\n             for(int j=0;j<2*a-1;j++){\n                 line= reader.readLine();\n                 for(String str:line.split(\" \")){\n                     int k=Integer.parseInt(str);\n                     if(!map.containsKey(k)) map.put(k, 1);\n                     else map.put(k,map.get(k)+1);\n                 }\n             }\n             ArrayList<Integer> r=new ArrayList<>();\n            \n             for(int k:map.keySet()){\n                 if(map.get(k)%2==1) r.add(k);\n             }\n             Collections.sort(r);\n             String result=\"\"+r.get(0);\n             for(int j=1;j<r.size();j++) result+=\" \"+r.get(j);\n            fw.write(\"Case #\"+i+\": \"+result+\"\\n\"); \n         \n         }\n         fw.close();\n      }finally {\n         \n      }\n}\n}"}
{"idx":"1020","func":"class RankAndFile {\n\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new File(\"\/home\/mbroshi\/Downloads\/B-large.in\"));\n        int numCases = sc.nextInt();\n        StringBuffer output = new StringBuffer();\n        for (int i = 1; i <= numCases; i++) {\n            int numRows = sc.nextInt();\n            int[] intCounts = new int[2501];\n            for (int h = 0; h < (2 * numRows - 1) * numRows; h++) {\n                int next = sc.nextInt();\n                intCounts[next] += 1;\n            }\n            List<Integer> missing = new ArrayList<>(numRows);\n            for (int j = 1; j < 2501; j++) {\n                if (intCounts[j] % 2 == 1) {\n                    missing.add(j);\n                }\n            }\n            Collections.sort(missing);\n            StringBuilder builder = new StringBuilder(2 * numRows);\n            for (int m : missing) {\n                builder.append(\" \").append(m);\n            }\n            output.append(String.format(\"Case #%d: %s\\n\", i, builder));\n        }\n        System.out.println(output);\n        FileWriter fw = new FileWriter(new File(\"\/home\/mbroshi\/Downloads\/B-large.out\"));\n        BufferedWriter bw = new BufferedWriter(fw);\n        bw.write(output.toString());\n        bw.close();\n    }\n}"}
{"idx":"1021","func":"class Solution {\n    public static void main(String[] args){ \n        Scanner scan = new Scanner(System.in);\n        int total = scan.nextInt();\n        for(int i=0; i<total;i++){\n            int sizeForList = scan.nextInt();\n            HashMap<Integer, Integer> values = new HashMap<Integer, Integer>();\n            for(int j=0;j<sizeForList*(sizeForList*2-1);j++){\n                int tempValue = scan.nextInt();\n                if(values.containsKey(tempValue)){\n                    int val = values.get(tempValue);\n                    val++;\n                    values.put(tempValue, val);\n                }\n                else{\n                    values.put(tempValue, 1);\n                }\n            }\n            int [] list = new int[sizeForList];\n            int index = 0;\n            for(Entry<Integer, Integer> tempVal : values.entrySet()) {\n                if(tempVal.getValue()%2==1){\n                    list[index] = tempVal.getKey();\n                    index++;\n                }\n            }\n            Arrays.sort(list);\n            System.out.print(\"Case #\" + (i+1) + \": \");\n            for(int j=0;j<list.length;j++){\n                if(j==0){\n                    System.out.print(list[j]);\n                }\n                else\n                {\n                    System.out.print(\" \"+list[j]);\n                }\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1022","func":"class B\n{\n    public static void main(String ... orange) throws Exception\n    {\n        \/\/System.setIn(new FileInputStream(\"B-small-attempt0.in\"));\n        \/\/System.setOut(new PrintStream(new File(\"B-small-output-file.txt\")));\n\n\n        System.setIn(new FileInputStream(\"B-large.in\"));\n        System.setOut(new PrintStream(new File(\"B-large-output-file.txt\")));\n\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n\n\n\n        for (int n = 0; n < numCases; n++)\n        {\n\n            \/\/String s = input.next();\n            \/\/long N = input.nextLong();\n            int N = input.nextInt();\n\n\n\n            \/\/        System.out.printf(\"Case #%d: INSOMNIA\\n\", n + 1);\n\n        int a;\n        int[] b= new int[2501];\n        int[] c= new int[N];\n\n        for(int j=0; j<2*N-1; j++){\n            for(int k=0; k<N; k++){\n                a = input.nextInt();\n                b[a]++;\n            }\n        }\n\n        int index=0;\n        for(int j=0; j<2501; j++)\n            if(b[j]!=0&&b[j]%2!=0)\n                    c[index++]=j;\n\n       System.out.printf(\"Case #%d: \", n + 1);\n        for(int j=0; j<N; j++)\n            System.out.printf(\"%d \", c[j]);\n\n        System.out.print(\"\\n\");\n\n        } \/\/ cases\n    } \/\/ main\n\n\n}"}
{"idx":"1023","func":"class RoundOneProblemTwo {\n\n    public static void main(String[] args) {\n\n\/\/        String inPutFile = \"\/Users\/KiRaN\/Desktop\/CodeBase\/Google_CodeBase\/SheepSleep\/src\/small.in\";\n\/\/        String outPutFile = \"\/Users\/KiRaN\/Desktop\/CodeBase\/Google_CodeBase\/SheepSleep\/src\/small.out\";\n        \n        String inPutFile = \"\/Users\/KiRaN\/Desktop\/CodeBase\/Google_CodeBase\/SheepSleep\/src\/large.in\";\n        String outPutFile = \"\/Users\/KiRaN\/Desktop\/CodeBase\/Google_CodeBase\/SheepSleep\/src\/large.out\";\n        \n        \n        try {\n\n            BufferedReader bufferedReader = new BufferedReader(new FileReader(inPutFile));\n            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(outPutFile));\n\n            \/\/ Total number of test cases\n            int noOfTestCases = Integer.valueOf(bufferedReader.readLine());\n            \n            \n            \n            for (int testCase = 0; testCase < noOfTestCases; testCase++){\n                \n                Set<Integer> distinctHeights = new HashSet<>();\n                Map<Integer,Integer> repetitionCount = new HashMap<>();\n                TreeSet<Integer> resultSet = new TreeSet<Integer>();\n                \n                int gridSize = Integer.parseInt(bufferedReader.readLine());\n                int noOfLinesToRead = 2*gridSize-1;\n                for(int i=0; i<noOfLinesToRead; i++){\n                    String currRow = bufferedReader.readLine();\n                    String[] heightsInCurrentRow = currRow.split(\" \");\n                    for(String a:heightsInCurrentRow) {\n                        int currHeight = Integer.valueOf(a);\n                        if(distinctHeights.contains(currHeight)) {\n                            int heightCount = repetitionCount.get(currHeight);\n                            repetitionCount.put(currHeight,heightCount+1);\n                        } else {\n                            distinctHeights.add(currHeight);\n                            repetitionCount.put(currHeight, 1);\n                        }\n                    }\n                    \n                }\n                \n                repetitionCount.entrySet().stream().filter(currRecord -> \n                    ((currRecord.getValue() & 1)!=0?true:false) == true\n                ).forEach(currRecord -> resultSet.add(currRecord.getKey()));\n                \n                bufferedWriter.write(\"Case #\" + (testCase + 1) + \": \" + resultSet.toString().replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\", \",\" \"));\n                System.out.print(\"Case #\" + (testCase + 1) + \": \" + resultSet.toString().replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\", \",\" \"));\n                bufferedWriter.write(\"\\n\");\n                System.out.print(\"\\n\");\n\n                \n\n            }\n                \n            bufferedReader.close();\n            bufferedWriter.close();\n\n        } catch (FileNotFoundException fileNotFoundException) {\n\n            System.out.println(\"Some Exception: \" + fileNotFoundException.getMessage());\n            fileNotFoundException.printStackTrace();\n\n        } catch (IOException ioException) {\n\n            System.out.println(\"Some Exception: \" + ioException.getMessage());\n            ioException.printStackTrace();\n\n        } catch (Exception exception) {\n            \n            System.out.println(\"Some Exception: \" + exception.getMessage());\n            exception.printStackTrace();\n        }\n\n    }\n\n}"}
{"idx":"1024","func":"class RankAndFileTester {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        File inputFile = new File(args[0]);\/\/take in file\n        RankAndFile t = new RankAndFile(inputFile);\/\/parse it\n        for (int i=0; i < t.caseArray.length; i++){\n            System.out.println(\"Case #\" + (i+1) + \": \" + \n                    t.caseArray[i].evaluateCase());\n        }\/\/evaluate it\n    }\n\n}"}
{"idx":"1025","func":"class RankAndFile {\n    public static void main(String args[]){\n\n        String path = \"round1A\/RankAndFile\/\";\n        String filename = path + \"B-large.in\";\n        String out = path + \"result_large.txt\";\n        File file = new File(filename);\n        File outfile = new File(out);\n\n        BufferedReader br = null;\n        PrintWriter pw = null;\n\n        try {\n            br = new BufferedReader(new FileReader(file));\n            pw = new PrintWriter(new BufferedWriter(new FileWriter(outfile)));\n\n            int testCase = Integer.parseInt(br.readLine());\n\n            for(int t=1;t<=testCase;t++){\n                System.out.println(\"test \"+ t);\n\n                int[] count = new int[2501];\n                Arrays.fill(count, 0);\n\n                int N = Integer.parseInt(br.readLine());\n                for(int i=0;i<2*N-1;i++){\n                    String[] numbers = br.readLine().split(\" \");\n                    for(String tmp : numbers){\n                        int number = Integer.parseInt(tmp);\n                        count[number]++;\n                    }\n                }\n\n                List<Integer> list = new ArrayList<Integer>();\n\n                for(int i=1;i<=2500;i++){\n                    if(count[i]==0){\n                        continue;\n                    }\n\n                    if(count[i] % 2 != 0){\n                        list.add(i);\n                    }\n                }\n\n                Collections.sort(list);\n\n                String result = \"\";\n                for(int i=0;i<N;i++){\n                    result += list.get(i) + \" \";\n                }\n\n                pw.println(\"Case #\"+ t + \": \" + result);\n            }\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n            System.exit(1);\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        } finally {\n            if(br != null){\n                try {\n                    br.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    System.exit(1);\n                }\n            }\n            if(pw != null){\n                pw.close();\n            }\n        }\n    }\n\n}"}
{"idx":"1026","func":"class RankAndFile {\n    public static void main(String... args) throws Exception {\n        Scanner scan = new Scanner(new File(\"B-large.in\"));\n        PrintWriter pout = new PrintWriter(new FileWriter(new File(\"output.txt\")));\n        int cases = Integer.parseInt(scan.nextLine());\n        int n;\n        short[] check;\n        String[][] nums;\n        String result;\n        for(int bb = 0; bb < cases; bb++){\n            result = \"\";\n            check = new short[2500];\n            n = Integer.parseInt(scan.nextLine());\n            nums = new String[2*n-1][];\n            for(int i=0; i<2*n-1; i++){\n                nums[i] = scan.nextLine().trim().split(\" \");\n                for(int j=0; j<n; j++){\n                    check[Integer.parseInt(nums[i][j])-1]++;\n                }\n            }\n            for(int i=0; i<2500; i++){\n                if(check[i]%2 == 1)\n                    result += (i+1) + \" \";\n            }\n            result = result.trim();\n            if(result.length() > 2*n){\n                System.out.println(\"error\");\n            }\n            pout.println(\"Case #\" + (bb+1) + \": \" + result);\n        }\n\n\n\n        pout.close();\n    }\n}"}
{"idx":"1027","func":"class Second {\n    private static final String dir = \"C:\\\\Users\\\\Sasidharan\\\\Downloads\\\\Code\\\\B\\\\\";\n\n    public static int mins = 0;\n    public static void main(String[] args) throws Exception {\n        Second o = new Second();\n        Scanner sc = new Scanner(new FileReader(dir + \"B-large.in\"));\n\n        PrintWriter pw = new PrintWriter(new FileWriter(dir + \"output.txt\"));\n        int caseCnt = sc.nextInt();\n        sc.nextLine();\n        for(int n = 0; n < caseCnt; n++) {\n            \/\/sc.nextLine();\n            \/\/System.out.println(\"Test cases \" + (n + 1));\n            pw.print(\"Case #\" + (n+1) + \": \");\n            \/\/mins = 0;\n            int no = sc.nextInt();\n            int[][] a = new int[2 * no - 1][no];\n            int b[] = new int[2502];\n            \n            for(int i = 0; i < 2* no - 1; i++) {\n                sc.nextLine();\n                for(int k = 0; k < no; k++) {\n                    int j = sc.nextInt();\n                    if(b[j] == 0) {\n                        b[j] = 1;\n                    } else {\n                        b[j] = b[j] - 1;\n                    }\n                }\n                \/\/a[i][0] = sc.nextInt();\n                \/\/a[i][1] = sc.nextInt();\n                \/\/a[i][2] = sc.nextInt();\n                \/\/System.out.println(a[i][0] +\" \" + a[i][1] + \" \" + a[i][2]);\n                \/\/sc.nextLine();\n            }\n            for(int i =0; i < 2502; i++)\n            {\n                if(b[i] == 1) {\n                    System.out.print(i + \" \");\n                    pw.print(i + \" \");\n                }\n                \/\/String text = sc.nextLine();\n            }\n            System.out.println();\n            pw.println();\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n\n}"}
{"idx":"1028","func":"class B {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) {\n        \/\/ TODO code application logic here\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for(int i=0;i<t;i++){\n            int n = in.nextInt();\n            int[] ar = new int[2501];\n            for(int j=0;j<2*n-1;j++){\n                for(int k=0;k<n;k++)\n                    ar[in.nextInt()]++;\n            }\n            int[] ans = new int[n];\n            int count=0;\n            for(int j=1;j<2501;j++){\n                \/\/System.out.println(ar[j]);\n                if(ar[j]!=0 && ar[j]%2!=0){\n                    ans[count]=j;\n                    count++;\n                }\n            }\n            Arrays.sort(ans);\n            System.out.print(\"Case #\"+(i+1)+\": \");\n            for(int j=0;j<n;j++)\n                System.out.print(ans[j]+\" \");\n            System.out.println();\n        \n        }\n        \n    }\n    \n}"}
{"idx":"1029","func":"class B\n{\n    static String FILE_IN = \"B-large.in\";\n    static String FILE_OUT = \"B.out\";\n\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader in = new BufferedReader\n                (new FileReader(\"files\/\" + FILE_IN));\n        PrintWriter out = new PrintWriter(new BufferedWriter\n                (new FileWriter(\"files\/\" + FILE_OUT)));\n\n        int T = Integer.parseInt(in.readLine());\n        for (int t = 1; t <= T; t++)\n        {\n            int N = Integer.parseInt(in.readLine());\n            int lines = 2 * N - 1;\n            \n            ArrayList<Integer> set = new ArrayList<Integer>();\n            StringTokenizer st;\n            \n            for(int i = 1; i <= lines; i++)\n            {\n                st = new StringTokenizer(in.readLine());\n                int next, index;\n                \n                for(int j = 1; j <= N; j++)\n                {\n                    next = Integer.parseInt(st.nextToken());\n                    \n                    index = set.indexOf(next);\n                    if(index >= 0)\n                        set.remove(index);\n                    else\n                        set.add(next);\n                }\n            }\n            \n            Collections.sort(set);\n            StringBuilder res = new StringBuilder(Integer.toString(set.get(0)));\n            \n            int length = set.size();\n            for(int i = 1; i < length; i++)\n                res.append(\" \").append(set.get(i));\n            String result = res.toString();\n            System.out.printf(\"Case #%d: %s%n\", t, result);\n            out.printf(\"Case #%d: %s%n\", t, result);\n        }\n\n        System.out.println(\"Complete\");\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"1030","func":"class C {\n    public static void main(String[] unused) {\n        Scanner scanner = new Scanner(System.in);\n        int t = scanner.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int N = scanner.nextInt();\n            Map<Integer, Integer> m = new HashMap<Integer,Integer>();\n            for (int j = 0; j < (2 * N - 1) * N; j++) {\n                int x = scanner.nextInt();\n                Integer v = m.get(x);\n                if (v == null) {\n                    m.put(x, 1);\n                } else {\n                    m.put(x,  v + 1);\n                }\n            }\n            List<Integer> l = new ArrayList<Integer>();\n            for (Map.Entry<Integer, Integer> entry : m.entrySet()) {\n                int v = entry.getValue();\n                if (v % 2 == 1) {\n                    l.add(entry.getKey());\n                }\n            }\n            Collections.sort(l);\n            System.out.printf(\"Case #%d:\", i);\n            for (int j = 0; j < N; j++){\n                System.out.printf(\" %s\",l.get(j));\n            }\n            System.out.println();\n        }\n        scanner.close();\n    }\n\n}"}
{"idx":"1031","func":"class ProblemB {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n        \n        for (int i = 1; i <= numCases; i++) {\n            int N = input.nextInt();\n            HashSet<Integer> set = new HashSet<Integer>();\n            for (int j = 0; j < 2 * N - 1; j++) {\n                for (int k = 0; k < N; k++) {\n                    int temp = input.nextInt();\n                    if (set.contains(temp)) {\n                        set.remove(temp);\n                    } else {\n                        set.add(temp);\n                    }\n                }\n            }\n            int[] remaining = new int[N];\n            int index = 0;\n            for (int num : set) {\n                remaining[index++] = num;\n            }\n            Arrays.sort(remaining);\n            System.out.print(\"Case #\" + i + \": \");\n            for (int k = 0; k < remaining.length; k++) {\n                System.out.print(remaining[k]);\n                if (k != remaining.length - 1) {\n                    System.out.print(' ');\n                } else {\n                    System.out.println();\n                }\n            }\n        }\n        \n        input.close();\n    }\n}"}
{"idx":"1032","func":"class ProblemB {    \n    public static void main(String[] args) throws Exception {\n        String fileName = \"fileB\";\n        PrintWriter writer = new PrintWriter(fileName + \".out\", \"UTF-8\");\n        Scanner scanner = new Scanner(new File(fileName + \".in\"));\n        int t = scanner.nextInt();\n        \n        for (int i = 0; i < t; i++) {\n            int n = scanner.nextInt();\n            \n            Hashtable<Integer, Integer> heights = new Hashtable<Integer, Integer>();\n            \n            for (int i1 = 0; i1 < n * (n*2-1); i1++) {\n                int height = scanner.nextInt();\n                \n                if (heights.containsKey(height)) {\n                    heights.put(height, 1 + heights.get(height));\n                } else {\n                    heights.put(height, 1);\n                }\n            }\n            \n            ArrayList<Integer> missing = new ArrayList<Integer>();\n            \n            for (Integer height : heights.keySet()) {\n                if (heights.get(height) % 2 == 1) {\n                    missing.add(height);\n                }\n            }\n            \n            Collections.sort(missing);\n            \n            String ans = missing.toString().replace(\",\", \"\");\n            ans = ans.substring(1, ans.length() - 1);\n            \n            writer.print(\"Case #\" + (long) (i+1) + \": \" + ans);\n            \n            if (i < t - 1) {\n                writer.println(\"\");\n            }\n        }\n        \n        writer.close();\n        scanner.close();\n    }\n}"}
{"idx":"1033","func":"class RankAndFile\n{\n    private static final String PROBLEM_NAME = RankAndFile.class.getSimpleName();\n    private static final String WORK_DIR = \"\/Development\/Projects\/GCJ\/16-1A\/\" + PROBLEM_NAME + \"\/\";\n\/\/    private static final String INPUT_PATH = WORK_DIR + \"sample.in\";\n\/\/    private static final String INPUT_PATH = WORK_DIR + \"B-small-attempt2.in\";\n    private static final String INPUT_PATH = WORK_DIR + \"B-large.in\";\n\/\/    private static final String INPUT_PATH = WORK_DIR + \"debug.in\";\n    private static final String OUTPUT_PATH = INPUT_PATH.replace(\".in\", \".out\");\n    \n    public static void main(String[] args) throws Exception\n    {\n        System.out.println(\"Solving \" + PROBLEM_NAME + \"...\");\n        System.out.println(\"Input: \" + INPUT_PATH);\n        System.out.println(\"Output: \" + OUTPUT_PATH);\n        \n        PrintWriter out = new PrintWriter(OUTPUT_PATH, \"US-ASCII\");\n        Scanner in = new Scanner(new File(INPUT_PATH), \"US-ASCII\");\n        in.useLocale(Locale.US);\n        \n        int testCasesNumber = in.nextInt();\n        in.nextLine();\n        System.out.println(\"Test cases: \" + testCasesNumber);\n        \n        try\n        {\n            for (int testCase = 1; testCase <= testCasesNumber; testCase++)\n            {\n                System.out.println(\"Solving test case: \" + testCase + \"...\");\n                out.print(\"Case #\" + testCase + \": \");\n                RankAndFile r = new RankAndFile();\n                int N = in.nextInt();\n                Map<Integer, Integer> M = new HashMap<>((2 * N - 1) * N);\n                \n                for (int i = 0; i < 2 * N - 1; i++)\n                {\n                    for (int j = 0; j < N; j++)\n                    {\n                        int h = in.nextInt();\n                        if (M.containsKey(h))\n                            M.put(h, M.get(h) + 1);\n                        else\n                            M.put(h, 1);\n                    }\n                }\n                \n                ArrayList<Integer> result = new ArrayList<>();\n                \n                for (Map.Entry<Integer, Integer> entry : M.entrySet())\n                {\n                    if (entry.getValue() % 2 != 0)\n                        result.add(entry.getKey());\n                }\n                \n                Collections.sort(result);\n                \n                for (Integer i : result)\n                {\n                    out.print(i + \" \");\n                }\n                \n                out.println();\n                out.flush();\n            }\n        }\n        finally\n        {\n            in.close();\n            out.close();\n        }\n        \n        System.out.println(\"All test cases solved!\");\n    }\n}"}
{"idx":"1034","func":"class Math {\n    \n    static PrintWriter  writer = null;\n    \n    public static void main(String[] args) {\n        \n        Scanner console = null;\n        try {\n            console = new Scanner(new File(\"input.txt\"));\n        } catch (FileNotFoundException e1) {\n            \/\/ TODO Auto-generated catch block\n            e1.printStackTrace();\n        }\n        \n        try {\n            writer = new PrintWriter(\"output.txt\", \"UTF-8\");\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        int t = console.nextInt();\n        for (int ti = 0; ti < t; ti++) {\n            int n = console.nextInt();\n            \n            String x = \"\";\n            int[] a = new int[2505];\n            for (int i = 0; i < (2 * n - 1) * n; i++) {\n                int c = console.nextInt();\n                \/\/System.out.println(c);\n                a[c] = 1 - a[c];\n            }\n            for (int i = 0; i < 2505; i++) {\n                if (a[i] == 1) {\n                    x += \" \" + i;\n                }\n            }\n            x = x.trim();\n\n            \/\/System.out.println(x);\n            writer.printf(\"Case #%d: %s\\n\", ti + 1, x);\n        }\n        writer.close();\n    }\n    \n    \n}"}
{"idx":"1035","func":"class RankAndFile {\n\n    static final boolean CONSOLE_MODE = false;\n    static String fileName = \"B-large\";\n\n    static File in, out;\n    static PrintWriter writer;\n    static Scanner reader;\n\n    public static void main(String[] args) throws Exception{\n        if(CONSOLE_MODE) {\n            writer = new PrintWriter(System.out);\n            reader = new Scanner(System.in);\n        } else {\n            in = new File(\"C:\/Codejam\/in\/\" + fileName + \".in\");\n            out = new File(\"C:\/Codejam\/result.out\");\n            writer = new PrintWriter(new FileOutputStream(out));\n            reader = new Scanner(new FileInputStream(in));\n        }\n\n        int cases = reader.nextInt();\n        \n        System.out.println(\"Cases: \" + cases);\n        \n        for(int i = 1; i <= cases; i++) {\n            System.out.println(\"On case \" + i);\n            int n = reader.nextInt();\n            \n            HashMap<Integer, Integer> set = new HashMap<>();\n            \n            int inputs = n * (2 * n - 1);\n            \n            for(int i1 = 0; i1 < inputs; i1++) {\n                int in = reader.nextInt();\n                set.put(in, set.getOrDefault(in, 0) + 1);\n            }\n            \n            ArrayList<Integer> result1 = new ArrayList<>();\n            \n            for(Integer i2 : set.keySet()) {\n                if(set.get(i2) % 2 != 0)\n                    result1.add(i2);\n            }\n            \n            Collections.sort(result1);\n            List<Integer> result = result1;\n            writer.print(\"Case #\" + i + \": \");\n            for(int j : result)\n                writer.print(j + \" \");\n            writer.println();\n        }\n\n        writer.close();\n        reader.close();\n    }\n\n}"}
{"idx":"1036","func":"class GCJ2 {\n\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        String fileName = \"B-large.in\";\n        StringBuffer fileContent1 = new StringBuffer();\n        \n        String line1 = new String();\n        \n        FileReader fileReader = null;\n        try {\n            fileReader = new FileReader(fileName);\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        BufferedReader bufferedReader= new BufferedReader(fileReader);\n        \n        try {\n            while ((line1 = bufferedReader.readLine()) != null) {\n                fileContent1.append(line1 + \";\");\n            }\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        try {\n            bufferedReader.close();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        String fileContent = fileContent1.toString();\n        String[] inputString = fileContent.split(\";\");\n        StringBuffer outputString = new StringBuffer();\n        int t = Integer.parseInt(inputString[0]);\n        String[] input = new String[inputString.length - 1];\n        int line = 1;\n        \n        for (int z = 0; z < t; z++) {\n            outputString.append(\"Case #\" + (z+1) + \":\");\n            int index = line;\n            int n = Integer.parseInt(inputString[index]);\n            index++;\n            line = line + 2 * n;\n            HashMap<Integer, Integer> height = new HashMap<Integer, Integer>();\n            int[] miss = new int[n];\n            ArrayList<Integer> number = new ArrayList<Integer>();\n            int len = 0;\n            \n            for (int i = 0; i < (2*n-1); i++) {\n                String[] lineHeight = inputString[index+i].split(\" \");\n                int[] num = new int[lineHeight.length];\n                for (int j = 0; j < lineHeight.length; j++) {\n                    num[j] = Integer.parseInt(lineHeight[j]);\n                    Integer key = new Integer(num[j]);\n                    if (height.containsKey(key)) {\n                        Integer value = height.get(key);\n                        value++;\n                        height.put(key, value);\n                    } else {\n                        height.put(key, 1);\n                        number.add(new Integer(key));\n                    }\n                }\n            }\n            \n            int m = 0;\n            \n            for (int i = 0; i < number.size(); i++) {\n                Integer value = height.get(number.get(i));\n                \n                if ((value%2) == 1) {\n                    System.out.println(number.get(i));\n                    miss[m++] = number.get(i);\n                }\n            }\n            Arrays.sort(miss);\n            for (int i = 0; i < miss.length; i++) {\n\n                outputString.append(\" \" + miss[i]);\n            }\n            outputString.append(\"\\n\");\n            \n        }\n\n        Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"result.txt\")));\n        writer.write(outputString.toString());\n        writer.close();\n\n    }\n\n}"}
{"idx":"1037","func":"class rankAndFile {\n    public static void main(String[] args) throws IOException {\n        StringBuffer sb; \n        Scanner sc = new Scanner(new FileReader(\"B-large (1).in\"));\n        int N=Integer.valueOf(sc.nextLine());\n        FileOutputStream fs = new FileOutputStream(new File(\"202.txt\"));\n        PrintStream p = new PrintStream(fs);\n        HashSet<String> set=new HashSet<>();\n        loop:for(int i=1;i<=N;i++){\n            set=new HashSet<>();\n            int people=sc.nextInt();\n            int[] height=new int [3000];\n            for(int j=0;j<2*people-1;j++){\n                for(int k=0;k<people;k++){\n                    height[sc.nextInt()]++;\n                }\n            }\n            System.out.print(\"Case #\"+i+\": \");\n            p.print(\"Case #\"+i+\": \");\n            for(int m=0;m<height.length;m++){\n                if(height[m]%2!=0){\n                    System.out.print(m+\" \");\n                    p.print(m+\" \");\n                }\n            }\n            System.out.println();\n            p.println();\n        }\n    }\n}"}
{"idx":"1038","func":"class Main {\n    \n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner sc=new Scanner(System.in);\n        String loopS = sc.nextLine();\n        \n        int loops = Integer.parseInt(loopS);\n        for (int j=0; j<loops; j++) {\n            String N = sc.nextLine();\n            int nums = Integer.parseInt(N);\n            HashMap<Integer, Integer> hm = new HashMap<Integer, Integer> ();\n            List<Integer> soln = new ArrayList<Integer> ();\n            \n            for (int i=0; i < 2*nums-1; i++) {\n                String line = sc.nextLine();\n                String[] strArray = line.split(\" \");\n                for(int k = 0; k < strArray.length; k++) {\n                    int key = Integer.parseInt(strArray[k]);\n                    if (hm.containsKey(key)) {\n                        hm.put(key, hm.get(key)+1);\n                    } else {\n                        hm.put(key,1);\n                    }\n                }                \n            }\n            \n            for(Map.Entry<Integer, Integer> entry : hm.entrySet()){\n\/\/                System.out.println(entry.getKey() + \" \" + entry.getValue());\n                if (entry.getValue()%2 != 0)\n                {\n                    soln.add(entry.getKey());\n                }\n            }            \n            Collections.sort(soln);\n            int counter = j;            \n            counter++;\n            System.out.print(\"Case #\"+ counter + \": \");\n            for (int i = 0; i < soln.size()-1; i++) {\n                System.out.print(soln.get(i) + \" \");\n            }\n            System.out.println(soln.get(soln.size()-1));\n        }\n        sc.close();        \n\n    }\n\n\n}"}
{"idx":"1039","func":"class RankandFile {\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(new FileReader(\"smallB.in\"));\n        PrintStream out = new PrintStream(new FileOutputStream(\"B.out\"));\n        int T = scanner.nextInt();\n        scanner.nextLine();\n        for (int t = 1; t <= T; t++) {\n            int N = scanner.nextInt();\n            HashMap<Integer,Integer> counts = new HashMap<>();\n            for (int i = 1; i < 2 * N; i++) {\n                for (int i1 = 0; i1 < N; i1++) {\n                    int n = scanner.nextInt();\n                    int c = counts.getOrDefault(n, 0);\n                    counts.put(n, c+1);\n                }\n            }\n            out.println(\"Case #\" + t + \": \" + counts.entrySet().stream().filter(e -> e.getValue()%2 == 1).mapToInt(Map.Entry::getKey).sorted().boxed().map(String::valueOf).collect(\n                    Collectors.joining(\" \")));\n        }\n    }\n}"}
{"idx":"1040","func":"class C1 {\n\n    \/*\n    public static ArrayList<boolean[]> combFinal = new ArrayList<>();\n    public static ArrayList<Integer> choice = new ArrayList<>();\n    *\/\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        \n        for (int i = 1; i <= t; ++i) {\n            int n = in.nextInt();\n            int[][] lines = new int[2*n-1][n];\n            \n            for(int j=0; j<2*n-1; j++){\n                for(int k=0; k<n; k++){\n                    lines[j][k] = in.nextInt();\n                }\n            }\n            System.out.print(\"Case #\" + i + \":\");\n            ArrayList<Integer> val = new ArrayList<>();\n            int m = 2*n-1;\n            \n            for(int i1=0; i1<m; i1++){\n                for(int j=0; j<n; j++){\n                    val.add(lines[i1][j]);\n                }\n            }\n            \n            ArrayList<Integer> missing = new ArrayList<>();\n            for(int i2=0; i2<2500; i2++){\n                int count = 0;\n                for(int j=0; j<val.size(); j++){\n                    if(val.get(j)==i2)\n                        count++;\n                }\n                if(count%2!=0){\n                    System.out.print(\" \"+i2);\n                    missing.add(i2);\n                }\n            }\n            System.out.println(\"\");\n            \n        }\n\n    }\n\n}"}
{"idx":"1041","func":"class Main {\n  static int n;\n  static Map<Integer, Integer> count1 = new HashMap<>();\n  static Map<Integer, Integer> count2 = new HashMap<>();\n\n\n  public static void main(String[] args) throws IOException {\n    File out = new File(\"out.out\");\n    out.createNewFile();\n    BufferedWriter output = new BufferedWriter(new FileWriter(out));\n    Scanner sc = new Scanner(new File(\"inLarge\"));\n    int numCases = Integer.valueOf(sc.nextLine());\n    List<String> answers = new ArrayList<String>();\n\n    cases:\n    for (int test = 1; test <= numCases; test++) {\n      Map<Integer, Integer> countTotal = new HashMap<>();\n      String line = sc.nextLine();\n      n = Integer.valueOf(line);\n      int numPapers = n * 2 - 1;\n      List<List<Integer>> papers = new ArrayList<>();\n      for (int i = 0; i < numPapers; i++) {\n        line = sc.nextLine();\n        String[] tokens = line.split(\" \");\n        List<Integer> paper = new ArrayList<>();\n        for (int i2 = 0; i2 < n; i2++) {\n          paper.add(Integer.valueOf(tokens[i2]));\n        }\n        papers.add(paper);\n      }\n\n      for(int p = 0; p < numPapers; p++) {\n        List<Integer> paper = papers.get(p);\n        for (int i = 0; i < n; i++) {\n          Integer mou = countTotal.get(paper.get(i));\n          if (mou == null) {\n            countTotal.put(paper.get(i), 1);\n          } else {\n            countTotal.put(paper.get(i), mou + 1);\n          }\n        }\n      }\n      List<Integer> pot = new ArrayList<>();\n      for (Map.Entry<Integer, Integer> e : countTotal.entrySet()) {\n        if (e.getValue() % 2 == 1) {\n          pot.add(e.getKey());\n        }\n      }\n\n\n      pot.sort(Integer::compare);\n      answers.add(String.join(\" \", pot.stream().map(Object::toString).collect(Collectors.toList())));\n    }\n\n    for (int i = 0; i < numCases; i++) {\n      output.write(String.format(\"Case #%d: %s\", i + 1, answers.get(i)));\n      output.newLine();\n      output.flush();\n    }\n  }\n\n\n}"}
{"idx":"1042","func":"static void main(String[] args)\n    {\n        Scanner sc=new Scanner(System.in);\n        int t=sc.nextInt();\n        for(int i=0;i<t;i++)\n        {\n            int n=sc.nextInt();\n            int arr[][]=new int[((2*n)-1)][n];\n            int a[]=new int[2501];\n            for(int j=0;j<(2*n)-1;j++)\n            {\n                for(int k=0;k<n;k++)\n                {    arr[j][k]=sc.nextInt();\n                    a[arr[j][k]]++;\n                }\n            }\n            int b[]=new int[n];\n            int z=0;\n            for(int j=1;j<=2500;j++)\n                if(a[j]%2!=0)\n                    b[z++]=j;\n            Arrays.sort(b);\n            System.out.print(\"Case #\"+(i+1)+\": \");\n            for(int j=0;j<n;j++)\n                System.out.print(b[j]+\" \");\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1043","func":"class B\n{\n  private int N;\n  \n  List<List<Integer>> slips = new ArrayList<>();\n\n  public B(int N)\n  {\n    this.N = N;\n  }\n  \n  public static void main(String[] args)\n  {\n    Scanner in = new Scanner(System.in);\n    \n    int N = in.nextInt();\n    \n    for(int i = 0; i < N; ++i)\n    {\n      int inputN = in.nextInt();\n      int caseN = i+1;\n      \n      B b = new B(inputN);\n      \n      for(int e = 0; e < (2*inputN-1); ++e)\n      {\n        List<Integer> slip = new ArrayList<>();\n        \n        for(int f = 0; f < inputN; ++f)\n          slip.add(in.nextInt());\n          \n        b.slips.add(slip);\n      }\n    int[] counts = new int[10000];\n    \n    for(List<Integer> slip : b.slips)\n    {\n      for(Integer i1 : slip)\n        counts[i1]++;\n    }\n    \n    StringBuilder result1 = new StringBuilder();\n    \n    for(int i2 = 1; i2 <= 2500; ++i2)\n    {\n      if(counts[i2]%2 != 0)\n      {\n        if(result1.length() > 0)\n          result1.append(\" \");\n          \n        result1.append(\"\"+i2);\n      }\n    }\n      \n      String result = result1.toString();\n      \n      String resultString = result;\n      \n      System.out.println(\"Case #\"+caseN+\": \"+resultString);\n    }\n  }\n}"}
{"idx":"1044","func":"class Problems {\n\n    public static void main(String[] args) throws IOException {\n\n        Problems r = new Problems();\n        Scanner sc = null;\n        PrintWriter pw = null;\n        try {\n            sc = new Scanner(new File(\"B-large.in\"));\n            pw = new PrintWriter(new File(\"output.txt\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        \n        int t = sc.nextInt();\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 1; i <= t; i++) {\n            int n = sc.nextInt();\n            int soldier;\n            for (int j = 0; j < n*(2*n-1); j++) {\n                soldier = sc.nextInt();\n                if(map.containsKey(soldier)) {\n                    map.put(soldier, map.get(soldier) + 1);\n                } else {\n                    map.put(soldier, 1);\n                }\n            }\n            Set<Integer> answer = new TreeSet<Integer>();\n            Iterator it = map.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry pair = (Map.Entry)it.next();\n                if ((int)pair.getValue() % 2 != 0) {\n                    answer.add((int)pair.getKey());\n                }\n                it.remove();\n            }\n            pw.print(\"Case #\" + i + \":\");\n            for(int sd : answer) {\n                pw.print(\" \" + sd);\n            }\n            pw.println();\n        }\n        \n        pw.close();\n    }\n}"}
{"idx":"1045","func":"class B {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\/\/always 1\n        for(int k=0; k<t; k++){\n            int n = in.nextInt();\n            int[] heights = new int[2501];\n            for(int i=0; i<(2*n)-1; i++){\n                for(int j=0; j<n; j++){\n                    heights[in.nextInt()]++;\n                }\n            }\n            \n            System.out.print(\"Case #\"+(k+1)+\":\");\n            for(int i=1; i<=2500; i++){\n                if(heights[i]%2 == 1)\n                    System.out.print(\" \"+i);\n            }\n            System.out.println();\n        }\n        \n    }\n}"}
{"idx":"1046","func":"class Main {\n    public static void main(String[] args) throws IOException{\n        \/\/ Scanner s = new Scanner(System.in);\n        InputStream is = new FileInputStream(\".\\\\input_and_output\\\\1A2016\\\\B-large-1A2016.in\");\n        FileWriter fr = new FileWriter(\".\\\\input_and_output\\\\1A2016\\\\B-large-1A2016.out\");\n        Scanner s = new Scanner(is);\n        \n        int n = s.nextInt();\n        for (int i = 1; i <= n; ++i){            \n            int N = s.nextInt();\n\n            Map<Integer, Integer> map = new HashMap<>();\n            \n            for (int j = 0; j < (2 * N - 1) * N; ++j){\n                int num = s.nextInt();\n                if (!map.containsKey(num)){\n                    map.put(num, 1);\n                } else {\n                    map.put(num, map.get(num) + 1);\n                }\n            }\n            \n            PriorityQueue<Integer> pq = new PriorityQueue<>();\n            \n            for (int key : map.keySet()){\n                if (map.get(key) % 2 != 0) pq.add(key);\n            }\n            \n            fr.write(String.format(\"Case #%d:\", i));\n            while (!pq.isEmpty()){\n                fr.write(String.format(\" %d\", pq.poll()));\n            }\n            \n            fr.write(String.format(\"\\n\"));\n            \/\/ System.out.print(String.format(\"Case #%d: %s\\n\", i, dp[l-1]));\n        }\n        \n        fr.close();\n        s.close();\n    }\n}"}
{"idx":"1047","func":"class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int tests = sc.nextInt();\n        int maxHeight = 2500;\n        for(int testNum = 1; testNum <= tests; testNum++)\n        {\n            int n = sc.nextInt();\n            int[] heightCounts = new int[maxHeight + 1];\n            for(int i = 0; i < 2*n - 1; i++)\n            {\n                for(int j = 0; j < n; j++)\n                {\n                    int nextHeight = sc.nextInt();\n                    heightCounts[nextHeight]++;\n                }\n            }\n            \n            System.out.print(\"Case #\" + testNum + \": \");\n            for(int i = 0; i <= maxHeight; i++)\n            {\n                if(heightCounts[i] % 2 == 1)\n                {\n                    System.out.print(i + \" \");\n                }\n            }\n            System.out.println();\n        }\n        \n        sc.close();\n    }\n}"}
{"idx":"1048","func":"class RankAndFile {\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new FileReader(args[0]));\n        PrintWriter pw = new PrintWriter(new FileWriter(args[0]+\".out.txt\"));\n\n        int numOfCase = sc.nextInt();\n        List<Character> list = null;\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i < numOfCase; i++) {\n            int size = sc.nextInt();\n            int numOfNum = (2 * size - 1) * size;\n            TreeSet<Integer> set = new TreeSet<Integer>();\n\n            for (int j = 0; j < numOfNum; j++) {\n                int height = sc.nextInt();\n                if (set.contains(height)) set.remove(height);\n                else set.add(height);\n            }\n            sb.setLength(0);\n            while (!set.isEmpty()) {\n                sb.append(' ');\n                sb.append(set.pollFirst());\n            }\n            pw.println(\"Case #\" + (i + 1) + \":\" + sb.toString());\n        }\n\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"1049","func":"class RankAndFile {\n    \n    public RankAndFile(Scanner f) {\n        int cases = f.nextInt();\n        for(int ii=1; ii <= cases; ii++) {\n            \n            int n = f.nextInt();\n            int numSheets = 2*n-1;\n            \n            int[][] rows = new int[numSheets][n];\n            \n            for(int i = 0; i < numSheets; i++)\n                for(int j = 0; j < n; j++)\n                    rows[i][j] = f.nextInt();\n            \n            int[] peopleMap = new int[2501];\n            for(int i = 0; i <= 2500; i++)\n                peopleMap[i] = 0;\n            \n            for(int i = 0; i < numSheets; i++) {\n                for(int j = 0; j < n; j++) {\n                    peopleMap[rows[i][j]]++;\n                }\n            }\n            \n            int printCount = 0;\n            System.out.printf(\"Case #%d: \", ii);\n            for(int i = 0; i <= 2500; i++) {\n                if(peopleMap[i] % 2 != 0) {\n                    printCount++;\n                    System.out.printf(\"%d%s\", i, printCount==n ? \"\\n\" : \" \");\n                }\n            }\n        }\n    }\n    \n    \/*\n    void printArray(int[][] rows) {\n        for(int i = 0; i < rows.length; i++)\n            for(int j = 0; j < rows[0].length; j++)\n                System.out.printf(\"%d%s\", rows[i][j], j==rows[0].length-1 ? \"\\n\" : \" \");\n    }*\/\n    \n    public static void main(String[] args) {\n        Scanner f = new Scanner(System.in);\n        new RankAndFile(f);\n        f.close();\n    }\n\n}"}
{"idx":"1050","func":"class CodeJam2016R1AP2 {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        for(int caseid=1; caseid<=T; caseid++)\n        {\n            int N = Integer.parseInt(br.readLine());\n            int[] count = new int[2501];\n            for(int i = 0; i < 2*N -1;i++) {\n                StringTokenizer st = new StringTokenizer(br.readLine());\n                for(int j = 0; j < N; j++) {\n                    int c = Integer.parseInt(st.nextToken());\n                    count[c]++;\n                }\n            }            \n            System.out.print(\"Case #\"+caseid + \":\");\n            int counter = 0;\n            for(int i = 0; i < 2501; i++) {\n                \n                if(count[i] % 2 ==1) {\n                    counter++;\n                    System.out.print(\" \"+i);\n                }\n            }\n            System.out.println();\n            if(counter != N) System.out.println(\"WJDALSKDJALKSDJAS\");\n        }\n    }\n\n}"}
{"idx":"1051","func":"class Main4 {\n\n\n\n    public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException {\n        BufferedReader br = null;\n        FileOutputStream fos = null;\n        BufferedWriter bw = null;\n        try {\n            br = new BufferedReader(new FileReader(\"B-large.in\"));\n            fos = new FileOutputStream(new File(\"outputL.txt\"));\n            bw = new BufferedWriter(new OutputStreamWriter(fos));\n            final int CASES = Integer.valueOf(br.readLine());\n            String[] line = null;\n            int N = 0;\n            StringBuilder sb = null;\n            Set<Integer> result = new HashSet<Integer>();\n            for (int i = 1; i <= CASES; i++) {\n                result = new HashSet<Integer>();\n                sb = new StringBuilder();\n                N = Integer.valueOf(br.readLine());\n                for (int j=1; j <= 2*N - 1; j++) {\n                    line = br.readLine().split(\"\\\\s+\");\n                    for (String stn: line) {\n                        if (result.contains(Integer.valueOf(stn))) {\n                            result.remove(Integer.valueOf(stn));\n                        } else {\n                            result.add(Integer.valueOf(stn));\n                        }\n                    }\n                }\n                ArrayList<Integer> arrayList = new ArrayList<>();\n                arrayList.addAll(result);\n                Collections.sort(arrayList);\n                sb = new StringBuilder();\n                for (int z = 0; z < arrayList.size(); z++) {\n                    if(z != arrayList.size() -1 ) {\n                        sb.append(String.format(\"%s \",arrayList.get(z)));\n                    } else {\n                        sb.append(String.format(\"%s\",arrayList.get(z)));\n                    }\n                }\n\n                bw.write(String.format(\"Case #%s: %s\",i,sb.toString()));\n                bw.newLine();\n            }\n            br.close();\n            bw.close();\n            fos.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1052","func":"class Round1B {\n\n    public static void main(String[] args) throws Exception{\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(\"B.txt\");\n        int T = Integer.parseInt(in.readLine());\n        for(int c=1;c<=T;c++){\n            int n = Integer.parseInt(in.readLine());\n            int[] hcount = new int[2600];\n            for(int i=0;i<2*n-1; i++){\n                String[] spl = in.readLine().split(\" \");\n                for(int j=0;j<n;j++){\n                    hcount[Integer.parseInt(spl[j])]++;\n                }\n            }\n            String ans = \"\";\n            for(int i=1;i<=2500;i++){\n                if(hcount[i]%2!=0){\n                    ans = ans+\" \"+i;\n                }\n            }\n            pw.println(\"Case #\"+c+\":\"+ans);\n        }\n        pw.close();\n    }\n\n}"}
{"idx":"1053","func":"class Main {\n\n    public static void main(String[] args) {\n        try (Scanner scanner = new Scanner(new FileInputStream(\"input.txt\"))){\n            scanner.useLocale(Locale.ENGLISH);\n            BufferedWriter out = new BufferedWriter(new FileWriter(\"output.txt\"));\n            int tests = scanner.nextInt();\n            for (int i = 0; i < tests; i++) {\n                int n = scanner.nextInt();\n                Map<Integer, Integer> heightCounts = new TreeMap<>();\n                for (int j = 0; j < (2*n-1)*n; j++) {\n                    int next = scanner.nextInt();\n                    int oldValue = 0;\n                    if (heightCounts.containsKey(next)) {\n                        oldValue = heightCounts.get(next);\n                    }\n                    heightCounts.put(next, oldValue + 1);\n                }\n                StringBuilder result = new StringBuilder();\n                for (Entry<Integer, Integer> entry : heightCounts.entrySet()) {\n                    if (entry.getValue() % 2 == 1) {\n                        result.append(\" \").append(entry.getKey());\n                    }\n                }\n                out.write(\"Case #\" + (i + 1) + \": \" + result.toString() + \"\\n\");\n            }\n            out.close();\n        } catch (FileNotFoundException e) {\n            \/\/ ????\n        } catch (IOException e) {\n            \/\/ ????\n        }\n    }\n}"}
{"idx":"1054","func":"class B\n{\n    public static final String PROBLEM_NO = \"B\";\n    public static final String BASE_FOLDER = \"C:\\\\Users\\\\Ash\\\\Ash\\\\Code Jam\\\\2016\\\\R1A\\\\Input\";\n    public static final String FS = File.separator;\n    \n\/\/    public static final String SMALL_IN_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-small-ash.in\";\n\/\/    public static final String SMALL_OUT_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-small-ash.out\";\n    public static final String SMALL_IN_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-small-attempt0.in\";\n    public static final String SMALL_OUT_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-small-attempt0.out\";\n    public static final String LARGE_IN_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-large.in\";\n    public static final String LARGE_OUT_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-large.out\";\n    \n    public static void main(String[] args)\n    {\n\/\/        processFile(SMALL_IN_FILE, SMALL_OUT_FILE);\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(LARGE_IN_FILE));\n            BufferedWriter writer = new BufferedWriter(new FileWriter(LARGE_OUT_FILE));\n            \n            int cases = Integer.parseInt(reader.readLine());\n            \n            for (int caseNum=1; caseNum<= cases; caseNum++) {\n                \n                int n = Integer.parseInt(reader.readLine());\n                List<Integer> counts = new ArrayList<Integer>();\n                for (int i=1; i<=2500; i++) {\n                    counts.add(0);\n                }\n                \n                for (int i=0; i<2*n-1; i++) {\n                    String in = reader.readLine();\n                    String[] split = in.split(\" \");\n                    for (String tmp : split) {\n                        Integer integer = Integer.parseInt(tmp);\n                        counts.set(integer-1, counts.get(integer-1)+1);\n                    }\n                }\n                \n                String missing = \"\";\n                int counter = 0;\n                for (int i=0; i<counts.size(); i++) {\n                    if (counts.get(i) % 2 != 0) {\n                        missing += (i+1) + \" \";\n                        counter++;\n                        if (counter >= n) {\n                            break;\n                        }\n                    }\n                }\n                writer.write(\"Case #\" + caseNum + \": \" + missing.trim() + \"\\n\");\n            }\n            \n            writer.flush();\n            writer.close();\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1055","func":". *\/\nclass Ideone\n{\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        \/\/ your code goes here\n        Scanner sc=new Scanner(System.in);\n      int t=sc.nextInt();\n      for(int k=1;k<=t;k++)\n      {\n          int n=sc.nextInt();\n          List al=new ArrayList();\n          int g=2*n-1;\n          while(g-->0)\n          {\n            for(int m=1;m<=n;m++)\n            {\n                \n                 int c=sc.nextInt();\n                \/\/Integer b=new Integer(l);\n                al.add(c);\n            }\n          }\n          Set set=new TreeSet();\n          Collections.sort(al);\n          for(int i=0;i<al.size();i++)\n         {\n            int f= Collections.frequency(al,al.get(i));\n            \/\/System.out.print(f+\" \");\n            if(f%2!=0)\n            {\n             set.add(al.get(i));\n            }\n            \n         }\n         System.out.print(\"Case #\"+k+\": \");\n         Iterator itr=set.iterator();\n         while(itr.hasNext())\n         {\n             System.out.print(itr.next()+\" \");\n         }\n         System.out.println();\n      }\n\n    }\n}"}
{"idx":"1056","func":"class Ques2 {\n    public static void main(String[] args) throws NumberFormatException, IOException {\n\n        @SuppressWarnings(\"resource\")\n        BufferedReader br = new BufferedReader(\n                new FileReader(\"\/home\/local\/JASPERINDIA\/gitanshu.behal\/Desktop\/Jam\/1A\/Q2\/input1.in\"));\n        BufferedWriter wr = new BufferedWriter(\n                new FileWriter(\"\/home\/local\/JASPERINDIA\/gitanshu.behal\/Desktop\/Jam\/1A\/Q2\/output1.out\"));\n\n        int testCases = Integer.parseInt(br.readLine());\n        for (int I = 1; I <= testCases; I++) {\n\n            int N = Integer.parseInt(br.readLine());\n            int[] array = new int[2 * N * N];\n            int[] flag = new int[3000];\n            int J = 0;\n            for (int i = 0; i < (2 * N - 1); i++) {\n                String[] arr = br.readLine().split(\" \");\n                for (int j = 0; j < arr.length; j++) {\n                    array[J] = Integer.parseInt(arr[j]);\n                    if (flag[array[J]] == 0) {\n                        flag[array[J]] = 1;\n                    } else {\n                        flag[array[J]] = 0;\n                    }\n                    J++;\n                }\n            }\n            Integer[] answer = new Integer[N];\n            int K=0;\n            for (int i = 1; i < 2501; i++) {\n                if(flag[i] == 1){\n                    answer[K++] = i;\n                }\n            }\n            Arrays.sort(answer);\n            \n            wr.write(\"Case #\" + I + \": \");\n            for(int i=0 ; i < answer.length; i++){\n                wr.write(answer[i].toString() + \" \");\n            }\n            wr.newLine();\n        }\n        wr.close();\n    }\n}"}
{"idx":"1057","func":"class Prg2 {\n\n    private static final String INPUT_FILENAME = \"input.in\";\n    private static final String OUTPUT_FILENAME = \"output.in\";\n\n    \/\/ private static final String INPUT_FILENAME = \"A-small.in\";\n    \/\/ private static final String OUTPUT_FILENAME = \"A-small-out.in\";\n    \/\/\n    \/\/ private static final String INPUT_FILENAME = \"A-large.in\";\n    \/\/ private static final String OUTPUT_FILENAME = \"A-large-out.in\";\n\n    public static void main(String[] args) throws IOException {\n\n        BufferedReader reader = new BufferedReader(new FileReader(INPUT_FILENAME));\n        BufferedWriter write = new BufferedWriter(new FileWriter(OUTPUT_FILENAME));\n        Scanner scanInput = new Scanner(reader);\n\n        int t = scanInput.nextInt();\n\n        for (int i = 0; i < t; ++i) {\n            int n = scanInput.nextInt();\n            final int fixed = 2 * n - 1;\n            List<Integer> output = new ArrayList<Integer>();\n            StringBuilder sb = new StringBuilder();\n\n            int[] list = new int[n * fixed];\n            for (int j = 0; j < n * fixed; j++) {\n                list[j] = scanInput.nextInt();\n                \/\/ System.out.println(list[j]);\n            }\n\n            Arrays.sort(list);\n\n            int count = 1;\n            int k = 0;\n            for (k = 0; k < list.length - 1; k++) {\n\n                if (list[k] == list[k + 1]) {\n                    count++;\n\/\/                    System.out.println(\"count \" + count);\n                } else {\n                    if (count % 2 != 0) {\n                        output.add(list[k]);\n                    }\n                    count = 1;\n                }\n            }\n\n            if (output.size() != n) {\n                output.add(list[k]);\n            }\n\n            sb.append(\"Case #\" + (i + 1) + \": \");\n            for (int a : output) {\n                sb.append(a + \" \");\n            }\n            \/\/ write.write(\"Case #\" + (t + 1) + \": \" + sb.toString() + \"\\n\");\n            write.write(sb.toString().trim() + \"\\n\");\n            \/\/ System.out.println(sb.toString().trim() + \"\\n\");\n        }\n\n        scanInput.close();\n        write.flush();\n        write.close();\n\n    }\n}"}
{"idx":"1058","func":"class B {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int numCases = sc.nextInt();\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n            int N = sc.nextInt();\n            Map<Integer, Integer> counts = new HashMap<>();\n            for (int i = 0; i < 2 * N - 1; i++) {\n                for (int j = 0; j < N; j++) {\n                    int height = sc.nextInt();\n                    if (counts.containsKey(height)) {\n                        counts.put(height, counts.get(height) + 1);\n                    } else {\n                        counts.put(height, 1);\n                    }\n                }\n            }\n            List<Integer> heights = new ArrayList<>();\n            for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n                if (entry.getValue() % 2 != 0) {\n                    heights.add(entry.getKey());\n                }\n            }\n            Collections.sort(heights);\n            System.out.print(\"Case #\" + caseNum + \":\");\n            for (int h : heights) {\n                System.out.print(\" \" + h);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1059","func":"static void main(String[] args) throws IOException\n    {\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st=new StringTokenizer(br.readLine());\n        int t = Integer.parseInt(st.nextToken());\n        int i,j;\n        int k;\n        for(i=1;i<=t;i++)\n        {\n            \/\/System.out.print(\"Case #\"+i+\": \");\n            Arrays.fill(freq,0);\n            Arrays.fill(ans,0);\n            st=new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            \/\/freq = new int[n*n+1];\n            \/\/ans = new int[n*n+1];\n            for(j=0;j<2*n-1;j++)\n            {\n                st=new StringTokenizer(br.readLine());\n                for(k=0;k<n;k++)\n                {\n                    int temp = Integer.parseInt(st.nextToken());\n                    freq[temp]++;\n                }\n            }\n            \/\/System.out.println(\"fre \"+Arrays.toString(freq));\n            int m =0;\n            for(k=0;k<freq.length;k++)\n            {\n                \n                \/\/System.out.println(\"frrqk= \"+freq[k]);\n                if(freq[k]%2 != 0)\n                {\n                    \/\/System.out.println(\"k= \"+k);\n                    ans[m++] = k;\n                }\n            }\n            Arrays.sort(ans);\n            \/\/System.out.println(Arrays.toString(ans));\n            System.out.print(\"Case #\"+i+\": \");\n            for(k=0;k<ans.length;k++)\n            {\n                if(ans[k]!=0)\n                    System.out.print(ans[k]+\" \");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1060","func":"class B {\n    \/\/ static PrintStream writer = System.out;\n    public static int[][] a;\n    public static int[] count;\n    public static int n;\n\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n        Scanner sc = new Scanner(new File(\".\/src\/B-large.in\"));\n        int t = sc.nextInt();\n        PrintWriter writer = new PrintWriter(\".\/src\/B-large.out\", \"UTF-8\");\n\n        for (int k = 1; k <= t; k++) {\n            a = new int[600][1200];\n            count = new int[3000];\n            for (int i = 0; i < 3000; i++)\n                count[i] = 0;\n            writer.print(\"Case #\" + k + \":\");\n            n = sc.nextInt();\n            for (int i = 0; i < 2 * n - 1; i++) {\n                for (int j = 0; j < n; j++) {\n                    a[i][j] = sc.nextInt();\n                    count[a[i][j]]++;\n                }\n            }\n            for (int i = 0; i < 3000; i++)\n                if (count[i] % 2 == 1)\n                    writer.print(\" \" + i);\n            writer.println();\n        }\n\n        writer.close();\n        sc.close();\n    }\n}"}
{"idx":"1061","func":"class gcj2016r1ab {\n    \n    private static Scanner sc;\n    private static PrintStream ps;\n    \n    public static void main(String[] args) throws IOException {\n        sc = new Scanner(new File(\"infile.txt\"));\n        ps = new PrintStream(new FileOutputStream(new File(\"outfile.txt\")));\n        \/\/\n        int T = sc.nextInt();\n        for (int t = 1; t <= T; t++) {\n            ps.format(\"Case #%d:\", t);\n            \/\/\n            int n = sc.nextInt();\n            int n2 = (2 * n - 1) * n;\n            \/\/int[][] grid = new int[n][n];\n            Map<Integer, Integer> count = new TreeMap<>();\n            for (int i = 0; i < n2; i++) {\n                int j = sc.nextInt();\n                if (!count.containsKey(j))\n                    count.put(j, 0);\n                count.put(j, count.get(j) + 1);\n            }\n            \/\/\n            List<Integer> ans = new ArrayList<>();\n            for (Integer i : count.keySet()) {\n                if (count.get(i) % 2 == 1)\n                    ans.add(i);\n            }\n            for (Integer i : ans)\n                ps.print(\" \" + i);\n            ps.println();\n        }\n    }\n\n}"}
{"idx":"1062","func":"class Rank {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        for (int testCase = 1; testCase <= t; ++testCase) {\n            int n = in.nextInt();\n            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n            for (int i = 0; i < 2 * n - 1; i++) {\n                for (int j = 0; j < n; j++) {\n                    int a = in.nextInt();\n                    if (!map.containsKey(a)) {\n                        map.put(a, 1);\n                    } else {\n                        int count = map.get(a);\n                        map.put(a, ++count);\n                    }\n                }\n            }\n            Iterator it = map.entrySet().iterator();\n            int result[] = new int[n];\n            int i = 0;\n            while(it.hasNext()) {\n                Map.Entry pair = (Map.Entry)it.next();\n                int key = (int) pair.getKey();\n                int value = (int) pair.getValue();\n                if (value % 2 != 0) {\n                    result[i] = key;\n                    i++;\n                }\n                it.remove();\n            }\n            Arrays.sort(result);\n            System.out.print(\"Case #\" + testCase + \":\");\n            for (int j = 0; j < n; j++) {\n                System.out.print(\" \" + result[j]);\n            }\n            System.out.println();\n        }\n        in.close();\n    }\n    \n}"}
{"idx":"1063","func":"class B {\n\n        private static String path = \"C:\\\\Users\\\\m.omodei\\\\Downloads\\\\Round 1A\\\\\";\n        private static String file = \"large\"; \/\/\"small-attempt0\"; \/\/\"Test\"; \/\/  \n        \n        public static void main(String[] args) throws FileNotFoundException {\n            \n            long start = System.nanoTime();\n            Scanner in = new Scanner(new File(path + B.class.getSimpleName() + \"-\" + file + \".in\"));\n            PrintWriter out = new PrintWriter(path + B.class.getSimpleName() + \"-\" + file + \".out\");\n            int T = in.nextInt();\n            for(int i = 1; i <= T; i++) {\n                int N = in.nextInt();\n                int[] heightCount = new int[2500];\n                for(int j = 0; j < 2 * N - 1; j++) {\n                    for(int k = 0; k < N; k++)\n                        heightCount[in.nextInt() - 1]++;\n                }\n                System.out.print(\"Case #\" + i + \":\");\n                out.print(\"Case #\" + i + \":\");\n                for(int j = 0; j < 2500; j++) {\n                    if(heightCount[j] % 2 != 0) {\n                        System.out.print(\" \" + (j + 1));\n                        out.print(\" \" + (j + 1));\n                    }\n                }\n                System.out.println();\n                out.println();\n            }\n            in.close();\n            out.close();\n            System.out.println(\"Elapsed time: \" + (System.nanoTime() - start) \/ 1000000000.0 + \" seconds\");\n\n        }\n\n    }"}
{"idx":"1064","func":"class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        \n        int T = sc.nextInt();\n        for(int test_case=1; test_case<=T; test_case++) {\n            \n            int N = sc.nextInt();\n            HashMap<Integer, Integer> map = new HashMap<>();\n            \n            for(int i=0; i<N*(2*N-1); i++) {\n                Integer m = sc.nextInt();\n                if(!map.containsKey(m)) {\n                    map.put(m, 1);\n                } else {\n                    Integer cnt = map.remove(m);\n                    map.put(m, cnt+1);\n                }\n            }\n            \n            TreeSet<Integer> ts = new TreeSet<>();\n            for(Entry<Integer, Integer> entry : map.entrySet()) {\n                if(entry.getValue() % 2 == 1) {\n                    ts.add(entry.getKey());\n                }\n            }\n            \n            StringBuilder sb = new StringBuilder();\n            int ts_size = ts.size();\n            for(int i=0; i<ts_size; i++) {\n                int value = ts.pollFirst();\n                sb.append(value);\n                if(i < ts_size-1) {\n                    sb.append(\" \");\n                }\n            }\n        \n            \n            System.out.println(\"Case #\"+test_case+\": \" + sb);\n\n        }\n    }\n\n}"}
{"idx":"1065","func":"class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        for (int i = 1; i <= t; ++i) {\n            int n = in.nextInt();\n            int[][] lists = new int[2 * n - 1][n];\n            int[][] result = new int[n][n];\n\n            Map<Integer, Integer> amounts = new HashMap<Integer, Integer>();\n            for (int j = 0; j < 2 * n - 1; j++) {\n                for (int k = 0; k < n; k++) {\n                    int v = in.nextInt();\n                    lists[j][k] = v;\n                    if (amounts.containsKey(v)) {\n                        amounts.put(v, amounts.get(v) + 1);\n                    } else {\n                        amounts.put(v, 1);\n                    }\n\n                }\n            }\n\n            int j = 0;\n            int[] missingRow = new int[n];\n            for (Integer v : amounts.keySet()) {\n                if (amounts.get(v) % 2 == 1) {\n                    missingRow[j++] = v;\n                }\n            }\n            Arrays.sort(missingRow);\n            System.out.print(\"Case #\" + i + \": \");\n            for (j = 0; j < n; j++) {\n                System.out.print(missingRow[j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1066","func":"class RankAndFile {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        PrintWriter out = new PrintWriter(new File(\"RankAndFile.out\"));\n        RankAndFile r = new RankAndFile();\n        int T = in.nextInt();\n        for (int i=0; i<T; i++) {\n            int N = in.nextInt();\n            HashMap<Integer, Integer> heightCounts = new HashMap<>();\n            for (int j=0; j<(2*N-1)*N; j++) {\n                int h = in.nextInt();\n                if (heightCounts.containsKey(h)) {\n                    int count = heightCounts.get(h);\n                    heightCounts.put(h, count+1);\n                } else {\n                    heightCounts.put(h, 1);\n                }\n            }\n            int missingNumbers[] = new int[N];\n            int j=0;\n            for (Map.Entry<Integer, Integer> entry: heightCounts.entrySet()) {\n                if (entry.getValue() % 2 == 1) {\n                    missingNumbers[j] = entry.getKey();\n                    j++;\n                }\n            }\n            Arrays.sort(missingNumbers);\n            StringBuilder sb = new StringBuilder();\n            for (j=0; j<N; j++) {\n                sb.append(\" \");\n                sb.append(missingNumbers[j]);\n            }\n            out.println(String.format(\"Case #%d:%s\", i+1, sb.toString()));\n        }\n        out.close();\n    }\n}"}
{"idx":"1067","func":"class B {\n    static String infname = \"B-large.in\";\n    static String oufname = \"B-large.out\";\n    \n\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new FileReader(infname));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(oufname));\n        int Tn, T;\n        Tn = sc.nextInt();\n        sc.nextLine();\n        for (T=1;T<=Tn;T++) {\n            bw.write(String.format(\"Case #%d: \", T));\n            int n = sc.nextInt();\n            HashMap<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n            for (int i=0;i<2*n-1;i++) {\n                for (int j=0;j<n;j++) {\n                    int num = sc.nextInt();\n                    if (!cnt.containsKey(num)) {\n                        cnt.put(num, 1);\n                    } else {\n                        cnt.put(num, cnt.get(num)+1);\n                    }\n                }\n            }\n            \/\/ArrayList<Integer> ans = new ArrayList<Integer>();\n            for (int i=1;i<=2500;i++) {\n                if (cnt.containsKey(i) && cnt.get(i)%2!=0) {\n                    bw.write(Integer.toString(i) + ' ');\n                }\n            }\n            bw.write('\\n');\n        }\n        bw.close();\n    }\n\n}"}
{"idx":"1068","func":"class Round1B {\n\n    public static void main(String[] args) throws IOException {\n\n        \/\/ TODO try Files java 7\n        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(\"output\")));\n\n        Scanner scanner = new Scanner(System.in);\n        int T = scanner.nextInt();\n\n        for (int t = 0; t < T; t++) {\n            int N = scanner.nextInt();\n\n            int[][] array = new int[2*N-1][N];\n\n            for (int i=0; i<2*N-1; i++) {\n                for (int j=0; j<N; j++) {\n                    array[i][j] = scanner.nextInt();\n                }\n            }\n            List<Integer> output = new ArrayList<>();\n            String resultString1 = \"\";\n            int[] heights = new int[2501];\n            \n            for (int i=0; i<2*N-1; i++) {\n                for (int j = 0; j < N; j++) {\n                    heights[array[i][j]]++;\n                }\n            }\n            \n            for (int i=0; i<heights.length; i++) {\n                if (heights[i] % 2 == 1) {\n                    output.add(i);\n                }\n            }\n            \n            Collections.sort(output);\n            for (int value : output) {\n                resultString1 += String.valueOf(value) + \" \";\n            }\n            String resultString = resultString1;\n\n            writer.write(\"Case #\" + (t + 1) + \": \" + resultString + \"\\n\");\n        }\n        writer.close();\n\n        \/\/test\n        \/*for (int n=0; n<=1000000; n++) {\n            compute(n);\n        }*\/\n    }\n\n}"}
{"idx":"1069","func":"class B{\n    \n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int t = in.nextInt();\n    \n    for (int i = 1; i <= t; ++i) {\n        int n = in.nextInt();\n        System.out.print(\"Case #\" + i + \": \");\n        int p=0;\n        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();\n        while(p<2*n*n-n){\n            p++;\n            int key=in.nextInt();\n            if(map.containsKey(key))map.put(key,map.get(key)+1);\n            else map.put(key,1);\n        }\n        Iterator it = map.entrySet().iterator();\n        int[] missing=new int[n];\n        int j=0;\n        while (it.hasNext()) {\n            Map.Entry pair = (Map.Entry)it.next();\n            \n            if((int)pair.getValue()%2==1){\n                missing[j]=(int)pair.getKey();\n                j++;\n            }\n            it.remove(); \n        }\n        Arrays.sort(missing);\n        \n        for(int k=0;k<n;k++){\n            System.out.print(missing[k]+\" \");\n        }\n        System.out.println(\"\");\n    }\n    \n    \n  }\n  \n}"}
{"idx":"1070","func":"class RankAndFile {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        int numTests = sc.nextInt();\n        for (int numTest = 0; numTest < numTests; numTest++) {\n            int numHeights = sc.nextInt();\n            Map<Integer, Integer> heightToCount = new HashMap<>();\n            for (int numList = 0; numList < (2 * numHeights - 1); numList++) {\n                for (int numHeight = 0; numHeight < numHeights; numHeight++) {\n                    int height = sc.nextInt();\n                    if (!heightToCount.containsKey(height)) {\n                        heightToCount.put(height, 1);\n                    } else {\n                        heightToCount.put(height, heightToCount.get(height) + 1);\n                    }\n                }\n            }\n            \/\/System.out.println(heightToCount);\n            List<Integer> missingRowOrColumn = heightToCount.entrySet().stream()\n                    .filter(entry -> entry.getValue() % 2 == 1)\n                    .map(Entry::getKey)\n                    .sorted()\n                    .collect(Collectors.toList());\n            StringBuilder out = new StringBuilder();\n            for (int integer : missingRowOrColumn) {\n                out.append(integer).append(\" \");\n            }\n            String answer = out.toString();\n            System.out.format(\"Case #%d: %s%n\", numTest + 1, answer);\n        }\n    }\n}"}
{"idx":"1071","func":"class q2 {\n\n    public static void main(String[] args) {\n        BufferedReader reader = null;\n        File file = new File(\"C:\\\\Users\\\\vincent\\\\workspace\\\\code jam\\\\src\\\\r1a\\\\B-large.txt\");\n        File answer = new File(\"C:\\\\Users\\\\vincent\\\\workspace\\\\code jam\\\\src\\\\r1a\\\\output.txt\");\n        Writer writer = null;\n        try{\n            reader = new BufferedReader(new FileReader(file));\n            writer = new BufferedWriter(new OutputStreamWriter(\n                    new FileOutputStream(answer), \"utf-8\"));\n            String text = null;\n            \n            text = reader.readLine();\n            int numberOfTestCases = Integer.parseInt(text);\n            int index = 1;\n\n            while (numberOfTestCases > 0) {\n                text = reader.readLine();\n                int N = Integer.parseInt(text);\n                List<Integer> digits = new ArrayList<Integer>();\n                for (int i = 0; i < 2*N-1; i++) {\n                    String entry = reader.readLine();\n                    String[] entries = entry.split(\" \");\n                    for (int j = 0; j < entries.length; j++) {\n                        int number = Integer.valueOf(entries[j]);\n                        if (digits.contains(number)) {\n                            digits.remove((Integer) number);\n                        } else {\n                            digits.add(number);\n                        }\n                    }\n                }\n                Collections.sort(digits);\n                String answer2 = \"\"; \n                for (int digit : digits) {\n                    answer2 = answer2 + digit + \" \";\n                }\n                String answer1 = answer2.substring(0, answer2.length()-1);\n                writer.write(\"Case #\" + String.valueOf(index) + \": \" + answer1 + \"\\n\");\n                numberOfTestCases--;\n                index++;\n            }\n        } catch (IOException x) {\n            System.err.format(\"IOException: %s%n\", x);\n        } finally {\n            try {\n                if (reader != null) {\n                    reader.close();\n                }\n                if (writer != null) {\n                    writer.close();\n                }\n            } catch (IOException e) {\n            }\n        }\n        System.out.println(\"done\");\n    }\n\n}"}
{"idx":"1072","func":"class B {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n            Map<Integer, Integer> map = new HashMap<>();\n            Set<Integer> set = new HashSet<>();\n            int n = in.nextInt();\n            for (int j = 0; j < n * 2 - 1; j++) {\n                for (int k = 0; k < n; k++) {\n                    int e = in.nextInt();\n                    set.add(e);\n                    if (map.containsKey(e)) map.put(e, map.get(e) + 1);\n                    else map.put(e, 1);\n                }\n            }\n            int[] numbers = new int[set.size()];\n            int[] res = new int[n];\n            int start = 0;\n            for (Integer p : set) {\n                numbers[start++] = p;\n            }\n            Arrays.sort(numbers);\n            start = 0;\n            for (int j = 0; j < numbers.length; j++) {\n                if (map.get(numbers[j]) % 2 != 0)  res[start++] = numbers[j];\n            }\n            System.out.print(\"Case #\" + i + \": \");\n            for (int j = 0; j < res.length; j++) {\n                if (j == res.length - 1) System.out.println(res[j]);\n                else System.out.print(res[j] + \" \");\n            }\n        }\n    }\n}"}
{"idx":"1073","func":"class Main {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int t = in.nextInt(); \n    for (int i = 1; i <= t; i++) {\n      int n = in.nextInt(); \n      \n      \/\/ use a counter for each number\n      \/\/ each number that has an odd count is in the missing list \n      Hashtable<Integer,Integer> counts = new Hashtable<Integer,Integer>();\n      int length = 2 * n * n - n;\n      for (int j = 1; j <= length; j++) {\n        int cur = in.nextInt();\n        if (counts.containsKey(cur)) {\n          int c = counts.get(cur);\n          c++;\n          counts.put(cur, c);\n        }else{\n          counts.put(cur, 1);\n        }\n      }\n      int[] list = new int[n];\n      int k = 0;\n      Set<Integer> keys = counts.keySet();\n      for (int key : keys) {\n        if (counts.get(key) % 2 != 0) {\n          list[k] = key;\n          k++;\n        }\n      }\n      Arrays.sort(list);\n      System.out.print(\"Case #\" + i + \": \");\n      for (int j = 0; j < n; j++) {\n        System.out.print(list[j] + \" \");\n\n      }\n      System.out.println();\n    }\n  }\n}"}
{"idx":"1074","func":"class RankAndFile {\n    public static void main(String[] args) throws FileNotFoundException {\n        File input = new File(\"in.txt\");\n        Scanner in = new Scanner(input);\n        PrintWriter writer = new PrintWriter(\"out.txt\");\n        int T = in.nextInt();\n        in.nextLine();\n        RankAndFile r = new RankAndFile();\n        for (int i = 1; i<= T; i++){\n\n\n            writer.print(\"Case #\"+i+\": \");\n            int N = in.nextInt();\n            in.nextLine();\n            HashMap<Integer,Integer> m = new HashMap<Integer, Integer>();\n            for (int row = 0; row < 2*N-1; row++){\n                for (int i3 = 0; i3 < N; i3++){\n                    int tmp = in.nextInt();\n                    if (m.containsKey(tmp))\n                        m.put(tmp, m.get(tmp) + 1);\n                    else\n                        m.put(tmp,1);\n                }\n                in.nextLine();\n            }\n            \n            List<Integer> l = new LinkedList<Integer>();\n            for (int i1 : m.keySet()){\n                if (m.get(i1)%2 == 1)\n                    l.add(i1);\n            }\n            Collections.sort(l);\n            for (int i2 = 0; i2 < N; i2++){\n                if (i2 < N-1)\n                    writer.print(l.get(i2)+\" \");\n                else\n                    writer.println(l.get(i2));\n            }\n\n        }\n\n\n        in.close();\n        writer.close();\n    }\n\n}"}
{"idx":"1075","func":"class template2\n{\n    static Scanner in = new Scanner(System.in);\n    \n    public static void main(String[] args)\n    {\n        \/*\n        fakemain(0);\/\/*\/\n        \n        \n        int TC = in.nextInt();\n        for(int tc = 1; tc <= TC; tc++)\n        {\n            int N = in.nextInt();\n            \n            int[][] list = new int[2*N - 1][N];\n            \n            int[] count = new int[2501];\n            for(int l = 0; l < list.length; l++)\n            {\n                for(int n = 0; n < N; n++)\n                {\n                    list[l][n] = in.nextInt();\n                    count[list[l][n]]++;\n                }\n            }\n            \n            \/\/ look for odd numbers\n            PriorityQueue<Integer> odds = new PriorityQueue<Integer>();\n            for(int ZSOI = 0; ZSOI < 2501; ZSOI++)\n            {\n                if((count[ZSOI] & 1) == 1)\n                {\n                    odds.offer(ZSOI);\n                }\n            }\n            \n            System.out.print(\"Case #\"+tc+\":\");\n            while(!odds.isEmpty())\n            {\n                System.out.print(\" \"+odds.poll());\n            }\n            System.out.println();\n        }\/\/*\/\n        \n        \/*\n        for(int TC = in.nextInt(); TC != 0; TC = in.nextInt())\n        {\n            fakemain(TC);\n        }\/\/*\/\n    }\n}"}
{"idx":"1076","func":"class B {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int nt = in.nextInt();\n        for(int t = 1; t <= nt; t++)\n        {\n            int n = in.nextInt();\n            int[] c = new int[2500];\n            for(int i = 0; i < (2*n-1)*n; i++)\n                c[in.nextInt() - 1]++;\n            System.out.print(\"Case #\"+t+\":\");\n            int j = 0;\n            for(int i = 0; i < c.length; i++)\n                if(c[i] % 2 != 0) {\n                    System.out.print(\" \" + (i+1));\n                    j++;\n                }\n            System.out.println();\n            if(j != n)\n                throw new AssertionError();\n        }\n    }\n}"}
{"idx":"1077","func":"class B {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        int T = Integer.parseInt(br.readLine());\n        int N = 2500;\n        for (int t = 1; t <= T; t++) {\n            int n = Integer.parseInt(br.readLine());\n            int[] aa = new int[N + 1];\n            for (int i = 0; i < 2 * n - 1; i++) {\n                StringTokenizer st = new StringTokenizer(br.readLine());\n                for (int j = 0; j < n; j++) {\n                    int a = Integer.parseInt(st.nextToken());\n                    aa[a]++;\n                }\n            }\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Case #\" + t + \":\");\n            for (int i = 1; i <= N; i++)\n                if (aa[i] % 2 == 1)\n                    sb.append(\" \" + i);\n            pw.println(sb);\n        }\n        pw.close();\n    }\n}"}
{"idx":"1078","func":"class B {\n    public static void main(String[] args) throws IOException {\n        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        final PrintStream ps = new PrintStream(System.out);\n        final StringBuilder solution = new StringBuilder();\n        \n        final int T = Integer.parseInt(br.readLine());\n        for (int t = 1; t <= T; t++) {\n            solution.append(\"Case #\" + t + \":\");\n            final int N = Integer.parseInt(br.readLine());\n            HashMap<Integer, Integer> numAppearances = new HashMap<Integer, Integer>();\n            for (int i = 0; i < (2 * N) - 1; i++) {\n                final String input = br.readLine();\n                final String[] inputArray = input.split(\" \");\n                \/\/ Each number is seen twice\n                for (String s : inputArray) {\n                    int sInt = Integer.parseInt(s);\n                    if (!numAppearances.containsKey(sInt)) {\n                        numAppearances.put(sInt, 1);\n                    } else {\n                        numAppearances.put(sInt, numAppearances.get(sInt) + 1);\n                    }\n                }\n            }\n                \n            ArrayList<Integer> solutionList = new ArrayList<Integer>();\n            for (Map.Entry<Integer, Integer> entry : numAppearances.entrySet()) {\n                int key = entry.getKey();\n                int value = entry.getValue();\n                if (value % 2 == 1) {\n                    solutionList.add(key);\n                }\n            }\n            \n            Collections.sort(solutionList);\n            for (int i : solutionList) {\n                solution.append(\" \" + i);\n            }\n            solution.append(\"\\n\");\n        }\n        ps.print(solution);\n    }\n}"}
{"idx":"1079","func":"class RankandFile {\n\n    public static void main ( String [] args ) throws FileNotFoundException {\n        System.setOut( new PrintStream( \"RankandFile.out\" ));\n        Scanner s = new Scanner( System.in ) ;\n        int tests = s.nextInt();\n        for ( int  test=1; test<=tests; test++ ){\n\n            int n = s.nextInt();\n            int [] count = new int[3000];\n            for ( int i=0; i<n*2-1; i++ ){\n\n                for ( int j=0; j<n; j++ ){\n                   count[ s.nextInt() ]++;\n                }\n            }\n            ArrayList<Integer> answer = new ArrayList<>();\n            for ( int i=0; i<count.length; i++ ){\n                if ( count[i]%2==1 ){\n                    answer.add( i );\n                }\n            }\n            Collections.sort(answer );\n            String k = \"\";\n            for ( int i=0; i<answer.size(); i++ ){\n                k = k + answer.get(i)+\" \";\n            }\n            System.err.println(\"Case #\"+test + \": \" +  k );\n            System.out.println(\"Case #\"+test + \": \" + k  );\n        }\n    }\n\n    \/\/public static void go ( int [][] data )\n\n}"}
{"idx":"1080","func":"class RankAndFile {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int m = Integer.valueOf(s.nextInt());\n        String[] result = new String[m];\n        for(int i = 0; i < m; ++i){\n            int n = Integer.valueOf(s.nextInt());\n            int[] input = new int[n * (2 * n - 1)];\n            for(int j = 0; j < n * (2 * n - 1); ++j){\n                input[j] = s.nextInt();\n            }\n            HashMap<Integer, Integer> counter = new HashMap<>();\n            for(int i1 : input){\n                if(!counter.containsKey(i1))\n                    counter.put(i1, 0);\n                counter.put(i1, counter.get(i1) + 1);\n            }\n            \n            ArrayList<Integer> result1 = new ArrayList<>();\n            \n            for(HashMap.Entry<Integer, Integer> entry : counter.entrySet()){\n                if(entry.getValue() % 2 != 0){\n                    result1.add(entry.getKey());\n                }\n            }\n            \n            Collections.sort(result1);\n            StringBuilder sb = new StringBuilder();\n            for(int i2 : result1){\n                sb.append(i2);\n                sb.append(\" \");\n            }\n            sb.deleteCharAt(sb.length() - 1);\n            result[i] = sb.toString();\n        }\n\n\n        for(int i = 0; i < m; ++i){\n            System.out.print(\"Case #\" + String.valueOf(i + 1) + \": \");\n            System.out.println(result[i]);\n        }\n\n    }\n}"}
{"idx":"1081","func":"class main {\n    \n    public static int[] numbers;\n    \n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\n            BufferedWriter bw = new BufferedWriter(new FileWriter(\"out.txt\", true));\n            PrintWriter out = new PrintWriter(bw);\n            int cases = Integer.parseInt(br.readLine());\n            int caseNo = 1;\n            for(int i = 0; i < cases; i++) {\n                int N = Integer.parseInt(br.readLine());\n                numbers = new int[2501];\n                for(int j = 0; j < (2*N)-1; j++) {\n                    String line = br.readLine();\n                    \/\/System.out.println(line);\n                    for(String number: line.split(\" \")) {\n                        int numberInt = Integer.parseInt(number);\n                        numbers[numberInt] = numbers[numberInt] + 1;\n                    }\n                    \/\/System.out.println(Arrays.toString(numbers));\n                }\n                String answer = \"\";\n                for(int k = 0; k < numbers.length; k++) {\n                    if(numbers[k] % 2 > 0) {\n                        answer = answer + k + \" \";\n                    }\n                }\n                out.println(\"Case #\" + caseNo + \": \" + answer);\n                caseNo++;\n            }\n            out.close();\n        } catch(IOException e) {\n            System.out.println(\"nooo\");\n        }\n    }\n\n}"}
{"idx":"1082","func":"class Gcj {\n  private int T;\n  private BufferedReader buff;\n  final static private boolean IS_DEBUG=false;\n  \/\/ final static private boolean IS_DEBUG=true;\n  private String[] list;\n  private int N;\n  private int MAX_HEIGHT=2501;\n  private int[] soldiers=new int[MAX_HEIGHT];\n\n  Gcj(){\n    buff=new BufferedReader(new InputStreamReader(System.in));\n    try{\n      T=Integer.parseInt(buff.readLine());\n    }\n    catch(Exception e){\n      System.err.println(e);\n    }\n  }\n\n  public static final void main(final String[] args) {\n    Gcj r = new Gcj();\n    for(int i=0; i<r.T; i++){\n      System.out.print(String.format(\"Case #%d: \", i+1));\n      try{\n      \/\/ INIT VARIABLES HERE\n      r.soldiers=new int[r.MAX_HEIGHT];\n      r.N=Integer.parseInt(r.buff.readLine());\n      r.list=new String[2*r.N-1];\n      for(int i1=0; i1<2*r.N-1; i1++) r.list[i1]=r.buff.readLine();\n      if(Gcj.IS_DEBUG){\n      System.err.println(\"debug: \"+\"list=\"+Arrays.toString(r.list));\n      \/\/ System.out.format(\"       \"+\"variable=\\n\");\n    }\n    }\n    catch(Exception e){\n      System.err.println(e);\n    }\n      PriorityQueue<Integer> set=new PriorityQueue<Integer>();\n    \n    for(int i2=0; i2<2*r.N-1; i2++){\n      String[] line=r.list[i2].split(\" \");\n      for(int j=0; j<line.length; j++)\n        r.soldiers[Integer.parseInt(line[j])]++;\n    }\n    \/\/ debugInfo(Arrays.toString(soldiers));\n    for(int i1=0; i1<r.MAX_HEIGHT; i1++){\n      if(r.soldiers[i1]%2==1) set.add(i1);\n    }\n    if(Gcj.IS_DEBUG){\n      System.err.println(\"debug: \"+\"N=\"+r.N);\n      \/\/ System.out.format(\"       \"+\"variable=\\n\");\n    }\n    if(Gcj.IS_DEBUG){\n      System.err.println(\"debug: \"+\"set=\"+set);\n      \/\/ System.out.format(\"       \"+\"variable=\\n\");\n    }\n    System.out.println(set.toString().replaceAll(\", \", \" \").replace(\"[\", \"\").replace(\"]\", \"\"));\n    }\n    return;\n  }\n}"}
{"idx":"1083","func":"class Round1A {\npublic static void main(String[] args) throws Exception{\n    Scanner input = new Scanner(System.in);\n    PrintWriter out = new PrintWriter(\"A.txt\");\n    int numCases = input.nextInt();\n    for (int i = 0 ; i < numCases; i++) {\n        int N = input.nextInt();\n\n        HashSet<Integer> st = new HashSet<Integer>();\n        for (int j = 0; j < (2*N -1) * N; j++) {\n            int n = input.nextInt();\n            \n                \n                    if (st.contains(n)) {\n                        st.remove(n);\n                    }else {\n                        st.add(n);\n                    }\n                \n            \n\n        }\n        ArrayList<Integer> subres = new ArrayList<>();\n        for (Integer num : st) {\n            subres.add(num);\n        }\n        Collections.sort(subres);\n        String res1 = \"\";\n        for (Integer num: subres) {\n            res1 = res1 + num + \" \";\n            \n        }\n        res1.trim();\n        String res = res1;\n        int index = i+1;\n        out.print(\"Case #\" + index + \": \"+res+\"\\n\");\n    }\n    input.close();\n    out.close();\n}\n\n}"}
{"idx":"1084","func":"class RA2016P2 {\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"C:\/Projects\/AdExtractor\/src\/codejam\/B-small-practice.in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"C:\/Projects\/AdExtractor\/src\/codejam\/B-small-practice.out\"));\n\n        int t = Integer.parseInt(br.readLine());\n        for (int x = 0; x < t; x++) {\n            int n = Integer.parseInt(br.readLine());\n            int[] cnt = new int[2501];\n            for (int i = 0; i < 2 * n - 1; i++) {\n                String[] s = br.readLine().split(\" \");\n                for (int j = 0; j < n; j++) {\n                    cnt[Integer.parseInt(s[j])]++;\n                }\n            }\n            \n            int[] res = new int[n];\n            int j = 0;\n            for (int i = 0; i < 2501; i++) {\n                if (cnt[i] % 2 != 0 && j < n) {\n                    res[j] = i;\n                    j++;\n                }\n            }\n            bw.write(\"Case #\" + (x + 1) + \": \");\n            for (int i = 0; i < n; i++) {\n                bw.write(res[i] + \" \"); \n            }\n            bw.write(\"\\n\"); \n            bw.flush();\n        }\n\n    }\n}"}
{"idx":"1085","func":"static void main(String[] arguments) throws Exception\n{\nBufferedReader br=new BufferedReader(new FileReader(new File(\"C:\\\\Java\\\\A-small-attempt0.in\")));\nBufferedWriter bw=new BufferedWriter(new FileWriter(new File(\"C:\\\\Java\\\\A-large.out\")));\nBufferedWriter bw2=new BufferedWriter(new FileWriter(new File(\"C:\\\\Java\\\\PractiseData2.out\")));    \n\nint T = java.lang.Integer.parseInt(br.readLine());\nString[] Line;\nint[] Arr = new int[2501];\nfor(int t=0;t<T;++t)\n{\n\n\/\/initialize zero\nfor(int j=0;j<2501;j++)\n{\nArr[j]=0;\n}\n\nint N = java.lang.Integer.parseInt(br.readLine());\n    for(int n=0;n<(N*2-1);++n)\n    {\n        Line=br.readLine().split(\" \");\n        for(int i=0;i<N;i++)\n        {\n        Arr[java.lang.Integer.parseInt(Line[i])]++;\n        }\n    }\n\n\nbw.write(\"Case #\"+(t+1)+\": \");\nint count=1;\nfor(int k=0;k<2501;k++)\n{\nif(Arr[k]>0)\nbw2.write(\"\"+k+\"=\"+Arr[k]+\" \");\nif(Arr[k]>0)\n{\nif(Arr[k]%2!=0)\n{\nif(count == N)\nbw.write(\"\"+(k));\nelse\nbw.write(\"\"+(k)+\" \");\ncount++;\n}\n}\n}\n\nbw.newLine();\n\n}\nbw.close();\nbw2.close();\n}\n}"}
{"idx":"1086","func":"class B {\n\n    public static void main(String[] args) throws Exception {\n        Locale.setDefault(Locale.US);\n\n        Scanner in = new Scanner(new File(\"problem.in\"));\n        PrintStream out = new PrintStream(new File(\"problem.out\"));\n\n        int T = in.nextInt();\n\n        for (int test = 1; test <= T; test++) {\n            int[] count = new int[2501];\n            int n = in.nextInt();\n            for (int i = 0; i < (2 * n - 1) * n; i++) {\n                int a = in.nextInt();\n                count[a]++;\n            }\n            int[] res = new int[n];\n            int k = 0;\n            for (int i = 1; i <= 2500; i++) {\n                if (count[i] % 2 == 1) {\n                    res[k] = i;\n                    k++;\n                }\n            }\n\n            out.printf(\"Case #%d:\", test);\n            for (int i = 0; i < n; i++) {\n                out.printf(\" %d\", res[i]);\n            }\n            out.println();\n        }\n\n    }\n}"}
{"idx":"1087","func":"class Validgrid {\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(new File(\"B-large1.in\"));\n        \/\/int [] tall = new int [100];\n        int total = scanner.nextInt();\n        \n        System.out.println(total);\n        \n        FileWriter fw = new FileWriter(\"out.txt\");\n        for(int i=0;i<total;i++){\n           int n=scanner.nextInt();\n           int[][] grid=new int[2*n-1][n];\n           for(int k=0;k<2*n-1;k++)\n            {\n                for(int j=0;j<n;j++)\n                {\n                    grid[k][j]=scanner.nextInt();\n                }\n            }\n        int[] count= new int[2500];\n         ArrayList<Integer> obj1 = new ArrayList<Integer>();\n        for(int i3=0;i3<2500;i3++)\n            count[i3]=0;\n        for(int i1=0;i1<2*n-1;i1++)\n        {\n            for(int j=0;j<n;j++)\n            {\n                count[grid[i1][j]-1]++;\n            }\n        }\n        \n        int k1=0;\n        for(int i2=0;i2<2500;i2++)\n        {\n            if(count[i2]%2!=0)\n                obj1.add(i2+1);\n        }\n        Collections.sort(obj1);\n           ArrayList<Integer> obj=obj1;\n           fw.write(\"Case #\"+(i+1)+\": \");\n           for(int k=0;k<n;k++)\n           {\n               \n               fw.write(obj.get(k)+\" \");\n           }\n           fw.write(\"\\n\");     \n               \n          \n        }\n        fw.close();\n        \n    }\n}"}
{"idx":"1088","func":"class RankAndFile {\n    \n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        \n        for (int i = 1; i <= n; i++) {\n            int x = input.nextInt();\n            List<Integer> numbers = new LinkedList<Integer>();\n            \n            for (int j = 0; j < (2*x-1)*x; j++) {\n                numbers.add(input.nextInt());\n            }\n            \n            Collections.sort(numbers);\n            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n            \n            for (Integer i1 : numbers) {\n                if (map.containsKey(i1)) {\n                    map.put(i1, map.get(i1) + 1);\n                } else {\n                    map.put(i1, 1);\n                }\n            }\n            \n            List<Integer> result = new LinkedList<Integer>();\n            \n            for (Integer i2 : map.keySet()) {\n                if (map.get(i2) % 2 == 0) continue;\n                result.add(i2);\n            }\n            \n            Collections.sort(result);\n            \n            StringBuilder formatter = new StringBuilder();\n            \n            for (Integer c : result) {\n                formatter.append(c);\n                formatter.append(\" \");\n            }\n            \n            System.out.println(String.format(\"Case #%s: %s\", i, formatter.toString()));\n        }\n        \n        input.close();\n    }\n\n}"}
{"idx":"1089","func":"class B{\n    static {\n        try {\n            System.setIn(new FileInputStream(new File(\"B-large.in\")));\n        }\n        catch(Exception e){\n            System.err.println(\"Error setting input\");\n        }\n        try {\n            System.setOut(new PrintStream(new File(\"B-large.out\")));\n        }\n        catch(Exception e){\n            System.err.println(\"Error setting output\");\n        }\n    }\n    public static void main(String[]args)throws Exception{\n        Scanner sc = new Scanner(System.in);\n        int cases = Integer.parseInt(sc.nextLine());\n\n        for(int Case=1;Case<=cases;++Case){\n            int count = sc.nextInt();\n            ArrayList<Integer> all = new ArrayList<>();\n            int total = (count*2-1)*count;\n            for(int i=0;i<total;++i){\n                all.add(sc.nextInt());\n            }\n            \/\/System.err.println(all);\n            Collections.sort(all);\n            int ind = 0;\n            out: while(all.size()>count){\n                int val = all.get(ind);\n                for(int i=ind+1;i<all.size();++i){\n                    if(all.get(i)==val){\n                        all.remove(i);\n                        all.remove(ind);\n                        ind = 0;\n                        continue out;\n                    }\n                }\n                ind++;  \n                \/\/System.err.println(all);\n\n            }\n            Collections.sort(all);\n\n            System.out.print(\"Case #\"+Case+\":\");\n            for(int i=0;i<all.size();++i){\n                System.out.print(\" \"+all.get(i));\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1090","func":"class Bsmall {\n    public Bsmall() {\n        super();\n    }\n\n    public static void main(String[] args) {\n        Bsmall bsmall = new Bsmall();\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt(); \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        Map<Integer,Integer> map=new HashMap<Integer,Integer>();\n        \n        for (int i = 1; i <= t; ++i) {\n            map.clear();\n            int n=in.nextInt();\n            for (int j=0;j<n*(2*n-1);j++) {\n               \n                String s=in.next();              \n               \n                    Integer integ=Integer.valueOf(s);\n                    if(map.get(integ)==null)\n                    map.put(integ,1);\n                    else {\n                       int val= map.get(integ);\n                        val=(val+1)%2;\n                        map.put(integ, val);\n                    }\n                \n            }\n            Set<Integer> keySet = map.keySet();\n            Iterator<Integer> iterator = keySet.iterator();\n            String result =\"\";\n            while(iterator.hasNext()) {\n                Integer integer = iterator.next();\n                if(map.get(integer)==1)\n                result+=\" \"+integer;\n            }\n            System.out.println(\"Case #\"+i+\":\"+result);\n          \n        }\n    }\n}"}
{"idx":"1091","func":"class RankandFile {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = Integer.parseInt(in.nextLine());\n        for (int t = 0; t < T; t++) {\n            int N = Integer.parseInt(in.nextLine());\n            int[] heights = new int[2501];\n            for (int i = 0; i < 2 * N - 1; i++) {\n                String[] inp = in.nextLine().split(\" \");\n                for (int j = 0; j < inp.length; j++) {\n                    heights[Integer.parseInt(inp[j])]++;\n                }\n            }\n            StringBuilder sb = new StringBuilder(\"\");\n            for (int i = 1; i < heights.length; i++) {\n                if(heights[i]%2==1)\n                    sb.append(i+\" \");\n            }\n            sb.deleteCharAt(sb.length()-1);\n            System.out.println(\"Case #\" + (t + 1) + \": \" + sb);\n        }\n\n    }\n\n}"}
{"idx":"1092","func":"class Round1A_RankFile {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/ TODO Auto-generated method stub\n\n        Scanner scan = new Scanner(new File(\"src\/Input.txt\"));\n        int T = Integer.parseInt(scan.nextLine());\n        for (int i = 1; i <= T; i++) {\n            int N = Integer.parseInt(scan.nextLine());\n            List<String> list = new ArrayList<String>();\n            for (int j = 0; j < (2*N - 1) ; j++) {\n                String line = scan.nextLine();\n                StringTokenizer str = new StringTokenizer(line);\n                \n                while(str.hasMoreTokens()) {\n                    String check = str.nextToken();\n                    \n                    if (list.contains(check)) {\n                        list.remove(check);\n                        \n                    } else {\n                        list.add(check);\n                    }\n                }\n            }\n            \n            int array[] = new int[N];\n            int j = 0;\n            for (String l : list) {\n                array[j] = Integer.parseInt(l);\n                j++;\n            }\n            Arrays.sort(array);\n            String ans = \"Case #\"+i+\":\";\n            for (int l : array) {\n                ans = ans + \" \" + l;\n            }\n            System.out.println(ans);\n        }\n    }\n\n}"}
{"idx":"1093","func":"class RankFile {\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        \n        int i, j, k, C = in.nextInt(), N, num; StringJoiner joiner;\n        Set<Integer> set = new HashSet<>(); List<Integer> list;\n        for(i = 1; i <= C; i++){\n            N = in.nextInt(); set.clear();\n            for(j = 0; j < 2* N-1; j++){\n                for(k = 0; k < N; k++){\n                    num = in.nextInt();\n                    if(set.contains(num))\n                        set.remove(num);\n                    else set.add(num);\n                }\n            }\n            list = new ArrayList<>(set);\n            Collections.sort(list);\n            System.out.print(\"Case #\" + i + \": \");\n            \n            joiner = new StringJoiner(\" \");\n            for(int nn : list) joiner.add(Integer.toString(nn));\n            System.out.println(joiner.toString());\n        }\n        in.close();\n    }\n}"}
{"idx":"1094","func":"class Main {\n\n    public static void main(String[] args) throws Exception {\n\n        final String FILE = \"B-large\";\n        PrintWriter outPrinter = new PrintWriter(new File(\"C:\\\\Users\\\\ivo.correia\\\\Downloads\\\\\" + FILE  + \".out\"));\n\n        Scanner scanIn = new Scanner(new File(\"C:\\\\Users\\\\ivo.correia\\\\Downloads\\\\\" + FILE + \".in\"));\n        final int T = Integer.parseInt(scanIn.nextLine());\n\n        for (int entry = 0; entry < T; entry++) {\n            final int N = Integer.parseInt(scanIn.nextLine());\n\n            int[] numbers = new int[2501];\n\n            for (int lines = 0; lines < N*2 -1; lines++)  {\n                String[] rawIn = scanIn.nextLine().split(\" \");\n                for (int i = 0; i < N; i++) {\n                    int number = Integer.parseInt(rawIn[i]);\n                    numbers[number] = numbers[number] + 1;\n                }\n            }\n\n            outPrinter.write(\"Case #\" + (entry + 1) + \":\");\n            for (int i = 0; i < 2501; i++) {\n                if (numbers[i] > 0 && numbers[i] % 2 == 1) {\n                    outPrinter.write(\" \" + i);\n                }\n            }\n\n            outPrinter.write(\"\\n\");\n        }\n\n        outPrinter.close();\n        scanIn.close();\n    }\n\n}"}
{"idx":"1095","func":"class R1A_2_1 {\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        Scanner scanner = new Scanner(new File(\"D:\/ForPrograms\/java\/TESTS\/B-large.in\"));\n        FileWriter writer = new FileWriter(\"D:\/ForPrograms\/java\/TESTS\/B-large.out\", false);\n        \n        int cases = scanner.nextInt();\n        \n        \n    \n        \n        for(int i=0;i<cases;i++){\n            \n            \n            \n            int cell = scanner.nextInt();\n            \n            int[][] arr = new int[cell*2-1][cell];\n            int[][] arrD = new int[cell*2-1][cell];\n            \n            int[] par = new int[cell];\n            int parC = 0;\n            \n            int wrongC = 0;\n            \n            for(int v=0;v<cell;v++){\n                par[v] = 0;\n            }\n            \n            int[][] cols = new int[cell][cell];\n            int[][] rows = new int[cell][cell];\n            \n            int[] allNums = new int[2600];\n            \n            for(int g=0;g<cell*cell;g++){\n                allNums[g] = 0;\n            }\n            \n            for(int g=0;g<cell*2-1;g++){\n                \n                for(int j=0;j<cell;j++){\n                    arr[g][j] = scanner.nextInt();\n                    arrD[g][j] = 1;\n                    \n                    allNums[arr[g][j]]++;\n                    \/\/scanner.next();\n                }\n                \n            }\n            \n            \n            \n            \n            \/*\n            for(int g=0;g<cell*2-1;g++){\n                \n                for(int j=0;j<cell*2-1;j++){\n                    \n                    if(arr[g][0] < arr[j][0]){\n                        int[] temp = new int[cell];\n                        temp = arr[g];\n                        arr[g] = arr[j];\n                        arr[j] = temp;\n                    }\n                    \/\/scanner.next();\n                }\n                \n            }\n            *\/\n            \n            int[] needed  = new int[cell];\n            int nC = 0;\n            \n            for(int v=0;v<allNums.length;v++){\n                if(allNums[v] != 0 && allNums[v] % 2 == 1){\n                    needed[nC] = v;\n                    nC++;\n                }\n            }\n            \n            Arrays.sort(needed);\n            \n            \n            \n            \n            System.out.println(Arrays.toString(needed));\n            \n            \n            writer.write(\"Case #\"+(i+1)+\": \");\n            \n            for(int v=0;v<cell;v++){\n                writer.write(needed[v]+\" \");\n            }\n            \n            \n            \n            writer.append('\\r');\n            writer.append('\\n');\n            \n        } \n        \n        \n        scanner.close();\n        writer.close();\n    }\n}"}
{"idx":"1096","func":"class main_22_2 {\n    public static void main(String[] args) {\n        main_22_2 m = new main_22_2();\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(\n                System.in)));\n        int t = in.nextInt(); \/\/ Scanner has functions to read ints, longs,\n                                \/\/ strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n            int times = in.nextInt();\n            int total = 2*times*times-times;\n            int[] input = new int[total];\n            for (int j = 0; j < total; j++) {\n                input[j] = in.nextInt();\n            }\n            Set<Integer> set = new HashSet<Integer>();\n            for(int i3 = 0; i3 < input.length; i3++){\n                if(!set.contains(input[i3])){\n                    set.add(input[i3]);\n                } else {\n                    set.remove(input[i3]);\n                }\n            }\n            \n            int[] ans1 = new int[set.size()];\n            int index = 0;\n            for(int i1 : set){\n                ans1[index++] = i1;\n            }\n            \n            Arrays.sort(ans1);\n            StringBuffer sb = new StringBuffer();\n            for(int i2 = 0; i2 < ans1.length; ++i2){\n                sb.append(ans1[i2]).append(\" \");\n            }\n\n            String ans = sb.substring(0, sb.length() - 1);\n            System.out.print(\"Case #\" + i + \": \" + ans);\n            System.out.println();\n        }\n    }\n    \n    \n}"}
{"idx":"1097","func":". *\/\nclass Test\n{\n    \n    public static void main (String[] args) throws java.lang.Exception\n    {\nint a=4,b=0;\ntry{\n    int c=a\/b;\n}\ncatch (Exception e)\n{\n    System.out.println(\"A\");\n}\nfinally\n{\n    System.out.println(\"B\");\n}\n}\n\n}"}
{"idx":"1098","func":"class B {\n    final Scanner sc = new Scanner(System.in);\n\n    Integer n;\n    HashMap<Integer,Integer> counter;\n    \n    public static void main (String[] args) {\n        B r = new B();\n        final int cn = r.sc.nextInt();\n        r.sc.nextLine();\n        for (int ci = 1; ci <= cn; ci++) {\n            r.counter = new HashMap<Integer,Integer>();\n            r.n = Integer.parseInt(r.sc.nextLine());\n            int length = 2*r.n-1;\n            for(int i = 0; i < length; i++){\n                String[] nums = r.sc.nextLine().split(\" \");\n                for(String num: nums){\n                    int ni = Integer.parseInt(num);\n                    if(r.counter.containsKey(ni)) {\n                        r.counter.put(ni, r.counter.get(ni)+1);\n                    } else {\n                        r.counter.put(ni, 1);\n                    }\n                }\n            }\n            System.out.printf(\"Case #%d: \", ci);\n            ArrayList<Integer> result = new ArrayList<Integer>();\n            for(Map.Entry<Integer,Integer> entry: r.counter.entrySet()){\n                if(entry.getValue() % 2 == 1){\n                    result.add(entry.getKey());\n                }\n            }\n            Collections.sort(result);\n            for(int i = 0; i < result.size(); i++){\n                if(i !=0 ){\n                    System.out.print(\" \");\n                }\n                System.out.print(result.get(i));\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1099","func":"class code {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int i = 1; i <= T; i++)\n        {\n            System.out.print(\"Case #\" + i + \": \");\n            int N = sc.nextInt();\n            int max = 0;\n            int C[][] = new int[2*N-1][N];\n            for(int j = 0; j < 2 * N - 1; j++)\n            {\n                for(int k = 0; k < N; k++)\n                {\n                    int F = sc.nextInt();\n                    if(F > max)\n                    {\n                        max = F;\n                    }\n                    C[j][k] = F;\n                }\n            }\n            int A[] = new int[max];\n            for(int j = 0; j < max; j++)\n            {\n                int check = j + 1;\n                for(int k = 0; k < 2 * N - 1; k++)\n                {\n                    for(int l = 0; l < N; l++)\n                    {\n                        if(C[k][l] == check)\n                        {\n                            A[j] = A[j] + 1;\n                        }\n                    }\n                }\n            }\n            for(int j = 0; j < max; j++)\n            {\n                if(A[j] % 2 == 1)\n                {\n                    System.out.print(j+1 + \" \");\n                }\n            }\n            System.out.println();\n        }\n    }\n    \n}"}
{"idx":"1100","func":"class Main {\n    public static Map<BigInteger, BigInteger> map = new HashMap<BigInteger, BigInteger>();\n    public static void main(String[] args) {\n        try {\n\n            String filePath = \"\/Users\/jimmychou516\/Downloads\/\";\n            String inputFileName = \"B-large.in.txt\";\n\/\/            String inputFileName = \"D-small-attempt0.in.txt\";\n\/\/            String inputFileName = \"D-large.in.txt\";\n            String outputFileName = \"output.txt\";\n            \/\/File file = new File(args[0]);\n\n            \/\/ Uncomment to output the file\n            PrintStream myconsole = new PrintStream(new File(filePath+outputFileName));\n            System.setOut(myconsole);\n\n            Scanner in = new Scanner(new BufferedReader(new FileReader(new File(filePath + inputFileName))));\n\n            \/\/Your Code Here\n            int n = in.nextInt(); \/\/ number of cases\n            for (int i = 1; i <= n; i++) {\n                int size = in.nextInt(); \/\/ number of N\n                List<Integer> list = new LinkedList<Integer>();\n\n                for (int cases = 1; cases <= size*size*2-size; cases++) {\n                    int num = in.nextInt();\n                    list.add(num);\n                }\n\n                Collections.sort(list);\n                int index = 0;\n                List<Integer> temp = new LinkedList<Integer>();\n                while (index < list.size() - 1) {\n                    if (list.get(index).equals(list.get(index + 1)) && index < list.size()) {\n                        index = index + 2;\n                    } else {\n                        temp.add(list.get(index));\n                        index++;\n                    }\n                }\n                if (temp.size() != size) {\n                    temp.add(list.get(list.size() - 1));\n                }\n\n                Collections.sort(temp);\n\n                String str = \"\";\n                for (Integer number : temp) {\n                    str = str + \" \" + number;\n                }\n                System.out.println(\"Case #\" + i + \": \"+ str.trim());\n\n            }\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n\n}"}
{"idx":"1101","func":". *\/\nclass RankAndFile\n{\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        Scanner sc = new Scanner(System.in);\n        \n        int t = sc.nextInt();\n        for(int testCase = 1; testCase<=t; testCase++)\n        {\n            int n = sc.nextInt();\n            \n            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n            int temp;\n            int x = 2*n-1;\n            for(int i = 0; i<x; i++)\n            {\n                for(int j=0; j<n; j++)\n                {\n                    temp = sc.nextInt();\n                    if(map.containsKey(temp))\n                    {\n                        map.put(temp, map.get(temp)+1);\n                    }\n                    else\n                    {\n                        map.put(temp, 1);\n                    }    \n                }\n            }\n            TreeSet<Integer> ts = new TreeSet<Integer>();\n            for(Map.Entry m: map.entrySet())\n            {\n                int key = (int)m.getKey();\n                int value = (int)m.getValue();\n                \n                if(value%2 != 0)\n                    ts.add(key);\n            }\n            \n            System.out.print(\"\\nCase #\"+testCase+\":\");\n            for(Integer i: ts)\n                System.out.print(\" \"+i);\n        }\n        \n    }\n}"}
{"idx":"1102","func":"class Soldier {\npublic static void main(String[] args) {\n        \n        \n        Scanner s = new Scanner(System.in);\n        int t = s.nextInt();\n        \n        for(int i = 1;i<=t;i++){\n            int n = s.nextInt();\n                    int[][] a = new int[n+n][n];\n                    \n                            for(int j=0;j<n+n-1;j++){\n                                for(int k =0;k<n;k++){\n                                    a[j][k] = s.nextInt();\n                                }\n                            }\n                            \n                            HashMap<Integer, Integer> h = new HashMap<Integer, Integer>();\n                                for(int j =0;j<n+n-1;j++){\n                                    for(int k=0;k<n;k++){\n                                        h.put(a[j][k], 0);\n                                    }\n                                }\n                                \n                                for(int j =0;j<n+n-1;j++){\n                                    for(int k=0;k<n;k++){\n                                        h.put(a[j][k], (h.get(a[j][k])+1));\n                                    }\n                                }\n                                int[] p = new int[n+n];\n                                int g=0;\n                                for(int j=0;j<n+n-1;j++){\n                                    for(int k=0;k<n;k++){\n                                    if((h.get(a[j][k]))%2!=0){ \n                                        \n                                        p[g]=a[j][k];\n                                        \n                                        g++;\n                                        h.put(a[j][k],2);\n                                        }\n                                }\n                                    }\n                                for(int m=1;m<n;m++){\n                                    for(int j=m;j>0;j--){\n                                        if(p[j]<p[j-1]){\n                                            int temp = p[j-1];\n                                            p[j-1] = p[j];\n                                            p[j] =temp;\n                                        }\n                                    }\n                               \n                                }\n                                \n                                System.out.print(\"Case #\" + i + \": \"); \n                                for(int k=0;k<n;k++){\n                                System.out.print(p[k] + \" \");\n                                }     \n                                System.out.println();\n                                }\n        }\n}"}
{"idx":"1103","func":"class rankAndFile {\n    \n    public static void main(String[] args) throws IOException {\n    FileInputStream in = null;\n    PrintWriter out = null;\n\n      try {\n         in = new FileInputStream(\"B-large.in\");\n         out = new PrintWriter( \"outputB-large.txt\" );\n\n         Scanner sc = new Scanner (in);\n         String line = sc.nextLine();\n\n         int T = Integer.parseInt(line);\n\n         for(int i=1; i<=T; i++) {\n             int N = Integer.parseInt(sc.nextLine());\n             \n             HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();\n             \n             for (int x=0; x < 2*N-1; x++) {\n                 line = sc.nextLine();\n                 for (int y=0; y < N; y++) {\n                     int key = Integer.parseInt(line.split(\" \")[y]);\n                     if(m.containsKey(key)) {\n                         int val = m.get(key);\n                         m.put(key, ++val);\n                     } else {\n                         m.put(key, 1);\n                     }\n                 }\n             }\n             \n             Vector<Integer> vector = new Vector<>();\n             Iterator it = m.entrySet().iterator();\n             while (it.hasNext()) {\n                Map.Entry pair = (Entry) it.next();\n                int key = (int) pair.getKey();\n                int val = (int) pair.getValue();\n                \n                if( val%2 == 1 ) {\n                    vector.add(key);\n                }\n             }\n                         \n             Collections.sort(vector);\n             \n             String output = \"Case #\" + i + \":\";\n             for(int j=0; j<vector.size(); j++) {\n                 output = output + \" \" + vector.elementAt(j);\n             }\n             \n             out.println( output );\n         }\n      } finally {\n         if (in != null) {\n            in.close();\n         }\n         if (out != null) {\n            out.close();\n         }\n      }\n    }\n}"}
{"idx":"1104","func":"class soldiers {\n\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for(int i = 1; i<t+1; i++){\n            int n = in.nextInt();\n            int[] sol = new int[2501];\n            for(int j = 0; j<(2*n)-1; j++){\n                for(int k = 0; k<n; k++){\n                    int x = in.nextInt();\n                    sol[x] += 1;\n                }\n            }\n            System.out.print(\"Case #\"+i+\": \");\n            for(int j = 0; j<2501; j++){\n                if(sol[j]%2 != 0){\n                    System.out.print(j+\" \");\n                }\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1105","func":"class RankAndFile {\n\n    private static final int MAX_HEIGHT = 2501;\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n\n        for (int i = 1; i <= t; ++i) {\n            int n = in.nextInt();\n            boolean[] odd = new boolean[MAX_HEIGHT]; \n            for(int j = 0; j < 2*n-1; j++){\n                for(int k = 0; k < n; k++){\n                    int h = in.nextInt();\n                    odd[h] = !odd[h];\n                }\n            }\n            \n            String answer = \"\";\n            \n            for(int j = 1; j < MAX_HEIGHT; j++){\n                if(odd[j]){\n                    answer+=j+\" \";\n                }\n            }\n            System.out.println(\"Case #\" + i + \": \"+answer.substring(0, answer.length()-1));\n        }\n\n        in.close();\n    }\n    \n}"}
{"idx":"1106","func":"class Soldiers {\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int t = Integer.parseInt(in.nextLine());\n        \n        for(int caseNum = 1; caseNum<=t; caseNum++){\n            int q =(Integer.parseInt(in.nextLine()) * 2) -1 ;\n            int[] heights = new int[2500];\n            for(int i = 0; i<q; i++){\n                String[] args1 = in.nextLine().split(\" \");\n                for(String s : args1){\n                    int foo = Integer.parseInt(s);\n                    heights[foo-1]++;\n                }\n            }\n            \n            List<String> ans = new ArrayList<String>();\n            for(int i =0; i<heights.length; i++){\n                if(heights[i]%2!=0){\n                    ans.add(String.valueOf(i+1));\n                }\n            }\n            \n            System.out.print(\"Case #\" + caseNum+\":\");\n            for(String s : ans){\n                System.out.print(\" \" + s);\n            }\n            System.out.println();\n        }\n    \n    }\n}"}
{"idx":"1107","func":"class Solution {\n    public static void main(String[] args) throws Exception {\n        Solution solution = new Solution();\n        Solution solution1 = new Solution();\n        String file = \"\/Users\/gaohan\/Downloads\/B-large.in\";\n        Scanner scanner = new Scanner(new FileInputStream(new File(file)));\n        int T = scanner.nextInt();\n        for (int i = 0; i < T; i++) {\n            int N = scanner.nextInt();\n            int lines = 2 * N - 1;\n            int[][] array = new int[lines][N];\n            for (int m = 0; m < lines; m++) {\n                for (int n = 0; n < N; n++) {\n                    array[m][n] = scanner.nextInt();\n                }\n            }\n            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n            for (int[] row : array) {\n                for (int cell : row) {\n                    Integer count = map.get(cell);\n                    if (count == null) {\n                        count = 0;\n                    }\n                    map.put(cell, count + 1);\n                }\n            }\n            List<Integer> res1 = new ArrayList<Integer>();\n            for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n                int val = entry.getValue();\n                if (val % 2 != 0) {\n                    res1.add(entry.getKey());\n                }\n            }\n            Collections.sort(res1);\n            List<Integer> res = res1;\n            System.out.print(\"Case #\" + (i + 1) + \":\");\n            for (int num : res) {\n                System.out.print(\" \" + num);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1108","func":"class Main {\n\n    static int[][] map;\n    static int index;\n    \n    public static void main(String[] args) throws IOException{\n        Scanner scan = new Scanner(System.in);\n        int cases =scan.nextInt();\n        for(int round = 1; round <= cases; round++) {\n            int n = scan.nextInt();\n            int[] arr = new int[2501];\n            Arrays.fill(arr, 0);\n            for(int i = 0; i < n * (2*n-1); i++) {\n                arr[scan.nextInt()]++;\n            }\n            \n            ArrayList<Integer> list = new ArrayList<Integer>();\n            for(int i = 0; i < arr.length; i++) {\n                if(arr[i] % 2 == 1) list.add(i);\n            }\n            \n            \n\/\/            map = new int[2 * n - 1][n];\n\/\/            for(int i = 0; i < 2 * n - 1; i++) {\n\/\/                for(int j = 0; j < n; j++) {\n\/\/                    map[i][j] = scan.nextInt();\n\/\/                }\n\/\/            }\n\/\/            for(int i = 0; i < n; i++) {\n\/\/                index = i;\n\/\/                Arrays.sort(map, new Comparator<int[]>() {\n\/\/                    @Override\n\/\/                    public int compare(int[] o1, int[] o2) {\n\/\/                        return Integer.compare(o1[index], o2[index]);\n\/\/                    }\n\/\/                });\n\/\/                \n\/\/                int(i =)\n\/\/                \n\/\/            }\n            \n            Collections.sort(list);\n            \n            System.out.printf(\"Case #\" + round + \":\");\n            for(Integer i: list) {\n                System.out.printf(\" %d\", i);\n            }\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"1109","func":"class B {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        for (int i = 1; i <= t; ++i) {\n\n            Set<Integer> set = new TreeSet<>();\n            int k = in.nextInt();\n\/\/            Set<Integer> set = new HashSet<>();\n            for(int l=0; l< (k *2)-1; l++ ){\n\/\/                int[] array = new int[k];\n\n                for(int n =0; n<k;n++){\n                    int num = in.nextInt();\n                    boolean remove = false;\n\n                    for(int a : set){\n                        if(a == num){\n                            remove = true;\n                            break;\n                        }\n                    }\n\n                    if(remove){\n                        set.remove(num);\n                    }else{\n                        set.add(num);\n                    }\n\n                }\n\n\n            }\n            String str = \"\";\n            for(int n : set){\n\n               str += \" \" + n;\n            }\n\n            System.out.println(\"Case #\" + i + \": \" + str.trim());\n        }\n    }\n\n}"}
{"idx":"1110","func":"class B {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner input = new Scanner(System.in);\n        ArrayList<Integer> hash = new ArrayList<Integer>();\n        for(int aux=0;aux<2501;aux++){\n            hash.add(0);\n        }\n        int numCases = input.nextInt();\n        for(int n =0;n<numCases;n++){\n            \n            Integer num = input.nextInt();\n            \/\/RESET\n            for(int aux=0;aux<2501;aux++){\n                hash.set(aux,0);\n            }\n            for(int i =0;i<num*2-1;i++){\n                for(int j =0;j<num;j++){\n                    Integer numerito = input.nextInt();\n                    \n                    hash.set(numerito,hash.get(numerito)+1);\n                    \n                }\n            }\n            ArrayList<Integer> lista = new ArrayList<Integer>();\n            for(int aux=0;aux<2501;aux++){\n                if(hash.get(aux) % 2 == 1){\n                    lista.add(aux);\n                    \n                    }\n            }\n            \n            lista.sort(null);\n            \n            System.out.printf(\"Case #\"+(n+1)+\":\");\n            for (Integer jojo:lista){\n                System.out.print(\" \"+jojo);\n            }\n            System.out.println();\n            }\n        \n    }\n\n}"}
{"idx":"1111","func":"class Round1A_2 {\n    public static void main(String args[]) throws FileNotFoundException, UnsupportedEncodingException{\n        Scanner scan = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(\"output.txt\", \"UTF-8\");\n        \n        System.out.println(\"Input Filename: \");\n        String filename = scan.nextLine();\n        try {scan = new Scanner(new File(filename));}\n        catch(Exception e){\n            System.out.println(\"Invalid File Input\");\n            return;\n        }\n        \n        int sets = scan.nextInt();\n        for(int k = 1; k <= sets; ++k){\n            int n = scan.nextInt(); scan.nextLine();\n            int files = (2*n) - 1;\n            HashMap<Integer, Integer> soldiers = new HashMap<Integer, Integer>();\n            for(int j = 0; j < files; ++j){\n                for(int l = 0; l < n; ++l){\n                    int i = scan.nextInt();\n                    if(soldiers.containsKey(i)){\n                        soldiers.put(i, soldiers.get(i)+1);\n                    }\n                    else {\n                        soldiers.put(i, 1);\n                    }\n                }\n            }\n            \n            int[] missing = new int[n];\n            int index = 0;\n            Iterator entries = soldiers.entrySet().iterator();\n            while(entries.hasNext()){\n                Entry e = (Entry) entries.next();\n                if((Integer)e.getValue() % 2 == 1){\n                    missing[index] = (Integer)e.getKey();\n                    index++;\n                }\n            \n            }\n            \n            Arrays.sort(missing);\n            out.print(\"Case #\" +k +\": \");\n            for(int i = 0; i < n; ++i){\n                out.print(missing[i]);\n                if(i < n-1) out.print(\" \");\n            }\n            out.println();\n            \n        }\n        out.close();\n    }\n}"}
{"idx":"1112","func":"class Solve2016R1A_B {\n    private static String filePath = \"B-large.in\";\n\n    public static void main(String[] args) {\n        StringBuffer answer = new StringBuffer();\n        final int MAXH = 2501;\n\n        try (Scanner sc = new Scanner(new File(filePath))) {\n            int T = sc.nextInt();\n            for (int i = 1; i <= T; i++) {\n                answer.append(\"Case #\" + i + \":\");\n                int N = sc.nextInt();\n                \n                int lineCnt = 2 * N - 1;\n                int[] heights = new int[MAXH];\n                for (int j = 0; j < lineCnt; j++) {\n                    for (int k = 0; k < N; k++) {\n                        int h = sc.nextInt();\n                        heights[h]++;\n                    }\n                }\n                for (int h = 0; h < MAXH; h++) {\n                    if (heights[h] % 2 != 0) {\n                        answer.append(\" \").append(h);\n                    }\n                }\n                answer.append(\"\\n\");\n            }\n            String outPath = \"answer.out\";\n            if (filePath != null && !filePath.equals(\"\")) {\n                outPath = filePath.substring(0, filePath.length() - 2) + \"out\";\n            }\n            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {\n                fos.write(answer.toString().getBytes());\n            }\n            System.out.println(answer);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1113","func":"class Sheep {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        final int T = Integer.parseInt(sc.nextLine());\n        for (int caseCount = 1; caseCount <= T; caseCount++) {\n            System.out.print(\"Case #\" + caseCount + \":\");\n            final int N = sc.nextInt();\n            int[] arr = new int[2501];\n            for (int i = 0; i < 2*N*N - N; i++) {\n                arr[sc.nextInt()]++;\n            }\n            ArrayList<Integer> al = new ArrayList<Integer>();\n            for (int i = 0; i < arr.length; i++) {\n                if (arr[i] % 2 != 0) {\n                    al.add(i);\n                }\n            }\n            Collections.sort(al);\n            for (int i = 0; i < al.size(); i++) {\n                System.out.print(\" \" + al.get(i));\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1114","func":"class A2problem {\n\n    public static void main(String[] args) throws IOException {\n        String filename = args.length > 0 ? args[0] : \"A2\\\\B-large.in\";\n        File fout = new File(\"A2\\\\resultL.txt\");\n        PrintStream out = new PrintStream(fout);\n\n        Scanner in = new Scanner(new File(filename));\n        String text = in.next();\n        int N = Integer.parseInt(text);\n\n        try{\n        for (int i = 0; i < N; i++) {\n\n            String ma = in.next();\n            int nn = Integer.parseInt(ma);\n\n            int nums[] = new int[(2 * nn - 1)*nn];\n            int k=0;\n            \n            for (int j = 0; j < nums.length; j++) {\n                ma = in.next();\n                nums[k++] = Integer.parseInt(ma);\n            }\n            Arrays.sort(nums);\n            int max = nums[nums.length-1];\n            int count[] = new int[max];\n            int count1[] = new int[max];\n            \n            for(int i3=0;i3<nums.length; i3++){\n                count[nums[i3]-1]++;\n            }\n            \n            for(int i1=0;i1<count.length; i1++){\n                if(count[i1] % 2 == 1 ){ count1[i1] = 1; }\n            }\n            \n            String s = \"\";\n            for(int i2=0;i2<count1.length; i2++){\n                if(count1[i2] == 1 ){ s += i2+1 + \" \"; }\n            }\n\n            String outRes = s;\n            out.println(\"Case #\" + (i + 1) + \": \" + outRes);\n            System.out.println(\"Case #\" + (i + 1) + \": \" + outRes);\n        }\n        }catch(Exception ex){\n            System.out.println(ex);\n        }\n    }\n}"}
{"idx":"1115","func":"class b {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n         \n        for (int n = 0; n < numCases; n++){\n            \n            int N = input.nextInt();\n            int t;\n            int [] hei = new int [2501];\n            for (int i = 0; i < (2*N-1)*N; i++){\n                t = input.nextInt();\n                hei[t]++;\n            }\n            int [] ans = new int [50];\n            int mm=0;\n            for (int i = 1; i < 2501; i++){\n                if(hei[i]%2==1){\n                    ans[mm]=i;\n                mm++;\n                }\n            }\n                \n            System.out.printf(\"Case #%d:\", n + 1);\n            for (int i = 0; i < N; i++)\n                System.out.printf(\" %d\",ans[i]);\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"1116","func":"class Solution {\n    public static void main(String[] args) {\n        File f = new File(args[0] + \".in\");\n        try (Scanner in = new Scanner(new FileInputStream(f));\n                BufferedWriter out = new BufferedWriter(\n                        new FileWriter(new File(args[0] + \".out\")))) {\n            int T = in.nextInt();\n            for (int i = 0; i < T; i++) {\n                int N = in.nextInt();\n                int rows = 2*N-1;               \n\n                int[] vals = new int[rows*N];\n                int idx = 0;\n                int max = Integer.MIN_VALUE;\n                for (int row = 0; row < rows; row++) {\n                    for (int col = 0; col < N; col++){\n                        vals[idx] = in.nextInt();\n                        if (vals[idx] > max)\n                            max = vals[idx];\n                        idx++;\n                    }\n                }\n                \n                int[] count = new int[max+1];\n                for (int j : vals) \n                    count[j]++;\n                \n                int[] solution = new int[N];\n                idx = 0;\n                for (int j = 0; j < count.length; j++)\n                    if (count[j] % 2 != 0)\n                        solution[idx++] = j;\n                \n                Arrays.sort(solution);\n                \n                String str = \"Case #\" + (i + 1) + \":\";\n                for (int j : solution)\n                    str += \" \" + j;\n                out.write(str);\n                out.newLine();\n                System.out.println(str);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1117","func":"final static int MAX = 2500;\n    public static void main(String[] args) throws java.lang.Exception {\n        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter wr = new PrintWriter(System.out);\n\n        int testCases = Integer.parseInt(rd.readLine());\n        int testCase = 1;\n        \n        while (testCases-- > 0) {\n            wr.print(\"Case #\" + testCase++ + \": \");\n            int n = Integer.parseInt(rd.readLine());\n            \n            int[] array = new int[MAX + 1];\n            \n            for (int i = 0; i < 2 * n - 1; i++) {\n                String[] tokens = rd.readLine().split(\" \");\n                for (int j = 0; j < n; j++) {\n                    array[Integer.parseInt(tokens[j])]++;\n                }\n            }\n            \n            ArrayList<Integer> list = new ArrayList<Integer>();\n            \n            for (int i = 1; i <= MAX; i++) {\n                if (array[i] % 2 != 0) { \n                    list.add(i);\n                }\n            }\n            \n            Collections.sort(list);\n            \n            for (int i : list) {\n                wr.print(i + \" \");\n            }\n            wr.println();\n        }\n\n        wr.close();\n    }\n}"}
{"idx":"1118","func":"class LastWord {\n    public static void main(String[] args) {\n        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))) {\n            int t = Integer.parseInt(br.readLine());\n            BufferedWriter bw = new BufferedWriter(new FileWriter(\"out.txt\"));\n            for(int i = 1; i <= t; i++) {\n                int n = Integer.parseInt(br.readLine());\n                HashMap<String, Integer> heightsToCount = new HashMap<>();\n                for(int j = 0; j < 2 * n - 1; j ++) {\n                    String[] split = br.readLine().split(\" \");\n                    for(String s : split) {\n                        if(heightsToCount.containsKey(s))\n                            heightsToCount.put(s, heightsToCount.get(s) + 1);\n                        else\n                            heightsToCount.put(s, 1);\n                    }\n                }\n                List<Integer> collect = heightsToCount.entrySet().stream().filter(set -> set.getValue() % 2 != 0).map(Map.Entry::getKey).map(s -> Integer.parseInt(s)).collect(Collectors.toList());\n                Collections.sort(collect);\n                bw.write(String.format(\"Case #%d:\", i));\n                for(Integer c : collect) bw.write( String.format(\" %d\", c));\n                bw.write(\"\\n\");\n            }\n            bw.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1119","func":"class RankAndFile {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = Integer.parseInt(sc.nextLine());\n        for (int i = 0; i < t; i++) {\n            int n = Integer.parseInt(sc.nextLine());\n            ArrayList<Integer> lists = new ArrayList<>();\n            for (int j = 0; j < n * n * 2 - n; j++) {\n                lists.add(sc.nextInt());\n            }\n            sc.nextLine();\n            HashSet<Integer> heights = new HashSet<>();\n            for (Integer height1: lists) {\n                if (heights.contains(height1)) {\n                    heights.remove(height1);\n                } else {\n                    heights.add(height1);\n                }\n            }\n            Integer[] list = heights.toArray(new Integer[heights.size()]);\n            Arrays.sort(list);\n            Integer[] missingList = list;\n            System.out.printf(\"Case #%d:\", i + 1);\n            for (int height: missingList) {\n                System.out.printf(\" %d\", height);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1120","func":"class Round1A2 {\n    public static void main(String[] args) {\n        Round1A2 q1 = new Round1A2();\n        Scanner in = new Scanner(System.in).useDelimiter(\"\\\\n\");\n        int numLines = in.nextInt();\n        \n        \n        for (int currLine = 0; currLine < numLines; currLine++) {\n            int numRow = in.nextInt();\n            TreeMap<Integer, Integer> hmap = new TreeMap<Integer,Integer>();\n            \n            int[][] array = new int[3][numRow * 2 - 1];\n            \n            for (int i = 0; i < numRow * 2 - 1; i++) {\n                String userInput = in.next();\n                String[] tokens = userInput.split(\"\\\\s\");\n                \n                for (int j = 0; j < tokens.length; j++) {\n                    if (hmap.containsKey(Integer.valueOf(tokens[j]))) {\n                        int value = hmap.get(Integer.valueOf(tokens[j])) + 1;\n                        hmap.put(Integer.valueOf(tokens[j]), value);\n                    } else {\n                        hmap.put(Integer.valueOf(tokens[j]), 1);\n                    }\n                }\n                \n                \/*for (int j = 0; j < tokens.length; j++) {\n                    array[j][i] = Integer.valueOf(tokens[j]);\n                }*\/\n                \n            }\n            \n            \/*for (int j = 0; j < numRow * 2 - 1; j++) {\n                for (int i = 0; i < 3; i++) {\n                    System.out.print(array[i][j]);\n                }\n                System.out.println();\n            }*\/\n\n            int tempLine = currLine + 1;\n            System.out.print(\"Case #\" + tempLine + \": \");\n            \n            String result = \"\";\n            for (int k : hmap.keySet()) {\n                if (hmap.get(k) % 2 == 1) {\n                    result += k + \" \";\n                }\n            }\n            result = result.substring(0, result.length()-1);\n            System.out.println(result);\n        }\n    }\n}"}
{"idx":"1121","func":"class RankAndFile {\n    public static final PrintStream out = System.out;\n    public static final BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    public int numCases;\n    \n    public static void main(String[] args) throws Exception {\n        RankAndFile r = new RankAndFile();\n        r.numCases = Integer.parseInt(RankAndFile.in.readLine().trim());\n        for (int i = 1; i <= r.numCases; i++) {\n            RankAndFile.out.print(\"Case #\" + i + \":\");\n            String line = RankAndFile.in.readLine();\n            Scanner scan = new Scanner(line);\n            int N = scan.nextInt();\n            int[] count = new int[2501];\n            for (int i1 = 0; i1 < 2 * N - 1; i1++) {\n                line = RankAndFile.in.readLine();\n                scan = new Scanner(line);\n                for (int j = 0; j < N; j++) {\n                    int height = scan.nextInt();\n                    count[height]++;\n                }\n            }\n            for (int i2 = 0; i2 < 2501; i2++) {\n                if (count[i2] % 2 == 1) {\n                    System.out.print(\" \" + i2);\n                }\n            }\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"1122","func":"class RankandFile {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\n        int t = in.nextInt();\n        for (int i = 1; i <= t; ++i) {\n            int N = in.nextInt();\n            HashSet<Integer>  set = new HashSet<>();\n            for (int j = 0; j < N * 2 - 1; j++) {\n                for (int j2 = 0; j2 < N; j2++) {\n                    int num = in.nextInt();\n                    if (set.contains(num)) {\n                        set.remove(num);\n                    }  else {\n                        set.add(num);\n                    }\n                }\n            }\n            int[] nums = new int[N];\n            int k = 0;\n            for (int key : set) {\n                nums[k++] = key;\n            }\n            Arrays.sort(nums);\n            System.out.print(\"Case #\" + i + \": \");\n            for (int j = 0; j < nums.length - 1; j++) {\n                System.out.print(nums[j] + \" \");\n            }\n            System.out.println(nums[nums.length -1]);\n        }\n    }\n\n}"}
{"idx":"1123","func":"class RankAndFile {\n    public static void main(String[] args) {\n        Scanner inputFile = null;\n\n        PrintWriter fileWriter = null;\n        try {\n            fileWriter = new PrintWriter(\"B-large-1.out\");\n            inputFile = new Scanner(new FileReader(\"B-large-1.in\"));\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        int numberCases = inputFile.nextInt();\n        inputFile.nextLine();\n        \n        for (int i = 0; i < numberCases; i++) {\n            int number = inputFile.nextInt();\n            inputFile.nextLine();\n\n            HashMap<Integer, Integer> map = new HashMap<>();\n            \n            for (int j = 0; j < number * 2 - 1; j++) {\n                String line = inputFile.nextLine();\n                Scanner lineScanner = new Scanner(line);\n                while(lineScanner.hasNext()) {\n                    int value = lineScanner.nextInt();\n                    if (map.containsKey(value)) {\n                        int freq = map.get(value);\n                        map.put(value, freq+1);\n                    } else {\n                        map.put(value, 1);\n                    }\n                }\n                lineScanner.close();\n            }\n            \n            Set<Entry<Integer, Integer>> setOfValues = map.entrySet();\n            Iterator<Entry<Integer, Integer>> iterator = setOfValues.iterator();\n            \n            ArrayList<Integer> resultList = new ArrayList<>();\n            \n            while(iterator.hasNext()) {\n                Entry<Integer, Integer> tempEntry = iterator.next();\n                if (tempEntry.getValue() % 2 != 0) {\n                    resultList.add(tempEntry.getKey());\n                }\n            }\n            \n            Collections.sort(resultList);\n            String resultString = \"\";\n            for (int j = 0; j < resultList.size() - 1; j++) {\n                resultString += resultList.get(j) + \" \";\n            }\n            \n            resultString += resultList.get(resultList.size() - 1);\n            \n            fileWriter.println(\"Case #\" + (i+1) + \": \" + resultString);\n        }\n        fileWriter.close();\n        inputFile.close();\n    }\n}"}
{"idx":"1124","func":"class RankAndFile {\n\n    public static void main(String[] args) throws IOException {\n        String s1 = \"B\", s2 = \"large\";\n        String fileName = s1 + \"-\" + s2 + \".in\", outputFileName = s1 + \"-\" + s2 + \".out\";\n        \/\/String fileName = s1 + \"-\" + s2 + \"-attempt0.in\", outputFileName = s1 + \"-\" + s2 + \"-attempt0.out\";\n        \/\/String fileName = \"sample.in\", outputFileName = \"sample.out\";\n        RankAndFile obj = new RankAndFile();\n        Path path = Paths.get(fileName);\n        Scanner scanner = new Scanner(path);\n        int numberOfCases = Integer.parseInt(scanner.nextLine());\n        Object[] result = new Object[numberOfCases];\n        for (int i = 0; i < numberOfCases; i++) {\n            int n = Integer.parseInt(scanner.nextLine());\n            ArrayList<int[]> rows = new ArrayList<>();\n            int lines = n * 2 - 1;\n            for (int j = 0; j < lines; j++) {\n                String[] heights = scanner.nextLine().split(\" \");\n                int[] height = new int[n];\n                for (int k = 0; k < n; k++) {\n                    height[k] = Integer.parseInt(heights[k]);\n                }\n                rows.add(height);\n            }\n            ArrayList<int[]> rows1 = new ArrayList<>();\n            for (int[] a : rows) {\n                int[] b = Arrays.copyOf(a, a.length);\n                rows1.add(b);\n            }\n            int target = 0, row = 0, min = 0;\n            for (int i1 = 0; i1 < rows1.get(0).length; i1++) {\n                min = 2500;\n                boolean find = false;\n                for (int j = 0; j < rows1.size(); j++) {\n                    int cur = rows1.get(j)[i1];\n                    if (cur < min) {\n                        min = cur;\n                        row = j;\n                    }\n                }\n                int count = 0, first = 0, second = 0;\n                for (int j = 0; j < rows1.size(); j++) {\n                    int cur = rows1.get(j)[i1];\n                    if (cur == min) {\n                        count++;\n                        if (count == 2) {\n                            second = j;\n                            find = true;\n                            break;\n                        } else \n                            first = j;\n                    }\n                }\n                if (!find) {\n                    target = i1;\n                    break;\n                } else {\n                    rows1.remove(second);\n                    rows1.remove(first);\n                }\n            }\n            ArrayList<Integer> set = new ArrayList<>();\n            for (int[] a : rows) {\n                set.add(a[target]);\n            }\n            for (int a : rows1.get(row)) {\n                if (a == min) continue;\n                for (int i2 = 0; i2 < set.size(); i2++) {\n                    if (set.get(i2) == a) {\n                        set.remove(i2);\n                        break;\n                    }\n                }\n            }\n            Collections.sort(set);\n            StringBuilder result1 = new StringBuilder(set.size());\n            for (int a : set) {\n                result1.append(a + \" \");\n            }\n            result[i] = result1;\n            System.out.println(i);\n        }\n        PrintWriter out = new PrintWriter(outputFileName);\n        for (int i = 0; i < result.length; i++) {\n            String s = \"Case #\" + (i + 1) + \": \" + result[i];\n            out.println(s);\n        }\n        out.close();\n        scanner.close();\n    }\n\n}"}
{"idx":"1125","func":"class RankAndFile {\n\n    public static void main(String s[]) {\n        RankAndFile solution = new RankAndFile();\n        Scanner scanner = null;\n        StringBuilder builder = new StringBuilder();\n        try {\n            scanner = new Scanner(new File(\"B-large.in\"));\n            int T = scanner.nextInt();\n            for (int i = 0; i < T; i++) {\n                int N = scanner.nextInt();\n                int repeat = 2 * N - 1;\n                int[][] lists = new int[repeat][N];\n                for (int j = 0; j < repeat; j++) {\n                    for (int k = 0; k < N; k++) {\n                        lists[j][k] = scanner.nextInt();\n                    }\n                }\n                builder.setLength(0);\n                Map<Integer, Integer> countMap = new HashMap<>();\n                \n                for (int j = 0; j < 2 * N - 1; j++) {\n                    for (int k = 0; k < N; k++) {\n                        if (countMap.containsKey(lists[j][k])) {\n                            int count = countMap.get(lists[j][k]);\n                            count++;\n                            countMap.put(lists[j][k], count);\n                \n                        } else {\n                            countMap.put(lists[j][k], 1);\n                        }\n                    }\n                }\n                Iterator<Entry<Integer, Integer>> iterator = countMap.entrySet().iterator();\n                List<Integer> missingElements = new ArrayList<Integer>();\n                \n                while (iterator.hasNext()) {\n                    Entry<Integer, Integer> entry = iterator.next();\n                    if (entry.getValue() % 2 == 1) {\n                        missingElements.add(entry.getKey());\n                    }\n                }\n                Collections.sort(missingElements);\n                List<Integer> missingList = missingElements;\n                for (int num : missingList) {\n                    builder.append(num + \" \");\n                }\n                System.out.println(String.format(\"Case #%d: %s\", i + 1, builder.toString()));\n\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (scanner != null) {\n                scanner.close();\n            }\n        }\n    }\n}"}
{"idx":"1126","func":"class B {\n\n    public static void main(String[] args) throws IOException {\n        \/\/BufferedReader f = new BufferedReader(new FileReader(\"B-small-attempt1.in\"));\n        \/\/PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\n            \/\/    \"B-small.out\")));\n         BufferedReader f=new BufferedReader(new FileReader(\"B-large.in\"));\n         PrintWriter out=new PrintWriter(new BufferedWriter(new\n         FileWriter(\"B-large.out\")));\n\n        int t,n;\n        t = Integer.parseInt(f.readLine());\n        for(int tt = 1; tt <= t; tt++) {\n            int[] dp=new int[2501];\n            n=Integer.parseInt(f.readLine());\n            \n            \n            for(int j=0;j<2*n-1;j++){\n                StringTokenizer st=new StringTokenizer(f.readLine());\n                for(int k=0;k<n;k++){\n                    \n                    dp[Integer.parseInt(st.nextToken())]++;\n                }\n            }\n            \n            \n            int l=1;StringBuffer buf=new StringBuffer();\n            \n            \/\/critical code\n            while(l<2501){\n                if(dp[l]!=0 && dp[l]%2==1){\n                    \/*\n                    if(buf.length()==n){\n                        buf.append(l);break;\n                    }\n                    else*\/\n                    \n                    buf.append(l+\" \");\n                    \n                }\n                l++;\n                \n            }\n            \n            buf.deleteCharAt(buf.length()-1);\n        System.out.println(\"Case #\" + (tt) + \": \"+buf);\n            out.println(\"Case #\" + (tt) + \": \" + buf);\n        }\n\n         f.close();out.close();\n         System.out.println(\"done bro!\");\n    }\n\n}"}
{"idx":"1127","func":"class G2{\n    public static void main(String args[])throws IOException{\n        \/\/Scanner in=new Scanner(System.in);\n        Scanner in=new Scanner(new File(\"input.in\"));\n        PrintWriter pw=new PrintWriter(new FileWriter(new File(\"output.out\")));\n        int T=in.nextInt();\n        for(int t=1;t<=T;t++){\n            int n=in.nextInt();\n            HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();\n            for(int i=0;i<2*n-1;i++){\n                for(int j=0;j<n;j++){\n                    int tmp=in.nextInt();\n                    Integer obj=new Integer(tmp);\n                    if(hm.containsKey(obj)){\n                        hm.put(obj,hm.get(obj)+1);\n                    }else\n                        hm.put(obj,1);\n                }\n            }\n            List<Integer> list=new ArrayList<Integer>();\n            for (Map.Entry<Integer, Integer> entry : hm.entrySet()) {\n                if ( (Integer)entry.getValue()%2!=0) {\n                    list.add(entry.getKey());\n                }\n            }\n            Collections.sort(list);\n            String res=list.toString();\n            \/\/System.out.println(\"Case #\"+t+\": \"+res.substring(1,res.length()-1).replaceAll(\",\",\"\"));\n            pw.println(\"Case #\"+t+\": \"+res.substring(1,res.length()-1).replaceAll(\",\",\"\"));\n        }\n            System.out.println(\"Done\");\n        pw.close();                                       \n    }\n}"}
{"idx":"1128","func":"class Jam16_2_1A {\n    static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n    public static void main(String[]args)throws Exception{\n        int t=(int)getInt();\n        \n        for(int c=0;c<t;c++) {\n            Set<Integer> s=new TreeSet<Integer>();\n            ArrayList<Integer> arr=new ArrayList<Integer>();\n            System.out.print(\"Case #\"+(c+1)+\": \");\n            int n=(int)getInt();\n            for(int i=0;i<(2*n-1);i++) {\n                String arr1[]=br.readLine().split(\" \");\n                int a[]=new int[arr1.length];\n                for(int i1=0;i1<a.length;i1++){\n                    a[i1]=Integer.parseInt(arr1[i1]);\n                }\n                int par[]=a;\n                for(int j=0;j<n;j++) {\n                    s.add(par[j]);\n                    arr.add(par[j]);\n                }\n            }\n            for(int i:s) {\n                if(Collections.frequency(arr, i)%2==1) {\n                    System.out.print(i+\" \");\n                }\n            }\n            System.out.println();\n        }\n    }\n    static long getInt()throws Exception{\n        int n=Integer.parseInt(br.readLine());\n        return n;\n    }\n\n\n}"}
{"idx":"1129","func":"class B {\n\n    public static void main(String[] args) {\n        try {\n            Scanner scan = new Scanner(new File(\"roundA\/B.in\"));\n            PrintWriter w = new PrintWriter(new FileWriter(\"roundA\/B.out\"));\n            int caseC = scan.nextInt();\n            for (int i = 1; i <= caseC; i++) {\n                HashSet<Integer> set = new HashSet<Integer>();\n                int n = scan.nextInt();\n                for(int j=0;j<(2*n-1)*n;j++){\n                    int no = scan.nextInt();\n                    if(set.contains(no)){\n                        set.remove(no);\n                    }else{\n                        set.add(no);\n                    }\n                }\n\n                Integer[] list = set.toArray(new Integer[set.size()]);\n                Arrays.sort(list);\n                w.print(String.format(\"Case #%d:\", i));\n                for(Integer number: list){\n                    w.print(String.format(\" %d\", number));\n                }\n                w.println();\n            }\n            scan.close();\n            w.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1130","func":"class B {\n    public static void main(String[] args) {\n        try {\n            System.setIn(new FileInputStream(new File(\"in.txt\")));\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        try {\n            System.setOut(new PrintStream(new File(\"out.txt\")));\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        Scanner s = new Scanner(System.in);\n        \n        int t = s.nextInt();\n        for (int c = 0; c < t; c++) {\n            int n = s.nextInt();\n            int[] good = new int[3000];\n            for (int i = 0;i < 2 * n * (n-1) + n; i++) {\n                int aa = s.nextInt();\n                good[aa]++;\n                \/\/System.out.println(aa);\n            }\n            \/\/System.out.println(Arrays.toString(good));\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Case #\" + (c + 1) + \":\");\n            for (int i = 0;i < good.length; i++) {\n                if (good[i] % 2 == 1) {\n                    sb.append(\" \" + i);\n                }\n            }\n            System.out.println(sb);\n        }\n    }\n}"}
{"idx":"1131","func":"class B_Ranks {\n    \n    public static void main(String[] args) throws IOException{\n        \/\/ 0. My Small Practice\n        \/\/FileReader reader = new FileReader(\"test_case_gcj2016Round1A\/B-mysmall-practice.in\");\n        \/\/FileWriter writer = new FileWriter(\"test_case_gcj2016Round1A\/B-mysmall-practice.out\");\n\n        \/\/ 1. Small Practice\n        \/\/ Judged response for input A-small: Correct!\n        \/\/FileReader reader = new FileReader(\"test_case_gcj2016Round1A\/B-small-attempt0.in\");\n        \/\/FileWriter writer = new FileWriter(\"test_case_gcj2016Round1A\/B-small-attempt0.out\");\n\n        \/\/ 2. Large Practice\n        FileReader reader = new FileReader(\"test_case_gcj2016Round1A\/B-large.in\");\n        FileWriter writer = new FileWriter(\"test_case_gcj2016Round1A\/B-large.out\");\n        \n        \n        BufferedReader bufferedReader = new BufferedReader(reader);\n        String line = bufferedReader.readLine();\n        int noOfCases = Integer.parseInt(line);\n        System.out.println(noOfCases);\n                \n        for (int i = 1; i <= noOfCases; i++){\n            \/\/ 1. read data\n            line = bufferedReader.readLine();\n            int n = Integer.parseInt(line);\n            int[][] mat = new int[2*n-1][n];\n            for (int j = 0; j < 2*n-1; j++){\n                line = bufferedReader.readLine();\n                String[] nos = line.split(\" \");\n                int[] array = Arrays.asList(nos).stream().mapToInt(Integer::parseInt).toArray();\n                mat[j] = array;\n            }\n            int[] res1 = new int[n];\n            \n            HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n            \n            for (int i1 = 0; i1 < 2*n-1; i1++){\n                for (int j = 0; j < n; j++){\n                    if (!count.containsKey(mat[i1][j])){\n                        count.put(mat[i1][j], 1);\n                    }\n                    else{\n                        int c = count.get(mat[i1][j]);\n                        count.replace(mat[i1][j], c+1);\n                    }\n                }\n            }\n            \n            int i2 = 0;\n            \n            Iterator it = count.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry pair = (Map.Entry)it.next();\n                \/\/HashMap.Entry pair = (Map.Entry)it.next();\n                if (((int) pair.getValue()) % 2 == 1){\n                    res1[i2] = (int) pair.getKey();\n                    i2++;\n                }\n                \/\/System.out.println(pair.getKey() + \" = \" + pair.getValue());\n                it.remove(); \/\/ avoids a ConcurrentModificationException\n            }\n            \n            Arrays.sort(res1);\n            \n            \/\/System.out.println(line);\n            int[] res = res1;\n            \n            String outputLine = \"Case #\" + i + \": \";\n            \/\/System.out.print(outputLine);\n            \/\/writer.write(outputLine);\n            for (int idx = 0; idx < res.length; idx++){\n                outputLine += res[idx] + \" \";\n            }\n            outputLine += \"\\n\";\n            System.out.print(outputLine);\n            writer.write(outputLine);\n        }\n           \n        reader.close();\n        writer.close();    \n    }\n    \n}"}
{"idx":"1132","func":"class Program2 {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner sc=new Scanner(System.in);\n        int T=sc.nextInt();\n        for(int i=1;i<=T;i++){\n            int N=sc.nextInt();\n            Hashtable<Integer,Integer> numbers=new Hashtable<Integer,Integer>();\n            for(int iter=0;iter<(2*N*N-N);iter++){\n                int input=sc.nextInt();\n                int count=0;\n                if(numbers.containsKey(input)){\n                    count=numbers.get(input);\n                }\n                numbers.put(input, count+1);\n            }\n            int[] finalList=new int[N];\n            int index=0;\n             Set<Integer> keys = numbers.keySet();\n                for(Integer key: keys){\n                    int counter=numbers.get(key);\n                    if(counter%2!=0){\n                        finalList[index++]=key;\n                    }\n                }\n                Arrays.sort(finalList);\n                String output=(\"Case #\"+i+\":\");\n                \n                for(int k:finalList){\n                    output+=(\" \"+k);    \n                }\n                System.out.println(output);\n        }\n        \/\/Large();\n        \n        \n        \n        \n    }\n\n}"}
{"idx":"1133","func":"class Rank {\n\n    public static void main(String[] args) throws Exception {\n        \/\/ TODO Auto-generated method stub\n        String inputFile = \"B-large1.in\";\n        BufferedInputStream bs = new BufferedInputStream(new FileInputStream(inputFile));\n        BufferedReader r = new BufferedReader(new InputStreamReader(bs, StandardCharsets.UTF_8));\n        int t = Integer.parseInt(r.readLine());\n        int count=1;\n        String outputFile = \"B-large_output1.txt\";\n        PrintWriter p = new PrintWriter(outputFile);\n        \n        while(t > 0) {\n            int n = Integer.parseInt(r.readLine());\n            Map<Integer,Integer> countMap = new HashMap<>();\n            for(int i=0;i<2*n-1;i++) {\n                \n                String str[] = r.readLine().split(\" \");\n                for(int j=0;j<str.length;j++) {\n                    int num = Integer.parseInt(str[j]);\n                    if(countMap.get(num) == null) \n                        countMap.put(num, 0);\n                    countMap.put(num, countMap.get(num)+1);\n                }\n            }\n            List<Integer> l = new ArrayList<>();\n            PriorityQueue<Integer> q = new PriorityQueue<>();\n            for(Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n                if(entry.getValue()%2 == 1)\n                    l.add(entry.getKey());\n            }\n            Collections.sort(l);\n            String ans = \"\";\n            for(Integer num : l) {\n                ans+= num + \" \";\n            }\n            p.write(\"Case #\"+count+\": \" + ans.substring(0,ans.length()-1)+\"\\n\");\n            t--;\n            count++;\n        }\n        p.close();\n        r.close();\n    }\n\n}"}
{"idx":"1134","func":"class TaskB {\n    public static Scanner in = new Scanner(System.in);\n    \n    public static void main(String[] args){\n        int numOfCases = in.nextInt();\n        for(int i = 0 ; i < numOfCases; i++){\n            int n = in.nextInt();\n            int[] res = new int[n];\n            int lists[][] = new int[2*n-1][n];\n            int[] nums = new int[2501];\n            for(int j = 0 ; j < 2*n-1;j++){\n                for(int k = 0 ; k < n ; k++){\n                    lists[j][k] = in.nextInt();\n                }\n            }\n            for(int j = 0 ; j < 2*n-1;j++){\n                for(int k = 0 ; k < n ; k++){\n                    nums[lists[j][k]] ++;\n                }\n            }\n            int cnt = 0;\n            for(int j = 0 ; j < nums.length;j++){\n                if(nums[j]%2 != 0){\n                    res[cnt] = j;\n                    cnt++;\n                }\n            }\n            System.out.print(\"Case #\" + (i+1) + \": \");\n            for(int j  = 0 ; j < res.length ; j++){\n                System.out.print(res[j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1135","func":"class Rank {\n    public static void main(String[] args) throws Exception {\n        Scanner s = new Scanner(new File(\"B-large.in\"));\n        int numCases = Integer.parseInt(s.nextLine());\n        for(int c = 1;c<=numCases;c++) {\n            int n = Integer.parseInt(s.nextLine());\n            HashMap<Integer,Integer> counts = new HashMap<>();\n            for(int i = 0;i<2*n-1;i++) {\n                String line = s.nextLine();\n                String[] lineArr = line.split(\"\\\\s+\");\n                for(String xs : lineArr) {\n                    int x = Integer.parseInt(xs);\n                    if(!counts.containsKey(x)) {\n                        counts.put(x, 0);\n                    }\n                    counts.put(x,counts.get(x)+1);\n                }\n                \n                \n                \n            }\n            ArrayList<Integer> missing = new ArrayList<Integer>();\n            for(int x : counts.keySet()) {\n                if(counts.get(x) % 2 == 1) {\n                    missing.add(x);\n                }\n            }\n            Collections.sort(missing);\n            System.out.print(\"Case #\" + c + \":\");\n            for(int x : missing) {\n                System.out.print(\" \" + x);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1136","func":"class BB {\n    \n\/\/    private static PrintWriter out;\n    \n    public static void main(String[] args) throws IOException{\n    String filename = \"B-large\";\n\/\/    String filename = \"1A\/A-small\";\n\/\/    out = new PrintWriter(new BufferedWriter(new FileWriter(filename + \".out\")));\n    System.setIn(new FileInputStream(filename + \".in\"));\n    Scanner in = new Scanner(System.in);\n    int T = in.nextInt();        \n    String line = in.nextLine();\n    for(int z = 1; z <= T; z++){\n        System.out.print(\"Case #\"+z+\": \");\n        int N = in.nextInt();\n        line = in.nextLine();\n        HashSet nums = new HashSet(); \n        for (int i = 0; i < (2 * N) - 1; i++) {\n        for (int j = 0; j < N; j++) {\n            int num = in.nextInt();            \n            if(nums.contains(num))\n            nums.remove(num);\n            else\n            nums.add(num);\n            \n            \n        }        \n        }\n        TreeSet myTreeSet = new TreeSet();\n        myTreeSet.addAll(nums);\n        for (Object n : myTreeSet) {\n        System.out.print(n);\n        System.out.print(\" \");\n        }\n        System.out.println(\"\");\n    }\n    \n\/\/    out.close();\n    System.exit(0);\n    }\n    \n\/\/    public static void print(String str){\n\/\/    System.out.print(str);\n\/\/    out.print(str);\n\/\/    }\n\/\/    public static void println(String str){\n\/\/    System.out.println(str);\n\/\/    out.println(str);\n\/\/    }\n}"}
{"idx":"1137","func":"class rankandfile {\n    private static Scanner in;\n\n    public static void main(String[] args) {\n        in = new Scanner(System.in);\n\n        int numCases = in.nextInt();\n        for (int test = 1; test <= numCases; test++) {\n            System.out.print(\"Case #\" + test + \":\");\n            int n = in.nextInt();\n            int[] numbers = new int[2501];\n            Arrays.fill(numbers, 0);\n            for(int i = 0; i < n; i++ ){\n                for(int j = 0; j < 2 * n -1; j ++){\n                    numbers[in.nextInt()]++;\n                }\n            }\n            Set<Integer> solution = new TreeSet<>();\n            for(int i =0; i < numbers.length; i++){\n                if(numbers[i] % 2 != 0){\n                    solution.add(i );\n                }\n            }\n            for(Integer i : solution){\n                System.out.print(\" \" + i);\n            }\n            System.out.println();\n        }\n\n        System.exit(0);\n    }\n}"}
{"idx":"1138","func":"class RankAndFile {\n    public static void main(String[] args) throws Exception {\n         Scanner input = new Scanner(new File(\"input\/b_large.in\"));\n         PrintWriter output = new PrintWriter(new File(\"output\/b_large.out\"));\n\/\/        Sjanner input = new Scanner(System.in);\n\/\/        PrintWriter output = new PrintWriter(System.out);\n\n        int testCases = input.nextInt();\n        input.nextLine();\n        primary: for (int casen = 1; casen <= testCases; casen++) {\n            output.printf(\"Case #%d:\", casen);\n            \n            int n = input.nextInt();\n            Set<Integer> heights = new TreeSet<Integer>();\n            for (int i = 1; i < 2 * n; i++) {\n                for (int j = 0; j < n; j++) {\n                    int cur = input.nextInt();\n                    if (!heights.remove(cur)) {\n                        heights.add(cur);\n                    }\n                }\n            }\n            for (int x : heights) {\n                output.print(\" \" + x);\n            }\n            output.println();\n            output.flush();\n        }\n        output.close();\n    }\n}"}
{"idx":"1139","func":"class Main {\n\n    public static void main(String[] args) {\n        \n        \n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int testCases = in.nextInt();\n        for (int t=1; t<=testCases; t++) {\n            int N = in.nextInt();\n            \n            int [][] a = new int [2*N-1][N];\n            \n            Set<Integer> marks = new HashSet<Integer>();\n            for (int i=0; i<2*N-1; i++) {\n                for (int j=0; j<N; j++) {\n                    int next = in.nextInt();\n                    if (marks.contains(next)) {\n                        marks.remove(next);\n                    } else {\n                        marks.add(next);\n                    }\n                }\n            }\n\n            System.out.print(\"Case #\"+t+\": \");\n            for (int i=0; i<N; i++) {\n                int smallest = -1;\n                for (Integer mark : marks) {\n                    if (smallest == -1) smallest = mark;\n                    else if (mark<smallest) smallest = mark;\n                }\n                marks.remove(smallest);\n                System.out.print(smallest+(i==N-1 ? \"\" : \" \"));\n            }\n            System.out.println();\n        }\n        \n    }\n    \n}"}
{"idx":"1140","func":"class Driver {\n    private static BufferedReader br;\n    private static BufferedWriter bw;\n\n    \/*\n     * Apache Commons Lang Availble @\n     * https:\/\/commons.apache.org\/proper\/commons-lang\/\n     *\/\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        try {\n            br = new BufferedReader(new FileReader(new File(\"input.txt\")));\n            bw = new BufferedWriter(new FileWriter(new File(\"output.txt\")));\n\n            final long numCases = Long.parseLong(br.readLine());\n            for (long i = 1; i <= numCases; i++) {\n                \/\/ read the inputs\n                final int n = Integer.parseInt(br.readLine());\n\n                \/\/ do stuff\n                HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\n                for (int j = 0; j < (n * 2) - 1; j++) {\n                    String s = br.readLine();\n                    StringTokenizer st = new StringTokenizer(s, \" \");\n                    while (st.hasMoreTokens()) {\n                        Integer key = Integer.parseInt(st.nextToken());\n                        if (map.containsKey(key)) {\n                            map.put(key, map.get(key) + 1);\n                        } else {\n                            map.put(key, 1);\n                        }\n                    }\n                }\n\n                List<Integer> results = new ArrayList<Integer>();\n                for (Integer key : map.keySet()) {\n                    if (map.get(key) % 2 == 0) {\n                        continue;\n                    }\n                    results.add(key);\n                }\n\n                results.sort(new Comparator<Integer>() {\n\n                    @Override\n                    public int compare(Integer o1, Integer o2) {\n                        return o1.compareTo(o2);\n                    }\n                });\n\n                String result = \"\";\n                for (Integer height : results) {\n                    result += height + \" \";\n                }\n                \/\/ write the results\n                String caseString = String.format(\"Case #%s: %s\\r\\n\", i, result);\n                System.out.print(caseString);\n                bw.write(caseString);\n            }\n            bw.flush();\n            bw.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"1141","func":"class b {\n    private static int flipCount;\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int caseNumber = in.nextInt();\n        \n        for(int i = 0; i < caseNumber; i++) {\n            int N = in.nextInt();\n            Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n            for(int j = 0; j < (2 * N - 1) * N; j++) {\n                int k = in.nextInt();\n                if(map.containsKey(k)) map.put(k, map.get(k) + 1);\n                else map.put(k, 1);\n            }\n            \n            int[] miss = new int[N];\n            int index = 0;\n            for(int key : map.keySet()) {\n                if(map.get(key) % 2 == 1) miss[index++] = key;\n            } \n            Arrays.sort(miss);\n            \n            System.out.print(\"Case #\" + (i+1) + \":\");\n            for(int t = 0; t < N; t++) {\n                System.out.print(\" \" + miss[t]);\n            }\n            System.out.println();\n        }\n    }\n    \n}"}
{"idx":"1142","func":"class Soldiers {\n    public static void main(String [] args)\n    {        \n\n        \/\/ Input\n\n        File file = new File(\"soldiers\/large.txt\");\n\n        String[] problem = null;\n        int size = 0;\n        ArrayList<Integer>[] sol = null;\n        try {\n\n            Scanner sc = new Scanner(file);\n\n            size = sc.nextInt();\n\n            sc.nextLine();\n\n            problem = new String[size];\n\n            sol =  new ArrayList[size];\n            \n            for (int i=0; i<size; i++) {\n                sol[i] = new ArrayList<Integer>();\n                int N = sc.nextInt();\n                int[] digits = new int[3000];\n                for(int j=0; j<N*(2*N-1); j++) {\n                    digits[sc.nextInt()]++;\n                }\n                for(int j=0; j<3000; j++) {\n                    if(digits[j]%2==1) {\n                        sol[i].add(j);\n                    }\n                }\n                Collections.sort(sol[i]);\n            }\n            sc.close();\n        } \n        catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n\n\n        \/\/ Output\n\n        PrintWriter writer = null;\n        try {\n            writer = new PrintWriter(\"sol.txt\", \"UTF-8\");\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        for (int i=0; i<size; i++) {\n\n            writer.print(\"Case #\" + (i+1) + \":\");\n            long index = i+1;\n            System.out.print(\"Case #\" + index + \":\");\n\n            for(int j : sol[i]) {\n                writer.print(\" \" + j);\n                System.out.print(\" \" + j);\n            }\n            writer.println(\"\");\n            System.out.println(\"\");\n        }\n        writer.close();\n\n    }\n}"}
{"idx":"1143","func":"class B {\n    static Scanner scan;\n    static PrintWriter writer;\n    \n    public static void main(String[] args) {\n        File file = new File(\"D:\/\/B-large.in\");\n        File out = new File(\"D:\/\/outBL.txt\");\n        try {\n            scan = new Scanner(file);\n            writer = new PrintWriter(out);\n            int t = scan.nextInt();\n            for (int i = 1; i <= t; i++) {\n                writer.print(\"Case #\" + i + \": \");\n                int n = scan.nextInt();\n                Map<Integer, Integer>  map = new HashMap<Integer, Integer>();\n                for(int j=0; j<2*n-1; j++) {\n                    for(int k=0; k<n; k++) {\n                        int a = scan.nextInt();\n                        Integer m = map.get(a);\n                        if(m == null) {\n                            m = 1;\n                        } else {\n                            m++;\n                        }\n                        \n                        map.put(a, m);\n                    } \n                }\n                List<Integer> ret = new ArrayList<Integer>();\n                for(int k : map.keySet()) {\n                    if(map.get(k) % 2 == 1) {\n                        ret.add(k);\n                    }\n                }\n                Collections.sort(ret);\n                for(int j=0; j<ret.size(); j++) {\n                    writer.print(ret.get(j)+\" \");\n                }\n                writer.println();\n                \/\/ solve go here\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        } finally {\n            scan.close();\n            writer.close();\n        }\n    }\n}"}
{"idx":"1144","func":"class Yes{\n\n    public static void main(String[] args){\n    \n        Scanner in = new Scanner(System.in);\n        \n        int cas = in.nextInt();\n        \n        for(int c = 1; c <= cas; c++)\n        {\n            System.out.print(\"Case #\" + c + \": \");\n                int num = in.nextInt();\n                int as = (num * 2) - 1;\n                as *= num;\n                int exp = num;\n                int[] h = new int[2501];\n                for(int i = 0; i < as; i++)\n                {\n                    h[in.nextInt()]++;\n                }\n                for(int i = 1; i <= 2500; i++)\n                {\n                    if(h[i] % 2 == 1)\n                    {\n                        if(exp == 1)\n                        {\n                            System.out.println(i);\n                        } else {\n                            System.out.print(i + \" \");\n                            exp--;\n                        }\n                    }\n                }\n        }\n    }\n}"}
{"idx":"1145","func":"class Main {\n    public static void main(String[] args) throws Exception{\n        FileInputStream fs = new FileInputStream(\"B-large.in\");\n        FileWriter fw = new FileWriter(\"B-large.txt\");\n        Scanner s = new Scanner(fs);\n        int num = s.nextInt();\n        for(int i = 0; i < num; i++){\n            int lineNum = s.nextInt();\n            HashMap<Integer, Integer> hs = new HashMap<Integer, Integer>();\n            for(int j = 0; j < (lineNum * 2 - 1) * lineNum; j++){\n                int n = s.nextInt();\n                if(hs.containsKey(n)){\n                    hs.put(n, hs.get(n) + 1);\n                }else{\n                    hs.put(n, 1);\n                }\n            }\n            int[] ans = new int[lineNum];\n            int index = 0;\n            Iterator it = hs.entrySet().iterator();\n            while(it.hasNext()){\n                Map.Entry entry = (Map.Entry)it.next();\n                if((Integer)entry.getValue() % 2 == 1){\n                    ans[index++] = (Integer)entry.getKey();\n                }\n            }\n            Arrays.sort(ans);\n            StringBuilder sb = new StringBuilder();\n            for(int k = 0; k < lineNum; k++)\n                sb.append(ans[k] + \" \");\n            fw.write(\"Case #\" + (i + 1) +\": \" + sb.toString() + \"\\n\");\n        }\n        fs.close();\n        fw.close();\n    }\n}"}
{"idx":"1146","func":"class ProblemB {\n\n    public static void main(String[] args) throws Exception {\n        InputStream stream = ProblemB.class.getClassLoader().getResourceAsStream(\"problemB-test\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));\n        int testCases = valueOf(reader.readLine());\n        for(int i=0; i< testCases; i++) {\n            System.out.print(\"Case #\" + (i+1) + \":\");\n            Map<Integer, Integer> count = new HashMap<>();\n            int size = valueOf(reader.readLine());\n            for(int i1=0; i1<2*size-1; i1++) {\n                String[] split = reader.readLine().split(\" \");\n                for(int j=0; j<split.length; j++) {\n                    count.compute(valueOf(split[j]), (key, val) -> val==null?1:val+1);\n                }\n            }\n            List<Integer> result = new ArrayList<>();\n            for(Map.Entry<Integer, Integer> entry : count.entrySet()) {\n                if(entry.getValue()%2==1) {\n                    result.add(entry.getKey());\n                }\n            }\n            Collections.sort(result);\n            Integer[] solve = result.toArray(new Integer[size]);\n            for(int a : solve) {\n                System.out.print(\" \" + a);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1147","func":"class Problem_B_Rank_and_File {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader leer = new BufferedReader(new FileReader(\"B-small-attempt0.in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"B-small-attempt0.out\"));\n        StringBuilder salida = new StringBuilder();\n        int casos = Integer.parseInt(leer.readLine());\n        int [] pesos;\n        int cont = 0, n;\n        StringTokenizer partes;\n        while(casos-- != 0){\n            pesos = new int[3000];\n            n = Integer.parseInt(leer.readLine());\n            for(int i=0; i<2*n-1; i++){\n                partes = new StringTokenizer(leer.readLine());\n                while(partes.hasMoreTokens())\n                    pesos[Integer.parseInt(partes.nextToken())]++;\n            }\n            salida.append(\"Case #\").append(++cont).append(\":\");\n            for(int i=0; i<pesos.length; i++){\n                if(pesos[i] != 0 && pesos[i]%2 != 0)\n                    salida.append(\" \").append(i);\n            }\n            salida.append(\"\\n\");\n        }\n        out.append(salida);\n        out.close();\n        leer.close();\n        System.out.print(salida);\n    }\n}"}
{"idx":"1148","func":"class Prob1B {\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        BufferedReader br = new BufferedReader(new FileReader(\"C:\/Users\/Harish\/Downloads\/B-large.in\"));\n        String line = br.readLine();\n        int count = 1;\n        int t = Integer.parseInt(line);\n        while (t-- > 0) {\n            line = br.readLine();\n            int n = Integer.parseInt(line);\n            int size = 2 * n - 1;\n            ArrayList<String> list = new ArrayList<String>();\n            for (int i = 0; i < size; i++) {\n                line = br.readLine();\n                String[] arr = line.split(\" \");\n                for (int j = 0; j < n; j++) {\n                    list.add(arr[j]);\n                }\n            }\n            int l = list.size();\n            ArrayList<Integer> list2 = new ArrayList<Integer>();\n            while (!list.isEmpty()) {\n                int val = Integer.parseInt(list.get(0));\n                int idx1 = list.indexOf(\"\"+val);\n                list.remove(idx1);\n                int idx2 = list.indexOf(\"\"+val);\n                if (idx2 == -1) {\n                    list2.add(val);\n                } else {\n                    list.remove(\"\"+val);\n                }\n            }\n            List<Integer> sorted = list2.subList(0, list2.size());\n            Collections.sort(sorted);\n            System.out.print(\"Case #\"+(count++)+\": \");\n            int s = sorted.size();\n            for(int i=0;i<s;i++){\n                System.out.print(sorted.get(i)+\" \");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1149","func":"class Problem2 {\n\n    public static final String fileName=\".\/round1a\/\"+\"B-large.in\";\n    \n    public static void main(String[] args) {\n        ArrayList<String> values = new ArrayList<String>();;\n        try {\n        FileInputStream fis = new FileInputStream(fileName);\n        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        FileWriter fw = new FileWriter(fileName+\".out\");\n        BufferedWriter bw = new BufferedWriter(fw);\n        int count = Integer.parseInt(br.readLine());\n        for(int i=0;i<count;i++) {\n            int n = Integer.parseInt(br.readLine());\n            HashMap<Integer,Integer> heights = new HashMap<Integer,Integer> ();\n            for(int j=0;j<2*n-1;j++) {\n                String line = br.readLine();\n                String[] hvalues=line.split(\" \");\n                for(int k=0;k<hvalues.length;k++) {\n                    int val = Integer.parseInt(hvalues[k]);\n                    if(heights.containsKey(val))\n                        heights.remove(val);\n                    else\n                        heights.put(val, 1);\n                }\n            }\n            ArrayList<Integer> list = new ArrayList<Integer>(heights.keySet());\n            Collections.sort(list);\n            bw.write(\"Case #\"+(i+1)+\": \"+list.toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\",\", \"\")+\"\\n\");\n            bw.flush();\n        }\n        br.close();\n        bw.close();\n        }catch(Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n}"}
{"idx":"1150","func":"class ProblemB\n{\n    public static void main (String args[])\n    {\n    BufferedReader in;\n    PrintWriter out;\n    StringTokenizer a;\n    int [] num = new int [2500];\n    int [] finalArray;\n    int currNum, count;\n    try\n    {\n        in = new BufferedReader (new FileReader (\"B-large.in\"));\n        out = new PrintWriter (new FileWriter (\"out.txt\"));\n        int lines = Integer.parseInt(in.readLine());\n        for (int x = 1 ; x <= lines ; x++)\n        {\n        int numRow = Integer.parseInt (in.readLine());\n        Arrays.fill(num, 0);\n        finalArray = new int [numRow];\n        for (int y = 1; y <= numRow*2-1; y++)\n        {\n            a = new StringTokenizer(in.readLine());\n            for (int z = 0; z < numRow; z++)\n            {\n            currNum = Integer.parseInt (a.nextToken());\n            num [currNum-1]++;\n            }\n        }\n        count = 0;\n        for (int y = 1; y <= 2500; y++)\n        {\n            if ((num[y-1]%2)!=0)\n            {\n            finalArray[count] = y;\n            count++;\n            }\n        }\n        Arrays.sort(finalArray);\n        out.print(\"Case #\"+x+\":\");\n        for (int y = 0; y < numRow; y++)\n            out.print(\" \"+finalArray[y]);\n        out.println();\n        }\n        in.close ();\n        out.close ();\n    }\n\n\n    catch (FileNotFoundException e)\n    {\n    }\n\n\n    catch (IOException i)\n    {\n    }\n    }\n}"}
{"idx":"1151","func":"class Jam5 {\n\n    \n   \n  public static void main(String[] args){\n    \n    \n    \n    Scanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    \n    int t=in.nextInt();\n    in.nextLine();\n    \n    for(int k=1; k<=t;k++){\n        System.out.print(\"Case #\"+ k + \": \");\n        int[] height=new int[2501];\n        for(int temp=0;temp<=2500;temp++){\n            height[temp]=0;\n        }\n        \n        int n=in.nextInt();\/\/size\n        in.nextLine();\n        \/\/String n = in.nextLine();\n        for(int j=1;j<=2*n-1;j++){\n            for(int x=1;x<=n;x++){\n                int h=in.nextInt();\/\/hright\n                height[h]++;\n            }\n            in.nextLine();\n        }\n        \n        \n        for(int temp=0;temp<=2500;temp++){\n            if(height[temp]%2==1){\n                System.out.print(temp+\" \");\n            }\n        }\n        \n        System.out.println();\n        \/\/String ans=calculate(n);\n        \n        \n    }\n    \n    in.close();\n  }\n  \n \n}"}
{"idx":"1152","func":"class B {\n    Scanner scan;\n\n    public B(Scanner s) {\n        scan = s;\n    }\n    \n    public static void main(String[] args) throws Exception{\n        Locale.setDefault(Locale.US);\n        String cn = \"src\/\"+B.class.getName();\n        String sampleName = cn+\"-sample.in\";\n        String smallName = cn+\"-small-attempt0.in\";\n        String largeName = cn+\"-large.in\";\n        String name = largeName;\n        String outName = name.substring(0, name.indexOf('.'))+\".out\";\n        InputStream in = new BufferedInputStream(new FileInputStream(name));\n        PrintStream out = new PrintStream(new File(outName));\n        \/\/PrintStream out = System.out;\n        Scanner scan = new Scanner(in);\n        \n        int N = Integer.parseInt(scan.nextLine());\n        for(int c=1;c<=N;c++) {\n            B r = new B(scan);\n            int n = r.scan.nextInt();\n            int[]C = new int[3000];\n            for(int i=0;i<n*(2*n-1);i++){\n                int x = r.scan.nextInt();\n                C[x]++;\n            }\n            String res1=\"\";\n            for(int i=0;i<C.length;i++){\n                if(C[i]%2==1)res1+= i+ \" \";\n            }\n            String res = res1;\n            out.printf(\"Case #%d: %s\\n\",c, res);\n            if(out!=System.out)System.err.println(c + \" done\");\n        }\n        if(out!=System.out)System.err.println(\"All done\");\n        \n    }\n}"}
{"idx":"1153","func":"class RankFile {\n\n    public static StringBuilder builder = new StringBuilder();\n\n    public static void main(String[] args) {\n        try (BufferedReader br = new BufferedReader(new FileReader(\".\/input.txt\"))) {\n            String line;\n            int cases = Integer.parseInt(br.readLine());\n\n            int i = 0;\n            while ((line = br.readLine()) != null && i < cases) {\n                int N = Integer.parseInt(line);\n                int count = 2 * N - 1;\n                ArrayList<String> list = new ArrayList<String>();\n                for (int j = 0; j < count; j++) {\n                    list.add(br.readLine());\n                }\n                int caseNumber = i + 1;\n\n                if (caseNumber != 1)\n                    builder.append(System.getProperty(\"line.separator\"));\n                builder.append(\"Case #\" + caseNumber + \": \");\n                \n                HashMap<Integer, Integer> counts = new HashMap<Integer, Integer>();\n                \n                for (int i1 = 0; i1 < list.size(); i1++) {\n                    String[] characters = list.get(i1).split(\" \");\n                    for (String str : characters) {\n                        Integer val = Integer.parseInt(str);\n                        if (counts.containsKey(val)) {\n                            counts.put(val, counts.get(val) + 1);\n                        } else {\n                            counts.put(val, 1);\n                        }\n                    }\n                }\n                \n                ArrayList<Integer> odds = new ArrayList<Integer>();\n                for (Map.Entry<Integer, Integer> set : counts.entrySet()) {\n                    if (set.getValue() % 2 != 0) {\n                        odds.add(set.getKey());\n                    }\n                }\n                Collections.sort(odds);\n                \n                StringBuilder aa = new StringBuilder();\n                for (Integer str : odds) {\n                    aa.append(str+\" \");\n                }\n                builder.append(aa.toString().trim());\n                i++;\n            }\n\n            try {\n                File file = new File(\".\/output.txt\");\n                FileWriter fileWriter = new FileWriter(file);\n                fileWriter.write(builder.toString());\n                fileWriter.flush();\n                fileWriter.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"1154","func":"class RankAndFile {\n    static PrintWriter writer;\n\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n        Scanner sc = new Scanner(new File(\"in.txt\"));\n        writer = new PrintWriter(\"out.txt\", \"UTF-8\");\n        int T = sc.nextInt();\n        for (int t = 0; t < T; t++) {\n            int n = sc.nextInt();\n            ArrayList<Integer> al = new ArrayList<>();\n            for (int i = 0; i < 2 * n - 1; i++) {\n                for (int j = 0; j < n; j++) {\n                    al.add(sc.nextInt());\n                }\n            }\n            Collections.sort(al);\n            ArrayList<Integer> left = new ArrayList<>();\n            for (int i = 0; i < al.size(); i++) {\n                int bb = al.get(i);\n                if (i == al.size() - 1) {\n                    left.add(bb);\n                    break;\n                }\n                int cc = al.get(i + 1);\n                if (bb == cc) {\n                    i++;\n                    continue;\n                } else {\n                    left.add(bb);\n                }\n\n            }\n            String m = \"\";\n            for (Integer g : left)\n                m += g + \" \";\n            m=m.substring(0,m.length()-1);\n            String s = \"Case #\" + (t+1) + \": \" + m;\n            writer.println(s);\n            System.out.println(s);\n\n        }\n        writer.close();\n    }\n}"}
{"idx":"1155","func":"class B {\n    public static void main(String[] args) {\n        boolean printToFile = true;\n        try {\n            if(printToFile){\n                System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(\"out.txt\")), true));\n            }\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        new B();\n    }\n    \n    public B() {\n        Scanner sc = new Scanner(System.in);\n        int nbProblems = sc.nextInt();\n        for(int caseNb = 1; caseNb <= nbProblems; caseNb++){\n            int n = sc.nextInt();\n            int[][] lists = new int[2*n-1][n];\n            for(int i = 0; i < n; i++){\n                for(int j = 0; j < n; j++){\n                    lists[i][j] = sc.nextInt();\n                }\n            }\n            for(int i = n; i < 2*n-1; i++){\n                for(int j = 0; j < n; j++){\n                    lists[i][j] = sc.nextInt();\n                }\n            }\n            HashMap<Integer, Integer> rv = new HashMap<>();\n            for(int i1 = 0; i1 < lists.length; i1++){\n                for(int j = 0; j < lists[0].length; j++){\n                    if(!rv.containsKey(lists[i1][j])){\n                        rv.put(lists[i1][j], 0);\n                    }\n                    rv.put(lists[i1][j], rv.get(lists[i1][j])+1);\n                }\n            }\n            HashMap<Integer, Integer> counts = rv;\n            ArrayList<Integer> answer = new ArrayList<>();\n            for(int key : counts.keySet()){\n                if(counts.get(key) %2 == 1){\n                    answer.add(key);\n                }\n            }\n            if(answer.size() != n){\n                System.err.println(\"niet juist\");\n            }\n            \n            Collections.sort(answer);\n            StringBuilder solution = new StringBuilder();\n            for(Integer i : answer){\n                solution.append(i + \" \");\n            }\n            solution.deleteCharAt(solution.length()-1);\n            System.out.println(\"Case #\" + caseNb + \": \" + solution.toString());\n        }\n    }\n}"}
{"idx":"1156","func":"class RankAndFile {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();    \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n            int n = in.nextInt();\n\n            HashMap<Integer, Integer> seen = new HashMap<Integer, Integer>();            \n\n            for (int j = 0; j < 2*n -1; j++) {\n                for (int k = 0; k < n; k++) {\n                    int m = in.nextInt();\n                    if (seen.get(m) == null) {\n                        seen.put(m, 1);\n                    } else {\n                        seen.put(m, seen.get(m) + 1);    \n                    }\n                }\n            }\n\n            PriorityQueue<Integer> q = new PriorityQueue<Integer>();\n            \n            Set<Integer> entrySet = seen.keySet();\n            for (Integer key : entrySet) {\n                if (seen.get(key) % 2 == 1) {\n                    q.add(key);\n                }\n            }\n\n            String res = \"\";\n            while(q.size() > 0) {\n                res += q.poll() + \" \";\n            }\n\n            System.out.println(\"Case #\" + i + \": \" + res);\n        }\n    }\n}"}
{"idx":"1157","func":"class B {\n    \n    public static void main(String[] args) throws IOException {\n        \n        Scanner qwe = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(\"B.out\");\n        \n        \n        int T  = qwe.nextInt();\n        \n        for(int cse = 1; cse <= T; cse++){\n            int N = qwe.nextInt();\n            \n            int[] counts =  new int[2501];\n            \n            for (int i = 0; i < 2*N-1; i++) {\n                \n                for (int j = 0; j < N; j++) {\n                    counts[qwe.nextInt()]++;\n                }\n                \n            }\n            \n            \n            out.print(\"Case #\"+cse+\": \");\n            for (int i = 0; i < counts.length; i++) {\n                if(counts[i] % 2 == 1) out.print(i+\" \");\n            }\n            out.println();\n            \n        }\n        \n        \n        out.close();\n        qwe.close();\n    }\n\n}"}
{"idx":"1158","func":"class Main {\n\n    private static final String FORMAT = \"Case #%d: %s\\n\";\n\n    public static void main(String[] args) throws FileNotFoundException {\n        PrintWriter writer = new PrintWriter(new FileOutputStream(\"output\"));\n        Scanner in = new Scanner(new FileInputStream(\"B-large.in\"));\n        int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n\n        for (int i = 1; i <= t; ++i) {\n            int col = in.nextInt();\n\n            Map<Integer, Integer> map = new HashMap<>();\n            for (int j = 0; j < 2 * col - 1; j++) {\n                for (int k = 0; k < col; k++) {\n                    int num = in.nextInt();\n                    if (!map.containsKey(num)) {\n                        map.put(num, 1);\n                    } else {\n                        int count = map.get(num);\n                        map.put(num, count + 1);\n                    }\n                }\n            }\n            TreeSet<Integer> missing = new TreeSet<>();\n            for (Map.Entry<Integer, Integer> entry: map.entrySet()) {\n                if (entry.getValue() % 2 == 1) {\n                    missing.add(entry.getKey());\n                }\n            }\n            StringBuilder output = new StringBuilder();\n            for (int num: missing) {\n                output.append(num).append(\" \");\n            }\n            writer.printf(FORMAT, i, output.toString());\n        }\n        writer.flush();\n        writer.close();\n    }\n}"}
{"idx":"1159","func":"class RankFile {\n    public static void main(String[] args){\n        File a = new File(\"B-large.in\");\n        Scanner input = null;\n        try {\n            input = new Scanner(a);\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \/\/Scanner input = new Scanner(System.in);\n        \n        File b = new File(\"B-output.txt\");\n        FileWriter fw = null;\n        try {\n            fw = new FileWriter(b);\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        int number = input.nextInt();\n        input.nextLine();\n        int cases = number;\n        \n        while(number > 0){\n            int n = input.nextInt();\n            String result = \"\";\n            \n            HashSet<Integer> present = new HashSet<Integer>();\n            \n            for (int i = 0; i < 2*n-1; i++){\n                for (int j = 0; j < n; j++){\n                    int d = input.nextInt();\n                    if(present.contains(d)){\n                        present.remove(d);\n                    } else {\n                        present.add(d);\n                    }\n                }\n            }\n            \n            \n            List<Integer> sortList = new ArrayList<Integer>(present);\n            Collections.sort(sortList);\n            \n            for (int i = 0; i < sortList.size(); i++){\n                result += sortList.get(i) + \" \";\n            }\n            \n            try {\n                fw.write(\"Case #\" + (cases - number + 1) + \": \" + result + \"\\n\");\n            } catch (IOException e) {\n                \/\/ TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            number--;\n        }\n        \n        try {\n            fw.close();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1160","func":"class B {\n\n    public static void main(String[] args) throws FileNotFoundException{\n        \/\/ test case\n\/\/        genLargeP();\n\/\/        File inputFile = new File(\"test.txt\");\n\/\/        PrintWriter out = new PrintWriter(\"test_out.txt\");\n\n        \/\/ real case\n        File inputFile = new File(\"B-large.in\");\n\/\/        File inputFile = new File(\"B-small-attempt0.in\");\n        PrintWriter out = new PrintWriter(\"B_out_b.txt\");\n\n        Scanner in = new Scanner(inputFile);\n\n        int T = in.nextInt();\n        int N;\n        for (int i=0;i<T;i++) {\n            N= in.nextInt();\n            int[] nums = new int[2501];\n            int cur;\n            for (int j=0;j<2*N-1;j++) {\n                for (int k=0;k<N;k++) {\n                    cur = in.nextInt();\n                    nums[cur]++;\n                }\n            }\n            String ans = \"\";\n            for (int m=0;m<2501;m++) {\n                if (nums[m] % 2 != 0) {\n                    ans += m;\n                    ans += \" \";\n                }\n            }\n            out.printf(\"Case #%d: %s\\n\", i + 1, ans.trim());\n        }\n\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"1161","func":"class GCJ {\n\n    public static void main(String[] args) throws Throwable {\n        long start = System.currentTimeMillis();\n\n        String pkg = new Object(){}.getClass().getEnclosingClass().getPackage().getName().replace('.', '\/');\n        String dir = \"src\/\" + pkg;\n\n        String filename = \"\";\n\n\/\/        if (true) { filename = \"sample.in\"; }\n\/\/        if (true) { filename = \"B-small-attempt0.in\"; }\n        if (true) { filename = \"B-large.in\"; }\n\n        Scanner sc = null;\n        try {\n            sc = new Scanner(new File(dir + \"\/\" + filename));\n        } catch (FileNotFoundException e) {\n            Object[] o = { e.getMessage() };\n            System.err.println(Arrays.deepToString(o));\n            return;\n        }\n        PrintWriter fout = new PrintWriter(new File(dir + \"\/\" + filename + \".res\"));\n\n        GCJ obj = new GCJ();\n        int T = sc.nextInt();\n        for (int t = 0; t < T; t++) {\n            fout.write(String.format(\"Case #%d: \", (t + 1)));\n            int n = sc.nextInt();\n            int[] count = new int[2501];\n            for (int i = 0; i < 2 * n - 1; i++){\n                for (int j = 0; j < n; j++) {\n                    int x = sc.nextInt();\n                    count[x]++;\n                }\n            }\n            for (int i = 0; i < count.length; i++) if (count[i] % 2 == 1) fout.print(\" \" + i);\n            fout.println();\n            fout.flush();\n        }\n        fout.flush();\n        fout.close();\n        long end = System.currentTimeMillis();\n        Object[] o = { (end - start) + \"ms\" };\n        System.err.println(Arrays.deepToString(o));\n    }\n    \n}"}
{"idx":"1162","func":"class B {\n\n    public static void main(String args[]) throws Exception {\n        String fn = args.length > 0 ?  args[0] :\n        \/\/    \"B-.in\";\n        \/\/    \"B-small-attempt1.in\";\n            \"B-large.in\";\n        LineNumberReader in = new LineNumberReader(new FileReader(fn));\n        PrintWriter out = new PrintWriter(new FileWriter(fn.replace(\".in\", \".out\")));\n        int T = Integer.parseInt(in.readLine());\n        for(int i = 0; i < T; i++) {\n            out.print(\"Case #\" + (i+1) + \":\");\n            final int N = Integer.parseInt(in.readLine());\n            ArrayList<Integer> missing = new ArrayList<Integer>();\n            for(int l = 2*N-1; --l >= 0; ) {\n                StringTokenizer st = new StringTokenizer(in.readLine());\n                for(int k = 0; k < N; k++) {\n                    int s = Integer.parseInt(st.nextToken());\n                    int n = missing.indexOf(s);\n                    if(n < 0)\n                        missing.add(s);\n                    else\n                        missing.remove(n);\n                }\n            }\n            Collections.sort(missing);\n            for(int k = 0; k < N; k++) {\n                out.print(' ');\n                out.print(missing.get(k));\n            }\n            out.println();\n            out.flush();\n        }\n        out.close();\n    }\n}"}
{"idx":"1163","func":"class RankAndFile {\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new File(\"B-large.in\"));\n        PrintWriter pw = new PrintWriter(new File(\"output.txt\"));\n        int caseCount = sc.nextInt();\n        for(int i = 0; i < caseCount; i++) {\n           int N = sc.nextInt();\n            Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n            for(int j = 0; j < N*2 - 1; j++) {\n                for(int k = 0; k < N; k++) {\n                    int val = sc.nextInt();\n                    int count = map.getOrDefault(val, 0);\n                    map.put(val, count + 1);\n                }\n            }\n            pw.printf(\"Case #%d:\", i + 1);\n            List<Integer> list = new ArrayList<Integer>();\n            for(Map.Entry<Integer,Integer> entry : map.entrySet()) {\n                if((entry.getValue() % 2) == 1) list.add(entry.getKey());\n            }\n\n            Collections.sort(list);\n            for(int l : list) {\n                pw.printf(\" %d\", l);\n            }\n            pw.append(\"\\n\");\n\n        }\n        pw.close();\n    }\n\n\n\n}"}
{"idx":"1164","func":"class Program {    \n    \n    public static void main(String[] args) throws IOException {        \n        File inFile = new File(args[0]);\n    \/\/    File inFile = new File(\"B.in\");\n        Scanner in = new Scanner(new BufferedReader(new FileReader(inFile)));        \/\/\n        int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        \/\/in.nextLine();\n        \n    \/\/    \/*\n        File outFile = new File(args[1]);\n        if (!outFile.exists()) {\n            outFile.createNewFile();\n        }\n        FileWriter fw = new FileWriter(outFile.getAbsoluteFile());\n        BufferedWriter bw = new BufferedWriter(fw);\n      \/\/  *\/\n        Set<Integer> set = new HashSet<>();\n        for (int i = 1; i <= t; ++i) {\n            set.clear();\n            int N = in.nextInt();    \n            in.nextLine();\n            for (int k = 0; k < 2 * N - 1; k++) {\n                String[] s = in.nextLine().split(\" \");                \n                for (String str : s) {\n                    if (str.length() == 0) continue;\n                    int num = Integer.parseInt(str);\n                    if (set.contains(num)) set.remove(num);\n                    else set.add(num);\n                }\n            }\n            \n            List<Integer> num = new ArrayList<>();\n            for (int n : set) {\n                num.add(n);\n            }\n            Collections.sort(num);                \n            StringBuilder sb = new StringBuilder();\n            for (int n : num) sb.append(n).append(\" \");\n            sb.setLength(sb.length() - 1);\n            String res = \"Case #\" + i + \": \" + sb.toString();\n            \/\/String res = s;\n            bw.write(res);\n            bw.newLine();\n        }            \n        in.close();  \n        bw.close();\n        \n        \/*\n        String s = \"--+-\";\n        System.out.println(flipCakes(s));\n        *\/\n    }    \n    \n}"}
{"idx":"1165","func":"class RankFile {\n    Scanner in;\n    PrintWriter out;\n    int n;\n    String s;\n\n    public RankFile() throws FileNotFoundException, UnsupportedEncodingException {\n        in = new Scanner(new FileReader(\"rankfile_small_in.txt\"));\n        out = new PrintWriter(\"rankfile_large_out.txt\", \"UTF-8\");\n    }\n\n\n    public static void main(String[] args) {\n        RankFile r = null;\n        try {\n            r = new RankFile();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        int number = r.in.nextInt();\n        for (int i = 0; i < number; i++) {\n            r.n = r.in.nextInt();\n            Map<Integer, Integer> counts = new TreeMap<>();\n            for (int k = 0; k < 2*r.n-1; k++) {\n                for (int j = 0; j < r.n; j++) {\n                    int entry = r.in.nextInt();\n                    if (counts.containsKey(entry)) {\n                        counts.put(entry, counts.get(entry) + 1);\n                    } else {\n                        counts.put(entry, 1);\n                    }\n                }\n            }\n            String strOut = \"\";\n            ArrayList<Integer> outputs = new ArrayList<>();\n            for (Integer num: counts.keySet()) {\n                if (counts.get(num)%2 != 0) {\n                    outputs.add(num);\n                }\n            }\n            Collections.sort(outputs);\n            for (Integer num: outputs) {\n                strOut = strOut + String.valueOf(num) + \" \";\n            }\n            strOut = strOut.substring(0, strOut.length()-1); \/\/ cut off space\n            int case_num = i + 1;\n            \/\/System.out.println(\"Case #\" + case_num + \": \" + output);\n            r.out.println(\"Case #\" + case_num + \": \" + strOut);\n        }\n        r.out.close();\n    }\n}"}
{"idx":"1166","func":"class RankFile {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n    for (int i = 1; i <= t; ++i) {\n        int n = in.nextInt();\n        ArrayList<Integer> ranks = new ArrayList<Integer>();\n        for (int j = 0; j<n*(2*n-1); j++)\n        {\n            Integer rank = new Integer(in.nextInt());\n            if (ranks.contains(rank))\n                ranks.remove(rank);\n            else\n                ranks.add(rank);\n        }\n        Collections.sort(ranks);;\n        String output = \"\";\n        for (int rank : ranks)\n        {\n            output += rank + \" \";\n        }\n        System.out.println(\"Case #\" + i + \": \" + output.trim());\n    }\n  }\n}"}
{"idx":"1167","func":"class Round1A_RankFile {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/ TODO Auto-generated method stub\n\n        Scanner scan = new Scanner(new File(\"src\/Input.txt\"));\n        int T = Integer.parseInt(scan.nextLine());\n        for (int i = 1; i <= T; i++) {\n            int N = Integer.parseInt(scan.nextLine());\n            List<String> list = new ArrayList<String>();\n            for (int j = 0; j < (2*N - 1) ; j++) {\n                String line = scan.nextLine();\n                StringTokenizer str = new StringTokenizer(line);\n                \n                while(str.hasMoreTokens()) {\n                    String check = str.nextToken();\n                    \n                    if (list.contains(check)) {\n                        list.remove(check);\n                        \n                    } else {\n                        list.add(check);\n                    }\n                }\n            }\n            \n            int array[] = new int[N];\n            int j = 0;\n            for (String l : list) {\n                array[j] = Integer.parseInt(l);\n                j++;\n            }\n            Arrays.sort(array);\n            String ans = \"Case #\"+i+\":\";\n            for (int l : array) {\n                ans = ans + \" \" + l;\n            }\n            System.out.println(ans);\n        }\n    }\n\n}"}
{"idx":"1168","func":"class Rank {\n    public static void main(String [] args) throws IOException {\n        Scanner input = new Scanner(new File(\"input.txt\"));\n        PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n        \n        int cs = input.nextInt();\n        for(int i = 1; i <= cs; i++) {\n            int[] arr = new int[2501];\n            int sz = input.nextInt();\n            for(int x = 0; x < sz * (2 * sz - 1); x++) {\n                arr[input.nextInt()]++;\n            }\n            out.printf(\"Case #%d:\", i);\n            for(int j = 0; j < arr.length; j++)\n                if(arr[j] % 2 == 1)\n                    out.print(\" \" + j);\n            out.println();\n        }\n        out.close();\n    }\n}"}
{"idx":"1169","func":"class RANK_AND_FILE {\n  public static void main (String [] t) throws IOException {\n    BufferedReader in = new BufferedReader (new InputStreamReader (System.in));\n    NavigableSet <Integer> set;\n    int T = Integer.parseInt (in.readLine ()), N, X;\n    \n    for (int i = 1; i <= T; i++) {\n      N = Integer.parseInt (in.readLine ());\n      set = new TreeSet <Integer> ();\n      \n      for (int n = 0; n < 2 * N - 1; n++) {\n        t = in.readLine ().split (\" \");\n        \n        for (int x = 0; x < t.length; x++) {\n          X = Integer.parseInt (t [x]);\n          \n          if (!set.add (X)) {\n            set.remove (X);\n          }\n        }\n      }\n      \n      System.out.print (\"Case #\" + i + \":\");\n      \n      for (int y : set) {\n        System.out.print (\" \" + y);\n      }\n      System.out.println ();\n    }\n  }\n}"}
{"idx":"1170","func":"class RankAndFile {\n    private static final String CASE = \"Case #\";\npublic static void main(String[] args) throws Exception {\n\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out), true);\n\n    int tcs  = Integer.parseInt(br.readLine());\n    \n    for(int t=1;t<=tcs;++t){\n        String opFormat = CASE + t + \":\";\n        HashMap<Integer, Integer> heights = new HashMap<Integer, Integer>();\n        int N = Integer.parseInt(br.readLine());\n        for(int i=0,iLen=((2*N)-1);i<iLen;++i){\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            for(int j=0;j<N;++j){\n                int currentHeight = Integer.parseInt(st.nextToken());\n                if(heights.containsKey(currentHeight)){\n                    heights.put(currentHeight, heights.get(currentHeight) + 1);\n                }else{\n                    heights.put(currentHeight, 1);\n                }\n            }\n        }\n            ArrayList<Integer> missingHeights = new ArrayList<Integer>(N);\n            \n            Iterator<Integer> heightsIterator = heights.keySet().iterator();\n            while(heightsIterator.hasNext()){\n                int currentHeight = heightsIterator.next();\n                int currentHeightVal = heights.get(currentHeight);\n                if((currentHeightVal%2)==1){\n                    missingHeights.add(currentHeight);\n                }\n            }\n            Collections.sort(missingHeights);\n            pw.print(opFormat);\n            for(int i=0;i<N;++i){\n                pw.print(\" \"+missingHeights.get(i));\n            }\n            pw.println();\n    }\n    \n    pw.flush();\n    pw.close();\n    br.close();\n}\n}"}
{"idx":"1171","func":"class RankAndFile {\n    public static void main(String[] args) {\n        try {\n            Scanner scanner = new Scanner(new File(\"\/Users\/xiangyixie\/Documents\/eclipse_workspace\/2016CodeJamRound1A\/bin\/B-large.in\"));\n            FileWriter writer = new FileWriter(new File(\"\/Users\/xiangyixie\/Documents\/eclipse_workspace\/2016CodeJamRound1A\/bin\/B-large-output.out\"));\n \n            \/\/ Scanner scanner = new Scanner(new File(\"input.txt\"));\n            \/\/ FileWriter writer = new FileWriter(new File(\"output.txt\"));\n\n            int T = scanner.nextInt();\n            for (int i = 0; i < T; i++) {\n                int N = scanner.nextInt();\n\n                int[] count = new int[3000];\n                for (int j = 0; j < count.length; j++) {\n                    count[j] = 0;\n                }\n\n                for (int j = 0; j < N * (2 * N - 1); j++) {\n                    count[scanner.nextInt()]++;\n                }\n\n                int[] array = new int[N];\n                int cur = 0;\n                for (int j = 0; j<count.length; j++) {\n                    if (count[j] % 2 != 0) {\n                        System.out.println(j);\n                        array[cur++] = j;\n                    }\n                }\n                Arrays.sort(array, 0, N);\n                writer.write(\"Case #\" + (i+1) + \":\");\n                for (int j = 0; j < N; j++) {\n                    writer.write(\" \" + array[j]);\n                }\n                writer.write(\"\\n\");\n            }\n\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1172","func":"class B {\n    \n    public static void main(String[] args) throws Exception {\n        String filename = \"B-large\";\n        Scanner scan = new Scanner(new FileReader(filename + \".in\"));\n        PrintWriter out = new PrintWriter(filename + \".out\");\n        int problems = scan.nextInt();\n        for (int count = 0; count < problems; count++) {\n            System.out.print(\"Case #\" + (count+1) + \":\");\n            out.print(\"Case #\" + (count+1) + \":\");\n            B r = new B();\n            int n = scan.nextInt();\n            Set<Integer> set = new HashSet<>();\n            for (int i = 0; i < 2*n - 1; i++) {\n                for (int j = 0; j < n; j++) {\n                    int current = scan.nextInt();\n                    if (!set.contains(current)) {\n                        set.add(current);\n                    } else {\n                        set.remove(current);\n                    }\n                }\n            }\n            int[] array = new int[n];\n            int i = 0;\n            for (int element : set) {\n                array[i] = element;\n                i++;\n            }\n            Arrays.sort(array);\n            for (int element : array) {\n                System.out.print(\" \" + element);\n                out.print(\" \" + element);\n            }\n            System.out.println();\n            out.println();\n        }\n        out.flush();\n        out.close();\n        scan.close();\n    }\n    \n}"}
{"idx":"1173","func":"class ProbB\n{\n\n\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer myTokens = new StringTokenizer(in.readLine());\n        \n        int T = Integer.parseInt(myTokens.nextToken());\n        \n        for (int i=0; i<T; i++)\n        {\n            myTokens = new StringTokenizer(in.readLine());\n            \n            int N = Integer.parseInt(myTokens.nextToken());\n                        \n            int[] heights = new int[2501];\n            \n            for (int j=0; j<2*N-1; j++)\n            {\n                myTokens = new StringTokenizer(in.readLine());\n                \n                \n                for (int k=0; k<N; k++)\n                {\n                    heights[Integer.parseInt(myTokens.nextToken())]++;\n                }\n                \n                \n                \n            }\n            \n            \n            System.out.print(\"Case #\" + (i+1) + \":\");\n            \n            for (int q=0; q<2501; q++)\n            {\n                if (heights[q]%2 == 1)\n                {\n                    System.out.print(\" \" + q);\n                }\n            }\n            \n            System.out.println(\"\");\n            \n            \n        }\n        \n\n    }\n    \n\n}"}
{"idx":"1174","func":"class GCJ2016B1 {\n\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for (int k = 1; k <= t; k++) {\n            int n = sc.nextInt();\n            TreeSet<Integer> set = new TreeSet<>();\n            for (int i = 0; i < 2 * n - 1; i++) {\n                for (int j = 0; j < n; j++) {\n                    int a = sc.nextInt();\n                    if (set.contains(a)) {\n                        set.remove(a);\n                    } else {\n                        set.add(a);\n                    }\n                }\n            }\n            System.out.print(\"Case #\" + k + \":\");\n            for (int a : set) {\n                System.out.print(\" \" + a);\n            }\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"1175","func":"class B_1A_RankAndFile {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n\n        for (int i = 1; i <= t; ++i) {\n            int n = in.nextInt();\n            HashMap<Integer, Integer> hmap = new HashMap<>();\n            for (int j = 0; j < n * (2 * n - 1); j++) {\n                int x = in.nextInt();\n                Integer value = hmap.get(x);\n                if (value != null) {\n                    hmap.put(x, ++value);\n                } else {\n                    hmap.put(x, 1);\n                }\n            }\n            ArrayList<Integer> result = new ArrayList<>();\n            for (Map.Entry<Integer, Integer> entry : hmap.entrySet()) {\n                if (entry.getValue() % 2 != 0) {\n                    result.add(entry.getKey());\n                }\n            }\n            Collections.sort(result);\n            StringBuilder sb = new StringBuilder();\n            for (Integer a : result)\n            {\n                sb.append(\" \");\n                sb.append(a);\n            }\n            System.out.println(\"Case #\" + i + \":\" + sb.toString());\n        }\n    }\n}"}
{"idx":"1176","func":"class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt(); \/\/ Scanner has functions to read ints, longs,\n                                \/\/ strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n            int n = in.nextInt();\n            \n            int count[] = new int[2501] ;\n            for (int j=0; j<2*n-1; j++) {\n                for(int k=0; k< n; k++) {\n                    int temp = in.nextInt();\n                    count[temp]++;\n\n                }\n            }\n            \n            System.out.print(\"Case #\"+ i + \": \");\n            int missing[] = new int[n];\n            int c =0;\n            for(int j=0; j<2501; j++) {\n                if(count[j]%2 != 0) {\n                    missing[c++] = j;\n                    System.out.print(j + \" \");\n                }\n            }\n            System.out.println(\"\");\n        }\n    }\n}"}
{"idx":"1177","func":"class Rank {\n    \n    public static void main(String[] args) {\n        Rank r = new Rank();\n        int i,T;\n        T=r.sc.nextInt();\n        for (i=1;i<=T;i++) {\n            r.out.printf(\"Case #%d: \",i);\n            r.N=r.sc.nextInt();\n            int allsize=(2*r.N-1)*r.N;\n            int i1,i0,j;\n            r.all=new int[allsize];\n            r.missing=new int[r.N];\n            for (i1=0;i1<allsize;i1++) r.all[i1]=r.sc.nextInt();\n            i1=j=i0=0;\n            Arrays.sort(r.all);\n            while (true) {\n                i0=i1;\n                if (i0>=allsize) break;\n                while (i1<allsize && r.all[i0]==r.all[i1]) i1++;\n                int count=i1-i0;\n                if ((count & 1)==1) r.missing[j++]=r.all[i0]; \n            }\n            for (int x : r.missing) r.out.printf(\"%d \",x);\n            r.out.println();\n        }\n    }\n    \n    Scanner sc=new Scanner(System.in);\n    PrintStream out=System.out;\n    \n    int N;\n    int[] all;\n    int[] missing;\n    \n}"}
{"idx":"1178","func":"class Round1A2 {\n    public static void main(String... strings) {\n\n        Scanner sc = new Scanner(System.in);\n        PrintStream ps = System.out;\n        try {\n            System.setOut(new PrintStream(new FileOutputStream(\"out2.txt\")));\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        ps.close();\n        int numCases = Integer.valueOf(sc.nextLine());\n\n        for (int i = 0; i < numCases; i++) {\n            HashMap<Integer, Integer> hm = new HashMap<>();    \n            int N = sc.nextInt();\n            for (int j = 0; j < N*(2 * N - 1); j++) {\n                int a = sc.nextInt();\n                if (hm.get(a) == null) {\n                    hm.put(a, 1);\n                } else {\n                    hm.put(a, hm.get(a) + 1);\n                }\n            }\n\n            ArrayList<Integer> al = new ArrayList<>();\n            for (Map.Entry<Integer, Integer> entry : hm.entrySet()) {\n                if (entry.getValue() % 2 == 1) {\n                    al.add(entry.getKey());\n                }\n            }\n            Collections.sort(al);\n            int len = al.size();\n            System.out.printf(\"Case #%d: %d\", i + 1, al.get(0));\n            for(int k = 1;k<len;k++){\n                System.out.printf(\" %d\", al.get(k));\n            }\n            System.out.println();\n        }\n        sc.close();\n    }\n}"}
{"idx":"1179","func":"class Army {\n    public static void main(String[] args) throws Exception {\n        String line;\n        String fileName = args[0];\n        System.out.println(\"fileName=\" + fileName);\n\n        FileWriter fw = new FileWriter(fileName + \".out.txt\");\n\n        \/\/ fw.write(\"something\");\n\n        InputStream fis = new FileInputStream(fileName);\n        InputStreamReader isr = new InputStreamReader(fis, Charset.forName(\"UTF-8\"));\n        BufferedReader br = new BufferedReader(isr);\n\n        try {\n            line = br.readLine();\n            Long count = Long.valueOf(line);\n\n            System.out.println(\"count=\" + count);\n\n            Long current = 0L;\n            while (current++ < count) {\n\n                line = br.readLine();\n                final int N = Integer.valueOf(line);\n                final int rowNum = 2* N -1;\n                Map<Integer, Integer> countMap = new HashMap<Integer, Integer>();\n                int i = 0;\n                while (i< rowNum) {\n                    String line1 = br.readLine();\n                    \n                    \/\/System.out.println(line);\n                    \n                    String[] numbers = line1.split(\"\\\\s+\");\n                    for (int i1=0; i1<numbers.length; i1++) {\n                        int currentNumber = Integer.valueOf(numbers[i1]);\n                        \n                        int oldCount = 0;\n                        if (countMap.containsKey(currentNumber)) {\n                            oldCount = countMap.get(currentNumber);\n                        }\n                        \n                        countMap.put(currentNumber, oldCount+1);\n                    }\n                    \n                    i++;\n                }\n                int[] result2 = new int[N];\n                int i1=0;\n                for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n                    \n                    if (entry.getValue()%2 != 0) {\n                        result2[i1++] = entry.getKey();\n                    }\n                }\n                \n                int[] result1 = result2;\n                Arrays.sort(result1);\n                \n                StringBuilder tmp = new StringBuilder();\n                for(int j=0; j<result1.length; j++) {\n                    tmp.append(String.valueOf(result1[j])).append(\" \");\n                }\n                \n                String result = tmp.toString().trim();\n                \n                \n                fw.write(\"Case #\" + current + \": \" + result + \"\\n\");\n            }\n            fw.close();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n    \n    \n}"}
{"idx":"1180","func":"class Rank {\n\n    public static void main(String args[]) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st;\n        Scanner sc;\n        int cases = Integer.parseInt(br.readLine());\n        for (int i = 1; i <= cases; i++) {\n            System.out.print(String.format(\"Case #%d:\", i));\n            int n = Integer.parseInt(br.readLine());\n            int[] counts = new int[3000];\n            for (int i2 = 0; i2 < 2*n - 1; i2++) {\n                StringTokenizer st1 = new StringTokenizer(br.readLine());\n                int[] arr = new int[n];\n                for (int i11 = 0; i11 < n; i11++) {\n                    arr[i11] = Integer.parseInt(st1.nextToken());\n                }\n                int[] line = arr;\n                for (int sol : line) {\n                    counts[sol]++;\n                }\n            }\n            int[] out = new int[n];\n            int j = 0;\n            for (int i1 = 0; i1 < 3000; i1++) {\n                if (counts[i1] % 2 == 1) {\n                    out[j++] = i1;\n                }\n            }\n            for (int q : out) {\n                System.out.print(\" \" + q);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1181","func":"class B {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(new BufferedInputStream(System.in));\n        int nCases = sc.nextInt();\n        sc.nextLine();\n        for (int i = 0; i < nCases; i++) {\n            int n = sc.nextInt();\n            int totalN = n * (2 * n - 1);\n            System.out.print(\"Case #\" + String.valueOf(i + 1) + \":\");\n            HashMap<Integer, Integer> counter = new HashMap<>();\n            for (int j = 0; j < totalN; j++) {\n                int curr = sc.nextInt();\n                if (counter.containsKey(curr) && counter.get(curr) == 1) {\n                    counter.put(curr, 0);\n                } else {\n                    counter.put(curr, 1);\n                }\n            }\n            LinkedList<Integer> list = new LinkedList<>();\n            counter.forEach((h, fl) -> { if (fl > 0) list.add(h); });\n            list.sort(Integer::compareTo);\n            list.forEach(h -> System.out.print(\" \" + String.valueOf(h)));\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1182","func":"class R1B {\n    final static String PATH = \"\/Users\/eatstreet\/Downloads\/\";\n\n    public static void main(String[] args) throws IOException {\n        R1B r = new R1B();\n        \/\/        List<String> lines = Files.readAllLines(FileSystems.getDefault().getPath(PATH + \"B.in\"));\n                List<String> lines = Files.readAllLines(FileSystems.getDefault().getPath(R1B.PATH + \"B-small-attempt0.in\"));\n        \/\/        List<String> lines = Files.readAllLines(FileSystems.getDefault().getPath(PATH + \"B-large.in\"));\n                PrintWriter writer = new PrintWriter(R1B.PATH + \"B.out\", \"UTF-8\");\n                int idx = 0;\n                int t = Integer.parseInt(lines.get(idx));\n                idx++;\n                for (int ca=1; ca<=t; ca++) {\n                    int n = Integer.parseInt(lines.get(idx));\n                    idx++;\n                    int[] c = new int[2501];\n                    for (int i=0; i<n *2 - 1; i++) {\n                        String v = lines.get(idx);\n                        idx++;\n                        final String[] split = v.split(\" \");\n                        for (String s : split) {\n                            c[Integer.parseInt(s)] ++;\n                        }\n                    }\n                    StringBuilder result = new StringBuilder();\n                    for (int i=0; i<c.length; i++) {\n                        if (c[i] % 2 == 1) {\n                            result.append(i).append(\" \");\n                        }\n                    }\n                    final String s = result.substring(0, result.length() - 1);\n                    writer.println(String.format(\"Case #%d: %s\", ca, s));\n                }\n                writer.close();\n    }\n}"}
{"idx":"1183","func":"class RankAndFile {\n\n\n    public static void main(String[] args) throws FileNotFoundException {\n\/\/        Scanner cin = new Scanner(new File(\"B-small-attempt1.in\"));\n\/\/        PrintStream cout = new PrintStream(\"B-small-attempt1.out.1\");\n        Scanner cin = new Scanner(new File(\"B-large.in\"));\n        PrintStream cout = new PrintStream(\"B-large.out\");\n\/\/        Scanner cin = new Scanner(System.in);\n\/\/        PrintStream cout = System.out;\n\n        int _case = 0;\n        for (int T = cin.nextInt(); T > 0; T--) {\n            _case++;\n            StringBuilder ans = new StringBuilder();\n\n            int n = cin.nextInt();\n            int[] cnt = new int[10000];\n            for (int i=0; i<2*n-1; i++)\n                for (int j=0; j<n; j++)\n                    cnt[cin.nextInt()]++;\n            for (int i=0; i<cnt.length; i++)\n                if (cnt[i] %2 == 1) {\n                    ans.append(\" \");\n                    ans.append(i);\n                }\n\n            cout.printf(\"Case #%d:%s%n\", _case, ans.toString());\n        }\n\n        cin.close();\n        cout.close();\n    }\n}"}
{"idx":"1184","func":"class ProblemB {\n\n\n    public static void main(String[] args) throws Exception {\n        ProblemB r = new ProblemB();\n        String name = \"B-large\";\n                String path = \"\";\n        \n                Locale.setDefault(Locale.US);\n        \n                Scanner sc = new Scanner(new File(path + name + \".in\"));\n                PrintWriter pw = new PrintWriter(path + name + \".out\");\n        \/\/        Scanner sc = new Scanner(System.in);\n        \/\/        PrintWriter pw = new PrintWriter(System.out);\n        \n                int testCases = sc.nextInt();\n                for (int testCase = 1; testCase <= testCases; testCase++) {\n                    int N = sc.nextInt();\n                    pw.print(\"Case #\" + testCase + \": \");\n                    int[] counts = new int[2501];\n                    Arrays.fill(counts, 0);\n                    \n                    for (int k=0; k<((2*N-1)*N); k++) {\n                        int current = sc.nextInt();\n                        counts[current]++;\n                    }\n                    \n                    for (int k=0; k< counts.length; k++) {\n                        if (counts[k] %2 == 1) {\n                            pw.print(k + \" \");\n                        }\n                    }\n                    pw.println();\n                    pw.flush();\n                }\n        \n                pw.close();\n                sc.close();\n    }\n}"}
{"idx":"1185","func":"class RankAndFile {\n\n    public static void main(String[] args) throws NumberFormatException, IOException\n\n    {\n        \n          BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(\"input1.txt\")));\n\n          int test_num = Integer.parseInt(reader.readLine());\n          System.out.println(test_num);\n          BufferedWriter out = new BufferedWriter(new FileWriter(\"output.txt\"));\n         \/\/ out.write(\"Case #\" + test_num + \":\" + \"\\n\");\n          \n          for(int i = 1; i <= test_num; i++)\n\n          {      \n              String input = reader.readLine();\n              int n = Integer.parseInt(input);\n             \/\/ int[][] res = new int[n][n];\n              HashMap<Integer, Integer> numcount = new HashMap<Integer, Integer>();\n              int kk = 0;\n              while( kk < 2*n - 1){\n                  \n                  String curline = reader.readLine();\n                  String[] current =  curline.split(\"\\\\s+\");\n                  \n                \n                  for(int j = 0; j < n; j++){\n                      \n                      if(!numcount.containsKey(Integer.parseInt(current[j]))){\n                    \n                          numcount.put(Integer.parseInt(current[j]), 1);\n                      }else{\n                          numcount.remove(Integer.parseInt(current[j]));\n                      }\n                  }\n                  kk = kk + 1;\n                  \n              }\n              \n                  Set<Integer> keyset = numcount.keySet();\n                  ArrayList<Integer> res = new ArrayList<>();\n                  res.addAll(keyset);\n                  \/\/String res = keyset.toString();\n                 \n                  Collections.sort(res);\n                 \n                  out.write(\"Case #\" + String.valueOf(i) + \": \");\n                  for(int m = 0; m < res.size();m++)\n                  {\n                      out.write(res.get(m).toString());\n                      if(m != res.size() - 1)\n                          out.write(\" \");\n                  }\n                  out.write(\"\\n\");\n                   \/\/System.out.println(res.toString());\n              }\n\n          reader.close();\n\n          out.close();\n    }\n}"}
{"idx":"1186","func":"class Q2 {\n\n    \/\/ passed: small, large - 15 points\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        FileReader fileReader = new FileReader(\"\/Users\/joy\/Documents\/workspace\/GCJ2016R1\/B-large.in\");\n        FileWriter fileWriter = new FileWriter(\"\/Users\/joy\/Documents\/workspace\/GCJ2016R1\/B-large.out\");\n        BufferedReader in = new BufferedReader(fileReader);\n        BufferedWriter out = new BufferedWriter(fileWriter);\n        \n        int t = Integer.parseInt(in.readLine());\n        \n        \/\/ per testcase\n        for(int i=0; i<t; i++) {\n            int n = Integer.parseInt(in.readLine());\n            \n            \/\/per line\n            int[] missing = new int[n];\n            BitSet b = new BitSet(2500);\n            for(int j=0; j<2*n-1; j++) {\n                String[] input = in.readLine().split(\" \");\n                for(int k=0; k<n; k++) {\n                    b.flip(Integer.parseInt(input[k]));\n                }\n            }\n            int idx = 0;\n            for(int j=1; j<=2500; j++) {\n                if(b.get(j)) {\n                    missing[idx] = j;\n                    idx++;\n                }\n            }\n            Arrays.sort(missing);\n            \n            String output = \"\";\n            for(int j: missing) {\n                output+=(j+\" \");\n            }\n            System.out.println(output);\n            out.write(String.format(\"Case #%d: %s\",i+1, output.substring(0,output.length()-1)));\n            if(i<t-1) \n                out.write(\"\\n\");\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"1187","func":"static void main(String[] args) throws Exception\n    {    \n        in = new Scanner(new File(FILEIN));\n        out = new PrintWriter(FILEOUT);\n        int tests = in.nextInt();\n        in.nextLine();\n        for (int i=1;i<=tests;i++)\n        {\n            out.print( \"Case #\"+i+\":\");\n            int n = in.nextInt();\n            boolean[] a = new boolean[2501];\n            for (int i3=0;i3<2*n*n-n;i3++)\n            {\n                int h = in.nextInt();\n                a[h] = !a[h];\n            }\n            List<Integer> l = new ArrayList<Integer>();\n            for (int i1=1;i1<=2500;i1++)\n            {\n                if (a[i1])\n                {\n                    l.add(i1);\n                }\n            }\n            Collections.sort(l);\n            for (int i2:l)\n            {\n                out.print(\" \"+i2);\n            }\n            out.println();\n            in.nextLine();\n        }\n        out.close();\n    }\n}"}
{"idx":"1188","func":"class RankAndFile {\n    \n\n    public static void main(String[] args) {\n        try {\n            final Scanner sc = new Scanner(new File(args[0]));\n            final FileWriter writer = new FileWriter(new File(\"rankAndFile.out\"));\n            final int numberOfCases = sc.nextInt();\n            int currentCase = 0;\n            sc.nextLine();\n            while(currentCase < numberOfCases){\n                final int n = sc.nextInt();\n\/\/                System.out.println(n);\n                Map<Integer, Integer> heights = new HashMap<>();\n                for (int i = 0; i < 2*n-1; i++){\n                    for (int j = 0; j < n; j++){\n                        final int next = sc.nextInt();\n\/\/                        System.out.println(next);\n                        if(heights.containsKey(next)){\n                            heights.put(next, heights.get(next).intValue() + 1);\n                        } else {\n                            heights.put(next, 1);\n                        }\n                    }    \n                }\n                final List<Integer> missingRow = new ArrayList<>();\n                        for (Integer height:heights.keySet()){\n                \/\/            System.out.println(\"height: \" + height + \"  number: \" + heights.get(height));\n                            if(heights.get(height)%2 != 0){\n                                missingRow.add(height);\n                            }\n                        }\n                        Collections.sort(missingRow);\n                        StringBuilder builder = new StringBuilder();\n                        for(Integer integer:missingRow){\n                            builder.append(\"\" + integer + \" \");\n                        }\n                final String result = builder.toString().trim();\n                System.out.println(\"Case #\" + (currentCase + 1) + \": \" + result);\n\n                writer.write(\"Case #\" + ++currentCase + \": \" + result + \"\\n\");\n            }\n        \n            writer.close();\n            sc.close();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n\n}"}
{"idx":"1189","func":"class Height {\n        \n        \n    public static void main(String[] args){\n        \n        \n         Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n         \n         int problemcount  = scan.nextInt();\n         int i = 1;\n         \n        \n         \n         while(i <= problemcount)\n         {\n\n            int count = scan.nextInt() ;\n            int countmen = count;\n            \n            count *= count;\n            \n            count *= 2;\n            count -= countmen;\n            \n            int[] heights  = new int[2501];\n            \n            \n            while(count > 0){\n                \n                int height = scan.nextInt();\n                \n                heights[height]++;\n                \n                count--;\n                \n            }\n            \n            int[] missing = new int[countmen];\n            int index = 0;\n            \n            for(int k = 0; k<heights.length;k++){\n                if(heights[k] % 2 == 1){\n                    missing[index] = k;\n                    index++;\n                    \n                }\n            }\n            \n            Arrays.sort(missing);\n            \n            String aux = \"\";\n            \n            for(Integer k : missing){\n                \n                aux += k + \" \";\n                \n            }\n            \n            aux.trim();\n            \n             System.out.println(\"Case #\" + i + \": \" + aux);\n             \n             i++;\n         }\n        \n    }\n\n}"}
{"idx":"1190","func":"class RankAndFile {\n\n    public static void main(String[] args) throws IOException {\n        FileInputStream fstream = new FileInputStream(\"B-large.in\");\n        BufferedReader br = new BufferedReader(new InputStreamReader(fstream));\n        \n        File fout = new File(\"out.txt\");\n        FileOutputStream fos = new FileOutputStream(fout);\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));\n        \n        int count = Integer.parseInt(br.readLine());\n        for (int i = 1; i <= count; i++) {\n            int lineNum = Integer.parseInt(br.readLine());\n            HashSet<Integer> set = new HashSet<Integer>();\n            for (int j = 0; j < lineNum*2-1; j++) {\n                Scanner scanner = new Scanner(br.readLine());\n                while (scanner.hasNextInt()) {\n                    int height = scanner.nextInt();\n                    if (set.contains(height)) {\n                        set.remove(height);\n                    } else {\n                        set.add(height);\n                    }\n                }\n            }\n            int[] arr = new int[lineNum];\n            int k = 0;\n            for (int height : set) {\n                arr[k++] = height;\n            }\n            Arrays.sort(arr);\n            bw.write(\"Case #\" + i + \": \");\n            for (k = 0; k < lineNum; k++) {\n                bw.write(arr[k] + \" \");\n            }\n            bw.newLine();\n        }\n        br.close();\n        bw.close();\n    }\n}"}
{"idx":"1191","func":"class B {\n\n    public static void main(String args[]){\n        \n        Scanner s = null;\n        try{\n            s = new Scanner(System.in);\n            int T = s.nextInt();\n            int N;\n            \n            int index=0;\n            ArrayList<TreeSet<Integer>> output = new ArrayList<TreeSet<Integer>>();\n            while(index<T){                \n                N = s.nextInt();\n                int innerIndex=0;\n                TreeSet<Integer> heightSet = new TreeSet<Integer>();\n                int height;\n                while(innerIndex< ((2*N)-1)*N){\n                    height = s.nextInt();\n                    if(heightSet.contains(height))\n                        heightSet.remove(height);\n                    else\n                        heightSet.add(height);\n                    \n                    innerIndex++;\n                    \/\/System.out.println(innerIndex);\n                }\n                output.add(heightSet);\n                index++;                \n            }\n            index=0;\n            while(index<T){\n                TreeSet<Integer> heightSet = output.get(index);\n                System.out.print(\"Case #\"+(index+1)+\":\");\n                \n                for(Integer height:heightSet){\n                    System.out.print(\" \"+height);\n                }\n                System.out.println();\n                index++;\n            }\n            \n        }catch(Exception e){\n            e.printStackTrace();\n        }finally{\n            s.close();\n        }\n        \n        \n    }    \n    \n}"}
{"idx":"1192","func":"class Main {\n\n\n    public static void main(String[] args) {\n        String line;\n        int tab[] = new int[2500];\n        int tmp;\n        int n=0;\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(new File(\"\/home\/talik\/Dokumenty\/1RoundB\/B-large.in\")));\n            Path path = Paths.get(\"\/home\/talik\/Dokumenty\/1RoundB\/output.txt\");\n            \/\/ Path file = Files.createFile(path);\n            PrintWriter writer = new PrintWriter(path.toString());\n            int numberOfLines = Integer.parseInt(reader.readLine());\n            for(int i=1;i<=numberOfLines;i++){\n                Arrays.fill(tab,0);\n                line = reader.readLine();\n                n = Integer.parseInt(line);\n                for(int j=0;j<(2*n-1);j++) {\n                    line = reader.readLine();\n                    String[] cos = line.split(\"\\\\s+\");\n                    for (String x: cos) {\n                        tmp = Integer.parseInt(x);\n                        tab[tmp-1]++;\n                    }\n                }\n                writer.print(\"Case #\"+i+\":\");\n                for (int j=0;j<tab.length;j++){\n                    if(tab[j]%2==1){\n                        writer.print(\" \"+(j+1));\n                    }\n                }\n                writer.println();\n            }\n            writer.flush();\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException io){\n            io.printStackTrace();\n        }\n\n\n    }\n\n\n}"}
{"idx":"1193","func":"class B {\n\n    public static void main(String[] args) {\n        try {\n            Scanner input = new Scanner(new File(\"D:\/x\u0467\u03f0\/eclipse2\/eclipseWorkSpace\/GoogleCodeJam2016\/src\/input\/roundA1\/B-large.in\"));\n            try {\n                FileWriter fw = new FileWriter(new File(\"D:\/x\u0467\u03f0\/eclipse2\/eclipseWorkSpace\/GoogleCodeJam2016\/src\/output\/roundA1\/B-large.out\"));\n                int caseNum = Integer.parseInt(input.nextLine());\n                for(int i = 1; i <= caseNum; i++) {\n                    int N = Integer.parseInt(input.nextLine());\n                    int[] cnt = new int[2501];\n                    int total = 2 * N - 1;\n                    for(int j = 0; j < total; j++) {\n                        String list = input.nextLine();\n                        String[] strArray = list.split(\"\\\\s{1,}\");\n                        for(int k = 0; k < N; k++) {\n                            cnt[Integer.parseInt(strArray[k])]++;\n                        }\n                    }\n                    int[] missingList = new int[N];\n                    int k = 0;\n                    for(int j = 1; j < 2501; j++) {\n                        if(cnt[j] % 2 != 0) {\n                            missingList[k++] = j;\n                        }\n                        if(k == N) {\n                            break;\n                        }\n                    }\n                    Arrays.sort(missingList);\n                    String output = \"\";\n                    for(int j = 0; j < N; j++) {\n                        output += missingList[j] + \" \";\n                    }\n                    output = \"Case #\" + i + \": \" + output + \"\\n\";\n                    fw.write(output);\n                }\n                fw.close();\n            } catch (IOException e) {\n                \/\/ TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            input.close();\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"1194","func":"class ProblemB\n{\n    static String inputPath = \"D:\\\\contest\\\\trainning\\\\round1a2016\\\\src\\\\main\\\\resources\\\\B-large.in\";\n    static String outputPath = \"D:\\\\contest\\\\trainning\\\\round1a2016\\\\src\\\\main\\\\resources\\\\B-large.out\";\n\n    static Scanner in;\n    static BufferedWriter bw;\n    static int numberTest;\n\n\n    static Integer n;\n    static int[] numberApper = new int[2600];\n    static List<Integer> result = new ArrayList();\n\n    public static void main(String[] args) throws IOException\n    {\n        bw = new BufferedWriter(new FileWriter(outputPath));\n        in = new Scanner(new BufferedReader(new FileReader(inputPath)));\n\n        numberTest = in.nextInt();\n        for (int i = 0; i < numberTest; i++)\n        {\n            System.out.println(\"test :\" + (i + 1));\n            n = in.nextInt();\n            for (int i1 = 0; i1 < 2500; i1++)\n            {\n                numberApper[i1] = 0;\n            }\n            for (int i2 = 0; i2 < 2 * n - 1; i2++)\n            {\n                int pre = 0;\n                for (int j = 0; j < n; j++)\n                {\n                    int x = in.nextInt();\n                    if (x == pre)\n                    {\n                        System.out.println(\"-----------------------------\");\n                    }\n                    pre = x;\n                    numberApper[x]++;\n                }\n            }\n            result = new ArrayList();\n            for (int i1 = 0; i1 < 2500; i1++)\n                if (numberApper[i1] > 0 && numberApper[i1] % 2 == 1)\n                {\n                    result.add(i1);\n                }\n            String list = \"\";\n            for (Integer s : result)\n                list += s + \" \";\n            String result1 = \"Case #\" + (i + 1) + \": \" + list + \"\\n\";\n            bw.write(result1);\n        }\n\n        bw.close();\n    }\n}"}
{"idx":"1195","func":"class Main {\n\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext()) {\n            int t = cin.nextInt();\n            for(int caseNumber = 1;caseNumber <= t;caseNumber++){\n                int pool[] = new int[3000];\n                Arrays.fill(pool, 0);\n                int N = cin.nextInt();\n                for(int i = 1;i < 2 * N;i++){\n                    for(int j = 0;j < N;j++){\n                        int x = cin.nextInt();\n                        pool[x]++;\n                    }\n                }\n                String result = \"\";\n                for(int i = 0;i < 3000;i++){\n                    if((pool[i] & 1) == 1){\n                        result = result + i + \" \";\n                    }\n                }\n                String output = result.substring(0,result.length()-1);\n                System.out.println(\"Case #\"+caseNumber+\": \"+output);\n            }\n            \n        }\n    }\n\n}"}
{"idx":"1196","func":"class B {\n  \n  public static void main(String cmdArgs[]) throws Exception {\n    long time = System.currentTimeMillis();\n\n    String filename = cmdArgs[0];\n\n    BufferedWriter writer =\n      new BufferedWriter(new PrintWriter(filename + \"-output.txt\", \"UTF-8\"));\n    BufferedReader reader = new BufferedReader(new FileReader(filename));\n\n    String nextLine;\n    nextLine = reader.readLine(); \/\/ ignore count\n    int caseNum = 1;\n    while ((nextLine = reader.readLine()) != null) {\n      int rows = Integer.valueOf(nextLine);\n\n      TreeSet<Integer> soldiers = new TreeSet<Integer>();\n      for (int i = 0; i < 2 * rows - 1 ; i++) {\n        nextLine = reader.readLine();\n        String[] row = nextLine.split(\" \");\n        for (String soldier : row) {\n          int height = Integer.valueOf(soldier);\n          if (soldiers.contains(height)) {\n            soldiers.remove(height);\n          } else {\n            soldiers.add(height);\n          }\n        }\n      }\n      if (soldiers.size() != rows) {\n        System.out.println(\"BUG\");\n      }\n      writer.write(\"Case #\" + caseNum + \":\");\n      for (Integer soldier : soldiers) {\n        writer.write(\" \" + soldier);\n      }\n      caseNum++;\n      writer.newLine();\n    }\n    writer.close();\n    long elapsed = System.currentTimeMillis() - time;\n    System.out.println(\"millis elapsed: \" + elapsed);\n  }\n}"}
{"idx":"1197","func":"class RankAndFile {\n\n    public static void main(String[] args) {\n        File input = new File(\"B-large.in copy.txt\");\n        try {\n            Scanner in = new Scanner(input);\n            int total = in.nextInt();\n            Writer writer = new BufferedWriter(new OutputStreamWriter(\n                    new FileOutputStream(\"RankAndFileLargeOutput.out\"), \"utf-8\"));\n            for (int i = 1; i <= total; i++) {\n                int N = in.nextInt();\n                int[][] reminderList = new int[2 * N - 1][N];\n                for (int j = 0; j < 2 * N - 1; j++) {\n                    for (int k = 0; k < N; k++) {\n                        reminderList[j][k] = in.nextInt();\n                    }\n                }\n                int[] missing = new int[N];\n                int[] height = new int[2500]; \/\/ default:0\n                for (int i1 = 0; i1 < 2500; i1++) {\n                    height[i1] = 0;\n                }\n                int missIndex = 0;\n                for (int j1 = 0; j1 < 2 * N - 1; j1++) {\n                    for (int k = 0; k < N; k++) {\n                        height[reminderList[j1][k] - 1]++;\n                    }\n                }\n                for (int i2 = 0; i2 < 2500; i2++) {\n                    if (height[i2] % 2 != 0) {\n                        missing[missIndex] = i2 + 1;\n                        missIndex++;\n                    }\n                }\n                System.out.println(Arrays.toString(missing));\n                int[] missingList = missing;\n                String temp = String.format(\"Case #%d:\", i);\n                writer.write(temp);\n                for (int j = 0; j < N; j++) {\n                    temp = String.format(\" %d\", missingList[j]);\n                    writer.write(temp);\n                }\n                temp = String.format(\"%n\");\n                writer.write(temp);\n            }\n            writer.close();\n            in.close();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n    }\n}"}
{"idx":"1198","func":"class B {\n    public static void main(String[]args)throws Exception\n    {\n        Scanner scan=new Scanner(new File(\"B-large.in\"));\n        PrintWriter out=new PrintWriter(new File(\"B-out.txt\"));\n        int n=Integer.parseInt(scan.nextLine());\n        for(int i=1;i<=n;i++)\n        {\n            int size=Integer.parseInt(scan.nextLine());\n            int[]counts=new int[2500];\n            for(int j=0;j<2*size-1;j++)\n            {\n                String[]heights=scan.nextLine().split(\" \");\n                for(int k=0;k<heights.length;k++)\n                {\n                    counts[Integer.parseInt(heights[k])-1]++;\n                }\n            }\n            ArrayList<Integer>solution=new ArrayList<Integer>();\n            for(int j=0;j<counts.length;j++)\n            {\n                if(counts[j]%2!=0)\n                    solution.add(j+1);\n            }\n            Collections.sort(solution);\n            out.print(\"Case #\"+i+\": \"+solution.get(0));\n            for(int j=1;j<solution.size();j++)\n            {\n                out.print(\" \"+solution.get(j));\n            }\n            out.println();\n        }\n        out.close();\n    }\n}"}
{"idx":"1199","func":"class Problem2 {\n    \n    public static SortedMap<Integer, Integer> map;\n    \n    \n    public static void main (String... args) {\n        Scanner scanner = new Scanner(System.in);\n        Integer cnt = scanner.nextInt();\n        for (int c = 1; c <= cnt; c++) {\n            map = new TreeMap<Integer, Integer>();\n            int n = scanner.nextInt();\n            \n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < n; k++) {\n                    Integer key = scanner.nextInt();\n                    \/\/System.out.println(\">\" + key);\n                    if (!map.containsKey(key)) {\n                        map.put(key, 1);\n                    } else {\n                        map.put(key, map.get(key)+1);\n                    };\n                }                \n            }\n\n            for (int j = 0; j < n - 1; j++) {\n                for (int k = 0; k < n; k++) {\n                    Integer key = scanner.nextInt();\n                    \/\/System.out.println(\">\" + key);\n                    if (!map.containsKey(key)) {\n                        map.put(key, 1);\n                    } else {\n                        map.put(key, map.get(key)+1);\n                    };\n                }                \n            }\n\n            System.out.print(\"Case #\"+c + \":\");\n            for (Integer key : map.keySet()) {\n                if (map.get(key) % 2 == 1) {\n                    System.out.print(\" \"+ key);\n                }\n            }\n            System.out.println(\"\\n\");\n            \n            \/\/System.out.println(\"Case #\" + c + \": \" + process(str));\n        }\n        scanner.close();\n    }\n\n}"}
{"idx":"1200","func":"class RankAndFile\n{\n    public static void main(String[] args)\n    {\n        try\n        {\n            File file = new File(\"input.txt\");\n            FileReader fileReader = new FileReader(file);\n            BufferedReader bufferedReader = new BufferedReader(fileReader);\n            StringBuffer output = new StringBuffer();\n            \n            int lines = Integer.parseInt(bufferedReader.readLine());\n            for(int i = 1; i <= lines; i++)\n            {\n                HashMap<Integer, Boolean> map = new HashMap<Integer, Boolean>();\n                int size = Integer.parseInt(bufferedReader.readLine());\n                for(int j = 0; j < 2 * size - 1; j++)\n                {\n                    String[] line = bufferedReader.readLine().split(\" \");\n                    for(String soldier : line)\n                    {\n                        int value = Integer.parseInt(soldier);\n                        if(map.get(value) == null || map.get(value) == false)\n                        {\n                            map.put(value, true);\n                        }\n                        else\n                        {\n                            map.put(value, false);\n                        }\n                    }\n                }\n                \n                ArrayList<Integer> array = new ArrayList<Integer>();\n                for(Integer soldier : map.keySet())\n                {\n                    if(map.get(soldier) == true)\n                    {\n                        array.add(soldier);\n                    }\n                }\n                Collections.sort(array);\n                String line = \"\";\n                for(Integer value : array)\n                {\n                    line += \" \" + value;\n                }\n                \n                output.append(\"Case #\" + i + \": \" + line.substring(1) + \"\\n\");\n            }\n            fileReader.close();\n            \n            file = new File(\"output.txt\");\n            FileWriter fileWriter = new FileWriter(file);\n            fileWriter.write(output.toString());\n            fileWriter.flush();\n            fileWriter.close();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1201","func":"class Round1B {\n    public static void main(String[] args) {\n            \n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        sc.nextLine();\n        Writer writer = null;\n        try {\n            writer = new BufferedWriter(new OutputStreamWriter(\n                  new FileOutputStream(\"filename.txt\"), \"utf-8\"));\n            for(int k = 0;k < T; k ++){\n                System.out.println(k);\n                int N = sc.nextInt();\n                 StringBuilder sb = new StringBuilder();\n                 HashSet<Integer> set = new HashSet<Integer>();\n                 for(int i = 0; i < N*(2*N-1); i++){\n                     int t = sc.nextInt();\n                     if(set.contains(t))\n                         set.remove(t);\n                     else \n                         set.add(t);\n                 }\n                 ArrayList<Integer> res = new ArrayList<Integer>();\n                 res.addAll(set);\n                 Collections.sort(res);\n                 for(int i = 0;i < res.size()-1;i ++){\n                     sb.append(res.get(i));\n                     sb.append(' ');\n                 }\n                 sb.append(res.get(res.size()-1));\n                 writer.write(\"Case #\" + (k+1) + \": \" + sb.toString()+\"\\n\");\n            }\n           \n        } catch (IOException ex) {\n        } finally {\n           try {writer.close();} \n           catch (Exception ex) {\/*ignore*\/}\n        }\n    }\n}"}
{"idx":"1202","func":"class codejama12 {\n    \n    public static void main(String ... nopushupsformesarge) throws Exception\n    {\n        Scanner input = new Scanner(System.in);\n        float T = input.nextFloat();\n        for (int n = 0; n < T; n++)\n        {\n            int N=input.nextInt();\n            int[] inarr=new int[(2*N-1)*N];\n            for(int i=0;i<(2*N-1)*N;i++)\n            { \/\/first val is for findin if all list been traverse\n                    inarr[i]=input.nextInt();\n            }\/\/input of 2*n-1 list\n            \n            for(int j=1;j<(2*N-1)*N;j++)\n            {\n                int key = inarr[j];\n                int i = j-1;\n                while ( (i > -1) && ( inarr [i] > key ) ) \n                {\n                    inarr [i+1] = inarr [i];\n                    i--;\n                }\n               inarr[i+1] = key;\n            }\n            \n            String str=\"\";\n            for(int j=0;j<(2*N-1)*N;)\n            {\n                int key=inarr[j];\n                int count=0;\n                while(j<(2*N-1)*N)\n                {\n                    if(inarr[j]!=key)\n                    {\n                        break;\n                    }\n                    j=j+1;\n                    count++;\n                    \n                }\n                if(count%2!=0)\n                {\n                    str=str+\" \"+key;\n                }\n            }\n            System.out.println(\"Case #\"+(n+1)+\":\"+str);\n        }\n    }\n}"}
{"idx":"1203","func":"class Rank_File {\n\n    public static void main(String arg[]) throws IOException {\n        FileReader f = new FileReader(\"B-large(1).in\");\n        BufferedReader br = new BufferedReader(f);\n        FileWriter fw = new FileWriter(\"output\");\n\n        int T,N,t,n;\n        String[] temp;\n        int[] arr;\n        T=Integer.parseInt(br.readLine());\n        t=T;\n        while(T-->0){\n            arr=new int[2500];\n            N=Integer.parseInt(br.readLine());\n            n=2*N-1;\n            fw.write(\"Case #\" + (t - T) + \": \");\n\n            while(n-->0) {\n                \/\/System.out.println(\"n = \"+n);\n                temp = br.readLine().split(\" \");\n                for (String s : temp) {\n                    \/\/System.out.println(s);\n                    arr[Integer.parseInt(s)-1]++;\n                }\n            }\n\n            for(int i=0;i<2500;i++){\n                \/\/System.out.print(\"  \"+(arr[i]));\n                if(arr[i]%2!=0){\n                    fw.write(\" \"+(i+1));\n                }\n                arr[i]=0;\n            }\n            fw.write(\"\\n\");\n        }\n        fw.close();\n    }\n}"}
{"idx":"1204","func":"class B {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int T = sc.nextInt();\n        for (int tc = 1; tc <= T; tc++) {\n            System.out.print(\"Case #\" + tc + \":\");\n\n            int N = sc.nextInt();\n            int[] heightCounts = new int[3000];\n            for (int i = 0; i < 2 * N - 1; i++) {\n                for (int j = 0; j < N; j++) {\n                    int height = sc.nextInt();\n                    heightCounts[height]++;\n                }\n            }\n\n            List<Integer> missings = new ArrayList<Integer>();\n            for (int i = 0; i < heightCounts.length; i++) {\n                if (heightCounts[i] % 2 != 0) {\n                    missings.add(i);\n                }\n            }\n\n            Collections.sort(missings);\n            for (int missing : missings) {\n                System.out.print(\" \" + missing);\n            }\n            System.out.println();\n        }\n\n        sc.close();\n    }\n}"}
{"idx":"1205","func":"class Solution2 {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        \n        for(int i=0;i<t;i++)\n        {\n            int n = in.nextInt();\n            int [][] arr = new int [2*n-1][n];\n            for(int x=0;x<2*n-1;x++)\n                for(int y=0;y<n;y++)\n                    arr[x][y]=in.nextInt();\n            HashMap<Integer,Integer> h = new HashMap<Integer,Integer>();\n            ArrayList<Integer> a = new ArrayList<Integer>();\n            for(int i3=0;i3<2*n-1;i3++)\n                for(int j=0;j<n;j++)\n                {\n                    if(h.containsKey(arr[i3][j]))\n                        h.put(arr[i3][j],h.get(arr[i3][j])+1);\n                    else\n                        h.put(arr[i3][j],1);\n                }\n            Set<Integer> keyset = h.keySet();\n            ArrayList<Integer> array = new ArrayList<Integer>(keyset);\n            for(int i2=0;i2<array.size();i2++){\n                if(h.get(array.get(i2))%2==1){\n                    a.add(array.get(i2));\n                }\n                \n            }\n            int[] newarr= new int[a.size()];\n            for(int i4=0;i4<n;i4++)\n                newarr[i4] = a.get(i4);\n            Arrays.sort(newarr);\n            System.out.print(\"Case #\"+(i+1)+\":\");\n            for(int i1=0;i1<newarr.length;i1++)\n                System.out.print(\" \"+newarr[i1]);\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"1206","func":"class rankandfile {\n    public static void main(String[] args)\n    {\n        Scanner scn = new Scanner(System.in);\n        \n        int T = scn.nextInt();\n        \n        for( int c = 1; c <= T; c++ )\n        {\n            HashMap<Integer, Integer> hM = new HashMap<Integer, Integer>();\n            \n            int N = scn.nextInt();\n            \n            for( int i = 0; i < 2*N - 1; i++ )\n            {\n                for( int j = 0; j < N; j++ )\n                {\n                    int number = scn.nextInt();\n                    \n                    \/\/System.out.println(number);\n                    \n                    if(!hM.containsKey(number))\n                        hM.put(number, 1);\n                    else\n                        hM.put(number, hM.get(number) + 1);\n                }\n            }\n            \n            int[] list = new int[N];\n            int counter = 0;\n            \/\/System.out.println(hM.keySet().size());\n            for( Integer number : hM.keySet() )\n            {\n                \/\/System.out.println(\" \" + number);\n                if( hM.get(number)%2 != 0 )\n                {\n                    list[counter] = number;\n                    \/\/System.out.println(list[counter]);\n                    counter++;\n                }\n            }\n            \n            Arrays.sort(list);\n            \n            System.out.print(\"Case #\" + c + \": \");\n            for( int i = 0; i < list.length; i++ )\n            {\n                System.out.print( list[i] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1207","func":"class r1ab {\n    \n    \n    \n    public static void main(String[] args) throws IOException{\n        \/\/ TODO Auto-generated method stub\n        \/\/ For STDIN, put two stars below.\n        \/\/ For File In, put one star below.\n        \/*\/\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        \/*\/\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src\/sample.in\"))));\n        \/**\/\n        int t,n,i,j,k;\n        t=sc.nextInt();\n        for(i=1;i<=t;i++){\n            if(i!=1)\n                System.out.println();\n            System.out.print(\"Case #\"+i+\": \");\n            n=sc.nextInt();\n            int[] g = new int[2510];\n            Arrays.fill(g, 0);\n            int tot=2*n*n-n;\n            int tmp;\n            for(j=0;j<tot;j++){\n                tmp=sc.nextInt();\n                g[tmp]++;\n            }\n            for(j=0;j<=2500;j++)\n                if(g[j]%2==1)\n                    System.out.print(\" \"+j);\n        }\n        \n    }\n\n}"}
{"idx":"1208","func":"class argus {\n    \n    public static void main(String args[]){\n        File input=new File(\"F:\\\\CodeJam\\\\argusIn.txt\");\n        File output=new File(\"F:\\\\CodeJam\\\\argusOut.txt\");\n        BufferedWriter out=null;\n        Scanner s1;\n        try {\n            s1 = new Scanner(input);\n            String x=s1.nextLine();\n            long t=Long.parseLong(x);\n            try{\n                out=new BufferedWriter(new FileWriter(output));\n                for(int i=0;i<t;i++){\n                    out.write(\"Case #\"+(i+1)+\": \");\n                    \/\/out.newLine();\n                    int n=s1.nextInt();\n                    HashMap<Integer,Integer> a=new HashMap<Integer,Integer>();\n                    for(int j=0;j<((2*n)-1)*n;j++){\n                        int temp=s1.nextInt();\n                        \/\/System.out.println(temp);\n                        if(a.containsKey(temp)){\n                            a.put(temp, (a.get(temp))+1);\n                        }\n                        else{\n                            a.put(temp, 1);\n                        }\n                        \n                    }\n                    int arr[]=new int[n];\n                    int ct=0;\n                    for(int p:a.keySet()){\n                        if(a.get(p)%2==1){\n                            System.out.println(p);\n                            arr[ct]=p;\n                            ct++;\n                        }\n                    }\n                    Arrays.sort(arr);\n                    for(int k=0;k<n;k++){\n                        out.write(arr[k]+\" \");\n                    }\n                    out.newLine();\n                }\n                    \n                out.close();\n                \n            }catch(Exception e){\n                e.printStackTrace();\n            }\n        } catch (FileNotFoundException e1) {\n            \n            e1.printStackTrace();\n        }\n        \n    }\n    \n}"}
{"idx":"1209","func":"class ProblemB {\n    private static final String FILENAME = \"B-large\";\n\n    public static void main(String[] args) throws Exception {\n        Scanner input = new Scanner(new FileReader(FILENAME + \".in\"));\n        PrintWriter output = new PrintWriter(new FileWriter(FILENAME + \".out\"));\n\n        long start = System.currentTimeMillis();\n        int testCase = input.nextInt();\n        for (int t=1; t<=testCase; t++) {\n            int N = input.nextInt();\n            boolean[] check = new boolean[2501];\n            Arrays.fill(check, false);\n            for (int i=0; i<(2*N-1); i++) {\n                for (int j=0; j<N; j++) {\n                    int n = input.nextInt();\n                    check[n] = !check[n];\n                }\n            }\n            output.print(\"Case #\"+t+\":\");\n            for (int i=1; i<=2500; i++) {\n                if (check[i]) output.print(\" \" + i); \n            }\n            output.print(\"\\n\");\n        }\n        System.out.printf(\"Total duration: %dms\\n\", System.currentTimeMillis() - start);\n\n        input.close();\n        output.close();\n    }\n}"}
{"idx":"1210","func":"class Rank_Files {\npublic static void main(String ar[])\n{\n    Scanner input=new Scanner(System.in);\n    int t=input.nextInt();\n    int n;\n    for(int i=1;i<=t;i++)\n    {\n        System.out.print(\"Case #\"+i+\": \");\n        n=input.nextInt();\n        int a[]=new int[2501];\n        for(int j=0;j<2501;j++)\n        a[j]=0;\n        int l=(2*n*n-n);\n        for(int j=0;j<l;j++)\n        {\n            int k=input.nextInt();\n            a[k]++;\n        }\n        for(int j=0;j<2501;j++)\n        {\n            if(a[j]%2!=0)\n                System.out.print(j+\" \");\n        }\n        System.out.println();\n    }\n}\n}"}
{"idx":"1211","func":"class rank\n{\n    static Scanner scan;\n    static int N, T;\n    \n    public static void main(String[] args)\n    {\n        \n        scan= new Scanner(System.in);\n        T= scan.nextInt();\n        \n        for(int zz=1; zz<=T; zz++)\n        {\n            N= scan.nextInt();\n            int[] s= new int[2501];\n            \n            for(int i=0; i<(2*N-1)*N; i++)\n            {\n                int a= scan.nextInt();\n                s[a]++;\n            }\n            \n            String ans=\"\";\n            \n            int j=0;\n            for(int i=1; i<s.length; i++)\n                if(s[i]%2==1)\n                {\n                    ans+= i+\" \";\n                    j++;\n                }            \n            ans= ans.trim();\n            \n            System.out.println(\"Case #\"+zz+\": \"+ans);\n            \n        }\n    }\n}"}
{"idx":"1212","func":"class rank {\n\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        BufferedReader f = new BufferedReader(new FileReader(\"C:\/Users\/John\/Documents\/Java\/2016\/der.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"C:\/Users\/John\/Documents\/Java\/2016\/outlarge.out\")));\n        int cases = Integer.parseInt(f.readLine());\n        \n        for(int q = 0; q< cases; q++){\n        int n = Integer.parseInt(f.readLine());\n        List<Integer> master =new ArrayList<Integer>();\n        List<Integer> solution =new ArrayList<Integer>();\n        \n        for(int w = 0; w < (n+n-1); w++){\n            String in = f.readLine();\n            String[] parts = in.split(\" \");\n            for(int i= 0; i<parts.length; i++){\n                master.add(Integer.parseInt(parts[i]));\n            }\n        }\n        \n        System.out.println(master);\n        do{\n            if(master.size()==1){\n                solution.add(master.get(0));\n                System.out.println(\"IN HERE\" + master);\n                break;\n            }\n            int j = master.get(0);\n            master.remove(0);\n            if(master.contains(j)){\n                for(int p = 0; p <master.size();p++){\n                    if(master.get(p).equals(j)){\n                        master.remove(p);\n                        break;\n                    }\n                }\n            }else{\n                solution.add(j);\n            }\n        }while(master.size()!=0);\n        Collections.sort(solution);\n        System.out.println(solution);\n        String output1 = \"\";\n        for(int y = 0; y< solution.size();y++){\n            if((y+1)==solution.size()){\n                output1 = output1 + solution.get(y);\n                break;\n            }\n            output1 = output1 + solution.get(y) + \" \";\n        }\n        out.write(\"Case #\" + (q+1) + \": \" + output1);\n        if((q+1)!=cases){\n            out.write(\"\\n\");\n        }\n        }\n        out.close();\n        f.close();\n    }\n\n}"}
{"idx":"1213","func":"class Main {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n    for (int i = 1; i <= t; ++i) {\n      HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n      int n = in.nextInt();\n      \/\/ 2*n - 1\n      for(int j = 0; j < 2*n-1; j++) {\n          \/\/ n\n          for(int k = 0; k < n; k++) {\n              int current = in.nextInt();\n              if(!map.containsKey(current)) {\n                  map.put(current, 1);\n              }else{\n                  int temp = map.get(current);\n                  map.put(current, temp+1);\n              }\n          }\n      }\n      \/\/ traver map\n      ArrayList<Integer> list = new ArrayList<Integer>();\n      for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n          int val = entry.getValue();\n          int key = entry.getKey();\n          if(val%2 != 0)\n              list.add(key);\n      }\n      Collections.sort(list);\n\n      System.out.print(\"Case #\" + i + \": \");\n      for(int z = 0; z < list.size(); z++){\n          if(z != list.size()-1)\n              System.out.print(list.get(z) + \" \");\n          else\n              System.out.print(list.get(z)+ \"\\n\");\n      }\n    }\n  }\n}"}
{"idx":"1214","func":"class RankFile {\n    public static void main(String[] args) throws IOException{\n        \/\/BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(new File(\"largeout.txt\"));\n        int t = in.nextInt();\n        for(int i = 0;i<t;i++){\n            int n = in.nextInt();\n            int[] tracker = new int[2501];\n            int end = (2*n-1)*n;\n            int k;\n            for(int j = 0;j<end;j++){\n                k = in.nextInt();\n                tracker[k] = (++tracker[k])%2;\n            }\n            out.print(\"Case #\" + (i+1) + \":\");\n            for(int j = 0;j<2501;j++){\n                if(tracker[j]!=0){\n                    out.print(\" \" + j);\n                }\n            }\n            out.print(\"\\n\");\n        }\n        out.close();\n    }\n}"}
{"idx":"1215","func":"class Main {\n  public static void main(String[] args) throws FileNotFoundException {\n      \/\/new FileInputStream (new File(\"A-large.in\") ) \n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader( new FileInputStream (new File(\"B-small-attempt0.in\") )   ) ));\n    int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n    \n    for (int i = 1; i <= t; ++i) {\n        int n = in.nextInt();\n        HashMap<Integer, Integer> map = new HashMap<Integer,Integer>();\n        for( int j =1; j<=n*(2*n-1);j++){\n            int num = in.nextInt();\n            int value = 1;\n            if( map.containsKey(num) ){\n                value += map.get(num);\n            }\n            map.put(num, value);\n        }\n        int[] result = new int[n];\n        int k =0;\n        for( int key: map.keySet() ){\n            int count = map.get(key);\n            if( count%2 != 0){\n                result[k] = key;\n                k++;\n            }\n        }\n        Arrays.sort(result);\n        try\n          {\n          String path=\"1.txt\";\n          File file=new File(path);\n          if(!file.exists())\n              file.createNewFile();\n          FileOutputStream out=new FileOutputStream(file,true);        \n          out.write((\"Case #\"+i+\":\").getBytes(\"utf-8\"));\n          out.close();\n          }\n          catch(IOException e)\n          {\n              e.printStackTrace();\n          }\n        for( int r:result){\n            try\n              {\n              String path=\"1.txt\";\n              File file=new File(path);\n              if(!file.exists())\n                  file.createNewFile();\n              FileOutputStream out=new FileOutputStream(file,true);        \n              out.write((\" \"+ r).getBytes(\"utf-8\"));\n              out.close();\n              }\n              catch(IOException e)\n              {\n                  e.printStackTrace();\n              }\n        }\n        try\n          {\n          String path=\"1.txt\";\n          File file=new File(path);\n          if(!file.exists())\n              file.createNewFile();\n          FileOutputStream out=new FileOutputStream(file,true);        \n          out.write(\"\\n\".getBytes(\"utf-8\"));\n          out.close();\n          }\n          catch(IOException e)\n          {\n              e.printStackTrace();\n          }\n    }\n  } \n}"}
{"idx":"1216","func":"class ProblemB {\n\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n        \n        \/\/Scanner scanner = new Scanner(System.in);\n        Scanner scanner = new Scanner(new File(\"B-large.in\"));\n        PrintWriter writer = new PrintWriter(\"B-large.out\", \"UTF-8\");\n        \n        int numberOfTestCases=scanner.nextInt();\n        \n        scanner.nextLine();\n        \n        for(int testCaseCounter=1; testCaseCounter<=numberOfTestCases; testCaseCounter++){\n            \/\/long count=0;\n            \n            int n=Integer.parseInt(scanner.nextLine());\n            \n            Map<Integer, Integer> heightMap=new HashMap<Integer, Integer>();\n            \n            for(int i=0; i<(2*n-1); i++){\n                \n                String[] line=scanner.nextLine().split(\" \");\n                \n                for(int j=0; j<line.length; j++){\n                    \n                    \n                    Integer count=heightMap.get(Integer.parseInt(line[j]));\n                    if(count==null){\n                        count=1;\n                    }\n                    else{\n                        count++;\n                    }\n                    heightMap.put(Integer.parseInt(line[j]), count);\n                }\n            }\n            \n            \/\/StringBuilder outputBuilder2=new StringBuilder();\n            int[] output=new int[n];\n            int i=0;\n            for(Integer height:heightMap.keySet()){\n                \n                Integer count=heightMap.get(height);\n                if((count%2)!=0){    \n                    \/\/System.out.println(heightMap.get(height));\n                    \/\/outputBuilder2.append(height+\" \");\n                    output[i]=height;\n                    i++;\n                }\n            }\n            \/\/System.out.println(outputBuilder2.length());\n            \/\/int[] output=outputBuilder.toString().trim().split(\" \");\n            \n            \/\/outputChar=output.toCharArray();\n            Arrays.sort(output);\n            \n            StringBuilder outputBuilder=new StringBuilder();\n            for(int j=0; j<output.length; j++){\n                outputBuilder.append(output[j]+\" \");\n            }\n            String res=outputBuilder.toString().trim();\n            \n            \n            writer.println(\"Case #\"+testCaseCounter+\": \"+res);\n            \/\/System.out.println(\"Case #\"+testCaseCounter+\": \"+res);\n        }\n        \n        \/\/close resources\n        scanner.close();\n        writer.close();\n    }\n\n}"}
{"idx":"1217","func":"class Main {\n\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new FileReader(\"B-large (2).in\"));\n        PrintWriter pw=new PrintWriter(\"B-large.out\" );\n        String output = null;\n        int t = sc.nextInt();\n\n        for (int i = 0; i < t; i++) {\n            int n = sc.nextInt();\n            sc.nextLine();\n            int arr[][]=new int[2*n-1][n];\n            for (int j = 0; j < arr.length; j++) {\n                String line=sc.nextLine();\n                int numArr[] = Arrays.stream(line.split(\" \")).mapToInt(Integer::parseInt).toArray();\/\/\u041c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u0435\u043b JAVA 8\n                arr[j]=numArr;\n\/\/                System.out.println(Arrays.toString(numArr));\n            }\n            String output1=\"\";\n                    int n1=arr[0].length;\n                    int result[]=new int[n1];\n                    Map<Integer,Integer> m=new HashMap<Integer,Integer>();\n                    for (int i2 = 0; i2 < arr.length; i2++) {\n                        for (int j = 0; j < n1; j++) {\n                            if(m.containsKey(arr[i2][j])){\n                                m.put(arr[i2][j],new Integer(m.get(arr[i2][j])+1));\n                            }else{\n                                m.put(arr[i2][j],new Integer(1));\n                            }\n                        }\n                    }\n            \n            \/\/        System.out.println(m);\n                    int resultN=0;\n                    for (Integer key : m.keySet()) {\n                        if(m.get(key)%2==1){\n                            result[resultN]=key;\n                            resultN++;\n                        }\n                    }\n                    Arrays.sort(result);\n            \/\/        System.out.println(Arrays.toString(result));\n                    for (int i1 = 0; i1 < result.length; i1++) {\n                        output1+=\" \"+result[i1];\n                    }\n            \n            \n            \n            \n            \n            \n                    output1 = \"Case #\" + (i+1) + \": \"+output1;\n\n\n            output=output1;\n            pw.print(output+\"\\n\");\n        }\n\n        pw.flush();\n        pw.close();\n        sc.close();\n\n\n    }\n}"}
{"idx":"1218","func":"class Main6 {\n    public static void main(String[] args) {\n        Main6 m = new Main6();\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(\n                System.in)));\n        int t = in.nextInt(); \/\/ Scanner has functions to read ints, longs,\n                                \/\/ strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n            int times = in.nextInt();\n            int total = 2*times*times-times;\n            int[] input = new int[total];\n            for (int j = 0; j < total; j++) {\n                input[j] = in.nextInt();\n            }\n            System.out.print(\"Case #\" + i + \": \");\n            int[] ans = new int[times];\n            Set<Integer> set = new HashSet<Integer>();\n            for (int i1 = 0; i1 < input.length; i1++) {\n                if(set.contains(input[i1])){\n                    set.remove(input[i1]);\n                }else{\n                    set.add(input[i1]);\n                }\n            }\n            int t1 = 0;\n            for(int s : set){\n                ans[t1] = s;\n                t1++;\n            }\n            Arrays.sort(ans);\n            for (int i2 = 0; i2 < ans.length; i2++) {\n                System.out.print(ans[i2]);\n                System.out.print(\" \");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1219","func":"class Main {\n\n\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int trys, cases;\n        trys = scanner.nextInt();\n        cases = 0;\n        while (cases < trys) {\n            cases++;\n            int n = scanner.nextInt();\n            \/\/int [][] solders = new int[2*n-1][n];\n\n            ArrayList input = new ArrayList<>();\n            Integer temp;\n            for(int i=0;i<2*n-1;i++)\n                for(int j=0;j<n;j++) {\n                    temp = scanner.nextInt();\n                    if(!input.contains(temp)){\n                        input.add(temp);\n                    }else{\n                        input.remove(temp);\n                    }\n                }\n\n            Collections.sort(input);\n\n            Iterator<Integer> values = input.iterator();\n\n            System.out.print(\"Case #\"+cases+\":\");\n\n            while (values.hasNext()){\n                System.out.print(\" \"+values.next());\n            }\n            System.out.println();\n\n        }\n\n    }\n\n}"}
{"idx":"1220","func":"class B {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"D:\\\\B-large.in\"));\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(\"D:\\\\Blarge.txt\")));\n        int cases = Integer.parseInt(br.readLine());\n        for(int t = 1; t <= cases; t++) {\n            int n = Integer.parseInt(br.readLine());\n            HashSet<Integer> hs = new HashSet<Integer>();\n            for(int i = 0; i < 2*n-1; i++) {\n                StringTokenizer st = new StringTokenizer(br.readLine());\n                for(int j = 0; j < n; j++) {\n                    int tmp = Integer.parseInt(st.nextToken());\n                    if(hs.contains(tmp)) {\n                        hs.remove(tmp);\n                    }\n                    else hs.add(tmp);\n                }\n            }\n            int[] rc = new int[n];\n            int index = 0;\n            for(int num : hs) {\n                rc[index] = num;\n                index++;\n            }\n            Arrays.sort(rc);\n            pw.print(\"Case #\" + t + \":\");\n            for(int i = 0; i < n; i++) {\n                pw.print(\" \" + rc[i]);\n            }\n            pw.println();\n        }\n        pw.close();\n    }\n}"}
{"idx":"1221","func":"class B_problem {\n    public static void main(String[] args) throws IOException {\n\n        FileReader fr = new FileReader(\n                \"\/Users\/SISQUAKE\/workspace\/code_jam\/input\/B-small-attempt0_1.in\");\n\n        BufferedReader br = new BufferedReader(fr);\n        int n;\n\n        n = Integer.parseInt(br.readLine());\n\n        for (int i = 1; i <= n; i++) {\n            int N  = Integer.parseInt(br.readLine());\n            int[][] m = new int[2*N-1][N];\n            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n            for(int j =0 ; j < 2*N-1 ; j++){\n                String str = br.readLine();\n                int k = 0 ;\n                \/\/l.add(Integer.parseInt(str.replaceAll(\" \", \"\")));\n                String[] s = str.split(\" \");\n                for(String st : s){\n                    int number = Integer.parseInt(st);\n                    if(map.containsKey(number)){\n                        int tmp = map.get(number);\n                        map.put(number, tmp+1);\n                    }else{\n                        map.put(number, 1);\n                    }\n                }\n            }\n            ArrayList<Integer> l = new ArrayList<Integer>();\n            for (Map.Entry<Integer, Integer> entry : map.entrySet())\n            {\n                if(entry.getValue()%2!=0){\n                    l.add(entry.getKey());\n                }\n            }\n            \n            Collections.sort(l);\n            System.out.print(\"Case #\"+i+\": \"+l.get(0));\n            \n            for(int k = 1 ; k < l.size() ; k ++ ){\n                System.out.print(\" \"+l.get(k));\n            }\n            \n            System.out.println(\"\");\n            \n            \n\n        }\n        fr.close();\n\n    }\n}"}
{"idx":"1222","func":"class RankAndFile {\n\n    public RankAndFile() {\n        \/\/ TODO Auto-generated constructor stub\n    }\n    \n    public static void main(String[] args){\n        RankAndFile yessir=new RankAndFile();\n        FileReader fr;\n        try {\n            fr = new FileReader(\"B-large.in\");\n            BufferedReader br=new BufferedReader(fr);\n            FileWriter fw=new FileWriter(\"data-B-large.txt\");\n            BufferedWriter bw=new BufferedWriter(fw);\n            int inputs=Integer.parseInt(br.readLine());\n            for(int i=0; i<inputs; i++){\n                int rows=Integer.parseInt(br.readLine());\n                ArrayList<Integer> list=new ArrayList<Integer>();\n                for (int j=0; j<rows*2-1; j++){\n                    String[] line=br.readLine().split(\" \");\n                    for(String x: line){\n                        list.add(Integer.parseInt(x));\n                    }\n                }\n                StringBuilder output1=new StringBuilder();\n                ArrayList<Integer> missingRow=new ArrayList<Integer>();\n                ArrayList<Integer> distinctHeights=new ArrayList<Integer>();\n                Iterator<Integer> theIter=list.iterator();\n                while(theIter.hasNext()){\n                    int next=theIter.next();\n                    if(distinctHeights.contains(next)){\n                        continue;\n                    }\n                    else{\n                        distinctHeights.add(next);\n                    }\n                }\n                \/\/System.out.println(distinctHeights.toString());\n                Collections.sort(distinctHeights);\n                int index=0;\n                while (missingRow.size()<rows){\n                    int currentHeight=distinctHeights.get(index);\n                    int parity=0;\n                    for(int i1=0; i1<list.size(); i1++){\n                        int x=list.get(i1);\n                        if(x==currentHeight){\n                            parity++;\n                        }\n                    }\n                    if (parity%2==1){\n                        missingRow.add(currentHeight);\n                    }\n                    index++;\n                }\n                \n                for(int i2=0; i2<missingRow.size(); i2++){\n                    System.out.print(missingRow.get(i2)+\" \");\n                    output1.append(missingRow.get(i2)+\" \");\n                }\n                String output=output1.toString();\n                \n                bw.write(\"Case #\"+(i+1)+\": \");\n                bw.write(output+\"\\n\");\n            }\n            br.close();\n            bw.close();\n            \n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n    }\n\n}"}
{"idx":"1223","func":"class A1_B_L {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int T = scanner.nextInt();\n        for (int k = 0; k < T; k++) {\n            Map<Integer, Integer> mentionsMap = new HashMap<>();\n            int n = scanner.nextInt();\n            for (int i = 0; i < 2*n - 1; i++) {\n                for (int j = 0; j < n; j++) {\n                    int x = scanner.nextInt();\n                    if (!mentionsMap.containsKey(x)) {\n                        mentionsMap.put(x, 0);\n                    }\n                    \/\/ Increase mentions number\n                    mentionsMap.put(x, mentionsMap.get(x) + 1);\n                }\n            }\n            System.out.print(\"Case #\");\n            System.out.print(k + 1);\n            System.out.print(\": \");\n            List<Integer> weirdoList = new ArrayList<>();\n            for (int i = 1; i <= 2500; i++) {\n                if (!mentionsMap.containsKey(i)) {\n                    continue;\n                }\n                if (mentionsMap.get(i) % 2 != 0) {\n                    weirdoList.add(i);\n                }\n            }\n            for (Integer weirdo : weirdoList) {\n                System.out.print(weirdo);\n                System.out.print(' ');\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1224","func":"class GCJ2016B\n{\n\n    private static StringTokenizer st;\n\n    public static void main(String[] args) throws IOException\n    {\n\n        BufferedReader br = new BufferedReader(new FileReader(\"B-large.in\"));\n        PrintWriter pw = new PrintWriter(new File(\"B-large.out\"));\n        st = new StringTokenizer(br.readLine());\n        int T = Integer.parseInt(st.nextToken());\n        for (int t = 1; t <= T; t++)\n        {\n            st = new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            ArrayList<ArrayList<Integer>> masterList = new ArrayList<ArrayList<Integer>>();\n            for (int i = 0; i < 2*n-1; i++)\n            {\n                st = new StringTokenizer(br.readLine());\n                ArrayList<Integer> list = new ArrayList<Integer>();\n                for (int j = 0; j < n; j++)\n                {\n                    list.add(Integer.parseInt(st.nextToken()));\n                }\n                masterList.add(list);\n            }\n            int[] count = new int[2501];\n            for (int i = 0; i < masterList.size(); i++)\n            {\n                for (Integer j : masterList.get(i))\n                {\n                    count[j]++;\n                }\n            }\n            ArrayList<Integer> leftover = new ArrayList<Integer>();\n            for (int i = 0; i < count.length; i++)\n            {\n                if (count[i] % 2 != 0)\n                {\n                    leftover.add(i);\n                }\n            }\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < leftover.size(); i++)\n            {\n                sb.append(leftover.get(i) + \" \");\n            }\n            pw.println(\"Case #\" + t + \": \" + sb.toString().trim());\n        }\n        pw.close();\n\n    }\n\n}"}
{"idx":"1225","func":"class RankAndFile {\n\n    static String smallIn = \"small_input1AB.txt\";\n    static String largeIn = \"large_input1AB.txt\";\n    static String smallOut = \"small_output1AB.txt\";\n    static String largeOut = \"large_output1AB.txt\";\n    public static void main(String[] args) {\n        Path p = Paths.get(largeIn);\n        try {\n            Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(Files.newInputStream(p))));\n            int test = sc.nextInt();\n            StringBuilder sb = new StringBuilder();\n            for(int t = 1; t <= test; t++) {\n                int N = sc.nextInt();\n                int nums = N * N + N * (N - 1);\n                HashMap<Integer, Integer> map = new HashMap();\n                for(int i = 0; i < nums; i++) {\n                    int num = sc.nextInt();\n                    if(!map.containsKey(num)) {\n                        map.put(num, 1);\n                    } else {\n                        map.put(num, map.get(num) + 1);\n                    }\n                }\n                ArrayList<Integer> ret = new ArrayList();\n                for(Integer i : map.keySet()) {\n                    if(map.get(i)%2 == 1) {\n                        ret.add(i);\n                    }\n                }\n                Collections.sort(ret);\n                sb.append(\"Case #\" + t +\": \");\n                for(int i = 0; i < ret.size(); i++) {\n                    sb.append(ret.get(i));\n                    if(i != ret.size() - 1) {\n                        sb.append(\" \");\n                    }\n                }\n                if(t != test) {\n                    sb.append(\"\\n\");\n                }\n            }\n            Path p1 = Paths.get(largeOut);\n            try {\n                Files.write(p1, sb.toString().getBytes());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            sc.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"1226","func":"class B {\n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"out.txt\"));\n\n        int N = Integer.parseInt(br.readLine());\n\n        for(int p = 0; p < N; p++) {\n            int n = Integer.parseInt(br.readLine());\n            Set<Integer> set = new HashSet<Integer>();\n            for(int i = 0; i < 2*n-1; i++) {\n                String[] s = br.readLine().split(\" \");\n                for(int j = 0; j < n; j++) {\n                    int v = Integer.parseInt(s[j]);\n                    if(set.contains(v)) {\n                        set.remove(v);\n                    } else {\n                        set.add(v);\n                    }\n                }\n            }\n\n            int[] ret = new int[n];\n            int at = 0;\n            for(int vv : set) {\n                ret[at] = vv;\n                at++;\n            }\n            Arrays.sort(ret);\n\n            pw.print(\"Case #\" + (p+1) + \":\");\n            for(int i = 0; i < n; i++) pw.print(\" \" + ret[i]);\n            pw.println();\n        }\n\n\n        pw.flush();\n        pw.close();\n\n    }\n}"}
{"idx":"1227","func":"class TheLastWord {\n\n    private File file = null;\n    private Scanner in = null;\n    private Writer out = null;\n    private Integer testCases = null;\n    private String sequence = null;\n    private String result = null;\n\n    private int sizeLimit = 10;\n    private boolean solution;\n    private int count;\n    private static Charset UTF8 = Charset.forName(\"UTF-8\");\n\n    public static void main(String args[]) throws IOException {\n\n        try {\n            TheLastWord word = new TheLastWord();\n            word.file = new File(\"input.txt\");\n            word.in = new Scanner(word.file);\n            word.out = new FileWriter(\"output.txt\");\n            int c;\n            c = word.in.nextInt();\n            word.testCases = new Integer(c);\n            for (int i = 1; i <= word.testCases; i++) {\n                word.sequence = word.in.next();\n                word.result = \"Case #\" + i + \": \";\n                \n                String sequenceSol=\"\";\n                sequenceSol+=word.sequence.charAt(0);\n                for(int i1=1; i1<word.sequence.length(); i1++)\n                {\n                    if(Integer.valueOf(word.sequence.charAt(i1))>=Integer.valueOf(sequenceSol.charAt(0)))\n                    {\n                        sequenceSol=word.sequence.charAt(i1)+sequenceSol;\n                    }\n                    else\n                    {\n                        sequenceSol=sequenceSol+word.sequence.charAt(i1);\n                    }\n                }\n                \n                \n                \n                \n                word.result +=sequenceSol;\n            \n                word.result = word.result + \"\\n\";\n                word.out.write(word.result);\n            \n            }\n            word.in.close();\n            word.out.close();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n    }\n}"}
{"idx":"1228","func":"class soldoers {\n    public static void main( String args[]) throws NumberFormatException, IOException\n    {\n        BufferedReader br=new BufferedReader(new FileReader(\"C:\\\\Users\\\\manas\\\\Downloads\\\\blrg.in\"));\n        BufferedWriter bw=new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\manas\\\\Documents\\\\google code jams\\\\second_large.txt\"));\n        \/\/BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        int t=Integer.parseInt(br.readLine());\n        int a=1;\n        while(t>0)\n        {\n\n            int n=Integer.parseInt(br.readLine());\n            HashMap<Integer,Integer> count=new HashMap<Integer,Integer>();\n            ArrayList<Integer> list=new ArrayList<Integer>();\n            for(int i=0;i<2*n-1;i++)\n            {\n                String[] nums=br.readLine().split(\" \");\n                for(String n1:nums)\n                {\n                    int val=Integer.parseInt(n1);\n                    if(count.containsKey(val))\n                        count.put(val, count.get(val)+1);\n                    else\n                        count.put(val,1);\n                    if(count.get(val)%2==1)\n                        list.add(val);\n                    else\n                        list.remove(new Integer(val));\n                    \n                }\n                \n            }\n            Collections.sort(list);\n            \n\n            bw.write(\"Case #\"+a+\": \");\n            System.out.print(\"Case #\"+a+\": \");\n            for(int a1:list)\n            {\n                bw.write(a1+\" \");\n                System.out.print(a1+\" \");\n            }\n            System.out.println();\n            a++;\n\n            bw.newLine();\n            t--;\n        }\n        bw.close();\n    }\n\n}"}
{"idx":"1229","func":"class B2 {\n\n    public static void main(String[] args) {\n\n\/\/Find the numbers that are not in even values\n        \/\/sort those rows\n\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for( int i = 0; i < T; i++ ){\n            int n = sc.nextInt();\n            Vector<Integer> numbers = new Vector<Integer>();\n            int amount = ( 2 * n ) - 1;\n            while( amount != 0 ){\n\n                for( int j = 0; j < n; j++ ){\n                    int temp = sc.nextInt();\n\n                    numbers.add( temp );\n                }\n                amount--;\n            }\n            int[] num = new int[ numbers.size() ];\n            for( int ni = 0; ni < numbers.size(); ni++ ){\n                num[ ni ] = numbers.get( ni );\n            }\n            int[] sorted = num.clone();\n            Arrays.sort(sorted);\n            \n            boolean odd = true;\n            int len = 0;\n            for (int i1 = 1; i1 < sorted.length; ++i1) {\n                if (sorted[i1] == sorted[i1 - 1]) {\n                    odd = !odd;\n                } else {\n                    if (odd) {\n                        sorted[len++] = sorted[i1 - 1];\n                    }\n                    odd = true;\n                }\n            }\n            \n            if (odd) {\n                sorted[len++] = sorted[sorted.length - 1];\n            }\n            int[] done = Arrays.copyOf(sorted, len);\n\n            \/\/System.out.println(\"please work\");\n            String finaldone = \"\";\n            for( int joe = 0; joe < done.length; joe++ ){\n                finaldone = finaldone +  done[joe] + \" \";\n            }\n\n            Arrays.sort( done );\n\n\/*\n            System.out.println(\"Should have a list of numbers\");\n            for( int q1= 0; q1 < numbers.size(); q1++ ){\n                System.out.println( numbers.get( q1 ) );\n                *\/\n\n\n            \/\/First find the row with the smalled calumn\n            \/\/look for integers that appear in odd numbers, those are the odd numbers and will need a second integer\n            int index = i + 1;\n            System.out.println( \"Case #\" + index + \": \" + finaldone );\n\n        }\n\n\n\n\n    }\n\n}"}
{"idx":"1230","func":"class B {\n    \n    public static String FILENAME = \"B-small-attempt0\";\n\n    public static String INPATH =  \"res\/\" + FILENAME + \".in\";\n    public static String OUTPATH = \"res\/\" + FILENAME + \".out\";\n    \n    public static void main(String[] args) throws Exception {\n        \n        String workingDir = System.getProperty(\"user.dir\");\n        \n        System.setOut(new PrintStream(new File(workingDir,OUTPATH)));\n        Scanner in = new Scanner(new File(workingDir,INPATH));\n        \n        int T = in.nextInt();\n        \n        for(int zz = 1; zz <= T;zz++){\n            \n            int size = in.nextInt();\n\n            int[] number = new int[2500];\n            \n            for(int i = 0; i < 2*size - 1; i++) {\n                \n                for(int j = 0; j < size; j++) {\n                    int num = in.nextInt();\n                    number[num] = number[num] + 1;\n                }\n            }\n            \n            System.out.format(\"Case #%d:\", zz);\n            \n            for(int i = 0; i < 2500; i++) {\n                if(number[i] % 2 != 0)\n                    System.out.format(\" %d\", i);\n            }\n\n            System.out.format(\"\\n\");\n            \n        }\n        \n        in.close();\n    }\n}"}
{"idx":"1231","func":"class TaskB {\n\n    public static void main(String[] args) {\n        long time = System.currentTimeMillis();\n        Scanner sc = new Scanner(new BufferedInputStream(System.in));\n        int t = sc.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int n = sc.nextInt();\n            int[] result = new int[2*n*n - n];\n            for (int i2 = 0; i2 < 2*n*n - n; i2++) {\n                result[i2] = sc.nextInt();\n            }\n            int[] heights = result;\n            int[] counts = new int[2501];\n            for (int h : heights) {\n                counts[h]++;\n            }\n            ArrayList<Integer> answer = new ArrayList<>(n);\n            for (int j = 1; j < 2501; j++) {\n                if (counts[j] % 2 == 1) {\n                    answer.add(j);\n                    if (answer.size() == n) {\n                        break;\n                    }\n                }\n            }\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Case #\").append(i).append(\":\");\n            for (Integer i1 : answer) {\n                sb.append(' ').append(i1);\n            }\n            System.out.println(sb.toString());\n        }\n        sc.close();\n        System.err.println(System.currentTimeMillis() - time);\n    }\n\n}"}
{"idx":"1232","func":"class B {\n    public static void main(String[] args) throws Exception {\n\/\/        InputStream in = System.in;\n        InputStream in = new FileInputStream(\"\/home\/floris\/Downloads\/B-large.in\");\n        System.setOut(new PrintStream(\"\/home\/floris\/dev\/java\/Codejam2016\/src\/B.out\"));\n        Scanner sc = new Scanner(in);\n        sc.useDelimiter(Pattern.compile(\"[\\n \/]\"));\n\n        for (int c = 1, cases = sc.nextInt(); c <= cases; c++) {\n            int n = sc.nextInt();\n            int[] heights = new int[2501];\n\n            for (int i = 0; i < 2*n-1; i++) {\n                for (int j = 0; j < n; j++) {\n                    heights[sc.nextInt()]++;\n                }\n            }\n\n            System.out.printf(\"Case #%d:\", c);\n            for (int i = 0; i < heights.length; i++) {\n                if (heights[i] %2 ==1) System.out.print(\" \" + i);\n            }\n            System.out.println(\"\");\n\n        }\n    }\n}"}
{"idx":"1233","func":"class fileanddrill\n{    public static void main(String args[])\n    {\n        Scanner s=new Scanner(System.in);\n        int t=s.nextInt();\n        int c=1;\n        \n        while(t>0)\n        {\n            System.out.print(\"Case #\"+c+\": \");\n            int n=s.nextInt();\n            int [][]a=new int[2*n-1][n];\n            int []r=new int[2501];\n            for (int i =0;i<2*n-1 ;i++ ) {\n                for (int j=0;j<n; j++) {\n                    a[i][j]=s.nextInt();\n                    \n                }\n            }\n\n            for (int i =0;i<2*n-1 ;i++ ) {\n                for (int j =0;j<n; j++) {\n                    r[a[i][j]]=r[a[i][j]]+1;\n                    \n                }\n            }\n            for (int i=0; i<2501;i++ ) {\n                if(r[i]%2==1)\n                    System.out.print(i+\" \");\n            }\n            System.out.println();\n            t--;\n            c++;\n        }\n    }\n}"}
{"idx":"1234","func":"class B {\n    public static void main(String[] args) throws IOException {\n        Scanner s = new Scanner(new File(\"b.in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"b.out\"));\n        int T = s.nextInt();\n        for (int i = 1; i <= T; i++) {\n            out.write(\"Case #\"+i+\":\");\n            int N = s.nextInt();\n            boolean[] heights = new boolean[2501];\n            for(int j=0; j<2*N-1; j++){\n                for(int k=0; k<N; k++){\n                    int h = s.nextInt();\n                    heights[h]=!heights[h];\n                }\n            }\n            for(int j=0; j<2500; j++){\n                if(heights[j]){\n                    out.write(\" \"+j);\n                }\n            }\n            out.write(\"\\n\");\n        }\n        out.close();    \n    }\n}"}
{"idx":"1235","func":"class RankAndFile {\n\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n\n        try(BufferedReader br = new BufferedReader(new FileReader(\"B-large.in\"))) {\n            Writer writer = new BufferedWriter(new OutputStreamWriter(\n                    new FileOutputStream(\"outputRaFLARGE.txt\"), \"utf-8\"));\n            \n\n            int cases = Integer.parseInt(br.readLine());\n\n            for (int i=1; i<=cases; i++) {\n                if (i>1) \n                    writer.write(System.getProperty(\"line.separator\"));\n                writer.write(\"Case #\" + i + \": \");\n                int N = Integer.parseInt(br.readLine());\n                int rows = (N*2)-1;\n                ArrayList<Integer> allNumbers = new ArrayList<Integer>();\n\n                for (int j=1; j<=rows; j++) {\n                    String singleRow = br.readLine();\n                    \n                    StringTokenizer tokens = new StringTokenizer(singleRow, \" \");\n                    while(tokens.hasMoreTokens()){\n                        String singleNumberString = tokens.nextToken();\n                        int thisNumber = Integer.parseInt(singleNumberString);\n                        if (allNumbers.contains(thisNumber)) { \n                            allNumbers.remove(new Integer(thisNumber));\n                        }\n                        else {    \n                            allNumbers.add(thisNumber); \n                        }\n                    }\n\n\n                }\n\n                Collections.sort(allNumbers);\n                \n                for (Integer number : allNumbers) {\n                writer.write(number.toString());\n                writer.write(\" \");\n                }\n\n\n            }\n            \n            writer.close();\n\n\n\n\n\n\n\n\n        }\n\n    }\n\n}"}
{"idx":"1236","func":"class Problem_B {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        String s;\n        try {\n            s = in.readLine();\n            int case_num = Integer.parseInt(s);\n            for (int kk = 0; kk < case_num; kk++) {\n                s = in.readLine();\n                int num = Integer.parseInt(s);\n                \n                int[] count = new int [2500];\n\/\/                System.out.println(count[2500]);\n                for (int row = 0; row < (2*num-1); row++) {\n                    s = in.readLine();\n                    String[] height = s.split(\" \");\n                    \n                    for (int i = 0; i < height.length; i++) {\n\/\/                        System.out.print(height[i]);\n                        count[Integer.parseInt(height[i])-1]++;\n                    }\n\/\/                    System.out.println();\n                }\n                \n                String ans = \"\";\n                \n                for (int i = 0; i < count.length; i++) {\n\/\/                    System.out.println((i+1)+\" \"+count[i]);\n                    if (count[i]%2!=0) {\n                        ans = ans + \" \" + (i+1);\n                    }\n                }\n                \n                System.out.println(\"Case #\"+(kk+1)+\":\"+ans);\n            }\n            \n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"1237","func":"class RankAndFile {\n    public static void main(String args[] ) throws Exception {\n\/\/        File output_file = new File(\"RankAndFile_test.txt\");\n\/\/        File output_file = new File(\"RankAndFile_small.txt\");\n        File output_file = new File(\"RankAndFile_large.txt\");\n        FileWriter filewriter = new FileWriter(output_file);\n        BufferedWriter bw = new BufferedWriter(filewriter);\n        PrintWriter pw = new PrintWriter(bw);\n\n\/\/        File input_file = new File(\"B-test.txt\");\n\/\/        File input_file = new File(\"B-small-attempt0.in.txt\");\n        File input_file = new File(\"B-large.in.txt\");\n        Scanner sc = new Scanner(input_file);\n        int T = sc.nextInt();\n        \n        for (int i = 1; i <= T; i++) {\n            int N = sc.nextInt();\n            int checkNumber[] = new int[2501];\n            int input_number = N*(2*N-1);\n                    \n            for (int j = 0; j < input_number; j++) {\n                int target = sc.nextInt();\n                checkNumber[target] += 1;\n            }\n            \n            StringBuilder answer = new StringBuilder();\n            for (int k = 1; k <= 2500; k++) {\n                if (checkNumber[k] % 2 == 1) {\n                    String new_answer = \" \" + String.valueOf(k); \n                    answer.append(new_answer);\n                }\n            }\n            \n            pw.println(\"Case #\" + String.valueOf(i) + \":\" + answer);\n        }\n        pw.close();\n    }\n}"}
{"idx":"1238","func":"class B {\n\n    public static void main(String[] args) throws FileNotFoundException\n    {\n        Scanner sc = new Scanner(new File(\"input.in\"));\n        PrintWriter pw = new PrintWriter(\"output.out\");\n        int n_case = sc.nextInt();\n        for(int i=1;i<=n_case;i++)\n        {\n            int[] count = new int[2501];\n            int n = sc.nextInt();\n\n            for(int r=0;r<2*n-1;r++)\n            {\n                for(int k=0;k<n;k++)\n                {\n                    int v = sc.nextInt();\n                    count[v]++;\n                    count[v] = count[v]%2;\n                }\n            }\n            \n            String ris =\"\";\n            for(int el=1;el<=2500;el++)\n            {\n                if(count[el]!=0)\n                {\n                    ris+=el+\" \";\n                }\n            }\n            pw.println(\"Case #\"+i+\": \"+ris);\n        }\n        sc.close();\n        pw.close();\n    }\n\n}"}
{"idx":"1239","func":"class B\n{\n   static int N;\n   static int [][]grid;\n   static int [][] inputs;\n   public static void main(String[] args) throws Exception\n   {\n      System.setOut(new PrintStream(new File(\"a.out\")));\n      Scanner scan = new Scanner(new File(\"a.in\"));\n      int numCases = scan.nextInt();\n      for (int z = 1; z <= numCases; z++)\n      {\n         int [] count = new int[2501];\n         N = scan.nextInt();\n         grid = new int[N][N];\n         inputs = new int[2*N-1][N];\n         for (int i = 0 ; i < 2*N-1; i++)\n         {\n            for (int j = 0; j < N; j++) \n            {\n               inputs[i][j] = scan.nextInt();\n               count[inputs[i][j]]++;\n            }\n         }\n\n         System.out.print(\"Case #\" + z + \":\");\n         for (int i = 0; i < count.length; i++) \n         {\n            if (count[i] % 2 != 0)\n            {\n               System.out.print(\" \" + i);\n            }\n         }\n         System.out.println();\n         \n      }\n      scan.close();\n   }\n}"}
{"idx":"1240","func":"class RankAndFile {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int numCases = Integer.parseInt(in.readLine());\n        for (int caseNumber = 1; caseNumber <= numCases; caseNumber++) {\n           int[] sol = new int[2502];\n           int N = Integer.parseInt(in.readLine());\n           for(int i=0;i<(2*N-1);i++)\n           {\n               String s = in.readLine();\n               String[] t = s.split(\" \");\n               for(String r : t)\n               {\n                   int l = Integer.parseInt(r);\n                   sol[l]++;\n               }\n           }\n           \n           ArrayList<Integer> res = new ArrayList<>();\n           \n           for(int j=0;j<sol.length;j++)\n           {\n               if(sol[j]!=0 && sol[j]%2==1)\n               {\n                   res.add(j);\n               }\n           }\n           \n           String result = \"\";\n           for(int k=0;k<res.size();k++)\n                result+=\" \" + res.get(k);\n           System.out.println(\"Case #\" + caseNumber + \":\" + result);\n        }\n    }\n\n}"}
{"idx":"1241","func":"static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    int T = scanner.nextInt();\n    for (int t = 1; t <= T; t++) {\n\n      int N = scanner.nextInt();\n      HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n\n      for (int row = 0; row < N * 2 - 1; row ++) {\n        for (int col = 0; col < N; col ++) {\n          int height = scanner.nextInt();\n          if (count.containsKey(height)) {\n            count.put(height, count.get(height) + 1);\n          }\n          else {\n            count.put(height, 1);\n          }\n        }\n      }\n\n      ArrayList<Integer> miss = new ArrayList<Integer>(N);\n      for (Integer key: count.keySet()) {\n        if (count.get(key) % 2 == 1) {\n          miss.add(key);\n        }\n      }\n\n      Collections.sort(miss);\n\n      System.out.printf(\"Case #%d:\", t);\n      for (Integer height: miss) {\n        System.out.print(\" \" + height);\n      }\n      System.out.print(\"\\n\");\n    }\n  }\n}"}
{"idx":"1242","func":"class RankFile {\n\n  public static void main( String[] args ) {\n    Scanner in = new Scanner( System.in );\n    int t = in.nextInt();\n    int max = 0;\n\n    for ( int testCase = 1; testCase <= t; testCase++ ) {\n      int n = in.nextInt();\n      int[] heights = new int[2501];\n\n      for ( int i = 0; i < 2 * n - 1; i++ ) {\n        for ( int k = 0; k < n; k++ ) {\n          int height = in.nextInt();\n          heights[height] += 1;\n          if ( height > max ) {\n            max = height;\n          }\n        }\n      }\n\n      System.out.format( \"Case #%d: \", testCase );\n      for ( int j = 1; j <= max; j++ ) {\n        if ( heights[j] % 2 != 0 ) {\n          System.out.format( \"%d \", j );\n        }\n      }\n      System.out.format( \"\\n\" );\n    }\n  }\n\n}"}
{"idx":"1243","func":"class B {\n\n    Scanner scanner;\n\n\n    public static void main(String[] args) throws FileNotFoundException {\n        B r = new B();\n        File input = new File(\"data\/gcj\/2016\/r1a\/B-large.in\");\n        r.scanner = new Scanner(input);\n        \n        File test = new File(\"data\/gcj\/2016\/r1a\/B.out\");\n        PrintStream out = new PrintStream(new FileOutputStream(test));\n        System.setOut(out);\n        \n        int testCase = r.scanner.nextInt();\n        r.scanner.nextLine();\n        \n        for (int i = 1; i <= testCase; i++) {\n            System.out.printf(\"Case #%d:\", i);\n            int[] count = new int[3000];\n            int n = r.scanner.nextInt();\n            for (int i2 = 0; i2 < n * (n + n - 1); i2++) {\n                int a = r.scanner.nextInt();\n                count[a]++;\n            }\n            for (int i1 = 0; i1 < count.length; i1++) {\n                if (count[i1] % 2 == 1) {\n                    System.out.print(\" \" + i1);\n                }\n            }\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"1244","func":"class Q2 {\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {\n            int T = Integer.parseInt(br.readLine());\n            for (int i = 1; i <= T; i++) {\n                int N = Integer.parseInt(br.readLine());\n                int toIter = 2 * N - 1;\n                String[] line;\n                int[] arr = new int[2501];\n                int[] naya = new int[N];\n                for (int j = 0; j < toIter; j++) {\n                    line = br.readLine().split(\"\\\\s+\");\n                    for (int k = 0; k < N; k++) {\n                        arr[Integer.parseInt(line[k])]++;\n                    }\n                }\n                int counter = 0;\n                for (int z = 0; z < 2501; z++) {\n                    if (arr[z] % 2 != 0)\n                        naya[counter++] = z;\n                }\n                System.out.print(\"Case #\" + i + \":\");\n                for (int x = 0; x < N; x++) {\n                    System.out.print(\" \" + naya[x]);\n                }\n                System.out.println(\"\");\n            }\n        } catch (IOException e) {\n        }\n    }\n\n}"}
{"idx":"1245","func":"class RankAndFile {\n    static boolean fileOutput = true;\n    static Path outputPath = Paths.get(\"output.txt\");\n    static PrintWriter fileWriter;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        try (Scanner scanner = new Scanner(new File(\"input\/B-large.in\"))) {\n            int T = scanner.nextInt();\n\n            for (int t = 0; t < T; ++t) {\n                int N = scanner.nextInt(); scanner.nextLine();\n                Map<Integer, Integer> map = new HashMap<>();\n\n                int NN = N * (2*N - 1);\n                for (int i = 0; i < NN; ++i) {\n                    int n = scanner.nextInt();\n                    \n                    Integer I = map.get(n);\n                    if (I == null)\n                        I = 1;\n                    else\n                        I += 1;\n                    map.put(n, I);\n                }\n                \n                final List<Integer> l = new ArrayList<>();\n                map.forEach((k, v) -> {\n                    if (v % 2 == 1)\n                        l.add(k);\n                });\n                Collections.sort(l);\n                \n                final StringJoiner sj = new StringJoiner(\" \");\n                l.forEach(s -> { sj.add(s.toString()); });\n                String txt = \"Case #\" + (t + 1) + \": \" + sj.toString();\n                    \n                \n                if (fileOutput && fileWriter == null)\n                    fileWriter = new PrintWriter(outputPath.toFile());\n                \n                if (fileOutput)\n                    fileWriter.write(txt + \"\\n\");\n                else\n                    System.out.println(txt);\n            }\n        }\n\n        if (fileWriter != null)\n            fileWriter.close();\n    }\n}"}
{"idx":"1246","func":"class RankAndFile {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner sc = new Scanner(new File(\"B-large.in\"));\n        int numberOfCases = sc.nextInt();\n        String[] result = new String[numberOfCases];\n        \/\/sc.nextLine();\n        for (int i=0; i<numberOfCases; i++) {\n            int numberOfLines = sc.nextInt();\n            sc.nextLine();\n            String tempIn = \"\";\n            for (int j=0; j<(numberOfLines*2-1); j++) {\n                String temp = sc.nextLine();\n                tempIn += temp +\" \";\n            }\n            String[] input = tempIn.split(\"\\\\s+\");\n            int[] intInput = new int[input.length];\n            for (int i1=0; i1<input.length; i1++) {\n                intInput[i1] = Integer.parseInt(input[i1]);\n            }\n            Map<Integer, Integer> map = new HashMap<>();\n            for (int i2=0; i2<intInput.length; i2++) {\n                if (map.get(intInput[i2])==null) {\n                    map.put(intInput[i2], 1);\n                } else {\n                    map.put(intInput[i2], map.get(intInput[i2])+1);\n                }\n            }\n            List<Integer> res = new ArrayList<>();\n            for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n                int value = entry.getValue();\n                if (value%2!=0) {\n                    res.add(entry.getKey());\n                }\n            }\n            Collections.sort(res);\n            StringBuilder finalResult = new StringBuilder();\n            for (Integer e:res) {\n                finalResult.append(e);\n                finalResult.append(\" \");\n            }\n            result[i] = finalResult.toString();\n        }\n        for (int i=0; i<numberOfCases; i++) {\n            int caseNumber = i+1; \n            System.out.format(\"Case #%d: %s\\n\", caseNumber, result[i]);\n        }\n    }\n}"}
{"idx":"1247","func":"class Main{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int cases = sc.nextInt();\n        for(int c=1;c<=cases;c++){\n            int n = sc.nextInt();\n            int[] heights = new int[2501];\n            for(int i=0;i<2*n-1;i++){\n                for(int j=0;j<n;j++){\n                    heights[sc.nextInt()]++;\n                }\n            }\n            System.out.printf(\"Case #%d:\",c);\n            for(int i=0;i<2501;i++) if(heights[i]%2!=0) System.out.print(\" \"+i);\n            System.out.println();        \n        }\n    }\n\n}"}
{"idx":"1248","func":"class B\n{\n    public static void main(String[] args) throws Exception\n    {\n        String round = \"large\";\n        String baseName = B.class.getName().replace('.', '\/');\n        Scanner scanner = new Scanner(new BufferedReader(new FileReader(baseName + \"-\" + round + \".in\")));\n        PrintWriter writer = new PrintWriter(new FileWriter(baseName + \"-\" + round + \".out\"));\n\n        System.out.println(\"Running: \" + round);\n\n        int count = scanner.nextInt();\n        for (int i = 0; i < count; i++)\n        {\n            writer.print(\"Case #\" + (i + 1) + \":\");\n            int N = scanner.nextInt();\n            Map<Integer, Integer> map = new HashMap<>();\n            for (int j = 0; j < (2 * N - 1) * N; j++)\n            {\n                int v = scanner.nextInt();\n                if (map.containsKey(v))\n                    map.put(v, map.get(v) + 1);\n                else\n                    map.put(v, 1);\n            }\n            List<Integer> heights = new ArrayList<Integer>();\n            for (Entry<Integer, Integer> entry : map.entrySet())\n                if (entry.getValue() % 2 > 0)\n                    heights.add(entry.getKey());\n            heights.sort(new Comparator<Integer>()\n            {\n                @Override\n                public int compare(Integer o1, Integer o2)\n                {\n                    return o1 - o2;\n                }\n            });\n            for(int result : heights)\n                writer.print(\" \" + result);\n            writer.println();\n        }\n        writer.close();\n        scanner.close();\n    }\n}"}
{"idx":"1249","func":"class B {\n\n    public static void main(String[] args) {\n        Scanner scn = new Scanner(System.in);\n        int t = Integer.parseInt(scn.nextLine());\n        String str;\n        String arr[];\n        for(int i=1;i<=t;i++){\n            int n = Integer.parseInt(scn.nextLine());\n            HashMap<Integer, Integer> data = new HashMap<Integer, Integer>();\n            for(int j=1;j<2*n;j++){\n                str = scn.nextLine();\n                arr = str.split(\" \");\n                for(int k=0;k<n;k++){\n                    int val = Integer.parseInt(arr[k]);\n                    if(data.containsKey(val)){\n                        data.put(val, data.get(val)+1);\n                    }else{\n                        data.put(val, 1);\n                    }\n                }\n            }\n            ArrayList<Integer> missingList = new ArrayList<Integer>();\n            Iterator<Integer> ite = data.keySet().iterator();\n            while (ite.hasNext()) {\n                Integer key = (Integer) ite.next();\n                Integer cnt = data.get(key);\n                if(cnt%2==1)\n                    missingList.add(key);\n            }\n            \n            Collections.sort(missingList);\n            \n            System.out.print(\"Case #\" + i + \": \");\n            for(int j=0;j<n;j++){\n                if(j>0)\n                    System.out.print(\" \"); \n                System.out.print(missingList.get(j));\n            }\n            System.out.println();\n        }\n        \n        scn.close();\n\n    }\n\n}"}
{"idx":"1250","func":"class B {\n\n\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        String name = \"B\";\n\n        \/\/ TODO READER\n        boolean isSmall = false;\n        BufferedReader br;\n\n        \/\/br= new BufferedReader(new FileReader(\"bum.in\"));\n        if(isSmall) br = new BufferedReader(new FileReader(name+\"-small-attempt0 (2).in\"));\n        else br = new BufferedReader(new FileReader(name+\"-large (1).in\"));\n\n        PrintWriter pw;\n        if(isSmall) pw = new PrintWriter(name+\"-small.txt\", \"UTF-8\");\n        else pw = new PrintWriter(name+\"-large.txt\", \"UTF-8\");\n\n        int T=Integer.parseInt(br.readLine());\n        for(int i = 0; i < T; i++){\n            int N = Integer.parseInt(br.readLine());\n            int[][] vrst = new int[2*N-1][N];\n            for(int j=0;j<2*N-1;j++){\n                String[] tab =br.readLine().split(\" \");\n\n                for(int k=0;k<N;k++) {\n                    \/\/System.out.println(\"\"+j+k);\n                    vrst[j][k]=Integer.parseInt(tab[k]);\n                }\n            }\n            boolean[] bool = new boolean[2501];\n            for(int i1 = 0;i1<2*N-1;i1++){\n                for(int j = 0;j<N;j++){\n                    bool[vrst[i1][j]]=!bool[vrst[i1][j]];\n                }\n            \n            }\n            StringBuilder st = new StringBuilder();\n            for(int i2 = 0; i2<bool.length;i2++){\n                if(bool[i2]) st.append(i2 + \" \");\n            }\n            String a = st.toString();\n\n\n            System.out.print(\"Case #\"+(i+1)+\": \"+a+\"\\n\");\n            pw.write(\"Case #\"+(i+1)+\": \"+a+\"\\n\");\n\n        }\n        pw.close();\n    }\n}"}
{"idx":"1251","func":"class B_RankAndFile {\npublic static void main(String args[]){\n    Scanner sc=new Scanner(System.in);\n    int t,n,min ,max;\n    t=sc.nextInt();\n    int arr[];\n    int ans[];\n    for(int i=1;i<=t;i++){\n        n=sc.nextInt();\n        arr=new int[2501];\n        min=Integer.MAX_VALUE;\n        max=Integer.MIN_VALUE;\n        for(int j=0;j<(2*n-1);j++){\n            for(int k=0;k<n;k++){\n                int x=sc.nextInt();\n                arr[x]++;\n                min=Math.min(min,x);     \n                max=Math.max(max,x);\n            }\n        }\n        \/\/System.out.println(min+\" \"+max);\n        ans=new int[n];\n        for(int k=min,l=0;k<=max;k++){\n            if(arr[k]%2!=0){\n                ans[l]=k;\n                l++;\n            }\n        }\n        System.out.print(\"Case #\"+i+\": \");\n        for(int k=0;k<n;k++){\n            System.out.print(ans[k]+\" \");\n        }\n        System.out.println();\n                    \n    }\n    \n    \n    sc.close();\n}\n}"}
{"idx":"1252","func":"class B {\n\n    public static void main(String args[]) {\n\n        PrintStream printStream = null;\n        try {\n            printStream = new PrintStream(new BufferedOutputStream(new FileOutputStream(\"result\/B-large.out\")));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        System.setOut(printStream);\n\n        Scanner scInput = new Scanner(System.in);\n        int T = scInput.nextInt() + 1;\n        for(int i = 1 ; i < T ; i++) {\n            int N = scInput.nextInt();\n            int listSize = N * 2 - 1;\n            TreeMap<Integer, Integer> countMap = new TreeMap<Integer, Integer>();\n            for (int j = 0 ; j < listSize ; j++) {\n                for (int k = 0 ; k < N ; k++) {\n                    int currentNumber = scInput.nextInt();\n                    Integer currentNumberCount = countMap.get(currentNumber);\n                    if (currentNumberCount == null) {\n                        countMap.put(currentNumber, 1);\n                    } else {\n                        countMap.put(currentNumber, ++currentNumberCount);\n                    }\n                }\n            }\n        \n            StringBuilder result = new StringBuilder();\n            for(Entry<Integer, Integer> entry : countMap.entrySet()) {\n                if (entry.getValue() % 2 == 1) {\n                    result.append(\" \").append(entry.getKey());\n                }\n            }\n            System.out.format(\"Case #%d: %s\\n\", i, result.toString().trim());\n        }\n        scInput.close();\n\n        printStream.close();\n\n    }\n\n}"}
{"idx":"1253","func":"class heights {\n\n    \/**\n     * @param args\n     *\/\n    static String INPUT_LOCATION = \"C:\\\\Users\\\\srihari\\\\workspace\\\\codejam2016\\\\\";\n    public static void main(String[] args) throws Exception {\n        \/\/ TODO Auto-generated method stub\n\n        Scanner sc = new Scanner(new FileReader(INPUT_LOCATION\n                + \"B-large.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(INPUT_LOCATION\n                + \"B-large.in.out\"));\n        \n\/\/        Scanner sc = new Scanner(new FileReader(INPUT_LOCATION\n\/\/                + \"B-small-attempt0.in\"));\n\/\/        PrintWriter pw = new PrintWriter(new FileWriter(INPUT_LOCATION\n\/\/                + \"B-small-attempt0.in.out\"));\n         \n        \/\/Scanner sc=new Scanner(System.in);\n        int cnttests = sc.nextInt();\n        \/\/sc.nextLine();\n        for (int i = 0; i < cnttests; i++) \n            {\n                int[] trackcounts = new int [2501];\n                int j = sc.nextInt();\n                int x = (2*j-1)*j;\n                for(int k = 0;k < x; k++)\n                        trackcounts[sc.nextInt()] += 1;\n                    \n                    pw.print(\"Case #\"+(i+1)+\":\");\n                    \/\/System.out.print(\"Case #\"+(i+1)+\":\");\n                    for(int p = 1; p<2500;p++)\n                    {\n                        if(trackcounts[p]%2==1)\n                           pw.print(\" \" +p);\n                            \/\/System.out.print(\" \" +p);\n                    }\n                   \n                    pw.println();\n                    \/\/System.out.println();\n            }\n            \n            \n        pw.flush();\n        pw.close();\n        sc.close();\n\n       }\n}"}
{"idx":"1254","func":"class B {\n    public static void main(String args[])throws IOException{\n        Scanner scan = new Scanner(new File(\"B.txt\"));\n        PrintWriter pw = new PrintWriter(\"B.out\");\n        int cases = scan.nextInt();\n        for(int i =1; i <= cases; i++){\n            int N = scan.nextInt();\n            int[] totals = new int[10_000];\n            for(int z = 0; z < N*2-1; z++){\n                for(int l = 0; l < N; l++){\n                    totals[scan.nextInt()]++;\n                }\n            }\n            ArrayList<Integer>answers = new ArrayList<Integer>();\n            for(int z = 0; z < totals.length; z++){\n                if(totals[z]%2==1){\n                    answers.add(z);\n                }\n            }\n            pw.print(\"Case #\"+i+\": \");\n            for(Integer z : answers){\n                pw.print(z+\" \");\n            }\n            pw.println();\n        }\n        pw.close();\n    }\n}"}
{"idx":"1255","func":"class Round_1A_B {\n\n    static BufferedReader br;\n    static PrintWriter out;\n    static StringTokenizer st;\n\n    static int T;\n    \n    public static void main (String[] args) throws IOException {\n        \/\/br = new BufferedReader(new InputStreamReader(System.in));\n        \/\/out = new PrintWriter(new OutputStreamWriter(System.out));\n        br = new BufferedReader(new FileReader(\"in.txt\"));\n        out = new PrintWriter(new FileWriter(\"out.txt\"));\n\n        T = Integer.parseInt(next());\n        \n        for (int t = 1; t <= T; t++) {\n            int N = Integer.parseInt(next());\n            int[] val = new int[2501];\n            for (int i = 0; i < 2 * N - 1; i++)\n                for (int j = 0; j < N; j++)\n                    val[Integer.parseInt(next())]++;\n            out.printf(\"Case #%d: \", t);\n            for (int i = 1; i <= 2500; i++)\n                if (val[i] > 0 && val[i] % 2 == 1)\n                    out.printf(\"%d \", i);\n            out.println();\n        }\n        \n        out.close();\n    }\n\n    static String next () throws IOException {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine().trim());\n        return st.nextToken();\n    }\n}"}
{"idx":"1256","func":"class RandAndFile {\n\n    private final int[][] lists;\n    private final int n;\n\n    public RandAndFile(int n, int[][] lists) {\n        this.lists = lists;\n        this.n = n;\n    }\n\n\n    public static void main(String[] args) throws Exception {\n        Scanner scanner;\n        PrintWriter writer;\n        String quizname = \"randandfile\";\n        String testname = \"large\";\n        String input   = String.format(\"quiz\/%s\/%s.in\", quizname, testname);\n        String output  = String.format(\"quiz\/%s\/%s.out\", quizname, testname);\n\n        if (new File(input).exists()) {\n            scanner = new Scanner(new File(input));\n            if (testname.equals(\"sample\")) {\n                writer = new PrintWriter(System.out);\n            } else {\n                writer = new PrintWriter(output);\n            }\n        } else {\n            scanner = new Scanner(System.in);\n            writer = new PrintWriter(System.out);\n        }\n\n\n        int t = scanner.nextInt();\n\n        for (int i = 0; i < t; i++) {\n            int n = scanner.nextInt();\n\n            int[][] lists = new int[2*n-1][n];\n            for (int j=0; j<2*n-1; j++) {\n\n                for (int k=0; k<n; k++) {\n                    int h = scanner.nextInt();\n                    lists[j][k] = h;\n                }\n            }\n            RandAndFile r = new RandAndFile(n, lists);\n            HashMap<Integer, Integer> map = new HashMap<>();\n            \n            for (int i1=0; i1<r.lists.length; i1++) {\n                for (int j=0; j<r.n; j++) {\n                    int h = r.lists[i1][j];\n                    if (map.containsKey(h)) {\n                        map.put(h, map.get(h) + 1);\n                    } else {\n                        map.put(h, 1);\n                    }\n                }\n            }\n            \n            int[] result = new int[r.n];\n            int top=0;\n            for (int key: map.keySet()) {\n                if (map.get(key) % 2 == 1) {\n                    result[top++] = key;\n                }\n            }\n            \n            Arrays.sort(result);\n\n            int[] list = result;\n            writer.printf(\"Case #%d: \", i + 1);\n            for(int l=0;l<n;l++) {\n                writer.printf(\"%d \", list[l]);\n            }\n            writer.println();\n        }\n        writer.flush();\n    }\n}"}
{"idx":"1257","func":"class ArmyProject {\n    \n    Scanner in;    public static void main(String[] args){\n        ArmyProject myClass = new ArmyProject();\n        try {            \n                    \n                    \n                    myClass.in =  new Scanner(new BufferedReader(new FileReader(\"B-large.in\")));\n                    \/\/in = new Scanner(System.in);\n                myClass.writer = new FileWriter(\"the-file-name.txt\");\n                int T = myClass.in.nextInt();\n                    for(int i = 1; i <= T; i++){\n                    int N = myClass.in.nextInt();\n                    \n                    HashMap<Integer, Integer> countHeights = new HashMap<Integer, Integer>();\n                    \n                    \n                    for(int j = 1; j <= (2*N - 1); j++){\n                        for(int k = 1; k <= N; k++){\n                            int h = myClass.in.nextInt();\n                            \n                            if(!countHeights.containsKey(h)){\n                                countHeights.put(h, 0);\n                            }\n                            countHeights.put(h, countHeights.get(h)+1);\n                        }\n                    }\n                \n                    ArrayList<Integer> list = new ArrayList<Integer>();\n                    \n        for(Integer k : countHeights.keySet()){\n            if((countHeights.get(k) % 2) != 0){\n                list.add(k);\n            }\n        }\n                    Collections.sort(list);\n                    \n                    \n                    \n                    \n                    \n                    StringBuilder s = new StringBuilder();\n        \n                    s.append(\"Case #\");\n                    s.append(i);\n                    s.append(\": \");\n                    \n                    \n                    \n                    for(int j = 0; j < list.size(); j++){\n                        s.append(list.get(j) + \" \");\n                    }\n                    \n                    s.append(\"\\n\");\n                    \n            myClass.writer.write(s.toString());\n                    \n                            }\n                myClass.writer.close();            \n                }\n                    catch (IOException e) {\n                    }\n    }\n    \n    FileWriter writer;\n        \n        \n        \n    }"}
{"idx":"1258","func":"class Q2 {\n\n    public static void main(String[] args) {\n        try {\n            String input=\"d:\\\\B-large.in\";\n            String output=\"d:\\\\output.out\";\n            \n            Scanner sc = new Scanner(new FileReader(input));\n            PrintWriter pw = new PrintWriter(output);\n            \n            int n = sc.nextInt();\n            sc.nextLine();\n            \n            \n            for (int c=0; c<n; c++) {\n                int len = sc.nextInt();\n                sc.nextLine();\n                pw.print(\"Case #\" + (c+1) + \": \");\n                List<String> list = new ArrayList<>();\n                Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n                for(int i = 0;i<2*len-1;i++){\n                    String z = sc.nextLine();\n                    String[] all = z.split(\" \");\n                    for(String j : all){\n                        if(!j.isEmpty()){\n                            int x = Integer.parseInt(j);\n                            if(!map.containsKey(x)){\n                                map.put(x, 1);\n                            } else\n                                map.put(x, map.get(x)+1);\n                        }\n                    }\n                    \n                }\n                List<Integer> tosort = new ArrayList<>(len);\n                for(int key : map.keySet()){\n                    if(map.get(key) % 2 == 1){\n                        tosort.add(key);\n                    }\n                }\n                Collections.sort(tosort);\n                for(int key : tosort){\n                    pw.print(key + \" \");\n                }\n                pw.println();\n            }\n            pw.println();\n            pw.flush();\n            pw.close();\n            sc.close();\n        } catch (FileNotFoundException ex) {\n            \n        }\n\n    }\n    \n\n}"}
{"idx":"1259","func":"class B {\n\n    public static void main(String[] args) throws Exception{\n\n        Scanner scanner = new Scanner(new File(\"B-large.in\"));\n\n        int cases = scanner.nextInt();\n\n        for (int t = 0; t < cases; t++) {\n            int rows = scanner.nextInt();\n            int[] nums = new int[2501];\n            String output = \"\";\n\n            for (int r = 0; r < 2*rows - 1; r++) {\n                for (int k = 0; k < rows; k++){\n                    int currnum = scanner.nextInt();\n                    nums[currnum]++;\n                }\n            }\n\n            for (int i = 0; i < nums.length; i++) {\n                if ((nums[i] % 2) != 0) {\n                    output += \" \" + Integer.toString(i);\n                }\n            }\n\n            System.out.printf(\"Case #%d:%s\\n\", t + 1, output);\n        }\n    }\n}"}
{"idx":"1260","func":"class Round1A2016B {\n    public static void main(String args[]){\n        Scanner scan = new Scanner(System.in);\n        int T = scan.nextInt();\n        for(int t = 1; t <= T; ++t){\n            int N = scan.nextInt();\n            scan.nextLine();\n            HashMap<Integer, Integer> map = new HashMap<>();\n            for(int i = 0; i < 2 * N - 1; ++i){\n                String[] str = scan.nextLine().split(\" \");\n                \/\/System.out.println(str);\n                for(String s : str){\n                    int cur = Integer.parseInt(s);\n                    if(map.containsKey(cur)){\n                        map.put(cur, map.get(cur) + 1);\n                    }else{\n                        map.put(cur, 1);\n                    }\n                }\n            }\n            int[] result = new int[N];\n            int index = 0;\n            for(Map.Entry<Integer, Integer> e : map.entrySet()){\n                \/\/System.out.println(e.getKey() + \" \" + e.getValue());\n                if(e.getValue() % 2 != 0){\n                    result[index++] = e.getKey();\n                }\n            }\n            Arrays.sort(result);\n            String s = \"\";\n            for(int i = 0; i < N - 1; ++i){\n                s += result[i] + \" \";\n            }\n            s += result[N - 1];\n            System.out.printf(\"Case #%d: %s\\n\", t, s);\n        }\n        scan.close();\n    }\n}"}
{"idx":"1261","func":"class ProblemaB {\n\n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner(System.in); \n        \n        int t = input.nextInt();\n        \n        for(int i = 0; i < t; i++) {\n            \n            int n = input.nextInt();            \n            \n            ArrayList<Integer> listaMatrizOrdenada = new ArrayList<Integer>();\n                        \n            for(int j = 0; j < n * (2 * n - 1); j++)\n                listaMatrizOrdenada.add( input.nextInt() );\n        \n            Collections.sort(listaMatrizOrdenada);    \n            \n            listaMatrizOrdenada.add(-1);\n            \n            List<Integer> resultado = new ArrayList<Integer>();\n            \n            int count = 0;\n            Integer anterior = null;\n                \n            \n            for(Integer j : listaMatrizOrdenada) {\n                \n                if(j == 134)\n                    System.out.println(\"\");\n                \n                if(anterior == null || j.equals(anterior)) {\n                    count++;\n                    \n                } else {\n\n                    if (count % 2 != 0) {\n                        resultado.add(anterior);\n                    }\n                    count = 1;\n                }\n                anterior = j;\n                \n            }\n            \n            System.out.print(\"Case #\" + (i + 1) + \":\");\n            for(Integer numero : resultado)\n                System.out.print(\" \" + numero);\n            \n            System.out.println(\"\");\n        }\n        \n        input.close();\n    }\n}"}
{"idx":"1262","func":"class rankfile {\n\n  public static void main(String[] args) throws IOException{\n   \n    BufferedReader br = null;\n    \n    File fout = new File(\"output.txt\");\n    FileOutputStream fos = new FileOutputStream(fout);\n   \n    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));    \n    \n    try {\n      \n      String sCurrentLine;\n\n      br = new BufferedReader(new FileReader(\"B-large.in\"));\n      \n      String testCases = sCurrentLine = br.readLine();\n      int testNum = Integer.parseInt(testCases);\n      for(int i=0; i<testNum; i++){\n        int startNum = Integer.parseInt(br.readLine());\n        ArrayList<String> lists = new ArrayList<String>();\n        for(int j=0; j<2*startNum-1; j++){\n          lists.add(br.readLine());\n        }\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for(int i1=0; i1<lists.size(); i1++){\n          String[] item = lists.get(i1).split(\" \");\n          for(String valstr : item){\n            int val = Integer.parseInt(valstr);\n            if(map.containsKey(val)){\n              map.put(val, map.get(val)+1);\n            }else{\n              map.put(val,1);\n            }       \n          }\n        }\n        ArrayList<Integer> rnt = new ArrayList<Integer>();\n        for(Integer val : map.keySet()){\n          if(map.get(val)%2==1){\n            rnt.add(val);\n          }\n        }\n        \n        Collections.sort(rnt);\n        String target = new String();\n        for(int i2=0; i2<rnt.size(); i2++){\n          if(i2!=rnt.size()-1){\n            target = target + rnt.get(i2)+ \" \";\n          }else{\n            target = target + rnt.get(i2);\n          }\n        }\n        String lastRead = target;\n        System.out.println(lastRead);\n        bw.write(\"Case #\"+(i+1)+\": \"+lastRead);\n        if(i!=testNum-1)\n        bw.newLine();\n      }\n      bw.close();\n      \n\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        if (br != null)br.close();\n      } catch (IOException ex) {\n        ex.printStackTrace();\n      }\n    }\n  }\n}"}
{"idx":"1263","func":"class RankAndFile {\n\n    public static void main(String[] args) {\n        String problemSet = \"B-large\";\n\n        File inFile = new File(\"inputs\/\" + problemSet + \".in\");\n        File outFile = new File(\"outputs\/\" + problemSet + \".out\");\n\n        try (PrintStream out = new PrintStream(new FileOutputStream(outFile))) {\n            outFile.createNewFile();\n            Scanner sc = new Scanner(inFile);\n\n            int numberOfTests = sc.nextInt();\n            for (int t = 0; t < numberOfTests; t++) {\n                int n = sc.nextInt();\n                Map<Integer, Integer> counts = new HashMap<Integer, Integer>();\n                for (int i = 0; i < 2*(n*n)-n; i++) {\n                    int value = sc.nextInt();\n                    Integer entry = counts.get(value);\n                    if (entry == null) {\n                        counts.put(value, 1);\n                    } else {\n                        counts.put(value, entry + 1);\n                    }\n                }\n\n                int[] answer = new int[n];\n                int numFound = 0;\n                for (Map.Entry<Integer, Integer> entry: counts.entrySet()) {\n                    if (entry.getValue() % 2 > 0) {\n                        answer[numFound++] = entry.getKey();\n                    }\n                    if (numFound == n) {\n                        break;\n                    }\n                }\n                Arrays.sort(answer);\n                out.printf(\"Case #%d:\", t+1);\n                Arrays.stream(answer).forEach( v -> out.printf(\" %d\", v));\n                out.print(\"\\n\");\n            }\n        } catch (FileNotFoundException e1) {\n            e1.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1264","func":"class RankFile {\n\n    public static void main(String [] args){\n        LinkedList<String> s=new LinkedList<String>();\n        \n        \n        try {\n            String encoding=\"GBK\";\n            File file=new File(\"\/Users\/AmesingFlank\/Downloads\/qbtest.in\");\n            if(file.isFile() && file.exists()){ \/\/\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\n                InputStreamReader read = new InputStreamReader(\n                        new FileInputStream(file),encoding);\/\/\u8003\u8651\u5230\u7f16\u7801\u683c\u5f0f\n                BufferedReader bufferedReader = new BufferedReader(read);\n                String lineTxt = null;\n                while((lineTxt = bufferedReader.readLine()) != null){\n                    s.add(lineTxt);\n                }\n                read.close();\n            }\n        } catch (Exception e) {\n            System.out.println(\"\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u51fa\u9519\");\n            e.printStackTrace();\n        }\n        \n        String[] ans1=new String[s.size()];\n        for (int i1 = 0; i1 < s.size(); i1++) {\n            ans1[i1]=s.get(i1);\n        }\n        String raw[] = ans1;\n        int cases=Integer.valueOf(raw[0]);\n\n        int index=1;\n        String[] ans=new String[cases];\n        for (int i = 0; i < cases; i++) {\n            int N=Integer.valueOf(raw[index]);\n            String vals[]=new String[2*N-1];\n            for (int j = index+1; j <index+1+2*N-1 ; j++) {\n                vals[j-index-1]=raw[j];\n            }\n            index+=2*N;\n            ans[i]=solveOne(N,vals);\n        }\n        try {\n        \n            int trial=ans.length;\n            File file = new File(\"\/Users\/AmesingFlank\/cj2016\/QuestionB-test.txt\");\n            BufferedWriter ow = new BufferedWriter(new FileWriter(file));\n        \n            for(int i=0;i<trial;i++){\n        \n                String temp=\"Case \"+\"#\"+String.valueOf(i+1)+\": \"+ans[i];\n                System.out.println(temp);\n                ow.write(temp);\n        \n                ow.newLine();\n            }\n        \n            ow.close();\n            System.out.println(\"Finished Writing\");\n        \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static String solveOne(int N,String[] files){\n        HashMap<Integer,Integer> counts=new HashMap<>();\n        for (int i = 0; i <files.length ; i++) {\n            int[] arr=getarr(files[i]);\n            for (int j = 0; j < arr.length; j++) {\n                \/\/counts[arr[j]]++;\n                if (counts.get(arr[j])==null){\n                    counts.put(arr[j],1);\n                }\n                else\n                counts.put(arr[j],counts.get(arr[j])+1);\n            }\n        }\n\n        LinkedList<Integer> ansArr=new LinkedList<>();\n\n        Iterator iter =counts.keySet().iterator();\n        while (iter.hasNext()){\n            Integer key=(Integer) iter.next();\n            Integer value=counts.get(key);\n            if (value%2!=0){\n                ansArr.add(key);\n            }\n        }\n\n        Collections.sort(ansArr);\n        String ans=\"\";\n        for (int i = 0; i <ansArr.size() ; i++) {\n            if(i==ansArr.size()-1){\n                ans+=String.valueOf(ansArr.get(i));\n            }\n            else\n            ans+=String.valueOf(ansArr.get(i))+\" \";\n        }\n        return ans;\n    }\n}"}
{"idx":"1265","func":"class RankAndFile {\n\n    static Scanner sc=new Scanner(System.in);\n    public static void main(String[] runOnce){\n        int testCases=Integer.parseInt(sc.nextLine());\n        for(int caseNo=0;caseNo<testCases;caseNo++) {\n            int N;\n            boolean[] height=new boolean[2501];\n            int[] remainingPeople,arrangedPeople;\n            \n            int currentRead,ram1,ram2,z;\n            \n            \n            N=Integer.parseInt(sc.nextLine());\n            for(int y=0;y<((2*N)-1);y++){\n                for(int x=0;x<N;x++){\n                    currentRead=sc.nextInt();\n                    \/*\n                    if(height[currentRead]) System.out.println(\"removing \"+currentRead);\n                    else System.out.println(\"adding \"+currentRead);*\/\n                    height[currentRead]=!height[currentRead];    \n                }\n                sc.nextLine();\n            }\n            remainingPeople=new int[N];\n            int y=0;\n            for(int x=0;x<2501;x++){\n                if(height[x]){\n                    remainingPeople[y]=x;\n                    y++;\n                }\n            }\n            ram1=Integer.MAX_VALUE;\n            \n            for(int x=0;x<N;x++) if(remainingPeople[x]<ram1) ram1=remainingPeople[x];\n            arrangedPeople=new int[N];\n            arrangedPeople[0]=ram1;\n            \n            for(y=1;y<N;y++){\n                ram2=Integer.MAX_VALUE;\n                for(int x=0;x<N;x++){\n                    z=remainingPeople[x];\n                    if(z<ram2&&z>ram1){\n                        ram2=z;\n                    }\n                }\n                arrangedPeople[y]=ram1=ram2;\n            }\n            System.out.print(\"Case #\"+(caseNo+1)+\": \");\n            for(y=0;y<N;y++){\n                System.out.print(arrangedPeople[y]);\n                if(y!=N-1) System.out.print(\" \");\n            }\n            System.out.println(\"\");\n        }\n    }\n}"}
{"idx":"1266","func":"class Round1B {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner sc = new Scanner(new File(\"D:\\\\Downloads\\\\B-small-attempt0.in\"));\n        \/\/ Scanner sc = new Scanner(new File(\"small2.in\"));\n        \n        int T = sc.nextInt();\n        \n        for (int x = 1; x <= T; ++x) {\n            int N = sc.nextInt();\n            \n            int[][] arr = new int[2*N-1][N];\n            \n            \/\/ 2 * N - 1 line with N numbers\n            for (int i = 0; i < 2 * N - 1; ++i) {\n                for (int j = 0; j < N; ++j) {\n                    arr[i][j] = sc.nextInt();\n                }\n            }\n            \n            \n            \n            HashMap<Integer, Integer> map = new HashMap<>();\n            for (int i = 0; i < 2 * N - 1; ++i) {\n                for (int j = 0; j < N; ++j) {\n                    if (map.get(arr[i][j]) == null) {\n                        map.put(arr[i][j], 1);\n                    }\n                    else {\n                        int k = map.get(arr[i][j]);\n                        map.put(arr[i][j], k + 1);\n                    }\n                }\n            }\n            \n            ArrayList<Integer> r = new ArrayList<Integer>();\n            \n            for (int i : map.keySet()) {\n                if (map.get(i) % 2 != 0) {\n                    r.add(i);\n                }\n            }\n            \n            Collections.sort(r);\n            \n            System.out.print(\"Case #\" + x + \":\");\n            for (int i = 0; i < r.size(); ++i) {\n                System.out.print(\" \" + r.get(i));\n            }\n            System.out.println();\n        }\n\n        sc.close();\n    }\n}"}
{"idx":"1267","func":"class GCJ_RankFile {\n\n    \/\/ Global vars\n    StringTokenizer st;\n    BufferedReader in;\n    BufferedWriter out;\n    int min;\n    int max;\n\n\n\n    public static void main(String[] args) throws Exception {\n        GCJ_RankFile J=new GCJ_RankFile();\n\n        Locale.setDefault(Locale.US);\n        \n        \n        \n        \n        \/\/File inputFile=new File(\"B-large.in\");\n        File inputFile=new File(\"B.in\");\n        \n        \n        \n        \/\/        PrintWriter outputFile= new PrintWriter(\"B-large.out\",\"UTF-8\");\n        PrintWriter outputFile= new PrintWriter(\"B.out\",\"UTF-8\");\n        \n        \n        Scanner sc=new Scanner(inputFile);\n        sc.useLocale(Locale.US);\n        \n        int T=sc.nextInt();\n        for (int t=1;t<=T;t++){\n            J.min=Integer.MAX_VALUE;\n            J.max=Integer.MIN_VALUE;\n        \n            int N=sc.nextInt();\n            int[][] list=new int[2*N-1][N];\n            for (int i=0;i<2*N-1;i++){\n                for (int j=0;j<N;j++) {\n                    int x=sc.nextInt();\n                    list[i][j]=x;\n                    if (x<J.min)\n                        J.min=x;\n                    if (x>J.max)\n                        J.max=x;\n                }\n            }\n            int[] cnt=new int[2501];\n            for (int i=0;i<2*N-1;i++)\n                for (int j=0;j<N;j++){\n                    cnt[list[i][j]]++;\n                }\n            int[] tmp=new int[N];\n            int st=0;\n            for (int u=0;u<2501;u++){\n                if (cnt[u]%2==1){\n                    tmp[st++]=u;\n                }\n            }\n            Arrays.sort(tmp);\n            String res=\"\";\n            for (int u:tmp){\n                res+=u+\" \";\n            }\n            String s=res;\n        \n            System.out.println(\"Case #\"+t+\": \"+s);\n            outputFile.println(\"Case #\"+t+\": \"+s);\n        \n        \n        }\n        \n        \n        \n        sc.close();\n        outputFile.close();\n\n\n    }\n\n\n\n\n\n\n}"}
{"idx":"1268","func":"class RandAndFile {\n    public static void main(String args[]) {\n        RandAndFile obj = new RandAndFile();\n        try {\n            System.setOut(new PrintStream(new File(\"\/home\/roide\/codejam\/src\/roide\/rankfile\/output_large.txt\")));\n            String fileName = \"\/home\/roide\/codejam\/src\/roide\/rankfile\/B-large.txt\";\n            File f = new File(fileName);\n            Scanner scan = new Scanner(f);\n            int nCases = scan.nextInt();\n            for(int i=1; i<=nCases; i++) {\n                int N = scan.nextInt();\n                int count = (2*N-1) * N;\n                TreeSet<Integer> set = new TreeSet<>();\n                for(int j=0;j<count;j++) {\n                    int next = scan.nextInt();\n                    if(set.contains(next)) {\n                        set.remove(next);\n                    } else {\n                        set.add(next);\n                    }\n                }\n                StringBuilder ans = new StringBuilder();\n                for(Integer i1:set) {\n                    ans.append(i1).append(\" \");\n                }\n                String val = ans.toString();\n                System.out.println(\"Case #\" + i + \": \" + val);\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1269","func":"class Soldier {\n    public static void main(String[] args) throws IOException {\n        {\n            {\n                String fileAddr = \"\/users\/sahil\/Desktop\/filename.txt\";\n                Scanner scanner = new Scanner(System.in).useDelimiter(System.getProperty(\"line.separator\"));\n                int numTestcases = scanner.nextInt();\n                File file = new File(fileAddr);\n                if (!file.exists()) {\n                    file.createNewFile();\n                }\n                FileWriter fw = new FileWriter(file.getAbsoluteFile());\n                BufferedWriter bw = new BufferedWriter(fw);\n                for (int j = 0; j < numTestcases; j++) {\n                    int N = scanner.nextInt();\n                    HashMap<String, Integer> dictionary = new HashMap<String, Integer>();\n                    for (int i = 0; i < 2 * N - 1; i++) {\n                        String[] listHeight = scanner.next().split(\" \");\n                        for (int k = 0; k < N; k++) {\n                            if (dictionary.get(listHeight[k]) == null)\n                                dictionary.put(listHeight[k], 1);\n                            else\n                                dictionary.put(listHeight[k], dictionary.get(listHeight[k]) + 1);\n                        }\n                    }\n                    Iterator it = dictionary.entrySet().iterator();\n                    List<Integer> missList = new ArrayList<Integer>();\n                    while (it.hasNext()) {\n                        Map.Entry pair = (Map.Entry) it.next();\n                        if ((Integer) pair.getValue() % 2 != 0)\n                            missList.add(Integer.parseInt((String)pair.getKey()));\n                    }\n                    Collections.sort(missList);\n                    bw.write(\"Case #\" + (j + 1) + \": \");\n                    for (int i : missList) {\n                        System.out.print(i);\n                        bw.write(Integer.toString(i));\n                        bw.write(\" \");\n                    }\n                    bw.newLine();\n\n                }\n                bw.close();\n                scanner.close();\n            }\n        }\n    }\n}"}
{"idx":"1270","func":"class Q2 {\n    private static int [] inputN;\n    private static String [] inputH;\n    \n    public static void main(String[] args) {\n        Scanner sc = null;\n        try {\n            sc = new Scanner(new FileReader(\"B-large.in\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        \n        String tStr = sc.nextLine();\n        int t = 0;\n        try{\n            t = Integer.parseInt(tStr);\n        }catch(NumberFormatException nfe){\n            nfe.printStackTrace();\n        }\n        \n        inputH = new String[t];\n        inputN = new int[t];\n        for(int i3 = 0; i3 < t ; i3++){\n            int input = 0;\n            try{\n                input = Integer.parseInt(sc.nextLine());\n            }catch(NumberFormatException nfe){\n                nfe.printStackTrace();\n            }\n            inputN[i3] = input;\n            inputH[i3] = \"\";\n            for(int j = 0; j< 2*inputN[i3] -1; j++)\n                inputH[i3] += \" \" + sc.nextLine();\n        }\n        \n        sc.close();\n        \/\/return in;\n        \n        String[] res = new String[inputN.length];\n        \n        for(int i = 0; i < inputN.length; i++){\n            String [] input = inputH[i].trim().split(\" \");\n            System.out.println(Arrays.toString(input));\n            ArrayList<Integer> l = new ArrayList<Integer>();\n            for(String is : input){\n                int input1 = 0;\n                try{\n                    input1 = Integer.parseInt(is);\n                }catch(NumberFormatException nfe){\n                    nfe.printStackTrace();\n                }\n                int v = input1;\n                if(l.contains(new Integer(v))){\n                    l.remove(new Integer(v));\n                }else{\n                    l.add(v);\n                }\n            }\n            \n            Integer [] miss = l.toArray(new Integer[0]);\n            System.out.println(Arrays.toString(miss));\n            int [] misslist = new int[miss.length];\n            for(int i1 = 0; i1 < miss.length; i1++){\n                misslist[i1] = miss[i1];\n            }\n            Arrays.sort(misslist);\n            String res1 = \"\";\n            for(int i2 : misslist){\n                res1 += i2 + \" \";\n            }\n            res[i] = res1; \n            System.out.println(res[i]);\n        }\n        \n        File out = new File(\"testOut.txt\");\n        if(!out.exists()){\n            try {\n                out.createNewFile();\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n        }\n        PrintWriter pw = null;\n        try {\n            pw = new PrintWriter(new FileWriter(out));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        for(int i = 0; i < res.length ; i++){\n            pw.write(\"Case #\" + (i+1) + \": \"+ res[i] + \"\\n\");\n        }\n        \n        pw.close();\n        \n    }\n}"}
{"idx":"1271","func":"class RankNFile {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        \n        String fileName = \"B-large.in\"; \n        String line = null;\n        int tempInt= 0;\n        Writer writer = null;\n        boolean[] boolArr= new boolean[2501];\n        try {\n            writer = new BufferedWriter(new OutputStreamWriter(\n                  new FileOutputStream(\"B-large.out\"), \"utf-8\"));\n            try {\n                \/\/ FileReader reads text files in the default encoding.\n                FileReader fileReader = new FileReader(fileName);\n    \n                \/\/ Always wrap FileReader in BufferedReader.\n                BufferedReader bufferedReader =  new BufferedReader(fileReader);\n                \n                int a = Integer.parseInt(bufferedReader.readLine());\n                System.out.println(\"There are \" + a +\" entries.\");\n                    for (int e=0; e<a;e++) {\n                        Arrays.fill(boolArr, false);\n                        int b = Integer.parseInt(bufferedReader.readLine());\n                        System.out.println(\"N :\" +b);                        \n                        for (int i = 0; i<(2*b-1); i++) { \/\/for number of stacks of pancakes\n                            line=bufferedReader.readLine();\n                            String[] nums = line.split(\" \");\n                            for (int j = 0; j < nums.length; j++) { \n                                tempInt = Integer.parseInt(nums[j]);\n                                if (boolArr[tempInt]) {\n                                    boolArr[tempInt]=false;\n                                } else {\n                                    boolArr[tempInt]=true;\n                                }; \n                            }\n                        }\n                        \/\/System.out.println(line);\n                        writer.write(\"Case #\" + (e+1) + \":\");\n                        for (int k=0; k<2500;k++) {\n                            if (boolArr[k]) {\n                                writer.write(\" \"+k);\n                            }\n                        }\n                        writer.append(System.lineSeparator());                    \n                    }   \n                    \/\/ Always close files.\n                    bufferedReader.close();         \n                }\n                catch(FileNotFoundException ex) {\n                System.out.println(\"Unable to open file '\" +  fileName + \"'\");                \n            }\n            catch(IOException ex) {\n                System.out.println(\"Error reading file '\" + fileName + \"'\");                  \n                \/\/ Or we could just do this: \n                \/\/ ex.printStackTrace();\n            }    \n        } catch (IOException ex) {\n              \/\/ report\n        } finally {\n            try {writer.close();} catch (Exception ex) {\/*ignore*\/}\n        }\n    }\n}"}
{"idx":"1272","func":"class RankFile{\n\n    public static void main(String[] args){\n        try{\n            File inputFile = new File(\"B-large.in\");\n            FileInputStream streamin = new FileInputStream(inputFile);\n            BufferedReader br = new BufferedReader(new InputStreamReader(streamin));\n            String line = br.readLine();\n            int numTests = Integer.parseInt(line);\n            int testNum = 0;\n            File outputFile = new File(\"B-large-solution.txt\");\n            PrintWriter writer = new PrintWriter(outputFile);\n            while ((line = br.readLine()) != null){\n                testNum++;\n                int N = Integer.parseInt(line);\n                int[][] input = new int[2*N-1][N];\n                for(int i = 0; i < 2*N-1; i++){\n                    line = br.readLine();\n                    String[] parts = line.split(\" \");\n                    for(int j = 0; j < N; j++){\n                        input[i][j] = Integer.parseInt(parts[j]);\n                    }\n                }\n                HashMap<Integer,Integer> map = new HashMap<>();\n                for(int i = 0; i < 2*N-1; i++){\n                    for(int j1 = 0; j1 < N; j1++){\n                        Integer count = map.get(input[i][j1]);\n                        if(count != null){\n                            map.put(input[i][j1], count+1);\n                        }else{\n                            map.put(input[i][j1], 1);\n                        }\n                    }\n                }\n                int[] res1 = new int[N];\n                int count = 0;\n                for(int key : map.keySet()){\n                    if(map.get(key) % 2 != 0){\n                        res1[count] = key;\n                        count++;\n                    }\n                }\n                Arrays.sort(res1);\n                int[] res = res1;\n                String out;\n                out = \"Case #\" + testNum + \":\";\n                for(int j = 0; j < N; j++){\n                    out = out + \" \" + res[j];\n                }\n                writer.println(out);\n            }\n            writer.close();\n        }catch (IOException e){\n            System.out.println(\"IOException\");\n        }\n    }\n}"}
{"idx":"1273","func":"class Main {\n\n  public static void main(String args[]) {\n    Main r = (new Main());\n    Scanner cin = new Scanner(System.in);\n    \n    int T = cin.nextInt();\n    for(int C=1; C<=T; ++C) {\n    \n      int N = cin.nextInt();\n    \n      int size = N * 2 - 1;\n      int count[] = new int[2501];\n    \n      for(int i=0; i<size; ++i) {\n        for(int j=0; j<N; ++j) {\n          ++count[ cin.nextInt() ];\n        }\n      }\n    \n      List<Integer> ans = new ArrayList<Integer>();\n      for(int i=1; i<=2500; ++i) {\n        if( count[i] % 2 != 0 ) { ans.add(i); }\n      }\n    \n      System.out.print(\"Case #\" + C + \":\");\n      for( int v : ans ) {\n        System.out.print(\" \" + v);\n      }\n      System.out.println();\n    \n    }\n  }\n\n}"}
{"idx":"1274","func":"class Main {\n    public static void main(String[] args) throws Exception{\n        Scanner input = new Scanner(System.in);\n        PrintWriter writer = new PrintWriter(\"output\", \"UTF-8\");\n        int T = input.nextInt();\n        for(int i = 1; i <= T; i++){\n            int N = input.nextInt();\n            \/\/ read each line\n            boolean line[] = new boolean[2501];\n            for(int j = 0; j < line.length; j++) line[j] = true;\/\/ true means even\n            for(int j = 0; j < 2 * N - 1; j++){\n                \/\/ read each int\n                for(int k = 0; k < N; k++){\n                    int n = input.nextInt();\n                    line[n] = (line[n] == false);\/\/ flip the value\n                }\n                \n            }\n            writer.print(\"Case #\" + i + \":\");\n            for(int j = 1; j < line.length; j++){\n                if(line[j] == false) writer.print(\" \" + j);\n            }\n            writer.println();\n        }\n        input.close();\n        writer.close();\n    }\n}"}
{"idx":"1275","func":"class BB {\n    private static Scanner in;\n    private static PrintWriter out;\n    private static final boolean USE_FILE = true;\n    private static final String FILE_NAME = \"B-large\";\n\n    public static void main(String[] args) throws IOException {\n        in = new Scanner(new BufferedReader(new InputStreamReader(USE_FILE ? new FileInputStream(FILE_NAME + \".in\") : System.in)));\n        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(USE_FILE ? new FileOutputStream(FILE_NAME + \".out\") : System.out)));\n        \n        int testCount = in.nextInt();\n        for (int test = 0; test < testCount; test++) {\n            int n = in.nextInt();\n            int[] a = new int[2501];\n            for (int i = 0; i < (2*n-1)*n; i++) {\n                a[in.nextInt()]++;\n            }\n            \n            List<Integer> list = new ArrayList<>();\n            for (int i = 0; i < a.length; i++) {\n                if (a[i] > 0 && a[i] % 2 == 1) {\n                    list.add(i);\n                }\n            }\n            Collections.sort(list);\n            String s = list.toString().replace(\",\", \"\").replace(\"[\", \"\").replace(\"]\", \"\");\n            out.println(\"Case #\" + (test + 1) + \": \" + s);\n        }\n        \n        in.close();\n        out.close();\n    }\n}"}
{"idx":"1276","func":"class ProblemB {\n    static Scanner in=new Scanner(System.in);\n    public static void main(String[] args) throws FileNotFoundException {\n        java.io.PrintStream out=new java.io.PrintStream(\"C:\/users\/Josh\/documents\/output.txt\");\n        int run=in.nextInt();\n        for(int p=0;p<run;p++)\n        {\n            int lists=in.nextInt();\n            int slots[][]=new int[lists][2501];\n            int slots1[]=new int[2501];\n            for(int c=0;c<(2*lists)-1;c++)\n            {\n                for(int d=0;d<lists;d++)\n                {\n                    int temp=in.nextInt();\n                    slots[d][temp]++;\n                    slots1[temp]++;\n                }\n            }\n            \n            String outp=\"\";\n            int arr[]=new int[lists];\n            int count=0;\n            for(int b=0;b<2500;b++)\n            {\n                if(slots1[b]%2!=0)\n                {\n                    arr[count]=b;\n                    count++;\n                }\n            }\n            for(int x=0;x<lists;x++)\n            {\n                for(int y=0;y<lists-1;y++)\n                {\n                    if(arr[y]>arr[y+1])\n                    {\n                        int temp=arr[y];\n                        arr[y]=arr[y+1];\n                        arr[y+1]=temp;\n                    }\n                }\n            }\n            for(int x=0;x<lists;x++)\n            {\n                outp+=arr[x];\n                outp+=\" \";\n            }\n            out.println(\"Case #\"+(p+1)+\": \"+outp);\n        }\n    \n    }\n}"}
{"idx":"1277","func":"class GCJ2016R1A_B {\n    public static void main(String[] args) throws FileNotFoundException {\n\/\/         Scanner input = new Scanner(System.in);\n\/\/         PrintWriter out = new PrintWriter(System.out);\n         Scanner input = new Scanner(new File(\"B-large.in\"));\n         PrintWriter out = new PrintWriter(new File(\"pB.out\"));\n\n        while (input.hasNext()) {\n            int T = input.nextInt();\n\n            for (int t = 1; t <= T; ++t) {\n                int N = input.nextInt();\n                int lineNum = 2 * N - 1;\n                int[] countHeight = new int[2500+1];\n                \n                for(int i = 0; i < lineNum; ++i){\n                    for(int j = 0; j < N; ++j){\n                        ++countHeight[input.nextInt()];\n                    }\n                }\n                \n                out.printf(\"Case #%d: \", t);\n                boolean isFirstNum = true;\n                for(int i = 0; i < countHeight.length; ++i){\n                    if(countHeight[i] % 2 == 1){\n                        if(isFirstNum){\n                            out.print(i);\n                            isFirstNum = false;\n                        } else {\n                            out.printf(\" %d\", i);\n                        }\n                    }\n                }\n                out.println();\n            }\n        }\n\n        out.close();\n        input.close();\n    }\n}"}
{"idx":"1278","func":"class Round1AB {\n  \n  public static void main(String[] args) {\n    \n    Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    \n    int amount = scan.nextInt();\n    scan.nextLine();\n    \n    for (int i = 0; i < amount; i++) {\n      \n      int cases = scan.nextInt();\n      scan.nextLine();\n      \n      int[] arr = new int[2501];\n      \n      for (int x = 0; x < 2*cases-1; x++) {\n        \n        String[] curr = scan.nextLine().split(\" \");\n        \n        \/\/ find the smallest for ROW\n        for (String r : curr) {\n          arr[Integer.parseInt(r)]++;\n        }\n        \n      }\n      \n      String f = \"\";\n      for (int num = 1; num < arr.length; num++) {\n        if (arr[num] == 1 || (arr[num] > 2 && arr[num]%2 != 0)) {\n          f += \" \" + num;\n        \n        }\n        \n      }\n      System.out.println(\"Case #\" + (i+1) + \":\" + f);\n\n      \n    }\n    \n  }\n}"}
{"idx":"1279","func":"class B {\n    public static void main (String args[]) throws Exception\n    {\n        File file = new File(\"C:\\\\Users\\\\charafi\\\\IdeaProjects\\\\Round_1_A_2016\\\\src\\\\B.in\");\n        PrintWriter out = new PrintWriter(\"C:\\\\Users\\\\charafi\\\\IdeaProjects\\\\Round_1_A_2016\\\\src\\\\B.out\",\"UTF-8\");\n        Scanner in =new Scanner(file);\n        int T=in.nextInt();\n        for(int i=0;i<T;i++)\n        {\n            out.printf(\"Case #%d:\",i+1);\n            int N=in.nextInt();\n            int e[]=new int[2501];\n            for(int k=1;k<2501;k++)\n            {\n                e[k]=0;\n            }\n            for (int j=0;j<((N-1)*2+1);j++)\n            {\n                for(int k=0;k<N;k++)\n                {\n                    e[in.nextInt()]++;\n                }\n            }\n            for(int k=1;k<2501;k++)\n            {\n                if(e [k]%2==1)\n                    out.printf(\" %d\",k);\n            }\n\n            out.printf(\"\\n\");\n        }\n        out.close();\n    }\n}"}
{"idx":"1280","func":"class Main {\n    \n    public static void main(String[] args) throws Exception {\n        PrintWriter pr = new PrintWriter(System.out, true);\n\n    \/\/    FileInputStream fin=new FileInputStream(\"C:\/Users\/4dm1n\/Desktop\/B-large(1).in\");\n    \/\/    File myfile=new File(\"C:\/Users\/4dm1n\/Desktop\/A.out\");\n        \n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n    \/\/    RandomAccessFile rand=new RandomAccessFile(myfile,\"rw\");\n        \n        int t,n,m,j,l,i,c,r,tt,ht[];\n        long nm;\n        char ch[];\n        String s[];\n        StringBuilder sb;\n        t=Integer.parseInt(br.readLine());\n        for(tt=1;tt<=t;tt++){\n            sb=new StringBuilder(\"Case #\"+tt+\": \");ht=new int[2600];\n            n=Integer.parseInt(br.readLine());\n            m=2*n-1;\n            for(i=0;i<m;i++){\n                s=br.readLine().split(\" \");\n                for(j=0;j<n;j++){\n                    ht[Integer.parseInt(s[j])]++;\n                }\n            }\n            for(i=0;i<2502;i++){\n                if((ht[i]&1)>0) sb.append(i+\" \");\n            }\n            sb.append(\"\\n\");\n        \/\/    rand.writeBytes(sb.toString());\n            System.out.print(sb);\n        }\n    }\n}"}
{"idx":"1281","func":"class Missing_list {\n    private static BufferedReader fr;\n    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\nstatic LinkedList<Integer> num_list = new LinkedList<Integer>();\nstatic LinkedList<Integer> missing_list = new LinkedList<Integer>();\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        \n        System.out.println(\"Enter File Name = \");\n        String ipfile = br.readLine();\n        System.out.println(\"File Name = \"+ipfile);\n        fr = new BufferedReader(new FileReader(ipfile));\n        Integer cases = Integer.parseInt(fr.readLine());\n        System.out.println(\"Cases = \"+cases);\n        Missing_list myvar = new Missing_list();\n        String line;\n        Integer cnt=1;\n        for(int i=1;i<=cases;i++)\n        {\n            Integer nums = Integer.parseInt(fr.readLine());\n            \n            for(int j=0;j<(nums*2)-1;j++)\n            {\n                line = fr.readLine();\n                Scanner s = new Scanner(line);\n                for(int k=0;k<nums;k++)\n                {\n                    Integer number = s.nextInt();\n                    num_list.add(number);\n                }\n            \n            }\n            \n            ListIterator<Integer> it = num_list.listIterator();\n            missing_list.clear();\n            while(it.hasNext())\n            {\n                Integer curr_num = it.next();\n                Integer occr = Collections.frequency(num_list,curr_num);\n                if(occr % 2 != 0)\n                {\n                    Integer dups=Collections.frequency(missing_list, curr_num);\n                    if(dups==0)\n                        missing_list.add(curr_num);\n                }\n                \n            }\n            \n            Collections.sort(missing_list);    \n            String res = missing_list.toString().replaceAll(\"[^a-zA-Z0-9 ]\",\"\").toUpperCase();\n            System.out.println(\"Case #\"+i+\": \"+res);\n            num_list.clear();\n            \n    }\n\n    \n    \n\n    \n\n    \n    }}"}
{"idx":"1282","func":"class B {\n  \n  public static void main (String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int numTests = sc.nextInt();\n    for (int tc = 1; tc <= numTests; ++tc) {\n      String cc = sc.next();\n      String jj = sc.next();\n      int limit = 0;\n      if (cc.length() == 1) {\n        limit = 9;\n      } else {\n        limit = cc.length() == 2 ? 99 : 999;\n      }\n      int cScore = 1000;\n      int jScore = 1000;\n      int absDiff = 1000;\n      for (int i = 0; i <= limit; ++i) {\n        for (int j = 0; j <= limit; ++j) {\n          String ct = String.valueOf(i);\n          String jt = String.valueOf(j);\n          while (ct.length() < cc.length()) {\n            ct = \"0\" + ct;\n          }\n          while (jt.length() < jj.length()) {\n            jt = \"0\" + jt;\n          }\n          boolean okay = true;\n          for (int k = 0; k < cc.length(); ++k) {\n            if (cc.charAt(k) != '?' && cc.charAt(k) != ct.charAt(k)) {\n              okay = false;\n              break;\n            }\n            if (jj.charAt(k) != '?' && jj.charAt(k) != jt.charAt(k)) {\n              okay = false;\n              break;\n            }\n          }\n          if (okay) {\n            if (Math.abs(i - j) <= absDiff) {\n              if (Math.abs(i - j) == absDiff) {\n                if (i <= cScore) {\n                  if (i == cScore) {\n                    if (j < jScore) {\n                      cScore = i;\n                      jScore = j;\n                    }\n                  } else {\n                    cScore = i;\n                    jScore = j;\n                  }\n                }\n              } else {\n                cScore = i;\n                jScore = j;\n                absDiff = Math.abs(i - j);\n              }\n            }\n          }\n        }\n      }\n      String cAns = String.valueOf(cScore);\n      String jAns = String.valueOf(jScore);\n      while (cAns.length() < cc.length()) {\n        cAns = \"0\" + cAns;\n      }\n      while (jAns.length() < jj.length()) {\n        jAns = \"0\" + jAns;\n      }\n      System.out.println(\"Case #\" + tc + \": \" + cAns + \" \" + jAns);\n    }\n  }\n}"}
{"idx":"1283","func":"class A {\n    public static void main(String[] args) throws IOException {\n    String        pb        = \"A\";\n    Scanner       sc        = new Scanner(new FileReader(new File(pb+\".in\")));\n    PrintWriter   out       = new PrintWriter(new File(pb+\".out\"));\n        StringBuilder resultat  = new StringBuilder(\"\");\n        \/\/long time = System.currentTimeMillis();\n        \n        \/\/TEST CASES----------------------------------------------------\n        int TC = sc.nextInt();\n        sc.nextLine();\n    for (int tc = 1; tc <= TC; tc++) {\n      if(tc!=1) resultat.append(\"\\n\");\n      resultat.append(\"Case #\"+tc+\": \");\n    \n      \/\/READ----------------------------------------------------\n      String[] scores = sc.nextLine().split(\" \");\n      ArrayList<Integer> scoreA = new ArrayList<Integer>();\n      ArrayList<Integer> scoreB = new ArrayList<Integer>();\n      \n      \n      String score1 = scores[0];\n      ArrayList<String> scoreStrA = new ArrayList<String>();\n      scoreStrA.add(score1);\n      for (int i = 0; i < score1.length(); i++)\n      {\n        if(score1.charAt(i)!='?')\n          continue;\n        ArrayList<String> scoreStrANew = new ArrayList<String>();\n        for (int j = 0; j <= 9; j++)\n        {\n          for (int k = 0; k < scoreStrA.size(); k++)\n          {\n            scoreStrANew.add(scoreStrA.get(k).substring(0, i)+j+scoreStrA.get(k).substring(i+1));\n          }\n        }\n        scoreStrA = scoreStrANew;\n        \/\/System.out.println(scoreStrA);\n      }\n      \n      for (int i = 0; i < scoreStrA.size(); i++)\n      {\n        scoreA.add(Integer.parseInt(scoreStrA.get(i)));\n      }\n      \n      \n      \n      \n      \n      String score2 = scores[1];\n      ArrayList<String> scoreStrB = new ArrayList<String>();\n      scoreStrB.add(score2);\n      for (int i = 0; i < score2.length(); i++)\n      {\n        if(score2.charAt(i)!='?')\n          continue;\n        ArrayList<String> scoreStrBNew = new ArrayList<String>();\n        for (int j = 0; j <= 9; j++)\n        {\n          for (int k = 0; k < scoreStrB.size(); k++)\n          {\n            scoreStrBNew.add(scoreStrB.get(k).substring(0, i)+j+scoreStrB.get(k).substring(i+1));\n          }\n        }\n        scoreStrB = scoreStrBNew;\n        \/\/System.out.println(scoreStrB);\n      }\n      \n      \n      for (int i = 0; i < scoreStrB.size(); i++)\n      {\n        scoreB.add(Integer.parseInt(scoreStrB.get(i)));\n      }\n      \n      \n      Collections.sort(scoreB);\n      Collections.sort(scoreA);\n      \n      \n      int diff = Integer.MAX_VALUE;\n      int sb = 0;\n      int sa = 0;\n      for (int i = 0; i < scoreB.size(); i++)\n      {\n        for (int j = 0; j < scoreA.size(); j++)\n        {\n          int d = Math.abs(scoreA.get(j)-scoreB.get(i));\n          if(d<diff || \n              (d==diff && (scoreB.get(i)+scoreA.get(j))<(sa+sb)) ||  \n              (d==diff && (scoreB.get(i)+scoreA.get(j))==(sa+sb) && scoreB.get(i)<sb )){\n            diff = d;\n            sa = scoreA.get(j);\n            sb = scoreB.get(i);\n          }\n        }\n      }\n      \n      \n      \n      \n      \n            \/\/SOLVE----------------------------------------------------\n      String scoreAA = sa+\"\";\n      while(scoreAA.length()<score1.length()){\n        scoreAA = \"0\"+scoreAA;\n      }\n      \n      String scoreBB = sb+\"\";\n      while(scoreBB.length()<score2.length()){\n        scoreBB = \"0\"+scoreBB;\n      }\n      \n      resultat.append(scoreAA+\" \"+scoreBB);\n            \n            \n      \/\/PRINT--------------------------------------------------\n            System.out.println(scoreAA+\" \"+scoreBB);\n            \/\/resultat.append(str);\n\/\/            System.out.println(\"Finished testcase \" + tc + \", time = \" + (System.currentTimeMillis() - time));\n            \n        }\n        \n    \/\/CLOSE----------------------------------------------------\n        out.print(resultat);\n        out.close(); sc.close();\n    }\n\n}"}
{"idx":"1284","func":"class B\n{\n    public static void main(String[] args) throws Exception\n    {\n        \/\/Scanner in = new Scanner(System.in);\n        Scanner in = new Scanner(new File(\"B-small-attempt0.in\"));\n        PrintStream out = new PrintStream(new File(\"B-small-attempt0.out\"));\n        int t = in.nextInt();\n        for (int i = 1; i <= t; i++) \n        {\n            String ccs = in.next();\n            String jjs = in.next();\n            \n            char[] c = ccs.toCharArray();\n            char[] j = jjs.toCharArray();\n\n            int cnt = 0;\n            ArrayList<Integer> cs = new ArrayList<Integer>();\n            ArrayList<Integer> js = new ArrayList<Integer>();\n\n            for (int k = 0; k < 1000; k++) {\n                int cur = k;\n                boolean ok = true;\n                for (int kk = c.length-1; kk >= 0; kk--) {\n                    if (cur%10 + '0' != c[kk] && c[kk] != '?') {\n                        ok = false;\n                    }\n                    cur \/= 10;\n                }\n                if (ok && cur == 0) {\n                    cs.add(k);\n                }\n\n                cur = k;\n                ok = true;\n                for (int kk = j.length-1; kk >= 0; kk--) {\n                    if (cur%10 + '0' != j[kk] && j[kk] != '?') {\n                        ok = false;\n                    }\n                    cur \/= 10;\n                }\n                if (ok && cur == 0) {\n                    js.add(k);\n                }\n            }\n\n            int min = Integer.MAX_VALUE;\n            int cc = 0, jj = 0;\n            for (int k = 0; k < cs.size(); k++) {\n                for (int kk = 0; kk < js.size(); kk++) {\n                    if (Math.abs(cs.get(k)-js.get(kk)) < min) {\n                        min = Math.abs(cs.get(k)-js.get(kk));\n                        cc = cs.get(k);\n                        jj = js.get(kk);\n                    }\n                }\n            }\n\n            String format = \"Case #%d: %0\" + c.length + \"d %0\"+c.length+\"d\\n\";\n            out.printf(format, i, cc, jj);\n        }\n    }\n}"}
{"idx":"1285","func":"class Q2 {\n\n    public static String solve(String C, String J) {\n\n        int len = C.length();\n\n        char[] cs = C.toCharArray();\n        char[] js = J.toCharArray();\n\n        List<String> cres = new ArrayList<>();\n        List<String> jres = new ArrayList<>();\n        cres.add(\"\");\n        jres.add(\"\");\n\n        for (int i = 0; i < len; i++) {\n            if (cs[i] == '?' && js[i] == '?') {\n                List<String> r = new ArrayList<>();\n                for (String s : cres) {\n                    for (char c : new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}) {\n                        r.add(s + c);\n                    }\n                }\n                cres = r;\n                List<String> r = new ArrayList<>();\n                for (String s : jres) {\n                    for (char c : new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}) {\n                        r.add(s + c);\n                    }\n                }\n                jres = r;\n            } else if (cs[i] == '?') {\n                List<String> r = new ArrayList<>();\n                for (String s : cres) {\n                    for (char c : new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}) {\n                        r.add(s + c);\n                    }\n                }\n                cres = r;\n                List<String> r = new ArrayList<>();\n                for (String s : jres) {\n                    for (char c : new char[]{js[i]}) {\n                        r.add(s + c);\n                    }\n                }\n                jres = r;\n            } else if (js[i] == '?') {\n                List<String> r = new ArrayList<>();\n                for (String s : cres) {\n                    for (char c : new char[]{cs[i]}) {\n                        r.add(s + c);\n                    }\n                }\n                cres = r;\n                List<String> r = new ArrayList<>();\n                for (String s : jres) {\n                    for (char c : new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}) {\n                        r.add(s + c);\n                    }\n                }\n                jres = r;\n            } else {\n                List<String> r = new ArrayList<>();\n                for (String s : cres) {\n                    for (char c : new char[]{cs[i]}) {\n                        r.add(s + c);\n                    }\n                }\n                cres = r;\n                List<String> r = new ArrayList<>();\n                for (String s : jres) {\n                    for (char c : new char[]{js[i]}) {\n                        r.add(s + c);\n                    }\n                }\n                jres = r;\n            }\n        }\n\n        long min = Long.MAX_VALUE;\n        String a = \"\";\n        String b = \"\";\n        for (String cre : cres) {\n            for (String jre : jres) {\n                long m = Long.parseLong(cre);\n                long n = Long.parseLong(jre);\n                long diff = Math.abs(m - n);\n                if (min > diff) {\n                    min = diff;\n                    a = cre;\n                    b = jre;\n                }\n            }\n        }\n\n        return String.valueOf(a) + \" \" + String.valueOf(b);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        in.nextLine();\n        for (int i = 1; i <= t; ++i) {\n            String c = in.next();\n            String j = in.next();\n            System.out.println(\"Case #\" + i + \": \" + solve(c, j));\n        }\n    }\n}"}
{"idx":"1286","func":"class Main {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"B-small-attempt0.in\"));\n        \/\/Scanner in = new Scanner(new File(\"B-small.in\"));\n        PrintWriter out = new PrintWriter(\"out.txt\");\n        int t = in.nextInt();\n        for (int cases = 1; cases <= t; cases++) {\n            String q = in.next();\n            int len = q.length();\n            String c = \"00\" + q;\n            String j = \"00\" + in.next();\n            c = c.substring(c.length() - 3);\n            j = j.substring(j.length() - 3);\n            int cRes = (c.charAt(0) == '?' ? 0 : (int)c.charAt(0) - (int)'0') * 100 +\n                    (c.charAt(1) == '?' ? 0 : (int)c.charAt(1) - (int)'0') * 10 +\n                    (c.charAt(2) == '?' ? 0 : (int)c.charAt(2) - (int)'0');\n            int jRes = (j.charAt(0) == '?' ? 0 : (int)j.charAt(0) - (int)'0') * 100 +\n                    (j.charAt(1) == '?' ? 0 : (int)j.charAt(1) - (int)'0') * 10 +\n                    (j.charAt(2) == '?' ? 0 : (int)j.charAt(2) - (int)'0');\n            int[] m = new int[6];\n            for (int i = 0; i < c.length(); i++) {\n                if (c.charAt(i) == '?') {\n                    m[i] = 9;\n                }\n            }\n            for (int i = 0; i < j.length(); i++) {\n                if (j.charAt(i) == '?') {\n                    m[i + 3] = 9;\n                }\n            }\n            for (int c1 = 0; c1 <= m[0]; c1++) {\n                for (int c2 = 0; c2 <= m[1]; c2++) {\n                    for (int c3 = 0; c3 <= m[2]; c3++) {\n                        for (int j1 = 0; j1 <= m[3]; j1++) {\n                            for (int j2 = 0; j2 <= m[4]; j2++) {\n                                for (int j3 = 0; j3 <= m[5]; j3++) {\n                                    int curC = (c.charAt(0) == '?' ? c1 : (int)c.charAt(0) - (int)'0') * 100 +\n                                            (c.charAt(1) == '?' ? c2 : (int)c.charAt(1) - (int)'0') * 10 +\n                                            (c.charAt(2) == '?' ? c3 : (int)c.charAt(2) - (int)'0');\n                                    int curJ = (j.charAt(0) == '?' ? j1 : (int)j.charAt(0) - (int)'0') * 100 +\n                                            (j.charAt(1) == '?' ? j2 : (int)j.charAt(1) - (int)'0') * 10 +\n                                            (j.charAt(2) == '?' ? j3 : (int)j.charAt(2) - (int)'0');\n                                    if (Math.abs(curC - curJ) < Math.abs(cRes - jRes) ||\n                                            (Math.abs(curC - curJ) == Math.abs(cRes - jRes) &&\n                                                    (curC < cRes || (curC == cRes && curJ < jRes)))) {\n                                        cRes = curC;\n                                        jRes = curJ;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            String cS = \"00\" + Integer.toString(cRes);\n            String jS = \"00\" + Integer.toString(jRes);\n            String res = cS.substring(cS.length() - len) + \" \" + jS.substring(jS.length() - len);\n            out.println(\"Case #\" + cases + \": \" + res);\n        }\n        out.close();\n    }\n}"}
{"idx":"1287","func":"class B {\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new File(\"B.in\"));\n        PrintWriter out = new PrintWriter(new File(\"B.out\"));\n        int T = sc.nextInt();\n        for(int t=1;t<=T;t++){\n            char[] A = sc.next().toCharArray();\n            char[] B = sc.next().toCharArray();\n            String AA = String.valueOf(A);\n            String BB = String.valueOf(B);\n            int delta = Integer.MAX_VALUE;\n            \n            for(int a=0;a<999;a++){\n                char[] tempA = A.clone();\n                if(tempA.length>0&&tempA[0]=='?'){\n                    tempA[0] = (char)('0' + ((a\/100)%10));\n                }\n                if(tempA.length>1&&tempA[1]=='?'){\n                    tempA[1] = (char)('0' + ((a\/10)%10));\n                }\n                if(tempA.length>2&&tempA[2]=='?'){\n                    tempA[2] = (char)('0' + (a%10));\n                }\n                for(int b=0;b<999;b++){\n                    char[] tempB = B.clone();\n                    if(tempB.length>0&&tempB[0]=='?'){\n                        tempB[0] = (char)('0' + ((b\/100)%10));\n                    }\n                    if(tempB.length>1&&tempB[1]=='?'){\n                        tempB[1] = (char)('0' + ((b\/10)%10));\n                    }\n                    if(tempB.length>2&&tempB[2]=='?'){\n                        tempB[2] = (char)('0' + (b%10));\n                    }\n                    \n                    int AAA = Integer.parseInt(String.valueOf(tempA));\n                    int BBB = Integer.parseInt(String.valueOf(tempB));\n                    int diff = Math.abs(AAA-BBB);\n                    if(diff<delta){\n                        delta=diff;\n                        AA=String.valueOf(tempA);\n                        BB=String.valueOf(tempB);\n                    }\n                }\n            }\n            System.out.printf(\"Case #%d: %s %s%n\",t,AA,BB);\n            out.printf(\"Case #%d: %s %s%n\",t,AA,BB);\n        }\n        \n        out.close();\n    }\n}"}
{"idx":"1288","func":"class CloseMatch {\n    \n    public static void main(String[] args) throws IOException {\n        Scanner input = new Scanner(new File(args[0]));\n        PrintWriter output = new PrintWriter(new File(args[1]));\n        \n        int t = input.nextInt();\n        input.nextLine();\n        \n        for (int i = 0; i < t; ++i) {\n            String[] scores = input.nextLine().trim().split(\"\\\\s+\");\n            String closestMatch = closestMatch(scores[0].toCharArray(), scores[1].toCharArray());\n            output.printf(\"Case #%d: %s%n\", (i + 1), closestMatch);;\n        }\n        \n        input.close();\n        output.close();\n    }\n    \n    private static Character[] objectify(char[] a) {\n        Character[] o = new Character[a.length];\n        for (int i = 0; i < a.length; ++i) o[i] = a[i];\n        return o;\n    }\n    \n    private static final String closestMatch(char[] cs, char[] js) {\n        String cPat = new String(cs).replace(\"?\", \"%c\");\n        String jPat = new String(js).replace(\"?\", \"%c\");\n        \n        String cc = new String(cs);\n        String jj = new String(js);\n        int b = 0;\n        for (int i1 = 0; i1 < cs.length; ++i1) if (cs[i1] == '?') ++b;\n        \n        \n        int lbc = b;\n        int b = 0;\n        for (int i2 = 0; i2 < js.length; ++i2) if (js[i2] == '?') ++b;\n        int lbj = b;\n        \n        int ppc = lbc == 0 ? Integer.parseInt(cc) : 0;\n        int ppj = lbj == 0 ? Integer.parseInt(jj) : 0;\n        \n        int cBound = (int) Math.pow(10, lbc);\n        int jBound = (int) Math.pow(10, lbj);\n        \n        int minDiff = Integer.MAX_VALUE;\n        int cRep = -1;\n        int jRep = -1;\n        \n        for (int i = 0; i < cBound; ++i) {\n            for (int j = 0; j < jBound; ++j) {\n                int pc = lbc == 0 ? ppc : Integer.parseInt(String.format(cPat, objectify(String.format(\"%0\" + lbc + \"d\", i).toCharArray())));\n                int pj = lbj == 0 ? ppj : Integer.parseInt(String.format(jPat, objectify(String.format(\"%0\" + lbj + \"d\", j).toCharArray())));\n                if (Math.abs(pc - pj) < minDiff) {\n                    minDiff = Math.abs(pc - pj);\n                    cRep = pc;\n                    jRep = pj;\n                }\n            }\n        }\n        return String.format(\"%0\" + cs.length + \"d %0\" + cs.length + \"d\", cRep, jRep);\n    }\n\n}"}
{"idx":"1289","func":"class B {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int cases = input.nextInt();\n        input.nextLine();\n        for (int c = 0; c < cases; c++) {\n            int bestD = Integer.MAX_VALUE;\n            int bestX = 0;\n            int bestY = 0;\n            String a = input.next().replaceAll(\"\\\\?\", \"\\\\.\");\n            String b = input.next().replaceAll(\"\\\\?\", \"\\\\.\");\n            int n = a.length();\n            String fmt = \"%0\" + n + \"d\";\n            Pattern pa = Pattern.compile(a);\n            Pattern pb = Pattern.compile(b);\n            for (int x = 0; x < 1000; x++) {\n                for (int y = 0; y < 1000; y++) {\n                    String sx = Integer.toString(x);\n                    while (sx.length() < n) sx = \"0\" + sx;\n                    String sy = Integer.toString(y);\n                    while (sy.length() < n) sy = \"0\" + sy;\n                    Matcher ma = pa.matcher(sx);\n                    Matcher mb = pb.matcher(sy);\n                    if (ma.matches() && mb.matches()) {\n                        int d = Math.abs(x - y);\n                        if (d < bestD) {\n                            bestD = d;\n                            bestX = x;\n                            bestY = y;\n                        }\n                    }\n                }\n            }\n            System.out.println(String.format(\"Case #%d: \" + fmt + \" \" + fmt, c+1, bestX, bestY));\n        }\n    }\n}"}
{"idx":"1290","func":"class CloseMatch \n{\n    public static void main(String[] args) throws FileNotFoundException\n    {\n        Scanner s = new Scanner(new File(\"C:\\\\Users\\\\Adam\\\\Documents\\\\codejam\\\\B-small-attempt0.in\"));\n\n        int cases = s.nextInt();\n        s.nextLine();\n        \n        for (int i = 1; i <= cases; i++)\n        {\n            String line = s.nextLine();\n            String scores[] = line.split(\" \");\n            String scorec = scores[0];\n            String scorej = scores[1];\n            \n            ArrayList<String> cperms = new ArrayList<String>();\n            cperms.add(scorec);\n            boolean done = false;\n            while (!done)\n            {\n                done = true;\n                int j = 0;\n                while (j < cperms.size())\n                {\n                    String word = cperms.get(j);\n                    if (word.contains(\"?\"))\n                    {\n                        \n                        done = false;\n                        String firstHalf = word.substring(0, word.indexOf(\"?\"));\n                        String secondHalf = word.substring(word.indexOf(\"?\") + 1);\n                        for (int k = 0; k < 10; k++)\n                        {\n                            cperms.add(firstHalf + k + secondHalf);\n                        }\n                        cperms.remove(word);\n                    }\n                    else\n                    {\n                        j++;\n                    }\n                }\n            }\n            \n            ArrayList<String> jperms = new ArrayList<String>();\n            jperms.add(scorej);\n            done = false;\n            while (!done)\n            {\n                done = true;\n                int j = 0;\n                while (j < jperms.size())\n                {\n                    String word = jperms.get(j);\n                    if (word.contains(\"?\"))\n                    {\n                        \n                        done = false;\n                        String firstHalf = word.substring(0, word.indexOf(\"?\"));\n                        String secondHalf = word.substring(word.indexOf(\"?\") + 1);\n                        for (int k = 0; k < 10; k++)\n                        {\n                            jperms.add(firstHalf + k + secondHalf);\n                        }\n                        jperms.remove(word);\n                    }\n                    else\n                    {\n                        j++;\n                    }\n                }\n            }\n            \n            ArrayList<Integer> poss = new ArrayList<Integer>();\n            \n            for (String s1 : cperms)\n            {\n                for (String s2 : jperms)\n                {\n                    int diff = Math.abs(Integer.valueOf(s1) - Integer.valueOf(s2));\n                    \n                    if (!poss.contains(diff))\n                        poss.add(diff);\n                }\n            }\n            \n            Collections.sort(poss);\n            \n            if (i == 1)\n            {\n                \/\/for (String strin : cperms)\n                \/\/    System.out.println(\"C: \" + strin);\n                \n                \/\/for (String strin : jperms)\n                \/\/    System.out.println(\"J: \" + strin);\n            }\n            \n            done = false;\n            int a = 0;\n            while (!done && a < cperms.size())\n            {\n                int b = 0;\n                \n                while (!done && b < jperms.size())\n                {\n\/\/System.out.println(\"C is \" + cperms.get(a) + \", J is \" + jperms.get(b));\n                    int diff = Math.abs(Integer.valueOf(cperms.get(a)) - Integer.valueOf(jperms.get(b)));\n\/\/System.out.println(\"case \" + i + \" diff is \" + diff);\n                    if (diff == poss.get(0))\n                    {\n                        done = true;\n                        System.out.println(\"Case #\" + i + \": \" + cperms.get(a) + \" \" + jperms.get(b));\n                    }\n                    else\n                    {\n                        b++;\n                    }\n                }\n                \n                a++;\n            }\n        }\n        \n\n    }\n}"}
{"idx":"1291","func":"class R1BB {\n    public static void main(String[] args) throws Exception {\n        Scanner scan = new Scanner(System.in);\n        int nCases = scan.nextInt();\n        for (int z = 0; z < nCases; z++) {\n            String a = scan.next(), b = scan.next();\n\n            int len = a.length();\n            \/\/ little-endian: b followed by a\n            int[] digits = new int[2*len];\n            ArrayList<Integer> questionPos = new ArrayList<Integer>();\n            for (int i = 0; i < len; i++) {\n                int aPos = len-1 - i + len, bPos = len-1 - i;\n                if (a.charAt(i) != '?') {\n                    digits[aPos] = a.charAt(i) - '0';\n                } else {\n                    questionPos.add(aPos);\n                }\n                if (b.charAt(i) != '?') {\n                    digits[bPos] = b.charAt(i) - '0';\n                } else {\n                    questionPos.add(bPos);\n                }\n            }\n            Collections.sort(questionPos);\n\n            int nQuestions = questionPos.size();\n            int[] questions = new int[nQuestions];\n            int bestDiff = 9999;\n            int bestX = -1, bestY = -1;\n            outer: while (true) {\n                for (int i = 0; i < nQuestions; i++) {\n                    digits[questionPos.get(i)] = questions[i];\n                }\n                int x = 0, y = 0, place = 1;\n                for (int i = 0; i < len; i++) {\n                    x += digits[i + len] * place;\n                    y += digits[i] * place;\n                    place *= 10;\n                }\n                if (Math.abs(x - y) < bestDiff) {\n                    bestDiff = Math.abs(x - y);\n                    bestX = x;\n                    bestY = y;\n                }\n                questions[0]++;\n                for (int i = 0; questions[i] == 10; i++) {\n                    if (i == nQuestions - 1) {\n                        break outer;\n                    }\n                    questions[i] = 0;\n                    questions[i+1]++;\n                }\n            }\n\n            String temp = \"%0\" + len + \"d\";\n            System.out.printf(\"Case #%d: \" + temp + \" \" + temp + \"\\n\", z + 1, bestX, bestY);\n        }\n        scan.close();\n    }\n}"}
{"idx":"1292","func":"class MainB {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        sc.nextLine();\n        for (int t = 1; t <= T; t++) {\n            String a = sc.next();\n            String b = sc.next();\n            String ab = a+b;\n            int min = 9999,fa=9999,fb=9999;\n            String sfa=\"\",sfb=\"\";\n\n            int cab = ab.length() - ab.replace(\"?\", \"\").length();\n            for(int i=0;i<Math.pow(10, cab);i++) {\n                String s=Integer.toString(i);\n                int asasas = cab-s.length();\n                for(int j=0;j<asasas;j++) {\n                    s=\"0\" + s;\n                }\n                char ch[] = ab.toCharArray();\n                for(int j=0,k=0;j<ch.length;j++) {\n                    if(ch[j]=='?'){\n                        ch[j]=s.charAt(k++);\n                    }\n                }\n\n                String f=new String(ch);\n                int av = Integer.parseInt(f.substring(0, a.length()));\n                int bv = Integer.parseInt(f.substring(a.length()));\n                int diff = Math.abs(av-bv);\n                if(diff<min) {\n                    min=diff;\n                    fa=av;\n                    fb=bv;\n                    sfa = f.substring(0, a.length());\n                    sfb = f.substring(a.length());\n                } else if(diff==min) {\n                    if(av<fa){\n                        fa=av;\n                        fb=bv;\n                        sfa = f.substring(0, a.length());\n                        sfb = f.substring(a.length());\n                    } else if(av==fa && bv<fb) {\n                        fb=bv;\n                        sfb = f.substring(a.length());\n                    }\n                }\n            }\n\n            System.out.println(\"Case #\" + t + \": \" + sfa + \" \" + sfb);\n        }\n    }\n}"}
{"idx":"1293","func":"class B_BF {\n    private char[] C, J;\n\n    \/\/ parse\n    public B_BF(final Scanner sc) {\n        C = sc.next().toCharArray();\n        J = sc.next().toCharArray();\n    }\n\n    \/\/ Template\n    public static void main(String... args) throws Exception {\n        try (final Scanner sc = new Scanner(System.in)) {\n            final int T = sc.nextInt();\n            final Object[] solvers = new Object[T];\n            for (int i = 0; i < T; i++)\n                solvers[i] = new B_BF(sc);\n            final Iterator<String> results = Arrays.stream(solvers)\n                    .map(Object::toString)\n                    .iterator();\n            for (int i = 1; i <= T; i++)\n                System.out.printf(\"Case #%s: %s\\n\", i, results.next());\n        }\n    }\n}"}
{"idx":"1294","func":"class CodeJam2_B {\n\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"C:\/Users\/Madi\/codejam\/B-small-practice.in\"));\n                BufferedWriter bw = new BufferedWriter(new FileWriter(\"C:\/Users\/Madi\/codejam\/B-small-practice.out\"))) {\n\n            int t = Integer.parseInt(br.readLine());\n\n            for (int i = 0; i < t; i++) {\n                String[] s = br.readLine().split(\" \");\n                String s1 = s[0];\n                String s2 = s[1];\n                int n = s1.length();\n                int x = (int) Math.pow(10, n - 1);\n                int y = (int) Math.pow(10, n);\n                \n                String a;\n                String b;\n                \n                int min = Integer.MAX_VALUE;\n                int minSum = Integer.MAX_VALUE;\n                int minb = Integer.MAX_VALUE;\n                int mina = Integer.MAX_VALUE;\n                \n                for (int i1 = 0; i1 < y; i1++) {\n                    for (int j = 0; j < y; j++) {\n                        a = String.valueOf(i1);\n                        while (a.length() < n) {\n                            a = \"0\" + a;\n                        }\n                        b = String.valueOf(j);\n                        while (b.length() < n) {\n                            b = \"0\" + b;\n                        }\n                        boolean eq = true;\n                        for (int k = 0; k < n; k++) {\n                            if (s1.charAt(k) != '?' && s1.charAt(k) != a.charAt(k)) {\n                                eq = false;\n                                break;\n                            }\n                        }\n                \n                        if (eq) {\n                            for (int k = 0; k < n; k++) {\n                                if (s2.charAt(k) != '?' && s2.charAt(k) != b.charAt(k)) {\n                                    eq = false;\n                                    break;\n                                }\n                            }\n                        }\n                \n                        if (eq) {\n                            if (min > Math.abs(i1 - j)) {\n                                min = Math.abs(i1 - j);\n                                minSum = i1 + j;\n                                mina = i1;\n                                minb = j;\n                            } else if (min == Math.abs(i1 - j)) {\n                                if (minSum > i1 + j) {\n                                    minSum = i1 + j;\n                                    mina = i1;\n                                    minb = j;\n                                } else if (minSum == i1 + j) {\n                                    if (minb > j) {\n                                        minb = j;\n                                        mina = i1;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                a = String.valueOf(mina);\n                b = String.valueOf(minb);\n                while (a.length() < n) {\n                    a = \"0\" + a;\n                }\n                \n                while (b.length() < n) {\n                    b = \"0\" + b;\n                }\n                \n                bw.write(\"Case #\" + (i + 1) + \": \");\n                bw.write(a + \" \" + b);\n                bw.write(\"\\n\");\n                bw.flush();\n            }\n\n        }\n\n    }\n}"}
{"idx":"1295","func":"class B {\n    public static void main(String args[]) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"B-large.in\"))) {\n            \n            int T = Integer.parseInt(reader.readLine());\n            String s;\n            for (int t = 1; t <= T; t++) {\n                s = reader.readLine();\n                \/\/System.out.println(s);\n                String a = s.split(\" \")[0];\n                String b = s.split(\" \")[1];\n                String a2 = a;\n                String b2 = b;\n                \n                if (a.equals(b)) {\n                    a = a.replace('?', '0');\n                    b = a;\n                    System.out.println(\"Case #\"+t+\": \"+a+\" \"+b);\n                } else {\n                    ArrayList<String> as = new ArrayList<String>();\n                    ArrayList<String> bs = new ArrayList<String>();\n                    \/\/as.add(a);\n                    \/\/bs.add(b);\n                    int po = 0;\n                    while (a.indexOf(\"?\") != -1 || b.indexOf(\"?\") != -1) {\n                        if (a.charAt(po) == '?' && b.charAt(po) == '?') {\n                            as.add(a.replaceFirst(\"\\\\?\", \"1\").replaceAll(\"\\\\?\", \"0\"));\n                            bs.add(b.replaceFirst(\"\\\\?\", \"0\").replaceAll(\"\\\\?\", \"9\"));\n                            \n                            bs.add(b.replaceFirst(\"\\\\?\", \"1\").replaceAll(\"\\\\?\", \"0\"));\n                            as.add(a.replaceFirst(\"\\\\?\", \"0\").replaceAll(\"\\\\?\", \"9\"));\n                            \n                            a = a.replaceFirst(\"\\\\?\", \"0\");\n                            b = b.replaceFirst(\"\\\\?\", \"0\");\n                        } else if (a.charAt(po) == '?') {\n                            StringBuilder sb = new StringBuilder();\n                            sb.append(b.charAt(po));\n                            int bv = Integer.parseInt(sb.toString());\n                            \n                            if (bv < 9) {\n                            as.add(a.replaceFirst(\"\\\\?\", \"\"+(bv+1)).replaceAll(\"\\\\?\", \"0\"));\n                            bs.add(b.replaceAll(\"\\\\?\", \"9\"));\n                            }\n                            if (bv > 0) {\n                            bs.add(b.replaceAll(\"\\\\?\", \"0\"));\n                            as.add(a.replaceFirst(\"\\\\?\", \"\"+(bv-1)).replaceAll(\"\\\\?\", \"9\"));\n                            }\n                            a = a.replaceFirst(\"\\\\?\", \"\"+bv);\n                        } else if (b.charAt(po) == '?') {\n                            StringBuilder sb = new StringBuilder();\n                            sb.append(a.charAt(po));\n                            int av = Integer.parseInt(sb.toString());\n                            \n                            if (av < 9) {\n                            bs.add(b.replaceFirst(\"\\\\?\", \"\"+(av+1)).replaceAll(\"\\\\?\", \"0\"));\n                            as.add(a.replaceAll(\"\\\\?\", \"9\"));\n                            }\n                            if (av > 0) {\n                            as.add(a.replaceAll(\"\\\\?\", \"0\"));\n                            bs.add(b.replaceFirst(\"\\\\?\", \"\"+(av-1)).replaceAll(\"\\\\?\", \"9\"));\n                            }\n                            \n                            b = b.replaceFirst(\"\\\\?\", \"\"+av);\n                        } else {\n                            if (a.charAt(po) > b.charAt(po)) {\n                                as.add(a.replaceAll(\"\\\\?\", \"0\"));\n                                bs.add(b.replaceAll(\"\\\\?\", \"9\"));\n                            }\n                            if (a.charAt(po) < b.charAt(po)) {\n                                bs.add(b.replaceAll(\"\\\\?\", \"0\"));\n                                as.add(a.replaceAll(\"\\\\?\", \"9\"));\n                            }\n                        }\n                        po++;\n                    }\n                    as.add(a);\n                    bs.add(b);\n                    int mini = 0;\n                    long min2 = Long.MAX_VALUE;\n                    long minav = Long.MAX_VALUE;\n                    long minbv = Long.MAX_VALUE;\n                    for (int i = 0; i < as.size(); i++) {\n                        long av = Long.parseLong(as.get(i));\n                        long bv = Long.parseLong(bs.get(i));\n                        long diff = Math.abs(\n                                Long.parseLong(as.get(i)) -\n                                Long.parseLong(bs.get(i))\n                                );\n                        if (diff < min2) {\n                            min2 = diff;\n                            mini = i;\n                            minav = av;\n                            minbv = bv;\n                        } else if (diff == min2) {\n                            if (av < minav) {\n                                min2 = diff;\n                                mini = i;\n                                minav = av;\n                                minbv = bv;\n                            } else if (av == minav) {\n                                if (bv < minbv) {\n                                    min2 = diff;\n                                    mini = i;\n                                    minav = av;\n                                    minbv = bv;\n                                }\n                            }\n                        }\n                    }\n                    System.out.println(\"Case #\"+t+\": \"+as.get(mini)+\" \"+bs.get(mini));\n                    \n          \/*          \n                    String temp = a2 + b2;\n                    ArrayList<String> p = new ArrayList<String>();\n                    p.add(temp);\n                    while (p.get(0).indexOf(\"?\") != -1) {\n                        int size = p.size();\n                        ArrayList<String> np = new ArrayList<String>();\n                        for (int i = 0; i < p.size(); i++) {\n                            String tempp = p.get(i);\n                            for (int j = 0; j < 10; j++) {\n                                np.add(tempp.replaceFirst(\"\\\\?\", \"\"+j));\n                            }\n                        }\n                        p = np;\n                    }\n                    String mins = \"\";\n                    int min = Integer.MAX_VALUE;\n                    for (String pos : p) {\n                        int diff = Math.abs(\n                                    Integer.parseInt(pos.substring(0, a.length())) -\n                                    Integer.parseInt(pos.substring(a.length(), a.length()*2))\n                                );\n                        if (diff < min) {\n                            min = diff;\n                            mins = pos;\n                        }\n                    }\n                    System.out.println(\"Case #\"+t+\": \"+mins.substring(0, a.length())+\" \"+mins.substring(a.length(), a.length()*2));\n*\/\n                }\n                \/\/System.out.println(\"here\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace(System.err);\n            \/\/System.out.println(e.toString());\n        }\n        \n    }\n}"}
{"idx":"1296","func":"class Main {\n    private static final String FILENAME = \"b\";\n\n    public static void main(String[] args) throws IOException {\n        Main r = new Main();\n        r.in = new BufferedReader(new FileReader(Main.FILENAME + \".in\"));\n        r.out = new PrintWriter(Main.FILENAME + \".out\");\n        int T = Integer.parseInt(r.nextToken());\n                for (int t = 0; t < T; t++) {\n                    \n                    int alc = 1000000;\n                    int arc = 10000;\n                    \n                    char[] s = r.nextToken().toCharArray();\n                    char[] g = r.nextToken().toCharArray();\n                    r.len = s.length;\n                    \n                    for (int i = 0; i < 1000; i++) {\n                        char[] x = String.format(\"%0\" + r.len + \"d\", i).toCharArray();\n        \/\/                System.err.println(x);\n                        if (x.length > r.len)\n                            break;\n                        boolean o = true;\n                        for (int k = 0; k < r.len; k++) {\n                            if (s[k] != '?' && s[k] != x[k])\n                                o = false;\n                        }\n                        if (!o)\n                            continue;\n                        for (int j = 0; j < 1000; j++) {\n                            char[] y = String.format(\"%0\" + r.len + \"d\", j).toCharArray();\n                            if (y.length > r.len)\n                                break;\n                            o = true;\n                            for (int k = 0; k < r.len; k++) {\n                                if (g[k] != '?' && g[k] != y[k])\n                                    o = false;\n                            }\n                            if (!o)\n                                continue;\n        \/\/                    System.err.println(x);\n        \/\/                    System.err.println(s);\n        \/\/                    System.err.println(y);\n        \/\/                    System.err.println(g);\n                            if (abs(i - j) < abs(alc - arc) ||\n                                    (abs(i - j) == abs(alc - arc) && \n                                    (i < alc || (i == alc && j < arc)))) {\n                                alc = i;\n                                arc = j;\n                            }\n                        }\n                    }\n                    \n                    \n                    r.out.print(\"Case #\" + (t + 1) + \": \" + \n                            String.format(\"%0\" + r.len + \"d %0\" + r.len + \"d\", alc, arc));\n                    \n                    r.out.println();\n                }\n        r.in.close();\n        r.out.close();        \n    }\n\n    BufferedReader in;\n    PrintWriter out;\n    StringTokenizer st = new StringTokenizer(\"\");\n\n    long alc = 20000;\n    long arc = 10000;\n    int len = 0;\n    \n    String nextToken() throws IOException {\n        while (!st.hasMoreTokens())\n            st = new StringTokenizer(in.readLine());\n        return st.nextToken();\n    }\n}"}
{"idx":"1297","func":"class B\n{\n\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(System.in);\n        \/\/PrintWriter out = new PrintWriter(System.out);\n        PrintWriter out = new PrintWriter(new File(\"B.out\"));\n        \n        for (int t = Integer.valueOf(in.nextLine()), cs = 1; t > 0; t--, cs++) {\n            out.print(\"Case #\" + cs + \": \");\n            \n            String[] s = in.nextLine().split(\" +\");\n            char[] a = s[0].toCharArray();\n            char[] b = s[1].toCharArray();\n            int n = a.length;\n            \n            int p = -1;\n            for (int i = 0; i < n && p == -1; i++) {\n                if (a[i] != '?' && b[i] != '?' && a[i] != b[i]) {\n                    p = i;\n                }\n            }\n            \n            if (p == -1) {\n                for (int i = 0; i < n; i++) {\n                    if (a[i] == '?' && b[i] == '?') {\n                        a[i] = b[i] = '0';\n                    } else if (a[i] == '?') {\n                        a[i] = b[i];\n                    } else if (b[i] == '?') {\n                        b[i] = a[i];\n                    }\n                }\n                out.println(String.valueOf(a) + \" \" + String.valueOf(b));\n                continue;\n            }\n            \n            int q = -1;\n            for (int i = p-1; i >= 0 && q == -1; i--) {\n                if (a[i] == '?' || b[i] == '?') {\n                    q = i;\n                }\n            }\n            \n            if (q == -1) {\n                boolean gr = a[p] > b[p];\n                for (int i = 0; i < n; i++) {\n                    if (a[i] == '?') {\n                        a[i] = gr ? '0' : '9';\n                    }\n                    if (b[i] == '?') {\n                        b[i] = gr ? '9' : '0';\n                    }\n                }\n                out.println(String.valueOf(a) + \" \" + String.valueOf(b));\n                continue;\n            }\n            \n            boolean gr = a[p] > b[p];\n            \n            char[] c1 = Arrays.copyOf(a, n);\n            char[] d1 = Arrays.copyOf(b, n);\n            for (int i1 = 0; i1 < p; i1++) {\n                if (c1[i1] == '?' && d1[i1] == '?') {\n                    c1[i1] = d1[i1] = '0';\n                } else if (c1[i1] == '?') {\n                    c1[i1] = d1[i1];\n                } else if (d1[i1] == '?') {\n                    d1[i1] = c1[i1];\n                }\n            }\n            for (int i2 = p+1; i2 < c1.length; i2++) {\n                if (c1[i2] == '?') {\n                    c1[i2] = gr ? '0' : '9';\n                }\n                if (d1[i2] == '?') {\n                    d1[i2] = gr ? '9' : '0';\n                }\n            }\n            long ans1 = Math.abs(Long.valueOf(String.valueOf(c1)) - Long.valueOf(String.valueOf(d1)));\n            \n            for (int i = q; i >= 0; i--) {\n                if (a[i] != '?' && b[i] != '?') {\n                    continue;\n                }\n                char[] c2 = Arrays.copyOf(a, n);\n                char[] d2 = Arrays.copyOf(b, n);\n                if (gr) {\n                    if (c2[i] == '9' || d2[i] == '0') {\n                        continue;\n                    }\n                    if (c2[i] == '?' && d2[i] == '?') {\n                        c2[i] = '0';\n                        d2[i] = '1';\n                    } else if (c2[i] == '?') {\n                        c2[i] = (char)(d2[i] - 1);\n                    } else if (d2[i] == '?') {\n                        d2[i] = (char)(c2[i] + 1);\n                    }\n                } else {\n                    if (c2[i] == '0' || d2[i] == '9') {\n                        continue;\n                    }\n                    if (c2[i] == '?' && d2[i] == '?') {\n                        c2[i] = '1';\n                        d2[i] = '0';\n                    } else if (c2[i] == '?') {\n                        c2[i] = (char)(d2[i] + 1);\n                    } else if (d2[i] == '?') {\n                        d2[i] = (char)(c2[i] - 1);\n                    }\n                }\n                boolean gr1 = !gr;\n                for (int i3 = 0; i3 < i; i3++) {\n                    if (c2[i3] == '?' && d2[i3] == '?') {\n                        c2[i3] = d2[i3] = '0';\n                    } else if (c2[i3] == '?') {\n                        c2[i3] = d2[i3];\n                    } else if (d2[i3] == '?') {\n                        d2[i3] = c2[i3];\n                    }\n                }\n                for (int i4 = i+1; i4 < c2.length; i4++) {\n                    if (c2[i4] == '?') {\n                        c2[i4] = gr1 ? '0' : '9';\n                    }\n                    if (d2[i4] == '?') {\n                        d2[i4] = gr1 ? '9' : '0';\n                    }\n                }\n                long ans2 = Math.abs(Long.valueOf(String.valueOf(c2)) - Long.valueOf(String.valueOf(d2)));\n                if (ans2 < ans1) {\n                    c1 = c2;\n                    d1 = d2;\n                    ans1 = ans2;\n                } else if (ans2 == ans1) {\n                    if (Long.valueOf(String.valueOf(c2)) < Long.valueOf(String.valueOf(c1))) {\n                        c1 = c2;\n                        d1 = d2;\n                        ans1 = ans2;\n                    } else if (Long.valueOf(String.valueOf(c2)) == Long.valueOf(String.valueOf(c1))) {\n                        if (Long.valueOf(String.valueOf(d2)) < Long.valueOf(String.valueOf(d1))) {\n                            c1 = c2;\n                            d1 = d2;\n                            ans1 = ans2;\n                        }\n                    }\n                }\n            }\n            \n            out.println(String.valueOf(c1) + \" \" + String.valueOf(d1));\n        }\n\n        out.flush();\n    }\n}"}
{"idx":"1298","func":"class Solution {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        FileInputStream fileInputStream = new FileInputStream(\"\/Users\/ratmir\/Downloads\/B-small-attempt0 (2).in\");\n        \/\/Scanner sc = new Scanner(System.in);\n        Scanner sc = new Scanner(fileInputStream);\n        FileOutputStream outputStream = new FileOutputStream(\"\/Users\/ratmir\/Documents\/code\/hackerrank\/algs\/src\/codejam\/y2016\/r2\/z2\/z2.txt\");\n        PrintWriter printWriter = new PrintWriter(outputStream);\n\/\/        for (int i=0;i<100000;i++) {\n\/\/            System.out.println(getM(i+1));\n\/\/        }\n        int tn = sc.nextInt();\n        sc.nextLine();\n        for (int ti = 1; ti <= tn; ti++) {\n            String s = sc.nextLine();\n            String[] strings = s.split(\" \");\n            int mx = (int) Math.pow(10, strings[0].length());\n            int v1 = -1;\n            int v2 = -1;\n            String x1 = \"\";\n            String x2 = \"\";\n            for (int n1=0;n1<mx;n1++) {\n                for (int n2=0; n2<mx;n2++) {\n                    String s1 = String.valueOf(mx+n1);\n                    String s2 = String.valueOf(mx+n2);\n                    boolean flag = true;\n                    for (int i=0;i<strings[0].length();i++) {\n                        if ((strings[0].charAt(i)=='?') || (strings[0].charAt(i)==s1.charAt(i+1))) {\n\n                        } else {\n                            flag = false;\n                        }\n                    }\n                    for (int i=0;i<strings[1].length();i++) {\n                        if ((strings[1].charAt(i)=='?') || (strings[1].charAt(i)==s2.charAt(i+1))) {\n\n                        } else {\n                            flag = false;\n                        }\n                    }\n                    if (flag) {\n                        int dv = Math.abs(v1-v2);\n                        int dn = Math.abs(n1-n2);\n                        boolean doit = v1==-1;\n                        if (!doit && (dn<dv)) {\n                            doit = true;\n                        }\n                        if (!doit && (dn==dv) && (n1<v1)) {\n                            doit = true;\n                        }\n                        if (!doit && (dn==dv) && (n1==v1) && (n2<v2)) {\n                            doit = true;\n                        }\n                        if (doit) {\n                            v1 = n1;\n                            v2 = n2;\n                            x1 = s1.substring(1);\n                            x2 = s2.substring(1);\n                        }\n                    }\n                }\n            }\n            String res = \"Case #\" + ti + \": \" + x1+\" \"+x2;\n            printWriter.write(res + \"\\n\");\n            System.out.println(res);\n        }\n        printWriter.close();\n    }\n\n}"}
{"idx":"1299","func":"class CloseMatchStupid {\n    public static void main(String args[]) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n        int test = Integer.parseInt(in.readLine());\n        for (int t=1;t<=test;t++) {\n            StringTokenizer st = new StringTokenizer(in.readLine());\n            String first = st.nextToken();\n            String second = st.nextToken();\n\n            int diff = Integer.MAX_VALUE;\n\n            String ans1 = \"\";\n            String ans2 = \"\";\n\n            for (int i = 0; i < 1000; i++) {\n\n                String a1 = \"\"+i;\n                while (a1.length() < first.length()) {\n                    a1 = \"0\" + a1;\n                }\n\n                boolean correct = a1.length() == first.length();\n                if (correct)\n                for (int k = 0; k < first.length();k++) {\n                    if (first.charAt(k) != '?' && first.charAt(k)!=a1.charAt(k)) {\n                        correct = false;\n                        break;\n                    }\n                }\n                if (correct)\n                for (int j = 0; j < 1000; j ++) {\n\n                    if (Math.abs(i - j) < diff || (Math.abs(i - j) == diff && a1.compareTo(ans1)<0)) {\n\n                        String b1 = \"\" + j;\n                        while (b1.length() < first.length()) {\n                            b1 = \"0\" + b1;\n                        }\n\n\n                        correct = b1.length() == first.length();\n\n                        if (correct)\n                        for (int k = 0; k < first.length();k++) {\n                            if (second.charAt(k) != '?' && second.charAt(k)!=b1.charAt(k)) {\n                                correct = false;\n                                break;\n                            }\n                        }\n                        if (correct) {\n                            diff = Math.abs(i - j);\n                            ans1 = a1;\n                            ans2 = b1;\n                        }\n\n                    }\n\n\n\n                }\n            }\n            System.out.println(\"Case #\"+t+\": \"+ans1+\" \"+ans2);\n        }\n\n        in.close();\n    }\n}"}
{"idx":"1300","func":"class ProblemBLarge {\n\n    public static void main(String[] args) throws Exception {\n\n        BufferedReader br = new BufferedReader(\n                new InputStreamReader(new FileInputStream(\"B-large.in\")));\n        String line = br.readLine();\n        int T = Integer.parseInt(line);\n        PrintWriter pw = new PrintWriter(\"B-large.out\");\n\n        for (int test = 0; test < T; test++) {\n            line = br.readLine();\n            char[] chars = line.toCharArray();\n            int count = 0;\n            for (int i = 1; i < chars.length; i++) {\n                if (chars[i] != chars[i-1]) {\n                    count++;\n                }\n            }\n            if (chars[chars.length - 1] == '-') {\n                count++;\n            }\n            pw.println(\"Case #\" + (test + 1) + \": \" + count);\n        }\n        pw.close();\n        br.close();\n    }\n}"}
{"idx":"1301","func":"class probB{\n    public static void main(String[] args) throws NumberFormatException, IOException{\n        BufferedReader in = new BufferedReader( new FileReader(\"B-small-attempt1.in\"));\n        int numinput = Integer.parseInt(in.readLine());\n        File file = new File(\"output.txt\");\n        BufferedWriter bw = new BufferedWriter(new FileWriter(file));\n        for( int currinput = 0; currinput < numinput; currinput++){\n            System.out.print(\"Case #\" + (1 + currinput) + \":\");\n            bw.write(\"Case #\" + (1 + currinput) + \":\");\n            String[] input = in.readLine().split(\" \");\n            String coders = input[0];\n            String jammers = input[1];\n            int rannumc = 0;\n            int rannumj = 0;\n\n            ArrayList<Integer> codersindex = new ArrayList<>();\n            ArrayList<Integer> jammersindex = new ArrayList<>();\n\n            for( int i =coders.length() -1; i !=-1; i--){\n                if(coders.charAt(i) == '?'){\n                    rannumc++;\n                    codersindex.add(i);\n                    coders = coders.substring(0,i) +'0'+coders.substring(i+1);\n                }\n\n            }\n            for( int i = jammers.length() -1; i!= -1;i--){\n                if(jammers.charAt(i) == '?'){\n                    rannumj++;\n                    jammersindex.add(i);\n                    jammers = jammers.substring(0,i) + '0' + jammers.substring(i+1);\n                }\n            }\n            int index  =0;\n            int minjammers = Integer.parseInt(jammers);\n            int mincoders = Integer.parseInt(coders);\n            String jammerstr = jammers;\n            String codersstr = coders;\n            int min = Integer.parseInt(coders) - Integer.parseInt(jammers);\n            if(min <0){\n                min= 0-min;\n            }\n            while(index <rannumc + rannumj){\n                boolean overflow = false;\n                int addindex = 0;\n                while (overflow == false) {\n                    overflow = true;\n                    if(addindex>  rannumc+rannumj){\n                        break;\n                    }\n                    if(addindex < rannumj) {\n                        if (jammers.charAt(jammersindex.get(addindex)) =='9') {\n                            overflow = false;\n                            jammers = jammers.substring(0, jammersindex.get(addindex)) +\n                                    '0' +\n                                    jammers.substring(jammersindex.get(addindex) + 1);\n                            addindex++;\n                        } else{\n                            jammers = jammers.substring(0, jammersindex.get(addindex) ) +\n                                    (char)((int)jammers.charAt(jammersindex.get(addindex)) + 1) +\n                                    jammers.substring(jammersindex.get(addindex) + 1);\n                        }\n                    }\n                    else{\n                        if(addindex - rannumj == codersindex.size()){\n                            continue;\n                        }\n                        if(coders.charAt(codersindex.get(addindex - rannumj )) =='9'){\n                            overflow = false;\n                            coders = coders.substring(0, codersindex.get(addindex - rannumj)) +\n                                    '0' +\n                                    coders.substring(codersindex.get(addindex-rannumj) +1);\n                            addindex++;\n                        }\n                        else{\n                            coders = coders.substring(0, codersindex.get(addindex- rannumj)) +\n                                    (char)((int)coders.charAt(codersindex.get(addindex-rannumj)) + 1)+\n                                    coders.substring(codersindex.get(addindex - rannumj) + 1);\n                        }\n                    }\n                    index = addindex;\n                }\n                int currjammer = Integer.parseInt(jammers);\n                int currcoders = Integer.parseInt(coders);\n                int currnum= currjammer - currcoders;\n                if(currnum <0)\n                    currnum = 0-currnum;\n                if(currnum <min){\n                    min = currnum;\n                    minjammers = currjammer;\n                    mincoders = currcoders;\n                    jammerstr= jammers;\n                    codersstr = coders;\n                }\n            }\n            String output = \" \" + codersstr + \" \" + jammerstr+ \"\\n\";\n            System.out.print(output);\n            bw.write(output);\n\n\n        }\n        bw.close();\n    }\n}"}
{"idx":"1302","func":"class CloseMatch {\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    for(int i = 1; i <= n ; i++) {\n      String str1 = scanner.next();\n      String str2 = scanner.next();\n      int qm = 0;\n    for(int i1 = 0; i1 < str1.length(); i1++) {\n      if(str1.charAt(i1) == '?') {\n        qm++;\n      }\n      if(str2.charAt(i1) == '?') {\n        qm++;\n      }\n    }\n    int num1Final = 0, num2Final = 0, difference = Integer.MAX_VALUE;\n    for(int i2 = 0; i2 < Math.pow(10, qm); i2++) {\n      int arr[] = new int[qm];\n      for(int j = 0; j < qm;j++) {\n        arr[j] = (i2\/(int)Math.pow(10,j))%10;\n      }\n      int pointer = 0;\n      int num1 = 0, num2 = 0;\n      for(int j = 0;j < str1.length();j++) {\n        if(str1.charAt(j) == '?') {\n          num1 = num1 * 10 + arr[pointer++];\n        } else {\n          num1 = num1 * 10 + (str1.charAt(j) - '0');\n        }\n      }\n      for(int j = 0;j < str2.length();j++) {\n        if(str2.charAt(j) == '?') {\n          num2 = num2 * 10 + arr[pointer++];\n        } else {\n          num2 = num2 * 10 + (str2.charAt(j) - '0');\n        }\n      }\n      if(Math.abs(num1 - num2) < difference) {\n        num1Final = num1;\n        num2Final = num2;\n        difference = Math.abs(num1 - num2);\n      } else if (Math.abs(num1 - num2) == difference) {\n        if(num1 < num1Final) {\n          num1Final = num1;\n          num2Final = num2;\n          difference = Math.abs(num1 - num2);\n        } else if (num1 == num1Final) {\n          if(num2 < num2Final) {\n            num1Final = num1;\n            num2Final = num2;\n            difference = Math.abs(num1 - num2);\n          }\n        }\n      }\n    }\n    System.out.println(\"Case #\" + i + \": \" + String.format(\"%0\" + str1.length() +\"d\", num1Final) + \" \" + String.format(\"%0\" + str2.length() +\"d\", num2Final));\n    }\n\n  }\n}"}
{"idx":"1303","func":"class CloseMatch {\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new File(\"B-small-attempt0.in\"));\n        PrintWriter pw = new PrintWriter(new File(\"output.txt\"));\n        int caseCount = Integer.valueOf(sc.nextLine());\n        for (int i = 0; i < caseCount; i++) {\n            String line = sc.nextLine();\n            String[] pars = line.split(\" \");\n            String C = pars[0];\n            int bestDelta = Integer.MAX_VALUE;\n            String bestCoders = null;\n            String bestJammers = null;\n            for(int jam = 0; jam < 1000; jam++) {\n                for(int coders = 0; coders < 1000; coders++) {\n                    String s = Integer.toString(coders);\n                    while (s.length() < C.length()) {\n                        s = \"0\" + s;\n                    }\n                    String CODERS = s;\n                    String s1 = Integer.toString(jam);\n                    while (s1.length() < C.length()) {\n                        s1 = \"0\" + s1;\n                    }\n                    String JAMMERS = s1;\n                    if(CODERS.matches(C.replace(\"?\",\".\")) && JAMMERS.matches(pars[1].replace(\"?\", \".\"))) {\n                        int delta = Math.abs(jam - coders);\n                        if(delta < bestDelta) {\n                            bestDelta = delta;\n                            bestCoders = CODERS;\n                            bestJammers = JAMMERS;\n                        }\n                    }\n            \n                }\n            }\n            List<String> list = new ArrayList<>();\n            list.add(bestCoders);\n            list.add(bestJammers);\n            List<String> solution = list;\n            System.out.println(pars[0] + \":\" + pars[1]);\n            pw.printf(\"Case #%d: %s %s\\n\", i + 1, solution.get(0), solution.get(1));\n        }\n        pw.close();\n    }\n}"}
{"idx":"1304","func":"class B {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long[] ten = new long[19];\n        ten[0] = 1; ten[1] = 10;\n        for (int i = 2; i <= 18; i++) {\n            ten[i] = ten[i-1]*10;\n        }\n        int T = in.nextInt();\n        for (int t=1; t<=T; t++) {\n            String input = in.next();\n            String C = \"\";\n            for (int i = 0; i < input.length(); i++) {\n                C += input.charAt(input.length()-i-1);\n            }\n            input = in.next();\n            String J = \"\";\n            for (int i = 0; i < input.length(); i++) {\n                J += input.charAt(input.length()-i-1);\n            }\n            \/\/ 0 : C small , 1 : equal , 2 : C large\n            long[][] f = new long[C.length()][3];\n            String[][] ans_c = new String[C.length()][3];\n            String[][] ans_j = new String[C.length()][3];\n            for (int i = 0; i < C.length(); i++) {\n                boolean[] a = new boolean[3];\n                for (int c = 0; c <= 9; c++) {\n                    if (C.charAt(i) != '?' && C.charAt(i) != ('0'+c)) {\n                        continue;\n                    }\n                    for (int j = 0; j <= 9; j++) {\n                        if (J.charAt(i) != '?' && J.charAt(i) != ('0'+j)) {\n                            continue;\n                        }\n                        long small = 0, equal = 0, large = 0;\n                        String ans_small_c = \"\", ans_equal_c = \"\", ans_large_c = \"\";\n                        String ans_small_j = \"\", ans_equal_j = \"\", ans_large_j = \"\";\n                        long temp = (c-j)*ten[i];\n                        if (c > j) {\n                            small = temp + ((i>0)? f[i-1][0] : 0);\n                            ans_small_c = (i>0)? ans_c[i-1][0] : \"\"; ans_small_j = (i>0)? ans_j[i-1][0] : \"\";\n                            equal = temp + ((i>0)? f[i-1][0] : 0);\n                            ans_equal_c = (i>0)? ans_c[i-1][0] : \"\"; ans_equal_j = (i>0)? ans_j[i-1][0] : \"\";\n                            large = temp + ((i>0)? f[i-1][2] : 0);\n                            ans_large_c = (i>0)? ans_c[i-1][2] : \"\"; ans_large_j = (i>0)? ans_j[i-1][2] : \"\";\n                        }\n                        if (c == j) {\n                            small = (i>0)? f[i-1][0] : 0;\n                            ans_small_c = (i>0)? ans_c[i-1][0] : \"\"; ans_small_j = (i>0)? ans_j[i-1][0] : \"\";\n                            equal = (i>0)? f[i-1][1] : 0;\n                            ans_equal_c = (i>0)? ans_c[i-1][1] : \"\"; ans_equal_j = (i>0)? ans_j[i-1][1] : \"\";\n                            large = (i>0)? f[i-1][2] : 0;\n                            ans_large_c = (i>0)? ans_c[i-1][2] : \"\"; ans_large_j = (i>0)? ans_j[i-1][2] : \"\";\n                        }\n                        if (c < j) {\n                            small = temp + ((i>0)? f[i-1][0] : 0);\n                            ans_small_c = (i>0)? ans_c[i-1][0] : \"\"; ans_small_j = (i>0)? ans_j[i-1][0] : \"\";\n                            equal = temp + ((i>0)? f[i-1][2] : 0);\n                            ans_equal_c = (i>0)? ans_c[i-1][2] : \"\"; ans_equal_j = (i>0)? ans_j[i-1][2] : \"\";\n                            large = temp + ((i>0)? f[i-1][2] : 0);\n                            ans_large_c = (i>0)? ans_c[i-1][2] : \"\"; ans_large_j = (i>0)? ans_j[i-1][2] : \"\";\n                        }\n                        if (!a[0] || small < f[i][0]) {\n                            f[i][0] = small; a[0] = true;\n                            ans_c[i][0] = (char) (c+'0') + ans_small_c;\n                            ans_j[i][0] = (char) (j+'0') + ans_small_j;\n                        }\n                        if (!a[1] || Math.abs(equal) < Math.abs(f[i][1])) {\n                            f[i][1] = equal; a[1] = true;\n                            ans_c[i][1] = (char) (c+'0') + ans_equal_c;\n                            ans_j[i][1] = (char) (j+'0') + ans_equal_j;\n                        }\n                        if (!a[2] || large > f[i][2]) {\n                            f[i][2] = large; a[2] = true;\n                            ans_c[i][2] = (char) (c+'0') + ans_large_c;\n                            ans_j[i][2] = (char) (j+'0') + ans_large_j;\n                        }\n                    }\n                }\n            }\n            System.out.format(\"Case #%d: %s %s\\n\", t, ans_c[C.length()-1][1], ans_j[C.length()-1][1]);\n        }\n    }\n}"}
{"idx":"1305","func":"class Solution {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        \n        Scanner scan = new Scanner(System.in);\n        int testNum = scan.nextInt();\n        for(int i=1;i<=testNum;i++){\n            String cScore = scan.next();\n            String jScore = scan.next();\n            int length = cScore.length();\n            \/*\n            boolean[] cIndicator = new boolean[length];\n            boolean[] jIndicator = new boolean[length];\n            for(int i=0;i<length;i++){\n                if(cScore.charAt(i) != '?'){\n                    cIndicator[i] = true;\n                }\n                else{\n                    cIndicator[i] = false;\n                }\n            }\n            *\/\n            int maxValue = 0;\n            for(int i1=0;i1<length;i1++){\n                maxValue = maxValue*10+9;\n            }\n            \n            int minDiff = Integer.MAX_VALUE;\n            String cTarget = \"\";\n            String jTarget = \"\";\n            \n            for(int cValue = 0; cValue<=maxValue;cValue++){\n                String cStr = String.valueOf(cValue);\n                if(cStr.length()<length){\n                    int cdiff = length - cStr.length();\n                    for(int j=0;j<cdiff;j++){\n                        cStr = \"0\" + cStr;\n                    }\n                }\n                boolean cmatch = true;\n                for(int i2=0;i2<length;i2++){\n                    if(cScore.charAt(i2) != '?' && cScore.charAt(i2) != cStr.charAt(i2)){\n                        cmatch = false;\n                        break;\n                    }\n                }\n                if(!cmatch){\n                    continue;\n                }\n                \/\/cValue is matched\n                \n                for(int jValue = 0; jValue<=maxValue;jValue++){\n                    String jStr = String.valueOf(jValue);\n                    if(jStr.length()<length){\n                        int jdiff = length - jStr.length();\n                        for(int j=0;j<jdiff;j++){\n                            jStr = \"0\" + jStr;\n                        }\n                    }\n                    boolean jmatch = true;\n                    for(int i3=0;i3<length;i3++){\n                        if(jScore.charAt(i3) != '?' && jScore.charAt(i3) != jStr.charAt(i3)){\n                            jmatch = false;\n                            break;\n                        }\n                    }\n                    if(!jmatch){\n                        continue;\n                    }\n                    \/\/jValue is matched\n                    \n                    int valueDiff = Math.abs(cValue - jValue);\n                    if(minDiff > valueDiff){\n                        minDiff = valueDiff;\n                        cTarget = cStr;\n                        jTarget = jStr;\n                    }\n                    \n                    \n                }\n                \n            }\n            \n            ArrayList<String> list1 = new ArrayList<String>();\n            list1.add(cTarget);\n            list1.add(jTarget);\n            ArrayList<String> list = list1;\n            System.out.printf(\"Case #%d: %s %s\\n\", i, list.get(0), list.get(1));\n        }\n        scan.close();\n    }\n\n}"}
{"idx":"1306","func":"class GCJ161BB {\n\n    static Scanner sc = new Scanner(System.in);\n\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/Generates output file, can be removed to get everything from default output\n        System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(\"C:\/\/Users\/s142589\/Desktop\/output.txt\")), true));\n\n        int runs = sc.nextInt();\n        for (int i = 0; i < runs; i++) {\n            GCJ161BB r = new GCJ161BB();\n            String A = GCJ161BB.sc.next();\n            String B = GCJ161BB.sc.next();\n            DecimalFormat format;\n            \n            switch (A.length()) {\n            case 1:\n                format = new DecimalFormat(\"#0\");\n                break;\n            case 2:\n                format = new DecimalFormat(\"#00\");\n                break;\n            default:\n                format = new DecimalFormat(\"#000\");\n                break;\n            }\n            \n            String bestA = A;\n            String bestB = B;\n            int bestDif = Integer.MAX_VALUE \/ 2;\n            for (int i1 = 0; i1 < Math.pow(10, A.length()); i1++) {\n                String thisA = format.format(i1);\n                boolean success = true;\n                for (int j = 0; j < A.length(); j++) {\n                    if (!((A.charAt(j) == '?' || (A.charAt(j) == thisA.charAt(j))))) {\n                        success = false;\n                    }\n                }\n                if (!success) {\n                    continue;\n                }\n                for (int j = 0; j < Math.pow(10, A.length()); j++) {\n                    String thisB = format.format(j);\n                    boolean success2 = true;\n                    for (int k = 0; k < A.length(); k++) {\n                        if (!(B.charAt(k) == '?' || (B.charAt(k) == thisB.charAt(k)))) {\n                            success2 = false;\n                        }\n                    }\n                    if (!success2) {\n                        continue;\n                    }\n                    int diff = Math.abs(Integer.valueOf(thisB)-Integer.valueOf(thisA));\n                    if(diff<bestDif) {\n                        bestA = thisA;\n                        bestB = thisB;\n                        bestDif = diff;\n                    }\n            \n                }\n            }\n            \n            String answer = \"Case #\" + (i + 1) + \": \" + bestA+\" \"+bestB;\n            System.out.println(answer);\n        }\n    }\n}"}
{"idx":"1307","func":"class CloseMatch {\n    public static void main(String[] args) {\n        try {\n            Scanner in = new Scanner(new BufferedReader(new FileReader(new File(\"B-large.in\")), 256 << 10));\n            BufferedWriter out = new BufferedWriter(new FileWriter(new File(\"output.txt\")), 256 << 10);\n\n            int testsNumber = in.nextInt();\n            for (int testId = 1; testId <= testsNumber; testId++) {\n                String s1 = in.next();\n                String s2 = in.next();\n                int n = s1.length();\n                String br1 = \"\", br2 = \"\";\n                long bestDiff = Long.MAX_VALUE;\n                long min1 = Long.MAX_VALUE;\n                long min2 = Long.MAX_VALUE;\n                out.append(\"Case #\" + testId + \": \");\n                for (int fd = -1; fd <= 1; fd++) \n                    for (int fdp = 0; fdp < n; fdp++) {\n                        String r1 = \"\", r2 = \"\";\n                        int d = 0;\n                        for (int i = 0; i < n; i++) {\n                            char ch1 = s1.charAt(i);\n                            char ch2 = s2.charAt(i);\n                            if (ch1 == '?') {\n                                if (ch2 == '?') {\n                                    if (d == 0) {\n                                        if (i == fdp) {\n                                            if (fd < 0) {\n                                                ch1 = '0';\n                                                ch2 = '1';\n                                            }\n                                            if (fd == 0) {\n                                                ch1 = '0';\n                                                ch2 = '0';\n                                            }\n                                            if (fd > 0) {\n                                                ch1 = '1';\n                                                ch2 = '0';\n                                            }\n                                            d = ch1-ch2;\n                                        }\n                                        else {\n                                            ch1 = '0';\n                                            ch2 = '0';\n                                        }\n                                    }\n                                    else if (d < 0) {\n                                        ch1 = '9';\n                                        ch2 = '0';\n                                    }\n                                    else if (d > 0) {\n                                        ch1 = '0';\n                                        ch2 = '9';\n                                    }\n                                }\n                                else {\n                                    if (d == 0) {\n                                        if (i == fdp) {\n                                            if (fd < 0) {\n                                                ch1 = (char) Math.max('0', ch2-1);\n                                            }\n                                            if (fd == 0) {\n                                                ch1 = ch2;                                                \n                                            }\n                                            if (fd > 0) {\n                                                ch1 = (char) Math.min('9', ch2+1);\n                                            }\n                                            d = ch1-ch2;\n                                        }\n                                        else {\n                                            ch1 = ch2;\n                                        }\n                                    }\n                                    else if (d < 0) {\n                                        ch1 = '9';\n                                    }\n                                    else if (d > 0) {\n                                        ch1 = '0';\n                                    }                            \n                                }\n                            }\n                            else {\n                                if (ch2 == '?') {\n                                    if (d == 0) {\n                                        if (i == fdp) {\n                                            if (fd < 0) {\n                                                ch2 = (char) Math.min('9', ch1+1);\n                                            }\n                                            if (fd == 0) {\n                                                ch2 = ch1;                                                \n                                            }\n                                            if (fd > 0) {\n                                                ch2 = (char) Math.max('0', ch1-1);\n                                            }\n                                            d = ch1-ch2;\n                                        }\n                                        else {\n                                            ch2 = ch1;\n                                        }\n                                    }\n                                    else if (d < 0) {\n                                        ch2 = '0';\n                                    }\n                                    else if (d > 0) {\n                                        ch2 = '9';\n                                    }\n                                }\n                                else {\n                                    if (d == 0) {\n                                        if (ch1 < ch2)\n                                            d = -1;\n                                        if (ch1 == ch2)\n                                            d = 0;\n                                        if (ch1 > ch2)\n                                            d = 1;\n                                    }\n                                }\n                            }\n                            r1 += ch1;\n                            r2 += ch2;\n                        }\n                    long v1 = Long.valueOf(r1);\n                    long v2 = Long.valueOf(r2);\n                    if (Math.abs(v1-v2) < bestDiff || (Math.abs(v1-v2) == bestDiff && v1 < min1)\n                            || (Math.abs(v1-v2) == bestDiff && v1 == min1 && v2 < min2)) {\n                        bestDiff = Math.abs(v1-v2);\n                        min1 = v1;\n                        min2 = v2;\n                        br1 = r1;\n                        br2 = r2;\n                    }\n                }\n                out.append(br1 + \" \" + br2);\n                out.append(\"\\n\");\n            }\n            in.close();\n            out.close();\n        }\n        catch (RuntimeException rte) {\n            throw rte;\n        }\n        catch (Exception e) {\n            System.err.println(\"Error:\" + e.getMessage());\n        }\n    }\n}"}
{"idx":"1308","func":"class B {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n\n        for (int t = 1; t <= T; ++t) {\n            String s1 = new StringBuilder(in.next()).reverse().toString();\n            String s2 = new StringBuilder(in.next()).reverse().toString();\n\n            String res1 = \"\";\n            String res2 = \"\";\n            int diff = 1000;\n            int minc = 1000;\n            int mino = 1000;\n\n            for (int a1 = 0; a1 < 10; ++a1) {\n                if (s1.length() == 3 && s1.charAt(2) != '?' && s1.charAt(2) != '0' + a1) continue;\n                for (int a2 = 0; a2 < 10; ++a2) {\n                    if (s1.length() >= 2 && s1.charAt(1) != '?' && s1.charAt(1) != '0' + a2) continue;\n                    for (int a3 = 0; a3 < 10; ++a3) {\n                        if (s1.charAt(0) != '?' && s1.charAt(0) != '0' + a3) continue;\n\n                        StringBuilder ss1 = new StringBuilder();\n                        ss1.append((char)('0' + a3));\n                        if (s1.length() >= 2) ss1.append((char)('0' + a2));\n                        if (s1.length() == 3) ss1.append((char)('0' + a1));\n                        ss1.reverse();\n\n\n                        for (int a4 = 0; a4 < 10; ++a4) {\n                            if (s2.length() == 3 && s2.charAt(2) != '?' && s2.charAt(2) != '0' + a4) continue;\n                            for (int a5 = 0; a5 < 10; ++a5) {\n                                if (s2.length() >= 2 && s2.charAt(1) != '?' && s2.charAt(1) != '0' + a5) continue;\n                                for (int a6 = 0; a6 < 10; ++a6) {\n                                    if (s2.charAt(0) != '?' && s2.charAt(0) != '0' + a6) continue;\n\n                                    StringBuilder ss2 = new StringBuilder();\n                                    ss2.append((char)('0' + a6));\n                                    if (s2.length() >= 2) ss2.append((char)('0' + a5));\n                                    if (s2.length() == 3) ss2.append((char)('0' + a4));\n                                    ss2.reverse();\n\n                                    int score1 = Integer.parseInt(ss1.toString());\n                                    int score2 = Integer.parseInt(ss2.toString());\n\n                                    int curdiff = Math.abs(score1 - score2);\n                                    if (curdiff < diff) {\n                                        res1 = ss1.toString();\n                                        res2 = ss2.toString();\n                                        diff = curdiff;\n                                        minc = score1;\n                                        mino = score2;\n                                    } else if (curdiff == diff) {\n                                        if (score1 < minc || (score1 == minc && score2 < mino)) {\n                                            res1 = ss1.toString();\n                                            res2 = ss2.toString();\n                                            diff = curdiff;\n                                            minc = score1;\n                                            mino = score2;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            System.out.println(\"Case #\" + t + \": \" + res1 + \" \" + res2);\n        }\n    }\n}"}
{"idx":"1309","func":"class Solution {\n\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        \n        Scanner scan = new Scanner(System.in);\n        int testNum = scan.nextInt();\n        for(int i=1;i<=testNum;i++){\n            int numParties = scan.nextInt();\n            int[] partyPeopleCount = new int[numParties];\n            for(int j=0;j<numParties;j++){\n                partyPeopleCount[j] = scan.nextInt();\n            }\n            char[] partyName = new char[numParties];\n            for(int i1=0;i1<numParties;i1++){\n                partyName[i1] = (char)('A'+i1);\n            }\n            \n            int numTotalPeople = 0;\n            for(int i2=0;i2<numParties;i2++){\n                numTotalPeople += partyPeopleCount[i2];\n            }\n            \n            String plan1 = \"\";\n            while(numTotalPeople>0){\n                int maxIndex1 = -1;\n                int maxValue1 = Integer.MIN_VALUE;\n                for(int i1=0;i1<numParties;i1++){\n                    if(partyPeopleCount[i1]>maxValue1){\n                        maxValue1 = partyPeopleCount[i1];\n                        maxIndex1 = i1;\n                    }\n                }\n                int maxIndex = maxIndex1;\n                int nextMaxIndex1 = -1;\n                int nextMaxValue1 = Integer.MIN_VALUE;\n                for(int i1=0;i1<numParties;i1++){\n                    if(i1 != maxIndex && partyPeopleCount[i1]>nextMaxValue1){\n                        nextMaxValue1 = partyPeopleCount[i1];\n                        nextMaxIndex1 = i1;\n                    }\n                }\n                int nextMaxIndex = nextMaxIndex1;\n                int maxValue = partyPeopleCount[maxIndex];\n                int nextMaxValue = partyPeopleCount[nextMaxIndex];\n                \n                if(maxValue>=2){\n                    \/\/evacuate two of max party\n                    partyPeopleCount[maxIndex] -= 2;\n                    numTotalPeople -= 2;\n                    int maxIndex2 = -1;\n                    int maxValue2 = Integer.MIN_VALUE;\n                    for(int i2=0;i2<numParties;i2++){\n                        if(partyPeopleCount[i2]>maxValue2){\n                            maxValue2 = partyPeopleCount[i2];\n                            maxIndex2 = i2;\n                        }\n                    }\n                    int newMaxIndex = maxIndex2;\n                    if(partyPeopleCount[newMaxIndex] > numTotalPeople\/2){\n                        \/\/recover\n                        partyPeopleCount[maxIndex] += 2;\n                        numTotalPeople += 2;\n                    }\n                    else{\n                        plan1 += String.valueOf(partyName[maxIndex]);\n                        plan1 += String.valueOf(partyName[maxIndex]);\n                        plan1 += \" \";\n                        continue;\n                    }\n                }\n                \n                if(nextMaxValue>=1){\n                    \/\/evacuate one of max party, one of next max party\n                    partyPeopleCount[maxIndex]--;\n                    partyPeopleCount[nextMaxIndex]--;\n                    numTotalPeople -= 2;\n                    int maxIndex2 = -1;\n                    int maxValue2 = Integer.MIN_VALUE;\n                    for(int i2=0;i2<numParties;i2++){\n                        if(partyPeopleCount[i2]>maxValue2){\n                            maxValue2 = partyPeopleCount[i2];\n                            maxIndex2 = i2;\n                        }\n                    }\n                    int newMaxIndex = maxIndex2;\n                    if(partyPeopleCount[newMaxIndex] > numTotalPeople\/2){\n                        \/\/recover\n                        partyPeopleCount[maxIndex]++;\n                        partyPeopleCount[nextMaxIndex]++;\n                        numTotalPeople += 2;\n                    }\n                    else{\n                        plan1 += String.valueOf(partyName[maxIndex]);\n                        plan1 += String.valueOf(partyName[nextMaxIndex]);\n                        plan1 += \" \";\n                        continue;\n                    }\n                }\n                \n                \/\/evacuate one from max party\n                partyPeopleCount[maxIndex]--;\n                numTotalPeople--;\n                plan1 += String.valueOf(partyName[maxIndex]);\n                plan1 += \" \";\n                \n            }\n            String plan = plan1;\n            System.out.printf(\"Case #%d: %s\\n\", i, plan.trim());\n        }\n        scan.close();\n    }\n\n}"}
{"idx":"1310","func":"class Main {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(new File(\"A-large (1).in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\n\n        int caseLength = in.nextInt();\n        for (int caseNumber = 1; caseNumber <= caseLength; caseNumber++) {\n            out.write(String.format(\"Case #%d: \", caseNumber));\n            int partyCount = in.nextInt();\n\n            int[] party = new int[partyCount];\n            int total = 0;\n\n            for (int i = 0; i < partyCount; i++) {\n                party[i] = in.nextInt();\n                total += party[i];\n            }\n\n            ArrayList<Integer> nonZero = new ArrayList<>();\n            for (int i = 0; i < partyCount; i++) {\n                if (party[i] > 0) {\n                    nonZero.add(i);\n                }\n            }\n\n            if (nonZero.size() == 2) {\n                int count = party[nonZero.get(0)];\n                int first = nonZero.get(0);\n                int second = nonZero.get(1);\n\n                for (int i = 0; i < count; i++) {\n                    out.write((char) ('A' + first));\n                    out.write((char) ('A' + second));\n                    out.write((' '));\n                }\n            } else {\n\n                while (total > 2) {\n                    int maxParty = 0;\n\n                    for (int i = 1; i < partyCount; i++) {\n                        if (party[i] > party[maxParty]) {\n                            maxParty = i;\n                        }\n                    }\n\n                    party[maxParty]--;\n                    total--;\n                    out.write((char) ('A' + maxParty));\n                    out.write(' ');\n                }\n\n                for (int i = 0; i < partyCount; i++) {\n                    if (party[i] != 0) {\n                        out.write((char) ('A' + i));\n                    }\n                }\n            }\n\n            out.write('\\n');\n\n        }\n\n        out.close();\n    }\n}"}
{"idx":"1311","func":"class Problem1 {\n    \n    final static String PROBLEM_NAME = \"problem1\";\n    final static String WORK_DIR = \"\/Users\/manisharya\/Desktop\/jam\/\" + PROBLEM_NAME + \"\/\";\n    final static String INPUT_FILE_NAME = \"A-small-attempt0.in\";\n    final static String OUTPUT_FILE_NAME = \"output.txt\";\n    \n    int[] map;\n    int[] letter;\n    int n = -1;\n    \n    \n    public static void main(String[] args) throws Exception {\n\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + INPUT_FILE_NAME));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR\n                + OUTPUT_FILE_NAME));\n        int caseCnt = sc.nextInt();\n        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {\n            pw.print(\"Case #\" + (caseNum + 1) + \": \");\n            Problem1 r = new Problem1();\n            r.n = sc.nextInt();\n            r.map = new int[r.n];\n            r.letter = new int[r.n];\n            \n            for(int index = 0; index < r.n; index++) {\n                r.map[index] = sc.nextInt();\n                r.letter[index] = index;\n            }\n            \n            for(int i = 0; i < r.n; i++) {\n                for(int j = i+1; j < r.n ; j++) {\n                    if(r.map[i] < r.map[j]) {\n                        int temp = r.map[i];\n                        r.map[i] = r.map[j];\n                        r.map[j] = temp;\n                        \n                        temp = r.letter[i];\n                        r.letter[i] = r.letter[j];\n                        r.letter[j] = temp;\n                    }\n                }\n            }\n            \n            while(true) {\n                \n                if(r.map[0] == 0)\n                    break;\n                \n                if(r.map[0] > 1){\n                    if(r.map[1] > 0) {\n                        r.map[0] = r.map[0] - 1;\n                        r.map[1] = r.map[1] - 1;\n                        \n                        pw.print(Character.toChars(r.letter[0] + 65));\n                        pw.print(Character.toChars(r.letter[1] + 65));\n            \n                        pw.print(\" \");\n                        for(int i = 0; i < r.n; i++) {\n                            for(int j = i+1; j < r.n ; j++) {\n                                if(r.map[i] < r.map[j]) {\n                                    int temp = r.map[i];\n                                    r.map[i] = r.map[j];\n                                    r.map[j] = temp;\n                                    \n                                    temp = r.letter[i];\n                                    r.letter[i] = r.letter[j];\n                                    r.letter[j] = temp;\n                                }\n                            }\n                        }\n                    } else {\n                        r.map[0] = r.map[0] - 1;\n                        \n                        pw.print(Character.toChars(r.letter[0] + 65));\n            \n                        pw.print(\" \");\n                        break;\n                    } \n                } else {\n                    if(r.map[1] > 0) {\n                        if((r.n % 2) != 0 && r.map[2] > 0) {\n                            r.map[0] = r.map[0] - 1;\n                            \n                            pw.print(Character.toChars(r.letter[0] + 65));\n            \n                            pw.print(\" \");\n                            for(int i = 0; i < r.n; i++) {\n                                for(int j = i+1; j < r.n ; j++) {\n                                    if(r.map[i] < r.map[j]) {\n                                        int temp = r.map[i];\n                                        r.map[i] = r.map[j];\n                                        r.map[j] = temp;\n                                        \n                                        temp = r.letter[i];\n                                        r.letter[i] = r.letter[j];\n                                        r.letter[j] = temp;\n                                    }\n                                }\n                            }\n                        } else {\n                            r.map[0] = r.map[0] - 1;\n                            r.map[1] = r.map[1] - 1;\n                            \n                            pw.print(Character.toChars(r.letter[0] + 65));\n                            pw.print(Character.toChars(r.letter[1] + 65));\n                            pw.print(\" \");\n                            for(int i = 0; i < r.n; i++) {\n                                for(int j = i+1; j < r.n ; j++) {\n                                    if(r.map[i] < r.map[j]) {\n                                        int temp = r.map[i];\n                                        r.map[i] = r.map[j];\n                                        r.map[j] = temp;\n                                        \n                                        temp = r.letter[i];\n                                        r.letter[i] = r.letter[j];\n                                        r.letter[j] = temp;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        r.map[0] = r.map[0] - 1;\n                        \n                        pw.print(Character.toChars(r.letter[0] + 65));\n                        pw.print(\" \");\n                        break;\n                    }\n                }\n            }\n            \n            pw.println();\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n\n\n\n}"}
{"idx":"1312","func":"class Main {\n\n    public static void main(String[] args) {\n          BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            String s;\n            int lineCount = 0;\n            int testCases = 0;\n            int currentTest = 1;\n            \n            String parties = \"\";\n            String partyMembers = \"\";\n        \n            try {\n                \n                \n                while ((s = in.readLine()) != null && s.length() != 0)\n                {      \n        \n                  if(lineCount == 0)\n                  {\n                      testCases = Integer.parseInt(s);\n                  }\n                  else\n                  {      \n                      \n                      if(parties.equalsIgnoreCase(\"\"))\n                      {\n                \n                          parties = s;\n                      }\n                      else\n                      {\n                          if(partyMembers.equalsIgnoreCase(\"\"))\n                          {\n                              partyMembers = s;\n                             \n                              System.out.print(\"Case #\"+currentTest+\":\");\n                              int partiesInt = Integer.parseInt(parties);\n                              int[] partymemersInt = new int[partiesInt];\n                              String[] partymemersString = partyMembers.split(\" \");\n                              for(int i =0; i< partiesInt; i++)\n                              {\n                                \n                                  \n                                  partymemersInt[i]= Integer.parseInt(partymemersString[i]);\n                              }\n                            \n                              LinkedList<String> evacuationPlan = new LinkedList<String>();\n                              boolean contin = true;\n                              while(contin)\n                              {\n                                  \n                                  int biggest=0;\n                                  int nextBiggest =0;\n                                  int biggestParty=0;\n                                  int nextBiggestParty =0;\n                                  int totalMembers = 0;\n                                for(int i=0; i<partiesInt; i++)\n                                {\n                                    \n                                    if(partymemersInt[i]>=biggest)\n                                    {\n                                        nextBiggest = biggest;\n                                        nextBiggestParty = biggestParty;\n                                        biggestParty = i;\n                                        biggest = partymemersInt[i];\n                                        \n                                    }\n                                    totalMembers+= partymemersInt[i];\n                                }\n                                \n                                if(biggest== nextBiggest)\n                                {\n                                    if(biggestParty>nextBiggestParty)\n                                    {\n                                        int tmp = biggestParty;\n                                        biggestParty = nextBiggestParty;\n                                        nextBiggestParty = tmp;\n                                    }    \n                                        \n                                }\n                                \n                                \n                                \n                                \n                                if(partymemersInt[biggestParty]==0)\n                                {\n                                    contin = false;                        \n                                }\n                            \n                            \n                                int evacA=-1;\n                                int evacB=-1;\n                                if(partymemersInt[biggestParty]>0)\n                                {\n                                    partymemersInt[biggestParty]--;\n                                    evacA = biggestParty;\n                                }\n                                \n                                int membersAfterEvacA =0;\n                                for(int i=0;i<partymemersInt.length;i++)\n                                {\n                                    membersAfterEvacA+= partymemersInt[i];\n                                }\n                                if(membersAfterEvacA!=2)\n                                {\n                                \n                                if(partymemersInt[nextBiggestParty]>0)\n                                {\n                                    partymemersInt[nextBiggestParty]--;\n                                    evacB = nextBiggestParty;\n                                }\n                                }\n                                \n                                \n                                \n                                if(contin)\n                                {\n                                        \n                                    evacuationPlan.add( evacA+\" \"+evacB);\n                                }\n                                    \n                              }\n                            \n                              for (String string : evacuationPlan) {\n                                String[]paty = string.split(\" \");\n                                if(paty.length>0)\n                                {\n                                    int patyF = Integer.parseInt(paty[0]);\n                                    if(patyF>-1 && patyF<partyNames.length)\n                                    {\n                                        System.out.print(\" \");\n                                    System.out.print(partyNames[patyF]);\n                                    }\n                                    if(paty.length>1)\n                                    {\n                                        int patyB = Integer.parseInt(paty[1]);    \n                                        if(patyB>-1 && patyB<partyNames.length)\n                                        {\n                                            System.out.print(partyNames[patyB]);\n                                        }\n                                    }\n                                    \n                                }\n                                \n                              }\n                              System.out.println(\"\");\n                              parties = \"\";\n                              partyMembers = \"\";\n                              currentTest++;\n                          }\n                      }\n                     \n                      \n                      \n                      \n                  }\n                  \n                  lineCount++;\n                }\n            } catch (IOException e) {\n                \/\/ TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n      }\n    \n      private static String[] partyNames = new String[]{\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\", \"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\n      \n      \n\n}"}
{"idx":"1313","func":"class A{\n    public static void main(String args[])throws IOException{\n        \n        \/\/Scanner in=new Scanner(System.in);\n        Scanner in=new Scanner(new File(\"input.in\"));\n        PrintWriter pw=new PrintWriter(new FileWriter(new File(\"output.out\")));\n        \/\/PrintWriter pw=new PrintWriter(System.out);\n        int T=in.nextInt();\n        for(int t=1;t<=T;t++){                \n                int n,arr[];\n                n=in.nextInt();\n                arr=new int[n];\n                for(int i=0;i<n;i++)\n                    arr[i]=in.nextInt();\n                pw.print(\"Case #\"+t+\": \");\n                int cnt=n;\n                while(cnt!=0){\n                    \/*if(checkCase(arr)){\n                        System.out.println(\"Case\"+t);\n                        System.out.println(Arrays.toString(arr));\n                    }*\/\n                    \n                    int max=-1,pos=-1;\n                    if(cnt==2){\n                        int tmp=0,tarr[]=new int[2],same=0;\n                        for(int i=0;i<n;i++)\n                            if(arr[i]>0){\n                                tarr[tmp]=i;\n                                tmp++;\n                            }\n                            \n                        if(arr[tarr[0]]==arr[tarr[1]]){\n                            pw.print((char)((int)'A'+tarr[0])+\"\"+(char)((int)'A'+tarr[1])+\" \");\n                            arr[tarr[0]]--;\n                            arr[tarr[1]]--;\n                            if(arr[tarr[0]]==0){\n                                cnt-=2;\n                            }\n                            continue;\n                        }\n                        \n                    }\n                    for(int i=0;i<n;i++){\n                        if(arr[i]>=max){\n                            max=arr[i];\n                            pos=i;\n                        }\n                    }\n                    pw.print((char)((int)'A'+pos)+\" \");\n                    if(max==1){\n                        cnt--;\n                    }\n                    arr[pos]--;\n                }\n                pw.println();\n                \/\/System.out.println(\"Case #\"+t+\": \"+res);\n                \n        }\n        System.out.println(\"DONE\");\n        pw.close();\n        \n    }\n}"}
{"idx":"1314","func":"static void main(String args[]) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        int t=T;\n        \n        while(T-- > 0) {\n            String ans = \"\";\n            int  N =  in.nextInt();\n            int ar[] = new int[N];\n            char arr[] = new char[N];\n            int sum = 0;\n\n            for(int i = 0 ; i < N; i++) {\n                ar[i] =  in.nextInt();\n                sum = sum + ar[i];\n                arr[i] =   (char)('A' + i);\n            }\n            while(sum != 0) {\n            \/\/    Arrays.sort(ar);\n                int max = 0;\n                int index= 0;\n                for(int i = 0 ; i < N; i++) {\n                    if(ar[i] > max) {\n                        max=ar[i];\n                        index = i;\n                    }\n                }\n            \n                int sec_max = 0;\n                int sec_index= 0;\n                ar[index] = -1;\n                for(int i = 0 ; i < N; i++) {\n                    if(ar[i] > sec_max ) {\n                        sec_max=ar[i];\n                        sec_index = i;\n                    }\n                }\n                ar[index] = max;\n            \n                        \n                 if(ar[index] > 2 && ar[index] != ar[sec_index]) {\n                    ar[index] -= 2;    \/\/ print arr[index]x2\n                    sum -= 2;\n                    ans = ans + arr[index] + arr[index]  + ' ';\n                }\n                else if(ar[index] > 0 ){ \n                    if(sum % 2 == 0) {        \/\/ print arr[index] arr[sec_index]\n                        ar[index]--;\n                        ar[sec_index]--;\n                        sum -= 2;\n                        ans = ans + arr[index] + arr[sec_index]  + ' ';\n                    }\n                    else {\n                        ar[index]--;            \/\/print arr[index]\n                        sum -= 1;\n                        ans = ans + arr[index] + ' ';\n                    }\n                }\n                \n            }        \n            System.out.println(\"Case #\"+(t-(T))+\": \"+ans);\n            \n        \n        }\n    }\n}"}
{"idx":"1315","func":"class Evac {\n    \n    public static int[] party;\n    public static int N, sum;\n\n    public static void main(String[] args) throws IOException {\n\n        File input = new File(\"input.txt\");\n        Scanner scanner = new Scanner(input);\n        \n        int T = scanner.nextInt();\n        for (int i = 0; i < T; i++) {\n            \n            N = scanner.nextInt();\n            party = new int[N];\n            sum = 0;\n            \n            for (int j = 0; j < N; j++) {\n\n                party[j] = scanner.nextInt();\n                sum += party[j];\n            }\n\n            System.out.printf(\"Case #%d: \", i + 1);\n            if (N == 2) {\n                for (int j = 1; j < party[0]; j++)\n                    System.out.print(\"AB \");\n                System.out.println(\"AB\");\n            } else\n                while (sum > 0) {\n                    \n                    int gold, silver, bronze;\n                    gold = silver = bronze = -1;\n                    for (int i1 = 0; i1 < N; i1++)\n                        if (gold == -1 || party[i1] > party[gold]) {\n                            bronze = silver;\n                            silver = gold;\n                            gold = i1;\n                        }\n                        else if (silver == -1 || party[i1] > party[silver]) {\n                            bronze = silver;\n                            silver = i1;\n                        }\n                        else if (bronze == -1 || party[i1] > party[bronze])\n                            bronze = i1;\n                    int x = party[gold] - 1;\n                    int y = party[bronze];\n                    \n                    if ((x > y ? x : y) > (sum - 2) \/ 2) {\n                        \n                        sum--;\n                        party[gold]--;\n                        System.out.print((char) ((int) 'A' + gold));\n                    }\n                    else {\n                        \n                        sum -= 2;\n                        party[gold]--;\n                        party[silver]--;\n                        System.out.print((char) ((int) 'A' + gold));\n                        System.out.print((char) ((int) 'A' + silver));\n                    }\n                    \n                    if (sum == 0)\n                        System.out.println();\n                    else\n                        System.out.print(' ');\n                }\n        }\n        \n        scanner.close();\n    }\n\n}"}
{"idx":"1316","func":"class first1C\n{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        int T=in.nextInt();\n        for(int t=0;t<T;t++)\n        {\n            int N = in.nextInt();\n            ArrayList<Integer> A = new ArrayList<Integer>();\n            for(int n=0;n<N;n++)\n            {\n                A.add(in.nextInt());\n            }\n            String S = \"\";\n            int count_notzeroes = N ;\n            while(true)\n            {\n                \n                if(count_notzeroes==2)\n                {\n                    int x=0,y=1;\n                    for(int i=0;i<N;i++)\n                    {\n                        if(A.get(i)!=0)\n                            x=i;\n                    }\n                    for(int i=0;i<N;i++)\n                    {\n                        if(A.get(i)!=0 && i!=x)\n                            y=i;\n                    }\n                    while(A.get(x)!=0 && A.get(y) != 0)\n                    {\n                        if(A.get(x)==A.get(y))\n                        {\n                            S = S + \" \"  +(char)(x+65) + (char)(y+65);\n                            A.set(x,A.get(x)-1);\n                            A.set(y,A.get(y)-1);\n                        }\n                        else if(A.get(x)>A.get(y))\n                        {\n                            S= S + \" \"  +(char)(x+65);\n                            A.set(x,A.get(x)-1);\n                        }\n                        else if(A.get(x)<A.get(y))\n                        {\n                            S =S +\" \" +(char)(y+65);\n                            A.set(y,A.get(y)-1);\n                        }\n                            \/\/System.out.println(\"in inner while loop\" +A.get(x) );\n                    }\n                    break;\n                }\n                else \n                {\n                    int max_index;\n                    int max;\n                \n                \n                    max = A.get(0);\n                    max_index=0;\n                    for(int i=0;i<N;i++)\n                    {\n                        if(max<A.get(i))\n                        {\n                            max=A.get(i);\n                            max_index=i;\n                        }\n                    }\n                    \n                        A.set(max_index,A.get(max_index)-1);\n                        if(A.get(max_index)==0) {count_notzeroes--; }\n                        S = S + \" \" + (char)(max_index+65);\n                    \n                }\n            }\n\n            System.out.println(\"Case #\" +(t+1) +\": \" +S.substring(1));\n        }\n\n    }\n}"}
{"idx":"1317","func":"class R1C2016 {\n\n    static int parties[];\n    static int total;\n\n    public static void main(String args[]) {\n        Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int cases = scan.nextInt();\n        scan.nextLine();\n\n        for (int i = 0; i < cases; i++) {\n            System.out.print(\"Case #\" + (i + 1) + \": \");\n            parties = new int[scan.nextInt()];\n            total = 0;\n\n            for (int j = 0; j < parties.length; j++) {\n                parties[j] = scan.nextInt();\n                total += parties[j];\n            }\n\n            while (total > 0) {\n                int maxArg = 0;\n                int secondMax = 0;\n                for (int i1 = 0; i1 < parties.length; i1++) {\n                    if (parties[i1] >= parties[maxArg]) {\n                        secondMax = maxArg;\n                        maxArg = i1;\n                    } else if (parties[i1] >= parties[secondMax]) {\n                        secondMax = i1;\n                    }\n                }\n            \n                if (total == 3) {\n                    System.out.print((char) (65 + maxArg) + \" \");\n            \n                    parties[maxArg]--;\n                    total--;\n                } else if (secondMax != maxArg && (parties[maxArg] - 1) <= ((total - 2) \/ 2)) {\n                    System.out.print((char) (65 + maxArg) + \"\" + (char) (65 + secondMax) + \" \");\n            \n                    parties[maxArg]--;\n                    parties[secondMax]--;\n                    total -= 2;\n                } else if (parties[maxArg] - 2 <= ((total - 2) \/ 2)) {\n                    System.out.print((char) (65 + maxArg) + \"\" + (char) (65 + maxArg) + \" \");\n            \n                    parties[maxArg] -= 2;\n                    total -= 2;\n                } else if ((parties[maxArg] - 1) <= ((total - 1) \/ 2)) {\n                    System.out.print((char) (65 + maxArg) + \" \");\n            \n                    parties[maxArg]--;\n                    total--;\n                }\n            }\n            System.out.println();\n        }\n\n        scan.close();\n    }\n}"}
{"idx":"1318","func":"class A {\n    public static void main(String args[]) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(in));\n        int T = parseInt(br.readLine());\n        for (int z=0;z<T;z++) {\n            int N = parseInt(br.readLine());\n            int[] P = new int[N];\n            String[] ss = br.readLine().trim().split(\"\\\\s+\");\n\n            for(int i=0;i<N;i++) P[i] = parseInt(ss[i]);\n            int first = 0;\n            int second = -1;\n            for(int i=1;i<N;i++) {\n                if (P[first] < P[i]) {\n                    first = i;\n                }\n            }\n            for (int i=0;i<N;i++) {\n                if (first == i) continue;\n                if (second == -1 || P[second] < P[i]) {\n                    second = i;\n                }\n            }\n            StringBuilder sb = new StringBuilder();\n            while(P[first] > P[second]) {\n                if (P[first] == P[second] + 1) {\n                    sb.append((char)(first + 'A'));\n                    sb.append(\" \");\n                    P[first]--;\n                } else {\n                    sb.append((char)(first + 'A'));\n                    sb.append((char)(first + 'A'));\n                    sb.append(\" \");\n                    P[first] -= 2;\n                }\n            }\n            \/\/ out.println(\">> \" + first + \" \" + second + \" \" + Arrays.toString(P));\n            for (int i=0;i<N;i++) {\n                if (i == first || i == second) continue;\n                while(P[i] > 0) {\n                    if (P[i] >= 2) {\n                        sb.append((char)(i + 'A'));\n                        sb.append((char)(i + 'A'));\n                        sb.append(\" \");\n                        P[i] -= 2;\n                    } else {\n                        sb.append((char)(i + 'A'));\n                        sb.append(\" \");\n                        P[i]--;\n                    }\n                }\n            }\n            while(P[first] > 0) {\n                sb.append((char)(first + 'A'));\n                sb.append((char)(second + 'A'));\n                sb.append(\" \");\n                P[first]--;\n                P[second]--;\n            }\n            out.println(\"Case #\"+(z+1)+\": \" + sb.toString().trim());\n        }\n    }\n}"}
{"idx":"1319","func":"class SenateEvacuation \n{\n    public static void main(String[] args) throws FileNotFoundException\n    {\n        Scanner sc=new Scanner(new File(\"cur\/SenateEvacuationLarge.in\"));\n        PrintWriter pout=new PrintWriter(\"cur\/SenateEvacuationLarge.out\");\n        \n        int i,j,t,z,n;\n        \n        t=sc.nextInt();\n        \n        for(z=1;z<=t;z++)\n        {\n            pout.print(\"Case #\"+z+\": \");\n            n=sc.nextInt();\n            int a[]=new int[n];\n            for(i=0;i<n;i++)\n                a[i]=sc.nextInt();\n            int len=n;\n            while(len>0)\n            {\n                int max1=0,max2=1;\n                for(i=1;i<n;i++)\n                {\n                    if(a[max1]<a[i])\n                    {\n                        max2=max1;\n                        max1=i;\n                    }\n                    else if(a[max2]<a[i])\n                        max2=i;\n                }\n                if(len==3&&a[max1]==1)\n                {\n                    pout.print((char)(max1+65)+\" \");\n                    a[max1]--;\n                }\n                else{\n                    if(a[max1]==a[max2])\n                    {\n                        pout.print((char)(max1+65)+\"\"+(char)(max2+65)+\" \");\n                        a[max1]--;a[max2]--;\n                    }\n                    else \n                    {\n                        pout.print((char)(max1+65)+\"\"+(char)(max1+65)+\" \");\n                        a[max1]-=2;\n                    }\n                }\n                if(a[max1]==0)\n                    len--;\n                if(a[max2]==0)\n                    len--;\n            }\n            \n            pout.println(\"\");\n        }   \n        pout.close();\n    }\n}"}
{"idx":"1320","func":"class Round1CProblemA {\n    \n    public static void main(String[] args) {\n        try {\n            BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n            int T = Integer.parseInt(bf.readLine());\n            for (int i=0; i<T; i++) {\n                int N = Integer.parseInt(bf.readLine());\n                String[] strTemp = bf.readLine().split(\" \");\n                \n                int[] P = new int[N];\n                int total = 0;\n                \n                for (int j=0; j<N; j++) {\n                    P[j] = Integer.parseInt(strTemp[j]);\n                    total +=P[j];\n                }\n                \n                System.out.print(\"Case #\" + (i+1) + \":\");\n                while (total > 0) {\n                    int maxSenatesAllowed = (total - 2)\/2; \n                    \n                    int[] defaultEvac = {-1, -1};\n                    int[] requiredEvac = {-1, -1};\n                    \n                    for (int x=0; x<N; x++) {\n                        if (defaultEvac[0] == -1) {\n                            if (P[x] >= 2) defaultEvac[1] = x;\n                            if (P[x] >= 1) defaultEvac[0] = x;\n                        } else if (defaultEvac[1] == -1) {\n                            if (P[x] >= 1) defaultEvac[1] = x;\n                        }\n\n                        if (P[x] > maxSenatesAllowed) {\n                            if (requiredEvac[0] == -1) requiredEvac[0] = x;\n                            else if (requiredEvac[1] == -1) requiredEvac[1] = x;\n                        }\n                    }\n\n                    \n                    if (requiredEvac[0] == -1) \n                        requiredEvac = defaultEvac;\n                    else if (requiredEvac[1] == -1) {\n                        if (defaultEvac[0] != -1 && defaultEvac[0] != requiredEvac[0]) {\n                            requiredEvac[1] = defaultEvac[0];\n                        } else {\n                            requiredEvac[1] = defaultEvac[1];\n                        }\n                    }\n                    \n                    if (total == 3) requiredEvac[1] = -1; \n                    \n                    System.out.print(\" \");\n                    int count = 0;\n                    if (count<2 && requiredEvac[0] != -1) {\n                        System.out.print((char) ('A' + (char) requiredEvac[0]) );\n                        P[requiredEvac[0]]--;\n                        total--;\n                        count++;\n                    }\n                    \n                    if (count<2 && requiredEvac[1] != -1) {\n                        System.out.print((char) ('A' + (char) requiredEvac[1]) );\n                        P[requiredEvac[1]]--;\n                        total--;\n                        count++;\n                    }\n                    \n                }\n                \n                System.out.println();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1321","func":"class A1C {\n    public static void main(String[] args) {\n        A1C r = new A1C();\n        try {\n            r.in = new Scanner(new FileInputStream(new File(\"A-large\" + \".in\")));\n            r.out = new PrintWriter(new File(\"A-large\" + \".out\"));\n            int tests = r.in.nextInt();\n            for (int i = 1; i <= tests; i++) {\n                int n = r.in.nextInt();\n                int[] quantity = new int[n];\n                int maxInd = 0;\n                int min = Integer.MAX_VALUE;\n            \n            \n                HashMap<Integer, ArrayList<Integer>> aux = new HashMap<>();\n                int max = 0;\n                for (int j = 0; j < n; j++) {\n                    quantity[j] = r.in.nextInt();\n                    if (quantity[j] >= quantity[maxInd]) {\n                        maxInd = j;\n                    }\n                    min = Math.min(quantity[j], min);\n                    max = Math.max(quantity[j], max);\n                    if (!aux.containsKey(quantity[j])) {\n                        aux.put(quantity[j], new ArrayList<>());\n                    }\n            \n                    aux.get(quantity[j]).add(j);\n                }\n            \n            \n                int[] arCopy = Arrays.copyOf(quantity, quantity.length);\n                Arrays.sort(arCopy);\n            \n            \n            \n                r.out.print(\"Case #\" + i + \": \");\n            \n                int ind = arCopy.length - 1;\n                while(aux.size() > 1) {\n                    int curMax = arCopy[ind];\n            \n                    while (arCopy[ind - 1] == curMax) {\n                        ind--;\n                    }\n                    int nextMax = arCopy[ind - 1];\n                    int toDel = curMax - nextMax;\n                    for (int j = 0; j < toDel; j++) {\n                        for (int sen  : aux.get(curMax)) {\n                            r.out.print(((char)('A' + sen)) + \" \");\n                            quantity[sen]--;\n                        }\n                    }\n                    aux.get(nextMax).addAll(aux.get(curMax));\n                    aux.remove(curMax);\n                    ind--;\n                }\n            \n                ind = n - 1;\n                while (ind > 1) {\n                    for (int j = 0; j < quantity[ind]; j++) {\n                        r.out.print(((char)('A' + ind)) + \" \");\n                    }\n                    quantity[ind] = 0;\n                    ind--;\n                }\n            \n                for (int j = 0; j < quantity[ind]; j++) {\n                    r.out.print(\"AB\" + \" \");\n                }\n                r.out.println();\n            \n            }\n            r.out.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    Scanner in;\n    PrintWriter out;\n}"}
{"idx":"1322","func":"class senateEvac {\n    public static void main (String[] args) throws Exception {\n        \/\/BufferedReader br = new BufferedReader(new FileReader(\"C:\/\/Users\/Brijesh\/Downloads\/A-small-attempt0.in\"));\n        BufferedReader br = new BufferedReader(new FileReader(\"C:\/\/Users\/Brijesh\/Downloads\/A-large.in\"));\n        \/\/BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st;\n        int t=Integer.parseInt(br.readLine());\n        for(int i=1;i<=t;i++){\n            int n=Integer.parseInt(br.readLine());\n            int[] arr=new int[n];\n            st=new StringTokenizer(br.readLine());\n            int sum=0;\n            for(int j=0;j<n;j++){\n                arr[j]=Integer.parseInt(st.nextToken());\n                sum+=arr[j];\n            }\n            String str=\"\";\n            while(sum>0){\n                Vector<Integer> v=new Vector<Integer>();\n                int max=0,oldmax=0;\n                for(int j=0;j<n;j++){\n                    if(arr[j]>max){\n                        oldmax=max;\n                        max=arr[j];\n                        v.clear();\n                        v.add(j);\n                    }\n                    else if(arr[j]==max)\n                        v.add(j);\n                    else if(arr[j]>oldmax)\n                        oldmax=arr[j];\n                }\n                if(v.size()%2==0){\n                    for(int k=1;k<=max-oldmax;k++){\n                        for(int j=0;j<v.size();j+=2){\n                            char a=(char)(v.elementAt(j)+65);\n                            char b=(char)(v.elementAt(j+1)+65);\n                            arr[v.elementAt(j)]--;\n                            arr[v.elementAt(j+1)]--;\n                            str+=a;\n                            str+=b;\n                            str+=\" \";\n                            sum-=2;\n                        }\n                    }\n                }\n                else{\n                    for(int k=1;k<=max-oldmax;k++){\n                        char c=(char)(v.elementAt(0)+65);\n                        str+=c;\n                        str+=\" \";\n                        sum--;\n                        arr[v.elementAt(0)]--;\n                        for(int j=1;j<v.size();j+=2){\n                            char a=(char)(v.elementAt(j)+65);\n                            char b=(char)(v.elementAt(j+1)+65);\n                            arr[v.elementAt(j)]--;\n                            arr[v.elementAt(j+1)]--;\n                            str+=a;\n                            str+=b;\n                            str+=\" \";\n                            sum-=2;\n                        }\n                    }\n                }\n            }\n            System.out.println(\"Case #\"+i+\": \"+str.trim());\n        }\n    }\n}"}
{"idx":"1323","func":"class SenateEvacuation {\n\n    static Scanner sc = new Scanner(System.in);\n    static int T;\n    static int[] P;\n    public static void main(String[] args) {\n        T = sc.nextInt();\n        for (int c = 0; c < T; c++) {\n            System.out.print(\"Case #\"+(c+1)+\":\");\n            int len = sc.nextInt();\n            P = new int[len];\n            int tot = 0;\n            for (int i = 0; i < len; i++) {\n                P[i] = sc.nextInt();\n                tot+= P[i];\n            }\n            \n            int last = 0;\n            for (int i = 0; i < tot-2;) {\n\n                int max = -1;\n                int id = -1;\n                int max2 = -1;\n                int id2 = -1;\n                for (int j = 0; j < len; j++) {\n                    if(P[j] > max){\n                        id = j;\n                        max = P[j];\n                    }\n                }\n\n                P[id]--;\n\n                for (int j = 0; j < len; j++) {\n                    if(P[j] > max2){\n                        id2 = j;\n                        max2 = P[j];\n                    }\n                }\n\n                \/\/check if can\n                int total = (tot - i - 1)\/2;\n                \/\/System.out.println(Arrays.toString(P));\n                if(P[id2] > total && P[id] > total){\n                    System.out.println(\"D:\");\n                }\n                \n                if(P[id2] > total){\n                    char i1 = (char)('A' + id);\n                    char i2 = (char)('A' + id2);\n                    P[id2]--;\n                    System.out.print(\" \" + i1+\"\"+i2);\n                    i+=2;\n                }\n                else{\n                    char resp = (char)('A' + id);\n                    System.out.print(\" \"+resp);\n                    i++;\n                }\n\n            }\n\n            char id1 = '-';\n            char id2 = 'A';\n            for (int j = 0; j < len; j++) {\n                if(P[j] > 0){\n                    if(id1 == '-'){\n                        id1 = (char)('A' + j);\n                    }\n                    else{\n                        id2 = (char)('A' + j);\n                    }\n                }\n            }\n            System.out.println(\" \" + id1+\"\"+id2);\n\n        }\n\n    }\n\n}"}
{"idx":"1324","func":"class SenateEvacuation {\n\n    public static void main(String[] args) \n    {\n        try\n        {\n            String inputName = \"A-large (2).in\";\n            BufferedReader input = new BufferedReader(new FileReader(inputName));\n            BufferedWriter output = new BufferedWriter(new FileWriter(\"output.txt\"));\n            \/\/read test case number\n            String line = input.readLine();\n            int testNr = new Integer(line).intValue();\n            \n            for (int i = 0; i < testNr; i++)\n            {\n                SenateEvacuation test = new SenateEvacuation();\n                line = input.readLine();\n                int N = new Integer(line).intValue();\n                line = input.readLine();\n                String[] parts = line.split(\" \");\n                int[] P = new int[parts.length];\n                int count = 0;\n                for (int i2 = 0; i2 < N; i2++)\n                {\n                    P[i2] = new Integer(parts[i2]).intValue();\n                    count += P[i2];\n                }\n                \n                StringBuffer sb = new StringBuffer();\n                if (N == 2)\n                {\n                    for (int i1 = 0; i1 < P[0]; i1++)\n                    {\n                        if (i1>0) sb.append(\" \");\n                        sb.append(\"AB\");\n                    }\n                }\n                else\n                {\n                    boolean first = true;\n                    while (count > 0)\n                    {\n                        if (count < 3)\n                        {\n                            if (!first)\n                            {\n                                sb.append(\" \");\n                            }\n                            for (int i4 = 0; i4 < N; i4++)\n                            {\n                                if (P[i4] > 0) sb.append((char)('A'+i4));\n                            }\n                            count = 0;\n                        }\n                        else if (count == 3)\n                        {\n                            if (!first)\n                            {\n                                sb.append(\" \");\n                            }\n                            else first = false;\n                            boolean found = false;\n                            for (int i3 = 0; !found && i3 < N; i3++)\n                            {\n                                if (P[i3] > 0)\n                                {\n                                    sb.append((char)('A'+i3));\n                                    P[i3] -= 1;\n                                    count -= 1;\n                                    found = true;\n                                }\n                            }\n                        }\n                        else\n                        {\n                            int max_index = 0;\n                            int max = P[0];\n                            int max_index2 = 0;\n                            int max2 = P[0];\n                            if (P[1] > P[0])\n                            {\n                                max_index = 1;\n                                max = P[1];\n                            }\n                            else\n                            {\n                                max_index2 = 1;\n                                max2 = P[1];\n                            }\n                            for (int i5 = 2; i5 < N; i5++)\n                            {\n                                if (P[i5] > max)\n                                {\n                                    max2 = max;\n                                    max_index2 = max_index;\n                                    max = P[i5];\n                                    max_index = i5;\n                                }\n                                else if (P[i5] > max2)\n                                {\n                                    max2 = P[i5];\n                                    max_index2 = i5;\n                                }\n                            }\n                            if (!first)\n                            {\n                                sb.append(\" \");\n                            }\n                            else first = false;\n                            sb.append((char)('A'+max_index));\n                            sb.append((char)('A'+max_index2));\n                            P[max_index]-=1;\n                            P[max_index2]-=1;\n                            count -= 2;\n                        }\n                    }\n                }\n                String res = sb.toString();\n                String toWrite = \"Case #\" + (i+1) + \": \" + res;\n                System.out.println(toWrite);\n                output.write(toWrite + \"\\n\");\n            }\n            output.flush();\n            output.close();\n            input.close();\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n    \n}"}
{"idx":"1325","func":"class Senate\n    {\n        \n        public static void main(String args[])\n        {\n                Scanner s= new Scanner(System.in);\n                int t = s.nextInt();\n                int is=1;\n                while((t--)>0)\n                {    int sum=0;\n                    int n= s.nextInt();\n                    int a[]=new int[n];\n                    System.out.print(\"Case #\"+is+\":\");\n                    is++;\n                    for(int i=0;i<n;i++)\n                    {\n                        a[i]=s.nextInt();\n                        sum=sum+a[i];\n\n                    }\n                    while(sum!=0||sum>0)\n                    {\n\n                    int l1=0;\n                    int l2=0;\n                    for(int i=0;i<n;i++)\n                    {\n                        if(a[i]>=a[l1])\n                        {\n                            l2=l1;\n                            l1=i;\n\n                        }\n                        else if (a[i]>=a[l2])\n                        {\n                            l2=i;\n                        }\n                    }\n                    if(a[l1]==a[l2]&&a[l2]-2>=0)\n                    {\n                        \n                        char ac =(char) (65+l1);\n                        char b =(char) (65+l2);\n                        \n                        System.out.print(\" \"+b+ac);\n                        a[l1]--;\n                        a[l2]--;\n                        sum=sum-2;\n                    }\n                    else if(a[l1]==1&&a[l2]==1&&sum%2!=0)\n                    {\n                        char ac =(char) (65+l1);\n                            System.out.print(\" \"+ac);\n                        a[l1]--;\n                        sum=sum-1;\n                    }\n                    else if((a[l1]==1)&&(a[l2]==1)&&sum%2==0)\n                    {\n                        char ac =(char) (65+l1);\n                        char b =(char) (65+l2);\n                        \n                        System.out.print(\" \"+b+ac);\n                        a[l1]--;\n                        a[l2]--;\n                        sum=sum-2;\n                    }\n                    \n                    else if( a[l1]-2>=1)\n                    {    \n                        char ac =(char) (65+l1);\n                        System.out.print(\" \"+ac+ac);\n                        a[l1]=a[l1]-2;\n                        sum=sum-2;\n                    }\n                    else if(a[l1]==2)\n                    {\n                            char ac =(char) (65+l1);\n                            System.out.print(\" \"+ac);\n                            sum=sum-1;\n                            a[l1]--;\n                    }\n\n                    \n}\n                System.out.println();\n\n                }\n        }\n    }"}
{"idx":"1326","func":"class A {\n\n    static StringBuilder sb = new StringBuilder();\n    static Formatter buf = new Formatter(sb, Locale.US);\n    static int T;\n    static int N; \n    static int[] P;\n    \n    public static void main(String[] args) throws Exception {\n        System.setIn(new FileInputStream(\"A-small.in\"));\n        System.setOut(new PrintStream(\"A-small.out\"));\n        StringTokenizer st;\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        T = Integer.parseInt(in.readLine());\n        for (int c = 1; c <= T; c++) {\n            N = Integer.parseInt(in.readLine());\n            st = new StringTokenizer(in.readLine());\n            P = new int[N];\n            for (int i = 0; i < N; i++) P[i]=Integer.parseInt(st.nextToken()); \n            buf.format(\"Case #%d:\", c);\n            String s;\n            while(true){\n                int su = 0;\n                for (int i = 0; i < P.length; i++) {\n                    su = su + P[i];\n                }\n                if (su==3){\n                    int m=0;\n                    for (int i = 1; i < P.length; i++) {\n                        if (P[i]>P[m]) m=i;\n                    }\n                    if (P[m]==0) break;\n                    s = \"\"+(char)('A'+m);\n                    buf.format(\" %s\", s);\n                    P[m]--;\n                    continue;\n                }\n                int m=0;\n                for (int i = 1; i < P.length; i++) {\n                    if (P[i]>P[m]) m=i;\n                }\n                if (P[m]==0) break;\n                s = \"\"+(char)('A'+m);\n                buf.format(\" %s\", s);\n                P[m]--;\n                m=0;\n                for (int i = 1; i < P.length; i++) {\n                    if (P[i]>P[m]) m=i;\n                }\n                if (P[m]==0) break;\n                s = \"\"+(char)('A'+m);\n                P[m]--;\n                buf.format(\"%s\", s);\n            }\n            buf.format(\"\\n\");\n        }\n        System.out.print(sb.toString());\n    }\n\n}"}
{"idx":"1327","func":"static void main(String [] args){\n        Scanner s = new Scanner(System.in);\n        int t=s.nextInt();\n        for(int i=0;i<t;i++){\n            int n=s.nextInt();\n            int [] store = new int [n];\n            int sum=0;\n            for(int j=0;j<n;j++){\n                store[j]=s.nextInt();\n                sum=sum+store[j];\n            }\n            System.out.print(\"Case #\");\n            System.out.print(i+1);\n            System.out.print(\": \");\n            while(sum>3){\n                int max1=0;\n                int max2=0;\n                int index=-1;\n                int index2=-1;\n                for(int j=0;j<n;j++){\n                    if(store[j]>max1){\n                        max1=store[j];\n                        index=j;\n                    }\n                }\n                for(int j=0;j<n;j++){\n                    if(store[j]>max2 && index!=j){\n                        max2=store[j];\n                        index2=j;\n                    }\n                }\n                store[index]=store[index]-1;\n                store[index2]=store[index2]-1;\n                int dummy1=65+index;\n                int dummy2=65+index2;\n                System.out.print((char)(dummy1));\n                System.out.print((char)(dummy2));\n                System.out.print(\" \");\n                sum=sum-2;\n            }\n            if(sum==2){\n                int max1=0;\n                int max2=0;\n                int index=-1;\n                int index2=-1;\n                for(int j=0;j<n;j++){\n                    if(store[j]>max1){\n                        max1=store[j];\n                        index=j;\n                    }\n                }\n                for(int j=0;j<n;j++){\n                    if(store[j]>max2 && index!=j){\n                        max2=store[j];\n                        index2=j;\n                    }\n                }\n                store[index]=store[index]-1;\n                store[index2]=store[index2]-1;\n                int dummy1=65+index;\n                int dummy2=65+index2;\n                System.out.print((char)(dummy1));\n                System.out.print((char)(dummy2));\n                System.out.print(\" \");\n            \n            }\n            else{\n                int max1=0;\n                int max2=0;\n                int index=-1;\n                int index2=-1;\n                for(int j=0;j<n;j++){\n                    if(store[j]>max1){\n                        max1=store[j];\n                        index=j;\n                    }\n                }\n                store[index]=store[index]-1;\n                int dummy1=65+index;\n                System.out.print((char)(dummy1));\n                \n                System.out.print(\" \");\n                 max1=0;\n                 max2=0;\n                 index=-1;\n                 index2=-1;\n                for(int j=0;j<n;j++){\n                    if(store[j]>max1){\n                        max1=store[j];\n                        index=j;\n                    }\n                }\n                for(int j=0;j<n;j++){\n                    if(store[j]>max2 && index!=j){\n                        max2=store[j];\n                        index2=j;\n                    }\n                }\n                store[index]=store[index]-1;\n                store[index2]=store[index2]-1;\n                 dummy1=65+index;\n                int dummy2=65+index2;\n                System.out.print((char)(dummy1));\n                System.out.print((char)(dummy2));\n                \n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1328","func":"class A3 {\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/ TODO Auto-generated method stub\n        FileInputStream fin = new FileInputStream(\"src\/a.in\");\n        PrintStream fout = new PrintStream(new FileOutputStream(\"src\/a.out\"));\n        System.setIn(fin);\n        System.setOut(fout);\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();        \n        for(int i = 1; i <= t; ++i) {\n            int n = in.nextInt();\n            int[][] p = new int[26][2];\n            int sum = 0;\n            for(int j = 0; j < n; j++) {\n                p[j][1] = in.nextInt();\n                p[j][0] = 65+j;\n                sum+=p[j][1];\n            }\n            for(int j = 0; j < n; j++) {\n                int max = p[j][1];\n                int maxp = j;\n                for(int k = j+1; k < n; k++) {\n                    if(max < p[k][1]){\n                        max = p[k][1];\n                        maxp = k;\n                    }\n                }\n                int bv= p[j][1];\n                int bp=p[j][0];\n                p[j][1] = max;\n                p[j][0] = p[maxp][0];\n                p[maxp][0] = bp;\n                p[maxp][1] = bv;\n            }\n            System.out.print(\"Case #\" + i + \":\");\n            int ave = sum\/n;\n            int party = 0;\n            while(sum != 0) {\n                party = 0;\n                boolean change = false;\n                for(int j = 0; j < n; j++ ) {\n                    if(p[j][1] > ave) {\n                        p[j][1]--;\n                        sum --;\n                        char b = (char)p[j][0];\n                        System.out.print(\" \"+b);\n                        change = true;\n                    }\n                    if(p[j][1]!=0){\n                        party++;\n                    }\n                }\n                ave = sum\/party;\n                if(change==false) {\n                    for(int j = 0; j < n-2; j++) {\n                        while(p[j][1]!=0){\n                            p[j][1]--;\n                            char b = (char)p[j][0];\n                            System.out.print(\" \"+b);\n                        }\n                    }\n                    while(p[n-1][1]!=0){\n                        p[n-1][1]--;\n                        char b1 = (char)p[n-1][0];\n                        char b2 = (char)p[n-2][0];\n                        System.out.print(\" \"+b1+b2);\n                    }\n                    break;\n                }\n            }\n            System.out.println(\"\");\n        }\n    }\n}"}
{"idx":"1329","func":"class Main \n{\n    public static void main(String[] args) \n    {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        \/\/in.useDelimiter(\"\\n\");\n        \n        int T = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        \/\/in.nextLine();\n        \n        String pts = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n        int N;\n        int[] P;\n        \/\/ loop each test case\n        for (int t = 1; t <= T; ++t) \n        {\n            System.out.print(\"Case #\" + t + \":\");\n            N = in.nextInt(); \/\/ Number of parties\n            P = new int[N];\n            \/\/ loop each party total\n            for (int n = 0; n < N; n++)\n            {\n                P[n] = in.nextInt();\n            }\n            Boolean done = false;\n            \n            while (!done)\n            {\n                \/\/ find largest party\n                int max1 = -1;\n                int max2 = -1;\n                int ind = -1;\n                int ind2 = -1;\n                int sum = 0; \n                \n                \/\/ find first largest\n                for (int n = 0; n < N; n++)\n                {\n                    if (P[n] > max1) {\n                        max1 = P[n];\n                        ind = n;\n                    }\n                    sum += P[n];\n                }\n                \/\/ find second largest\n                for (int n = 0; n < N; n++)\n                {\n                    if (n != ind && P[n] > max2) {\n                        max2 = P[n];\n                        ind2 = n;\n                    } \n                }\n                \n                if (sum == 0)\n                {\n                    done = true;\n                    break;\n                }\n                else if ((sum % 2 != 0) || sum == 1)\n                {\n                    P[ind]--;\n                    System.out.print(\" \" + pts.charAt(ind));\n                }\n                else if (max1 == max2)\n                {\n                    \/\/ evac 2 parties\n                    P[ind]--;\n                    P[ind2]--;\n                    System.out.print(\" \" + pts.charAt(ind) + pts.charAt(ind2));\n                }\n                else\n                {\n                    P[ind] = P[ind] - 2;\n                    System.out.print(\" \" + pts.charAt(ind) + pts.charAt(ind));\n                }\n                \/*\n                else if (sum )\n                {                    \n                    if (ind2 != -1 && P[ind] == P[ind2])\n                    {\n                        \/\/ evac 2 parties\n                        P[ind]--;\n                        P[ind2]--;\n                        System.out.print(\" \" + pts.charAt(ind) + pts.charAt(ind2));\n                    }\n\n                }*\/\n                \n                \n            }\n            System.out.print('\\n');\n        }\n        in.close();\n    }\n}"}
{"idx":"1330","func":"class TaskA {\n    public static Scanner in = new Scanner(System.in);\n    \n    public static void main(String[] args){\n        int numOfCases = in.nextInt();\n        for(int i = 0 ; i < numOfCases; i++){\n            int n = in.nextInt();\n            int[] partyNum = new int[n];\n            System.out.print(\"Case #\" + (i+1) + \": \");\n            \n            int k =0;\n            for(int j = 0 ;j  < n ; j++){\n                partyNum[j] = in.nextInt();\n                k+= partyNum[j];\n            }\n            int max = 0;\n            while( max != 1){\n                max = 0;\n                int maxIdx1 = -1;\n                int maxIdx2 = -1;\n                for(int j = 0; j < n ; j++){\n                    if(partyNum[j] == max && max != 0){\n                        maxIdx2 = j;\n                    }\n                    if(partyNum[j] > max){\n                        maxIdx2 = -1;\n                        max = partyNum[j];\n                        maxIdx1 = j;\n                    }\n                    \n                }\n                if(max != 1) {\n                    partyNum[maxIdx1]--;\n                    if(maxIdx2 != -1){\n                        partyNum[maxIdx2]--;\n                        System.out.print((char)(65 + maxIdx2));\n                    }\n                    System.out.print((char)(65 + maxIdx1) + \" \");\n                }\n            }\n            int cnt = 3;\n            while(cnt > 2){\n                cnt = 0;\n                for(int j = 0; j < n ; j++){\n                    if(partyNum[j] == 1) cnt++; \n                }\n                if(cnt > 2){\n                    for(int j = 0 ; j < n; j++){\n                        if(partyNum[j] == 1) {\n                            System.out.print((char)(65 + j) + \" \");\n                            partyNum[j]--;\n                            break;\n                        }\n                    }\n                }\n            }\n            for(int j = 0; j < n ; j++){\n                if(partyNum[j] == 1) {\n                    System.out.print((char)(65 + j));\n                }\n            }\n            System.out.println();\n            \n\n        }\n\n    }\n}"}
{"idx":"1331","func":"class A_1C {\n\n    public static void main(String args[]) throws IOException {\n        FileReader fileReader = new FileReader(\n                \"\/home\/parikh\/Downloads\/A-largeC.in\");\n        BufferedReader obj = new BufferedReader(fileReader);\n        PrintWriter write = new PrintWriter(new File(\"\/home\/parikh\/output.txt\"));\n        String l = obj.readLine();\n        int t = Integer.parseInt(l);\n        for (int k = 1; k <= t; k++) {\n\n            String inp = obj.readLine();\n            int n = Integer.parseInt(inp);\n            int arr[] = new int[n];\n            inp = obj.readLine();\n            String sp[] = inp.split(\" \");\n            int sum = 0;\n            for (int i = 0; i < n; i++) {\n                arr[i] = Integer.parseInt(sp[i]);\n                sum += arr[i];\n\n            }\n            StringBuilder str = new StringBuilder(\"\");\n            while (true) {\n\n                int m1 = -1;\n                int m2 = -1;\n                int max = -1;\n                for (int j = 0; j < n; j++) {\n                    if (arr[j] > max) {\n                        max = arr[j];\n                        m1 = j;\n\n                    }\n                }\n                arr[m1]--;\n                str.append((char) (m1 + 'A'));\n                if (sum % 2 == 1) {\n                    sum -= 1;\n                    str.append(\" \");\n                    continue;\n                }\n                max = -1;\n                for (int j = 0; j < n; j++) {\n                    if (j != m1 && arr[j] > max) {\n                        max = arr[j];\n                        m2 = j;\n\n                    }\n                }\n                arr[m2]--;\n                str.append((char) (m2 + 'A'));\n                str.append(\" \");\n                sum -= 2;\n                if (sum == 0)\n                    break;\n\n            }\n            System.out.println(str);\n            write.println(\"Case #\" + k + \": \" + str.toString());\n\n        }\n        write.close();\n    }\n\n}"}
{"idx":"1332","func":"class A {\n\n    static String aString = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    static int n;\n    static HashMap<Character,Integer> aList;\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/File aFile = new File(\"data.txt\");\n        Scanner s = new Scanner(System.in);\n        int numIter = s.nextInt();\n        for(int i = 0; i<numIter;i++)\n        {\n            n = s.nextInt();\n            aList = new HashMap<Character,Integer>();\n            for(int j = 0;j<n;j++)\n                aList.put(aString.charAt(j),s.nextInt());\n            System.out.print(\"Case #\" + (i+1) + \": \");\n            int count = 0;\n            int count2 = 0;\n            boolean flag = false;\n            while(Collections.max(aList.values())!=0){\n                int maxValueInMap=(Collections.max(aList.values()));\n                int tempCount = 0;\n                for (Entry<Character, Integer> entry : aList.entrySet()) {\n                    if (entry.getValue()==maxValueInMap)\n                        tempCount++;\n                }\n                if(tempCount%2==0)\n                    count = 2;\n                else\n                    count = 1;\n                count2 = 0;\n                for (Entry<Character, Integer> entry : aList.entrySet()) {\n                    if (entry.getValue()==maxValueInMap){\n                        count2++;\n                        System.out.print(entry.getKey());\n                        aList.replace(entry.getKey(), entry.getValue()-1);\n                    }\n                    if(count==count2)\n                        break;\n                }\n                if(Collections.max(aList.values())!=0)\n                    System.out.print(\" \");\n                }\n            if(i+1 != numIter)\n                System.out.println(\"\");\n        }\n\n    }\n\n}"}
{"idx":"1333","func":"class A {\n    public static void main(String[] args) throws IOException {\n        String name = \"A-large\";\n\n        Scanner in = new Scanner(new File(\"\/Users\/YunJoonSoh\/\" + name + \".in\"));\n        FileWriter fstream = new FileWriter(\"\/Users\/YunJoonSoh\/\" + name + \".out\");\n        BufferedWriter out = new BufferedWriter(fstream);\n\n        int T = Integer.parseInt(in.nextLine());\n\n        for (int t = 1; t <= T; t++) {\n            int N = Integer.parseInt(in.nextLine());\n\n            int[] S = new int[N];\n\n            for (int i = 0; i < N; i++) {\n                S[i] = in.nextInt();\n            }\n            in.nextLine(); \/\/ for end of line\n\n            String ret = \"\";\n\n            int sum = 0;\n            for (int i = 0; i < N; i++) {\n                sum += S[i];\n            }\n\n            int MAX_PARTY = 0;\n\n            while (sum > 0) {\n                \/\/ find max party and evacuate\n                for (int j = 0; j < N; j++) {\n                    if (S[MAX_PARTY] < S[j]) {\n                        MAX_PARTY = j;\n                    }\n                    \n                    if (S[j] * 2 > sum)\n                        System.out.println(\"MAJORITY\");\n                }\n\n                S[MAX_PARTY]--;\n                sum--;\n\n                \/\/ if (sum != 0) {\n\/\/                if (S[MAX_PARTY] == 0) {\n\/\/                    break;\n\/\/                }\n                \/\/ }\n                \/\/ find second max party\n                \/\/ if the new max party gets the majority\n                int MAX_PARTY_2 = 0;\n                for (int j = 0; j < N; j++) {\n                    if (S[MAX_PARTY_2] < S[j]) {\n                        MAX_PARTY_2 = j;\n                    }\n                }\n\n                \/\/ evacuate 2 people\n                if ((S[MAX_PARTY_2]) * 2 > sum) { \/\/ if runner up now is majority\n                    ret += (char) (MAX_PARTY + 'A') + \"\" + (char) (MAX_PARTY_2 + 'A') + \" \";\n                    S[MAX_PARTY_2]--;\n                    sum--;\n                } else {\n                    ret += (char) (MAX_PARTY + 'A') + \" \";\n                }\n                \/\/ }\n            }\n\n            for (int i = 0; i < N; i++) {\n                if (S[i] != 0)\n                    System.out.println(\"NOT EVACUATED\");\n            }\n\n            \/\/ System.out.println(\"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\");\n            StringBuilder s = new StringBuilder();\n            s.append(\"Case #\");\n            s.append(t);\n            s.append(\": \");\n            \/\/ answer\n            s.append(ret);\n            s.append(\"\\n\");\n            out.write(s.toString());\n            \/\/ System.out.print( + \": \");\n            System.out.println(s.toString());\n        }\n\n        out.close();\n        in.close();\n    }\n}"}
{"idx":"1334","func":"class SenateEvacuation {\n\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n        PrintWriter writer = new PrintWriter(\"\/Users\/alexpeptan\/Desktop\/Eclipse Workspace\/Google Code Jam 2016\/src\/round1C_Problem1\/1C1.out\", \"UTF-8\");\n        Scanner scanner = new Scanner(new File(\"\/Users\/alexpeptan\/Desktop\/Eclipse Workspace\/Google Code Jam 2016\/src\/round1C_Problem1\/1C1.in\"));\n        \n        int t = scanner.nextInt();\n        \n        int max = 0;\n        \n        for(int k=0; k<t; k++){\n            int n = scanner.nextInt();\n            char[] names = new char[n];\n            for(int i=0; i<n; i++){\n                names[i] = (char)('A' + i);\n            }\n            \n            int[] cnt = new int[n];\n            \n            for(int i=0; i<n; i++){\n                cnt[i] = scanner.nextInt();\n            }\n            \n            \/\/ sort\n            for(int i=0; i<n-1; i++){\n                for(int j=i+1; j<n; j++){\n                    if(cnt[i] > cnt[j]){\n                        int aux = cnt[i];\n                        cnt[i] = cnt[j];\n                        cnt[j] = aux;\n                        aux = names[i];\n                        names[i] = names[j];\n                        names[j] = (char)aux;\n                    }\n                }\n            }\n            \n            writer.print(\"Case #\" + (k+1) + \":\");\n            \n            int delta = cnt[n-1] - cnt[n-2];\n            for(int i=0; i<delta; i++){\n                writer.print(\" \" + names[n-1]);\n            }\n            \n            for(int party = 0; party <= n-3; party++){\n                for(int j=0; j<cnt[party]; j++){\n                    writer.print(\" \" + names[party]);\n                }\n            }\n            \n            for(int i=0; i<cnt[n-2]; i++){\n                writer.print(\" \" + names[n-2] + names[n-1]);\n            }\n            \n            writer.println();\n        }\n        writer.close();\n    }\n\n}"}
{"idx":"1335","func":"class Prob2A {\n    public static void main(String[] args) throws FileNotFoundException {\n        if(args.length == 1 && args[0].equals(\"test\"))\n        {\n            String path = \"C:\\\\codejam\\\\\";\n\/\/            String filename = \"input.txt\";\n            String filename = \"A-small-attempt0.in\";\n            System.setIn(new FileInputStream(new File(path + filename)));\n\n            String outputName= filename.split(\"\\\\.\")[0] + \".out\";\n            System.setOut(new PrintStream(new File(path + outputName)));\n        }\n\n\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\n        int tests = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        for (int test = 1; test <= tests; ++test) {\n            StringBuilder result = new StringBuilder();\n            int n = in.nextInt();\n            int[] arr = new int[n];\n            for(int i=0; i<n; i++)\n                arr[i] = in.nextInt();\n\n            int max1 = 0;\n            int pos1 = 0;\n            int max2 = 0;\n            int pos2 = 0;\n            for(int i=0; i<n; i++)\n            {\n                if(arr[i] > max1)\n                {\n                    max2 = max1;\n                    pos2 = pos1;\n                    max1 = arr[i];\n                    pos1 = i;\n                } else if(arr[i] > max2)\n                {\n                    max2 = arr[i];\n                    pos2 = i;\n                }\n            }\n\n\/\/            System.err.println(\"max1: \" + max1);\n\/\/            System.err.println(\"max2: \" + max2);\n            while(max1 > max2)\n            {\n                result.append((char)('A' + pos1) + \" \");\n                max1--;\n            }\n            while(max2 > max1)\n            {\n                result.append((char)('A' + pos2) + \" \");\n                max2--;\n            }\n            for(int i=0; i<n; i++)\n            {\n                if(i == pos1 || i == pos2)\n                    continue;\n                while(arr[i] > 0)\n                {\n                    result.append((char)('A' + i) + \" \");\n                    arr[i]--;\n                }\n            }\n            String finalString = \"\" + (char)('A'+pos1) + (char)('A'+pos2) + \" \";\n            for(int i=0; i<max1; i++)\n                result.append(finalString);\n\n\n\n            System.out.println(\"Case #\" + test + \": \" + result);\n        }\n\n\n    }\n}"}
{"idx":"1336","func":"class A {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        String name = \"A\";\n        \/\/ TODO READER\n        boolean isSmall = false;\n\n        BufferedReader br;\/\/= new BufferedReader(new FileReader(\"bum.in\"));\n        if(isSmall) br = new BufferedReader(new FileReader(name+\"-small-attempt0.in\"));\n        else br = new BufferedReader(new FileReader(name+\"-large.in\"));\n\n        PrintWriter pw;\n        if(isSmall) pw = new PrintWriter(name+\"-small.txt\", \"UTF-8\");\n        else pw = new PrintWriter(name+\"-large.txt\", \"UTF-8\");\n\n        int T=Integer.parseInt(br.readLine());\n        for(int i = 0; i < T; i++){\n            int N=Integer.parseInt(br.readLine());\n            String[] tab =br.readLine().split(\" \");\n            int[] bff = new int[N];\n\n            for(int j = 0; j < N; j++){\n                bff[j]=Integer.parseInt(tab[j]);\n            }\n            int index1=-1;\n            int index2 =-1;\n            for(int i1=0;i1<N;i1++){\n                if(index1<0 ||bff[index1]<bff[i1]){\n                    index1=i1;\n                }\n            }\n            for(int i3=0;i3<N;i3++){\n                if((index2<0 ||bff[index2]<bff[i3])&&i3!=index1){\n                    index2=i3;\n                }\n            }\n            String res=\"\";\n            for(int j=0; j<bff[index1]-bff[index2];j++){\n                res+=((char)(65+index1))+\" \";\n            }\n            for(int j=0; j<N;j++){\n                if(j!=index1&&j!=index2){\n                    for(int i2=0;i2<bff[j];i2++){\n                        res+=((char)(65+j))+\" \";\n                    }\n                }\n            }\n            for(int j=0; j<bff[index2];j++){\n            \n            \n                        res+=\"\"+((char)(65+index1))+((char)(65+index2))+\" \";\n            \n            \n            }\n            String a = res;\n\n\n            System.out.print(\"Case #\"+(i+1)+\": \"+a+\"\\n\");\n            pw.write(\"Case #\"+(i+1)+\": \"+a+\"\\n\");\n\n        }\n        pw.close();\n    }\n}"}
{"idx":"1337","func":"class s{\n    public static void main(String args[]){\n        Scanner in = new Scanner (new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        int re[] = new int[27];\n        int n = 0;\n        int max1 = 0;\n        int maxf1 = 0;\n        int max2 = 0;\n        int maxf2 = 0;\n        int sum = 0;\n        int temp = 'A' - 1;\n        for (int i = 1; i <= t; i++){\n            n = in.nextInt();\n            Arrays.fill(re, 0);\n            max1 = 0;\n            maxf1 = 0;\n            max2 = 0;\n            maxf2 = 0;\n            sum = 0;\n            System.out.print(\"Case #\" + i +\": \");\n            for (int j = 1; j <= n; j++){\n                re[j] = in.nextInt();\n                sum += re[j];\n                if (max1 <= re[j]) {\n                    max2 = max1;\n                    maxf2 = maxf1;\n                    max1 = re[j];\n                    maxf1 = j;\n                }\n            }\n            if (maxf1 == 1){\n                for (int j = 2; j <= n; j++){\n                if (max2 <= re[j]) {\n                    max2 = re[j];\n                    maxf2 = j;\n                }\n            }\n            }\n            while(sum != 0){\n                if (sum != 3){\n                    re[maxf1]--;\n                    max1--;\n                    System.out.printf(\"%c\" ,(maxf1 + temp));\n                    if (max1 >= max2){\n                        re[maxf1]--;\n                        max1--;\n                        System.out.printf(\"%c \",(maxf1 + temp));\n                        }\n                    else{\n                        re[maxf2]--;\n                        max2--;\n                        System.out.printf(\"%c \", (maxf2 + temp));\n                    }\n                    sum -= 2;\n                }\n                else {sum--;\n                    re[maxf1]--;\n                    max1--;\n                    System.out.printf(\"%c \", (maxf1 + temp));\n                }\n                for (int j = 1; j <= n; j++){\n                    if (max1 <= re[j] && maxf1 != j) {\n                    max2 = max1;\n                    maxf2 = maxf1;\n                    max1 = re[j];\n                    maxf1 = j;\n                    }\n                }\n            }\n            System.out.println();\n        }\n    }    \n}"}
{"idx":"1338","func":"class Main {\n    static Scanner scanner;\n    static PrintWriter writer;\n    static String name = \"A-small-attempt0\";\n\n    public static void main(String[] args) throws IOException {\n        scanner = new Scanner(new BufferedReader(new FileReader(new File(name + \".in\"))));\n        writer = new PrintWriter(new FileWriter(new File(name + \".out\")));\n\n        int t = scanner.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n            writer.print(\"Case #\" + i + \": \");\n            int max = scanner.nextInt();\n            int[] count = new int[14];\n            int total = 0;\n            int[] save = new int[3];\n            \n            for (int i1 = 0; i1 < max; i1++) {\n                count[i1] = scanner.nextInt();\n                total += count[i1];\n            }\n            \n            while (total > 0) {\n                int m = -1;\n                int s = 0;\n                for (int i3 = 0; i3 < max && s <= 2; i3++) {\n                    if (count[i3] > m) {\n                        m = count[i3];\n                        s = 0;\n                        save[s] = i3;\n                        s++;\n                    }\n                    else if (count[i3] == m) {\n                        save[s] = i3;\n                        s++;\n                    }\n                }\n            \n                if (s > 2) {\n                    s = 1;\n                }\n            \n                for (int i2 = 0; i2 < s; i2++) {\n                    writer.print((char)('A' + save[i2]));\n                    count[save[i2]]--;\n                    total--;\n                }\n            \n                writer.print(' ');\n            }\n            \n            writer.println();\n        }\n\n        writer.close();\n        scanner.close();\n    }\n}"}
{"idx":"1339","func":"class Main {\n    public static void main(String[] args) throws Exception {\n        String in = \"d:\/A-large (1).in\";\n        String out = \"d:\/a.out\";\n        BufferedReader reader = new BufferedReader(new FileReader(in));\n        BufferedWriter write = new BufferedWriter(new FileWriter(out));\n        String line = reader.readLine();\n        int T = Integer.parseInt(line);\n        for (int i = 0; i < T; i++) {\n            int N = Integer.parseInt(reader.readLine());\n            String[] nums = reader.readLine().split(\" \");\n            String string = \"\";\n            List<StringBuilder> list = new ArrayList<StringBuilder>();\n            int sum = 0;\n            for (int j = 0; j < nums.length; j++) {\n                int n = Integer.parseInt(nums[j]);\n                sum += n;\n                StringBuilder line1 = new StringBuilder();\n                for (int i1 = 0; i1 < n; i1++) {\n                    line1.append((char) ('A' + j));\n                }\n                list.add(line1);\n            }\n            \n            int index = 0;\n            while (sum-- > 0) {\n            \n                for (StringBuilder builder : list) {\n                    try {\n                        string += builder.charAt(index);\n                    } catch (Exception e) {\n                    }\n                }\n                index++;\n            }\n            StringBuilder stringBuilder = new StringBuilder(string);\n            StringBuilder reverse = stringBuilder.reverse();\n            string = \"\";\n            if (reverse.length() % 2 == 0) {\n                for (int p = 0; p < reverse.length() - 2; p += 2) {\n                    string = string + reverse.charAt(p) +  reverse.charAt(p + 1) + \" \";\n                }\n            } else {\n                for (int p = 0; p < reverse.length() - 3; p += 2) {\n                    string = string + reverse.charAt(p) +  reverse.charAt(p + 1) + \" \";\n                }\n                string = string + reverse.charAt(reverse.length() -3) + \" \";\n            }\n            string = string + reverse.substring(reverse.length() - 2);\n            String solve = string;\n            write.write(\"Case #\" + (i + 1) + \": \" + solve + \"\\r\\n\");\n        }\n\n        reader.close();\n        write.close();\n    }\n}"}
{"idx":"1340","func":"class Main {\n    \n    public static void main(String[] args) throws Exception {\n\n    \/*        \n        FileInputStream fin=new FileInputStream(\"C:\/Users\/4dm1n\/Desktop\/A-large.in\");\n        BufferedReader br=new BufferedReader(new InputStreamReader(fin));    \n        File myfile=new File(\"C:\/Users\/4dm1n\/Desktop\/z_output.out\");\n        RandomAccessFile rand=new RandomAccessFile(myfile,\"rw\");\n    *\/        \n        \n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        \n        \n        int t,n,m,j,l,i,k,p,c,r,tt,arr[];\n        long ff,ll;\n        String s[];\n        char sf[],sl[];\n        StringBuilder sb;\n        t=Integer.parseInt(br.readLine());\n        for(tt=1;tt<=t;tt++){\n            sb=new StringBuilder(\"Case #\"+tt+\": \");\n            \n            n=Integer.parseInt(br.readLine());\n            arr=new int[n];\n            s=br.readLine().split(\" \");\n            for(i=0;i<n;i++){\n                arr[i]=Integer.parseInt(s[i]);\n            }\n            c=0;\n            for(i=1000;i>1;i--){\n                for(j=0;j<n;j++){\n                    if(arr[j]==i){\n                        c++;\n                        if(c%2==1) sb.append((char)(j+65));\n                        else sb.append(((char)(j+65))+\" \");\n                        arr[j]--;\n                    }\n                }\n            }\n            if(c%2==1){\n                sb.append(\" \");\n            }\n            c=0;\n            for(j=0;j<n;j++) if(arr[j]>0) c++;\n            if(c%2==1){\n                for(i=1;i<=1;i++){\n                    c=0;\n                    for(j=0;j<n;j++){\n                        if(arr[j]==1){\n                            c=1;\n                            sb.append((char)(j+65)+\" \");\n                            arr[j]--;\n                        }\n                        if(c==1) break;\n                    }\n                    if(c==1) break;\n                }\n            }\n            for(i=1;i<=1;i++){\n                c=0;\n                for(j=0;j<n;j++){\n                    if(arr[j]==i){\n                        c++;\n                        if(c%2==1) sb.append((char)(j+65));\n                        else sb.append(((char)(j+65))+\" \");\n                        arr[j]--;\n                    }\n                }\n            }\n            \n            \n            \n            \n            \n            sb.append(\"\\n\");\n\/\/            rand.writeBytes(sb.toString());\n            System.out.print(sb);\n        }\n    }\n}"}
{"idx":"1341","func":"class SenateEvac {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        \n        File testFile = new File(\"e:\\\\Users\\\\Ricardo\\\\Documents\\\\CodeJam\\\\SenateEvac\\\\A-large.in\");\n        \n        Scanner in=null;\n        try {\n            in = new Scanner(testFile);\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        if (in==null){\n            return;\n        }\n        Integer testCases = in.nextInt();\n        in.nextLine();\n\n        for (Integer currentCase = 0; currentCase < testCases; currentCase++) {\n            Integer partyNumber = in.nextInt();\n            Integer totalSenators = 0;\n            in.nextLine();\n            int[] partyMembers = new int[partyNumber];\n            System.out.print(String.format(\"Case #%d: \",currentCase+1));\n            for(Character nextCharacter='A';nextCharacter<'A'+partyNumber;nextCharacter++){\n                Integer senatorsInParty = in.nextInt();\n                partyMembers[nextCharacter - 'A'] = senatorsInParty;\n                totalSenators+=senatorsInParty;\n            }\n            while(totalSenators>0){\n                ArrayList<Integer>evacuees =new ArrayList<Integer>();\n                int lastCandidate = -1;\n                for (int i=0;i<partyNumber;i++){\n                    if (partyMembers[i]>0){\n                        \/\/MUST evacuate\n                        if (partyMembers[i]>(totalSenators-1)\/2){\n                            evacuees.add(i);\n                            if (evacuees.size()==2){\n                                break;\n                            }\n                        }            \n                        else{\n                            if (evacuees.size()==0){\n                                lastCandidate = i;\n                            }                            \n                        }\n                    }\n                }\n                if (evacuees.size()==0){\n                    evacuees.add(lastCandidate);\n                }\n                for (Integer nextEvacuee:evacuees){\n                    partyMembers[nextEvacuee]-=1;  \n                    System.out.print((char)( nextEvacuee+'A'));\n                    totalSenators--;\n                }\n                if (totalSenators>0) System.out.print(\" \");\n            }\n            System.out.println();\n            if (currentCase+1<testCases){\n                in.nextLine();\n            }\n        \n        }\n\n        in.close();\n\n    }\n\n}"}
{"idx":"1342","func":"class A {\n    private static Scanner in;\n    private static PrintWriter out;\n    private static final boolean USE_FILE = true;\n    private static final String FILE_NAME = \"A-large\";\n\n    public static void main(String[] args) throws IOException {\n        in = new Scanner(new BufferedReader(new InputStreamReader(USE_FILE ? new FileInputStream(FILE_NAME + \".in\") : System.in)));\n        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(USE_FILE ? new FileOutputStream(FILE_NAME + \".out\") : System.out)));\n        \n        int testCount = in.nextInt();\n        for (int test = 0; test < testCount; test++) {\n            int N = in.nextInt();\n            int[] a = new int[N];\n            for (int i = 0; i < N; i++) {\n                a[i] = in.nextInt();\n            }\n            \n            String res = \"\";\n            int max = 0;\n            int nz = 0;\n            int z1 = -1;\n            int z2 = -1;\n            while (true) {\n                for (int i = 0; i < a.length; i++) {\n                    if (a[i] > a[max]) {\n                        max = i;\n                    }\n                    if (a[i] > 0) {\n                        nz++;\n                        z2 = z1;\n                        z1 = i;\n                    }\n                }\n                if (nz == 0) {\n                    break;\n                }\n                if (nz == 1 || nz > 2) {\n                    res += (char)('A' + max) + \" \";\n                    a[max]--;\n                }\n                if (nz == 2) {\n                    if (a[z1] == a[z2]) {\n                        res += (char)('A' + z1) + \"\" +  (char)('A' + z2) + \" \";\n                        a[z1]--;\n                        a[z2]--;\n                    } else {\n                        res += (char)('A' + max) + \" \";\n                        a[max]--;\n                    }\n                }\n                max = 0;\n                nz = 0;\n                z1 = -1;\n                z2 = -1;\n            }\n            out.println(\"Case #\" + (test + 1) + \": \" + res.trim());\n        }\n        \n        in.close();\n        out.close();\n    }\n}"}
{"idx":"1343","func":"static void main(String[] args) \n    {\n        Scanner sc = new Scanner( System.in );\n int t=sc.nextInt();\n for(int r=1;r<=t;r++)\n {\n        int n, i;\n        n = sc.nextInt();\n        int ar[] = new int[ n ];\n        char br[] = new char[ n ];\n        char cha='A';\n        int s=0;\n        for (i = 0; i < n; i++)\n            {ar[i] = sc.nextInt();\n            s+=ar[i];\n            br[i]=cha++;}\n            int N = ar.length;\n        int  j, pos, temp;\n        for (i = 0; i < N-1; i++)\n        {\n            pos = i;\n            for (j = i+1; j < N; j++)\n            {\n                if (ar[j] < ar[pos])\n                {\n                    pos = j;\n                }\n            }\n            char tt=' ';\n            \/* Swap arr[i] and arr[pos] *\/\n            temp = ar[i];tt=br[i];\n            ar[i] = ar[pos];br[i]=br[pos];\n            ar[pos]= temp;            br[pos]=tt;\n        }        \n    System.out.print(\"Case #\");\n    System.out.print(r);\n       System.out.print(\":\");\n       System.out.print(\" \");\n            double ss=(double)s;\n        while(s>0)\n        { i=n-1;\n                       if( (double)s-2>=(double)s\/2 || (s-2)==0)\n            {System.out.print(br[i] );\n            System.out.print(br[i-1] );\n            System.out.print(\" \" );\n            ar[i]--; ar[i-1]--;s=s-2;}\n            else{\n            ar[i]--;\n            s=s-1;\n            System.out.print(br[i]);\n                     System.out.print(\" \" );\n            }\n                 \n                   for (int ii = 0; ii < N-1; ii++)\n        {\n            pos = ii;\n            for (j = ii+1; j < N; j++)\n            {\n                if (ar[j] < ar[pos])\n                {\n                    pos = j;\n                }\n            }\n             char tt=' ';\n            \/* Swap arr[i] and arr[pos] *\/\n            temp = ar[ii];tt=br[ii];\n            ar[ii] = ar[pos];br[ii]=br[pos];\n            ar[pos]= temp;            br[pos]=tt;\n        }        \n        \n    }\n    System.out.println();\n }\n}}"}
{"idx":"1344","func":"class Solution {\n    \n    public static void main(String[] args) {\n        \/* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. *\/\n    Scanner scnr=new Scanner(System.in);\n   \n    int t=scnr.nextInt();\n    String ans[]=new String[t];\n    for(int i=0;i<t;i++){\n        StringBuilder evac=new StringBuilder();\n    int n=scnr.nextInt();\n    int[] parties=new int[n];\n    int pcount=0;\n    for(int j=0;j<n;j++){\n        parties[j]=scnr.nextInt();\n        pcount+=parties[j];\n    }\n    while(pcount>0){\n        int max=0,smax=0,tmax=0;\n        char c='A',d='A';\n        for(int j=0;j<n;j++){\n            if(parties[j]>=parties[max]){\n                tmax=smax;\n                smax=max;\n                max=j;\n            }\n        }\n            if(parties[max]==parties[smax]&&parties[max]==parties[tmax]&&smax!=tmax){\n                if(parties[max]>0){parties[max]-=1;\n                c+=max;\n                evac.append(c);\n                pcount-=1;\n                }\n            }\n            else if(parties[max]-parties[smax]>1){\n                if(parties[max]>0){parties[max]-=1;\n                c+=max;\n                evac.append(c);\n                pcount-=1;\n                }\n                if(parties[max]>0){parties[max]-=1;\n                evac.append(c);\n                pcount-=1;\n                }\n            }\n            else{\n            if(parties[max]>0){    parties[max]-=1;\n                c+=max;\n                evac.append(c);\n                pcount-=1;}\n            if(parties[smax]>0){parties[smax]-=1;\n                d+=smax;\n                evac.append(d);\n                pcount-=1;}\n            }\n            evac.append(\" \");\n        }\n    ans[i]=evac.toString();\n    }\n    \n        \n   \n    for(int i=0;i<t;i++){\n        System.out.println(\"Case #\"+(i+1)+\": \"+ans[i]);\n    }\n    } \n    }"}
{"idx":"1345","func":"class CodeJam {\n    \n    public static void main(String[] args) throws NumberFormatException, IOException {\n             BufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\n             BufferedWriter bw=new BufferedWriter(new FileWriter(\"es1.txt\"));\n            \n            int T,N=0;\n            String l;\n               T = Integer.valueOf(br.readLine());\n            for (int i=0;i<T;i++){\n                  bw.write(\"Case #\"+(i+1)+\": \");\n                N = Integer.valueOf(br.readLine());\n                int []A = new int[N];\n                l=br.readLine();\n                \n                for(int k=0;k<N;k++)\n                    A[k]=Integer.valueOf(l.split(\" \")[k]);\n                \n                int max=0;\n                while(true){\n                    max=0;\n                    int secondmax=0;\n                    int two=0;\n                    for(int j=0;j<N;j++){\n                        if(A[j]>A[max])max=j;\n                        if(diffz(A)!=3)if(A[j]==A[max]&&j!=max){two=1;secondmax=j;}\n                        \n                        }\n                       \n                    if (A[max]==0)break;\n                    A[max]--;\n                    if( two==1)\n                    {    \n                        A[secondmax]--;\n                        int i1 = secondmax+1;\n                        String b = i1 > 0 && i1 < 27 ? String.valueOf((char)(i1 + 64)) : null;\n                        bw.write(b);\n                        System.out.print(b);\n                    }\n                    int i1 = max+1;\n                    String a = i1 > 0 && i1 < 27 ? String.valueOf((char)(i1 + 64)) : null;\n                    bw.write(a+\" \");\n                    System.out.print(a+\" \");    \n                }\n                System.out.println();\n                bw.newLine();\n            }\n            br.close();\n            bw.close();\n       }\n    private static int diffz(int[] A) {\n        int a=0;\n        for(int j=0;j<A.length;j++)if(A[j]!=0)a++;\n        return a;\n    }\n}"}
{"idx":"1346","func":"class A {\n    \n    private static final String ALPHA = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n    public static void main(String[] args) throws Exception {\n        PrintWriter pw = new PrintWriter(\"A-large.out\");\n        br = new BufferedReader(new FileReader(\"A-large.in\"));\n        \n        int t = Integer.parseInt(next());\n        \n        for (int test = 1; test <= t; test++) {\n            pw.printf(\"Case #%d:\", test);\n            \n            int n = Integer.parseInt(next());\n            \n            int total = 0;\n            int[] s = new int[n];\n            for (int i = 0; i < n; i++) {\n                s[i] = Integer.parseInt(next());\n                total += s[i];\n            }\n            \n            while (total > 0) {\n                String a = \"\";\n                for (int j = 0; j < 2; j++) {\n                    int m = 0;\n                    for (int i = 1; i < n; i++) {\n                        if (s[i] > s[m]) {\n                            m = i;\n                        }\n                    }\n                    s[m]--;\n                    if (j == 1) {\n                        int m2 = 0;\n                        for (int i = 1; i < n; i++) {\n                            if (s[i] > s[m2]) {\n                                m2 = i;\n                            }\n                        }\n                        if (s[m2] > (total - 1) \/ 2) {\n                            s[m]++;\n                            break;\n                        }\n                    }\n                    a += ALPHA.charAt(m);\n                    total--;\n                }\n                \n                pw.print(\" \" + a);\n            }\n            pw.println();\n        }\n        pw.close();\n    }\n    \n    static BufferedReader br = new BufferedReader(new InputStreamReader(\n            System.in));\n    static PrintWriter out = new PrintWriter(new BufferedWriter(\n            new OutputStreamWriter(System.out)));\n    static StringTokenizer st;\n\n    static String next() throws IOException {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine().trim());\n        return st.nextToken();\n    }\n}"}
{"idx":"1347","func":"class ProblemASmall {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(\n                System.in)));\n        in = new Scanner(new File(\"A-large.in\"));\n        \n        int T = in.nextInt();\n        for (int i=1; i<=T; i++) {\n            int N = in.nextInt();\n            \n            int[] P = new int[N];\n            int total = 0;\n            for (int j=0; j<N; j++) {\n                P[j] = in.nextInt();\n                total += P[j];\n            }\n            \n            StringBuilder sb = new StringBuilder();\n            while (total > 0) {\n                int max1 = 0;\n                int max2 = 0;\n                int max1Idx = 0;\n                int max2Idx = 0;\n                for (int k=0; k<N; k++) {\n                    if (P[k] > max1) {\n                        max2 = max1;\n                        max1 = P[k];\n                        max2Idx = max1Idx;\n                        max1Idx = k;\n                    } else if (P[k] > max2) {\n                        max2 = P[k];\n                        max2Idx = k;\n                    }\n                }\n                \n                sb.append(' ');\n                if (P[max1Idx] > 1 && max2*2 <= total-2) {\n                    P[max1Idx] -= 2;\n                    total -= 2;\n                    sb.append((char)('A'+max1Idx));\n                    sb.append((char)('A'+max1Idx));\n                } else if (max2*2 <= total-1) {\n                    P[max1Idx]--;\n                    total--;\n                    sb.append((char)('A'+max1Idx));\n                } else {\n                    P[max1Idx]--;\n                    P[max2Idx]--;\n                    total -= 2;\n                    sb.append((char)('A'+max1Idx));\n                    sb.append((char)('A'+max2Idx));\n                }\n            }\n            \n            System.out.printf(\"Case #%d:%s\\n\", i, sb.toString());\n        }\n    }\n}"}
{"idx":"1348","func":"class SenateEvacuation {\n\n  public static void main(String[] args) throws Exception {\n    FileInputStream is = new FileInputStream(new File(args[0]));\n    InputStreamReader isr = new InputStreamReader(is);\n    BufferedReader br = new BufferedReader(isr);\n    String line = br.readLine();\n    int testCase = 1;\n\n    \/\/ ---each case\n    while ((line = br.readLine()) != null) {\n\n      \/\/ entradas\n      int N = Integer.parseInt(line);\n      line = br.readLine();\n      String[] sForPartiesString = line.split(\" \");\n      int[] sForParties = new int[sForPartiesString.length];\n      int cantidad = 0;\n      for (int i = 0; i < sForParties.length; i++) {\n        sForParties[i] = Integer.parseInt(sForPartiesString[i]);\n        cantidad += sForParties[i];\n      }\n      int mitad = cantidad \/ 2;\n      \/\/ ---\n\n      List<String> toOut = new ArrayList<String>();\n      while (cantidad > 0) {\n\n        int mayor = Integer.MIN_VALUE;\n        for (int i1 = 0; i1 < sForParties.length; i1++) {\n          if (sForParties[i1] > mayor) {\n            mayor = sForParties[i1];\n          }\n        }\n        int maximo = mayor;\n\/\/        System.out.println(\"maximo:\" + maximo);\n\/\/        System.out.println(\"cantidad:\" + cantidad);\n\n        if (sForParties.length == 2) {          \n          toOut.add(\"AB\");\n          cantidad -= 2;\n          continue;\n        } else {\n\n          if (cantidad == 2) {\n            String out = \"\";\n            for (int i = 0; i < sForParties.length; i++) {\n              if (sForParties[i] == maximo) {\n                out += String.valueOf(Character.toChars(65 + i));\n                sForParties[i] = sForParties[i] - 1;\n              }\n            }\n            \/\/ System.out.println(\"agrego: \" + out);\n            toOut.add(out);\n          } else {\n            String out = \"\";\n            for (int i = 0; i < sForParties.length; i++) {\n              if (sForParties[i] == maximo) {\n\n                out += String.valueOf(Character.toChars(65 + i));\n                sForParties[i] = sForParties[i] - 1;\n                break;\n              }\n            }\n\n            toOut.add(out);\n          }\n        int cantidad1 = 0;\n        for (int i = 0; i < sForParties.length; i++) {\n          cantidad1 += sForParties[i];\n        }\n          \n          cantidad = cantidad1;\n        }\n\n      }\n\n\/\/      System.out.println(toOut);\n      System.out.format(\"Case #%d:\", testCase);\n      for (int i = 0; i < toOut.size(); i++) {\n        System.out.print(\" \" + toOut.get(i));\n      }\n      System.out.println(\"\");\n      testCase++;\n\n    }\n\n    br.close();\n  }\n\n}"}
{"idx":"1349","func":"class A {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String[] l = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\n        int T = in.nextInt();\n        for (int i = 0; i < T; i++) {\n            System.out.printf(\"Case #%d: \",i+1);\n            int N = in.nextInt();\n            int[] array = new int[N];\n            for (int i1 = 0; i1 < N; i1++) {\n                array[i1] = in.nextInt();\n            }\n            int[] sen = array;\n            int sum = 0;\n            for (int j = 0; j < N; j++) {\n                sum += sen[j];\n            }\n            while(sum > 0){\n                if (sum > 2 && sum % 2 == 0){\n                    int conteo = 0;\n                    for (int j = 0; j < N; j++) {\n                        if(sen[j] == sum\/2){\n                            conteo++;\n                        }\n                    }\n                    if (conteo == 2){\n                        for (int j = 0; j < N; j++) {\n                            if(sen[j] == sum\/2){\n                                sen[j]--;\n                                System.out.print(l[j]);\n                            }\n                        }\n                        sum = sum - 2;\n                        System.out.print(\" \");\n                        continue;\n                    }\n                }\n                if(sum == 2){\n                    for (int j = 0; j < N; j++) {\n                        if(sen[j]>0) {\n                            System.out.print(l[j]);\n                            sen[j]--;\n                        }\n                    }\n                    sum = sum - 2;\n                    System.out.print(\" \");\n                }\n                else{\n                    int mayor1 = Integer.MIN_VALUE;\n                    int index = 0;\n                    for (int i1 = 0; i1 < sen.length; i1++) {\n                        if(sen[i1] > mayor1){\n                            mayor1 = sen[i1];\n                            index = i1;\n                        }\n                    }\n                    int mayor = index;\n                    System.out.print(l[mayor]+\" \");\n                    sen[mayor]--;\n                    sum--;\n                }\n                for (int j = 0; j < N; j++) {\n                    double p = 0;\n                    if(sum != 0){\n                        p = 100*sen[j]\/sum;\n                    }\n                    if(p > 50) System.out.println(\"ERROOOOOOOOOR\");\n                }\n            }\n            System.out.println();\n        }\n    }\n    \n}"}
{"idx":"1350","func":"class Problem1 {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        for (int testCase = 1; testCase <= t; testCase++) {\n            int n = in.nextInt();\n            int p[] = new int[n];\n            int total = 0;\n            for (int i = 0; i < n; i++) {\n                p[i] = in.nextInt();\n                total += p[i];\n            }\n            StringBuilder sb = new StringBuilder();\n            while (total > 0) {\n                sb.append(\" \");\n                int max = 0;\n                for (int i1 = 1; i1 < p.length; i1++) {\n                    if (p[i1] > p[max]) {\n                        max = i1;\n                    }\n                }\n                int i = max;\n                total -= 1;\n                p[i] -= 1;\n                sb.append((char) ('A' + i));\n                for (int j = 0; j < n; j++) {\n                    if (p[j] * 1.0 \/ total > 0.5) {\n                        total -= 1;\n                        p[j] -= 1;\n                        sb.append((char)('A' + j));\n                    }\n                }\n            }\n            System.out.println(\"Case #\" + testCase + \":\" + sb.toString());\n        }\n        in.close();\n    }\n}"}
{"idx":"1351","func":"class SenateEvacuation {\n    public static void main(String args[]) throws FileNotFoundException, IOException{\n        \/\/Scanner in=new Scanner(System.in);\n        Scanner in=new Scanner(new FileReader(\"E:\\\\a.in\"));\n        PrintWriter out=new PrintWriter(new FileWriter(\"E:\\\\a.out\"));\n        int t=in.nextInt();\n        for(int z=1;z<=t;z++){\n            int n=in.nextInt();\n            int arr[]=new int[n];\n            System.out.println(n);\n            StringBuilder str=new StringBuilder(\"\");\n            for(int i=0;i<n;i++){\n                arr[i]=in.nextInt();\n                System.out.print(arr[i]+\" \");\n            }\n            System.out.println();\n            int count=1;\n            \/\/System.out.print(\"Case #\"+z+\": \");\n            \/\/out.print(\"Case #\"+z+\": \");\n            str.append(\"Case #\"+z+\": \");\n            while(true){\n                if(count%3==0){\n                    \/\/System.out.print(\" \");\n                    \/\/out.print(\" \");\n                    str.append(\" \");\n                    count++;\n                }\n                int max=Integer.MIN_VALUE;\n                for(int i=0;i<n;i++){\n                    if(arr[i]>max)\n                        max=arr[i];\n                }\n                if(max==0){\n                    break;\n                }\n                for(int i=0;i<n;i++){\n                    if(arr[i]==max){\n                        \/\/System.out.print((char)(i+'A'));\n                        \/\/out.print((char)(i+'A'));\n                        str.append((char)(i+'A'));\n                        arr[i]--;\n                        break;\n                    }\n                }\n                count++;\n            }\n            if(str.charAt(str.length()-2)==' '){\n                System.out.println(str);\n                char ch=str.charAt(str.length()-3);\n                str.replace(str.length()-3, str.length()-1, \" \"+ch);\n            }\n            \n            System.out.println(str);\n            out.println(str);\n        }\n        out.close();\n    }\n}"}
{"idx":"1352","func":"int compareTo(Solution otherRequest)\n    {\n            return Integer.compare(no, otherRequest.no);\n    } \n\n\n\n\n    public static void main(String[] args)\n    {\n        Scanner in=new Scanner(System.in);\n       int t=in.nextInt();\n       for(int k=1;k<=t;k++)\n       {\n                  System.out.print(\"Case #\"+k+\": \");\n                  int n=in.nextInt();\n                  ArrayList<Solution> party=new ArrayList<Solution>();\n                  for(int i=0;i<n;i++)\n                  {\n                    int p=in.nextInt();\n                    party.add(new Solution((char)(i+'A'),p));\n                  }\n                  \n                    \/\/System.out.println(party.get(n-1).alpha);\n                    Collections.sort(party);\n                  while(!party.isEmpty() && party.get(n-1).no!=0)\n                  {\n                        if(party.get(n-1).no==1)\n                        {\n                          for(int i=0;i<n-2;i++)\n                          {\n                            if(party.get(i).no!=0)\n                            {\n                               party.get(i).no--;\n                               System.out.print((char)party.get(i).alpha);\n                               System.out.print(\" \");\n                             }\n                          }\n                        }\n                       if(party.get(n-1).no!=0&&party.get(n-2).no!=0)\n                       {\n                        party.get(n-1).no--;\n                        party.get(n-2).no--;\n                        System.out.print((char)party.get(n-1).alpha);\n                        System.out.print((char)party.get(n-2).alpha);\n                        System.out.print(\" \");\n                       }\n                       else if(party.get(n-2).no==0)\n                       {\n                        party.get(n-1).no--;\n                        \/\/party.get(n-2).no--;\n                        System.out.print((char)party.get(n-1).alpha);\n                        System.out.print(\" \");\n                       }\n                       Collections.sort(party);\n\n                       \/*for(int i=0;i<n;i++)\n                        if(party.get(i).no!=0)break;\n                       else party.remove(i);*\/\n\n                  }\n\n               System.out.println();   \n                  \n               \n       }\n    }\n }"}
{"idx":"1353","func":"class Senate{\n\n    public static void main(String[] args) throws FileNotFoundException {\n        PrintWriter out = new PrintWriter(new File(\"Senate.out\"));\n        \/\/Scanner s = new Scanner(System.in);\n        Scanner s = new Scanner(new File(\"A-large.in\"));\n        int t = s.nextInt();\n        for(int tests = 0; tests < t; ++tests) {\n            out.print(\"Case #\" + (tests + 1) + \": \");\n            int n = s.nextInt();\n            int total = 0;\n            int senate[] = new int[n];\n            for(int i = 0; i < n; ++i) {\n                senate[i] = s.nextInt();\n                total += senate[i];\n            }\n            boolean formatstarted = false;\n            while(total != 0) {\n                if(formatstarted)\n                    out.print(\" \");\n                int total1 = total;\n                int highest = -1;\n                int next = -1;\n                int temp = 0;\n                boolean onlyone = false;\n                boolean usenext = true;\n                int check = -1;\n                \/\/ find highest, remove from array\n                \/\/ find next, remove\n                for(int i = 0; i < n; ++i) {\n                    if(senate[i] > temp) {\n                        highest = i;\n                        temp = senate[i];\n                    }\n                }\n                --senate[highest];\n                --total1;\n                temp = 0;\n                for(int i = 0; i < n; ++i) {\n                    if(senate[i] > temp) {\n                        next = i;\n                        temp = senate[i];\n                    }\n                }\n                \n                out.print((char) (highest + 'A'));\n                \n                if(next >= 0) {\n                    --senate[next];\n                    --total1;\n                    temp = 0;\n                    for(int i = 0; i < n; ++i) {\n                        if(senate[i] > 0 && !onlyone) {\n                            temp = 1;\n                            onlyone = true;\n                            usenext = false;\n                        }\n                        else if(senate[i] > 0 && onlyone) {\n                            usenext = true;\n                            break;\n                        }\n                    }\n                    if(usenext && next >= 0) {\n                        out.print((char) (next + 'A'));\n                    }\n                    else if (!usenext && next >= 0) {\n                        ++senate[next];\n                        ++total1;\n                    }\n                }\n                total = total1;\n                formatstarted = true;\n            }\n            out.println();\n        }\n        out.close();\n    }\n}"}
{"idx":"1354","func":"class Problem1 {\n\n    private static boolean debug = false;\n\n    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt();\n\n        for (int _t = 1; _t <= t; _t++) {\n\n            int n = sc.nextInt(); sc.nextLine();\n            int[] p = new int[n];\n            int total = 0;\n            char ich = 'A';\n            int max = -1;\n            char[] labels = new char[n];\n            for (int i=0; i < n; i++) {\n                p[i] = sc.nextInt();\n                total += p[i];\n                labels[i] = ich;\n                ich++;\n                if (p[i] > max) {\n                    max = p[i];\n                }\n            }\n            StringBuilder sb = new StringBuilder();\n                    Stack<Character> s = new Stack<>();\n            \n                    while (s.size() != total) {\n            \n                        for (int i=0; i<n; i++) {\n            \n                            if (p[i] > 0) {\n                                sb.append(labels[i]);\n                                s.push(labels[i]);\n                                p[i]--;\n                            }\n                        }\n                    }\n            \n                    if (debug) {\n                        System.out.println(\"sb: \"+sb);\n                    }\n                    if (debug) {\n                        System.out.println(\"s: \"+s);\n                    }\n            \/*\n            \n                    StringBuilder sb2 = new StringBuilder();\n                    for (int j=0; j<sb.length(); j++) {\n                        sb2.append(sb.charAt(j));\n            \n                        if (sb.length()%2 == 0) {\n                            if (j%2==1) {\n                                sb2.append(\" \");\n                            }\n                        } else {\n            \n                            if (j == sb.length()-3) {\n                                sb2.append(sb.charAt(sb.length()-1));\n                                sb2.append(\" \");\n                                sb2.append(sb.charAt(sb.length()-3));\n                                sb2.append(sb.charAt(sb.length()-2));\n                                break;\n                            } else {\n                                if (j%2==1) {\n                                    sb2.append(\" \");\n                                }\n                            }\n                        }\n            \n                    }\n            *\/\n            \n                    StringBuilder sb3 = new StringBuilder();\n                    while(!s.empty()) {\n                        if (s.size() == 3) {\n                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();\n                            sb3.append(c3);\n                            sb3.append(' ');\n                            sb3.append(c2);\n                            sb3.append(c1);\n                            sb3.append(' ');\n                        } else {\n                            char c1 = s.pop(), c2 = s.pop();\n                            sb3.append(c2);\n                            sb3.append(c1);\n                            sb3.append(' ');\n                        }\n                    }\n\n            String result = sb3.toString();\n            System.out.printf(\"Case #%d: %s%n\", _t, result);\n        }\n    }\n}"}
{"idx":"1355","func":"class GoogleCodeJamA {\n    public static void main(String args[]) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int test = Integer.parseInt(in.readLine());\n        for (int t =0;t<test;t++) {\n            int n = Integer.parseInt(in.readLine());\n            StringTokenizer st = new StringTokenizer(in.readLine());\n            int a[] = new int [40];\n            int ost = 0;\n            for (int i = 0; i < n; i++) {\n                a[i] = Integer.parseInt(st.nextToken());\n                ost += a[i];\n            }\n            String ans[] = new String[1000];\n            int count = 0;\n            while (ost > 0) {\n                int max1 = -1;\n                int max2 = -1;\n                int max3 = -1;\n                for (int i = 0; i < n; i++) {\n                    if (max1 == -1 || a[i] > a[max1]) {\n                        max3 = max2;\n                        max2 = max1;\n                        max1 = i;\n                    } else\n                    if (max2 == -1 || a[i] > a[max2]) {\n                        max3 = max2;\n                        max2 = i;\n                    } else\n                    if (max3 == -1 || a[i] > a[max3]) {\n                        max3 = i;\n                    }\n                }\n                if (ost == 3) {\n                    ans[count++] = (char) (max1 + 'A') + \"\";\n                    a[max1]--;\n                    ost--;\n                } else\n                if (ost == 1) {\n                    ans[count++] = (char) (max1 + 'A') + \"\";\n                    a[max1]--;\n                    ost--;\n                } else\n                if (a[max1] == a[max2]) {\n                    ans[count++] = (char) (max1 + 'A') + \"\" + (char) (max2 + 'A');\n                    a[max1] --;\n                    a[max2] --;\n                    ost-=2;\n                } else {\n                    if (a[max2] > ((ost - 2) \/ 2)) {\n                        ans[count++] = (char) (max1 + 'A') + \"\" + (char) (max2 + 'A');\n                        a[max1] --;\n                        a[max2] --;\n                        ost-=2;\n                    } else {\n                        ans[count++] = (char) (max1 + 'A') + \"\" + (char) (max1 + 'A');\n                        a[max1] --;\n                        a[max1] --;\n                        ost-=2;\n                    }\n                }\n\n            }\n            System.out.print(\"Case #\"+(t+1)+\":\");\n            for (int i =0;i<count;i++) {\n                System.out.print(\" \"+ans[i]);\n            }\n            System.out.println();\n\n        }\n        in.close();\n    }\n}"}
{"idx":"1356","func":"class A {\n\n    static Scanner input = null;\n    static BufferedWriter writer = null;\n\n    public static void main(String[] args) {\n        try {\n            input = new Scanner(new FileReader(\"A-large.in\"));\n            writer = new BufferedWriter(new FileWriter(\"A-large.out\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++)\n        {\n            Long N = input.nextLong();\n            HashMap<Character, Integer> parties = new LinkedHashMap<>();\n            char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n            for (int j = 0; j < N; j++)\n            {\n                parties.put(Character.toUpperCase(alphabet[j]), input.nextInt());\n            }\n\n            \/**\n             * Amax-1 <= totalj\/2\n             *\n             * Max+SecondMax\n             *\/\n\n            try {\n                writer.write(\"Case #\" + (n + 1) + \": \");\n                writer.flush();\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n            while (parties.values().stream().anyMatch(i -> i!=0)) {\n                Map.Entry<Character, Integer> majorParty = Collections.max(parties.entrySet(),\n                                                                      (entry1, entry2) -> entry1.getValue() >= entry2.getValue()\n                                                                          ? 1 : -1);\n\n                int total = parties.values().stream().mapToInt(Number::intValue).sum() - 1;\n                parties.put(majorParty.getKey(), majorParty.getValue() - 1);\n                Map.Entry<Character, Integer> secondMajor = Collections.max(parties.entrySet(),\n                                                                      (entry1, entry2) -> entry1.getValue() >= entry2.getValue()\n                                                                          ? 1 : -1);\n                if (secondMajor.getValue() <= total\/2) {\n                    try {\n                        writer.write(majorParty.getKey() + \" \");\n                        writer.flush();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    parties.put(secondMajor.getKey(), secondMajor.getValue() - 1);\n                    try {\n                        writer.write(majorParty.getKey()+ \"\" + secondMajor.getKey()+\" \");\n                        writer.flush();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n            try {\n                writer.newLine();\n                writer.flush();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n    }\n}"}
{"idx":"1357","func":"final class SenateEvacuationSolver {\n\n    \/** Scanner instance that allows to parse problem input. **\/\n    private final Scanner scanner;\n\n    \/**\n     * Default constructor.\n     * \n     * @param scanner Scanner instance that allows to parse problem input. \n     *\/\n    private SenateEvacuationSolver(final Scanner scanner) {\n        this.scanner = scanner;\n    }\n\n    \/**\n     * Solver entry point.\n     * \n     * @param args Command line parameters.\n     * @throws FileNotFoundException If input file could not be parsed.\n     *\/\n    public static void main(final String [] args) throws FileNotFoundException {\n        final File file = new File(args[0]);\n        final Scanner scanner = new Scanner(file);\n        final int n = scanner.nextInt();\n        final SenateEvacuationSolver solver = new SenateEvacuationSolver(scanner);\n        for (int i = 0; i < n; i++) {\n            System.out.print(\"Case #\" + (i + 1) + \":\");\n            int n1 = solver.scanner.nextInt();\n            int[] p = new int[27];\n            int t = 0;\n            for (int i1 = 1; i1 <= n1; i1++) {\n                p[i1] = solver.scanner.nextInt();\n                t += p[i1];\n            }\n            \n            boolean first = true;\n            while (t > 0) {\n                int max = 1;\n                for (int i2 = 1; i2 <= n1; i2++) {\n                    if (p[i2] > p[max]) {\n                        max = i2;\n                    }\n                }\n                if (t == 2) {\n                    if (p[max] == 2) {\n                        p[max] -= 2;\n                        t -= 2;\n                        System.out.print(\" \");\n                        System.out.print((char) (64 + max));\n                        System.out.print((char) (64 + max));\n                    } else if (p[max] == 1) {\n                        p[max]--;\n                        t--;\n                        System.out.print(\" \");\n                        System.out.print((char) (64 + max));\n                        \n                        max = 1;\n                        for (int i3 = 1; i3 <= n1; i3++) {\n                            if (p[i3] > p[max]) {\n                                max = i3;\n                            }\n                        }\n                        p[max]--;\n                        t--;\n                        System.out.print((char) (64 + max));\n                    }\n                } else if (t == 3) {\n                    p[max]--;\n                    t--;\n                    System.out.print(\" \");\n                    System.out.print(Character.toString((char) (64 + max)));\n                } else {\n                    p[max]--;\n                    t--;\n                    System.out.print(\" \");\n                    System.out.print((char) (64 + max));\n                    \n                    max = 1;\n                    for (int i4 = 1; i4 <= n1; i4++) {\n                        if (p[i4] > p[max]) {\n                            max = i4;\n                        }\n                    }\n                    p[max]--;\n                    t--;\n                    System.out.print((char) (64 + max));\n                }\n            }\n            System.out.println();\n        }\n        scanner.close();\n    }\n\n}"}
{"idx":"1358","func":"static void main(String[] args) throws IOException\n    {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(in.readLine());\n        for(int i=0;i<T;i++){\n            System.out.print(\"Case #\"+(i+1)+\": \");\n            int parties=Integer.parseInt(in.readLine());\n            String[] Members=in.readLine().split(\" \");\n            int total=0;\n            for(int j=0;j<parties;j++){\n                total+=Integer.parseInt(Members[j]);\n                    }\n            while(total!=0){\n                int first=0;\n                int second=-1;\n                int num1=0;\n                int num2=0;\n                String ans=\"\";\n                for(int j=0;j<parties;j++){\n                        if(first<Integer.parseInt(Members[j])){\n                            second=first;\n                            first=Integer.parseInt(Members[j]);\n                            num2=num1;\n                            num1=j;\n                            }\n                        else\n                            {\n                                if(second<Integer.parseInt(Members[j])){\n                                    second=Integer.parseInt(Members[j]);\n                                    num2=j;\n                                }\n                            }\n                    }\n                ans=\"\"+(char)(65+num1);\n                Members[num1]=Integer.toString(Integer.parseInt(Members[num1])-1);\n                total-=1;\n                String ans2=\"\";\n                for(int j=0;j<parties;j++){\n                    double p=total;\n                    if(Double.parseDouble(Members[j])\/p>0.5){\n                        ans+=(char)(65+j);\n                        Members[j]=Integer.toString(Integer.parseInt(Members[j])-1);\n                        total-=1;\n                        break;\n                    }\n                }\n            System.out.print(ans+\" \");\n        }\n        System.out.println();\n                \n                \n            \n            \n        }\n    }\n}"}
{"idx":"1359","func":"class Solution1 {\n    final static String alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    static String [] bank = {\"ZERO\", \"ONE\", \"TWO\", \"THREE\", \"FOUR\", \"FIVE\", \"SIX\", \"SEVEN\", \"EIGHT\", \"NINE\"};\n\n    public static void main(String[] args) throws FileNotFoundException {\n\n        FileInputStream fileInputStream = new FileInputStream(\"\/Users\/ratmir\/Downloads\/A-large (3).in\");\n        \/\/Scanner sc = new Scanner(System.in);\n        Scanner sc = new Scanner(fileInputStream);\n        FileOutputStream outputStream = new FileOutputStream(\"\/Users\/ratmir\/Documents\/code\/hackerrank\/algs\/src\/codejam\/y2016\/r3\/z1\/z2.txt\");\n        PrintWriter printWriter = new PrintWriter(outputStream);\n        int t = sc.nextInt();\n        for (int ti=1;ti<=t;ti++) {\n            int n = sc.nextInt();\n            int[] arr = new int[n];\n            int cnt = 0;\n            TreeMap<Integer, Set<Integer>> tm = new TreeMap<Integer, Set<Integer>>();\n            for (int i = 0; i < n; i++) {\n                arr[i] = sc.nextInt();\n                cnt += arr[i];\n                Set<Integer> integers = tm.get(arr[i]);\n                if (integers ==null) {\n                    integers = new HashSet<Integer>();\n                    tm.put(arr[i], integers);\n                }\n                integers.add(i);\n            }\n            StringBuilder sb = new StringBuilder();\n            while (cnt > 0) {\n                if (cnt==3 && tm.size()==1 || (cnt==3 && tm.size()==2 && tm.containsKey(0) && tm.containsKey(1))) {\n                    System.err.println(tm);\n                    Set<Integer> integers = tm.get(1);\n                    Iterator<Integer> iterator = integers.iterator();\n                    Integer mx1 = iterator.next();\n                    Integer mx2 = iterator.next();\n                    Integer mx3 = iterator.next();\n                    String c1 = alphabet.substring(mx1, mx1 + 1);\n                    String c2 = alphabet.substring(mx2, mx2 + 1);\n                    String c3 = alphabet.substring(mx3, mx3 + 1);\n                    sb = sb.append(c1+\" \"+c2+c3);\n                    cnt -=3;\n                    break;\n                }\n                System.err.println(tm);\n                Map.Entry<Integer, Set<Integer>> entry = tm.lastEntry();\n                Integer key = entry.getKey();\n                Set<Integer> value = entry.getValue();\n                Iterator<Integer> iterator = value.iterator();\n                int mx = iterator.next();\n                if (value.size()>1) {\n                    int mx1 = iterator.next();\n                    value.remove(mx);\n                    value.remove(mx1);\n                    if (value.size()==0) {\n                        tm.remove(key);\n                    }\n                    String c = alphabet.substring(mx, mx + 1);\n                    String c1 = alphabet.substring(mx1, mx1 + 1);\n                    sb = sb.append(c+c1+\" \");\n                    Set<Integer> integers = tm.get(key - 1);\n                    if (integers ==null) {\n                        integers = new HashSet<Integer>();\n                        tm.put(key-1, integers);\n                    }\n                    integers.add(mx);\n                    integers.add(mx1);\n                    cnt -= 2;\n                } else {\n                    tm.remove(key);\n                    if (key > 1) {\n                        String c = alphabet.substring(mx, mx + 1);\n                        sb = sb.append(c + c + \" \");\n                        Set<Integer> integers = tm.get(key - 2);\n                        if (integers == null) {\n                            integers = new HashSet<Integer>();\n                            tm.put(key - 2, integers);\n                        }\n                        integers.add(mx);\n                        cnt -= 2;\n                    } else {\n                        String c = alphabet.substring(mx, mx + 1);\n                        sb = sb.append(c + c + \" \");\n                        Set<Integer> integers = tm.get(key - 1);\n                        if (integers == null) {\n                            integers = new HashSet<Integer>();\n                            tm.put(key - 1, integers);\n                        }\n                        integers.add(mx);\n                        cnt -= 1;\n                    }\n                }\n                \/\/selfcheck\n                if (cnt>0) {\n                    Map.Entry<Integer, Set<Integer>> entry1 = tm.lastEntry();\n                    if (entry1.getValue().size()==1) {\n                        if (entry1.getKey()>cnt\/2) {\n                            System.err.println(entry1.getKey()+\" \"+cnt);\n                            throw new RuntimeException();\n                        }\n                    }\n                }\n            }\n            String res = \"Case #\" + ti + \": \" + sb.toString();\n            System.out.println(res);\n            printWriter.write(res + \"\\n\");\n        }\n        printWriter.close();\n    }\n\n}"}
{"idx":"1360","func":"class CJ20161 {\n\n    public static void main(String[] args) throws FileNotFoundException{\n        Scanner sc = new Scanner(new File(\"input.txt\"));\n        PrintWriter file = new PrintWriter(new File(\"output.txt\"));\n        \n        int[] alf = new int[26];\n        int a = (int)'A';\n        int n;\n        int max1, ind1;\n        int max2, ind2;\n        int Q = sc.nextInt();\n        for(int t=0; t< Q; ++t){\n            System.out.print(\"Case #\" + (t+1) + \": \");\n            file.print(\"Case #\" + (t+1) + \": \");\n        max1 = 0;\n        ind1 = 0;\n        max2 = 0;\n        ind2 = 0;\n        for(int i=0; i<26; ++i){\n            alf[i] = 0;\n        }\n        n = sc.nextInt();\n        \n        for(int i=0; i<n; ++i){\n            alf[i] = sc.nextInt();\n        }\n        for(int i=0; i<n; ++i){\n            if(alf[i] > max1){\n                max1 = alf[i];\n                ind1 = i;\n            }\n        }\n        for(int i=0; i<n; ++i){\n            if(alf[i] > max2 && ind1 != i){\n                max2 = alf[i];\n                ind2 = i;\n            }\n        }\n        \/\/System.out.println(max1 + \" \" + max2);\n        \n        for(int i=max1; i>max2; --i){\n            System.out.print((char)(a + ind1) + \" \");\n            file.print((char)(a + ind1) + \" \");\n        }\n        \n        \n        for(int i=0; i < n ; ++ i){\n            if(i != ind1 && i != ind2){\n                for(int k=0; k<alf[i]; ++k){\n                    System.out.print((char)(a + i) + \" \");\n                    file.print((char)(a + i) + \" \");\n                }\n            }\n        }\n        \n        for(int i=max2; i>0; --i){\n            System.out.print((char)(a + ind1) + \"\" + (char)(a + ind2) + \" \");\n            file.print((char)(a + ind1) + \"\" + (char)(a + ind2) + \" \");\n        }\n        System.out.println();\n        file.println();\n        }\n        file.close();\n    }\n}"}
{"idx":"1361","func":"class A {\n\n    public static void main(String[] args) throws IOException {\n        final Scanner sc = new Scanner(new FileReader(\"Ain.in\"));\n        final BufferedWriter w = new BufferedWriter(new FileWriter(\"Aout.txt\"));\n        String[] a = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\n\n        final int testNumber = sc.nextInt();\n        for (int test = 1; test <= testNumber; test++) {\n            int N = sc.nextInt();\n            String ans = \"\";\n            int[] num = new int[N];\n            int sum = 0;\n            int count = 0;\n            HashMap<Integer, ArrayList<String>> map = new HashMap<>();\n            for (int i=0; i<num.length;i++) {\n                num[i] = sc.nextInt();\n                if (map.get(num[i])!=null) {\n                    map.get(num[i]).add(a[i]);\n                } else {\n                    ArrayList<String> al = new ArrayList<>();\n                    al.add(a[i]);\n                    map.put(num[i], al);\n                }\n                sum += num[i];\n            }\n            while(true) {\n                Arrays.sort(num);\n                int last = num.length-1;\n                if (num[last]>0) {\n                    String add = map.get(num[last]).get(map.get(num[last]).size()-1);\n                    ans += add;\n                    count++;\n                    map.get(num[last]).remove(add);\n                    num[last]--;\n                    if ((num[last]==0) && (num[last-1]==0)) {\n                        break;\n                    }\n                    if ((sum - count) == 2) {\n                        ans += \" \";\n                        if (map.get(num[last])!=null) {\n                            map.get(num[last]).add(add);\n                        } else {\n                            ArrayList<String> al = new ArrayList<>();\n                            al.add(add);\n                            map.put(num[last], al);\n                        }\n                    } else {\n                        if (num[last]>= num[last-1]) {\n                            ans += add+\" \";\n                            count++;\n                            if (map.get(num[last]-1)!=null) {\n                                map.get(num[last]-1).add(add);\n                            } else {\n                                ArrayList<String> al = new ArrayList<>();\n                                al.add(add);\n                                map.put(num[last]-1, al);\n                            }\n                            num[last]--;\n                        } else {\n                            if (map.get(num[last])!=null) {\n                                map.get(num[last]).add(add);\n                            } else {\n                                ArrayList<String> al = new ArrayList<>();\n                                al.add(add);\n                                map.put(num[last], al);\n                            }\n                            String two = map.get(num[last-1]).get(map.get(num[last-1]).size()-1);\n                            map.get(num[last-1]).remove(two);\n                            ans += two+\" \";\n                            count++;\n                            if (map.get(num[last-1]-1)!=null) {\n                                map.get(num[last-1]-1).add(two);\n                            } else {\n                                ArrayList<String> al = new ArrayList<>();\n                                al.add(two);\n                                map.put(num[last-1]-1, al);\n                            }\n                            num[last-1]--;\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n            \/\/            ans += a[maxI]+a[max2I]+\" \";\n            \/\/            num -=\n            \/\/            boolean check = true;\n            \/\/            while (check) {\n            \/\/            for (int i=0;i<num.length; i++) {\n            \/\/\n            \/\/            }\n            \/\/            }\n            w.write(\"Case #\"+test+\": \"+ans.trim()+\"\\n\");\n            System.out.println(\"Case #\"+test+\": \"+ans);\n        }\n        sc.close();\n        w.flush();\n        w.close();\n    }\n\n\n}"}
{"idx":"1362","func":"class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        for (int i = 1; i <= t; ++i) {\n            System.out.print(\"Case #\" + i + \":\");\n\n            TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<Integer, ArrayList<Integer>>();\n            int n = in.nextInt();\n            \/\/int[] pList = new int[n];\n            int total = 0;\n            for (int j = 0; j < n; ++j) {\n                \/\/pList[j] = in.nextInt();\n                int p = in.nextInt();\n                ArrayList<Integer> tmp = map.get(p);\n                if (tmp == null) {\n                    tmp = new ArrayList<Integer>();\n                    map.put(p, tmp);\n                }\n                tmp.add(j);\n                total += p;\/\/pList[j];\n            }\n\n            while (total != 0) {\n                Map.Entry<Integer, ArrayList<Integer>> entry = map.lastEntry();\n                int key = entry.getKey();\n                ArrayList<Integer> value = entry.getValue();\n\n                ArrayList<Integer> tmp = map.get(key - 1);\n                if (tmp == null) {\n                    tmp = new ArrayList<Integer>();\n                    map.put(key - 1, tmp);\n                }\n\n                boolean hasSingleOne = value.size() % 2 == 1;\n                for (int index = 0; index < value.size(); ++index) {\n                    System.out.print(\" \"+(char)('A' + value.get(index)));\n                    tmp.add(value.get(index));\n                    total--;\n                    if (hasSingleOne) {\n                        hasSingleOne = false;\n                    } else {\n                        index++;\n                        System.out.print((char)('A' + value.get(index)));\n                        tmp.add(value.get(index));\n                        total--;\n                    }\n                }\n                map.remove(key);\n            }\n                \n            \/\/System.out.print(convertToChar(j)+\" \"+pList[j]);\n\n            System.out.print(\"\\n\");\n        }\n    }\n}"}
{"idx":"1363","func":"class A {\n\n\n    public static void main(String[] args) {\n        Scanner sc = null;\n        PrintWriter w = null;\n        try {\n            w = new PrintWriter(\n                    new BufferedWriter(\n                            new FileWriter(\"out-C-A.txt\", false)));\n            sc = new Scanner(new File(\"A-large.in\"));\n\/\/             sc = new Scanner(\"4\\n\" +\n\/\/                     \"2\\n\" +\n\/\/                     \"2 2\\n\" +\n\/\/                     \"3\\n\" +\n\/\/                     \"3 2 2\\n\" +\n\/\/                     \"3\\n\" +\n\/\/                     \"1 1 2\\n\" +\n\/\/                     \"3\\n\" +\n\/\/                     \"2 3 1\"\n\/\/             );\n\n            sc.useDelimiter(\" |\\n\");\n\n            int T = sc.nextInt();\n            for (int z = 0; z < T; z++) {\n                N = sc.nextInt();\n                Ns = new int[N];\n\n                for(int i =0;i<N;i++){\n                    Ns[i] = sc.nextInt();\n                }\n                String res = \"\";\n                        HashMap<Integer,Integer> map = new HashMap<>();\n                        int count = 0;\n                        for(int i =0;i<N;i++){\n                            map.put(i,Ns[i]);\n                            count += Ns[i];\n                        }\n                \n                \/\/        System.out.println(count);\n                        while(true){\n                            int maxValue = Collections.max(map.values());\n                \n                            if(count > 0 && ((double)maxValue\/count) > 0.5){\n                                System.out.println(\"bingo!\");\n                                System.out.println(((double)maxValue\/count));\n                                System.out.println(count);\n                            }\n                \n                            if(maxValue == 0) break;\n                \n                            int key1 = 0;\n                            int key2 = 0;\n                            int co = 0;\n                            for(Map.Entry<Integer,Integer> en : map.entrySet()){\n                                if(en.getValue() == maxValue){\n                                    co++;\n                                    if(co == 1) key1 = en.getKey();\n                                    if(co == 2) {\n                                        key2 = en.getKey();\n                                        break;\n                                    }\n                                }\n                            }\n                \n                            if(count  == 3) {\n                                char c1 = (char)(key1 + A);\n                                res += String.valueOf(c1) + \" \";\n                                map.put(key1, map.get(key1) - 1);\n                                count --;\n                                continue;\n                            }\n                \n                            if(co == 1){\n                                HashMap<Integer,Integer> map1 = new HashMap<>(map);\n                                map1.remove(key1);\n                                int nextMaxValue = (Integer)Collections.max(map1.values());\n                                int time = maxValue - nextMaxValue;\n                \n                                while(time > 0){\n                                    if(time == 1) {\n                                        char c1 = (char)(key1 + A);\n                                        res += String.valueOf(c1) + \" \";\n                                        map.put(key1,map.get(key1) - 1);\n                                        time--;\n                                        count--;\n                                    }\n                                    else {\n                                        char c1 = (char)(key1 + A);\n                                        char c2 = (char)(key1 + A);\n                                        res+= String.valueOf(c1) + String.valueOf(c2) + \" \";\n                                        map.put(key1,map.get(key1) - 2);\n                                        time -= 2;\n                                        count-= 2;\n                                    }\n                \n                                }\n                            }else{\n                                char c1 = (char)(key1 + A);\n                                char c2 = (char)(key2 + A);\n                                res += String.valueOf(c1) + String.valueOf(c2) + \" \";\n                                map.put(key1,map.get(key1) - 1);\n                \n                                map.put(key2,map.get(key2) - 1);\n                                count-=2;\n                            }\n                        }\n\n\n                \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n                String ress = res.substring(0,res.length()-1);\n                System.out.println(\"Case #\" + (z + 1) + \": \" + ress);\n                w.println(\"Case #\" + (z + 1) + \": \" + ress);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            sc.close();\n            w.close();\n        }\n    }\n\n    \/\/\/\/\/\/\/\/\/\/\/variables\n    static int N;\n    static int[] Ns;\n\n    static char A = 'A';\n\n}"}
{"idx":"1364","func":"class Test7 {\n    public static void main(String[] args) throws NumberFormatException, IOException {\n         \/\/BufferedReader br = new BufferedReader(new\n         \/\/InputStreamReader(System.in));\n        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"text3\")));\n        int testCount = Integer.parseInt(br.readLine());\n\n        for (int i = 1; i <= testCount; i++) {\n            int number = Integer.parseInt(br.readLine());\n            int sena[] = new int[number];\n           double sum = 0;\n           Map<Character,Integer> map = new HashMap<>();\n           String[] string = br.readLine().split(\" \");\n            for(int j=0;j<number;j++) {\n                sena[j] = Integer.parseInt(string[j]);\n                map.put((char) (j+65), sena[j]);\n                sum +=sena[j];\n            }\n            String answer = \"\";\n            while(sum>0) {\n            Map.Entry<Character, Integer> maxEntry = null;\n\n            for (Map.Entry<Character, Integer> entry : map.entrySet())\n            {\n                if (maxEntry == null || entry.getValue().compareTo(maxEntry.getValue()) > 0)\n                {\n                    maxEntry = entry;\n                }\n            }\n            answer += maxEntry.getKey().toString();\n            map.put(maxEntry.getKey(),maxEntry.getValue()-1);\n            sum--;\n            if(sum>0 && sum!=2) {\n            for (Map.Entry<Character, Integer> entry : map.entrySet())\n            {\n                if (maxEntry == null || entry.getValue().compareTo(maxEntry.getValue()) > 0)\n                {\n                    maxEntry = entry;\n                }\n            }\n\n            answer=answer+maxEntry.getKey().toString();\n            map.put(maxEntry.getKey(),maxEntry.getValue()-1);\n            sum--;\n            }\n            answer+=\" \";\n            }\n\n            System.out.println(\"Case #\" + i + \": \" + answer.trim());\n        }\n    }\n}"}
{"idx":"1365","func":"class R1C_1 {\n    \n    public static void main(String args[]){\n        try {\n            \/\/System.setIn(new FileInputStream(\"C:\\\\Users\\\\ericc\\\\Desktop\\\\Question\\\\R1C\\\\Q1\\\\Q1.in\"));\n            \/\/System.setIn(new FileInputStream(\"C:\\\\Users\\\\ericc\\\\Desktop\\\\Question\\\\R1C\\\\Q1\\\\Q1-small.in\"));\n            System.setIn(new FileInputStream(\"C:\\\\Users\\\\ericc\\\\Desktop\\\\Question\\\\R1C\\\\Q1\\\\Q1-large.in\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        \n        Scanner sc = new Scanner(System.in);\n        sc.nextLine();\n        int caseCount = 0;\n        while(sc.hasNext()){\n            int numParty = Integer.parseInt(sc.nextLine());\n            int se[] = new int[26];\n            int total = 0;\n            for(int i = 0 ; i < numParty ; i++){\n                se[i] = sc.nextInt();\n                total += se[i];\n            }\n            if(sc.hasNext())\n                sc.nextLine();\n            \n            String result = \"\";\n            \n            while(total != 0){\n                if(total != 3){\n                    for(int i = 0 ; i < 2 ; i++){\n                        int maxIdx = 0;\n                        for(int j = 0 ; j < numParty ; j++){\n                            if(se[j] > se[maxIdx]){\n                                maxIdx = j;\n                            }\n                        }\n                        total--;\n                        se[maxIdx]--;\n                        result += (char)('A' + maxIdx);\n                    }\n                }\n                else{\n                    int maxIdx = 0;\n                    for(int j = 0 ; j < numParty ; j++){\n                        if(se[j] > se[maxIdx]){\n                            maxIdx = j;\n                        }\n                    }\n                    total--;\n                    se[maxIdx]--;\n                    result += (char)('A' + maxIdx);\n                }\n                result += \" \";\n                \n            }\n            \n            caseCount++;\n            System.out.println(\"Case #\" + caseCount + \": \" + result);\n        }\n        \n    }\n    \n}"}
{"idx":"1366","func":"class SenateEvacuation {\n    \n    static PrintWriter out;\n\n    public static void main(String[] args) throws IOException {\n        String name = \"gcj2016\/r1\/A-large\";\n        Scanner s = new Scanner(new File(name + \".in\"));\n        int count = s.nextInt();\n        out = new PrintWriter(new BufferedWriter(new FileWriter(name + \".out\")));\n        \/\/out = new PrintWriter(System.out);\n        for (int cc = 1; cc <= count; cc++) {\n            out.print(\"Case #\" + cc + \": \");\n            int n = s.nextInt();\n            int[] a = new int[26];\n            int sum = 0;\n            for(int i=0; i<n; i++) {\n                a[i] = s.nextInt();\n                sum += a[i];\n            }\n            int sum1 = sum;\n            while(sum1 > 2) {\n                if(sum1 % 2 == 0) {\n                    int h = sum1 \/ 2;\n                    for(int i=0; i<26; i++) {\n                        if(a[i] == h) {\n                            a[i]--;\n                            sum1--;\n                            out.print((char)('A' + i));\n                        }\n                    }\n                    if(sum1 < h * 2) {\n                        out.print(\" \");\n                        continue;\n                    }\n                }\n                int max = 0;\n                int maxi = 0;\n                char maxc = 'A';\n                for(int i=0; i<26; i++) {\n                    if(max < a[i]) {\n                        max = a[i];\n                        maxi = i;\n                        maxc = (char)('A' + i);\n                    }\n                }\n                a[maxi]--;\n                sum1--;\n                out.print(maxc);\n                out.print(\" \");\n            }\n            for(int i=0; i<26; i++) {\n                if(a[i] > 0) out.print((char)('A' + i));\n            }\n            out.println();\n        }\n        out.close();\n    }\n\n}"}
{"idx":"1367","func":"class SenateEvac {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int T = scan.nextInt();\n        String[] svar = new String[T];\n        for (int t = 0; t < T; t++) {\n            svar[t] = \"\";\n            int N = scan.nextInt();\n            int[] memb = new int[N];\n            for (int n = 0; n < N; n++) {\n                memb[n] = scan.nextInt();\n            }\n            int max1 = 0;\n            int max2;\n            for (int i = 0; i < N; i++) {\n                if (memb[i] >= memb[max1]) {\n                    max1 = i;\n                }\n            }\n            if(max1 != 0){\n                max2 = 0;\n            } else {\n                max2 = 1;\n            }\n            for (int i = 0; i < N; i++) {\n                if (memb[i] >= memb[max2] && i != max1) {\n                    max2 = i;\n                }\n            }\n\n            while (memb[max1] > memb[max2]) {\n                svar[t] += (char)('A' + max1);\n                svar[t] += \" \";\n                memb[max1]--;\n            }\n            for (int i = 0; i < N; i++) {\n                if (i != max1 && i != max2) {\n                    for (int j = 0; j < memb[i]; j++) {\n                        svar[t] += (char)('A' + i);\n                        svar[t] += \" \";\n                    }\n                }\n            }\n            for (int i = 0; i < memb[max1]; i++) {\n                svar[t] += (char)('A' + max1);\n                svar[t] += (char)('A' + max2);\n                svar[t] += \" \";\n            }\n\n        }\n        for(int t = 0; t<T; t++){\n            System.out.println(\"Case #\" + (t+1) + \": \" + svar[t]);\n        }\n    }\n\n}"}
{"idx":"1368","func":"class C1 {\n\n    private String smallInput = \"res\/r1C\/A\/a_small.in\";\n    private String smallOutput = \"res\/r1C\/A\/a_small.out\";\n    private String bigInput = \"res\/r1C\/A\/a_big.in\";\n    private String bigOutput = \"res\/r1C\/A\/a_big.out\";\n\n    private int n;  \/\/ number of cases\n\n    public static void main(String[] args) {\n\n        C1 c = new C1();\n        try {\n            Scanner sc = new Scanner(new FileReader(c.bigInput));\n            PrintWriter pw = new PrintWriter(c.bigOutput);\n            c.n = sc.nextInt();\n            for(int i=0; i<c.n; i++) {    \/\/case\n                int s = sc.nextInt();\n                int[] a = new int[s];\n                int t = 0;\n                for(int j=0; j<s; j++) {\n                    a[j] = sc.nextInt();\n                    t += a[j];\n                }\n                int x = i+1;\n                pw.print(\"Case #\"+x+\":\");\n        \n                for(int j=t; j>2; j--) {    \/\/ t adet removal\n        \n                    int lar = 0;\n                    int slar = 0;\n                    int in = 0;\n                    int in2 = 0;\n        \n                    for(int k=0; k<s; k++) {    \/\/ one iter\n                        if(a[k] > lar) {\n                            if(lar != 0) {\n                                slar = lar;\n                                in2 = in;\n                            }\n                            lar = a[k];\n                            in = k;\n                        }\n                        else if(a[k] > slar) {\n                            slar = a[k];\n                            in2 = k;\n                        }\n                    }\n                    if(lar == slar & s==2){\n                        char c1 = 'A';\n                        char c2 = 'A';\n                        c1 += in;\n                        c2 += in2;\n                        pw.print(\" \"+c1+c2);\n                        a[in]--;\n                        a[in2]--;\n                        j--;\n                    }\n                    else {\n                        char c1 = 'A';\n                        c1 += in;\n                        pw.print(\" \" + c1);\n                        a[in]--;\n                    }\n                }\n                int on = 0;\n                int tw = 0;\n                for(int f=0; f<s; f++) {\n                    if(a[f] > 0) {\n                        on = f;\n                        a[f]--;\n                        break;\n                    }\n                }\n                for(int f=0; f<s; f++) {\n                    if(a[f] > 0) {\n                        tw = f;\n                        break;\n                    }\n                }\n                char ch1 = 'A';\n                char ch2 = 'A';\n                ch1 += on;\n                ch2 += tw;\n                pw.print(\" \"+ch1+ch2);\n                pw.println();\n            }\n            sc.close();\n            pw.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        \/\/a.solve();\n        \/\/a.writeOutput();\n    }\n}"}
{"idx":"1369","func":"class A {\n    static final String INPUT_FILE = \"1C\/A\/large.in\";\n    static final String OUTPUT_FILE = \"1C\/A\/large-output.txt\";\n\n    \n    public static void main(String args[]) throws Exception {\n        Locale.setDefault(Locale.US);\n        Scanner in = new Scanner(new File(INPUT_FILE));\n        BufferedWriter out = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE)));\n        \n\n        int T = in.nextInt();\n        \n        in.nextLine();\n        \n        for (int t = 1; t <= T; t++) {\n            String result = \"\";\n            \n            int N = in.nextInt();\n            \n            int[] P = new int[N];\n            \n            for (int i = 0; i < N; i++) {\n                P[i] = in.nextInt();\n            }\n            \n            int num = 0;\n            for (int i = 0; i < N; i++) {\n                num += P[i];\n            }\n            \n\n            int max1 = 0;\n            for (int i = 0; i < N; i++) {\n                if (P[max1] < P[i]) {\n                    max1 = i;\n                }\n            }\n            \n            int max2 = 0;\n            for (int i = 0; i < N; i++) {\n                if (i != max1 && (max1 == max2 || P[max2] < P[i])) {\n                    max2 = i;\n                }\n            }\n                \n            while (P[max1] > P[max2]) {\n                result += (char) ('A' + max1);\n                P[max1]--;\n                num--;\n                if (P[max1] > P[max2]) {\n                    result += (char) ('A' + max1);\n                    P[max1]--;\n                    num--;\n                }\n                result += \" \";\n            }\n\n            for (int i = 0; i < N; i++) {\n                if (i != max1 && i != max2) {\n                    while (P[i] > 0) {\n                        result += (char) ('A' + i);\n                        P[i]--;\n                        num--;\n                        if (P[i] > 0) {\n                            result += (char) ('A' + i);\n                            P[i]--;\n                            num--;\n                        }\n                        result += \" \";\n                    }\n                }\n            }\n\n            while (P[max1] > 0) {\n                result += (char) ('A' + max1);\n                P[max1]--;\n                num--;\n                if (P[max2] > 0) {\n                    result += (char) ('A' + max2);\n                    P[max2]--;\n                    num--;\n                }\n                result += \" \";\n            }\n            \n            System.out.println(\"Case #\" + t + \": \" + result);\n            out.append(\"Case #\" + t + \": \" + result);\n            out.newLine();\n        }\n        \n        \n        in.close();\n        out.close();\n    }\n    \n    \n}"}
{"idx":"1370","func":"class A {\n    private static String infileName, outFileName;\n    private static BufferedReader reader;\n    private static BufferedWriter writer;\n    public static void main(String[] args) throws IOException {\n\n        infileName = args[0];\n        outFileName = infileName.substring(0, infileName.indexOf('.')).concat(\n                \".out\");\n        reader = Files.newBufferedReader(Paths.get(infileName));\n        writer = Files.newBufferedWriter(Paths.get(outFileName));\n        int numTests = Integer.parseInt(reader.readLine());\n        for (int i = 0; i < numTests; i++) {\n            int parties = Integer.parseInt(reader.readLine());\n            int[] in = new int[parties];\n            int j = 0;\n            for (String s2 : reader.readLine().split(\"\\\\s\")) {\n                in[j++] = Integer.parseInt(s2);\n            }\n            int[] senates = in;\n            int[] senates1 = senates;\n            StringBuilder sb = new StringBuilder();\n            int evac = 0;\n                    do{\n                        String s = \"\";\n                        int sum1 = 0;\n                        for (int s1 : senates1)\n                            sum1 += s1;\n                        int sum = sum1;\n                        int mjor1= (sum - 1)\/2 + 1;\n                        int mjor2= (sum - 2)\/2 + 1;\n                        evac =0;\n                        int [] temp = Arrays.copyOf(senates1, parties);\n                        for(int i1 = parties - 1; i1 >= 0; i1--)\n                        {\n                            if(temp[i1] >= mjor2)\n                            {\n                                temp[i1] = temp[i1] - 1;\n                                char a = (char) (65+i1);\n                                s += a;\n                                evac++;\n                                i1++;\n                            }\n                        }\n                        if(evac > 1)\n                        {\n                            temp = Arrays.copyOf(senates1, parties);\n                            s=\"\";\n                            evac =0;\n                            for(int i3 = parties - 1; i3 >= 0; i3--)\n                            {\n                                if(temp[i3] >= mjor1)\n                                {\n                                    temp[i3] = temp[i3] - 1;\n                                    char a = (char) (65+i3);\n                                    s += a;\n                                    evac++;\n                                }\n                            }\n                        }\n                        if(evac == 0 )\n                        {\n                            for(int i2 = 0; i2 < parties; i2++)\n                            {\n                                if(temp[i2] >= 1)\n                                {\n                                    temp[i2] = temp[i2] - 1;\n                                    char a = (char) (65+i2);\n                                    s += a;\n                                    evac++;\n                                    break;\n                                }\n                            }\n                        }\n                        sb.append(s).append(\" \");\n                        senates1 = Arrays.copyOf(temp, parties);\n                    }while(evac != 0);\n            String plan = sb.toString();\n            Object[] ans = { plan };\n            writer.write(\"Case #\" + (i + 1) + \":\");\n            for (Object a : ans)\n                writer.write(\" \" + a);\n            writer.newLine();\n        }\n        reader.close();\n        writer.close();\n\n    }\n}"}
{"idx":"1371","func":"static void main(String arg[]){\n        Scanner in = new Scanner(System.in);\n        int t=in.nextInt();\n        for(int j=1;j<=t;j++){\n            int p=in.nextInt();\n            int arr[]=new int[p];\n            int count=0;\n            int max1=0;\n            int max2=0;\n            int loc1=-1;\n            int loc2=-1;\n            for(int i=0;i<p;i++){\n                arr[i]=in.nextInt();\n                count+=arr[i];\n            }\n            System.out.print(\"Case #\"+j+\":\");\n            while(count>0){\n                max1=0;\n                max2=0;\n                loc1=-1;\n                loc2=-1;\n                for(int i=0;i<p;i++){\n                    if(arr[i]>max1){\n                        max2=max1;\n                        loc2=loc1;\n                        max1=arr[i];    \n                        loc1=i;\n                    }\n                    else if(arr[i]>max2){\n                        max2=arr[i];\n                        loc2=i;\n                    }            \n                }\n                if((max2<(count-2)\/2 && count!=1 && count!=3 )|| ((max2==(count-2)\/2 || max2==max1) && count!=1 && count!=3)){\n                    System.out.printf(\" %c%c\",(loc1+65),(loc2+65));\n                    count-=2;\n                    arr[loc1]-=1;\n                    arr[loc2]-=1;\n                }\n                else if((count!=1)&& count!=3){\n                    System.out.printf(\" %c%c\",(loc1+65),(loc1+65));\n                    count-=2;\n                    arr[loc1]-=2;\n                }\n                else{\n                    System.out.printf(\" %c\",(loc1+65));\n                    arr[loc1]-=1;\n                    count-=1;\n                }\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1372","func":"class code31 {\n\n    public static void main(String[] args) throws NumberFormatException, IOException  {\n        \n        int t,c=1,n,i,j,a[][],sum=0;\n        String out=\"\";\n        Scanner sc=new Scanner(System.in);\n        t=sc.nextInt();\n        while(t!=0)\n        { \n           out=\"\";\n           sum=0;\n           n=sc.nextInt();\n           a=new int[n][2];\n           for(i=0;i<n;i++)\n           {\n                  a[i][0]=sc.nextInt();\n                 sum=sum+a[i][0];\n                  a[i][1]=i+65;\n            }\n           while(sum>0)\n           {\n                int l=a.length,temp;\n                for(i=0;i<l;i++)\n                {\n                    for(j=0;j<l-1;j++)\n                    {\n                       if(a[j][0]<a[j+1][0])\n                        {\n                            temp=a[j][0];\n                            a[j][0]=a[j+1][0];\n                            a[j+1][0]=temp;\n                        \n                            temp=a[j][1];\n                            a[j][1]=a[j+1][1];\n                            a[j+1][1]=temp;\n                        }\n                      }\n                    }\n                   if(a[0][0]>a[1][0] && a[1][0]!=0)\n                {\n                    out=out+(char)(a[0][1])+(char)(a[0][1])+\" \";\n                   a[0][0]--;\n                   a[0][0]--;\n                   sum=sum-2;\n                 }\n                 else\n                     if(a[0][0]==a[1][0] && a[0][0]==1 && sum==2)\n                      {\n                         out=out+(char)(a[0][1])+(char)(a[1][1])+\" \";\n                         a[0][0]--;\n                         a[1][0]--;\n                         sum=sum-2;\n                        }else\n                     if(a[0][0]==a[1][0] && a[0][0]==1)\n                       {\n                           out=out+(char)(a[0][1])+\" \";\n                           a[0][0]--;\n                           sum=sum-1;\n                          }\n                     else\n                      {\n                       out=out+(char)(a[0][1])+\"\"+(char)(a[1][1])+\" \";\n                       a[0][0]--;\n                       a[1][0]--;\n                       sum=sum-2;\n                       }\n                     }\n                   System.out.println(\"Case #\"+c+\": \"+out);\n                c++;\n                t--;\n        }\n    }\n}"}
{"idx":"1373","func":"class GameA {\n    public final static String inpath = \"\/\/Users\/simon\/Downloads\/B-small-attempt0.in\";\n    public final static String outpath = \"\/\/Users\/simon\/Downloads\/A-small-result.txt\";\n    public static PrintWriter writer = null;\n    public static Integer testint = null;\n\n    public static void main(String[] args) throws IOException {\n        int noOfCase = 0;\n        \n        writer = new PrintWriter(new File(outpath));\n\n        try (BufferedReader br = new BufferedReader(new FileReader(inpath))) {\n\n            String line =br.readLine();\n            noOfCase = Integer.parseInt(line);\n            \/\/System.out.println(\"NoOfCase: \" + noOfCase);\n            String result = \"\";\n\n            for (int caseNo = 0; caseNo < noOfCase; caseNo++) {\n                int noOfParty =Integer.parseInt(br.readLine());    \n                line = br.readLine();\n                String[] lineSplit = line.split(\" \");\n                int[] senors = new int[noOfParty];\n                String[] senParty = new String[noOfParty];\n                result =\"\";\n                int total = 0; \n                for (byte i=0; i<noOfParty; i++){\n                    senors[i] = Integer.parseInt(lineSplit[i]);\n                    total += senors[i];\n                    \n                    char c = 'A' ;\n                    c += i;\n                    senParty[i] = lineSplit[i] + c;\n                    \/\/System.out.println(senParty[i] + \" \");\n                }\n                \n                \n                while  (total>0){\n                    Arrays.sort(senParty);\n                    String maxParty = senParty[noOfParty-1];\n                    String maxPartyMinux = senParty[noOfParty-2];\n                    \n                    \/\/System.out.println (\"Test: \" + maxParty + \" , \" + maxPartyMinux);\n                    \n                    if (total!=3){\n                            result = result + maxParty.charAt(1) + \"\";\n                            char c = maxParty.charAt(0);\n                            c = (char)( c - 1) ;\n                            senParty[noOfParty-1] = c + \"\" +  maxParty.charAt(1);\n                            \n                            if ( (maxPartyMinux.charAt(0) - '0') !=0){\n                                result = result + maxPartyMinux.charAt(1) ;\n                                c = maxPartyMinux.charAt(0);\n                                c = (char) (c- 1) ;\n                                senParty[noOfParty-2] = c + \"\" +  maxPartyMinux.charAt(1);                                \n                            }                                \n                            \n                            \n                            total = total -2;\n                    }else{\n                        result = result + maxParty.charAt(1) + \"\";\n                        char c = maxParty.charAt(0);\n                        c = (char)( c - 1) ;\n                        senParty[noOfParty-1] = c + \"\" +  maxParty.charAt(1);\n                        \n                        \n                        total = total -    1;                        \n                        \n                    }\n                    if (total>0)\n                        result = result + \" \";\n                }\n                String msg = String.format(\"Case #%d: %S \", caseNo+1, result);\n                \n                \n                writer.println(msg);\n                System.out.println(msg);\n\n            }\n            br.close();\n\n        }\n        writer.close();\n        \n    }    \n    \n\n}"}
{"idx":"1374","func":"class A {\n\n    public static void main(String args[])\n    {\n        Scanner sc;\n        try \n        {\n            \/\/sc = new Scanner(new File(\"A.in\"));\n            sc = new Scanner(new File(\"A-small-attempt0.in\"));\n            \/\/sc = new Scanner(new File(\"A-large-attempt0.in\"));\n            \/\/PrintWriter out = new PrintWriter(\"A.out\");\n            PrintWriter out = new PrintWriter(\"A-small-attempt0.out\");\n            \/\/PrintWriter out = new PrintWriter(\"A-large-attempt0.out\");\n            int T = Integer.parseInt(sc.nextLine());\n            int testcase = 1;\n            char[] alphabet = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n            while(T-- > 0)\n            {\n                out.print(\"Case #\" + testcase + \": \");\n                int N = Integer.parseInt(sc.nextLine());\n                String line = sc.nextLine();\n                String[] arr = line.split(\" \");\n                int[] p = new int[N];\n                int sump = 0;\n                for(int i=0; i<N; i++)\n                    {    p[i] = Integer.parseInt(arr[i]);\n                        sump += p[i];\n                    }\n                int large=-1,seclarge=-1;\n                int lar,seclar;\n                double tempsum,tempsum1,tempsum2,tempsum3;\n                while(sump>0)\n                {\n                    \n                    \/\/find largest & secondlargest\n                    lar = Integer.MIN_VALUE;\n                    seclar = Integer.MIN_VALUE;\n                    for(int i=0; i<N; i++)\n                    {\n                        if(p[i] >= lar)\n                        {\n                        seclar = lar;\n                        seclarge = large;\n                        lar = p[i];\n                        large = i;\n                        }\n                        else if(p[i] >= seclar)\n                        {\n                            seclar = p[i];\n                            seclarge = i;\n                        }\n                    }\n                    \/\/out.println();\n                    \n                    if(sump <=2)\n                    {\n                        while(p[large]>0)\n                        {\n                            p[large] = p[large] - 1;\n                            out.print(alphabet[large]);\n                            sump = sump-1;\n                        }\n                        while(p[seclarge]>0)\n                        {\n                            p[seclarge] = p[seclarge] - 1;\n                            out.print(alphabet[seclarge]);\n                            sump = sump - 1;\n                        }\n                        break;\n                    }\n                    \n                    boolean flag = true;\n                    for(int i=0; i<N; i++)\n                    {\n                        if(p[i] > 1)\n                        {\n                            flag = false;\n                            break;\n                        }\n                    }\n                    if(flag)\n                    {\n                        if(N%2 == 0)\n                        {\n                            out.print(alphabet[large]);\n                            out.print(alphabet[seclarge]);\n                            out.print(\" \");\n                            p[large] = p[large] - 1;\n                            p[seclarge] = p[seclarge] -1;\n                            sump = sump - 2;\n                            continue;\n                        }\n                        else\n                        {\n                            out.print(alphabet[large]);\n                            out.print(\" \");\n                            p[large] = p[large] - 1;\n                            sump = sump - 1;\n                        }\n                        continue;\n                    }\n                    \n                    \n                    \/\/out.print(alphabet[large] + \" \" + alphabet[seclarge]+\" \" + p[large] + \" \" + p[seclarge]+\" \"+sump);\n                    if(p[large] > 1)\n                    {\n                        double val = sump-2;\n                        \/\/out.print(\" ... \" +p[seclarge] + \" \" + val);\n                        tempsum1 = (p[seclarge]\/val)*100;  \/\/2 largest removed\n                        if(tempsum1 <= 50)\n                        {\n                            \/\/out.print(\"loop 1 \"+ tempsum1);\n                            p[large] = p[large] - 2;\n                            out.print(alphabet[large]);\n                            out.print(alphabet[large]);\n                            out.print(\" \");\n                            sump = sump - 2;\n                            continue;\n                        }\n                    }\n                    if(p[seclarge] > 0)\n                    {\n                        tempsum2 = ((p[seclarge] - 1)\/(sump-2))*100; \/\/1 largest & 1 second largest\n                        if(tempsum2 <= 50)\n                        {\n                            \/\/out.write(\"loop2 + \" + tempsum2);\n                            out.print(alphabet[large]);\n                            out.print(alphabet[seclarge]);\n                            out.print(\" \");\n                            p[large] = p[large] - 1;\n                            p[seclarge] = p[seclarge] -1;\n                            sump = sump - 2;\n                            continue;\n                        }\n                    }\n                    tempsum = ((p[large]-1)\/(sump-1))*100;    \/\/1 largest removed\n                    tempsum3 = ((p[seclarge])\/(sump-1)) * 100; \/\/1 largest removed\n                    if(tempsum <= 50 && tempsum3<=50)   \/\/1 largest removed\n                    {\n                        \/\/out.write(\"loop3 \" + tempsum + \" \" + tempsum3 + \" \");\n                        out.print(alphabet[large]);\n                        out.print(\" \");\n                        p[large] = p[large] - 1;\n                        sump = sump - 1;\n                    }\n                }\n            testcase++;\n            out.println();\n        } \n            out.close();\n        }\n        catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } \n    }\n}"}
{"idx":"1375","func":"class J16_r2Cq1 {\n    \n       public static void main(String [] args) {\n            File infile = new File(\"C:\\\\Users\\\\iftikhar\\\\Downloads\\\\A-large.in\");\n             File outFile = new File(\"C:\\\\Users\\\\iftikhar\\\\Downloads\\\\A-large.out\");\n\n            try {\n             BufferedReader br = new BufferedReader(new FileReader(infile));\n             BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\n             int testCases = Integer.parseInt(br.readLine());\n             \n             for(int t=1;t<=testCases;t++){\n                 int N = Integer.parseInt(br.readLine()); \n                 String s=br.readLine();\n                 String[] line1 = s.split(\" \");\n                 int[] num=new int [line1.length];String gs=\"\";\n                 for(int i=0;i<line1.length;i++){num[i]=Integer.parseInt(line1[i]);gs+=num[i];}\n                 boolean flag=true;\n                 String FS=\"\";\n                 System.out.println(gs);\n                 while(flag){\n                     int max=0;\n                     String maxs=\"\";\n                     for (int i = 0; i < num.length; i++) {\n                         if (num[i] > max) {  \n                             max = num[i];\n                             maxs = i+\" \";\n                         }\n                         else if(num[i]==max)maxs+=i+\" \";    \n                     }\n                     System.out.println(maxs);\n                     String[] hhh = maxs.split(\" \");\n                     if(hhh.length==1){\n                         String[] hh = maxs.split(\" \");\n                         FS+=\"\"+String.valueOf((char)('A' + Integer.parseInt(hh[0])))+\"\"+\n                         String.valueOf((char)('A' + Integer.parseInt(hh[0])));\n                         num[Integer.parseInt(hh[0])]-=2;\n                     }\n                     else if(hhh.length==3 && max==1){\n                         String[] hh = maxs.split(\" \");\n                         FS+=\"\"+String.valueOf((char)('A' + Integer.parseInt(hh[0])));\n                         num[Integer.parseInt(hh[0])]-=1;\n                     }\n                     else if(hhh.length>1){\n                         String[] hh = maxs.split(\" \");\n                         \n                         FS+=\"\"+String.valueOf((char)('A' + Integer.parseInt(hh[0])))+\"\"+\n                         String.valueOf((char)('A' + Integer.parseInt(hh[1])));\n                         num[Integer.parseInt(hh[0])]--;\n                         num[Integer.parseInt(hh[1])]--;\n                     }\n                     FS+=\" \";\n                     flag=false;\n                     for(int i=0;i<line1.length;i++)\n                         if(num[i]!=0)flag=true;\n                     \n                     \n                     \n                     \n                      max=0;int maxn=-1;\n                     for (int i = 0; i < num.length; i++) {\n                         if (num[i] > max) {  \n                             max = num[i];\n                             maxn=i;\n                         }\n                         \n                     }\n                     if(maxn!=-1){\n                     for (int i = 0; i < num.length; i++) {\n                         if (num[i] > max) {  \n                             max = num[i];\n                             maxn=i;\n                         }\n                         \n                     }\n                     int sum=0;\n                     for (int i = 0; i < num.length; i++) {\n                         if(maxn!=i)sum+=num[i];                         \n                     }\n                     if(sum<num[maxn]){System.out.println(\"errror:::\"+FS);\n                     \n                     System.exit(0);}\n                     \n                     }\n                 }System.out.println(\"***********\");\n                     \n                     \n                 \n                 \n                 bw.write(\"Case #\"+t+\": \"+FS+\"\\n\"); \n          \n             }\n             br.close();\n             bw.close();        \n            }\n            catch(FileNotFoundException ex) {\n                System.out.println(\n                    \"Unable to open file\");                \n            }\n            catch(IOException ex) {\n                System.out.println(\n                    \"Error reading file\");                   \n            }\n        }\n     \n\n}"}
{"idx":"1376","func":"class GoogleCodeJamProblem {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = in.nextInt();\n            int[] num = new int[n];\n            int total = 0;\n            for (int j = 0; j < n; j++) {\n                num[j] = in.nextInt();\n                total += num[j];\n            }\n            String[] alph = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\",\n                \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n            String evacuation = \"\";\n            if (n == 2) {\n                if (total == 2) {\n                    evacuation = \"AB\";\n                } else if (total == 4) {\n                    evacuation = \"AB AB\";\n                } else if (total == 6) {\n                    evacuation = \"AB AB AB\";\n                } else if (total == 8) {\n                    evacuation = \"AB AB AB AB\";\n                }\n            } else {\n                if (num[0] == 1 && num[1] == 1 && num[2] == 1) {\n                    evacuation = \"A BC\";\n                } else {\n                    int a = num[0];\n                    int b = num[1];\n                    int c = num[2];\n                    \/\/ <editor-fold>\n                    if (a == 4 || b == 4 || c == 4) {\n                        if (a == 4) {\n                            num[0] = 3;\n                            evacuation += \"A\";\n                        }\n                        if (b == 4) {\n                            num[1] = 3;\n                            evacuation += \"B\";\n                        }\n                        if (c == 4) {\n                            num[2] = 3;\n                            evacuation += \"C\";\n                        }\n                        evacuation += \" \";\n                    }\n                    \/\/ <\/editor-fold>\n                    a = num[0];\n                    b = num[1];\n                    c = num[2];\n                    \/\/ <editor-fold>\n                    if (a == 3 || b == 3 || c == 3) {\n                        if (a == 3 && b == 3 && c == 3) {\n                            evacuation = \"A BC A BC A BC\";\n                            num[0] = 0;\n                            num[1] = 0;\n                            num[2] = 0;\n                        } else {\n                            if (a == 3) {\n                                evacuation += \"A\";\n                                num[0] = 2;\n                            }\n                            if (b == 3) {\n                                evacuation += \"B\";\n                                num[1] = 2;\n                            }\n                            if (c == 3) {\n                                evacuation += \"C\";\n                                num[2] = 2;\n                            }\n                            evacuation += \" \";\n                        }\n                    }\n                    \/\/ <\/editor-fold>\n                    a = num[0];\n                    b = num[1];\n                    c = num[2];\n                    \/\/ <editor-fold>\n                    if (a == 2 || b == 2 || c == 2) {\n                        if (a == 2 && b == 2 && c == 2) {\n                            evacuation += \"A BC A BC\";\n                            num[0] = 0;\n                            num[1] = 0;\n                            num[2] = 0;\n                        } else {\n                            if (a == 2) {\n                                num[0] = 1;\n                                evacuation += \"A\";\n                            }\n                            if (b == 2) {\n                                num[1] = 1;\n                                evacuation += \"B\";\n                            }\n                            if (c == 2) {\n                                num[2] = 1;\n                                evacuation += \"C\";\n                            }\n                            evacuation += \" \";\n                            evacuation += \"A BC\";\n                        }\n                    }\n                    \/\/ <\/editor-fold>\n                }\n            }\n            System.out.println(\"Case #\" + (i + 1) + \": \" + evacuation);\n        }\n    }\n    \n}"}
{"idx":"1377","func":"class A {\n    \n    public static void main(String[] args){\n        Scanner sc=new Scanner(System.in);\n        \n        int t=sc.nextInt();\n        \n        for(int z=1; z<=t; z++){\n            System.out.print(\"Case #\"+z+\": \");\n            int N=sc.nextInt();\n            int count[]=new int[N];\n            int people=0;\n            for(int i=0; i<N; i++){\n                count[i]=sc.nextInt();\n                people+=count[i];\n            }\n            boolean flag=false;\n            while(!flag){\n                flag=true;\n                String maxpeople=\"\";\n                int max=0;\n                for(int i=0; i<N; i++){ \n                    if(count[i]==0){\n                        \/\/nothing to do here\n                    }\n                    else{\n                        flag=false;\n                        if(count[i]>max){\n                            max=count[i];\n                            maxpeople=i+\",\";\n                        }\n                        else if(count[i]==max){\n                            maxpeople=maxpeople+i+\",\";\n                        }\n                    }\n                }\n                if(!flag){\n                    \/\/print here\n                    String[] maxindexes=maxpeople.split(\",\");\n                    \/\/if there is one max term, remove it.\n                    \/\/ if two maxterms, remove them\n                    \/\/if 3, remove 1\n                    \/\/if four remove 2\n                    int r=maxindexes.length%2==0?2:1;\n                    \/\/System.out.println(maxpeople+\" \"+max);\n                    for(int i=0; i<r; i++){\n                        int index=Integer.parseInt(maxindexes[i]);\n                        System.out.print((char)(index+'A'));\n                        count[index]=count[index]-1;\n                    }\n                    System.out.print(\" \");\n                }\n            }\n            System.out.println(\"\");\n        }\n    }\n}"}
{"idx":"1378","func":"class A {\n    static Scanner scan;\n    static PrintWriter writer;\n\n    public static void main(String[] args) {\n        File file = new File(\"D:\/\/A-large.in\");\n        File out = new File(\"D:\/\/outA.txt\");\n        try {\n            scan = new Scanner(file);\n            writer = new PrintWriter(out);\n            int t = scan.nextInt();\n            for (int i = 1; i <= t; i++) {\n                writer.print(\"Case #\" + i + \": \");\n                \/\/ input go here\n                int P = scan.nextInt();\n                List<Integer> list = new ArrayList<Integer>();\n\n                for (int j = 0; j < P; j++) {\n                    list.add(scan.nextInt());\n                }\n\n                if (list.size() == 2) {\n                    int min = 0;\n                    if (list.get(0) > list.get(1)) {\n                        min = list.get(1);\n                        for (int i3 = 0; i3 < list.get(0) - list.get(1); i3++) {\n                            writer.print(\"A \");\n                        }\n                    } else {\n                        min = list.get(0);\n                        for (int i4 = 0; i4 < list.get(1) - list.get(0); i4++) {\n                            writer.print(\"B \");\n                        }\n                    }\n                    for (int i1 = 0; i1 < min; i1++) {\n                        writer.print(\"AB \");\n                    }\n                    writer.println();\n                } else {\n                \n                    while (true) {\n                        int max = -1, imax = -1;\n                        int sum = 0;\n                        for (int i5 = 0; i5 < list.size(); i5++) {\n                            sum += list.get(i5);\n                            if (list.get(i5) > max) {\n                                max = list.get(i5);\n                                imax = i5;\n                            }\n                        }\n                \n                        if (sum > 2) {\n                            writer.print((char) ('A' + imax) + \" \");\n                            list.set(imax, list.get(imax) - 1);\n                        } else {\n                            for (int i2 = 0; i2 < list.size(); i2++) {\n                                if (list.get(i2) > 0) {\n                                    writer.print((char) ('A' + i2));\n                                }\n                            }\n                            writer.println(\"\");\n                            break;\n                        }\n                    }\n                }\n            }\n        } catch (Exception ex) {\n\n        } finally {\n            writer.close();\n        }\n    }\n\n}"}
{"idx":"1379","func":"class small {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(new File(\"A-large.in\"));\n        PrintWriter out = new PrintWriter(\"large_output.txt\");\n        \/\/ Scanner in = new Scanner(new File(\"large_input.txt\"));\n        \/\/ PrintWriter out=new PrintWriter(\"large_output.txt\");\n        int n = in.nextInt(); \/\/ Scanner has functions to read ints, longs,\n                                \/\/ strings, chars, etc.\n        int m = -1;\/\/ answer\n        int party = m;\n        int max = 0;\n        int maxid =0;\n        int max2 = 0;\n        int max2id =0;\n        int temp = 0;\n        int sum = 0;\n        String ans = \"\";\n        for (int i = 1; i <= n + 1; i++) {\n            if (in.hasNext()) {\n                \/\/ each case\n                m = in.nextInt();\n                party = m;\n                sum = 0;\n                int arrParty[] = new int[m];\n                for (int j = 0; j < party; j++) {\n                    arrParty[j] = in.nextInt();\n                    sum = sum + arrParty[j];\n\n                }\n\n                while (sum > 3) {\n                    max = 0;\n\n                    for (int j = 0; j < party; j++) {\n                        if (max < arrParty[j]) {\n                            max = arrParty[j];\n                            maxid = j;\n                        }\n\n                    }\n\n            \n                    ans = ans + (char) (maxid + 'A');\n\n                    arrParty[maxid]--;\n                    sum--;\n                    max = 0;\n\n                    for (int j = 0; j < party; j++) {\n                        if (max < arrParty[j]) {\n                            max = arrParty[j];\n                            maxid = j;\n                        }\n\n                    }\n                    ans = ans + (char) (maxid + 'A');\n\n                    arrParty[maxid]--;\n                    sum--;\n                    max = 0;\n                    ans=ans+\" \";\n\n                }\n                if(sum==3)\n                {\n                    for (int j = 0; j < party; j++) {\n                        if (max < arrParty[j]) {\n                            max = arrParty[j];\n                            maxid = j;\n                        }\n\n                    }\n                    ans = ans + (char) (maxid + 'A');\n\n                    arrParty[maxid]--;\n                    sum--;\n                    max = 0;\n                    ans=ans+\" \";\n                }\n                \n                \n                if(sum<=2){\n                for(int j=0;j<party;j++){\n                    if(arrParty[j]!=0){\n                        maxid=j;\n                    break;}\n\/\/                    System.out.println(i+\"\"+j);\n                }\n                for(int j=party-1;j>0;j--){\n                    if(arrParty[j]!=0){\n                        max2id=j;\n                    break;}\n\/\/                    System.out.println(i+\"\"+j);\n                }\n                if (maxid==max2id) ans=ans+(char) (maxid + 'A');\n                if (maxid!=max2id) ans=ans+(char) (maxid + 'A')+(char) (max2id + 'A');}\n                \n                if (m != -1)\n                    out.println(\"Case #\" + i + \": \" + ans);\n\n                else {\n                    out.println(\"Case #\" + i + \": \" + \"Wrong Input\");\n                    \n                }\n                ans=\"\";\n                \/\/ each case closed\n\n            }\n            \/\/ System.out.println(i);\/\/test\n        }\n        in.close();\n        out.close();\n\n    }\n}"}
{"idx":"1380","func":"class SenateEvacuation {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scanner = new Scanner(new BufferedReader(new FileReader(\"in.txt\")));\n        PrintWriter writer = new PrintWriter(\"out.txt\");\n        int t = scanner.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int n = scanner.nextInt();\n            HashMap<Character, Integer> map = new HashMap<>();\n            for (int j = 0; j < n; j++) {\n                char ch = 'A';\n                ch += j;\n                map.put(ch, scanner.nextInt());\n            }\n            writer.print(\"Case #\" + i + \": \");\n            if (map.size() == 0) continue;\n            char mxc = 'A';\n            int mx = 0;\n            for (char ch: map.keySet()) {\n                if (map.get(ch) > mx) {\n                    mxc = ch;\n                    mx = map.get(mxc);\n                }\n            }\n            if (mx == 0) continue;\n            map.remove(mxc);\n            char mxc1 = 'A';\n            int mx1 = 0;\n            for (char ch: map.keySet()) {\n                if (map.get(ch) > mx1) {\n                    mxc1 = ch;\n                    mx1 = map.get(mxc1);\n                }\n            }\n            int diff = mx - mx1;\n            while (diff > 0) {\n                writer.print(mxc + \" \");\n                diff--;\n                mx--;\n            }\n            map.remove(mxc1);\n            for (char ch1: map.keySet()) {\n                int k = map.get(ch1);\n                while (k > 0) {\n                    writer.print(ch1 + \" \");\n                    k--;\n                }\n            }\n            while (mx != 0) {\n                writer.print(mxc + \"\" + mxc1 + \" \");\n                mx--;\n            }\n            writer.println();\n        }\n        writer.close();\n        scanner.close();\n    }\n}"}
{"idx":"1381","func":"class MainA {\n\n    public static void main(String[] args) {\n\/\/        String in = \".\/sample.in\";\n\/\/        String out = \".\/sample.out\";\n\/\/        String in = \".\/A-small-attempt0.in\";\n\/\/        String out = \".\/A-small-attempt0.out\";\n        String in = \".\/A-large.in\";\n        String out = \".\/A-large.out\";\n\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(in));\n            FileWriter fw = new FileWriter(out);\n            int T = Integer.parseInt(br.readLine());\n            for (int i = 0; i < T; i++) {\n                System.out.print(\"Case #\" + (i + 1) + \": \");\n                fw.write(\"Case #\" + (i + 1) + \": \");\n                int N = Integer.parseInt(br.readLine());\n                String[] strP = br.readLine().split(\" \");\n                Map<Character, Integer> P = new HashMap<>();\n                int total = 0;\n                for (int j = 0; j < N; j++) {\n                    P.put((char) ('A' + j), Integer.parseInt(strP[j]));\n                    total += Integer.parseInt(strP[j]);\n                }\n                while (total > 0) {\n                    for (int k = 0; k < 2; k++) {\n                        for (int j = 0; j < N; j++) {\n                            char p = (char) ('A' + j);\n                            if (P.get(p) == 0)\n                                continue;\n                            double offset = ((double) (total - 1) \/ 2);\n                            boolean valid = true;\n                            if (k != total) {\n                                for (int l = 0; l < N; l++) {\n                                    if (l != j) {\n                                        char p1 = (char) ('A' + l);\n                                        if (P.get(p1) > offset && k == 1) {\n                                            valid = false;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            if (valid) {\n                                System.out.print(p);\n                                fw.write(p);\n                                total--;\n                                P.put(p, P.get(p) - 1);\n                                break;\n                            }\n                        }\n                    }\n                    System.out.print(' ');\n                    fw.write(' ');\n                }\n                System.out.print(\"\\n\");\n                fw.write(\"\\n\");\n            }\n            fw.close();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n\n}"}
{"idx":"1382","func":"class senateevac {\n\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        int T,i,j,N,ptotal,evac=0,k,kcount=0,check=0;\n        int [] P = new int[26];\n        char [] alphabet = new char[26];\n        String [] result = new String[1000];\n        Scanner filein = new Scanner(new File(\"C:\/codejamdata\/A-small-attempt0.in\"));\n        PrintStream fileout = new PrintStream(new FileOutputStream(\"C:\/codejamdata\/gcj1casoutput.txt\"));\n        alphabet[0] = 'A';\n        for(i=1;i<26;i++)\n        {\n            alphabet[i] = (char) ((int) alphabet[i-1] +1);\n        }\n        T = filein.nextInt();\n        for(i=0;i<T;i++)\n        {\n            N = filein.nextInt();\n            ptotal=0;\n            for(j=0;j<N;j++)\n            {\n                P[j] = filein.nextInt();\n                \/\/System.out.println(P[j]);\n                ptotal = ptotal + P[j];\n            }\n            \/\/System.out.println(\"ptotal is \" + ptotal);\n            evac=0;\n            k=0;\n            kcount=0;\n            if(ptotal%2>0)\n                check = (ptotal+1)\/2;\n            else\n                check = ptotal\/2;\n            while(evac==0)\n            {\n                if(ptotal<=0)\n                    break;\n                result[k] = \"\";\n                for(j=0;j<N;j++)\n                {\n                    if(P[j] >= check)\n                    {\n                        result[k] = result[k] + alphabet[j];\n                        kcount++;\n                        P[j]--;\n                        \/\/System.out.println(result[k] + \" \" + ptotal);\n                        if(kcount==2)\n                        {\n                            break;\n                        }\n                    }\n                }\n                ptotal = ptotal -kcount;\n                kcount=0;\n                if(result[k]==\"\")\n                {\n                    for(j=0;j<N;j++)\n                    {\n                        if(P[j]>0)\n                        {\n                            result[k] = result[k] + alphabet[j];\n                            ptotal--;\n                            kcount++;\n                            P[j]--;\n                            \/\/System.out.println(result[k] + \" first  \" + ptotal);\n                        }\n                        if(ptotal != 1 )\n                        {\n                            kcount=0;\n                            break;\n                        }\n                                \n                    }\n                }\n                k++;\n                if(ptotal%2>0)\n                    check = (ptotal+1)\/2;\n                else\n                    check = ptotal\/2;\n            }\n            fileout.print(\"Case #\" + (i+1) + \": \");\n            for(j=0;j<k;j++)\n            {\n                fileout.print(\" \" + result[j]);\n            }\n            fileout.println();\n\n        }\n        filein.close();\n        fileout.close();\n    }\n\n}"}
{"idx":"1383","func":"class ProblemA {\n    \n    public static void main(String[] agrs) throws FileNotFoundException {\n        String FILENAME = \"longA\";\n        \n        File FILE = new File(FILENAME);\n        \n        Scanner fileReader = new Scanner(FILE);\n        \n        int T =  fileReader.nextInt();\n        \n        for (int test = 0; test < T; test ++) {\n            int parties = fileReader.nextInt();\n            int[] senate = new int[parties];\n            int left = 0;\n            int partiesLeft = parties;\n            \n            \n            for (int party = 0; party < parties; party ++) {\n                int x = fileReader.nextInt();\n                senate[party] = x;\n                left += x;\n            }\n            \n            ArrayList<String> out = new ArrayList<String>();\n            char[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n            \n            while (left > 0) {\n                \n                int biggest = -1;\n                int max = -1;\n                int biggest2 = -1;\n                int max2 = -1;\n                for (int party = 0; party < parties; party ++) {\n                    if (senate[party] >= max) {\n                        max2 = max;\n                        biggest2 = biggest;\n                        max = senate[party];\n                        biggest = party;\n                    }\n                }\n                String addMe = \"\";\n                \n                if (partiesLeft == 2 && max == max2) {\n                    addMe = \"\" + alphabet[biggest] + alphabet[biggest2];\n                    left -= 2;\n                    senate[biggest] -= 1;\n                    senate[biggest2] -= 1;\n                    \n                    if (senate[biggest2] == 0) {\n                        partiesLeft --;\n                    }\n                } else {\n                    left -= 1;\n                    addMe = \"\" + alphabet[biggest];\n                    senate[biggest] -= 1;\n                }\n                \n                if (senate[biggest] == 0) {\n                    partiesLeft --;\n                }\n                \n                out.add(addMe);\n            }\n            \n            int numOuts = out.size();\n            System.out.print(\"Case #\" + (test+1) + \": \");\n            for (int i = 0; i < numOuts; i ++) {\n                String me = out.get(i);\n                System.out.print(me + \" \");\n            }\n            System.out.println(\"\");\n        }\n        fileReader.close();\n    }\n}"}
{"idx":"1384","func":"class A\n{\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader in = new BufferedReader(new FileReader(args[0]));\n        BufferedWriter out = new BufferedWriter(new FileWriter(args[1]));\n        {\n            int nb_cases = Integer.parseInt(in.readLine());\n            \n            for(int icase = 0; icase < nb_cases; icase++)\n            {\n                \/\/ read input\n                int N = Integer.parseInt(in.readLine());\n                String[] P_str = in.readLine().split(\" \");\n                int[] P = new int[N];\n                for(int i = 0; i < N; i++)\n                    P[i] = Integer.parseInt(P_str[i]);\n                \n                \/\/ solve\n                LinkedList<String> y = new LinkedList<String>();\n                \n                int S = 0;\n                for(int p = 0; p < N; p++)\n                    S += P[p];\n                \n                while(true)\n                {\n                    String res = \"\";\n                    \n                    {\n                        int pmax = 0;\n                        for(int p = 1; p < N; p++)\n                            if(P[p] > P[pmax])\n                                pmax = p;\n\n                        if(P[pmax] == 0)\n                            break;\n                        P[pmax]--;\n                        S--;\n                        res = res + (char)('A' + pmax);\n                    }\n\n                    {\n                        int pmax = 0;\n                        for(int p = 1; p < N; p++)\n                            if(P[p] > P[pmax])\n                                pmax = p;\n\n                        if(P[pmax] > 0)\n                        {\n                            P[pmax]--;\n                            S--;\n                            \n                            int newpmax = 0;\n                            for(int p = 1; p < N; p++)\n                                if(P[p] > P[newpmax])\n                                    newpmax = p;\n                            if(P[newpmax] > S\/2)\n                            {\n                                P[pmax]++;\n                                S++;\n                            }\n                            else\n                                res = res + (char)('A' + pmax);\n                        }\n                    }\n                    y.add(res);\n                }\n                \n                \/\/ write output\n                out.write(\"Case #\"+(icase+1)+\":\");\n                for(String ye : y)\n                    out.write(\" \"+ye);\n                out.write(\"\\n\");\n            }\n        }\n        out.close();\n        in.close();\n    }\n}"}
{"idx":"1385","func":"class Main {\n    \n    public static void main(String[] args) throws IOException{\n        Scanner scanner = new Scanner(System.in);\n        \/\/Scanner scanner = new Scanner(new FileInputStream(new File(\"A-small-attempt0.in\")));\n        \/\/FileOutputStream fo = new FileOutputStream(new File(\"output.out\"));\n        int t = scanner.nextInt();\n        for(int x = 1; x <= t; ++x){\n            int n = scanner.nextInt();\n            int[] p = new int[n];\n            for(int i = 0; i < n; ++i){\n                p[i] = scanner.nextInt();\n            }\n            System.out.print(\"Case #\" + x + \":\");\n            \/\/fo.write((\"Case #\" + x + \":\").getBytes());\n            if(n == 2){\n                for(int i = 0; i < p[0]; ++i){\n                    System.out.print(\" AB\");\n                    \/\/fo.write((\" AB\").getBytes());\n                }\n                System.out.println();\n                \/\/fo.write((\"\\n\").getBytes());\n            }\n            else{\n                int count1 = 0;\n                for(int i3 = 0; i3 < p.length; ++i3)\n                    if(p[i3] != 0)\n                        ++count1;\n                int count = count1;\n                while(count > 2){\n                    int max = 0;\n                    int index1 = -1;\n                    for(int i3 = 0; i3 < p.length; ++i3){\n                        if(p[i3] > max){\n                            max = p[i3];\n                            index1 = i3;\n                        }\n                    }\n                    int index = index1;\n                    --p[index];\n                    System.out.print(\" \" + (char)('A'+index));\n                    int count2 = 0;\n                    for(int i = 0; i < p.length; ++i)\n                        if(p[i] != 0)\n                            ++count2;\n                    \/\/fo.write((\" \" + (char)('A'+index)).getBytes());\n                    count = count2;\n                }\n                int i1 = -1, i2 = -1;\n                for(int i = 0; i < p.length; ++i){\n                    if(p[i] != 0){\n                        if(i1 == -1)\n                            i1 = i;\n                        else\n                            i2 = i;\n                    }\n                }\n                System.out.println(\" \" + (char)('A'+i1) + (char)('A'+i2));\n                \/\/fo.write((\" \" + (char)('A'+i1) + (char)('A'+i2) + '\\n').getBytes());\n            }\n        }\n        \/\/fo.flush();\n        \/\/fo.close();\n    }\n    \n}"}
{"idx":"1386","func":"class SenateEvac {\n    public static void main(String[] args){\n        File a = new File(\"A-small-attempt2.in\");\n        Scanner input = null;\n        try {\n            input = new Scanner(a);\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \/\/Scanner input = new Scanner(System.in);\n        \n        File b = new File(\"A-output.txt\");\n        FileWriter fw = null;\n        try {\n            fw = new FileWriter(b);\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        \n        int number = input.nextInt();\n        input.nextLine();\n        int cases = number;\n        \n        while(number > 0){\n            int parties = input.nextInt();\n            int[] partySizes = new int[parties];\n            int totalMembers = 0;\n            for(int i = 0; i < parties; i ++){\n                partySizes[i] = input.nextInt();\n                totalMembers += partySizes[i];\n            }\n            String result = \"\";\n            \n            while(totalMembers > 0){\n                int max = -1;\n                int maxIndex = -1;\n                int otherIndex = -1;\n                int thirdIndex = -1;\n                for (int i =0; i < parties; i++){\n                    if (partySizes[i] > max){\n                        max = partySizes[i];\n                        maxIndex = i;\n                    } else if (partySizes[i] == max){\n                        if(otherIndex != -1 && max == 1){\n                            otherIndex = -1;\n                        } else {\n                            otherIndex = i;\n                        }\n                    }\n                }\n                if(otherIndex != -1){\n                    partySizes[maxIndex] -= 1;\n                    partySizes[otherIndex] -= 1;\n                    result = result + (char)(65 + maxIndex) + (char) (65 + otherIndex) + \" \";\n                    totalMembers -= 2;\n                } else {\n                    partySizes[maxIndex] -= 1;\n                    result = result + (char)(65 + maxIndex) + \" \";\n                    totalMembers -= 1;\n                }\n            }\n            \n            char f = (char)65;\n            \n            \n            try {\n                fw.write(\"Case #\" + (cases - number + 1) + \": \" + result + \"\\n\");\n            } catch (IOException e) {\n                \/\/ TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            number--;\n        }\n        \n        try {\n            fw.close();\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    \n}"}
{"idx":"1387","func":"class round3a {\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner input = new Scanner(System.in);\n        int T = input.nextInt();\n        for (int n = 0; n < T; n++)\n        {\n            int N = input.nextInt();\n            char[] chars={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n            int[] strength=new int[N];\n            int total=0;\n            for(int i=0;i<N;i++)\n            {\n                strength[i]=input.nextInt();\n                total+=strength[i];\n            }\n            String str=\"\";\n            int count=0;\n            while(total>0)\n            {\n                double[] per=new double[N];\n                for(int i=0;i<N;i++)\n                {\n                    per[i]=((double)strength[i])\/total;\n                }\n                \/\/remove first\n                int maxpos=0;\n                for(int i=0;i<N;i++)\n                {\n                    if(strength[i]>strength[maxpos])\n                    {\n                        maxpos=i;\n                    }\n                }\n            if(count==0)\n                {str=str+chars[maxpos];\n                strength[maxpos]--;\n                total--;}\n            if(count==1)\n            {\n                strength[maxpos]--;\n                total--;\n                double[] newper=new double[N];\n                for(int i=0;i<N;i++)\n                {\n                    newper[i]=((double)strength[i])\/total;\n                }\n                boolean b=false;\n                for(int i=0;i<N;i++)\n                {\n                    if(newper[i]>.5)\n                    {\n                        b=true;\n                    }\n                }\n                if(b)\n                {\n                    strength[maxpos]++;\n                    total++;\n                }\n                else    \n                {\n                    str=str+chars[maxpos];\n                }\n                \n                    str=str+\" \";\n                    count=-1;\n                }\n                count++;\n            }\n            System.out.println(\"Case #\"+(n+1)+\": \"+str);\n        }\n    }\n}"}
{"idx":"1388","func":"static void main(String[] args) throws Exception {\n        \/\/BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        \/\/PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n        \n        BufferedReader br=new BufferedReader(new FileReader(\"A-large.in\"));\n        PrintWriter pw=new PrintWriter(new FileWriter(\"A-large.out\"));\n        \n        int t,total,tc,n,i,arr[],M,c,twice;\n        String inp[],character=\"\";\n        t = Integer.parseInt(br.readLine().trim());\n        for(tc=1;tc<=t;tc++){\n            total=0;\n            character=\"\";\n            n=Integer.parseInt(br.readLine().trim());\n            arr=new int[n];\n            inp=br.readLine().trim().split(\" \");\n            for(i=0;i<n;i++){\n                arr[i]=Integer.parseInt(inp[i]);\n                total+=arr[i];\n            }\n            while(total>0){\n                character+=\" \";\n                int M1,i1;\n                for(M1=0,i1=1;i1<arr.length;i1++)\n                    if(arr[M1]<arr[i1])\n                        M1=i1;\n                M=arr[M1];\n                int i2,c1;\n                for(i2=c1=0;i2<arr.length;i2++)\n                    if(arr[i2]==M)\n                        c1++;\n                c=c1;\n                if(c==2){\/\/end case \n                    \/\/remove 2 at a time\n                    twice=2;\n                    for(i=0;i<n && twice >0 ;i++){\n                        if(arr[i]==M && twice>0){\n                            character+=(char)(65+i) +\"\";\n                            arr[i]--;\n                            total--;\n                        }\n                    }                    \n                }\n                else{\n                    for(i=0;i<n;i++){\n                        if(arr[i]==M){\n                            character+=(char)(65+i) +\"\";\n                            arr[i]--;\n                            total--;\n                            break;\n                        }\n                    }\n                        \n                }\n            }\n            \n            \n            \n            \n            \n            pw.println(\"Case #\"+tc+\":\"+character);\n        }\n        pw.flush();\n        pw.close();\n\n    }\n\n}"}
{"idx":"1389","func":"class a {\n    public static void main(String args[]){\n        \n        Scanner in = new Scanner(System.in);\n        \n        int cases = in.nextInt();\n        int n;\n        int parties[] = new int[0];\n        \n        for (int i = 0; i < cases; i++)\n        {\n            n = in.nextInt();            \n            parties = new int[n];\n            System.out.println();\n            System.out.print(\"Case #\"+(i+1)+\": \");\n            \n            for (int j = 0; j < n; j++)\n            {                \n                parties[j] = in.nextInt();\n            }\n            \n            \/\/ evacuate the suckers if 2 party system\n            if (n == 2)\n            {\n                for (int k = 0; k < parties[0]; k++)\n                {\n                    System.out.print(\"AB \");\n                }                    \n            }\n            \/\/ else evacuate the fools\n            else\n            {\n                int winner = 0;\n                int runnerup = 0;\n                int loser = 0; \n                int windex = 0;\n                int rindex = 0;\n                int lindex = 0;\n                \n                \n                \/\/ figure out whos in charge\n                for (int l = 0; l < n; l++)\n                {\n                    if (parties[l] > winner)\n                    {\n                        loser = runnerup;\n                        lindex = rindex;\n                        runnerup = winner;\n                        rindex = windex;\n                        winner = parties[l];\n                        windex = l;                        \n                    }\n                    else if (parties[l] > runnerup)\n                    {\n                        loser = runnerup;\n                        lindex = rindex;\n                        runnerup = parties[l];\n                        rindex = l;\n                    }\n                    else\n                    {\n                        loser = parties[l];\n                        lindex = l;\n                    }\n                }\n                \n                \/\/ get the majority out first\n                while (parties[windex] > parties[rindex])\n                {\n                    char win = (char) ('A' + windex);\n                    System.out.print(win+\" \");\n                    parties[windex] -= 1;\n                }\n                \/\/ then clear out the losers\n                while (parties[lindex] > 0)\n                {\n                    char los = (char) ('A' + lindex);\n                    System.out.print(los+\" \");\n                    parties[lindex] -= 1;\n                }\n                \/\/ then march the rest out holding hands\n                while (parties[windex] > 0)\n                {\n                    char win = (char) ('A' + windex);\n                    char rin = (char) ('A' + rindex);\n                    System.out.print(win+\"\"+ rin+\" \");\n                    parties[windex] -= 1;\n                    parties[rindex] -= 1;\n                }\n                \n            }\n        }\n        \n        in.close();\n    }\n}"}
{"idx":"1390","func":"class Main {\n    public static final String ALPHABET[] = {\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n    };\n    public static void main(String[] args) throws Exception {\n        \/\/ set up scanner and iterate over test cases\n        Scanner scanner = new Scanner(new FileInputStream(\n            \"C:\\\\Users\\\\Stefan\\\\Downloads\\\\A-large.in\"));\n        PrintStream output = new PrintStream(\n            \"C:\\\\Users\\\\Stefan\\\\Downloads\\\\A-large.out\");\n        int T = scanner.nextInt();\n        for (int t = 1; t <= T; ++t) {\n            \/\/ get parameters\n            int N = scanner.nextInt();\n            int[] parties = new int[N];\n            int senatorsCount = 0;\n            for (int n = 0; n < N; ++n)\n                senatorsCount += (parties[n] = scanner.nextInt());\n            \/\/ solve problem\n            output.print(\"Case #\" + t + \":\");\n            while (senatorsCount > 0) {\n                \/\/ find largest party \/ parties\n                int maxC1 = 0;\n                int maxC2 = 0;\n                int maxI1 = 0;\n                int maxI2 = 0;\n                for (int party = 0; party < N; ++party)\n                    if (parties[party] > maxC1) {\n                        maxC2 = maxC1;\n                        maxI2 = maxI1;\n                        maxC1 = parties[party];\n                        maxI1 = party;\n                    }\n                    else if (parties[party] == maxC1 || parties[party] > maxC2) {\n                        maxC2 = parties[party];\n                        maxI2 = party;\n                    }\n                \/\/ remove at least one senator\n                output.print(\" \" + ALPHABET[maxI1]);\n                --maxC1;\n                --parties[maxI1];\n                --senatorsCount;\n                \/\/ decide if a second senator should leave\n                if (maxC1 > maxC2) {\n                    \/\/ remove 2nd senator from this party\n                    output.print(ALPHABET[maxI1]);\n                    --maxC1;\n                    --parties[maxI1];\n                    --senatorsCount;\n                }\n                else if (senatorsCount == 1 || 2 * maxC2 > senatorsCount) {\n                    \/\/ remove 2nd senator from 2nd party\n                    output.print(ALPHABET[maxI2]);\n                    --maxC2;\n                    --parties[maxI2];\n                    --senatorsCount;\n                }\n            }\n            output.println();\n        }\n        output.close();\n        System.out.println(\"finished\");\n    }\n}"}
{"idx":"1391","func":"class TaskA {\n    \n    public static void main(String[] args) {\n        long time = System.currentTimeMillis();\n        Scanner sc = new Scanner(new BufferedInputStream(System.in));\n        int t = sc.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = sc.nextInt();\n            int[] result = new int[n];\n            for (int i5 = 0; i5 < n; i5++) {\n                result[i5] = sc.nextInt();\n            }\n            int[] counts = result;\n            int missing = -1;\n            int maxInd1 = missing == 0 ? 1 : 0;\n            for (int i3 = 1; i3 < counts.length; i3++) {\n                if (i3 != missing) {\n                    if (counts[i3] > counts[maxInd1]) {\n                        maxInd1 = i3;\n                    }\n                }\n            }\n            int maxInd = maxInd1;\n            int maxInd2 = maxInd == 0 ? 1 : 0;\n            for (int i4 = 1; i4 < counts.length; i4++) {\n                if (i4 != maxInd) {\n                    if (counts[i4] > counts[maxInd2]) {\n                        maxInd2 = i4;\n                    }\n                }\n            }\n            int secondInd = maxInd2;\n            StringBuilder sb = new StringBuilder();\n            int count = counts[maxInd] - counts[secondInd];\n            String s1 = \" \" + (char) ('A' + maxInd) + (char) ('A' + maxInd);\n            for (int i1 = 0; i1 < count \/ 2; i1++) {\n                sb.append(s1);\n            }\n            if (count % 2 == 1) {\n                sb.append(' ').append((char) ('A' + maxInd));\n            }\n            counts[maxInd] = counts[secondInd];\n            for (int j = 0; j < n; j++) {\n                if (j != maxInd && j != secondInd) {\n                    int count1 = counts[j];\n                    String s2 = \" \" + (char) ('A' + j) + (char) ('A' + j);\n                    for (int i2 = 0; i2 < count1 \/ 2; i2++) {\n                        sb.append(s2);\n                    }\n                    if (count1 % 2 == 1) {\n                        sb.append(' ').append((char) ('A' + j));\n                    }\n                }\n            }\n            String s = \" \" + (char) ('A' + maxInd) + (char) ('A' + secondInd);\n            for (int j = 0; j < counts[maxInd]; j++) {\n                sb.append(s);\n            }\n            System.out.println(\"Case #\" + (i+1) + \":\" + sb.toString());\n        }\n        sc.close();\n        System.err.println(System.currentTimeMillis() - time);\n    }\n\n}"}
{"idx":"1392","func":"class A1C {\n    public static void main(String[] args) throws Exception{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        for(int t = 1; t <= T; t++){\n            int N = Integer.parseInt(br.readLine());\n            int p[] = new int[N];\n            String split[] = br.readLine().split(\" \");\n            for(int i = 0; i < N; i++){\n                p[i] = Integer.parseInt(split[i]);\n            }\n            int ex1 = 0;\n            for(int i = 1; i < N; i++){\n                if(p[i] > p[ex1]){\n                    ex1 = i;\n                }\n            }\n            int ex2 = 0;\n            int max = 0;\n            for(int i = 0; i < N; i++){\n                if(i==ex1)continue;\n                if(p[i] > max){\n                    ex2 = i;\n                    max = p[i];\n                }\n            }\n            System.out.print(\"Case #\"+t+\":\");\n            while(p[ex1] > p[ex2]){\n                System.out.print(\" \" + (char)('A'+ex1));\n                p[ex1]--;\n            }\n            for(int i = 0; i < N; i++){\n                if(i==ex2 || i==ex1)continue;\n                while(p[i]>0){\n                    System.out.print(\" \" + (char)('A'+i));\n                    if(p[i]>1) System.out.print((char)('A'+i));\n                    \n                    p[i]-=2;\n                }\n            }\n            while(p[ex1] > 0){\n                System.out.print(\" \" + (char)('A'+ex1) + (char)('A'+ex2));\n                p[ex1]--;\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1393","func":"class Main {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner s = new Scanner(new File(\"in.txt\"));\n        int numCases = Integer.parseInt(s.nextLine());\n        long time = System.currentTimeMillis();\n        for (int i = 0; i < numCases; i++) {\n            int numParties = Integer.parseInt(s.nextLine());\n            String[] members = s.nextLine().split(\" \");\n            Evacuation e = new Evacuation();\n            for (int j = 0; j < numParties; j++) {\n                char c = (char) ('A' + j);\n                e.senate.add(new Party(new StringBuilder().append(c).toString(), Integer.parseInt(members[j])));\n            }\n            System.out.print(\"Case #\" + (i + 1) + \": \" + e.evacuate());\n            System.out.println();\n        }\n        System.out.println(\"Time: \" + (System.currentTimeMillis() - time));\n        s.close();\n    }\n    \n}"}
{"idx":"1394","func":"class A {\n  static Scanner sc;\n  static StringBuilder resultat = new StringBuilder(\"\");\n  \n  static String lettres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  \n  public static void main(String[] args) throws IOException {\n    String pb = \"A\";\n    sc = new Scanner(new FileReader(new File(pb+\".in\")));\n    PrintWriter out = new PrintWriter(new File(pb+\".out\"));\n    \n        \/\/TEST CASES----------------------------------------------------\n        int TC = sc.nextInt();sc.nextLine();\n    for (int tc = 1; tc <= TC; tc++) {\n      if(tc!=1) resultat.append(\"\\n\");\n      resultat.append(\"Case #\"+tc+\": \");\n      \n      \/\/READ----------------------------------------------------\n        int N = sc.nextInt();\n        long[] P = new long[N];\n        long sum = 0;\n        long count = 0;\n        for (int i = 0; i < P.length; i++)\n        {\n          P[i] = sc.nextLong();\n          sum+=P[i];\n          if(P[i]>0)\n            count++;\n        }\n        \n        \/\/SOLVE----------------------------------------------------\n        String res = \"\"; \/\/ long res = 0;\n        \n        \n    \/\/    System.out.println(\"\\n\\n\");\n        while(true){\n          \n          long Max = 0;\n          int i1 = -1;\n          \n    \/\/      System.out.println(count + \" \" + sum+\" -- \" + res);\n          \n          if(count==2 && sum>2){\n            ArrayList<Integer> ind = new ArrayList<>();\n            for (int i = 0; i < P.length; i++)\n            {\n              if(P[i]!=0)\n                ind.add(i);\n            }\n            \n            res+= lettres.charAt(ind.get(0))+\"\"+lettres.charAt(ind.get(1))+\" \";\n            P[ind.get(0)]--;\n            P[ind.get(1)]--;\n            sum-=2;\n            continue;\n          }\n          \n          \n          if(sum==2){\n            ArrayList<Integer> ind = new ArrayList<>();\n            for (int i = 0; i < P.length; i++)\n            {\n              if(P[i]!=0)\n                ind.add(i);\n            }\n            \n            res+= lettres.charAt(ind.get(0))+\"\"+lettres.charAt(ind.get(1));\n            break;\n          }\n          \n          else{\n            for (int i = 0; i < P.length; i++)\n            {\n              if(P[i]>Max){\n                Max = P[i];\n                i1=i;\n              }\n            }\n            \n            if(i1==-1)\n              break;\n            else{\n              res += lettres.charAt(i1)+\" \";\n              P[i1]--;\n              sum--;\n            }\n          }\n        }\n        \n        \/\/PRINT----------------------------------------------------\n        resultat.append(res.trim());\n        }\n        \n    \/\/CLOSE----------------------------------------------------\n        out.print(resultat);\n        System.out.println(resultat);\n        out.close(); sc.close();\n        }\n    }"}
{"idx":"1395","func":"static void main (String[] args) throws java.lang.Exception\n    {\n        Scanner in = new Scanner(System.in);\n        int testcases; int hash;\n        testcases = in.nextInt(); hash = testcases+1;\n        while(testcases>0){\n            int n;\n            n = in.nextInt();\n            int arr[] = new int[n];\n            String result=\"\";\n            for(int i=0;i<n;i++){\n                arr[i] = in.nextInt();\n            }\n            while(arr[0]!=0){\n                int m1=-1; int m2=-1; int t1=0; int t2=0;\n                for(int i=0;i<n;i++){\n                    if(arr[i]>m1){\n                        m1 = arr[i];\n                        t1 = i;\n                    }\n                }\n                for(int i=0;i<t1;i++){\n                    if(arr[i]==m1){\n                        m2 = m1;\n                        t2 = i;\n                    }\n                }\n                if(m1==3){\n                    int temp1 = arr[t1]-(m1\/2);\n                    arr[t1] = (m1\/2);\n                    while(temp1!=0){\n                        if(t1==0){\n                            result = result + \"A\";\n                        }\n                        else if(t1==1)\n                            result = result+ \"B\";\n                        else \n                            result = result+ \"C\";\n                        temp1--;\n                    }\n                    result = result+\" \";\n                }\n                else{\n                    if(m1!=-1 && m2!=-1){\n                    int temp1 = arr[t1]-(m1\/2);\n                    arr[t1] = (m1\/2);\n                    int temp2 = arr[t2]-(m2\/2);\n                    arr[t2] = (m2\/2);\n                        while(temp1!=0){\n                            if(t1==0){\n                                result = result + \"A\";\n                            }\n                            else if(t1==1)\n                                result = result+ \"B\";\n                            else \n                                result = result+ \"C\";\n                            temp1--;\n                        }\n                        while(temp2!=0){\n                            if(t2==0){\n                                result = result + \"A\";\n                            }\n                            else if(t2==1)\n                                result = result+ \"B\";\n                            else \n                                result = result+ \"C\";\n                            temp1--;\n                        }\n                        result = result+\" \";\n                    }\n                    else{\n                        int temp1 = arr[t1]-(m1\/2);\n                        arr[t1] = (m1\/2);\n                        while(temp1!=0){\n                            if(t1==0){\n                                result = result + \"A\";\n                            }\n                            else if(t1==1)\n                                result = result+ \"B\";\n                            else \n                                result = result+ \"C\";\n                            temp1--;\n                        }\n                        result = result+\" \";\n                    }\n                }\n            }\n            System.out.println(\"Case #\"+(hash-testcases)+\":  \"+ result);\n            testcases--;\n        }\n    }\n}"}
{"idx":"1396","func":"class SenateEvacuation {\n    public static void main(String[] args) {\n        final Scanner in = new Scanner(System.in);\n        final int T = in.nextInt();\n        for (int t = 1; t <= T; t++) {\n            final int N = in.nextInt();\n            final List<Integer> P = new ArrayList<>(N);\n            int senatorsCount = 0;\n            for(int i = 0; i < N; i++) {\n                P.add(in.nextInt());\n                senatorsCount += P.get(i);\n            }\n            System.out.printf(\"Case #%d: \", t);\n\n            while(senatorsCount > 0) {\n                final Integer maxInteger = Collections.max(P);\n                final int indexOfMax = P.indexOf(maxInteger);\n\n                if(maxInteger == 1) {\n                    P.set(indexOfMax, maxInteger - 1);\n                    senatorsCount--;\n                    System.out.printf(\"%s\", String.valueOf((char)('A' + indexOfMax)));\n                    if(P.stream().filter(integer -> integer == 1).count() < 2) {\n                        final Integer maxInteger2 = Collections.max(P);\n                        final int indexOfMax2 = P.indexOf(maxInteger);\n                        P.set(indexOfMax2, maxInteger2 - 1);\n                        System.out.printf(\"%s\", String.valueOf((char)('A' + indexOfMax2)));\n                        senatorsCount--;\n                    }\n                } else {\n                    P.set(indexOfMax, maxInteger - 1);\n                    senatorsCount--;\n                    System.out.printf(\"%s\", String.valueOf((char)('A' + indexOfMax)));\n\n                    final Integer maxInteger2 = Collections.max(P);\n                    if (maxInteger2.equals(maxInteger)) {\n                        final int indexOfMax2 = P.indexOf(maxInteger);\n                        P.set(indexOfMax2, maxInteger2 - 1);\n                        System.out.printf(\"%s\", String.valueOf((char)('A' + indexOfMax2)));\n                        senatorsCount--;\n                    }\n                }\n                System.out.print(\" \");\n            }\n            System.out.print(\"\\n\");\n        }\n    }\n\n}"}
{"idx":"1397","func":"class Ex1 {\n    private static String input = \"A-large.in\";\n    private static String output = \"out.txt\";\n    private PrintWriter out;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner file = new Scanner(new FileInputStream(input));\n        Ex1 r = new Ex1();\n        r.out = new PrintWriter(Ex1.output);\n        int testsNo = Integer.valueOf(file.nextLine());\n        \n        for (int i=1; i<=testsNo; i++) {\n            int N = Integer.valueOf(file.nextLine());\n            String[] arr = file.nextLine().split(\" \");\n            int[] sen = new int[arr.length];\n            for (int j=0; j<sen.length; j++)\n                sen[j] = Integer.valueOf(arr[j]);\n        \n            r.out.print(\"Case #\"+i+\": \");\n            int total = 0;\n            for (int i1=0; i1<N; i1++) total += sen[i1];\n            \n            while (total > 3 || total == 2) {\n                int max = 0;\n                for (int j=0; j<N; j++) if (sen[max] < sen[j]) max = j;\n                sen[max]--;\n                total--;\n                char first = (char)('A'+max);\n                r.out.print(first);\n            \n                if (total == 3) break;\n                if (total > 0) {\n                    max=0;\n                    for (int j=0; j<N; j++) if (sen[max]<sen[j]) max=j;\n                    char second=(char) ('A'+max);\n                    sen[max]--;\n                    total--;\n                    r.out.print(second);\n                }\n                r.out.print(\" \");\n            }\n            \n            \n            \n            if (total == 3) {\n                int max = 0;\n                for (int j=0; j<N; j++) if (sen[max] < sen[j]) max = j;\n                sen[max]--;\n                char first = (char)('A'+max);\n                r.out.print(first+\" \");\n            \n                max = 0;\n                for (int j=0; j<N; j++) if (sen[max] < sen[j]) max = j;\n                sen[max]--;\n                first = (char)('A'+max);\n                r.out.print(first);\n            \n                max = 0;\n                for (int j=0; j<N; j++) if (sen[max] < sen[j]) max = j;\n                sen[max]--;\n                char second= (char)('A'+max);\n                r.out.print(second);\n                r.out.print(\" \");\n            }\n            r.out.println();\n        }\n        r.out.close();\n        file.close();\n    }\n}"}
{"idx":"1398","func":"class Evacuation {\n    public static void main(String[] args) {\n        \/\/Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n     Scanner in = new Scanner(System.in);\n        int loops = in.nextInt();\n         \n        for (int loop = 1; loop <= loops; ++loop) {\n            int n = in.nextInt();\n            int[] parties = new int[n];\n            int sum = 0;\n            for(int i = 0; i < n; i++) {\n                parties[i] = in.nextInt();\n                sum += parties[i];\n            }\n           \n            int[] evac1 = new int[(sum\/2)+ 1];\n            int[] evac2 = new int[(sum\/2) + 1];\n            int evac = 0;\n            int original = sum;\n            \n            while (sum > 0) {\n                int max = (parties[0] > parties[1] ? 0 : 1);\n                int second = (parties[0] > parties[1] ? 1 : 0);\n                for (int i = 2; i < n; i++) {\n                    if (parties[i] > max) {\n                        second = max;\n                        max = i;\n                    }\n                    else if (parties[i] > second) {\n                        second = i;\n                    }\n                }\n                if (sum%2 == 1) {\n                    evac1[evac] = max;\n                    evac2[evac] = -1;\n                    parties[max] -= 1;\n                    sum -= 1;\n                }\n                else {\n                    evac1[evac] = max;\n                    evac2[evac] = second;\n                    parties[max] -= 1;\n                    parties[second] -= 1;\n                    sum -= 2;\n                }\n                evac++;\n            }\n            \n           StringBuilder builder = new StringBuilder();\n           builder.append(String.format(\"Case #%1$s:\", loop));\n           for (int i = 0; i < (original\/2) + (original%2 == 1? 1:0); i++) {\n               builder.append(' ');\n               builder.append((char)('A' + evac1[i]));\n               if (evac2[i] != -1)\n                   builder.append((char)('A' + evac2[i]));\n           }    \n           System.out.println(builder.toString());\n           \/\/String line = String.format(\"Case #%1$s: %2$s\", loop, flow);\n           \/\/System.out.println(line);\n        }\n        in.close();\n }\n}"}
{"idx":"1399","func":"class TFirst {\n\n    public static void main(String[] args) throws FileNotFoundException{\n        Scanner reader = new Scanner(System.in);\n\n        HashMap<Character,Integer>map=new HashMap<Character, Integer>();\n        String letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        \n        \n        int z = 0;\n        \n        \n        PrintStream out = new PrintStream(new FileOutputStream(\"output5.txt\"));\n        System.setOut(out);\n        \n        int num = reader.nextInt();\n        int curr;\n        for(curr = 0;curr<num;curr++){\n            map.clear();\n            int i1 = 0;\n            \n            System.out.print(\"Case #\" + (curr+1) + \":\");\n            int n = reader.nextInt();\n            int i;\n            char a;\n            char b;\n            int sum = 0;\n            for(i=0;i<n;i++){\n                int value = reader.nextInt();\n                map.put(letters.charAt(i), value);\n                sum+=value;\n            }\n            int found;\n            while(sum>2){\n                found = 0;\n                int total = 0;\n                int maxValueInMap=(Collections.max(map.values()));\n                for (Entry<Character, Integer> entry : map.entrySet()) {  \n                    if (entry.getValue()==maxValueInMap) {\n                        total++;\n                    }\n                }\n                for (Entry<Character, Integer> entry : map.entrySet()) {  \n                    if (entry.getValue()==maxValueInMap) {\n                        if(total!=2){\n                            System.out.print(\" \" + entry.getKey());     \n                            map.put(entry.getKey(),entry.getValue()-1);\n                            sum--;\n                            break;\n                        }\n                        else{\n                            found++;\n                            if(found == 1){\n                                a = entry.getKey();\n                                System.out.print(\" \" + a);\n                                map.put(entry.getKey(),entry.getValue()-1);\n                                sum--;\n                            }else if(found == 2){\n                                b = entry.getKey();                            \n                                map.put(entry.getKey(),entry.getValue()-1);\n\n                                System.out.print(b); \n                                sum--;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            System.out.print(\" \");                 \n            for (Entry<Character, Integer> entry : map.entrySet()) {\n               if(entry.getValue()!=0){\n                   System.out.print(entry.getKey());\n               }\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1400","func":"class A{\n    static final String inFile=\"A-small.in\";\n    static final String outFile=\"A.out\";\n    \n    static int t;\n    static String line,str;\n    static String[] row;\n    static int[] a,b;\n    static boolean debug = false;\n    static long sum,maj,rem;\n    \n    public static void main(String [ ] args) throws IOException{\n        A r = new A();\n        int i,k,l,n;\n        \n        BufferedReader br = new BufferedReader(new FileReader(A.inFile));\n        try {\n            File file = new File(A.outFile);\n            if (!file.exists()) {file.createNewFile();}\n            FileWriter fw = new FileWriter(file.getAbsoluteFile());\n            BufferedWriter bw = new BufferedWriter(fw);\n            \n            A.line = br.readLine();\n            A.t = Integer.valueOf(A.line); \/\/1 <= T <= 100\n            \n            for(l=0;l<A.t;l++){\n        \n                bw.write(\"Case #\"+(l+1)+\": \");\n                \n                A.line = br.readLine(); \/\/S\n                n = Integer.valueOf(A.line);\n                A.a = new int[n];\n                Arrays.fill(A.a, 0);\n                A.sum = 0;\n                A.line = br.readLine(); \/\/S\n                A.row = A.line.split(\"\\\\s\");\n                for(i=0;i<n;i++){\n                    A.a[i] = Integer.valueOf(A.row[i]);\n                    A.sum+=A.a[i];\n                }\n                A.rem = A.sum;\n                A.maj = A.sum\/2;\n                int max,pos1,pos2;\n                for(;A.rem>0;){\n                    max=-1;pos1=-1;pos2=-1;\n                    \n                        for(i=0;i<n;i++){\n                            if(A.a[i]>max){\n                                max = A.a[i];\n                                pos1=i;\n                            }\n                        }\n                        \/\/2nd\n                        for(i=0;i<n;i++){\n                            if(A.a[i] == max && i!=pos1){\n                                pos2=i;\n                            }\n                        }\n                    if(pos2>-1 && A.rem==3) pos2=-1;\n                    \n                    if(pos2>-1){\n                        bw.write(\"\"+(char)('A'+pos1)+\"\"+(char)('A'+pos2));\n                        A.a[pos1]--;\n                        A.a[pos2]--;\n                        A.rem-=2;\n                    } else {\n                        bw.write(\"\"+(char)('A'+pos1));\n                        A.a[pos1]--;\n                        A.rem-=1;\n                    }\n                    \n                    if(A.rem>0) bw.write(\" \");\n                    \n                    \/\/check\n                    max=-1;\n                    for(i=0;i<n;i++){\n                        max = (A.a[i]>max)?A.a[i]:max;\n                    }\n                    if (max > A.rem\/2) {\n                        System.out.println(\"Problem!\");\n                    }\n                }\n                \n                bw.write(\"\\n\");    \n            }\n            bw.close();\n        } finally {br.close();}\n    }\n}"}
{"idx":"1401","func":"static void main(String[] args)throws IOException\n    {\n        Scanner sc = new Scanner(System.in);\n        PrintStream ot = new PrintStream(new FileOutputStream(\"Out1C_A.txt\"));\n        System.setOut(ot);\n        int t = sc.nextInt(),t1=t;\n        while(t-->0)\n        {\n            int n = sc.nextInt(),lg=-1,p1=-1,p2=-1,c=0,p3=-1;\n            int a[] = new int[n];\n            for(int i=0; i<n; i++) \n            {\n                a[i] = sc.nextInt();\n                if(a[i]>lg) \n                {\n                    lg=a[p1=i];\n                    p2=p3=-1;\n                }\n                else if(p2==-1&&a[i]==lg) p2=i;\n                else if(p3==-1&&a[i]==lg) p3=i;\n                c+=a[i];\n            }\n            String s1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n            System.out.print(\"Case #\"+(t1-t)+\": \");\n            do{\n                if(c!=1)\n                {\n                    if(p3!=-1)\n                    {\n                        System.out.print(s1.charAt(p1)+\" \");\n                        a[p1]--;\n                        c--;\n                    }\n                    else if(p2!=-1&&a[p1]==a[p2])\n                    {\n                        System.out.print(s1.charAt(p1)+\"\"+s1.charAt(p2)+\" \");\n                        a[p1]--;\n                        a[p2]--;\n                        c-=2;\n                    }\n                    else\n                    {\n                        System.out.print(s1.charAt(p1)+\"\"+s1.charAt(p1)+\" \");\n                        a[p1]-=2;\n                        c-=2;\n                    }\n                }\n                else\n                {\n                    System.out.print(s1.charAt(p1)+\" \");\n                    a[p1]--;\n                    c--;\n                }\n                lg=p1=p2=p3=-1;\n                for(int i=0; i<n; i++)\n                {\n                    if(a[i]>lg) lg=a[p1=i];\n                    else if(p2==-1&&a[i]==lg) p2=i;\n                    else if(p3==-1&&a[i]==lg) p3=i;\n                }\n            }while(c!=0);\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1402","func":"class A {\n    public static void main(String[] args) {\n        int numOfCases;\n        File file = new File(System.getProperty(\"user.dir\")+\"\/\"+\"TestCase\");\n        try{\n            Scanner sc = new Scanner(file);\n            numOfCases = sc.nextInt();\n            \/\/Scanner sc = new Scanner(System.in);\n            \n            for (int num = 1; num<=numOfCases; num++){\n                int[] s = new int[1000];\n                int n;\n                int total;\n                \n                n = sc.nextInt();\n                total = n;\n                for (int i=0; i<n; i++){\n                    s[i] = sc.nextInt();\n                }\n                \n                int indx=0;\n                int indx2=0;\n                int temp1=-1;\n                int temp2=-1;\n                System.out.print(\"Case #\"+num+\": \");\n                while (true){\n                    int max=0;\n                    \n                    if (temp1 ==-1){\n                        indx = 0;\n                        indx2 = 0;\n                    }\n                    \n                    for (int i=0; i<n; i++){\n                        if (s[i] >= max){\n                            max = s[i];\n                            indx = i;\n                        }\n                    }\n                    s[indx]--;\n                    \n                    int t;\n                    boolean not=false;\n                    total = n;\n                    for (t=0; t<n; t++){\n                        if (s[t] != 0){not=true;}\n                        else\n                            total--;\n                    }\n                    \n                    if (!not){\n                        System.out.print((char)(indx+'A')+\" \");\n                        if (temp1 != -1){\n                            System.out.print((char)(temp1+'A'));\n                            System.out.print((char)(temp2+'A'));\n                        }\n                        break;\n                    }\n                    \n                    if (total ==2){\n                        int a=0, b=0;\n                        for (int i=0; i<n; i++){\n                            if (s[i] > 0 && a ==0){\n                                a = s[i];\n                            }\n                            else {\n                                b = s[i];\n                            }\n                        }\n                        if (a==b){\n                            System.out.print(\" \");\n                            continue;\n                        }\n                    }\n                    \n                    max = 0;\n                    for (int i=0; i<n; i++){\n                        if (s[i] >= max){\n                            max = s[i];\n                            indx2 = i;\n                        }\n                    }\n                    s[indx2]--;\n                    \n                    not = false;\n                    total = n;\n                    for (t=0; t<n; t++){\n                        if (s[t] != 0){not = true;}\n                        else\n                            total--;\n                    }\n                    \/\/System.out.println(total);\n                    \n                    if (total !=1){\n                        System.out.print((char)(indx+'A'));\n                        System.out.print((char)(indx2+'A')+\" \");\n                    }\n                    else{\n                        temp1=indx;\n                        temp2=indx2;\n                    }\n                    if (!not)\n                        break;\n                }\n                System.out.println(\"\");\n            \n            }\n            sc.close();\n            }\n        catch (Exception e) {\n           System.out.println(e);\n           }\n\n    }\n    \n}"}
{"idx":"1403","func":"class SenateEvacuation {\n\n    public static void main(String[] args) {\n        \/\/ Set up files\n        File file = new File(\"A-large.in\");\n        File outfile = new File(\"output.txt\");\n        if(!file.exists()) {\n            System.err.println(\"File doesn't exist!\");\n            return;\n        }\n        \/\/ Set up data\n        int T;\n        int N;\n        int[] parties;\n        int total;\n                \n        try {\n            \/\/ Set up streams\n            BufferedReader fin = new BufferedReader(new InputStreamReader(new FileInputStream(file)));\n            BufferedWriter fout = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outfile)));\n            \n            String line = fin.readLine();\n            T = Integer.parseInt(line.trim());\n            \n            for(int caseNum=0; caseNum<T; ++caseNum) {\n                line = fin.readLine();\n                N = Integer.parseInt(line);\n                parties = new int[N];\n                total = 0;\n                line = fin.readLine();\n                String[] partyMembers = line.split(\" \");\n                for(int i=0; i<N; ++i) {\n                    parties[i] = Integer.parseInt(partyMembers[i]);\n                    total += parties[i];\n                }\n                \n                String output = \"\";\n                \n                \/\/ Find the two biggest groups\n                int max1 = 0;\n                for(int i=0; i<N; ++i) {\n                    if(parties[i] > parties[max1])\n                        max1 = i;\n                }\n                int max2 = 0;\n                if(max1 == 0)\n                    max2 = 1;\n                for(int i=0; i<N; ++i) {\n                    if(i != max1 && parties[i] > parties[max2])\n                        max2 = i;\n                }\n                \n                \/\/ Pare down the biggest group to be the same size as the second biggest group\n                while(parties[max1] > parties[max2]) {\n                    String thisOut = \"\" + (char)(max1 + 65);\n                    --parties[max1];\n                    --total;\n                    if(parties[max1] > parties[max2]) {\n                        thisOut += (char)(max1 + 65);\n                        --parties[max1];\n                        --total;\n                    }\n                    output += thisOut + \" \";\n                }\n                \n                \/\/ Evacuate everyone else in any order\n                \/\/ First get a count of everyone else\n                int totalNotMax = total;\n                totalNotMax -= 2*parties[max1];\n                while(totalNotMax > 0) {\n                    String thisOut = \"\";\n                    for(int i=0; i<N; ++i) {\n                        if(i != max1 && i != max2 && parties[i] > 0) {\n                            thisOut += (char)(i + 65);\n                            --parties[i];\n                            --total;\n                            --totalNotMax;\n                            break;\n                        }\n                    }\n                    for(int i=0; i<N; ++i) {\n                        if(i != max1 && i != max2 && parties[i] > 0) {\n                            thisOut += (char)(i + 65);\n                            --parties[i];\n                            --total;\n                            --totalNotMax;\n                            break;\n                        }\n                    }\n                    output += thisOut + \" \";\n                }\n                \n                \/\/ Evacuate the two biggest parties by making one from each go until they're all gone\n                while(total > 0) {\n                    String thisOut = \"\";\n                    thisOut += (char)(max1 + 65);\n                    thisOut += (char)(max2 + 65);\n                    --parties[max1];\n                    --parties[max2];\n                    total -= 2;\n                    output += thisOut + \" \";\n                }\n                \n                System.out.println(\"Case #\" + (caseNum+1) + \": \" + output.trim());\n                fout.write(\"Case #\" + (caseNum+1) + \": \" + output.trim() + \"\\n\");\n            }\n            \n            \/\/ Clean up streams\n            fin.close();\n            fout.close();\n        }\n        catch(Exception e) {\n            e.printStackTrace();\n        }        \n    }\n}"}
{"idx":"1404","func":"class Jam {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        int x[],sum;\n        String gg ;\n        for(int i = 0;i<t;i++){\n            gg = \"Case #\"+(i+1)+\": \";\n            int n = sc.nextInt();\n            x = new int[n];\n            sum = 0;\n            for(int j = 0;j<n;j++){\n                int m = sc.nextInt();\n                x[j] = m;\n                sum+=m;\n            }\n            while(sum>0){\n            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;\n                for(int i1 = 0;i1<x.length;i1++){\n                    if(x[i1]>=max1){\n                        max2 = max1;\n                        dex2 = dex1;\n                        max1 = x[i1];\n                        dex1 = i1;\n                    }\n                }int a1[];\n                \n                a1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};\n            int a[] = a1;\n            if(sum==3){\n                  for(int k = 0;k<x.length;k++)\n                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){\n                        x[k]--;\n                        gg=gg+(char)(k+65)+\" \";\n                        sum--;\n                        break;\n                    }\n            }else if(a.length!=4){\n                if(x[a[1]]-2!=0){\n                x[a[1]]-=2;\n                sum-=2;\n                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+\" \"; \n                }else{\n                    x[a[1]]--;\n                sum--;\n                gg = gg + (char)('A'+a[1])+\" \"; \n                }\n           }else if(a.length==4){\n               x[a[2]]--;\n                x[a[3]]--;\n               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+\" \"; \n                sum-=2;\n               \n            }\n                }\n            System.out.println(gg);\n        }\n        \n                }\n    \n}"}
{"idx":"1405","func":"class A {\n\n    public static void main(String[] args) throws IOException {\n        Scanner s = new Scanner(new File(\"a.in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"a.out\"));\n        int T = s.nextInt();\n        for (int t = 1; t <= T; t++) {\n            out.write(\"Case #\"+t+\": \"); \n            int N = s.nextInt();\n            int[] parties = new int[N];\n            int sum=0;\n            for(int i=0; i<N; i++){\n                parties[i]=s.nextInt();\n                sum+=parties[i];\n            }\n            while(sum>0){\n                int differentParties=0;\n                int max=0;\n                int iMax=-1;\n                for(int i=0; i<N; i++){\n                    if(parties[i]>0)\n                        differentParties++;\n                    if(parties[i]>max){\n                        max=parties[i];\n                        iMax=i;\n                    }\n                }\n                if(differentParties==2){\n                    for(int i=0; i<N; i++){\n                        if(parties[i]>0){\n                            out.write(\"\"+(char)('A'+i));\n                            parties[i]--;\n                            sum--;\n                        }\n                    }\n                }else{\n                    out.write(\"\"+(char)('A'+iMax));\n                    parties[iMax]--;\n                    sum--;\n                }\n                out.write(\" \");\n            }\n            out.write(\"\\n\");\n        }\n        out.close();    \n    }\n}"}
{"idx":"1406","func":"class MainRoundC {\n    public static void main(String[] args) throws IOException {\n            File f = new File (\"A-small-attempt0.inahawaa\");\n            FileWriter fw = new FileWriter (f);\n            InputStream ips=new FileInputStream(\"A-small-attempt0.in\"); \n            InputStreamReader ipsr=new InputStreamReader(ips);\n            BufferedReader br=new BufferedReader(ipsr);\n            String ligne = br.readLine();\n            String out;\n            int hhh = 0;\n            while ((ligne=br.readLine())!=null){\n                ligne=br.readLine();\n                try{\n                    hhh++;\n                    String s = ligne;\n                    \n                    \n                    String[] elements = s.split(\" \");\n                    Vector<Integer> output = new Vector<Integer>() ; \n                    Vector<Character> outputL = new Vector<Character>() ; \n                    String letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n                    for (int i = 0 ;i<elements.length;i++){\n                        output.add(Integer.parseInt(elements[i]));\n                        outputL.add(letters.charAt(i));\n                        System.out.println(output.elementAt(i)+\"  \"+outputL.elementAt(i));    \n                    }\n                    \n                    boolean estnull = true;\n                    for(int z = 0; z< output.size();z++){\n                        System.out.print(output.elementAt(z));\n                        if(output.elementAt(z) != 0){\n                            estnull = false;\n                            break;\n                        }\n                        \n                    }\n                        \n                    String ch = \"\";\n                    while(!estnull){\n                        ch = ch + \" \";\n                    int maxIndex = 0;\n                    for (int i = 1; i < output.size(); i++){\n                       int newnumber = output.elementAt(i);\n                       if (newnumber > output.elementAt(maxIndex)){\n                       maxIndex = i;\n                      }\n                    }\n                    \/\/System.out.println(outputL.elementAt(maxIndex));\n                    \n                    int maxIndex2 = 0;\n                    int k = output.elementAt(maxIndex);\n                    int occ = Collections.frequency(output, k);\n                    if(occ != output.size()){\n                    while(output.elementAt(maxIndex2) == output.elementAt(maxIndex)){\n                        maxIndex2++;\n                    }\n                    \n                    \n                    for (int i = maxIndex2+1; i < output.size(); i++){\n                        \n                        if(output.elementAt(i) != k){\n                           int newnumber = output.elementAt(i);\n                           \/\/System.out.println(\"new nubr :\"+newnumber);\n                           if (newnumber > output.elementAt(maxIndex2)){\n                              \/\/ System.out.println(\"haw output[i] : \"+output.elementAt(i)+\"  haw output[maxindex2] :\"+output.elementAt(maxIndex2));\n                           maxIndex2 = i;\n                          }\n                        }\n                    } \n                    \/\/System.out.println(outputL.elementAt(maxIndex2));\n                    \n                    \n                    }\n                    \n                    \n                     if(occ==1 && occ != output.size()){\n                        int dif = output.elementAt(maxIndex)-output.elementAt(maxIndex2);\n                        if(dif == 1){\n                            ch = ch+outputL.elementAt(maxIndex);\n                            System.out.println(outputL.elementAt(maxIndex));\n                            output.set(maxIndex, output.elementAt(maxIndex)-1);\n                        }else if(dif >= 2){\n                            \/\/System.out.println(\"slt\");\n                            ch = ch+outputL.elementAt(maxIndex)+outputL.elementAt(maxIndex);\n                            System.out.print(outputL.elementAt(maxIndex));\n                            System.out.println(outputL.elementAt(maxIndex));\n                            output.set(maxIndex, output.elementAt(maxIndex)-2);\n                        }\n                    }else if(occ >= 2 && occ != output.size()){\n                        ch = ch+outputL.elementAt(maxIndex);\n                        System.out.print(outputL.elementAt(maxIndex));\n                        output.set(maxIndex, output.elementAt(maxIndex)-1);\n                        int y = maxIndex;\n                        while(y< output.size()){\n                            y++;\n                            if(output.elementAt(y) == k){\n                                ch = ch+outputL.elementAt(y);\n                                System.out.println(outputL.elementAt(y));\n                                output.set(y, output.elementAt(y)-1);\n                                break;\n                            }\n                        }\n                        \n                    }else if(occ > 2 && occ == output.size()){\n                        ch = ch+outputL.elementAt(maxIndex);\n                        System.out.println(outputL.elementAt(maxIndex));\n                        output.set(maxIndex, output.elementAt(maxIndex)-1);\n                    }\n                    else if(occ == 2 && occ == output.size()){\n                        ch = ch+outputL.elementAt(maxIndex);\n                        System.out.print(outputL.elementAt(maxIndex));\n                        output.set(maxIndex, output.elementAt(maxIndex)-1);\n                        int y = maxIndex;\n                        while(y< output.size()){\n                            y++;\n                            if(output.elementAt(y) == k){\n                                ch = ch+outputL.elementAt(y);\n                                System.out.println(outputL.elementAt(y));\n                                output.set(y, output.elementAt(y)-1);\n                                break;\n                            }\n                        }\n                    }\n                    else if( occ != output.size()){\n                        ch = ch+outputL.elementAt(maxIndex);\n                        System.out.println(outputL.elementAt(maxIndex));\n                        output.set(maxIndex, output.elementAt(maxIndex)-1);\n                    }\n                    System.out.println(\"ahawaaaaa  \"+ch);\n                    estnull = true;\n                    for(int z = 0; z< output.size();z++){\n                        System.out.print(output.elementAt(z));\n                        if(output.elementAt(z) != 0){\n                            estnull = false;\n                            \/\/break;\n                        }\n                        \n                    }\n                    System.out.println();\n                    \n                    }\n                    \n                 fw.write (\"Case #\" + hhh + \": \" + ch +\"\\r\\n\");\n                }catch(Exception e){\n                    \n                }\n            }\n            br.close(); \n            fw.close();\n\n    }\n\n}"}
{"idx":"1407","func":"class Senate {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in))); \/\/ MY_PROGRAM < large_input.txt > large_output.txt\n        int testCases = in.nextInt();\n\n        for (int i = 1; i <= testCases; i++) {\n            int n = in.nextInt();\n            String[] senators = new String[n];\n            int currentParty = 65;\n            int totalSen = 0; \n            String evacuation = \"\";\n\n            for (int j = 0; j < n; j++) {\n                int sen = in.nextInt();\n                String toReturn = \"\";\n                for (int i1 = 0; i1 < sen; i1++) {\n                    toReturn += (char) currentParty;\n                }\n                senators[j] = toReturn;\n                currentParty++;\n                totalSen += sen;\n            }\n            Arrays.sort(senators, new Comparator<String>(){\n                        @Override\n                        public int compare(String s1, String s2) {\n                            return s2.length() - s1.length();\n                        }\n            });\n\n            senators = senators;\n\n            if (totalSen % 2 != 0) {\n                evacuation += senators[0].charAt(0) + \" \";\n                StringBuilder sb = new StringBuilder(senators[0]);\n                sb.deleteCharAt(0);\n                senators[0] = sb.toString();\n                Arrays.sort(senators, new Comparator<String>(){\n                            @Override\n                            public int compare(String s1, String s2) {\n                                return s2.length() - s1.length();\n                            }\n                });\n                senators = senators;\n            }\n\n            while (!senators[0].equals(\"\")) {\n                evacuation += senators[0].charAt(0);\n                if (senators[1].length() != 0) {\n                    evacuation += senators[1].charAt(0);\n                    StringBuilder sb = new StringBuilder(senators[1]);\n                    sb.deleteCharAt(0);\n                    senators[1] = sb.toString();\n                }\n                StringBuilder sb = new StringBuilder(senators[0]);\n                sb.deleteCharAt(0);\n\n                senators[0] = sb.toString();\n                evacuation += \" \";\n                Arrays.sort(senators, new Comparator<String>(){\n                            @Override\n                            public int compare(String s1, String s2) {\n                                return s2.length() - s1.length();\n                            }\n                });\n                senators = senators;\n            }\n\n            System.out.println(\"Case #\" + i + \": \" + evacuation.trim());\n        }\n    }\n\n}"}
{"idx":"1408","func":"static void main (String[] args) throws java.lang.Exception\n    {\n        BufferedReader br=new BufferedReader(new FileReader(\"A-large.in\"));\n        PrintWriter pw=new PrintWriter(\"output1.txt\");\n        \/\/StringTokenizer st=new StringTokenizer(br.readLine());\n        int t=Integer.parseInt(br.readLine());\n        for(int q=1;q<=t;q++)\n        {\n            int n=Integer.parseInt(br.readLine());\n            int p[]=new int[n];\n            StringTokenizer st=new StringTokenizer(br.readLine());\n            for(int i=0;i<n;i++)\n            {\n                p[i]=Integer.parseInt(st.nextToken());\n            }\n            pw.print(\"Case #\"+q+\":\");\n            while(true)\n            {\n                int f=0;\n                int first=-1,second=-1;\n                int less=-1;\n                int max=0;\n                int more=-1;\n                for(int i=0;i<n;i++)\n                {\n                    if(p[i]>max)\n                    {\n                        max=p[i];\n                        first=i;\n                    }\n                }\n                for(int i=0;i<n;i++)\n                {\n                    if(p[i]==max&&first!=i)\n                    {\n                        second=i;\n                        more++;\n                    }\n                }\n                if(first!=-1&&second!=-1&&more==0)\n                {\n                    p[first]--;\n                    p[second]--;\n                    char ch=(char)(first+65);\n                    char ch1=(char)(second+65);\n                    pw.print(\" \"+ch+ch1);\n                }\n                else if(first!=-1)\n                {\n                    p[first]--;\n                    char ch=(char)(first+65);\n                    pw.print(\" \"+ch);\n                }\n                else\n                {\n                    break;\n                }\n            }\n            pw.println();\n        }\n        pw.close();\n    }\n}"}
{"idx":"1409","func":"class ProblemA {\n    public static void main(String[] args) throws FileNotFoundException {\n\/\/        Scanner sc = new Scanner(new File(\"A-small-attempt0.in\"));\n\/\/        Scanner sc = new Scanner(new File(\"A.in\"));\n        Scanner sc = new Scanner(new File(\"A-large.in\"));\n\n        int t = sc.nextInt();\n        int count = 1;\n\n        while (t-- > 0) {\n            int numParties = sc.nextInt();\n            int[] partieMembers = new int[numParties];\n            int numSenators = 0;\n            \n            for(int i = 0; i < numParties; i++) {\n                partieMembers[i] = sc.nextInt();\n                numSenators += partieMembers[i];\n            }\n            \n\n            System.out.print(\"Case #\" + count + \": \");\n            \n            \/\/ Keep parties even sized\n            if(numParties == 2) {\n                if(partieMembers[0] == partieMembers[1] + 2) {\n                    System.out.print(\"AA \");\n                    numSenators -= 2;\n                } else if(partieMembers[0] + 2 == partieMembers[1]) {\n                    System.out.print(\"BB \");\n                    numSenators -= 2;\n                } else if(partieMembers[0] == partieMembers[1] + 1) {\n                    System.out.print(\"A \");\n                    numSenators--;\n                } else if(partieMembers[0] + 1 == partieMembers[1]) {\n                    System.out.print(\"B \");\n                    numSenators--;\n                } else if(partieMembers[0] == partieMembers[1]) {\n                }\n                \n                for(int i = 0; i < numSenators\/2; i++) {\n                    System.out.print(\"AB \");\n                }\n            } else {\n                for(int i = 0; i < numSenators - 2; i++) {\n                    int biggestPartie1 = 0;\n                    int members = 0;\n                    \n                    for(int i1 = 0; i1 < partieMembers.length; i1++) {\n                        if(members < partieMembers[i1]) {\n                            members = partieMembers[i1];\n                            biggestPartie1 = i1;\n                        }\n                    }\n                    int biggestPartie = biggestPartie1;\n                    partieMembers[biggestPartie]--;\n                    char evac = (char) (65 + biggestPartie);\n                \n                    System.out.print(evac + \" \");    \n                }\n\n                String evac = \"\";\n                for(int i = 0; i < numParties; i++) {\n                    if(partieMembers[i] > 0) {\n                        evac += (char) (65 + i);\n                    }\n                }\n                \n                System.out.print(evac);\n            }\n            \n            System.out.println(\"\");\n            count++;\n        }\n\n        sc.close();\n    }\n}"}
{"idx":"1410","func":"class CA {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n\n        for (int t = 1; t <= T; t++) {\n            int N = in.nextInt();\n            ArrayList<Integer> senate = new ArrayList<>();\n            for (int i = 0; i < N; i++) {\n                senate.add(i, 0);\n            }\n            int senateSize = 0;\n            for (int i = 0; i < N; i++) {\n                int temp = in.nextInt();\n                senate.set(i, temp);\n                senateSize += temp;\n            }\n\n            System.out.printf(\"Case #%d: \", t);\n            while (senateSize > 2) {\n                int max = 0;\n                int maxIndex = -1;\n                int second = 0;\n                int secondIndex = -1;\n                ArrayList<Integer> ordered = new ArrayList<>(senate);\n                Collections.sort(ordered, Collections.reverseOrder());\n                max = ordered.get(0);\n                maxIndex = senate.indexOf(max);\n                second = ordered.get(1);\n                secondIndex = senate.lastIndexOf(second);\n                if (max == second && senateSize != 3) {\n                    System.out.print(Character.toChars(65 + maxIndex)[0]);\n                    System.out.print(Character.toChars(65 + secondIndex)[0]);\n                    System.out.print(\" \");\n                    senate.set(maxIndex, senate.get(maxIndex) - 1);\n                    senate.set(secondIndex, senate.get(secondIndex) - 1);\n                    senateSize -= 2;\n                } else {\n                    System.out.print(Character.toChars(65 + maxIndex)[0]);\n                    System.out.print(\" \");\n                    senate.set(maxIndex, senate.get(maxIndex) - 1);\n                    senateSize -= 1;\n                }\n            }\n            if (senateSize == 2){\n                int max = 0;\n                int maxIndex = -1;\n                int second = 0;\n                int secondIndex = -1;\n                ArrayList<Integer> ordered = new ArrayList<>(senate);\n                Collections.sort(ordered, Collections.reverseOrder());\n                max = ordered.get(0);\n                maxIndex = senate.indexOf(max);\n                second = ordered.get(1);\n                secondIndex = senate.lastIndexOf(second);\n                System.out.print(Character.toChars(65 + maxIndex)[0]);\n                System.out.print(Character.toChars(65 + secondIndex)[0]);\n                System.out.print(\" \");\n                senate.set(maxIndex, senate.get(maxIndex) - 1);\n                senate.set(secondIndex, senate.get(secondIndex) - 1);\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1411","func":"class CodeJam {\n    static Scanner scan;\n    static PrintWriter out;\n    public static void main(String[] arg) {\n        try {\n            File file = new File(\"E:\\\\A-large (2).in\");\n            scan = new Scanner(file);\n            out = new PrintWriter(\"E:\\\\data.out\");\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        int c = scan.nextInt();\n        for(int i = 0; i < c; i++) {\n\/\/            out.println(\"Case #\" + (i+1) + \": \" + testcase());\n            out.print(\"Case #\" + (i+1) + \": \");\n            int n = scan.nextInt();\n            int[] A = new int[n];\n            for(int i4=0;i4<n;i4++)\n                A[i4] = scan.nextInt();\n            if(n == 2) {\n                if(A[0] > A[1]) {\n                    for(int i5=0;i5<A[0]-A[1];i5++)\n                        out.print(\"A \");\n                } else if(A[0] < A[1]) {\n                    for(int i3=0;i3<A[1]-A[0];i3++)\n                        out.print(\"B \");\n                }\n                int min = A[0] > A[1] ? A[1] : A[0];\n                for(int i2=0;i2<min;i2++)\n                    out.print(\"AB \");\n            } else {\n            while(true) {\n                int max = 0;\n                for (int i1=1;i1<n;i1++) {\n                    if(A[max] < A[i1])\n                        max = i1;\n                }\n                if(max == n-2 && A[n-2] == 1 && A[n-1] == 1) {\n                    out.print((char)(n-2+'A') + \"\" + (char)(n-1+'A'));\n                    break;\n                }\n                out.print((char)(max+'A') + \" \");\n                A[max]--;\n            }\n            }\n            out.println();\n        }\n        scan.close();\n        out.close();\n    }\n}"}
{"idx":"1412","func":"class Q1 {\n    public static void main(String[] args) throws Exception {\n        \/\/BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        \/\/String line = br.readLine();\n        \/\/int numberOfCases = Integer.parseInt(line);\n        int numberOfCases = in.nextInt();\n        for (int i = 1; i <= numberOfCases; i++){\n            int party = in.nextInt();\n            \/\/build array\n            int[] parties = new int[party];\n            for (int j = 0; j < party; j++){\n                parties[j] = in.nextInt();\n            }\n            escape(i, parties);\n            \n        }\n    }\n    \n    \n    \n    \n    public static void escape (int num, int[] parties){\n        ArrayList<String> evaculateList = new ArrayList<String>();\n        \/\/get the TotalNumber\n        int total = 0;\n        for (int i = 0; i < parties.length;i++){\n            total += parties[i];\n        }\n        \n        while (total > 0){\n            \n            \n            \/\/only escape one\n            if (total == 3 || total == 1) {\n                int biggest = 0;\n                int biggestLocation = 0;\n                for (int i = 0; i < parties.length; i++){\n                    if (parties[i] > biggest){\n                        biggest = parties[i];\n                        biggestLocation = i;\n                    }\n                }\n                parties[biggestLocation] -= 1;\n                HashMap<Integer, String> hm = new HashMap<Integer, String>();\n                  \/\/ Put elements to the map\n                  hm.put(0, \"A\");\n                  hm.put(1, \"B\");\n                  hm.put(2, \"C\");\n                  hm.put(3, \"D\");\n                  hm.put(4, \"E\");\n                  hm.put(5, \"F\");\n                  hm.put(6, \"G\");\n                  hm.put(7, \"H\");\n                  hm.put(8, \"I\");\n                  hm.put(9, \"J\");\n                  hm.put(10, \"K\");\n                  hm.put(11, \"L\");\n                  hm.put(12, \"M\");\n                  hm.put(13, \"N\");\n                  hm.put(14, \"O\");\n                  hm.put(15, \"P\");\n                  hm.put(16, \"Q\");\n                  hm.put(17, \"R\");\n                  hm.put(18, \"S\");\n                  hm.put(19, \"T\");\n                  hm.put(20, \"U\");\n                  hm.put(21, \"V\");\n                  hm.put(22, \"W\");\n                  hm.put(23, \"X\");\n                  hm.put(24, \"Y\");\n                  hm.put(25, \"Z\");\n                  String var = hm.get(biggestLocation);\n                String escaper = var;\n                String thisEscape = escaper;\n                evaculateList.add(thisEscape);\n                total -= 1;\n            } else {\/\/get the biggest two\n                int biggest = 0;\n                int biggestLocation = 0;\n                for (int i = 0; i < parties.length; i++){\n                    if (parties[i] > biggest){\n                        biggest = parties[i];\n                        biggestLocation = i;\n                    }\n                }\n                \/\/get the \n                int secondBiggest = 0;\n                int secondBiggestLocation = 0;\n                for (int i = 0; i < parties.length; i++){\n                    if (i == biggestLocation) continue;\n                    if (parties[i] > secondBiggest){\n                        secondBiggest = parties[i];\n                        secondBiggestLocation = i;\n                    }\n                }\n                \n                \/\/Then evacuate the biggest two parties.\n                parties[biggestLocation] -= 1;\n                parties[secondBiggestLocation] -= 1;\n                total -= 2;\n                HashMap<Integer, String> hm = new HashMap<Integer, String>();\n                  \/\/ Put elements to the map\n                  hm.put(0, \"A\");\n                  hm.put(1, \"B\");\n                  hm.put(2, \"C\");\n                  hm.put(3, \"D\");\n                  hm.put(4, \"E\");\n                  hm.put(5, \"F\");\n                  hm.put(6, \"G\");\n                  hm.put(7, \"H\");\n                  hm.put(8, \"I\");\n                  hm.put(9, \"J\");\n                  hm.put(10, \"K\");\n                  hm.put(11, \"L\");\n                  hm.put(12, \"M\");\n                  hm.put(13, \"N\");\n                  hm.put(14, \"O\");\n                  hm.put(15, \"P\");\n                  hm.put(16, \"Q\");\n                  hm.put(17, \"R\");\n                  hm.put(18, \"S\");\n                  hm.put(19, \"T\");\n                  hm.put(20, \"U\");\n                  hm.put(21, \"V\");\n                  hm.put(22, \"W\");\n                  hm.put(23, \"X\");\n                  hm.put(24, \"Y\");\n                  hm.put(25, \"Z\");\n                  String var = hm.get(biggestLocation);\n                String escaper = var;\n                HashMap<Integer, String> hm = new HashMap<Integer, String>();\n                  \/\/ Put elements to the map\n                  hm.put(0, \"A\");\n                  hm.put(1, \"B\");\n                  hm.put(2, \"C\");\n                  hm.put(3, \"D\");\n                  hm.put(4, \"E\");\n                  hm.put(5, \"F\");\n                  hm.put(6, \"G\");\n                  hm.put(7, \"H\");\n                  hm.put(8, \"I\");\n                  hm.put(9, \"J\");\n                  hm.put(10, \"K\");\n                  hm.put(11, \"L\");\n                  hm.put(12, \"M\");\n                  hm.put(13, \"N\");\n                  hm.put(14, \"O\");\n                  hm.put(15, \"P\");\n                  hm.put(16, \"Q\");\n                  hm.put(17, \"R\");\n                  hm.put(18, \"S\");\n                  hm.put(19, \"T\");\n                  hm.put(20, \"U\");\n                  hm.put(21, \"V\");\n                  hm.put(22, \"W\");\n                  hm.put(23, \"X\");\n                  hm.put(24, \"Y\");\n                  hm.put(25, \"Z\");\n                  String var = hm.get(secondBiggestLocation);\n                String escaper2 = var;\n                String thisEscape = escaper + escaper2;\n                evaculateList.add(thisEscape);\n                }\n        }\n        \n        System.out.print(\"Case #\" + num + \": \");\n        for (int i = 0; i < evaculateList.size(); i++){\n            System.out.print(evaculateList.get(i) + \" \");\n        }\n        System.out.println();\n        }\n        \n        \n        \n        \n        \n        \n    \n    \n}"}
{"idx":"1413","func":"class SenateEvacuation {\n    static Scanner sc=new Scanner(System.in);\n    \n    public static void main(String[] args){\n        int cases=Integer.parseInt(sc.nextLine());\n        for(int caseNo=0;caseNo<cases;caseNo++) {\n            int N=Integer.parseInt(sc.nextLine());\n            int[] members=new int[N];\n            int totalMembers=0;\n            for(int x=0;x<N;x++){\n                members[x]=sc.nextInt();\n                totalMembers+=members[x];\n            }\n            sc.nextLine();\n            \n            String ans=\"\";\n            \n            while(totalMembers>0){\n                int maxParty=0;\n                int maxMembers=Integer.MIN_VALUE;\n                for(int x=0;x<N;x++){\n                    if(members[x]>maxMembers){\n                        maxMembers=members[x];\n                        maxParty=x;\n                    }\n                }\n                ans=ans+(char)(\"A\".charAt(0) + maxParty);\n                members[maxParty]-=1;\n                totalMembers--;\n                \/\/\/\n                \/*\n                for(int x=0;x<N;x++) System.out.print(members[x]+\" \");\n                System.out.println(\"\");*\/\n                maxMembers=Integer.MIN_VALUE;\n                for(int x=0;x<N;x++){\n                    if(members[x]>maxMembers){\n                        maxMembers=members[x];\n                        maxParty=x;\n                    }\n                }\n                if(members[maxParty]-1<= 0.5*(totalMembers-1) && members[maxParty]>0 && totalMembers!=2){\n                    ans=ans+(char)(\"A\".charAt(0) + maxParty);\n                    members[maxParty]-=1;\n                    totalMembers--;\n                    \n                    \/\/\/\/\/\/\n                    \/*for(int x=0;x<N;x++) System.out.print(members[x]+\" \");\n                    System.out.println(\"\");*\/\n                }\n                \n                ans=ans+\" \";\n            }\n            \n            System.out.println(\"Case #\"+(caseNo+1)+\": \"+ans);\n        }\n    }\n}"}
{"idx":"1414","func":"static void main(String args[]){\n        Scanner s=new Scanner(System.in);\n        int T=s.nextInt();\n        for(int i=1; i<=T; i++){\n            int n=s.nextInt();\n            int enteros[]=new int[n];\n            for(int j=0; j<n; j++){\n                enteros[j]=s.nextInt();\n            }\n            System.out.print(\"Case #\"+i+\":\");\n            while(true){\n                int nocero=0;\n                int max=0;\n                int pos=-1;\n                for(int j=0; j<n; j++){\n                    if( enteros[j]>0 )\n                        nocero++;\n                    if( enteros[j]>max ){\n                        pos=j;\n                        max=enteros[j];\n                    }\n                }\n                if(max==0){\n                    break;\n                }\n                int segundo=0;\n                int pos2=-1;\n                for(int j=0; j<n; j++){\n                    if( enteros[j]>segundo & j!=pos ){\n                        pos2=j;\n                        segundo=enteros[j];\n                    }\n                }\n                if( max==segundo && nocero!=3 ){\n                    enteros[pos]--;\n                    enteros[pos2]--;\n                    System.out.print(\" \"+  ((char)((int)('A')+pos)) + ((char)((int)('A')+pos2)) );\n                }\n                else{\n                    enteros[pos]--;\n                    System.out.print(\" \"+  ((char)((int)('A')+pos))  );\n                }\n            }\n            System.out.println();\n        }\n    }\n}"}
{"idx":"1415","func":"class Main {\n    public static void main(String[] args) throws IOException {\n        \/\/FileInputStream fi = new FileInputStream(\"small.in\");\n        \/\/FileOutputStream fo = new FileOutputStream(\"small.out\");\n\n        FileInputStream fi = new FileInputStream(\"large.in\");\n        FileOutputStream fo = new FileOutputStream(\"large.out\");\n\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fo));\n\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(fi)));\n        int cases = in.nextInt();\n        for (int i = 1; i <= cases; ++i) {\n            System.out.print(\"Case #\" + i + \":\");\n            bw.write(\"Case #\" + i + \":\");\n\n            int N = in.nextInt();\n            int[]P = new int[N];\n\n            int M = 0;\n            for (int j = 0; j < N; ++j) {\n                P[j] = in.nextInt();\n                M += P[j];\n            }\n\n            while(true) {\n                int max = -1;\n                int imax = -1;\n                for (int j = 0; j < N; ++j) {\n                    if(P[j] != 0 && P[j] > max) {\n                        max = P[j];\n                        imax = j;\n                    }\n                }\n                if(max == -1)\n                    break;\n                --P[imax];\n                --M;\n                char x = (char)('A' + imax);\n\n                for (int j = 0; j < N; ++j)\n                    if(P[j] > M\/2) {\n\/\/                        System.out.print(\"XXXX\");\n                    }\n\n                System.out.print(\" \" + x);\n                bw.write(\" \" + x);\n\n                if(M != 2) {\n                    max = -1;\n                    imax = -1;\n                    for (int j = 0; j < N; ++j) {\n                        if(P[j] != 0 && P[j] > max) {\n                            max = P[j];\n                            imax = j;\n                        }\n                    }\n                    if(max == -1)\n                        break;\n                    --P[imax];\n                    --M;\n                    char x2 = (char)('A' + imax);\n    \n                    System.out.print(x2);\n                    bw.write(\"\" + x2);\n    \n                    for (int j = 0; j < N; ++j)\n                        if(P[j] > M\/2)\n                            System.out.print(\"YYYY\");\n                }\n            }\n\n            System.out.println(\"\");\n            bw.write(\"\\n\");\n        }\n        bw.close();\n    }\n}"}
{"idx":"1416","func":"class A {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        try (Scanner scanner = new Scanner(new File(\"round1C_A.in\"));\n             PrintWriter writer = new PrintWriter(new File(\"round1C_A.out\"))) {\n\n            int caseCount = scanner.nextInt();\n            for (int caseNo = 1; caseNo <= caseCount; ++caseNo) {\n                int n = scanner.nextInt();\n                int[] x = new int[n];\n                int sum = 0;\n                for (int i = 0; i < n; ++i) {\n                    x[i] = scanner.nextInt();\n                    sum += x[i];\n                }\n\n                writer.print(String.format(\"Case #%d: \", caseNo));\n                if (sum % 2 == 1) {\n                    int max = 0, index = 0;\n                    for (int i = 0; i < n; ++i) {\n                        if (x[i] > max) {\n                            max = x[i];\n                            index = i;\n                        }\n                    }\n                    writer.print((char)('A' + index));\n                    writer.print(\" \");\n                    x[index]--;\n                }\n                while (true) {\n                    int max = 0, index = 0;\n                    for (int i = 0; i < n; ++i) {\n                        if (x[i] > max) {\n                            max = x[i];\n                            index = i;\n                        }\n                    }\n                    if (max == 0)\n                        break;\n                    writer.print((char)('A' + index));\n                    x[index]--;\n                    max = 0;\n                    index = 0;\n                    for (int i = 0; i < n; ++i) {\n                        if (x[i] > max) {\n                            max = x[i];\n                            index = i;\n                        }\n                    }\n                    if (max == 0)\n                        break;\n                    writer.print((char)('A' + index));\n                    x[index]--;\n                    writer.print(\" \");\n                }\n                writer.println();\n\n            }\n\n        }\n    }\n\n}"}
{"idx":"1417","func":"class GCJR1 {\n\n    public static void main(String[] args) throws Exception {\n        Scanner cin = new Scanner(new FileInputStream(\"A-large (3).in\"));\n        PrintWriter cout = new PrintWriter(new FileOutputStream(\"output.txt\"));\n        int T = cin.nextInt();\n        for (int t = 0; t < T; ++t) {\n            int N = cin.nextInt();\n            int[] a = new int[N];\n            int sum = 0;\n            for (int i = 0; i < N; ++i)\n                sum += a[i] = cin.nextInt();\n            int ind1 = -1, ind2 = -1;\n            cout.print(\"Case #\" + (t + 1) + \": \");\n            while (sum > 0) {\n                if (ind1 == -1) {\n                    int m1 = 0;\n                    for (int i1 = 1; i1 < a.length; ++i1)\n                        if (a[m1] < a[i1])\n                            m1 = i1;\n                    int m = m1;\n                    for (int i = 0; i < N; ++i)\n                        if (i != m && a[i] == a[m]) {\n                            ind1 = i;\n                            ind2 = m;\n                            break;\n                        }\n                }\n                if (ind1 != -1) {\n                    int fnd = -1;\n                    for (int i = 0; i < N; ++i)\n                        if (i != ind1 && i != ind2 && a[i] > 0) {\n                            fnd = i;\n                            break;\n                        }\n                    if (fnd != -1) {\n                        cout.print((char) ('A' + fnd) + \" \");\n                        a[fnd]--;\n                        sum--;\n                    } else {\n                        cout.print((char) ('A' + ind1) + \"\" + (char) ('A' + ind2) + \" \");\n                        sum -= 2;\n                        a[ind1]--;\n                        a[ind2]--;\n                    }\n                } else {\n                    int m1 = 0;\n                    for (int i = 1; i < a.length; ++i)\n                        if (a[m1] < a[i])\n                            m1 = i;\n                    int m = m1;\n                    cout.print((char) ('A' + m) + \" \");\n                    sum--;\n                    a[m]--;\n                }\n            }\n            cout.println();\n        }\n        cout.flush();\n    }\n\n}"}
{"idx":"1418","func":"class Round1B01 {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(\n                System.in)));\n        int numOfTestCases = in.nextInt(); \/\/ Scanner has functions to read ints, longs,\n                                \/\/ strings, chars, etc.\n        int testCaseNum = 1;\n        while(numOfTestCases!= 0){\n            int numOfParties = in.nextInt();\n            in.nextLine();\n            String partyMembersNum = in.nextLine();\n            \n            String[] tokens = partyMembersNum.split(\" \");\n            int[] eachPartyMemberCount = new int[numOfParties];\n            String[] ResultOps = new String[100000];\n            int ResultOpsIndex = 0;\n            \n            \n            int i = 0;\n            for (String token : tokens){\n                eachPartyMemberCount[i++] = Integer.parseInt(token); \n            }\n            \n            int finish = 0;\n            char beginChar = 'A';\n            String tempStr = \"\";\n            \/\/System.out.print(\"Case #\"+testCaseNum+\": \");\n            while(finish != 1){\n                int maxLoc = 0;\n                int maxVal = eachPartyMemberCount[maxLoc];\n                for(int k = 1;k<eachPartyMemberCount.length;k++){\n                    if(eachPartyMemberCount[k] > maxVal){\n                        maxVal = eachPartyMemberCount[k];\n                        maxLoc = k;\n                    }\n                }\n                eachPartyMemberCount[maxLoc]--;\n                \n                \/\/System.out.print(Character.toString((char)(beginChar+maxLoc)));\n                \n                int zeroCount = 0;\n                \n                for(int k = 0;k<eachPartyMemberCount.length;k++){\n                    if(eachPartyMemberCount[k] == 0){\n                        zeroCount++;\n                    }\n                }\n                if(zeroCount == numOfParties) {\n                    tempStr = Character.toString((char)(beginChar+maxLoc));\n                    ResultOps[ResultOpsIndex] = tempStr;\n                    ResultOpsIndex++;\n                    break;\n                }\n                \n                int maxLoc1 = 0;\n                int maxVal1 = eachPartyMemberCount[maxLoc1];\n                for(int k = 1;k<eachPartyMemberCount.length;k++){\n                    if(eachPartyMemberCount[k] > maxVal1){\n                        maxVal1 = eachPartyMemberCount[k];\n                        maxLoc1 = k;\n                    }\n                }\n                eachPartyMemberCount[maxLoc1]--;\n                \/\/System.out.print(Character.toString((char)(beginChar+maxLoc1)));\n                \n                int zeroCount1 = 0;\n                \n                for(int k = 0;k<eachPartyMemberCount.length;k++){\n                    if(eachPartyMemberCount[k] == 0){\n                        zeroCount1++;\n                    }\n                }\n                if(zeroCount1 == numOfParties) {\n                    tempStr = Character.toString((char)(beginChar+maxLoc)) + Character.toString((char)(beginChar+maxLoc1));\n                    ResultOps[ResultOpsIndex] = tempStr;\n                    ResultOpsIndex++;\n                    break;\n                }\n                else{\n                    tempStr = Character.toString((char)(beginChar+maxLoc)) + Character.toString((char)(beginChar+maxLoc1));\n                    ResultOps[ResultOpsIndex] = tempStr;\n                    ResultOpsIndex++;\n                }\n                \n                \n            }\n            \/\/ print results\n            \n            System.out.print(\"Case #\"+testCaseNum+\": \");\n            if(ResultOps[ResultOpsIndex-1].length() == 1){\n                System.out.print(ResultOps[ResultOpsIndex-1]);\n                System.out.print(\" \");\n                for(int p = 0;p<ResultOpsIndex-1;p++){\n                    System.out.print(ResultOps[p]);\n                    System.out.print(\" \");\n                }\n            }\n            else{\n                \/\/System.out.print(ResultOps[ResultOpsIndex-1]);\n                \/\/System.out.print(\" \");\n                for(int p = 0;p<ResultOpsIndex;p++){\n                    System.out.print(ResultOps[p]);\n                    System.out.print(\" \");\n                }\n            }\n            \n            System.out.println();\n            numOfTestCases--;\n            testCaseNum++;\n        }\n\n        in.close();\n\n        \/\/ S = S.replaceFirst(\"O\", \"\");\n        \/\/ S = S.replaceFirst(\"O\", \"\");\n        \/\/ S = S.replaceFirst(\"O\", \"\");\n\n        \/\/ removeCharAt(S, 3);\n        \/\/ System.out.println(S+ \" \"+Slength+\" Index of Z is: \"+S.indexOf('w'));\n    }\n}"}
{"idx":"1419","func":"class Tester {\n    \n    public static void main(String[] args) throws Exception {\n        File f = new File(\"A-large (1).in\");\n        Scanner sc = new Scanner(f);\n        int t = sc.nextInt();\n        for(int i=0;i<t;i++) {\n            int size = sc.nextInt();\n            int[] number = new int[size];\n            for(int j=0;j<size;j++) {\n                number[j] = sc.nextInt();\n            }\n            System.out.print(\"Case #\"+(i+1)+\": \");\n            last(number);\n        }\n        \/*int[] x = {9,8,7,6,5,4,3,2,1};\n        last(x);*\/\n    }\n    public static  void last(int[] number) {\n        int x = sum(number);\n        if(x%2==1) {\n            int max = 0;\n            for(int i=1;i<number.length;i++) {\n                if(number[i]>number[max]) {\n                    max = i;\n                }\n            }\n            x--;\n            number[max]--;\n            System.out.print((char)(65+max)+\" \");\n        }\n        do{\n            int max=0,secondMax=0;\n            for(int i=1;i<number.length;i++) {\n                if(number[i]>number[max]) {\n                    max = i;\n                }\n            }\n            secondMax = (max+1)%number.length;\n            for(int i=0;i<number.length;i++) {\n                if((number[i]>number[secondMax])&&(i!=max)) {\n                    secondMax = i;\n                }\n            }\n            System.out.print((char)(65+max)+\"\"+(char)(65+secondMax)+\" \");\n            number[max]--;\n            number[secondMax]--;\n            \/*for(int i=0;i<number.length;i++) {\n                System.out.print(number[i]+\" \");\n            }\n            System.out.println();*\/\n            x-=2;\n            \/\/printMajority(number,x);\n        }while(x>0);\n        System.out.println();\n        \/*if(x == 1) {\n            System.out.println(\"Bing\");\n        }*\/\n        \/\/System.out.println(number[max]+\"  \"+number[secondMax]);\n    }\n}"}
{"idx":"1420","func":"class a {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n    String str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for(int i = 1; i <= t; ++i) {\n      int N = in.nextInt();\n      ArrayList<Integer> p = new ArrayList<Integer>();\n      int sum = 0;\n      for(int j=0;j<N;j++){\n        int temp = in.nextInt();\n        p.add(temp);\n        sum+=temp;\n      }\n\n      System.out.print(\"Case #\" + i + \": \");\n      while(sum>0){\n        int index = 0;\n        int max = 0;\n        for(int k=0;k<p.size();k++){\n          if(p.get(k)>max){\n            max = p.get(k);\n            index = k;\n          }\n        }\n        System.out.print(str.charAt(index));\n        sum--;\n        p.set(index, p.get(index) - 1);\n        if(sum!=2){\n          max = 0;\n          for(int k=0;k<p.size();k++){\n            if(p.get(k)>max){\n              max = p.get(k);\n              index = k;\n            }\n          }\n          System.out.print(str.charAt(index));\n          sum--;\n          p.set(index, p.get(index) - 1);\n        }\n        System.out.print(\" \");\n      }\n  System.out.print(\"\\n\");\n\n\n\n    }\n  }\n}"}
{"idx":"1421","func":"class ProblemA {\n    \n    \/\/ Workaround for not being able to pipe a file to stdin in Eclipse.\n    private static final String IN_FILE = \"text\/\" + \"A-large.in\";\n    \n    public static void main(String[] args) throws Exception {\n        try (Scanner in = new Scanner(new BufferedReader(new FileReader(IN_FILE)))) {\n            int numCases = in.nextInt();\n            for (int i = 0; i < numCases; i++) {\n                int numParties = in.nextInt();\n                int[] counts = new int[numParties];\n                for (int j = 0; j < numParties; j++) {\n                    counts[j] = in.nextInt();\n                }\n                StringBuilder result1 = new StringBuilder();\n                int totalCount = Arrays.stream(counts).sum();\n                int numRemoved = 0;\n                while (numRemoved < totalCount) {\n                    if (result1.length() > 0) {\n                        result1.append(\" \");\n                    }\n                    Integer maxVal = null;\n                    Integer secondMax = null;\n                    Integer ix11 = null;\n                    Integer ix21 = null;\n                    \n                    for (int i1 = 0; i1 < counts.length; i1++) {\n                        if (maxVal == null || counts[i1] > maxVal) {\n                            if (maxVal != null && (secondMax == null || maxVal > secondMax)) {\n                                secondMax = maxVal;\n                                ix21 = ix11;\n                            }\n                            maxVal = counts[i1];\n                            ix11 = i1;\n                        }\n                        else if (secondMax == null || counts[i1] > secondMax) {\n                            secondMax = counts[i1];\n                            ix21 = i1;\n                        }\n                    }\n                    \n                    assert (ix11 == null || ix11 != ix21);\n                    \n                    Integer[] maxIxs = new Integer[] { ix11, ix21 };\n                    int ix1 = maxIxs[0];\n                    int ix2 = maxIxs[1];\n                    \n                    if (counts[ix1] == counts[ix2] && !(counts[ix1] == 1 && totalCount - numRemoved == 3)) {\n                        result1.append((char) ('A' + ix1));\n                        result1.append((char) ('A' + ix2));\n                        counts[ix1]--;\n                        counts[ix2]--;\n                        numRemoved += 2;\n                    }\n                    else {\n                        result1.append((char) ('A' + ix1));\n                        counts[ix1]--;\n                        numRemoved++;\n                    }\n                }\n                \n                String result = result1.toString();\n                String resultStr = result;\n                \n                System.out.println(String.format(\"Case #%s: %s\", i+1, resultStr));\n            }\n        }\n    }\n}"}
{"idx":"1422","func":"class senateevac {\n    public static void main(String args[]){\n        try{\n            Scanner fr=new Scanner(new File(\"A-large.in\"));\n            int inp=fr.nextInt();    \n            for(int i=0;i<inp;i++){\n                int n=fr.nextInt();\n                int arr[]=new int[n];\n                for(int j=0;j<n;j++){\n                    arr[j]=fr.nextInt();\n                }\n                System.out.print(\"Case #\"+(i+1)+\": \");\n                        func(arr);\n            }\n            }catch(Exception e){\n                \n            }\n    }\n    public static void func(int arr[]){\n        while(true){\n            int max=arr[0];\n            int equaltomax=1;\n        for(int i=1;i<arr.length;i++){\n            if(arr[i]>max){\n                max=arr[i];\n                equaltomax=1;\n            }\n            else if(arr[i]==max){\n                equaltomax++;\n            }\n        }\n        if(max==0){\n            System.out.println();\n            return;\n        }\n        int nikcount=0;\n        \/\/System.out.print(\"max = \"+max);\n        if(equaltomax%2==0){\n            \n            for(int i=0;i<arr.length;i++){\n                if(arr[i]==max){\n                    System.out.print(Character.toString ((char) (i+65)));\n                    arr[i]--;\n                    nikcount++;\n                    if(nikcount==2){\n                        i=arr.length;\n                    }\n                }\n            }\n        }\n        else if (equaltomax%2!=0){\n            for(int i=0;i<arr.length;i++){\n                if(arr[i]==max){\n                    System.out.print(Character.toString ((char) (i+65)));\n                    arr[i]--;\n                    nikcount++;\n                    if(nikcount==1){\n                        i=arr.length;\n                    }\n                }\n            }\n        }\n        System.out.print(\" \");\n        }\n        \n    }\n}"}
{"idx":"1423","func":"class SenateEvacuation {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n\n        for (int t = 1; t <= T; t++) {\n            System.out.printf(\"case #%d:\", t);\n\n            int N = in.nextInt();\n            int[] arr = new int[N];\n\n            int sum = 0;\n\n            for (int i = 0; i < N; i++) {\n                int tmp = in.nextInt();\n                arr[i] = tmp;\n                sum += tmp;\n            }\n\n            StringBuilder sb = new StringBuilder();\n\n            while (true) {\n                int max = -1, maxi = -1;\n                int sec = -2, seci = -2;\n                int left = 0;\n                for (int i = 0; i < N; i++) {\n                    if (arr[i] > 0) left++;\n\n                    if (arr[i] > max) {\n                        sec = max; seci = maxi;\n                        max = arr[i]; maxi = i;\n                    } else if (arr[i] > sec) {\n                        sec = arr[i]; seci = i;\n                    }\n                }\n\n                char a = 'A'; a += maxi;\n                char b = 'A'; b += seci;\n\n                if (left == 2) {\n                    while (max - sec > 1) {\n\n                        sb.append(\" \").append(a).append(a);\n                        max = max - 2;\n                    }\n                    if (max != sec) {\n                        sb.append(\" \").append(a);\n                        max = max - 1;\n                    }\n                    while (max != 0) {\n                        sb.append(\" \").append(a).append(b);\n                        max = max - 1; sec = sec - 1;\n                    }\n                    break;\n                } else {\n                    sb.append(\" \").append(a);\n                    arr[maxi]--;\n                }\n            }\n\n            System.out.println(sb.toString());\n        }\n    }\n}"}
{"idx":"1424","func":"class  Round1CProblemA {\n        public static void main(String[] args) throws Exception {\n            Round1CProblemA r = (new  Round1CProblemA());\n            Scanner sc = new Scanner(new FileReader(\"input.in\"));\n            PrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n            int T = sc.nextInt();\n            for (int t=0; t<T; t++) {\n                System.out.println(\"Now case \" + (t+1));\n                int N = sc.nextInt();\n                int[] P = new int[N];\n                for(int i=0; i<N;i++){\n                    P[i] = sc.nextInt();\n                }\n                int pe = 0;\n                for(int i=0; i<N;i++){\n                    pe = pe + P[i];\n                }\n                String alp = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n                String ans = \"\";\n                while(pe>0){\n                    int maxp = 0;\n                    for(int i=1;i<P.length;i++){\n                        if(P[i]>P[maxp]) maxp = i;\n                    }\n                    P[maxp] = P[maxp] - 1;\n                    pe = pe -1;\n                    ans = ans + alp.charAt(maxp);\n                    if(pe==2){\n                    }else{\n                        for(int i=1;i<P.length;i++){\n                            if(P[i]>P[maxp]) maxp = i;\n                        }\n                        P[maxp] = P[maxp] - 1;\n                        pe = pe -1;\n                        ans = ans + alp.charAt(maxp);\n                    }\n                    ans = ans + \" \";\n                }\n                \n                \n                pw.print(\"Case #\" + (t+1) + \": \" + ans);\n                pw.println();\n            }\n            pw.flush();\n            pw.close();\n            sc.close();\n        }\n    }"}
{"idx":"1425","func":"class Problem1A {\n\n    private static BufferedReader in;\n    private static PrintWriter out;\n    public static boolean SUBMIT = true;\n    public static final String NAME = \"A-small-attempt1\";\n    static String alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    public static void main(String[] args) throws IOException{\n        if (SUBMIT) {\n              in = new BufferedReader(new FileReader(NAME + \".in\"));\n              out = new PrintWriter(NAME + \".out\");\n            } else {\n              in = new BufferedReader(new FileReader(\"testA.in\"));\n              out = new PrintWriter(\"testA.out\");\n            }\n\n             String line = in.readLine();\n            int totalCases = Integer.parseInt(line);\n            for(int caseNum=1;caseNum<=totalCases;caseNum++){\n                out.print(\"Case #\" + caseNum + \": \");\n                in.readLine();\n                LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>();\n                String test = in.readLine();\n                String[] number = test.split(\" \");\n                for(int k=0;k<number.length;k++){\n                     map.put(\"\"+alpha.charAt(k), Integer.parseInt(number[k]));\n                }\n                \n                String result = \"\";\n                \n                while(true){\n                \n                int current = -1;\n                String equalKey = \"\";\n                String bigKey = \"\";\n                String currentKey = \"\";\n                boolean zeroFOund = false;\n                \n                Iterator it = map.entrySet().iterator();\n                while (it.hasNext()) {\n                    Map.Entry pair = (Map.Entry)it.next();\n                    int val = (int) pair.getValue();\n                    if(val == 0){\n                        zeroFOund = true;\n                        continue;\n                    }else{\n                        zeroFOund = false;\n                    }\n                    if(current < val){\n                        current = val;\n                        currentKey = (String) pair.getKey();\n                        equalKey = \"\";\n                        bigKey = (String) pair.getKey();\n                    }else if(current == val){\n                        equalKey = currentKey + (String) pair.getKey();\n                    }\n                    System.out.println(pair.getKey() + \" = \" + pair.getValue());\n                   \/\/ it.remove(); \/\/ avoids a ConcurrentModificationException\n                }\n                \n                if(equalKey.length() > 0){\n                    for(int i=0;i<2;i++){\n                        String key = \"\"+equalKey.charAt(i);\n                        int value = map.get(key);\n                        value = value - 1;\n                        map.put(key, value);\n                        result = result + key;\n                    }\n                    result = result + \" \";\n                }else if(bigKey.length() > 0){\n                    int value = map.get(bigKey);\n                    if(value >= 2){\n                        value = value - 2;    \n                        result = result + bigKey + bigKey + \" \";\n                    }else{\n                        value = value - 1;\n                        result = bigKey + \" \" + result;\n                    }\n                    map.put(bigKey, value);\n                }\n                \n                if(zeroFOund){\n                    break;\n                }\n                }\n                System.out.println(result);\n                out.print(result);\n                out.println();\n            }\n\n            out.close();\n            System.exit(0);\n    }\n    \n    \n}"}
{"idx":"1426","func":"class A {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        int cases = in.nextInt();\n\n        for (int c = 0; c < cases; c++) {\n            int no_of_parties = in.nextInt();\n            int parties[] = new int[no_of_parties];\n\n            int remaining = 0;\n            for (int i = 0; i < no_of_parties; i++) {\n                parties[i] = in.nextInt();\n                remaining += parties[i];\n            }    \n\n            StringBuilder output = new StringBuilder(\"\");\n            output.append(\"Case #\" + (c+1) + \":\");\n\n            while (remaining > 0) {\n                output.append(\" \");\n\n                \/\/find MAX number\n                int max = 0;\n                for (int i = 0; i < no_of_parties; i++) {\n                    if (parties[i] > max) max = parties[i];\n                }\n                \/\/find number of maxes\n                int no_of_max = 0;\n                for (int i = 0; i < no_of_parties; i++) {\n                    if (parties[i] == max) no_of_max++;\n                }\n\n                \/\/if more than 3 or not 1, remove 2\n                if (no_of_max > 3 || no_of_max == 2) {\n                    int count = 2;\n                    for (int i = 0; i < no_of_parties; i++) {\n                        if (count == 0) break;\n                        if (parties[i] == max) {\n                            parties[i]--;\n                            output.append((char)(('A') + i));\n                            count--;\n                        }\n                    }\n                    remaining -= 2;\n                }    \n                else { \/\/just remove one please\n                    int count = 1;\n                    for (int i = 0; i < no_of_parties; i++) {\n                        if (count == 0) break;\n                        if (parties[i] == max) {\n                            parties[i]--;\n                            output.append((char)(('A') + i));\n                            count--;\n                        }\n                    }\n                    remaining -= 1;\n                }\n                \n                \/\/TEST TEST TEST\n                int maxpol = remaining\/2 + 1;\n                for (int i = 0; i < no_of_parties; i++) {\n                    if (parties[i] >= maxpol) {\n                        System.out.println(\"WARNING\");\n                    }\n                }\n                \/\/TEST TEST TEST PLS REMOVE LATER\n\n\n\n            } \/\/end remove while\n\n            System.out.println(output);\n        }\n\n    }\n\n} \/\/EM"}
{"idx":"1427","func":"class A {\n    public static void main(String[] args) throws NumberFormatException,\n            IOException {\n\n        BufferedReader br = new BufferedReader(\n                new InputStreamReader(System.in), 1024 * 1024 * 2);\n\n        int t = Integer.parseInt(br.readLine());\n\n        long time = System.currentTimeMillis();\n        StringBuilder sb = new StringBuilder();\n        for (int x = 1; x <= t; x++) {\n            int n = Integer.valueOf(br.readLine());\n            String line = br.readLine();\n            int[] ret = new int[n];\n            int start = 0;\n            int end = line.indexOf(' ', start);\n            for (int i1 = 0; i1 < n; i1++) {\n                if (end > 0)\n                    ret[i1] = Integer.parseInt(line.substring(start, end));\n                else\n                    ret[i1] = Integer.parseInt(line.substring(start));\n                start = end + 1;\n                end = line.indexOf(' ', start);\n            }\n            int vals[] = ret;\n\n            int sum = 0;\n            for ( int i = 0 ; i < n ; i ++ ) {\n                sum += (vals[i]);\n            }\n\n\n            sb.append(\"Case #\" + x + \": \" );\n            while (Arrays.stream(vals).filter(x1->x1>0).count() > 2) {\n                int max = 0;\n                int imax = -1;\n                for (int i = 0 ;i <n ; i ++) {\n                    if (max < vals[i]) {\n                        max = vals[i];\n                        imax = i;\n                    }\n                }\n                int iimax = -1;\n                int max2 = 0;\n                for (int i = 0 ;i <n ; i ++) {\n                    if (max2 < vals[i] && i != imax) {\n                        max2 = vals[i];\n                        iimax = i;\n                    }\n                }\n                char c1 = (char) (imax + 'A');\n                char c2 = (char) (iimax + 'A');\n                if (sum % 2 == 1) {\n                    sb.append(c1 + \" \");\n                    vals[imax] -= 1;\n                    sum -= 1;\n                }else {\n                    if (vals[imax] > 2 && vals[imax] - 2 > (sum - 2) \/ 2) {\n                        sb.append(c1 + \"\" + c1 + \" \");\n                        vals[imax] -= 2;\n                        sum -= 2;\n                    } else {\n                        sb.append(c1 + \"\" + c2 + \" \");\n                        vals[imax]--;\n                        vals[iimax]--;\n                        sum -= 2;\n                    }\n                }\n\n\n            }\n\n            if (Arrays.stream(vals).filter(x2->x2>0).count() == 2) {\n                int max = 0;\n                int imax = -1;\n                for (int i = 0 ;i <n ; i ++) {\n                    if (max < vals[i]) {\n                        max = vals[i];\n                        imax = i;\n                    }\n                }\n                int iimax = -1;\n                int max2 = 0;\n                for (int i = 0 ;i <n ; i ++) {\n                    if (max2 < vals[i] && i != imax) {\n                        max2 = vals[i];\n                        iimax = i;\n                    }\n                }\n                for (int i = 0 ; i<sum\/2; i++) {\n                    sb.append((char)('A' + imax));\n                    sb.append((char)('A' + iimax));\n                    sb.append(\" \");\n                }\n            }\n            sb.append(\"\\n\");\n\n        }\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"ii\/outAJam\"));\n        bw.write(sb.toString());\n        bw.close();\n        System.out.println(sb.toString());\n        System.out.println(-time + System.currentTimeMillis());\n    }\n}"}
{"idx":"1428","func":"class ProblemA {\n\n    public static String PROBLEM_LETTER = \"A\";\n\n    public static String IN_DIR = \"inputs\/\" + PROBLEM_LETTER + \"\/\";\n    public static String OUT_DIR = \"outputs\/\" + PROBLEM_LETTER + \"\/\";\n\n    \/\/public static String IN_FILE = IN_DIR + \"sample.in\";\n    \/\/public static String IN_FILE = IN_DIR + \"A-small-attempt0.in\";\n    public static String IN_FILE = IN_DIR + \"A-large.in\";\n\n    \/\/public static String OUT_FILE = OUT_DIR + \"sample.out\";\n    \/\/public static String OUT_FILE = OUT_DIR + \"small.out\";\n    public static String OUT_FILE = OUT_DIR + \"large.out\";\n\n    public static int[] idxToCnt = new int[26];\n    public static char[] idxToCh = new char[26];\n\n    public static void main(String[] args) {\n        try {\n            Scanner sc = new Scanner(new File(IN_FILE));\n            PrintWriter wr = new PrintWriter(OUT_FILE);\n\n            int T = sc.nextInt();\n            for (int ti = 0; ti < T; ti++) {\n                int N = sc.nextInt();\n                for(int i = 0; i < 26; i++) {\n                    idxToCnt[i] = 0;\n                    idxToCh[i] = (char) ('A' + i);\n                }\n                for(int i = 0; i < N; i++) {\n                    idxToCnt[i] = sc.nextInt();\n                }\n                wr.print(\"Case #\" + (ti+1) + \": \");\n                \n                int rem = 0;\n                for (int i = 0; i < N; i++) {\n                    rem += idxToCnt[i];\n                }\n                \n                for (int tsi = 0; tsi < N-1; tsi++) {\n                    int end = N-1;\n                    int res1 = tsi;\n                    \n                    if (true) {\n                        for (int i = tsi + 1; i <= end; i++) {\n                            if (idxToCnt[i] > idxToCnt[res1]) {\n                                res1 = i;\n                            }\n                        }\n                    } else {\n                        for (int i = tsi + 1; i <= end; i++) {\n                            if (idxToCnt[i] >= idxToCnt[res1]) {\n                                res1 = i;\n                            }\n                        }\n                    }\n                    int nextMax = res1;\n                    if (nextMax == tsi) {\n                        continue;\n                    } else {\n                        int tmpCnt = idxToCnt[tsi];\n                        char tmpChar = idxToCh[tsi];\n                        \n                        idxToCnt[tsi] = idxToCnt[nextMax];\n                        idxToCh[tsi] = idxToCh[nextMax];\n                        \n                        idxToCnt[nextMax] = tmpCnt;\n                        idxToCh[nextMax] = tmpChar;\n                    }\n                }\n                \n                String res = \"\";\n                while(true) {\n                    if (res.length() != 0) {\n                        res += \" \";\n                    }\n                    String door = \"\";\n                \n                    door += idxToCh[0];\n                    idxToCnt[0]--;\n                    rem--;\n                \n                    if(rem == 0) {\n                        res += door;\n                        break;\n                    }\n                    int end = N-1;\n                    int res1 = 0;\n                    \n                    if (false) {\n                        for (int i = 0 + 1; i <= end; i++) {\n                            if (idxToCnt[i] > idxToCnt[res1]) {\n                                res1 = i;\n                            }\n                        }\n                    } else {\n                        for (int i = 0 + 1; i <= end; i++) {\n                            if (idxToCnt[i] >= idxToCnt[res1]) {\n                                res1 = i;\n                            }\n                        }\n                    }\n                \n                    int nextMax = res1;\n                    if (nextMax != 0) {\n                        int tmpCnt = idxToCnt[0];\n                        char tmpChar = idxToCh[0];\n                        \n                        idxToCnt[0] = idxToCnt[nextMax];\n                        idxToCh[0] = idxToCh[nextMax];\n                        \n                        idxToCnt[nextMax] = tmpCnt;\n                        idxToCh[nextMax] = tmpChar;\n                    }\n                \n                    if (idxToCnt[0] > rem - idxToCnt[0]) {\n                        door += idxToCh[0];\n                        idxToCnt[0]--;\n                        rem--;\n                \n                        res += door;\n                \n                        if(rem == 0) {\n                            break;\n                        }\n                        int end1 = N-1;\n                        int res2 = 0;\n                        \n                        if (false) {\n                            for (int i = 0 + 1; i <= end1; i++) {\n                                if (idxToCnt[i] > idxToCnt[res2]) {\n                                    res2 = i;\n                                }\n                            }\n                        } else {\n                            for (int i = 0 + 1; i <= end1; i++) {\n                                if (idxToCnt[i] >= idxToCnt[res2]) {\n                                    res2 = i;\n                                }\n                            }\n                        }\n                \n                        int nextMax2 = res2;\n                        if (nextMax2 != 0) {\n                            int tmpCnt = idxToCnt[0];\n                            char tmpChar = idxToCh[0];\n                            \n                            idxToCnt[0] = idxToCnt[nextMax2];\n                            idxToCh[0] = idxToCh[nextMax2];\n                            \n                            idxToCnt[nextMax2] = tmpCnt;\n                            idxToCh[nextMax2] = tmpChar;\n                        }\n                    } else {\n                        res += door;\n                    }\n                }\n                \n                wr.println(res);\n            }\n\n            wr.close();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n}"}
{"idx":"1429","func":"class SenateEvacuation {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        final int INPUT_FILE_NUMBER = 3;\n        Scanner scanner = new Scanner(new File(\"C:\\\\dev\\\\Projects\\\\algorithms\\\\TestCases\\\\GoogleCodeJam\\\\SenateEvacuation\\\\input\" + INPUT_FILE_NUMBER + \".txt\"));\n        PrintWriter printWriter = new PrintWriter(new File(\"C:\\\\dev\\\\Projects\\\\algorithms\\\\TestCases\\\\GoogleCodeJam\\\\SenateEvacuation\\\\output\" + INPUT_FILE_NUMBER + \".txt\"));\n\n        int tc = scanner.nextInt();\n        for (int t = 0; t < tc; t++) {\n            int n = scanner.nextInt();\n            int[] a = new int[n];\n\n            int remaining = 0;\n            for (int i = 0; i < a.length; i++) {\n                a[i] = scanner.nextInt();\n                remaining += a[i];\n            }\n\n            printWriter.write(\"Case #\" + (t + 1) + \":\");\n            while (remaining > 0) {\n                \/\/ find the top maximums, sort as time is not an issue\n                Integer[] sorted = new Integer[a.length];\n                for (int i = 0; i < a.length; i++) {\n                    sorted[i] = a[i];\n                }\n\n                Arrays.sort(sorted, new Comparator<Integer>() {\n                    @Override\n                    public int compare(Integer o1, Integer o2) {\n                        return o2 - o1;\n                    }\n                });\n\n\n                boolean okToRemove2 = true;\n                boolean firstRemoved = false;\n                boolean secondRemoved = false;\n                boolean mustRemoveSame = a[0] - a[1] > 1;\n\n                \/\/ try to remove 2\n                int[] removedPos = new int[2];\n                for (int i = 0; i < a.length; i++) {\n                    if (a[i] == sorted[0] && !firstRemoved) {\n                        firstRemoved = true;\n                        removedPos[0] = i;\n                        if (mustRemoveSame) {\n                            secondRemoved = true;\n                            removedPos[1] = i;\n                        }\n                        int toRemove = 1 + (mustRemoveSame ? 1 : 0);\n                        a[i] -= toRemove;\n                    } else if (a[i] == sorted[1] && !mustRemoveSame && !secondRemoved) {\n                        removedPos[1] = i;\n                        a[i]--;\n                        secondRemoved = true;\n                    }\n\n                    if (a[i] > (remaining - 2) \/ 2) {\n                        okToRemove2 = false;\n                    }\n                }\n\n                if (!okToRemove2) {\n                    a[removedPos[0]]++;\n                    a[removedPos[1]]++;\n\n                    \/\/ just remove the maximum\n                    boolean removed = false;\n                    for (int i = 0; i < a.length; i++) {\n                        if (a[i] == sorted[0] && !removed) {\n                            printWriter.write(\" \");\n                            printWriter.write((char) ('A' + i));\n                            a[i]--;\n                            removed = true;\n                        }\n                        if (a[i] > (remaining - 1) \/ 2) {\n                            System.out.println(\"Error test case \" + t + \"a \" + i + \" \" + a[i] + \" remaining \" + remaining);\n                        }\n                    }\n                    remaining--;\n                } else {\n                    remaining -= 2;\n                    printWriter.write(\" \");\n                    printWriter.write((char) ('A' + removedPos[0]));\n                    printWriter.write((char) ('A' + removedPos[1]));\n                }\n            }\n            printWriter.write(\"\\n\");\n        }\n        printWriter.flush();\n        printWriter.close();\n    }\n}"}
{"idx":"1430","func":"class MainClass {\n\n    public static void main(String[] args) throws FileNotFoundException {\n\n        File fin = new File(\"input.in\");\n        File fout = new File(\"output.out\");\n\n        Scanner in = new Scanner(fin);\n        PrintWriter out = new PrintWriter(fout);\n\n        int T = in.nextInt();\n        int n;\n        ArrayList<Integer> senators = new ArrayList<Integer>();\n        int sum;\n        String sol = \"\";\n\n        for (int cT = 1; cT <= T; cT++) {\n            senators.clear();\n            sol = \"\";\n            n = in.nextInt();\n            for (int i = 0; i < n; i++)\n                senators.add(in.nextInt());\n            sum = 0;\n            for (int i = 0; i < n; i++)\n                sum += senators.get(i);\n\n            while (sum-- > 2) {\n                int max = 0, index = -1, index2 = -1;\n                boolean match3 = false;\n                for (int i = 0; i < n; i++)\n                    if (senators.get(i) > max) {\n                        index = i;\n                        max = senators.get(i);\n                        index2 = -1;\n                    } else if (senators.get(i) == max) {\n                        if (index2 == -1)\n                            index2 = i;\n                        else\n                            match3 = true;\n                    }\n                if (index2 == -1 || match3) {\n                    senators.set(index, max - 1);\n                    sol += \" \" + (char) (index + 'A');\n                } else {\n                    senators.set(index, max - 1);\n                    senators.set(index2, max - 1);\n                    sol += \" \" + (char) (index + 'A') + (char) (index2 + 'A');\n                    sum--;\n                }\n                for (int i = 0; i < n; i++)\n                    if (senators.get(i) > sum \/ 2)\n                        System.out.println(\"flawed\");\n            }\n            sol += \" \";\n            for (int i = 0; i < n; i++)\n                if (senators.get(i) > 0)\n                    sol += (char) (i + 'A');\n            out.println(\"Case #\" + cT + \":\" + sol);\n        }\n        in.close();\n        out.close();\n    }\n\n}"}
{"idx":"1431","func":"class SenateEvacuation {\n    \n    public static void main(String[] args) {\n        Scanner keyboard = new Scanner(System.in);\n        int T, N;\n        int[] senates;\n        \n        T = keyboard.nextInt();\n        keyboard.nextLine();\n        for(int i = 0; i < T; i++) {\n            N = keyboard.nextInt();\n            senates = new int[N];\n            for(int j = 0; j < N; j++) senates[j] = keyboard.nextInt();\n            System.out.print(\"Case #\"+ (i+1) +\": \");\n            boolean continuing = true;\n            int maxid, maxid2, equals;\n            while(continuing) {\n                maxid = 0;\n                maxid2 = -1;\n                equals = 0;\n                for(int i2 = 1; i2 < senates.length; i2++) {\n                    if(senates[i2] > senates[maxid]) {\n                        maxid = i2;\n                        equals = 0;\n                    }\n                    else if(senates[i2] == senates[maxid]) {\n                        equals++;\n                        maxid2 = i2;\n                    }\n                }\n                \n                if(equals > 0 && senates[maxid] > 1) {\n                    System.out.print(Character.toChars(maxid + 65));\n                    System.out.print(Character.toChars(maxid2 + 65));\n                    System.out.print(\" \");\n                    senates[maxid] -= 1;\n                    senates[maxid2] -= 1;\n                }\n                else if(senates[maxid] > 1) {\n                    System.out.print(Character.toChars(maxid + 65));\n                    System.out.print(Character.toChars(maxid + 65));\n                    System.out.print(\" \");\n                    senates[maxid] -= 2;\n                } else if(equals == 2) {\n                    System.out.print(Character.toChars(maxid + 65));\n                    System.out.print(\" \");\n                    senates[maxid] -= 1;\n                } else if (equals > 0){\n                    System.out.print(Character.toChars(maxid + 65));\n                    System.out.print(Character.toChars(maxid2 + 65));\n                    System.out.print(\" \");\n                    senates[maxid] -= 1;\n                    senates[maxid2] -= 1;\n                } else {\n                    System.out.print(Character.toChars(maxid + 65));\n                    System.out.print(\" \");\n                    senates[maxid] -= 1;\n                }\n                continuing = false;\n                for(int i1 = 0; i1 < senates.length; i1++) {\n                    if(senates[i1] > 0) continuing = true;\n                }\n            }\n            System.out.println();    \n        }\n        keyboard.close();\n    }\n\n}"}
{"idx":"1432","func":"class A {\n\n\/\/            final static String FILE_NAME = \"A-test\";\n\/\/    final static String FILE_NAME = \"A-small-attempt2\";\n    final static String FILE_NAME = \"A-large\";\n\n    private Scanner in;\n    private PrintWriter out;\n\n    public static void main(String[] args) throws Exception {\n        Locale.setDefault(Locale.US);\n        A r = new A();\n        r.in = new Scanner(new File(A.FILE_NAME + \".in\"));\n        r.out = new PrintWriter(new File(A.FILE_NAME + \".out\"));\n        int tcn = r.in.nextInt();\n        for (int tc = 1; tc <= tcn; tc++) {\n            int n = r.in.nextInt();\n            int[] s = new int[n];\n            int total = 0;\n            for (int i = 0; i < n; i++) {\n                s[i] = r.in.nextInt();\n                total += s[i];\n            }\n            \n            String res = \"\";\n            while (total > 0) {\n                res += ' ';\n                int a = 0;\n                for (int i = 1; i < n; i++) {\n                    if (s[a] < s[i]) {\n                        a = i;\n                    }\n                }\n                s[a]--;\n                total--;\n                res += (char) ('A' + a);\n            \n                if (total == 0) {\n                    break;\n                }\n            \n                boolean ok = true;\n                int b = 0;\n                for (int i = 1; i < n; i++) {\n                    if (s[b] < s[i]) {\n                        b = i;\n                    }\n                }\n                s[b]--;\n                total--;\n            \n                for (int i = 0; i < n; i++) {\n                    if (s[i] * 2 > total) {\n                        ok = false;\n                        break;\n                    }\n                }\n            \n                if (ok) {\n                    res += (char) ('A' + b);\n                } else {\n                    s[b]++;\n                    total++;\n                }\n            }\n            res.trim();\n            r.out.format(\"Case #%d: %s\\n\", tc, res);\n            System.out.format(\"Case #%d: %s\\n\", tc, res);\n        }\n        r.out.close();\n    }\n}"}
{"idx":"1433","func":"class a1 {\n\n    private static final String[] PL = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n    \n    public static void main(String[] args) {\n\/\/        readAndSolve(\"resource\/gcj2016\/c1\/a1\/sample.in\", \"resource\/gcj2016\/c1\/a1\/sample.out\");\n\/\/        readAndSolve(\"resource\/gcj2016\/c1\/a1\/A-small-attempt0.in\", \"resource\/gcj2016\/c1\/a1\/A-small-attempt0.out\");\n        BufferedReader input = null;\n        BufferedWriter output = null;\n        Date d1 = new Date();\n        try {\n            input = new BufferedReader(new FileReader(\"resource\/gcj2016\/c1\/a1\/A-large.in\"));\n            output = new BufferedWriter(new FileWriter(\"resource\/gcj2016\/c1\/a1\/A-large.out\"));\n            String line1 = null;\n            String line2 = null;\n            int expectedCases = 0;\n            int actualCase = -1;\n            line1=input.readLine();\n            expectedCases = Integer.parseInt(line1);\n            for (actualCase = 1; actualCase<=expectedCases; actualCase++) {\n                line1=input.readLine();\n                line2=input.readLine();\n                Scanner sc = new Scanner(line1);\n                        int partynum = sc.nextInt();\n                        Scanner sc1 = new Scanner(line2);\n                        int[] parties1 = new int[partynum];\n                        for (int i2 = 0; i2< partynum; i2++ ) {\n                            parties1[i2] = sc1.nextInt();\n                        }\n                        int[] parties = parties1;\n                        int result2 = 0;\n                        for(int i1 : parties) {\n                            result2 +=i1;\n                        }\n                        int totalcount = result2;\n                        StringBuffer sb = new StringBuffer(2*partynum);\n                        while (totalcount > 0) {\n                            int[] result1 = new int[2];\n                            int[] maxvalues = new int[2];\n                            result1[0] = -1;\n                            result1[1] = -1;\n                            maxvalues[0] = -1;\n                            maxvalues[1] = -1;\n                            for (int i = 0; i<parties.length; i++){\n                                if (parties[i]> maxvalues[0]) {\n                                    result1[1] = result1[0];\n                                    maxvalues[1] = maxvalues[0];\n                                    result1[0] = i;\n                                    maxvalues[0] = parties[i];\n                                } else {\n                                    if (parties[i] > maxvalues[1]) {\n                                        result1[1] =i;\n                                        maxvalues[1] = parties[i];\n                                    }\n                                }\n                            }\n                            int[] x = result1;\n                \/\/            System.out.println(x[0] + \" \" +x[1]);\n                            if ((totalcount ==3) || ((x[1] == -1) && (parties[x[0]] == 1)) ) {\n                                sb.append(PL[x[0]]);\n                                parties[x[0]]--;\n                                totalcount --;\n                            } else {\n                                if ((x[1] == -1) || (parties[x[0]] - parties[x[1]] > 1)) {\n                                    sb.append(PL[x[0]]);                    \n                                    sb.append(PL[x[0]]);\n                                    parties[x[0]]-=2;\n                                    totalcount-=2;\n                                } else {\n                                    sb.append(PL[x[0]]);\n                                    parties[x[0]]--;\n                                    sb.append(PL[x[1]]);\n                                    parties[x[1]]--;\n                                    totalcount-=2;\n                                }\n                            }\n                            sb.append(\" \");\n                        }\n                String result = sb.toString().trim();\n                output.write(\"Case #\" + actualCase +\": \" + result + \"\\n\");                \n                System.out.println(\"Case #\" + actualCase +\": \" + result );                \n            }\n            input.close();\n            output.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            \n        }\n    }\n    \n}"}
{"idx":"1434","func":"class Main {\n    public static void main(String[] args) throws IOException {\n        String filename = \"src\/A-large\";\n        System.setIn(new FileInputStream(new File(filename + \".in\")));\n        Scanner sc = new Scanner(System.in);\n        int tc = sc.nextInt();\n\n        FileWriter fw = new FileWriter(filename + \".out\");\n        for (int t = 0; t < tc; t++) {\n            int n = sc.nextInt();\n            int[] parties = new int[n];\n\n            int max = 0;\n            int maxIdx = -1;\n            int rest = 0;\n            for (int i = 0; i < n; i++) {\n                rest += parties[i] = sc.nextInt();\n                if (parties[i] > max) {\n                    max = parties[i];\n                    maxIdx = i;\n                }\n            }\n\n            StringBuilder result = new StringBuilder();\n            if (rest % 2 == 1) {\n                parties[maxIdx]--;\n                rest--;\n                result.append((char) ('A' + maxIdx));\n                result.append(' ');\n            }\n\n            while (rest > 0) {\n                for (int i = 0; i < 2; i++) {\n                    max = 0;\n                    maxIdx = -1;\n                    for (int j = 0; j < n; j++) {\n                        if (parties[j] > max) {\n                            max = parties[j];\n                            maxIdx = j;\n                        }\n                    }\n                    parties[maxIdx]--;\n                    rest--;\n                    result.append((char) ('A' + maxIdx));\n                }\n                result.append(' ');\n            }\n\n            String output = \"Case #\" + (t+1) + \": \" + result.toString().trim();\n            System.out.println(output);\n            fw.write(output);\n            fw.write(\"\\n\");\n            fw.flush();\n        }\n    }\n}"}
{"idx":"1435","func":"class codejam {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int tc = in.nextInt();\n        int temp=tc;\n        while(tc--!=0) {\n            int n = in.nextInt();\n            int a[] = new int[n];\n            String s = \"\";\n            for(int i=0;i<n;i++) {\n                a[i] = in.nextInt();\n            }\n            while(true) {\n            \n            int m1=0;int m2=-1;\n            for(int i=1;i<n;i++) {\n                if(a[i]>a[m1]) {\n                    m1=i;\n                }\n            }\n            for(int i=0;i<n;i++) {\n                if(a[i]==a[m1]&&m1!=i) {\n                    m2=i;\n                }\n            }\n            s=s+(char)(65+m1);\n            a[m1]--;\n            int count = 0;\n            for(int i=0;i<n;i++) {\n                if(a[i]==1) {\n                    count++;\n                }\n                if(a[i]!=1&&a[i]!=0) {\n                    count+=3;\n                }\n                \n            }\n            if(m2!=-1&&count==2) {\n                s=s+(char)(65+m2);\n                a[m2]--;\n            }\n            s=s+\" \";\n            boolean flag = true;\n            for(int i=0;i<n;i++) {\n                if(a[i]!=0) {flag = false; break;}\n            }\n            if(flag) break;\n            }\n            System.out.println(\"Case #\"+(temp-tc)+\": \"+s);\n        }\n        in.close();\n    }\n    \n}"}
{"idx":"1436","func":"class ProblemMain {\n    \n    public static void main(String[] args) {\n        try {\n            System.setIn(new FileInputStream(\"A-large.in\"));\n\/\/           System.setIn(new FileInputStream(\"A-small-attempt0.in\"));\n  \/\/          System.setIn(new FileInputStream(\"sample.txt\"));\n        } catch (FileNotFoundException e) {\n            \/\/ TODO Auto-generated catch block\n        \/\/    e.printStackTrace();\n        }\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int test_cases = in.nextInt(); \/\/ Scanner has functions to read ints,\n                                       \/\/ longs, strings, chars, etc.\n        \n        \/\/ test code\n\/\/        for( int i_test_code = 1; i_test_code <= 200; i_test_code++ )\n\/\/        {\n\/\/            solution(i_test_code, i_test_code);\n\/\/        }\n\/\/        \n\/\/      \n        in.nextLine();\n        \/\/ actual code\n        for (int i_test = 1; i_test <= test_cases; ++i_test) {\n            \n            int party_members_count[] = new int[26];\n            int total_members = 0;\n        \n            int num_parties = in.nextInt();\n            in.nextLine();\n            for( int i_party = 0; i_party < num_parties; i_party++ )\n            {\n                int num_members = in.nextInt();\n                total_members += num_members;\n                party_members_count[i_party] = num_members;\n            }\n            \n            \/\/ algo, find two parties with max count, if no such party,\n            \/\/ get max and second max\n            StringBuilder buffer = new StringBuilder();\n            while(total_members > 0 )\n            {\n                int party_max_members_index = -1;\n                int party_second_max_members_index = -1;\n                for( int i_party = 0; i_party < num_parties; i_party++ )\n                {\n                    if( party_max_members_index == -1 )\n                    {\n                        party_max_members_index = i_party;\n                    }\n                    else\n                    {\n                        if( party_members_count[i_party] >= party_members_count[party_max_members_index] )\n                        {\n                            party_second_max_members_index = party_max_members_index;\n                            party_max_members_index = i_party;   \n                        }\n                        else\n                        {\n                            if( party_second_max_members_index == -1 \n                                    || party_members_count[i_party] >= party_members_count[party_second_max_members_index] )\n                            {\n                                party_second_max_members_index = i_party;\n                            }\n                        }\n                    }                    \n                }\n                if( party_members_count[party_max_members_index]\/(float)total_members > 0.5 )\n                {\n                    System.out.println(\"Error Case #\" + i_test + \": \" + (buffer) );\n                }\n\n                \/\/ always keep max and second max close as possible\n                \n                if(total_members >= 4)\n                {\n                    \/\/ remove max and second max\n                    if((party_members_count[party_max_members_index] - party_members_count[party_second_max_members_index] ) > 2 )\n                    {\n                        \/\/ remove two from max\n                        buffer.append((char)('A' + party_max_members_index));\n                        buffer.append((char)('A' + party_max_members_index));\n                        buffer.append(' ');\n                        party_members_count[party_max_members_index]-= 2;\n                    }\n                    else\n                    {\n                        \/\/ remove one from max, one from second max\n                        buffer.append((char)('A' + party_max_members_index));\n                        buffer.append((char)('A' + party_second_max_members_index));\n                        buffer.append(' ');\n                        party_members_count[party_max_members_index]-= 1;\n                        party_members_count[party_second_max_members_index]-= 1;\n                    }\n                    total_members-=2;\n                }\n                else if( total_members == 3 )\n                {\n                    \/\/ can only remove single max\n                    buffer.append((char)('A' + party_max_members_index));\n                    buffer.append(' ');\n                    party_members_count[party_max_members_index]-= 2;\n                    total_members-=1;\n                }\n                else\n                {\n                    \/\/ remove last 2\n                    buffer.append((char)('A' + party_max_members_index));\n                    buffer.append((char)('A' + party_second_max_members_index));\n                    buffer.append(' ');\n                    party_members_count[party_max_members_index]-= 1;\n                    party_members_count[party_second_max_members_index]-= 1;\n                    total_members-=2;\n               }\n            }\n            \n            System.out.println(\"Case #\" + i_test + \": \" + (buffer) );\n        }\n\n        in.close();\n    }\n\n}"}
{"idx":"1437","func":"class Senate {\n\n    \n    public static void main(String[] args) throws NumberFormatException, IOException {\n        \n        BufferedReader bf = new BufferedReader(new FileReader(\"A-large.in-2.txt\"));\n        \n        PrintStream obj = new PrintStream(new File(\"output.txt\"));\n        \n        int num_case = Integer.parseInt(bf.readLine());\n        \n        for(int i = 0; i<num_case;i++){\n            String num = bf.readLine();\n            \n            int numSenate = Integer.valueOf(num);\n            \n            obj.print(\"Case #\"+(i+1)+\": \");\n            String line = bf.readLine();\n            \n            String[] lineNum = line.split(\" \");\n            \n            int[] arr = new int[26];\n            \n            int count = 0;\n            int max = 0;\n            int totalNum = 0;\n            for(int i2 = 0; i2<lineNum.length; i2++){\n                if(lineNum[i2] != \" \"){\n                    arr[count]+=Integer.valueOf(lineNum[i2]);\n                    count++;\n                    totalNum += Integer.valueOf(lineNum[i2]);\n                    max = Math.max(Integer.valueOf(lineNum[i2]), max);\n                }\n            }\n            \n            \n            \n            ArrayList<Integer> arrList = new ArrayList<>(0);\n            \n            while(totalNum > 0){\n                int max1 = 0;\n                for(int i1 = 0; i1<arr.length;i1++){\n                    max1 = arr[max1]>arr[i1]? max1 : i1;\n                }\n                int remove = max1;\n                arr[remove]--;\n                totalNum--;\n                arrList.add(remove);\n            }\n            \n            int counter =0;\n            int length = arrList.size();\n            \n            for(int i1 = 0; i1<length && arrList.size()>3;i1++){\n                if(counter<1){\n                    obj.print((char)(arrList.remove(0)+65));\n                    counter++;\n                }else{\n                    obj.print((char)(arrList.remove(0)+65));\n                    obj.print(\" \");\n                    counter = 0;\n                }\n            }\n            \n            if(arrList.size() == 4){\n                obj.print((char)(arrList.remove(0)+65));\n                obj.print((char)(arrList.remove(0)+65));\n                obj.print(\" \");\n                obj.print((char)(arrList.remove(0)+65));\n                obj.print((char)(arrList.remove(0)+65));\n            }\n            else if(arrList.size() == 3){\n                obj.print((char)(arrList.remove(0)+65));\n                obj.print(\" \");\n                obj.print((char)(arrList.remove(0)+65));\n                obj.print((char)(arrList.remove(0)+65));\n            }else if(arrList.size() == 2){\n                obj.print((char)(arrList.remove(0)+65));\n                obj.print((char)(arrList.remove(0)+65));\n            }\n            obj.println();\n        }\n        obj.close();\n        }\n}"}
{"idx":"1438","func":"class pro1 {\n    public static void main(String[] args) {\n        Scanner in; \n        PrintStream out;\n        String readString;\n        \n        try{\n                   in = new Scanner(System.in);\n\n                out = new PrintStream(System.out);\n\n                   int T = in.nextInt();\n                   \n                   String ABCD = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nfor( int t=0; t<T ; t++ ){\n        int N = in.nextInt();\n        int[] Pi = new int[N];\n        int sum = 0;\n        for( int n=0; n<N; n++){\n            Pi[n] = in.nextInt();\n            sum += Pi[n];\n        }\n        \n        out.print(\"Case #\"+(t+1)+\":\");\n        while( sum > 0 ){\n            \/\/find maximum & second maximum\n            int max_ind = 0;\n            int sec_max_ind = 1;\n            if( Pi[0] > Pi[1] ){\n                max_ind = 1;\n                sec_max_ind = 0;\n            }\n            for( int i=0; i<N; i++){\n                if( Pi[max_ind] < Pi[i] ){\n                    sec_max_ind = max_ind;\n                    max_ind = i;\n                }\n                else if( Pi[sec_max_ind] < Pi[i] ){\n                    sec_max_ind = i;\n                }\n            }\n            \n            \/\/out.println(Pi[max_ind]+\" \"+Pi[sec_max_ind]);\n            \n            \/\/AA? AB? A?\n            if( Pi[max_ind] == Pi[sec_max_ind] && sum!=3){\n                Pi[max_ind]--;\n                Pi[sec_max_ind]--;\n                sum = sum -2 ;\n                out.print(\" \"+ABCD.charAt(max_ind)+ABCD.charAt(sec_max_ind));\n            }\n            else if( Pi[max_ind] == 1 ){\n                Pi[max_ind]--;\n                sum = sum-1;\n                out.print(\" \"+ABCD.charAt(max_ind));\n            }\n            else if( 2*(Pi[max_ind]-2) <= sum ){\n                Pi[max_ind]=Pi[max_ind]-2;\n                sum = sum-2;\n                out.print(\" \"+ABCD.charAt(max_ind)+ABCD.charAt(max_ind));\n            }\n            else{\n                Pi[max_ind]--;\n                sum = sum-1;\n                out.print(\" \"+ABCD.charAt(max_ind));\n            }\n\n            \/\/out.println(\"rate \"+Pi[max_ind]*2+\" \"+sum);\n            \n            \/\/print AA? AB? A?\n            \/\/out.println(\" \"+str);\n        }\n        \n        out.println();\n}\n\n\n\n\n        }\n        catch(Exception e){\n            ;\n        }\n        \n    \n    }\n\n}"}
{"idx":"1439","func":"class Pancakes {\n    \n    static char giveMeTheOppositePlease(char c){\n        if (c == '-')\n            return '+';\n        return '-';\n    }\n    \n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(new File(\"C:\\\\Users\\\\Adrien\\\\eclipseWorkspace\\\\google\\\\input.in\"));\n        FileWriter fileWriter = new FileWriter(new File(\"C:\\\\Users\\\\Adrien\\\\eclipseWorkspace\\\\google\\\\output.out\"));\n        int t = Integer.parseInt(in.nextLine());  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n          char[] n = in.nextLine().toCharArray();\n          ArrayDeque<Character> pancakeDeque = new ArrayDeque<Character>(), tempDeque = new ArrayDeque<Character>();\n          for (int j = 0; j < n.length; j++) {\n            pancakeDeque.addLast(n[j]);\n          }\n          int count = 0;\n          while (pancakeDeque.contains('-')) {\n              count++;\n            char charCour = pancakeDeque.removeFirst();\n            tempDeque.add(Pancakes.giveMeTheOppositePlease(charCour));\n            while (!pancakeDeque.isEmpty() && pancakeDeque.getFirst() == charCour) {\n                tempDeque.addLast(Pancakes.giveMeTheOppositePlease(pancakeDeque.removeFirst()));\n            }\n            while(!tempDeque.isEmpty()){\n                pancakeDeque.addFirst(tempDeque.removeFirst());\n            }\n          }\n          fileWriter.write(\"Case #\" + i + \": \" + count +\"\\n\");\n        }\n        in.close();\n        fileWriter.close();\n    }\n}"}
{"idx":"1440","func":"class A {\n  private static char[] chars = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n      'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n      'V', 'W', 'X', 'Y', 'Z' };\n  public static void main(String[] args) throws Exception {\n    BufferedWriter bw = new BufferedWriter(new FileWriter(\n        \"A-large.out\"));\n    BufferedReader br = new BufferedReader(new FileReader(\n        \"A-large.in\"));\n    br.readLine();\n    String line;\n    int testCase = 1;\n    while ((line = br.readLine()) != null) {\n      if (line.length() == 0) {\n        break;\n      }\n      if ((line = br.readLine()) == null || line.length() == 0) {\n        break;\n      }\n      bw.write(\"Case #\" + (testCase++) + \":\");\n      String[] start = line.split(\" \");\n      int[] senators = new int[start.length];\n      int senatorsLeft = 0;\n      int partiesLeft = 0;\n      for (int i = 0; i < start.length; i++) {\n        senators[i] = Integer.parseInt(start[i]);\n        senatorsLeft += senators[i];\n        partiesLeft++;\n      }\n      while (senatorsLeft > 0) {\n        if (partiesLeft > 2) {\n          int maxVal = 0, maxInd = 0;\n          for (int i = 0; i < senators.length; i++) {\n            if (senators[i] > maxVal) {\n              maxInd = i;\n              maxVal = senators[i];\n            }\n          }\n          bw.write(\" \" + chars[maxInd]);\n          senators[maxInd]--;\n          if (senators[maxInd] == 0) {\n            partiesLeft--;\n          }\n        } else {\n          int firstInd = -1, secondInd = -1;\n          for (int i = 0; i < senators.length; i++) {\n            if (senators[i] > 0) {\n              if (firstInd == -1) {\n                firstInd = i;\n              } else {\n                secondInd = i;\n                break;\n              }\n            }\n          }\n          if (senatorsLeft % 2 > 0) {\n            if (senators[firstInd] == senators[secondInd]) {\n              for (int j = senators[firstInd]; j > 0; j--) {\n                bw.write(\" \" + chars[firstInd]\n                    + chars[secondInd]);\n              }\n            } else if (senators[firstInd] > senators[secondInd]) {\n              bw.write(\" \");\n              for (int j = senators[firstInd] - senators[secondInd];\n                  j > 0; j--) {\n                bw.write(chars[firstInd]);\n              }\n            } else {\n              bw.write(\" \");\n              for (int j = senators[firstInd] - senators[secondInd];\n                  j > 0; j--) {\n                bw.write(chars[secondInd]);\n              }\n            }\n          } else {\n            for (int j = senators[firstInd]; j > 0; j--) {\n              bw.write(\" \" + chars[firstInd] + chars[secondInd]);\n            }\n          }\n          senatorsLeft = 0;\n          partiesLeft = 0;\n        }\n      }\n      bw.write(\"\\n\");\n    }\n    br.close();\n    bw.close();\n  }\n}"}
{"idx":"1441","func":"class A implements Comparator<A>, Comparable<A>{\n\n    String name;\n    int value;\n    public A(char se,int value){\n        this.name=\"\"+se;\n        this.value=value;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n\n        for (int i = 1; i <= t; ++i) {\n            int n = in.nextInt();\n            System.out.print(\"Case #\" + i + \":\");\n            char se='A';\n            ArrayList<A> sensor=new ArrayList<A>();\n            int total=0;\n            for(int j=0;j<n;j++){\n                int s=in.nextInt();\n\n                A node=new A(se,s);\n                se++;\n                total+=s;\n                sensor.add(node);\n            }\n\n            Collections.sort(sensor);\n            while(sensor.get(0).value>0){\n\n                if((double)sensor.get(1).value\/(double)(total-1)<=0.5){\n                    sensor.get(0).value--;\n                    total--;\n                    System.out.print(\" \"+sensor.get(0).name);\n                }\n                else {\n                    sensor.get(0).value--;\n                    sensor.get(1).value--;\n                    total-=2;\n                    System.out.print(\" \"+sensor.get(0).name+sensor.get(1).name);\n                }\n                \/\/System.out.print(\" total: \" +total);\n                Collections.sort(sensor);\n            }\n            System.out.println(\"\");\n\n        }\n\n    }\n}"}
{"idx":"1442","func":"class A\n{\n    public static void main(String[] args)\n    {\n        int ind,tmp,n,child;\n        \n        Scanner in=new Scanner(System.in);\n        int numRuns=in.nextInt();\n        for (int run=1; run<=numRuns; run++)\n        {\n            n=in.nextInt();\n            int[] count = new int[n];\n            int[] heap = new int[n];\n            int total=0;\n            for (int i=0; i<n; i++)\n            {\n                count[i]=in.nextInt();\n                total+=count[i];\n                heap[i]=i;\n                ind=i;\n                while (count[heap[ind]]>count[heap[(ind-1)\/2]])\n                {\n                    heap[ind]=heap[(ind-1)\/2];\n                    ind=(ind-1)\/2;\n                    heap[ind]=i;\n                }\n            }\n            \n            String solution=\"\";\n            for (int i=0; i<total; i++)\n            {\n                tmp=heap[0];\n                solution+=(char)('A'+heap[0]);\n                count[heap[0]]--;\n                ind=0;\n                while (true)\n                {\n                    child=ind*2+1;\n                    if (child+1<n && count[heap[child]]<count[heap[child+1]])\n                        child++;\n                    if (child<n && count[heap[child]]>count[heap[ind]])\n                    {\n                        heap[ind]=heap[child];\n                        heap[child]=tmp;\n                        ind=child;\n                    }\n                    else\n                        break;\n                }\n                if (2*count[heap[0]]<=(total-1-i))\n                    solution+=\" \";\n            }\n            System.out.println(\"Case #\"+run+\": \"+solution.trim());\n        }\n    }\n}"}
{"idx":"1443","func":"class Main {\n    private static final String inputPath = \"\/home\/abduqodir\/Programming\/ideaProjects\/Other\/functions.in\";\n    private static final String outputPath = \"\/home\/abduqodir\/Programming\/ideaProjects\/Other\/functions.out\";\n    static int Len;\n    public static void main (String[] args) throws IOException {\n        Scanner scanner = new Scanner(new FileInputStream(inputPath));\n        PrintWriter printer = new PrintWriter(new FileOutputStream(outputPath));\n        int T = scanner.nextInt();\n        for (int i = 0; i < T; i++) {\n            printer.format(\"Case #%d: \", i + 1);\n            int n = scanner.nextInt();\n            int p[] = new int[n];\n            for (int j = 0; j < n; j++) {\n                p[j] = scanner.nextInt();\n            }\n            if (n == 2) {\n                for (int j = 0; j < p[0]; j++) {\n                    printer.print(\"AB \");\n                }\n                printer.println();\n                printer.flush();\n                continue;\n            }\n            for (int k = 1000; k > 1; k--) {\n                for (int j = 0; j < n; j++) {\n                    if (p[j] == k) {\n                        printer.print((char) ('A' + j));\n                        printer.print(' ');\n                        p[j]--;\n                    }\n                }\n            }\n            for (int j = 2; j < n; j++) {\n                printer.print((char) ('A' + j));\n                printer.print(' ');\n            }\n            printer.print(\"AB \");\n            printer.println();\n            printer.flush();\n        }\n    }\n}"}
{"idx":"1444","func":"class A implements Runnable {\n\n    @Override\n    public void run() {\n        Scanner in = new Scanner(System.in);\n        for (int casei : ZeroTo.get(in.nextInt())) {\n            Heap<Pair<Integer, Integer>> heap = BinaryHeapFactory.getInstance().create(SeriesComparator.create(new Comparator<Pair<Integer, Integer>>() {\n                @Override\n                public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                    return -o1.v2.compareTo(o2.v2);\n                }\n            }, new Comparator<Pair<Integer, Integer>>() {\n                @Override\n                public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                    return o1.v1.compareTo(o2.v1);\n                }\n            }));\n\n            int n = in.nextInt();\n            int sum = 0;\n            for (int i : ZeroTo.get(n)) {\n                int p = in.nextInt();\n                heap.insert(Pair.create(i, p));\n                sum += p;\n            }\n\n            System.out.print(\"Case #\" + (casei + 1) + \":\");\n            int remain = sum;\n            while (remain > 0) {\n                Pair<Integer, Integer> pair1 = heap.extractMinimum();\n                heap.insert(Pair.create(pair1.v1, pair1.v2 - 1));\n                remain--;\n\n                String r = (char) (pair1.v1 + 'A') + \"\";\n                if (heap.getMinimum().v2 > remain \/ 2) {\n                    Pair<Integer, Integer> pair2 = heap.extractMinimum();\n                    heap.insert(Pair.create(pair2.v1, pair2.v2 - 1));\n                    remain--;\n                    r += (char) (pair2.v1 + 'A');\n                }\n                System.out.print(\" \" + r);\n            }\n            System.out.println();\n        }\n\n    }\n\n    public static void main(String[] args) throws Exception {\n        System.setIn(new BufferedInputStream(new FileInputStream(\"\/Users\/imyoyo\/Desktop\/A-large.in\")));\n        System.setOut(new PrintStream(new OutputStream() {\n            @Override\n            public void write(int b) throws IOException {\n                System.out.write(b);\n                new PrintStream(\"\/Users\/imyoyo\/kb\/mavens\/solutions\/src\/main\/java\/output.txt\").write(b);\n            }\n        }));\n        new A().run();\n    }\n\n}"}
{"idx":"1445","func":"class CA {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int testCases = in.nextInt();\n\n        for (int i = 1; i <= testCases; i++) {\n            int n = in.nextInt();\n            String[] senators = new String[n];\n            int currentParty = 65;\n            int sens = 0; \n            String plan = \"\";\n\n            for (int j = 0; j < n; j++) {\n                int sen = in.nextInt();\n                String toReturn = \"\";\n                for (int i1 = 0; i1 < sen; i1++) {\n                    toReturn += (char) currentParty;\n                }\n                senators[j] = toReturn;\n                currentParty++;\n                sens += sen;\n            }\n            Arrays.sort(senators, new Comparator<String>(){\n                        @Override\n                        public int compare(String s1, String s2) {\n                            return s2.length() - s1.length();\n                        }\n            });\n\n            senators = senators;\n\n            if (sens % 2 != 0) {\n                plan += senators[0].charAt(0) + \" \";\n                StringBuilder sb = new StringBuilder(senators[0]);\n                sb.deleteCharAt(0);\n                senators[0] = sb.toString();\n                Arrays.sort(senators, new Comparator<String>(){\n                            @Override\n                            public int compare(String s1, String s2) {\n                                return s2.length() - s1.length();\n                            }\n                });\n                senators = senators;\n            }\n\n            while (!senators[0].equals(\"\")) {\n                plan += senators[0].charAt(0);\n                if (senators[1].length() != 0) {\n                    plan += senators[1].charAt(0);\n                    StringBuilder sb = new StringBuilder(senators[1]);\n                    sb.deleteCharAt(0);\n                    senators[1] = sb.toString();\n                }\n                StringBuilder sb = new StringBuilder(senators[0]);\n                sb.deleteCharAt(0);\n\n                senators[0] = sb.toString();\n                plan += \" \";\n                Arrays.sort(senators, new Comparator<String>(){\n                            @Override\n                            public int compare(String s1, String s2) {\n                                return s2.length() - s1.length();\n                            }\n                });\n                senators = senators;\n            }\n\n            System.out.println(\"Case #\" + i + \": \" + plan.trim());\n        }\n    }\n\n}"}
{"idx":"1446","func":"class A {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n    for (int i = 1; i <= t; ++i) {\n        int n=in.nextInt(),total=0;\n        \n        Vector<Integer> m=new Vector<Integer>();\n        for(int j=0;j<n;j++)\n        {\n            m.add(in.nextInt());\n            total+=m.elementAt(j);\n        }\n         System.out.print(\"Case #\" + i + \": \");\n         int mid ;\n        while(total!=0)\n        {  mid = (int)Collections.max(m);\n        int max;\n           int ind1=m.indexOf(mid),ind2=m.lastIndexOf(mid);\n           if(ind1 !=-1 && ind2!=-1)\n           {  if(ind1!=ind2){\n               \n               total-=2;\n               m.set(ind1, m.elementAt(ind1)-1);\n               m.set(ind2, m.elementAt(ind2)-1);\n               max = (int)Collections.max(m);\n               if(max>total\/2)\n               {\n                   m.set(ind2, m.elementAt(ind2)+1);\n                   total+=1;\n                   System.out.print((char)(ind1+'A')+\" \");\n               }\n               else\n               {\n                  System.out.print((char)(ind1+'A')+\"\"+(char)(ind2+'A')+\" \");\n               }\n           }\n           else\n           {  if(m.elementAt(ind1)>2)\n           {\n               System.out.print((char)(ind1+'A')+\"\"+(char)(ind2+'A')+\" \");\n               m.set(ind1, m.elementAt(ind1)-1);\n               m.set(ind2, m.elementAt(ind2)-1);\n               total-=2;\n           }\n           else\n           {\n               System.out.print((char)(ind1+'A')+\" \");\n               m.set(ind1, m.elementAt(ind1)-1);\n              \n               total-=1;\n           }\n           }   \n           }\n            \n        }\n         \n     System.out.println();\n    }\n  }\n  \n}"}
{"idx":"1447","func":"class A extends PrintWriter {\n\n    private static final String input = \"A-large.in\";\n    private static final String output = \"A-output.txt\";\n\n    String next() {\n        while (!tokenizer.hasMoreTokens())\n            tokenizer = new StringTokenizer(nextLine());\n        return tokenizer.nextToken();\n    }\n\n    String nextLine() {\n        try {\n            return reader.readLine();\n        } catch (IOException err) {\n            return null;\n        }\n    }\n\n    public A(OutputStream outputStream) {\n        super(outputStream);\n    }\n\n    static BufferedReader reader;\n    static StringTokenizer tokenizer = new StringTokenizer(\"\");\n    static Random rnd = new Random();\n    static boolean OJ;\n\n    public static void main(String[] args) throws IOException {\n        A solution = new A(new FileOutputStream(output));\n        reader = new BufferedReader(new FileReader(new File(input)));\n        int tests = Integer.parseInt(solution.next());\n        \n        for (int test = 1; test <= tests; test++) {\n            int n = Integer.parseInt(solution.next());\n            int[] array = new int[n];\n            for (int i1 = 0; i1 < n; i1++) {\n                array[i1] = Integer.parseInt(solution.next());\n            }\n            int[] a = array;\n        \n            int sum = 0;\n            for (int p : a) {\n                sum += p;\n            }\n            int[] a1 = a.clone();\n            List<int[]> plan1 = new ArrayList<int[]>();\n            \n            while (true) {\n                int x = 0;\n                for (int i = 1; i < n; i++) {\n                    if (a1[i] > a1[x]) {\n                        x = i;\n                    }\n                }\n            \n                if (a1[x] == 0) {\n                    break;\n                }\n            \n                int y = -1;\n                for (int i = 0; i < n; i++) {\n                    if (i == x) {\n                        continue;\n                    }\n                    if (y == -1 || a1[i] > a1[y]) {\n                        y = i;\n                    }\n                }\n            \n                int z = -1;\n                for (int i = 0; i < n; i++) {\n                    if (i == x || i == y) {\n                        continue;\n                    }\n                    if (z == -1 || a1[i] > a1[z]) {\n                        z = i;\n                    }\n                }\n                if (n == 2) {\n                    if (a1[x] > a1[y]) {\n                        plan1.add(new int[] { x });\n                        --a1[x];\n                    } else {\n                        plan1.add(new int[] { x, y });\n                        --a1[x];\n                        --a1[y];\n                    }\n                } else {\n                    if (a1[x] > a1[y] || a1[z] > 0) {\n                        plan1.add(new int[] { x });\n                        --a1[x];\n                    } else {\n                        plan1.add(new int[] { x, y });\n                        --a1[x];\n                        --a1[y];\n                    }\n                }\n            \n            }\n        \n            List<int[]> plan = plan1;\n            solution.printf(Locale.ENGLISH, \"Case #%d:\", test);\n        \n            try {\n                for (int[] step : plan) {\n                    solution.print(' ');\n                    for (int v : step) {\n                        solution.print((char) (v + 'A'));\n                        --sum;\n                        --a[v];\n                    }\n        \n                    for (int p : a) {\n                        if (p < 0 || 2 * p > sum) {\n                            throw new IllegalStateException(Arrays.toString(a));\n                        }\n                    }\n                }\n            } catch (RuntimeException error) {\n                System.err.println(error.getMessage());\n            }\n        \n            solution.println();\n        \n            \/\/ printf(Locale.ENGLISH, \"Case #%d: %s%n\", test);\n        }\n        solution.close();\n        reader.close();\n    }\n}"}
{"idx":"1448","func":"class A\n{\n    static int [] arr;\n    static int N; \n    public static void main (String [] args)\n    {\n        Scanner sc = new Scanner(System.in);\n\n        int nocase = sc.nextInt();\n        sc.nextLine();\n        for(int ind=1; ind<=nocase; ind++)\n        {\n            N = sc.nextInt();\n            arr = new int[N];\n            int total = 0;\n            for(int i=0; i<N; i++)\n                arr[i] = sc.nextInt();\n            for(int i=0; i<N; i++)\n                total+=arr[i];\n            StringBuffer sb = new StringBuffer();\n            while(total>2)\n            {\n                int max_ind = 0;\n                for(int i=1; i<N; i++)\n                    if(arr[i] > arr[max_ind])\n                        max_ind = i;\n                \n                arr[max_ind]--;\n                total--;\n                sb.append((char)('A'+max_ind));\n\n                if(total==2)\n                {\n                    sb.append(' ');\n                    break;\n                }\n                for(int i=0; i<N; i++)\n                {\n                    if(arr[i] >= (total+0.0)\/2.0)\n                    {\n                        arr[i]--;\n                        total--;\n                        sb.append((char)('A'+i));\n                        break;\n                    }\n                }\n                sb.append(' ');\n\n            }\n            \/\/last 2\n            for(int i=0; i<N; i++)\n                if(arr[i] >0 )\n                    sb.append((char)('A'+i));\n        \n            String soln = sb.toString();    \n            System.out.printf(\"Case #%d: %s\\n\", ind, soln);\n        }\n    }\n\n}"}
{"idx":"1449","func":"class HelloWorld {\n    private static String inputFileName = \"\/Users\/Combo\/Downloads\/A-large.in.txt\";\n    private static String outputFileName = \"\/Users\/Combo\/Downloads\/output1C1large.txt\";\n    private static Charset charset = Charset.forName(\"UTF-8\");\n\n    public static void main(String[] args) {\n        List<String> fileContent = null;\n        try {\n            fileContent = Files.readAllLines(Paths.get(inputFileName), charset);\n        } catch (IOException e1) {\n            \/\/ TODO Auto-generated catch block\n            e1.printStackTrace();\n        }\n        int noOfCase = Integer.parseInt(fileContent.get(0));\n\n        List<String> outputLines = new ArrayList<String>();\n        Path outputFiles = Paths.get(outputFileName);\n\n        int currentReadingLine = 0;\n        \n        for (int i = 0; i < noOfCase; i++) {\n            currentReadingLine++;\n            int noOfParties = Integer.parseInt(fileContent.get(currentReadingLine));\n            currentReadingLine++;\n            String partiesSize[] = ((String) fileContent.get(currentReadingLine)).split(\" \");\n            \n            int totalNoOfSenator = 0;\n            \n            int partiesSizeInt[] = new int[noOfParties];\n            for (int j=0;j<noOfParties;j++) {\n                int partySize = Integer.parseInt(partiesSize[j]);\n                partiesSizeInt[j] = partySize;\n                totalNoOfSenator += partySize;\n            }\n            \n            int counter=0;\n            StringBuffer evacuationFlow = new StringBuffer(); \n\n            while (totalNoOfSenator >0) {\n                int maxParty = -1;\n                int maxPartyPerson =0;\n                for (int j=0;j<noOfParties;j++) {\n                    if (partiesSizeInt[j]> maxPartyPerson) {\n                        maxParty=j;\n                        maxPartyPerson = partiesSizeInt[j];\n                    }\n                }\n                if (maxParty!=-1) {\n                    char senator = (char) (maxParty+65);\n                    partiesSizeInt[maxParty]= partiesSizeInt[maxParty]-1;\n                    totalNoOfSenator--;\n                    boolean overRatio = false;\n                    if (totalNoOfSenator>=1) {\n                        for (int j=0;j<noOfParties;j++) {\n                            if ((partiesSizeInt[j]\/totalNoOfSenator)>0.5) {\n                                overRatio = true;\n                            } \n                        }\n                    } \n                    \n                    if (overRatio) {\n                        if (counter%2!=0) {\n                            evacuationFlow.append(' ');\n                        }\n                        evacuationFlow.append(senator);\n                        counter=0;\n                    } else {\n                        evacuationFlow.append(senator);\n                    }\n                    \n                    counter++;\n                    if (counter%2==0) {\n                        evacuationFlow.append(' ');\n                    }\n                    \n                }\n            }\n             \n            String answer = \"Case #\"+(i+1)+\": \"+ evacuationFlow.toString().trim();\n            System.out.println(answer);\n            outputLines.add(answer);\n        }\n        try {\n            Files.write(outputFiles, outputLines, charset);\n        } catch (IOException e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n\n    \n\n}"}
{"idx":"1450","func":"class MainA {\n\n    public static void main(String[] args) {\n\n        \/\/String filename = \"src\/y20161C\/A-test\";\n        \/\/String filename = \"src\/y20161C\/A-small-attempt1\";\n        String filename = \"src\/y20161C\/A-large\";\n\n        FileInputStream file;\n        int T;\n\n        try {\n            file = new FileInputStream(filename+\".in\");\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(file));\n\n            T = Integer.parseInt(in.readLine());\n\n            BufferedWriter bw = new BufferedWriter(new FileWriter(filename+\".out\"));\n\n            for (int i=0; i<T; i++) {\n                int ind = i+1;\n                \/\/ parser\n                int N = Integer.parseInt(in.readLine());\n                String data[] = in.readLine().split(\" \");\n                int P[] = new int[N];\n                for (int j=0; j<N; j++) {\n                    P[j] = Integer.parseInt(data[j]);\n                }\n                String res1 = \"\";\n                \n                \/\/looking for the 2 highest\n                int max1 = 0;\n                int max2 = 0;\n                int ind1 = -1;\n                int ind2 = -1;\n                for (int i1=0; i1<N; i1++) {\n                    if (P[i1] > max1) {\n                        if (max1 > max2) {\n                            max2 = P[i1];\n                            ind2 = i1;\n                        } else {\n                            max1 = P[i1];\n                            ind1 = i1;\n                        }\n                    } else if (P[i1] > max2) {\n                        max2 = P[i1];\n                        ind2 = i1;\n                    }\n                }\n                \n                int tab[] = P.clone();\n                \/\/egalize the 2 highest\n                while (tab[ind1] != tab[ind2]) {\n                    if (tab[ind1] > tab[ind2]) {\n                        res1 += \" \"+(char)('A'+ind1);\n                        tab[ind1]--;\n                    } else {\n                        res1 += \" \"+(char)('A'+ind2);\n                        tab[ind2]--;\n                    }                \n                }\n                \n                \/\/remove others\n                for (int i2=0; i2<N; i2++) {\n                    if (i2 == ind1 || i2 == ind2)\n                        continue;\n                    while (tab[i2] > 1) {\n                        res1 += \" \"+(char)('A'+i2)+(char)('A'+i2);\n                        tab[i2] -= 2;\n                    }\n                    if (tab[i2] == 1) {\n                        res1 += \" \"+(char)('A'+i2);\n                    }\n                }\n                \n                while (tab[ind1] > 0) {\n                    res1 += \" \"+(char)('A'+ind1)+(char)('A'+ind2);\n                    tab[ind1]--;\n                    tab[ind2]--;\n                }\n                \n                res1 = res1.substring(1);\n                \n                \/\/ calcul\n                String res = res1;\n                \n                System.out.println(\"Result \"+i+\": \"+res);\n                bw.write(\"Case #\"+ind+\": \"+res+\"\\n\");\n            }\n            bw.close();\n\n            in.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    \n}"}
{"idx":"1451","func":"class SenateEvacuation {\n\n    static PrintWriter writer;\n    \n    public static void main(String[] args) throws IOException {\n        \n        writer = new PrintWriter(\"out.txt\");\n        BufferedReader br = null;\n        try {\n            br = new BufferedReader(new FileReader(\"A-large (1).in\"));\n            String line = br.readLine();\n            int Num = Integer.parseInt(line);\n            for(int i = 0; i < Num; ++i) {\n                line = br.readLine();\n                int party = Integer.parseInt(line);\n                line = br.readLine();\n                String bufs[] = line.split(\" \");\n                int[] sena = new int[30];\n                for(int j = 0; j < party; ++j){\n                    sena[j] = Integer.parseInt(bufs[j]);\n                }\n                \n                String output = \"\";\n                \n                while(true) {\n                    int min = -1;\n                    int index1 = -1;\n                    int count = 0;\n                    int another1 = -1;\n                    for(int i1 = 0; i1 < party; ++i1) {\n                        if(sena[i1] > 0 &&(min == -1 || sena[i1] > min)) {\n                            min = sena[i1];\n                            index1 = i1;\n                            count = 1;\n                            another1 = -1;\n                        }\n                        else if(sena[i1] > 0 &&(min == -1 || sena[i1] == min)){\n                            count ++;\n                            another1 = i1;\n                        }\n                    }\n                    \n                    if(count == 2 && another1 > -1) {\n                        index1 += another1 * 100;\n                    }\n                    int index =  index1;\n                    if(index == -1) {\n                        break;\n                    }\n                    if(index < 30) { \n                        sena[index] --;\n                        char a = (char) (index + 'A');\n                        output += (a + \" \");\n                    }\n                    else {\n                        int another = index \/ 100;\n                        index = index % 100;\n\n                        sena[index] --;\n                        char a = (char) (index + 'A');\n                        char s = (char) (another + 'A');\n                        output += a;\n                        output += (s+ \" \");\n                        sena[another] --;\n                    }\n                }\n                writer.println(\"Case #\" + (i + 1) + \": \" + output);\n            }\n        } finally {\n            br.close();\n            writer.close();\n        }\n    }\n    \n}"}
{"idx":"1452","func":"class ProblemA {\n    public static void main(String[] args) throws FileNotFoundException\n    {\n        FileReader file = new FileReader(\"A-small-attempt0.in\");\n        Scanner in = new Scanner(file);\n        PrintWriter out = new PrintWriter(\"output.txt\");\n\n        int t = in.nextInt();\n        char[] letters = \"ABCDEFGHIJKLMNOPQESTUVWXYZ\".toCharArray();\n        for(int i = 1; i<=t; i++)\n        {\n            int n = in.nextInt();\n            int[] ar = new int[n];\n            int[] c = new int[n];\n            for(int j = 0; j<n; j++)\n            {\n                ar[j] = in.nextInt();\n                c[j] = ar[j];\n            }\n            String output =\"\";\n            Arrays.sort(ar);\n            while(ar[n-1] > 0)\n            {\n                if(n==2 || ar[n-3]==0)\n                {\n                    for(int k = 0; k<c.length; k++)\n                    {\n                        if(c[k] == ar[n-1])\n                        {\n                            output += letters[k];\n                            c[k]--;\n                        }\n                    }\n                    ar[n-1]--;\n                    ar[n-2]--;\n                    output+=\" \";\n                }\n                else\n                {\n                    for(int k = 0; k<c.length; k++)\n                    {\n                        if(c[k] == ar[n-1])\n                        {\n                            output += letters[k]+\" \";\n                            c[k]--;\n                            break;\n                        }\n                    }\n                    ar[n-1]--;\n\n                }\n                Arrays.sort(ar);\n            }\n            out.println(\"Case #\" + i + \": \" + output);\n\n        }\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"1453","func":"class finalc {\n\n    public static void main (String [] args){\n    \n        \n        Scanner scan=new Scanner(System.in);\n        String huruf[]={\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\n        \n        int a=scan.nextInt();\n        \n        for(int i=0;i<a;i++){\n            int b=scan.nextInt();\n            \n            int sum=0;\n            int max=0;\n            int maxindex=0;\n            \n            \n                int x[]=new int [b];\n                for(int j=0;j<b;j++){\n                    x[j]=scan.nextInt();\n                    sum=sum+x[j];\n                    \n                    if(max<x[j]){\n                        max=x[j];\n                        maxindex=j;\n                    }\n                }\n                \n            System.out.print(\"Case #\"+(i+1)+\": \");\n            int maxdua=0;\n            int maxdin=0;\n            for(int j=0;j<b;j++){\n                if((maxdua<x[j])&&(j!=maxindex)){\n                    maxdua=x[j];\n                    maxdin=j;\n                }\n                    \n            }\n            int hahaha=max-maxdua;\n            for(int j=0;j<hahaha;j++){\n                \n                System.out.print(huruf[maxindex]+\" \");\n                max--;\n            }\n            \n            for(int j=0;j<b;j++){\n                if((j!=maxdin)&&(j!=maxindex)){\n                    for(int k=0;k<x[j];k++){\n                        System.out.print(huruf[j]+\" \");\n                    }\n                }\n            }\n                \n            for(int j=0;j<max;j++){\n                System.out.print(huruf[maxindex]+huruf[maxdin]+\" \");\n            }\n            System.out.println();\n        }\n        \n        \n    }\n}"}
{"idx":"1454","func":"class Prob1_A {\n\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        BufferedReader br = new BufferedReader(new FileReader(\"C:\/Users\/Harish\/Downloads\/A-large.in\"));\n        String line = br.readLine();\n        int t = Integer.parseInt(line);\n        int count = 0;\n        while (t-- > 0) {\n            line = br.readLine();\n            int n = Integer.parseInt(line);\n            int[] arr = new int[n];\n            line = br.readLine();\n            int orgtotal = 0;\n            int max = 0;\n            int max2 = 0;\n            String[] str = line.split(\" \");\n            int i = 0;\n            int a = -1;\n            int b = -1;\n            for (String st : str) {\n                int val = Integer.parseInt(st);\n                orgtotal += val;\n                arr[i] = val;\n                i++;\n            }\n            boolean flag = true;\n            System.out.print(\"Case #\"+(++count)+\": \");\n            int total;\n            while (flag) {\n                flag = false;\n                max = 0;\n                max2 =0;\n                a=-1;\n                b=-1;\n                total = 0;\n                for (int j = 0; j < n; j++) {\n                    if(arr[j] > max){\n                        if(max !=0){\n                            b=a;\n                            max2 = max;\n                        }\n                        a=j;\n                        max = arr[j];\n                    }else if(arr[j]>max2 && arr[j]<=max){\n                        b=j;\n                        max2 = arr[j];\n                    }\n                    total+=arr[j];\n                }\n                if(total== 3){\n                    System.out.print((char)(65+a)+\" \");\n                    arr[a]--;\n                    total--;\n                }else{\n                    System.out.print((char)(65+a)+\"\"+(char)(65+b)+\" \");\n                    arr[a]--;\n                    arr[b]--;\n                    total-=2;\n                }\n                if(total != 0) flag = true;\n            }\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"1455","func":"class a \n{\n\n    public static void main(String[] args) throws FileNotFoundException \n    {\n        Scanner sc = new Scanner(new File(\"input.txt\"));\n        PrintWriter out = new PrintWriter(\"output.txt\");\n        \n        int n_case = sc.nextInt();\n        for(int i=1;i<=n_case;i++)\n        {\n            int n = sc.nextInt();\n            int sen[] = new int[n];\n            int tot  = 0;\n            for(int j=0;j<n;j++)\n            {\n                sen[j] = sc.nextInt();\n                tot+=sen[j];\n            }\n            int tot1 = tot;\n            String ris1 = new String();\n            \n            int max1 = -1;\n            int pos1 = -1;\n            int max2 = -1;\n            int pos2 = -1;\n            \n            while(tot1 > 3)\n            {\n                max1 = -1;\n                pos1 = -1;\n                max2 = -1;\n                pos2 = -1;\n                for(int i2=0;i2<n;i2++)\n                {\n                    if(sen[i2]>max1)\n                    {\n                        max2=max1;\n                        pos2=pos1;\n                        max1=sen[i2];\n                        pos1=i2;\n                    }\n                    else\n                    {\n                        if(sen[i2]>max2)\n                        {\n                            max2=sen[i2];\n                            pos2=i2;\n                        }\n                    }\n                }\n                \n                if(pos1!=-1)\n                {\n                    ris1+= Character.toChars(('A'+pos1))[0];\n                    sen[pos1]--;\n                    tot1--;\n                }\n                \n                if(pos2!=-1)\n                {\n                    ris1+=Character.toChars(('A'+pos2))[0];\n                    sen[pos2]--;\n                    tot1--;\n                }\n                \n                ris1+=\" \";\n            }\n            \n            String last = \"\";\n            for(int i1=0;i1<n;i1++)\n            {\n                if(sen[i1]!=0 && last.length()<2)\n                {\n                    last+=Character.toChars(('A'+i1))[0];\n                }\n                else\n                {    if(last.length()==2)\n                    {\n                        ris1+=Character.toChars(('A'+i1))[0]+\" \";\n                    }\n                }\n            }\n            String ris = ris1 + last;\n            out.println(\"Case #\"+i+\": \"+ris);\n        }\n        \n        sc.close();\n        out.close();\n    }\n\n}"}
{"idx":"1456","func":"class JamProblems {\n\n    public static void main(String[] args) throws IOException {\n\n        JamProblems r = new JamProblems();\n        Scanner sc = null;\n            PrintWriter pw = null;\n            try {\n                sc = new Scanner(new File(\"A-large.in\"));\n                pw = new PrintWriter(new File(\"output.out\"));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n                    \n            int tests = sc.nextInt();\n            for (int j = 1; j <= tests; j++) {       \n                pw.print(\"Case #\" + j + \": \");\n                int n = sc.nextInt();\n                int[] partEmp = new int[n];\n                Map<Integer, Integer> parties = new HashMap<Integer, Integer>();\n                String partNames = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n                int lastEmpl = 0;\n                for(int i = 0; i < n; i++) {\n                    partEmp[i] = sc.nextInt();\n                    parties.put(i, partEmp[i]);\n                    lastEmpl += partEmp[i];\n                }\n                \/\/pw.print(partNames.charAt(0));\n                \n                while(true) {\n                    int fMaxInd = 0, sMaxInd = 0, maxEm = 0;\n                    for(int z = 0; z < n; z++) {\n                        if(partEmp[z] > maxEm) {\n                            maxEm = partEmp[z];\n                            fMaxInd = z;\n                        }\n                    }\n                    if(lastEmpl == 3) {\n                        pw.print(partNames.charAt(fMaxInd) + \" \");\n                        partEmp[fMaxInd]--;\n                    } else {\n                        maxEm = 0;\n                        for(int z = 0; z < n; z++) {\n                            if(z != fMaxInd && partEmp[z] > maxEm) {\n                                maxEm = partEmp[z];\n                                sMaxInd = z;\n                            }\n                        }\n                        pw.print(partNames.charAt(fMaxInd) + \"\" + partNames.charAt(sMaxInd) + \" \");\n                        partEmp[fMaxInd]--;\n                        partEmp[sMaxInd]--;\n                    }    \n                    lastEmpl = 0;\n                    for(int i = 0; i < n; i++) {\n                        lastEmpl += partEmp[i];\n                    }\n                    if(lastEmpl == 0) break;\n                }\n                pw.println();\n          } \n        \n          pw.close();\n    }\n    \n}"}
{"idx":"1457","func":"class A {\n  \n  public static void main (String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int numTests = sc.nextInt();\n    for (int tc = 1; tc <= numTests; ++tc) {\n      int n = sc.nextInt();\n      int[] ascii = new int[256];\n      int total = 0;\n      int parties = n;\n      for (int i = 'A'; i < 'A' + n; ++i) {\n        ascii[i] = sc.nextInt();\n        total += ascii[i];\n      }\n      System.out.print(\"Case #\" + tc + \": \");\n      while (total > 0) {\n        if (parties == 2) {\n          for (int i = 'A'; i < 'A' + n; ++i) {\n            if (ascii[i] > 0) {\n              --ascii[i];\n              --total;\n              System.out.print((char) i);\n            }\n          }          \n        } else {\n          int maxValue = 0;\n          int maxIndex = -1;\n          for (int i = 'A'; i < 'A' + n; ++i) {\n            if (ascii[i] > maxValue) {\n              maxValue = ascii[i];\n              maxIndex = i;\n            }\n          }\n          --ascii[maxIndex];\n          --total;\n          if (ascii[maxIndex] == 0) {\n            --parties;\n          }\n          System.out.print((char) maxIndex);\n        }\n        System.out.print(' ');\n      }\n      System.out.println();\n    }\n  }\n}"}
{"idx":"1458","func":"class Q1 {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader bf = new BufferedReader(new FileReader(\"input.in\"));\n        String input = null;\n        String count = null;\n        FileWriter fw = new FileWriter(\"output.out\");  \n        count = bf.readLine();\n        for (int i = 0; i < Integer.parseInt(count); i++) {\n                ArrayList<Integer> party = new ArrayList<Integer>();\n                String a = bf.readLine();\n                String b = bf.readLine();\n                String []alls = b.split(\" \");\n                Integer totals = 0;\n                for (int i1 = 0; i1 < alls.length;i1++) {\n                    party.add(Integer.parseInt(alls[i1]));\n                    totals += Integer.parseInt(alls[i1]);\n                }\n                fw.write(\"Case #\" + (i + 1) + \": \");\n                while (totals > 0) {\n                    int maxd = 0;\n                    int mark = -1;\n                    Integer max2d = 0;\n                    int mark2 = -1;\n                    for (int i1 = 0; i1 < party.size();i1++) {\n                        if (party.get(i1) > maxd) {\n                            maxd = party.get(i1);\n                            mark = i1;\n                            continue;\n                        }\n                        if ((party.get(i1) <= maxd) && (party.get(i1) > max2d)) {\n                            max2d = party.get(i1);\n                            mark2 = i1;\n                            continue;\n                        }\n                    }\n                    totals--;\n                    party.set(mark, party.get(mark) - 1);\n                    char c = 65;\n                    c += mark;\n                    String outputs = \"\" + c;\n                    String d = max2d.toString();\n                    Double prob = Double.parseDouble(d);\n                    if (prob \/ totals > 0.5) {\n                        totals--;\n                        party.set(mark2, party.get(mark2) - 1);\n                        char c2 = 65;\n                        c2 += mark2;\n                        outputs = outputs + c2;\n                    }\n                    fw.write(outputs+\" \");\n                }\n                \n                    \n                fw.write(\"\\n\");\n        }\n        bf.close();\n        fw.close();\n    }\n}"}
{"idx":"1459","func":"class Main {\n\n    public static void main(String args[]) {\n\n        Locale.setDefault(Locale.US);\n\n        Scanner in;\n        try {\n            in = new Scanner(new File(\"input.txt\"));\n        } catch (Exception e) {\n            in = new Scanner(System.in);\n        }\n\n        PrintWriter out;\n        try {\n            out = new PrintWriter(\"output.txt\");\n        } catch (Exception e) {\n            out = new PrintWriter(System.out);\n        }\n\n        int t = in.nextInt();\n\n        for (int x = 1; x <= t; ++x) {\n\n            String res = \"Case #\" + x + \": \";\n\n            int n = in.nextInt();\n\n            int[] ns = new int[n];\n\n            int total = 0;\n\n            for (int i = 0; i < n; ++i) {\n                int p = in.nextInt();\n                total += p;\n                ns[i] = p;\n            }\n\n            \/\/System.out.print(Arrays.toString(ns));\n\n            boolean even = false;\n            while (!even) {\n                int max = ns[0];\n                int maxPos = 0;\n                int min = ns[0];\n                int minPos = 0;\n                for (int i = 1; i < n; ++i) {\n                    if (ns[i] > max) {\n                        max = ns[i];\n                        maxPos = i;\n                    }\n                    else if (ns[i] < min) {\n                        min = ns[i];\n                        minPos = i;\n                    }\n                }\n                if (max != min) {\n                    res += ((char) (65 + maxPos)) + \" \";\n                    --ns[maxPos];\n                    --total;\n                }\n                else {\n                    even = true;\n                }\n            }\n\n            int totalColumns = 0;\n\n            for (int i = 0; i < n; ++i) {\n                if (ns[i] > 0) {\n                    ++totalColumns;\n                }\n            }\n            \n            System.out.println(totalColumns);\n\n            for (int i = 0; i < n; ++i) {\n                if (totalColumns > 2) {\n                    while (ns[i] > 0) {\n                        res += ((char) (65 + i)) + \" \";\n                        --ns[i];\n                        --total;\n                    }\n                    --totalColumns;\n                }\n                else break;\n            }\n\n            int a = -1;\n            int b = -1;\n            int times = 0;\n\n            for (int i = 0; i < n; ++i) {\n                if (ns[i] > 0) {\n                    if (a == -1) {\n                        a = i;\n                        times = ns[i];\n                    }\n                    else {\n                        b = i;\n                    }\n                }\n            }\n\n            for (int i = 0; i < times; ++i) {\n                res += ((char) (65 + a)) + \"\" + ((char) (65 + b)) + \" \";\n            }\n\n            res += \"\\n\";\n\n            System.out.print(res);\n            out.print(res);\n        }\n        out.close();\n    }\n}"}
{"idx":"1460","func":"class A {\n    \n    public static void main(String[] args) throws Exception {\n        \n        Scanner in = new Scanner(new File(\"C:\\\\Users\\\\jainh\\\\Desktop\\\\A-small-attempt0.in\"));\n        FileWriter fw = new FileWriter(\"C:\\\\Users\\\\jainh\\\\Desktop\\\\A-small.out\");\n        \n        int T = in.nextInt();\n        in.nextLine();\n        for (int tc = 1; tc <= T; tc++) {\n            int N = in.nextInt();\n            int[] arr = new int[65 + N];\n            int count = 0;\n            for(int i = 65; i < 65 + N; i++) {\n                arr[i] = in.nextInt();\n                count += arr[i];\n            }\n            \n            String returnString = \"\";\n            while(count > 0) {\n                int[] largestTwo1 = new int[4];\n                \n                for(int i = 65; i < arr.length; i++) {\n                    if (arr[i] > largestTwo1[0]) {\n                        largestTwo1[0] = arr[i];\n                        largestTwo1[1] = i;\n                        largestTwo1[2] = 0;\n                    } else if (arr[i] == largestTwo1[0]) {\n                        largestTwo1[2] = arr[i];\n                        largestTwo1[3] = i;\n                    }\n                }\n                int[] largestTwo = largestTwo1;\n                if(largestTwo[0] == largestTwo[2]) {\n                    if (count == 3) {\n                        returnString += (char)largestTwo[1];\n                        returnString += \" \";\n                        count -= 1;\n                        arr[largestTwo[1]] -= 1;\n                    } else {\n                        returnString += (char)largestTwo[1];\n                        returnString += (char)largestTwo[3];\n                        returnString += \" \";\n                        count -= 2;\n                        arr[largestTwo[1]] -= 1;\n                        arr[largestTwo[3]] -= 1;\n                    }\n                    \n                } else {\n                    returnString += (char)largestTwo[1];\n                    returnString += \" \";\n                    count -= 1;\n                    arr[largestTwo[1]] -= 1;\n                }\n            }\n            \n            fw.write (\"Case #\" + tc + \": \" + returnString + \"\\n\");\n        }\n        in.close();\n        fw.flush();\n        fw.close();\n    }\n}"}
{"idx":"1461","func":"class A {\n\n    public static void main(String[] args) {\n        Scanner scn  = new Scanner(System.in);\n        int t = scn.nextInt();\n        \n        \n        for(int i=1;i<=t;i++){\n            int n = scn.nextInt();\n            ArrayList<Integer> nums = new ArrayList<Integer>();\n            double sum = 0;\n            for(int j=0;j<n;j++){\n                nums.add(scn.nextInt());\n                sum += nums.get(j);\n            }\n            String plan = \"\";\n            while (sum>0) {\n                sum = 0;\n                int maxVal = -1;\n                int maxLoc = -1;\n                for(int j=0;j<n;j++){\n                    if(nums.get(j) > maxVal){\n                        maxVal = nums.get(j);\n                        maxLoc = j;\n                    }\n                    sum+=nums.get(j);\n                }\n                if(maxVal>0){\n                    nums.set(maxLoc, maxVal-1);\n                \n                    char c = (char)(maxLoc + 65);\n                    plan += c;\n                }\n            }\n            String finalPlan = \"\";\n            int cnt = 0;\n            for(int j=plan.length()-1;j>=0;j--){\n                if(cnt>0 && cnt%2==0){\n                    finalPlan = \" \"+finalPlan;\n                }\n                finalPlan = plan.charAt(j)+finalPlan;\n                cnt++;\n                \n            }\n            \n            System.out.println(\"Case #\"+i+\": \"+finalPlan);\n        }\n        \n        scn.close();\n\n    }\n\n}"}
{"idx":"1462","func":"class A {\n\n    public static void main(String... args) {\n        Scanner scanner = new Scanner(System.in);\n        int T = scanner.nextInt();\n        for (int t = 1; t <= T; t++) {\n            A r = new A();\n            r.N = scanner.nextInt();\n            r.P = new int[r.N];\n            for (int i = 0; i < r.N; i++) r.P[i] = scanner.nextInt();\n            \n            int maxP = 0;\n            int maxI = -1;\n            \n            int secondMaxP = 0;\n            int secondMaxI = -1;\n            \n            for (int i = 0; i < r.N; i++) {\n                if (r.P[i] > maxP) {\n                    maxP = r.P[i];\n                    maxI = i;\n                }\n            }\n            \n            for (int i = 0; i < r.N; i++) {\n                if (i == maxI) continue;\n                if (r.P[i] > secondMaxP) {\n                    secondMaxP = r.P[i];\n                    secondMaxI = i;\n                }\n            }\n            \n            String plan = \"\";\n            while(maxP > secondMaxP) {\n                plan += (char) ('A' + maxI);\n                plan += \" \";\n                maxP--;\n            }\n            \n            for (int i = 0; i < r.N; i++) {\n                if (i == maxI || i == secondMaxI) continue;\n            \n                while(r.P[i] > 0) {\n                    plan += (char) ('A' + i);\n                    plan += \" \";\n                    r.P[i]--;\n                }\n            }\n            \n            while(maxP > 0) {\n                plan += (char) ('A' + maxI);\n                plan += (char) ('A' + secondMaxI);\n                plan += \" \";\n                maxP--;\n            }\n            String solution = plan;\n            System.out.println(\"Case #\" + t + \": \" + solution);\n        }\n    }\n\n    int N;\n    int[] P;\n\n}"}
{"idx":"1463","func":"class C {\n\n    public static void main ( String [] args ) throws FileNotFoundException {\n        System.setOut( new PrintStream( \"C.out\" ));\n        Scanner s = new Scanner( System.in ) ;\n        int tests = s.nextInt();\n        for ( int  test=1; test<=tests; test++ ){\n            String answer = \"\";\n            int n = s.nextInt();\n            int [] data = new int[n];\n            int sum=0;\n            for ( int i=0; i<n; i++ ){\n                data[i] = s.nextInt();\n                sum += data[i];\n            }\n\n            int [] current = new int[n];\n\n            for ( int i=0; i<sum; i++ ){\n                int pos = -1;\n                int min = Integer.MAX_VALUE;\n                for ( int i1=0; i1<data.length; i1++ ){\n                    if ( current[i1]<min && current[i1] < data[i1] ){\n                        min = current[i1];\n                        pos = i1;\n                    }\n                }\n                int c = pos;\n                current[c]++;\n                if ( i>0 && i%2==0 ){\n                    answer = \" \" + answer;\n                }\n                answer = (char)('A'+c ) + answer;\n            }\n            System.err.println(\"Case #\"+test + \": \" + answer );\n            System.out.println(\"Case #\"+test + \": \" + answer );\n        }\n    }\n}"}
{"idx":"1464","func":"class Senate {\n    \n    public static void main(String[] args) {\n        \n        if(args.length == 0) {\n            \n            System.out.println(\"No arguments provided\");\n            return;\n            \n        }\n        \n        try {\n            \n            File file = new File(args[0]);\n            Scanner input = new Scanner(file);\n            FileWriter fileOut = new FileWriter(\"output.txt\");\n            BufferedWriter writer = new BufferedWriter(fileOut);\n                        \n            int numTests = input.nextInt();\n            \n            int i;\n            \n            for(i = 0; i < numTests; i++) {\n                \n                System.out.println(\"\\nTest #\" + i);\n                \n                int numParties = input.nextInt();\n                \n                \/\/We will add the members to the room and then reverse the order.\n                \n                \/\/An array to hold the remaining party members to be added.\n                int[] partyMembersOutside = new int[numParties];\n                int totalMembers = 0;\n                \n                int j;\n                \n                for(j=0; j<numParties; j++) {\n                    \n                    partyMembersOutside[j] = input.nextInt();\n                    totalMembers += partyMembersOutside[j];\n                    \n                }\n                \n                \/\/An array to hold how many members are in the room already\n                int membersInside = 0;\n                \n                \/\/Also create an arraylist of strings to store the members going in\n                \/\/This will need to be reversed at the end\n                ArrayList<String> entries = new ArrayList<String>();\n                \n                \/\/Add from the start of the alphabet ensuring that people always go in in twos s.t. the two being added are different\n                int k;\n                for(k = 0; k < numParties; k++) {\n                    System.out.println(k);\n                    while(partyMembersOutside[k] > 0) {\n                        \/\/Add members from party k with any other members\n                        int m;\n                        boolean added = false;\n                        \n                        for(m = k+1; m < numParties && !added; m++) {\n                            \n                            if(partyMembersOutside[m] > 0) {\n                                \/\/Add k and m\n                                partyMembersOutside[m]--;\n                                partyMembersOutside[k]--;\n                                \n                                char charM = (char) (65 + m);\n                                char charK = (char) (65 + k);\n                                String entry = \" \" + charM + charK;\n                                \n                                System.out.println(entry);\n                                \n                                entries.add(entry);\n                                \n                                added = true;\n                            }\n                            \n                        }\n                        \n                        while(!added && partyMembersOutside[k] > 0) {\n                            char charK = (char) (65 + k);\n                            partyMembersOutside[k]--;\n                            \n                            String entry = \" \" + charK;\n                            entries.add(entry);\n                            \n                        }\n                        \n                    }\n                    \n                }\n                \n                Collections.reverse(entries);\n                writer.write(\"Case #\" + (i+1) + \":\");\n                for(String string: entries) {\n                    writer.write(string);\n                }\n                writer.write(\"\\n\");\n                \n                \n            }\n            \n            writer.close();\n            fileOut.close();\n            input.close();\n            \n        } catch(FileNotFoundException e) {\n            \n            System.out.println(\"Error reading input file\");\n            \n        } catch(IOException e) {\n            \n            System.out.println(\"Error writing output\");\n            \n        }\n        \n    }\n\n}"}
{"idx":"1465","func":"static void main(String[] args) throws IOException\n    {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(in.readLine());\n        for(int i=0;i<T;i++){\n            System.out.print(\"Case #\"+(i+1)+\": \");\n            int part=Integer.parseInt(in.readLine());\n            String[] mem=in.readLine().split(\" \");\n            int totalmembers=0;\n            for(int j=0;j<part;j++){\n                totalmembers+=Integer.parseInt(mem[j]);\n                    }\n            while(totalmembers!=0){\n                int max=0;\n                int num1=0;\n                String ans=\"\";\n                for(int j=0;j<part;j++){\n                        if(max<Integer.parseInt(mem[j])){\n                            max=Integer.parseInt(mem[j]);\n                            num1=j;\n                            }\n                    }\n                ans=\"\"+(char)(65+num1);\n                mem[num1]=Integer.toString(Integer.parseInt(mem[num1])-1);\n                totalmembers-=1;\n                for(int j=0;j<part;j++){\n                    double p=totalmembers;\n                    if(Double.parseDouble(mem[j])\/p>0.5){\n                        ans+=(char)(65+j);\n                        mem[j]=Integer.toString(Integer.parseInt(mem[j])-1);\n                        totalmembers-=1;\n                        break;\n                    }\n                }\n            System.out.print(ans+\" \");\n        }\n        System.out.println();    \n        }\n    }\n}"}
{"idx":"1466","func":"class Main {\n\n    public static void main(String[] args) {\n        Scanner in = null;\n        PrintWriter out = null;\n        try {\n            \/\/these variables handle input and output from plain text files\n            in = new Scanner(new FileReader(\"input.txt\"));\n            out = new PrintWriter(\"output.txt\");\n\n            final char FIRST_CHAR = 'A';\n\n            int totalCases = in.nextInt();\n            for (int testCase = 1; testCase <= totalCases; testCase++) {\n\n                int n = in.nextInt();\n                int[] parties = new int[n];\n                int sum = 0;\n                for (int i = 0; i < n; i++) {\n                    parties[i] = in.nextInt();\n                    sum += parties[i];\n                }\/\/end input\n\n                out.printf(\"Case #%d: \",testCase);\n\n\n                int maxIndex = 0;\n                if(sum % 2 == 1){\n\n                    maxIndex = 0;\n                    for (int i = 1; i < n; i++) {\n                        if(parties[maxIndex]<parties[i]){\n                            maxIndex = i;\n                        }\n                    }\n                    out.printf(\"%c \",FIRST_CHAR + ((char) maxIndex));\n                    sum--;\n                    parties[maxIndex]--;\n\n                }\/\/end removing oddity\n\n\n                int weak;\n                int strong;\n                int temp =  0;\n                while(sum>0){\n                    weak = 0;\n                    strong = 1;\n                    if(parties[0]>= parties[1]){\n                        strong = 0;\n                        weak = 1;\n                    }\n                    for (int i = 2; i < n; i++) {\n                        if(parties[weak]<parties[i]){\n                            weak = i;\n                            if(parties[weak]>parties[strong]){\n                                temp = strong;\n                                strong = weak;\n                                weak = temp;\n                            }\n                        }\n                    }\/\/end finding two max indices\n                    out.printf(\"%c%c \",FIRST_CHAR+((char) weak),FIRST_CHAR+((char) strong));\n                    parties[weak]--;\n                    parties[strong]--;\n                    sum -=2;\n                }\n                out.println();\n                out.flush();\n\n\n            }\/\/end for cases\n\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (in != null)\n                in.close();\n            if (out != null)\n                out.close();\n        }\n    }\n}"}
{"idx":"1467","func":"class A {\n\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new FileReader(\"src\/round1\/roundC\/A-large (5).in\"));\n        PrintWriter pw = new PrintWriter(\"src\/round1\/roundC\/A-large.out\");\n        int testCases = sc.nextInt();\n     \/\/   testCases=1;\n        String alphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n\n        for (int casen = 0; casen < testCases; casen++) {\n            pw.printf(\"Case #%d: \",casen+1);\n\n            int n = sc.nextInt();\n            int arr[]=new int[n];\n            for (int i = 0; i < n; i++) {\n                arr[i]=sc.nextInt();\n            }\n            int max1=0;\n            for (int i = 0; i < arr.length; i++) {\n                if(arr[i]>max1){\n                    max1=arr[i];\n                }\n            }\n\/\/            int sum=0;\n\/\/            for (int i = 0; i < n; i++) {\n\/\/                sum+=arr[i];\n\/\/            }\n            int max = max1;\n           \/\/ System.out.println(Arrays.toString(arr));\n            while(max!=0) {\n\n                Queue<Integer> arrOfIndexOfMaxNum=new LinkedList<>();\n                for (int i1 = 0; i1 < arr.length; i1++) {\n                    if(arr[i1]==max) arrOfIndexOfMaxNum.add(i1);\n                }\n                Queue<Integer> indexOfMax = arrOfIndexOfMaxNum;\n\n               \/\/ System.out.println(indexOfMax);\n                if (indexOfMax.size() % 2 == 1) {\n                    int t = indexOfMax.poll();\n                    arr[t]--;\n                    pw.print(alphabet.charAt(t) + \" \");\n                }\n                while (!indexOfMax.isEmpty()) {\n                    int t1 = indexOfMax.poll();\n                    int t2 = indexOfMax.poll();\n                    arr[t1]--;\n                    arr[t2]--;\n                    pw.print(alphabet.charAt(t1) );\n                    pw.print(alphabet.charAt(t2) + \" \" );\n                }\n                int max2=0;\n                for (int i = 0; i < arr.length; i++) {\n                    if(arr[i]>max2){\n                        max2=arr[i];\n                    }\n                }\n                max = max2;\n            }\n            pw.println();\n\n\n\n\n\n            pw.flush();\n        }\n\n        pw.close();\n        sc.close();\n\n    }\n\n}"}
{"idx":"1468","func":"class Av2 {\n\n    public static void main(String args[]) throws IOException{\n        \/\/ 0. My Small Practice\n        \/\/FileReader reader = new FileReader(\"test_case_gcj2016Round1c\/A-mysmall-practice.in\");\n        \/\/FileWriter writer = new FileWriter(\"test_case_gcj2016Round1c\/A-mysmall-practice.out\");\n\n        \/\/ 1. Small Practice\n        \/\/ Judged response for input A-small: Correct!\n        \/\/FileReader reader = new FileReader(\"test_case_gcj2016Round1c\/A-small-attempt0.in\");\n        \/\/FileWriter writer = new FileWriter(\"test_case_gcj2016Round1c\/A-small-attempt0.out\");\n\n        \/\/ 2. Large Practice\n        FileReader reader = new FileReader(\"test_case_gcj2016Round1C\/A-large.in\");\n        FileWriter writer = new FileWriter(\"test_case_gcj2016Round1C\/A-large.out\");\n        \n        \n        BufferedReader bufferedReader = new BufferedReader(reader);\n        String line = bufferedReader.readLine();\n        int noOfCases = Integer.parseInt(line);\n        System.out.println(noOfCases);\n                \n        for (int i = 1; i <= noOfCases; i++){\n            \/\/ 1. read data\n            line = bufferedReader.readLine();\n            int n = Integer.parseInt(line);\n            line = bufferedReader.readLine();\n            \n            String[] nos = line.split(\" \");\n            int[] arr = Arrays.asList(nos).stream().mapToInt(Integer::parseInt).toArray();\n            String res1 = \"\";\n            \n            int sum = IntStream.of(arr).sum();\n            \n            while (sum > 0){\n                int res3 = -1;\n                int max1 = -1;\n                \n                for (int i2 = 0; i2 < arr.length; i2++){\n                    if (arr[i2] > max1){\n                        max1 = arr[i2];\n                        res3 = i2;\n                    }\n                }\n                int maxPos1 = res3;\n                int res2 = -1;\n                int max = -1;\n                \n                for (int i1 = 0; i1 < arr.length; i1++){\n                    if (arr[i1] > max && arr[i1] <= arr[maxPos1] && i1 != maxPos1){\n                        max = arr[i1];\n                        res2 = i1;\n                    }\n                }\n                int maxPos2 = res2;\n                sum--;\n                res1 += String.valueOf(Character.toChars(65 + maxPos1));\n                arr[maxPos1]--;\n                if (sum != 2){\n                    \/\/ take 2\n                    sum--;\n                    res1 += String.valueOf(Character.toChars(65 + maxPos2));\/\/Character.toString ((char) 65 + maxPos[0]);\n                    arr[maxPos2]--;\n                }\n                res1 += \" \";\n            }\n            \n            String res = res1;\n            String outputLine = \"Case #\" + i + \": \" + res + \"\\n\";\n            System.out.print(outputLine);\n            writer.write(outputLine);\n        }\n           \n        reader.close();\n        writer.close();    \n    }\n\n}"}
{"idx":"1469","func":"class SenateEvacuation {\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\n        int T = Integer.parseInt(bf.readLine());\n\n        final StringBuilder[] results = new StringBuilder[T];\n        for (int testcase = 1; testcase <= T; testcase++) {\n\n            int N = Integer.parseInt(bf.readLine());\n            int[] counts = new int[N];\n            String[] line = bf.readLine().split(\" \");\n            int sum = 0;\n            for(int i=0; i < N; i++){\n                counts[i] = Integer.parseInt(line[i]);\n                sum += counts[i];\n            }\n            \n            StringBuilder output = new StringBuilder();\n            \/\/ greedy\n            while(sum != 3 && sum != 0){\n                int firstMax = 0;\n                int secondMax = 0;\n                int firstMaxIdx = -1;\n                int secondMaxIdx = -1;\n                \n                for(int i=0; i < N; i++){\n                    if(counts[i] > firstMax){\n                        firstMax = counts[i];\n                        firstMaxIdx = i;\n                    }\n                }\n                counts[firstMaxIdx]--;\n                for(int i=0; i < N; i++){\n                    if(counts[i] > secondMax){\n                        secondMax = counts[i];\n                        secondMaxIdx = i;\n                    }\n                }\n                counts[secondMaxIdx]--;\n                \n                \n                char firstChar = (char) ('A' + firstMaxIdx);\n                char secondChar = (char) ('A' + secondMaxIdx);\n                sum -= 2;\n                output.append(firstChar + \"\" + secondChar + \" \");\n            }\n            \n            if(sum == 3){\n                int max = 0;\n                int maxIdx = -1;\n                \n                for(int i=0; i < N; i++){\n                    if(counts[i] > max){\n                        max = counts[i];\n                        maxIdx = i;\n                    }\n                }\n                \n                counts[maxIdx]--;\n                sum--;\n                char maxChar = (char) ('A' + maxIdx);\n                output.append(maxChar + \" \");\n                \n\n                for(int i=0; i < N; i++){\n                    if(counts[i] > 0){\n                        char lastChar = (char)('A' + i);\n                        output.append(lastChar);\n                    }\n                }\n            }\n            \n            results[testcase - 1] = output;\n\n        }\n\n        for (int testcase = 1; testcase <= T; testcase++) {\n            System.out.println(\"Case #\" + testcase + \": \"\n                    + results[testcase - 1].toString());\n        }\n    }\n\n}"}
{"idx":"1470","func":"class A {\n    public static void main(String[] args) throws IOException {\n        BufferedReader bf= new BufferedReader(new FileReader(\"A-small-attempt2.in\"));\n        int t= Integer.parseInt(bf.readLine());\n        PrintWriter out= new PrintWriter(new FileWriter(\"smallA.txt\"));\n        for(int c=1; c<=t; c++){\n            int n= Integer.parseInt(bf.readLine());\n            int p[]= new int [n];\n            StringTokenizer st= new StringTokenizer(bf.readLine());\n            out.printf(\"Case #%d:\",c);\n            for(int i=0; i<n; i++)\n                p[i]= Integer.parseInt(st.nextToken());\n            int max=0;\n            int maxi=0;\n            int max2=0;\n            int max2i=0;\n            int sum=0;\n            do{\n                max=0;\n                maxi=0;\n                max2=0;\n                max2i=0;\n                sum=0;\n                for(int i=0; i<n; i++){\n                    int x= p[i];\n                    sum+=x;\n                    if(x>max){\n                        max2= max;\n                        max2i= maxi;\n                        max=x;\n                        maxi=i;\n                    }\n                    else\n                        if(x>max2){\n                            max2=x;\n                            max2i=i;\n                        }\n                }\n                \/\/System.out.println(Arrays.toString(p));\n                if(max>0){\n                out.print(\" \"+((char)('A'+maxi)));\n                max--;\n                p[maxi]--;\n                if(max2>max && max2>0 && max2-1<=(sum-2)\/2.0 && sum!=3){\n                    out.print(((char)('A'+max2i)));\n                    p[max2i]--;\n                    continue;\n                }\n                if(max-1<=(sum-2)\/2.0 && max>0 && sum!=3){\n                    out.print(((char)('A'+maxi)));\n                    max--;\n                    p[maxi]--;\n                }\n                \n                }\n                \n            }while(sum!=0);\n            out.println();\n        }\n        out.flush();\n        out.close();\n    }\n\n}"}
{"idx":"1471","func":"static void main(String[] args) throws Exception\n    {\n        File file = new File(\"D:\\\\A-small.in\");\n        File outFile = new File(\"D:\\\\A-small.out\");\n\n        BufferedReader br = new BufferedReader(new FileReader(file));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\n\n        int testCases = Integer.parseInt(br.readLine());\n        for(int t=1;t<=testCases;t++)\n        {\n            int N = Integer.parseInt(br.readLine());\n            int[] Ninput = new int[N];\n\n            \/\/put info to array\n            String input = br.readLine();\n            StringTokenizer strToken = new StringTokenizer(input);\n            int count = strToken.countTokens();\n\n            for(int x = 0;x < count;x++){\n                Ninput[x] = Integer.parseInt((String)strToken.nextElement());\n            }\n            \n            System.out.println(\"=============\");\n            \/\/System.out.println(Arrays.toString(Ninput));\n\n            String removed = \"\";\n\n            while (!areAllZero(Ninput))\n            {\n                String removedSen = \"\";\n\n                \n                int large1;\n                int large2;\n                \n                int largeindex1;\n                int largeindex2;\n                int sum = Ninput[0]+Ninput[1];\n\n                if (Ninput[0]>Ninput[1])\n                {\n                    large1 = Ninput[0];\n                    large2 = Ninput[1];\n                    largeindex1 = 0;\n                    largeindex2 = 1;\n                }\n                else\n                {\n                    large1 = Ninput[1];\n                    large2 = Ninput[0];\n                    largeindex1 = 1;\n                    largeindex2 = 0;\n                }\n                for(int i=2; i< Ninput.length; i++)\n                {\n                    sum += Ninput[i];\n                    if(Ninput[i] >= large1)\n                    {\n                        large2 = large1;\n                        large1 = Ninput[i];\n                        largeindex2 = largeindex1;\n                        largeindex1 = i;\n                    }\n                    else if (Ninput[i] >= large2)\n                    {\n                        large2 = Ninput[i];\n                        large2 = i;\n                    }\n                }\n\n                if (Ninput[largeindex1]>0)\n                {\n                    Ninput[largeindex1]--;\n                    removedSen += (char)(largeindex1+0x41);\n                }\n                if (largeindex1 != largeindex2 && sum % 2==0)\n                {\n                    if (Ninput[largeindex2]>0)\n                    {\n                        Ninput[largeindex2]--;\n                        removedSen += (char)(largeindex2+0x41);\n                    }\n                }\n                \/\/System.out.println(largeindex1+\" \"+largeindex2);\n                \/\/System.out.println(Arrays.toString(Ninput));\n                \/\/System.out.println(removedSen);\n                removed += removedSen + \" \";\n            }\n\n            bw.write(\"Case #\" + t +\": \"+removed+\"\\n\");\n        }\n        br.close();\n        bw.close();\n    }\n    public static boolean areAllZero(int[] array)\n    {\n        for(int b : array) if(b>0) return false;\n        return true;\n    }\n}"}
{"idx":"1472","func":"class A {\n\n\n    private static final boolean TEST = false;\n    private static final String DOWNLOADS = \"\/Users\/juanma\/Downloads\/\";\n    private static final String FILE = \"A-large\";\n\n    public static void main(String[] args) {\n\n        Scanner in = null;\n        PrintStream out = null;\n\n        if (TEST) {\n            in = new Scanner(System.in);\n            out = System.out;\n        } else {\n            try {\n                in = new Scanner(new File(DOWNLOADS + FILE + \".in\"));\n                out = new PrintStream(new BufferedOutputStream(new FileOutputStream(DOWNLOADS + FILE + \".out\")), true);\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n\n        }\n\n        int t = in.nextInt();\n        for (int tc = 1; tc <= t; tc++) {\n            int n = in.nextInt();\n            int[] p = new int[n];\n            int sum = 0;\n            for (int i = 0; i < n; i++) {\n                p[i]=in.nextInt();\n                sum=sum+p[i];\n            }\n\n            StringBuilder sb = new StringBuilder();\n            int exit = 0;\n            while (sum>0) {\n                int max = 0;\n                int maxP1 = -1;\n                for (int i = 0; i < p.length; i++) {\n                    if (p[i]>max) {\n                        max = p[i];\n                        maxP1=i;\n                    }\n                }\n                int maxP = maxP1;\n                p[maxP]--;\n                sum--;\n                sb.append((char) (maxP+(int)'A'));\n                exit++;\n                if (exit==2 || sum ==2){\n                    exit = 0;\n                    sb.append(' ');\n                }\n\n            }\n            out.println(String.format(\"Case #%d: %s\",tc,sb.toString()));\n\n\n        }\n\n        in.close();\n        out.close();\n        System.exit(0);\n    }\n}"}
{"idx":"1473","func":"class MainProgram {\n\n    public static void main(String args[]) throws FileNotFoundException {\n        \/\/ System.out.println(\"yokoso!\");\n\n        \/\/ String inFile = \"input.in\";\n        \/\/ String outFile = \"output.out\";\n\n        \/\/ String inFile = \"B-small-practice.in\";\n        \/\/ String outFile = \"B-small-practice.out\";\n        \/\/ String inFile = \"A-large-practice.in\";\n        \/\/ String outFile = \"A-large-practice.out\";\n\n\/\/        String inFile = \"A-small-attempt2.in\";\n\/\/        String outFile = \"A-small-attempt2.out\";\n         String inFile = \"A-large.in\";\n         String outFile = \"A-large.out\";\n\n        File file = new File(inFile);\n        Scanner scan = new Scanner(file);\n        PrintWriter writer = new PrintWriter(outFile);\n\n        int t = scan.nextInt();\n\n        for (int i = 0; i < t; i++) {\n            \/\/ TODO\n            int n = scan.nextInt();\n            int[][] p = new int[2][n];\n            int s = 0;\n            for (int u = 0; u < n; u++) {\n                p[0][u] = u;\n                p[1][u] = scan.nextInt();\n                s += p[1][u];\n            }\n\n            for (int u = 0; u < n - 1; u++) {\n                int minIndex = u;\n                for (int v = u + 1; v < n; v++)\n                    if (p[1][v] < p[1][minIndex])\n                        minIndex = v;\n                if (minIndex != u) {\n                    int tmp = p[1][u];\n                    p[1][u] = p[1][minIndex];\n                    p[1][minIndex] = tmp;\n\n                    tmp = p[0][u];\n                    p[0][u] = p[0][minIndex];\n                    p[0][minIndex] = tmp;\n                }\n            }\n\n            int u = p[1].length - 2;\n            String str = \"\";\n            while (u >= 0) {\n                while (p[1][n - 1] > p[1][u]) {\n                    for (int v = n - 1; v > u; v--) {\n                        char ch = (char) ('A' + p[0][v]);\n                        str = str + ch + \" \";\n                        p[1][v]--;\n                        s--;\n                    }\n                }\n                u = u - 1;\n            }\n\n            \/*\n             * while (p[1][0] > 0) { for (int v = n - 1; v >= 0; v--) { if (s ==\n             * 2) { char ch1 = (char) ('A' + p[0][0]); char ch2 = (char) ('A' +\n             * p[0][1]); str = str + ch1 + ch2;\n             * \n             * p[1][0]--; p[1][1]--; break; } char ch = (char) ('A' + p[0][v]);\n             * str = str + ch + \" \"; p[1][v]--; s--; } }\n             *\/\n\n            if (n > 2) {\n                while (p[1][2] > 0) {\n                    for (int v = n - 1; v >= 2; v--) {\n                        char ch = (char) ('A' + p[0][v]);\n                        str = str + ch + \" \";\n                        p[1][v]--;\n                        s--;\n                    }\n                }\n            }\n\n            while (p[1][0] > 0) {\n                char ch1 = (char) ('A' + p[0][0]);\n                char ch2 = (char) ('A' + p[0][1]);\n                str = str + ch1 + ch2 + \" \";\n                p[1][0]--;\n                p[1][1]--;\n            }\n\n            \/\/\/\/\/\/\/\n            writer.printf(\"Case #%d: %s\", i + 1, str);\n            writer.println();\n\n        }\n\n        writer.close();\n    }\n\n}"}
{"idx":"1474","func":"class A {\n    \n    public static void main(String[] args){\n        A r = new A();\n        Scanner sc = new Scanner(System.in);\n        \n        int testNum = sc.nextInt();\n        for(int t=1;t<=testNum;t++){\n            r.n = sc.nextInt();\n            r.a = new int[r.n];\n            r.sum = 0;\n            for(int i=0;i<r.n;i++){\n                r.a[i] = sc.nextInt();\n                r.sum += r.a[i];\n            }\n            StringBuilder sb = new StringBuilder();\n            \n            while(true){\n                if(r.sum==2){\n                    for(int i=0;i<r.n;i++){\n                        if(r.a[i]!=0){\n                            sb.append((char)(i+65));\n                        }\n                    }\n                    break;\n                }\n                \n                int max = -1;\n                int id = -1;\n                for(int i=0;i<r.n;i++){\n                    if(r.a[i]>max){\n                        max = r.a[i];\n                        id = i;\n                    }\n                }\n                r.a[id]--;\n                r.sum--;\n                sb.append((char)(id+65));\n                \n                if(r.sum==2){\n                    sb.append(' ');\n                    for(int i=0;i<r.n;i++){\n                        if(r.a[i]!=0){\n                            sb.append((char)(i+65));\n                        }\n                    }\n                    break;\n                }\n                \n                for(int i=0;i<r.n;i++){\n                    if((double)r.a[i]\/r.sum >= 0.5){\n                        r.a[i]--;\n                        r.sum--;\n                        sb.append((char)(i+65));\n                        break;\n                    }\n                }\n                \n                \n                sb.append(' ');\n            }\n            String ans = sb.toString().trim();\n            System.out.println(\"Case #\" + t + \": \" + ans);\n        }\n    }\n\n    int n, sum;\n    int[] a;\n\n\n    \n}"}
{"idx":"1475","func":"class SeanteEvacuation {\n    public static void main(String[] args) throws IOException {\n        BufferedReader bf = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n        PrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n        int t = Integer.parseInt(bf.readLine());\n        for (int tc = 1; tc <= t; tc++) {\n            int n = Integer.parseInt(bf.readLine());\n            int a[] = new int[n];\n            StringTokenizer st = new StringTokenizer(bf.readLine());\n            int sum = 0;\n            for (int i = 0; i < n; i++) {\n                a[i] = Integer.parseInt(st.nextToken());\n                sum += a[i];\n            }\n            String s = \"\";\n            while (true) {\n                \/\/out.println(\"hello\");\n                if (sum <= 0)\n                    break;\n                int max = -1;\n                int maxi = -1;\n                for (int i = 0; i < n; i++)\n                    if (a[i] > max) {\n                        max = a[i];\n                        maxi = i;\n                    }\n                s += \" \" + (char) (maxi + 'A');\n                a[maxi]--;\n                sum--;\n                max = -1;\n                maxi = -1;\n                for (int i = 0; i < n; i++)\n                    if (a[i] > max) {\n                        max = a[i];\n                        maxi = i;\n                    }\n                if (max > sum \/ 2) {\n                    s += (char) (maxi + 'A');\n                    a[maxi]--;\n                    sum--;\n                }\n            }\n            out.println(\"Case #\" + tc + \":\" + s);\n        }\n        out.flush();\n        out.close();\n    }\n}"}
{"idx":"1476","func":"class Ultimo {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int t = in.nextInt();\n    for (int i = 1; i <= t; ++i) {\n      String ris = \"\";\n      String v[] = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\n      int n = in.nextInt();\n      String p[] = new String[1001];\n      \n      for(int j = 0; j < 1001; j ++)\n          p[j] = \"\";\n      \n      for(int j = 0; j < n; j ++)\n      {\n          int k = in.nextInt();\n          p[k] += v[j];\n      }\n      \n      for(int j = 1000; j > 0; j --)\n      {\n          if(!p[j].equals(\"\"))\n          {\n              if(p[j].length() % 2 != 0)\n                  ris += p[j].substring(p[j].length() - 1, p[j].length()) + \" \";\n              \n              for(int x = 0; x < p[j].length() - 1; x += 2)\n              {\n                  ris += p[j].charAt(x) + \"\" + p[j].charAt(x + 1) + \" \";\n              }\n              \n              p[j - 1] += p[j];\n          }\n      }\n      \n      System.out.println(\"Case #\" + i + \": \" + ris);\n    }\n  }\n}"}
{"idx":"1477","func":"class A {\n  static final Scanner scanner = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n  static final PrintStream out = System.out;\n\n  public static void main(String[] args) {\n    int T = scanner.nextInt();\n    for (int t = 1; t <= T; t++) {\n      out.print(\"Case #\" + t + \": \");\n      int N = scanner.nextInt();\n    final int[] counts = new int[N];\n    \n    for (int i = 0 ; i < N; i++) {\n      counts[i] = scanner.nextInt();\n    }\n    \n    PriorityQueue<Integer> pq = new PriorityQueue<>(N, new Comparator<Integer>() {\n      @Override\n      public int compare(Integer i1, Integer i2) {\n        return counts[i2] - counts[i1];\n      }\n    });\n    \n    for (int i = 0; i < N; i++) {\n      pq.add(i);\n    }\n    \n    while (!pq.isEmpty()) {\n      int p1 = pq.poll();\n    \n      if (counts[p1] == 1 && pq.size() == 2) {\n        out.print((char) ('A' + p1));\n        out.print(' ');\n        counts[p1]--;\n        continue;\n      }\n    \n      if (counts[pq.peek()] == counts[p1]) {\n        int p2 = pq.poll();\n        out.print((char) ('A' + p1));\n        out.print((char) ('A' + p2));\n        out.print(' ');\n    \n        counts[p1]--;\n        counts[p2]--;\n    \n        if (counts[p1] > 0) {\n          pq.add(p1);\n        }\n    \n        if (counts[p2] > 0) {\n          pq.add(p2);\n        }\n      } else {\n        out.print((char) ('A' + p1));\n        out.print(' ');\n    \n        counts[p1]--;\n    \n        if (counts[p1] > 0) {\n          pq.add(p1);\n        }\n      }\n    }\n    \n    out.println();\n    }\n  }\n}"}
{"idx":"1478","func":"class r14 {\n    public static void main(String[] args) {\n        try {\n            Scanner input=new Scanner(new File(args[0]));\n            PrintWriter output=new PrintWriter(args[1]) ;\n            int casenumber = input.nextInt();\n            input.nextLine();\n            for(int i=0;i<casenumber;i++){\n                 StringBuilder result = new StringBuilder();\n                int pc = input.nextInt();\n                int[] pi = new int[pc];\n                int total = 0;\n                for(int j=0;j<pc;j++){\n                    pi[j]=input.nextInt();\n                    total+=pi[j];\n                }\n                while (total>0){\n                    int[] max = new int[]{0,0};\n                    int[] maxindex = new int[2];\n                    for(int j=0;j<pc;j++){\n                       if(pi[j]>max[0]){\n                           max[1]=max[0];\n                           max[0]=pi[j];\n                           maxindex[1]=maxindex[0];\n                           maxindex[0]=j;\n                       } else if (pi[j]>max[1]){\n                           max[1]=pi[j];\n                           maxindex[1]=j;\n                       }\n                    }\n                    result.append(\" \");\n                    result.append((char)('A'+maxindex[0]));\n                    total--;\n                    pi[maxindex[0]]--;\n                    if(max[1]>0 && max[1]*2>total){\n                        result.append((char)('A'+maxindex[1]));\n                        total--;\n                        pi[maxindex[1]]--;\n                    }\n                }\n                output.println(\"Case #\" + (i + 1) + \":\"+result.toString());\n            }\n            output.flush();\n        } catch (Exception e){\n             e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"1479","func":"static void main(String[] args) throws IOException {\n        File file = new File(\"src\/input.in\");\n        File of = new File(\"src\/out.txt\");\n\n        FileWriter fw = new FileWriter(of, true);\n        PrintWriter pw = new PrintWriter(fw);\n        Scanner sc = new Scanner(file);\n        \n        int iter = sc.nextInt();\n        \n        for (int i = 0; i < iter; i++) {\n            int num = sc.nextInt();\n            ArrayList<Integer> pnum = new ArrayList<Integer>();\n            String res = \"Case #\" + (i + 1) + \": \";\n            \n            for (int j = 0; j < num; j++) {\n                pnum.add(sc.nextInt());\n            }\n            \n            int total = 0;\n            System.out.print(\"[\");\n            for (int j = 0; j < pnum.size(); j++) {\n                total += pnum.get(j);\n                System.out.print(pnum.get(j) + \", \");\n            }\n            System.out.println(\"]\");\n            \n            while (total > 0) {\n                System.out.println(total);\n                int firstVal = Collections.max(pnum);\n                System.out.print(firstVal + \", \");\n                int firstIndex = pnum.indexOf(firstVal);\n                System.out.println(firstIndex);\n                \n                pnum.set(firstIndex, pnum.get(firstIndex) - 1);\n                total -= 1;\n                \n                int secondVal = Collections.max(pnum);\n                System.out.print(secondVal + \", \");\n                int secondIndex = -1;\n                \n                if (secondVal > (double)total \/ 2) {\n                    secondIndex = pnum.indexOf(secondVal);\n                    \n                    pnum.set(secondIndex, pnum.get(secondIndex) - 1);\n                    total -= 1;\n                }\n                \n                System.out.println(secondIndex);\n                \n                res += (char)('A' + firstIndex);\n                \n                if (secondIndex != -1) {\n                    res += (char)('A' + secondIndex);\n                }\n                \n                res += \" \";\n            }\n            \n            pw.println(res);\n            System.out.println(res);\n        }\n\n        sc.close();\n        pw.close();\n    }\n}"}
{"idx":"1480","func":"class GCJ16R1CA {\n\n\n\n    \/**\n     * @param args\n     * @throws IOException \n     *\/\n    public static void main(String[] args){\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        for(int i = 1 ; i <= t; i++){\n            int n = in.nextInt();\n            int a[] = new int[26];\n            int p[] = new int[n];\n            int total = 0;\n            for(int j = 0; j<n;j++){\n                p[j] = in.nextInt();\n                total += p[j];\n            }\n            System.out.print(\"Case #\" + i + \": \");\n            while(total > 0){\n                int max1 = 0;\n                int max2 = 0;\n                int max3 = 0;\n                for(int j = 1 ;j<n;j++){\n                    if(p[j] >= p[max1]){\n                        max3 = max2;\n                        max2 = max1;\n                        max1 = j;\n                    } else if(p[j] >= p[max2]){\n                        max3 = max2;\n                        max2 = j;\n                    } else if(p[j] >= p[max3]){\n                        max3 = j;\n                    }\n                }\n                if((p[max1] - 2)< total\/2 && p[max2] < total \/2 && p[max3] < total\/2){\n                    System.out.print(\"\" + (char)('A' + max1) + (char)('A' + max1) + \" \");\n                    total -= 2; \n                    p[max1] -= 2;\n                } else if((p[max1] - 1) < total\/2 && (p[max2] - 1) < total\/2 && p[max3] < total\/2) {\n                    System.out.print(\"\" + (char)('A' + max1) + (char)('A' + max2) + \" \");\n                    total -= 2;\n                    p[max1] -= 1;\n                    p[max2] -= 1;\n                } else if(p[max1] == p[max2] && p[max3] == p[max2] && max1 != max2 && max2 != max3) {\n                    System.out.print(\"\" + (char)('A' + max3) + \" \");\n                    total -= 1;\n                    p[max3] -= 1;\n                } else {\n                    System.out.print(\"\" + (char)('A' + max1) + (char)('A' + max2) + \" \");\n                    total -= 2;\n                    p[max1] -= 1;\n                    p[max2] -= 1;\n                }\n            }\n            System.out.println();\n        }\n        in.close();\n    }\n\n}"}
{"idx":"1481","func":"class Solve2016R1C_A {\n    private static String filePath = \"A-small-attempt0.in\";\n\n    public static void main(String[] args) {\n        StringBuffer answer = new StringBuffer();\n        char[] parties = new char[26];\n        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);\n\n        try (Scanner sc = new Scanner(new File(filePath))) {\n            int T = sc.nextInt();\n            for (int i = 1; i <= T; i++) {\n                answer.append(\"Case #\" + i + \":\");\n                int N = sc.nextInt();\n                int[] Pi = new int[N];\n                int sum = 0;\n                for (int j = 0; j < N; j++) {\n                    Pi[j] = sc.nextInt();\n                    sum += Pi[j];\n                    Pi[j] *= 2;\n                }\n                while (sum > 0) {\n                    answer.append(\" \");\n                    \n                    int flag = 0;\n                    sum--;\n                    for (int j = 0; j < N; j++) {\n                        if (Pi[j] > sum) {\n                            if (flag == 0) {\n                                answer.append(parties[j]);\n                                Pi[j] -= 2;\n                                flag = 1;\n                            } else {\n                                answer.append(parties[j]);\n                                Pi[j] -= 2;\n                                sum--;\n                                break;\n                            }\n                        }\n                    }\n                    if (flag == 0) {\n                        for (int j = 0; j < N; j++) {\n                            if (Pi[j] > 0) {\n                                answer.append(parties[0]);\n                                Pi[0] -= 2;\n                                break;\n                            }\n                        }\n                    }\n                }\n                answer.append(\"\\n\");\n            }\n            String outPath = \"answer.out\";\n            if (filePath != null && !filePath.equals(\"\")) {\n                outPath = filePath.substring(0, filePath.length() - 2) + \"out\";\n            }\n            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {\n                fos.write(answer.toString().getBytes());\n            }\n            System.out.println(answer);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1482","func":"class A {\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        PrintWriter out = new PrintWriter(System.out);\n        for (int caze = 1; caze <= T; caze++) {\n            int n = Integer.parseInt(br.readLine());\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int[] sens = new int[n];\n            int m = 0;\n            for (int i = 0; i < n; i++) {\n                sens[i] = Integer.parseInt(st.nextToken());\n                m += sens[i];\n            }\n            List<Character> ret = new ArrayList<Character>();\n            boolean started = false;\n            StringBuilder sb = new StringBuilder();\n            while (m > 0) {\n                if (!started) {\n                    started = true;\n                } else {\n                    sb.append(\" \");\n                }\n                int max1 = Integer.MIN_VALUE;\n                int min1 = -1;\n                int min2 = -1;\n                int max2 = Integer.MIN_VALUE;\n                for (int i = 0; i < sens.length; i++) {\n                    if (sens[i] > max1) {\n                        min1 = i;\n                        max1 = sens[i];\n                    }\n                }\n                for (int i = 0; i < sens.length; i++)\n                    if (i != min1) {\n                        if (sens[i] > max2) {\n                            min2 = i;\n                            max2 = sens[i];\n                        }\n                    }\n                sens[min1]--;\n                m--;\n                sb.append(Character.toChars('A' + min1)[0]);\n                if (m > 0 && m != 2) {\n                    sens[min2]--;\n                    m--;\n                    sb.append(Character.toChars('A' + min2)[0]);\n                }\n            }\n            out.write(String.format(\"Case #%d: %s\", caze, sb.toString()));\n            out.write('\\n');\n        }\n        out.close();\n    }\n\n}"}
{"idx":"1483","func":"class R2016_1C_A {\n    \n    private final static String CASE = \"Case #%d: \";\n    \n    private int t;\n    \n    public static void main(final String[] args) {\n        R2016_1C_A r = new R2016_1C_A();\n        final File directory = new File(r.getClass().getSimpleName() + \"_cases\");\n        final File inDirectory = new File(r.getClass().getSimpleName() + \"_cases\" + \"\/in\");\n        final File outDirectory = new File(r.getClass().getSimpleName() + \"_cases\" + \"\/out\");\n        \n        if (!directory.isDirectory()) {\n            directory.mkdir();\n        }\n        if (!outDirectory.isDirectory()) {\n            outDirectory.mkdir();\n        }\n        if (!inDirectory.isDirectory()) {\n            inDirectory.mkdir();\n        }\n        \n        for (final String in : inDirectory.list()) {\n            final String fileNameCore = in.replace(\".in\", \"\");\n            final String outFileName = fileNameCore + \".out\";\n            \n            final File inFile = new File(r.getClass().getSimpleName() + \"_cases\" + \"\/in\" + \"\/\" + in);\n            final File outFile = new File(r.getClass().getSimpleName() + \"_cases\" + \"\/out\" + \"\/\" + outFileName);\n            try (final PrintStream ps =  new PrintStream(outFile);\n                    final Scanner s = new Scanner(inFile)){\n                r.t = s.nextInt();\n                for (int i = 0; i < r.t; i++) {\n                    final int n = i;\n                    ps.print(String.format(R2016_1C_A.CASE, n + 1));\n                    r.N = s.nextInt();\n                    r.P = new int[r.N];\n                    \n                    for (int i1 = 0; i1 < r.N; i1++) {\n                        r.P[i1] = s.nextInt();\n                    }\n                    r.solution = new ArrayList<>();\n                    \n                    int sum = 0;\n                    for (int i3 = 0; i3 < r.N; i3++) {\n                        sum += r.P[i3];\n                    }\n                    \n                    while(sum > 2) {\n                        int m = 0;\n                        int x = 0;\n                        int x2 = 0;\n                        for (int i1 = 0; i1 < r.N; i1++) {\n                            if (r.P[i1] >= m) {\n                                m = r.P[i1];\n                                x2 = x;\n                                x = i1;\n                            }\n                        }\n                    \n                        if (r.P[x2] * 2 > sum - 1) {\n                            r.solution.add(\"\" + (char)('A' + x) + (char)('A' + x2));\n                            r.P[x] --;\n                            r.P[x2]--;\n                            sum -= 2;\n                        } else {\n                            r.solution.add(\"\" + (char)('A' + x));\n                            r.P[x]--;\n                            sum--;\n                        }\n                    }\n                    \n                    String s1 = \"\";\n                    for (int i2 = 0; i2 < r.N; i2++) {\n                        if (r.P[i2] != 0) {\n                            s1 += (char)('A' + i2);\n                        }\n                    }\n                    \n                    r.solution.add(s1);\n                    for (int i1 = 0; i1 < r.solution.size() - 1; i1++) {\n                        ps.print(r.solution.get(i1) + \" \");\n                    }\n                    ps.print(r.solution.get(r.solution.size() - 1));\n                    ps.println();\n                }\n            } catch (final IOException e) {\n                e.printStackTrace();\n            } \n        }\n    }\n    \n    int N;\n    int[] P;\n    \n    List<String> solution;\n}"}
{"idx":"1484","func":"class prblmA {\n    final static String PROBLEM_NAME = \"prblmA\";\n    final static String WORK_DIR = \"F:\\\\GCJ\\\\\" + PROBLEM_NAME + \"\\\\\";\n\n    public static void main(String[] args) throws Exception {\n        \/\/Scanner sc = new Scanner(new FileReader(WORK_DIR + \"input.txt\"));\n        \/\/Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-small-attempt0.in\"));\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-large.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\n        int caseCnt = sc.nextInt();\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\n           System.out.println(\"Processing test case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n            prblmA r = new prblmA();\n            int N = sc.nextInt();\n            int P[] = new int[N];\n            for(int i=0;i<N;i++)\n            {\n                P[i]=sc.nextInt();\n            }\n            int flag=1;\n            int max = P[0];\n            int maxi=0;\n            char out = 'A'; \n            while(true)\n            {max = P[0];\n                     maxi=0;\n                for(int i=0;i<N;i++)\n                {   \n                    if(P[i]>max)\n                    {\n                        max=P[i];\n                        maxi=i;\n                    }    \n                }\n                if(max==1)\n                {int count =0;\n                    for(int i=0;i<N;i++)\n                {   \n                    if(P[i]==1)\n                    {\n                        count++;\n                    }    \n                }\n                if(count==3)\n                {\n                    flag=0;\n                }\n                }    \n            System.out.println(max+\" \"+maxi);\n                if(max==0)\n                {break;}\n                else\n                {\n                    P[maxi]=P[maxi]-1;\n                    out = (char)('A'+maxi);\n                    if(flag==1)\n                    {pw.print(out);flag=0;}\n                    else \/\/if(flag==0)\n                    {pw.print(out+\" \");flag=1;}\n                }\n            }\n              pw.println();\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}"}
{"idx":"1485","func":"class Main {\n    public static void main(String[] args){\n        Scanner scanner = new Scanner(new BufferedReader(new InputStreamReader(\n                System.in)));\n        int testcases = scanner.nextInt();\n        for (int testcase = 1; testcase <= testcases; testcase++) {\n            \/\/String input = scanner.next();\n            int totalSize = scanner.nextInt();\n            int[] array = new int[totalSize];\n            for(int i = 0; i < totalSize; i++){\n                array[i] = scanner.nextInt();\n            }\n            \n            boolean done = false;\n            String answer = \"\";\n            \n            while(!done){\n                int maxPeople = 0;\n                int firstIndex = -1;\n                int secondIndex = -1;\n                int countones = 0;\n                \n                for(int i = 0; i < totalSize; i++){\n                    if(array[i] > maxPeople){\n                        firstIndex = i;\n                        secondIndex = -1;\n                        maxPeople = array[i];\n                    }else if(array[i] == maxPeople){\n                        secondIndex = i;\n                    }\n                    \n                    if(array[i] == 1){\n                        countones++;\n                    }\n                }\n                \n                if(maxPeople == 0){\n                    done = true;\n                }else{\n                    \/*if(secondIndex == -1){\n                        if(array[firstIndex] == 1){\n                            answer = answer + (char)(65 + firstIndex) + \" \";\n                            array[firstIndex] = 0;\n                        }else{\n                            answer = answer + (char)(65 + firstIndex) + (char)(65 + firstIndex) + \" \";\n                            array[firstIndex] -= 2;\n                        }\n                    }else{\n                        answer = answer + (char)(65 + firstIndex) + (char)(65 + secondIndex) + \" \";\n                        array[firstIndex] -= 1;\n                        array[secondIndex] -= 1;\n                    }*\/\n                    \n                    if(maxPeople <= 2 && countones % 2 == 1){\n                        answer = answer + (char)(65 + firstIndex) + \" \";\n                        array[firstIndex] -= 1;\n                    }else if(secondIndex == -1){\n                        answer = answer + (char)(65 + firstIndex) + (char)(65 + firstIndex) + \" \";\n                        array[firstIndex] -= 2;\n                    }else{\n                        answer = answer + (char)(65 + firstIndex) + (char)(65 + secondIndex) + \" \";\n                        array[firstIndex] -= 1;\n                        array[secondIndex] -= 1;\n                    }\n                }\n            }\n            \n            answer = answer.substring(0, answer.length() - 1);\n            System.out.println(\"Case #\" + testcase + \": \" + answer);\n        }\n        scanner.close();\n    }\n}"}
{"idx":"1486","func":"class A {\n    public static void main(String[] args) {\n        try {\n            Scanner scanner = new Scanner(new File(\"X:\\\\A\\\\A-large.in\"));\n            FileWriter fw = new FileWriter(\"X:\\\\A\\\\A-large.out\");\n\n            int T = Integer.valueOf(scanner.nextInt());\n            scanner.nextLine();\n            for (int i = 1; i <= T; i++) {\n                \/\/ handle each test case\n                int N = scanner.nextInt();\n                scanner.nextLine();\n\n                int[] P = new int[N];\n                for(int j=0; j<N; j++) {\n                    P[j] = scanner.nextInt();\n                }\n\n                \/\/ begin algorithm\n                StringBuffer result = new StringBuffer();\n                int numParties = N;\n                do {\n                    \/\/ find max1, max2\n                    int max1 = -1, max2 = -1;\n                    for(int j=0; j<N; j++) {\n                        if(j == 0 || P[j] > P[max1]) {\n                            max1 = j;\n                        }\n                    }\n                    for(int j=0; j<N; j++) {\n                        if(j != max1 && (max2 == -1 || P[j] > P[max2])) {\n                            max2 = j;\n                        }\n                    }\n\n                    if(numParties == 2 && P[max1] == P[max2]) {\n                        String party = String.valueOf((char) ('A' + max1)) + String.valueOf((char) ('A' + max2));\n                        result.append(party + \" \");\n                        P[max1]--;\n                        P[max2]--;\n                        if(P[max1] == 0)\n                            numParties -= 2;\n                    } else {\n                        result.append(String.valueOf((char) ('A' + max1)) + \" \");\n                        P[max1]--;\n                        if(P[max1] == 0)\n                            numParties--;\n                    }\n\n                    if(P[max1] == 0 && P[max2] == 0)\n                        break;\n                } while (true);\n                \/\/ end algorithm\n\n                fw.write(\"Case #\" + i + \": \" + result.toString() + \"\\n\");\n                fw.flush();\n            }\n            fw.flush();\n            fw.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1487","func":"class PA {\n\n    static int nbParty, sum;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int T = sc.nextInt();\n        for (int t = 1; t <= T; t++) {\n            int N = sc.nextInt();\n            int[] s = new int[N];\n            for (int i = 0; i < N; i++) \n                s[i] = sc.nextInt();\n\n            nbParty = N; \/\/ nbParty\n            sum = 0;\n            for (int i = 0; i < N; i++) \n                sum += s[i];\n\n            StringBuilder sb = new StringBuilder();\n            while (sum > 0) {\n                nbParty = 0;\n                sum = 0;\n                for (int i = 0; i < N; i++) {\n                    if (s[i] > 0) {\n                        nbParty++;\n                        sum += s[i];\n                    }\n                }\n\n                if (nbParty > 3) {\n                    int max1 = s[0] > s[1]? s[0]: s[1];\n                    int idx1 = s[0] > s[1]? 0: 1;\n                    int max2 = s[0] > s[1]? s[1]: s[0];\n                    int idx2 = s[0] > s[1]? 1: 0;\n                    for (int i = 2; i < N; i++) {\n                        if (max1 < s[i]) {\n                            max2 = max1; idx2 = idx1;\n                            max1 = s[i]; idx1 = i;\n                        } else {\n                            if (max2 < s[i]) {\n                                max2 = s[i]; idx2 = i;\n                            }\n                        }\n                    }\n                    sb.append((char)(idx1+'A')+\"\"+ (char)(idx2+'A') + \" \");\n                    s[idx1]--; s[idx2]--;\n                } else if (nbParty == 3) {\n                    int[] party = new int[nbParty];\n                    nbParty = 0;\n                    for (int i = 0; i < N; i++) \n                        if (s[i] > 0) {\n                            party[nbParty++] = i;\n                        }\n\n                    if (sum == 3) {\n                        sb.append((char)(party[0] + 'A') + \" \");\n                        s[party[0]]--;\n                    } else {\n                        int max1 = s[0] > s[1]? s[0]: s[1];\n                        int idx1 = s[0] > s[1]? 0: 1;\n                        int max2 = s[0] > s[1]? s[1]: s[0];\n                        int idx2 = s[0] > s[1]? 1: 0;\n                        for (int i = 2; i < N; i++) {\n                            if (max1 < s[i]) {\n                                max2 = max1; idx2 = idx1;\n                                max1 = s[i]; idx1 = i;\n                            } else {\n                                if (max2 < s[i]) {\n                                    max2 = s[i]; idx2 = i;\n                                }\n                            }\n                        }\n                        sb.append((char)(idx1+'A')+\"\"+ (char)(idx2+'A') + \" \");\n                        s[idx1]--; s[idx2]--;\n                    }\n\n                } else if (nbParty == 2) {\n                    int idx1 = -1;\n                    int idx2 = -1;\n                    for (int i1 = 0; i1 < N; i1++) {\n                        if (s[i1] > 0) {\n                            if (idx1 == -1) idx1 = i1;\n                            else idx2 = i1;\n                        }\n                    }\n                    if (s[idx1] > s[idx2]) {\n                        sb.append((char)(idx1+'A')+\" \");\n                        s[idx1]--;\n                    } else if (s[idx2] > s[idx1]) {\n                        sb.append((char)(idx2+'A')+\" \");\n                        s[idx2]--;\n                    }\n                    for (int i1 = 0; i1 < s[idx1]; i1++) {\n                        sb.append((char)(idx1+'A')+\"\"+ (char)(idx2+'A'));\n                        if ( i1 != s[idx1] -1) sb.append(\" \");\n                    }\n                    sum = 0;\n                }\n            }\n\n            System.out.printf(\"Case #%d: %s\\n\", t, sb.toString());\n        }\n\n        sc.close();\n    }\n}"}
{"idx":"1488","func":"class A {\n    public static void main(String args[]) throws Exception {\n\/\/        File file = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\small.in\");\n\/\/        File outFile = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\small.out\");\n\/\/        File file = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\A-small-attempt1.in\");\n\/\/        File outFile = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\A-small-attempt1.out\");\n        File file = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\A-large.in\");\n        File outFile = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\A-large.out\");\n        BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\n        Scanner scanner = new Scanner(file);\n        int T = Integer.parseInt(scanner.nextLine()), count = 0, N = 0, max = 0, prevMax = 0, idx = 0;\n        int[] parties;\n        String alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        StringBuilder output;\n        char one, two;\n        boolean stop = false;\n        for(int t = 1; t <= T; t++) {\n            output = new StringBuilder();\n            stop = false;\n            N = Integer.parseInt(scanner.nextLine());\n            parties = new int[N];\n            for(int n = 0; n < N; n++) {\n                parties[n] = scanner.nextInt();\n            }\n            while(!stop) {\n                max = 0;\n                count = 0;\n                prevMax = -1;\n                idx = -1;\n                for (int i = 0; i < N; i++) {\n                    if (max < parties[i]) {\n                        prevMax = idx;\n                        max = parties[i];\n                        idx = i;\n                        count = 1;\n                    } else if (max == parties[i]) {\n                        prevMax = i;\n                        count++;\n                    }\n                }\n                if (max == 0) {\n                    stop = true;\n                    break;\n                } else if (max == 1 && prevMax >= 0 && parties[prevMax] == 1) {\n                    output.append(alphabet.charAt(idx));\n                    parties[idx]--;\n                    if (count != 3) {\n                        output.append(alphabet.charAt(prevMax));\n                        parties[prevMax]--;\n                    }\n                    output.append(\" \");\n                } else if (max <= 2) {\n                    output.append(alphabet.charAt(idx));\n                    parties[idx]--;\n                    if (prevMax >= 0 && parties[prevMax] > 1) {\n                        output.append(alphabet.charAt(prevMax));\n                        parties[prevMax]--;\n                    }\n                    output.append(\" \");\n                } else if (prevMax >= 0 && max == parties[prevMax]) {\n                    output.append(alphabet.charAt(idx));\n                    parties[idx]--;\n                    output.append(alphabet.charAt(prevMax));\n                    parties[prevMax]--;\n                    output.append(\" \");\n                } else {\n                    output.append(alphabet.charAt(idx));\n                    output.append(alphabet.charAt(idx));\n                    parties[idx] -= 2;\n                    output.append(\" \");\n                }\n            }\n            System.out.println(output);\n            bw.write(\"Case #\"+t+\": \"+output.toString());\n            if (t != T) {\n                bw.write(\"\\n\");\n                scanner.nextLine();\n            }\n        }\n        bw.close();\n        System.out.println(\"Done!\");\n    }\n}"}
{"idx":"1489","func":"class TaskA {\n\n    public static String[] chars = new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n\n    public static void main(String args[]){\n        File file = new File(\"C:\\\\tests\\\\inputA.txt\");\n\n        try(BufferedReader br = new BufferedReader(new FileReader(file))) {\n            PrintWriter writer = new PrintWriter(\"C:\\\\tests\\\\outputA.txt\", \"UTF-8\");\n            int count = Integer.parseInt(br.readLine());\n\n            for(int i = 0; i < count; i++) {\n                String out = \"Case #\" + (i+1) + \": \";\n\n                int n = Integer.parseInt(br.readLine());\n                int[] p = new int[n];\n                String[] str = br.readLine().split(\" \");\n                int c = 0;\n                for(int j = 0; j < n; j++){\n                    p[j] = Integer.parseInt(str[j]);\n                    c += p[j];\n                }\n\n                while(c > 0) {\n                    int max = p[0]; int maxi = 0;\n                    for(int j = 1; j < p.length; j++){\n                        if(p[j] > max){\n                            max = p[j];\n                            maxi = j;\n                        }\n                    }\n\n                    if(c == 3){\n                        out += chars[maxi] + \" \";\n                        c--;\n                        p[maxi]--;\n                        continue;\n                    }\n\n                    boolean find = false;\n                    for (int j = 0; j < p.length; j++) {\n                        if (j != maxi && p[j] == max) {\n                            out += chars[j] + chars[maxi] + \" \";\n                            p[j]--;\n                            p[maxi]--;\n                            c -= 2;\n\n                            find = true;\n                            break;\n                        }\n                    }\n\n                    if (!find) {\n                        if(p[maxi] >= 2) {\n                            out += chars[maxi] + chars[maxi] + \" \";\n                            c -= 2;\n                            p[maxi] -= 2;\n                        }\n                        else{\n                            out += chars[maxi] + \" \";\n                            c--;\n                            p[maxi]--;\n                        }\n                    }\n                }\n\n                writer.println(out);\n            }\n\n            writer.close();\n        }\n        catch(Exception e){\n            System.out.println(\"Error:\" + e);\n        }\n    }\n\n}"}
{"idx":"1490","func":"class A\n{\n\n    public static void main(String[] args) throws Exception\n    {\n        out = new PrintWriter(new FileWriter(\"outA.txt\"));\n        int testCases = Integer.parseInt(next());\n        for (int r = 1; r <= testCases; r++)\n        {\n            int n = Integer.parseInt(next());\n            int[] p = new int[n];\n\n            int t = 0;\n            for (int i = 0; i < n; i++)\n            {\n                p[i] = Integer.parseInt(next());\n                t += p[i];\n            }\n\n            out.printf(\"Case #%d: \", r);\n\n            if (t % 2 == 1)\n            {\n                int max = 0;\n                for (int i = 1; i < n; i++)\n                    if (p[i] > p[max])\n                        max = i;\n                p[max]--;\n                t--;\n                out.print((char) (max + 'A') + \" \");\n            }\n\n            while (t > 0)\n            {\n                int max = 0;\n                int max2 = -1;\n                for (int i = 1; i < n; i++)\n                    if (p[i] > p[max])\n                        max = i;\n                    else if (p[i] == p[max])\n                        max2 = i;\n\n                if (max2 != -1)\n                {\n                    out.print((char) (max + 'A') + \"\"\n                            + (char) (max2 + 'A')\n                            + \" \");\n                    p[max]--;\n                    p[max2]--;\n                    t -= 2;\n                }\n                else\n                {\n                    if (p[max] == 1)\n                    {\n                        out.print((char) (max + 'A') + \" \");\n                        p[max]--;\n                        t--;\n                    }\n                    else\n                    {\n                        out.print((char) (max + 'A') + \"\"\n                                + (char) (max + 'A') + \" \");\n                        p[max] -= 2;\n                        t -= 2;\n                    }\n                }\n            }\n\n            out.println();\n        }\n        out.close();\n    }\n\n    static BufferedReader br = new BufferedReader(new InputStreamReader(\n            System.in));\n    static PrintWriter out = new PrintWriter(new BufferedWriter(\n            new OutputStreamWriter(System.out)));\n    static StringTokenizer st;\n\n    static String next() throws IOException\n    {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine().trim());\n        return st.nextToken();\n    }\n\n}"}
{"idx":"1491","func":"class CJ_2016_R1C_A {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int nT = Integer.parseInt(in.readLine());\n        for (int t = 1; t <= nT; t++) {\n            System.out.printf(\"Case #%d: \", t);\n            int p = Integer.parseInt(in.readLine());\n            int[] a = new int[p];\n            StringTokenizer st = new StringTokenizer(in.readLine());\n            for (int i = 0; i < p; i++)\n                a[i] = Integer.parseInt(st.nextToken());\n            StringBuilder ans = new StringBuilder();\n            int max = 0;\n            int max1 = 0;\n            for (int n : a)\n                max1 = Math.max(max1, n);\n            while ((max = max1) != 0) {\n                for (int i = 0; i < p; i++)\n                    if (a[i] == max) {\n                        a[i]--;\n                        ans.append((char)(i + 'A'));\n                    }\n            }\n            ans.reverse();\n            for (int i = 2; i < ans.length(); i += 3)\n                ans.insert(i, ' ');\n            ans.reverse();\n            System.out.println(ans.toString());\n        }\n    }\n\n}"}
{"idx":"1492","func":"class ExoA {\n    public static void main(final String[] args) {\n\n        final String base = \"\/home\/jfortin\/workspace-gcj\/Codejam2016\/r1c\/ExoA\/\";\n        final String input = base + \"b1.in\";\n        final String output = base + \"b1.out\";\n\n        try {\n            final Scanner sc = new Scanner(new FileReader(input));\n            final PrintWriter pw = new PrintWriter(output);\n\n            final int n = sc.nextInt();\n            sc.nextLine();\n            for (int c = 0; c < n; c++) {\n                System.out.println(\"Test case \" + (c + 1) + \"...\");\n                pw.print(\"Case #\" + (c + 1) + \": \");\n                int N = sc.nextInt();\n                int nn[] = new int[N];\n                for (int i = 0; i < N; i++) {\n                    nn[i] = sc.nextInt();\n                }\n                \n                while (true) {\n                    int max = Integer.MIN_VALUE;\n                    int maxi = -1;\n                    int maxi2 = -1;\n                    int count = 0;\n                    for (int i = 0; i < nn.length; i++) {\n                        if (nn[i] > max) {\n                            maxi = i;\n                            max = nn[i];\n                            maxi2 = -1;\n                            count = 1;\n                        } else if (nn[i] == max) {\n                            maxi2 = i;\n                            count++;\n                        }\n                    }\n                \n                    if (max == 0) {\n                        break;\n                    }\n                \n                    pw.print(Character.valueOf((char) ('A' + maxi)));\n                    nn[maxi]--;\n                    if (maxi2 != -1 && count == 2) {\n                        pw.print(Character.valueOf((char) ('A' + maxi2)));\n                        nn[maxi2]--;\n                    }\n                    pw.print(' ');\n                }\n                pw.println();\n            }\n            pw.println();\n            pw.flush();\n            pw.close();\n            sc.close();\n        } catch (final FileNotFoundException ex) {\n            Logger.getLogger(ExoA.class.getName()).log(Level.SEVERE, null, ex);\n        }\n\n    }\n\n}"}
{"idx":"1493","func":"class CodeJam {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        final int T = Integer.parseInt(sc.nextLine());\n        for (int caseCount = 1; caseCount <= T; caseCount++) {\n            final int N = sc.nextInt();\n            int[] senates = new int[N];\n            for (int i = 0; i < N; i++) {\n                senates[i] = sc.nextInt();\n            }\n            System.out.print(\"Case #\" + caseCount + \": \");\n            boolean done = false;\n            while (true) {\n                int onesLeft = 0;\n                for (int i = 0; i < N; i++) {\n                    if (senates[i] > 1) {\n                        onesLeft = 0;\n                        break;\n                    } else if (senates[i] == 1) {\n                        onesLeft++;\n                    }\n                }\n                if (onesLeft == 2) {\n                    for (int i = 0; i < N; i++) {\n                        if (senates[i] == 1) {\n                            System.out.print((char) (65 + i));\n                        }\n                    }\n                    System.out.println();\n                    break;\n                }\n                if (onesLeft == 3) {\n                    for (int i = 0; i < N; i++) {\n                        if (senates[i] == 1) {\n                            senates[i]--;\n                            System.out.print((char) (65 + i) + \" \");\n                            break;\n                        }\n                    }\n                    continue;\n                }\n                done = true;\n                int max = 0;\n                int maxNext = 0;\n                for (int i = 0; i < N; i++) {\n                    if (senates[i] > 0) {\n                        done = false;\n                    }\n                    if (senates[i] >= senates[max]) {\n                        maxNext = max;\n                        max = i;\n                    }\n                }\n                if (done) {\n                    System.out.println();\n                    break;\n                }\n                if (senates[max] > senates[maxNext] || max == maxNext) {\n                    senates[max]--;\n                    System.out.print((char) (65 + max) + \" \");\n                } else {\n                    senates[max]--;\n                    senates[maxNext]--;\n                    System.out.print((char) (65 + max));\n                    System.out.print((char) (65 + maxNext) + \" \");\n                }\n            }\n        }\n        sc.close();\n    }\n\n}"}
{"idx":"1494","func":"class Main {\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n\n        int T = sc.nextInt();\n        for(int itt = 1; itt <= T; itt++){\n\n            int N = sc.nextInt();\n            int[] senators = new int[N];\n\n            int total = 0;\n\n            for(int i = 0; i < N; i++){\n                senators[i] = sc.nextInt();\n                total += senators[i];\n            }\n\n            \/\/System.out.println(\"TOTAL: \" + total);\n\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Case #\" + itt + \":\");\n            while(total > 0){\n                \/\/evacuation\n                String evac = \"\";\n\n                int max = 0;\n                int index = -1;\n                for(int i = 0; i<N; i++){\n                    if(senators[i] > max){\n                        max = senators[i];\n                        index = i;\n                    }\n                }\n\n                total--;\n                senators[index]--;\n                evac += (char)(index + (int)'A');\n\n                if(total > 0) {\n\n                    int majority = ((total - 1) \/ 2) + 1;\n\n                    max = 0;\n                    index = -1;\n                    int count = 0;\n                    for (int i = 0; i < N; i++) {\n                        if (senators[i] > max) {\n                            max = senators[i];\n                            index = i;\n                        }\n                        if (majority == senators[i]) count++;\n                    }\n\n                    if (count < 2) {\n\n                        total--;\n                        senators[index]--;\n                        evac += (char)(index + (int)'A');\n                    }\n                }\n\n                sb.append(\" \" + evac);\n\n            }\n\n            System.out.println(sb);\n\n        }\n\n    }\n}"}
{"idx":"1495","func":"class A {\npublic static void main(String [] args) {\n    Scanner scanner = new Scanner(System.in);\n    int nCase = scanner.nextInt();\n    \n    for (int nc = 1; nc <= nCase; nc++) {\n        int N = scanner.nextInt();\n        int total = 0;\n        int[] P = new int[N];\n        for (int i = 0; i < N; i++) {\n            total += P[i] = scanner.nextInt();\n        }\n        \n        StringBuilder output = new StringBuilder(\"Case #\" + nc + \":\");\n        \n        while (total > 0) {\n            output.append(' ');\n            if (total == 2) {\n                for (int i = 0; i < N; i++) {\n                    if (P[i] > 0)\n                        output.append((char) ('A' + i));\n                }\n                total -= 2;\n            } else {\n                int first = -1;\n                int tempFirst = 0;\n                for (int i = 0; i < N; i++) {\n                    if (P[i] > tempFirst) {\n                        first = i;\n                        tempFirst = P[i];\n                    }\n                }\n                P[first]--;\n                total--;\n                output.append((char) ('A' + first));\n                int maxAllowed = total\/2;\n                for (int i = 0; i < N; i++) {\n                    if (P[i] > maxAllowed) {\n                        P[i]--;\n                        total--;\n                        output.append((char) ('A' + i));\n                        break;\n                    }\n                }\n                \n                \n                \n            }            \n        }\n        output.append('\\n');        \n        \n        System.out.println(output.toString());\n    }\n}\n}"}
{"idx":"1496","func":"class A {\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n        String filename = \"A-large\";\n        Scanner sc = new Scanner(new File(filename + \".in\"));\n\/\/        Scanner sc = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(filename + \".out\", \"UTF-8\");\n        while(sc.hasNext()) {\n            int T = sc.nextInt();\n            for(int i = 1; i <= T; i++) {\n                int N = sc.nextInt();\n                int[] P = new int[N];\n                for(int j = 0; j < N; j++) {\n                    P[j] = sc.nextInt();\n                }\n                System.out.print(\"Case #\" + i + \":\");\n                pw.print(\"Case #\" + i + \":\");\n                int[] PS = Arrays.copyOf(P,P.length);\n                Arrays.sort(PS);\n                int max = PS[N-1];\n                int maxes;\n                while(max > 0) {\n\/\/                    System.out.println(Arrays.toString(P));\n                    maxes = 0;\n                    for(int j = 0; j < N; j++) {\n                        if(PS[j] == PS[N-1]) maxes++;\n                    }\n                    if(maxes==2) {\n                        int j = 0;\n                        int a = -1, b = -1;\n                        for(j = 0; j < N; j++) {\n                            if(P[j] == max) {\n                                if(a == -1) a = j;\n                                else b = j;\n                            }\n                        }\n                        P[a]--;\n                        P[b]--;\n                        System.out.print(\" \" + (char)('A' + a));\n                        System.out.print((char)('A' + b));\n                        pw.print(\" \" + (char)('A' + a));\n                        pw.print((char)('A' + b));\n                    } else {\n                        for(int j = 0; j < N; j++) {\n                            if(P[j] == max) {\n                                P[j]--;\n                                System.out.print(\" \" + (char)('A' + j));\n                                pw.print(\" \" + (char)('A' + j));\n                                break;\n                            }\n                        }\n                    }\n                    PS = Arrays.copyOf(P,P.length);\n                    Arrays.sort(PS);\n                    max = PS[N-1];\n                }\n                \n\n                System.out.println();\n                pw.println();\n                \n                \n                \n\/\/                while(nonzero > 0) {\n\/\/                    System.out.println(Arrays.toString(P));\n\/\/                    if(nonzero == 2) {\n\/\/                        int a = -1, b = -1;\n\/\/                        int j = 0;\n\/\/                        for(j = 0; j < N; j++) {\n\/\/                            if(P[j] > 0) {\n\/\/                                a = j;\n\/\/                                break;\n\/\/                            }\n\/\/                        }\n\/\/                        for(j++; j < N; j++) {\n\/\/                            if(P[j] > 0) {\n\/\/                                b = j;\n\/\/                                break;\n\/\/                            }\n\/\/                        }\n\/\/                        int c = Math.min(P[a], P[b]);\n\/\/                        str = new StringBuilder(str).reverse().toString();\n\/\/                        for(j = 0; j < c; j++) {\n\/\/                            str += \" \" + (char)('A' + a);\n\/\/                            str += (char)('A' + b);\n\/\/                        }\n\/\/                        str = new StringBuilder(str).reverse().toString();\n\/\/                        P[a] -= c;\n\/\/                        P[b] -= c;\n\/\/                        if(P[a] == 0) nonzero--;\n\/\/                        if(P[b] == 0) nonzero--;\n\/\/                    } else {\n\/\/                        for(int j = 0; j < N; j++) {\n\/\/                            if(P[j] > 0) {\n\/\/                                str += (char)('A' + j) + \" \";\n\/\/                                if(P[j] == 1) nonzero--;\n\/\/                                P[j]--;\n\/\/                            }\n\/\/                        }\n\/\/                    }\n\/\/                }\n            }\n            pw.close();\n        }\n    }\n\n}"}
{"idx":"1497","func":"class SenateEvacuation {\n    public static void main(String[]args)\n    {\n        try\n        {\n            Scanner sc = new Scanner(new FileReader(\"A-large.in\"));\n            FileWriter fw = new FileWriter(new File(\"Output.txt\"));\n            PrintWriter pw = new PrintWriter(fw);\n                \n            int t = sc.nextInt();\n            sc.nextLine();\n                \n            for(int r = 1; r <= t; r++)\n            {\n                int n = sc.nextInt();\n                int [] a = new int[n];\n                int total = 0;\n                System.out.print(\"Case# \" + r + \": \");\n                for(int i = 0; i < n; i++ )\n                {\n                    a[i] = sc.nextInt();\n                    total += a[i];\n                    System.out.print(a[i] + \" \");\n                }\n                System.out.println();\n                \n                pw.print(\"Case #\" + r + \": \");\n                \n                \n                int max = 0; \n                int index = -1;\n                \n                boolean next = false;\n                boolean first = true;\n                \n                while(total > 0)\n                {    \n                    if(first && total == 3)\n                        {\n                            boolean c = true;\n                            for(int j = 0; j < n; j++)\n                            {\n                                if(a[j] > 1)\n                                    c = false;\n                            }\n                            if(c)\n                                for(int j = 0; j < n; j++)\n                                {            \n                                    if(a[j] == 1)\n                                    {\n                                        a[j] -= 1;\n                                        pw.print((char)('A' + j)+ \" \");\n                                        total -= 1;\n                                        break;\n                                    }\n                                }    \n                        }\n                    \n                    \n                    max = 0;\n                    for(int i = 0; i < n; i++)\n                    {\n                        if(a[i] > max)\n                        {\n                            max = a[i];\n                            index = i;\n                        }\n                    }\n                    a[index] = a[index] - 1;\n                    pw.print((char)('A' + index));\n                    total -= 1;\n                    if(total == 0)\n                        break;\n                    if(next)\n                    {\n                        pw.print(\" \");\n                        if(total == 3)\n                        {\n                            boolean c = true;\n                            for(int j = 0; j < n; j++)\n                            {\n                                if(a[j] > 1)\n                                    c = false;\n                            }\n                            if(c)\n                                for(int j = 0; j < n; j++)\n                                {            \n                                    if(a[j] == 1)\n                                    {\n                                        a[j] -= 1;\n                                        pw.print((char)('A' + j)+ \" \");\n                                        total -= 1;\n                                        break;\n                                    }\n                                }    \n                        }\n                    }\n                    next = !next;\n                    first = false;\n                }\n                pw.println();\n                        \n            }\n            pw.flush();    \n            pw.close();\n        }\n            catch(IOException ioe){System.out.print(ioe);}\n    }\n}"}
{"idx":"1498","func":"class Problem1\n{\n    private static PrintWriter writer;\n    private static File file;\n    private static Scanner scan;\n    private static int testCases=0;\n\n    public static void main(String[] args)\n    {\n        try\n        {\n            file = new File(\"codejaminput.in\");\n            scan = new Scanner(file);\n        }\n        catch (FileNotFoundException e)\n        {\n            System.out.println(\"File 1 not found\");\n        }\n        try\n        {\n            writer = new PrintWriter(\"output.in\");\n        }\n        catch (FileNotFoundException e)\n        {\n            System.out.println(\"File 2 not found\");\n        }\n        testCases=scan.nextInt();\n        String[] alphabet = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n        for (int j = 1; j<=testCases; j++)\n        {\n            String output=\"\";\n            int N = scan.nextInt();\n            int[] senators = new int[N];\n            for (int i =0; i < N; i++)\n            {\n                senators[i]=scan.nextInt();\n            }\n            boolean done = true;\n            for (int i =0; i < N; i++)\n            {\n                if (senators[i]!=0)\n                    done=false;\n            }\n            while (!done)\n            {\n                int highest = 0;\n                int highestIndex=-1;\n                for (int i =0; i < N; i++)\n                {\n                    if (senators[i]>highest)\n                    {\n                        highest=senators[i];\n                        highestIndex=i;\n                    }\n                }\n                boolean uneven = false;\n                for (int i =0; i < N; i++)\n                {\n                    if (senators[i]<highest&&senators[i]!=0)\n                    {\n                        uneven = true;\n                    }\n                }\n                if (uneven)\n                    {\n                        output+=alphabet[highestIndex]+\" \";\n                        senators[highestIndex]-=1;\n                    }\n                else\n                {\n                    int count = 0;\n                    int indexOne = -1;\n                    int indexTwo = -1;\n                    for (int i =0; i < N; i++)\n                    {\n                        if (senators[i]!=0)\n                        {\n                            count++;\n                            if (indexOne==-1)\n                                indexOne=i;\n                            else\n                                indexTwo=i;\n                        }\n                    }\n                    if (count%2==0)\n                    {\n                        output+=alphabet[indexOne]+alphabet[indexTwo]+\" \";\n                        senators[indexOne]-=1;\n                        senators[indexTwo]-=1;\n                    }\n                    else\n                    {\n                        output+=alphabet[indexOne]+\" \";\n                        senators[indexOne]-=1;\n                    }\n                }\n                done = true;\n                for (int i =0; i < N; i++)\n                {\n                    if (senators[i]!=0)\n                        done=false;\n                }\n            }\n            writer.println(\"Case #\" + j + \": \" + output);\n        }\n        writer.close();\n        scan.close();\n    }\n\n}"}
{"idx":"1499","func":"class ProblemA {\n    public static void main(String[] args) throws Exception {\n        String fileName = args[0];\n        ProblemA obj = new ProblemA();\n        BufferedReader br = new BufferedReader(new FileReader(fileName));\n        BufferedWriter bw = new BufferedWriter(\n                new FileWriter(fileName + \".out\"));\n        \n        int T = Integer.parseInt(br.readLine());\n        for (int i = 0; i < T; i++) {\n            int N = Integer.parseInt(br.readLine());\n            int[] P = new int[N];\n        \n            String str = br.readLine();\n            StringTokenizer token = new StringTokenizer(str, \" \");\n        \n            int cnt = 0;\n            for (int j = 0; j < N; j++) {\n                P[j] = Integer.parseInt(token.nextToken());\n                cnt += P[j];\n            }\n        \n            StringBuffer buf = new StringBuffer();\n        \n            while (cnt > 0) {\n                int max_j = -1;\n                int max = 0;\n                for (int j = 0; j < N; j++) {\n                    if (P[j] > max) {\n                        max_j = j;\n                        max = P[j];\n                    }\n                }\n                P[max_j]--;\n                cnt--;\n                buf.append((char)('A' + max_j));\n                \n                if (cnt <= 0) {\n                    break;\n                }\n                if (cnt == 2) {\n                    buf.append(' ');\n                    continue;\n                }\n                \n                max_j = -1;\n                max = 0;\n                for (int j = 0; j < N; j++) {\n                    if (P[j] > max) {\n                        max_j = j;\n                        max = P[j];\n                    }\n                }\n                P[max_j]--;\n                cnt--;\n                buf.append((char)('A' + max_j));\n                \n                if (cnt > 0) {\n                    buf.append(' ');\n                }\n            }\n        \n            bw.write(\"Case #\" + (i + 1) + \": \" + buf.toString());\n            bw.write(\"\\r\\n\");\n        }\n        bw.close();\n        br.close();\n    }\n}"}
{"idx":"1500","func":"class first_small {\n\n    public static void main( String args[]) throws NumberFormatException, IOException\n    {\n        BufferedReader br=new BufferedReader(new FileReader(\"C:\\\\Users\\\\manas\\\\Downloads\\\\A-large (1).in\"));\n        BufferedWriter bw=new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\manas\\\\Documents\\\\google code jams\\\\first_big.txt\"));\n        \/\/BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        int t= Integer.parseInt(br.readLine());\n        int a=1;\n        while(t>0)\n        {\n            int n=Integer.parseInt(br.readLine());\n            String [] p=br.readLine().split(\" \");\n            ArrayList<Integer> vals=new ArrayList<Integer>();\n            String [] alpha={\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\n            HashMap<Integer,Integer> count=new HashMap<Integer,Integer>();\n            for(int i=0;i<p.length;i++)\n            {\n                vals.add(Integer.parseInt(p[i]));\n                count.put(i, vals.get(i));\n            }\n            int parties_done=0;\n            \n            System.out.print(\"Case #\"+a+\": \");\n            bw.write(\"Case #\"+a+\": \");\n            a++;\n            while(parties_done!=n)\n            {\n                \n                int frst_max=0;\n                int second_max=0;\n                int first_pos=-1;\n                int second_pos=-1;\n                for(int i=0;i<vals.size();i++)\n                {\n                    if(vals.get(i)>frst_max)\n                    {\n                        frst_max=vals.get(i);\n                        first_pos=i;\n                    }\n                }\n                vals.set(first_pos,vals.get(first_pos)-1);\n                for(int i=0;i<vals.size();i++)\n                {\n                    if(vals.get(i)>second_max)\n                    {\n                        second_max=vals.get(i);\n                        second_pos=i;\n                    }\n                }\n                vals.set(second_pos,vals.get(second_pos)-1);                \n                if(n-parties_done==3)\n                {\n                    System.out.print(alpha[first_pos]+\" \");\n                    bw.write(alpha[first_pos]+\" \");\n                    vals.set(second_pos, vals.get(second_pos)+1);\n                }\n                else\n                {\n                    if(second_pos==-1)\n                    {\n                        System.out.print(alpha[first_pos]+\" \");\n                        bw.write(alpha[first_pos]+\" \");\n                    }\n                    else\n                    {\n                        System.out.print(alpha[first_pos]+alpha[second_pos]+\" \");\n                        bw.write(alpha[first_pos]+alpha[second_pos]+\" \");\n                    }\n                }\n                    \n                int c=0;\n                for(int i=0;i<vals.size();i++)\n                {\n                    if(vals.get(i)==0)\n                        c++;\n                }\n                parties_done=c;\n            }\n            System.out.println();\n            bw.newLine();\n            t--;\n            \n            \n        }\n        bw.close();\n        \/*while(t>0)\n        {\n            String s=br.readLine();\n            int count=0;\n            char prev=s.charAt(0);\n            \n            for(int i=1;i<s.length();i++)\n            {\n                char curr=s.charAt(i);\n                if(curr!=prev)\n                {\n                    count++;\n                    prev=curr;\n                    \n                }\n            }\n            if(s.charAt(s.length()-1)=='-')\n                count++;\n            \n            \n            \n            \n            bw.write(\"Case #\"+a+\": \"+count);\n            System.out.println(\"Case #\"+a+\": \"+count);\n            a++;\n            \n            bw.newLine();\n            t--;\n        }\n        bw.close();*\/\n    }\n}"}
{"idx":"1501","func":"class A {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int t = 1; t<=T; t++) {\n            int n = sc.nextInt();\n            int[] p = new int[n];\n            for(int i = 0; i<n; i++) {\n                p[i] = sc.nextInt();\n            }\n            int maxid1 = -1;\n            int max1 = 0;\n            int maxid2 = -1;\n            int max2 = 0;\n            for(int i = 0; i<n; i++) {\n                if(p[i]>max1) {\n                    max2 = max1;\n                    maxid2 = maxid1;\n                    max1 = p[i];\n                    maxid1 = i;\n                } else if(p[i]>max2) {\n                    max2 = p[i];\n                    maxid2 = i;\n                }\n            }\n            StringBuilder out = new StringBuilder();\n            if(max1 != max2) {\n                for(int i = 0; i<max1-max2; i++) {\n                    out.append((char)('A'+maxid1));\n                    out.append(' ');\n                }\n            }\n            for(int i = 0; i<n; i++) {\n                if(i == maxid1 || i == maxid2) continue;\n                for(int j = 0; j<p[i]; j++) {\n                    out.append((char)('A'+i));\n                    out.append(' ');\n                }\n            }\n            for(int i = 0; i<max2; i++) {\n                out.append((char)('A'+maxid1));\n                out.append((char)('A'+maxid2));\n                out.append(' ');\n            }\n            \n            \n            System.out.println(\"Case #\" + t + \": \" + out.toString());\n        }\n    }\n}"}
{"idx":"1502","func":"class A {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(new File(\"AL.in\"));\n        int tc = in.nextInt();\n        PrintWriter out = new PrintWriter(\"AL.out\");\n        for (int cc = 1; cc <= tc; cc++) {\n            int n = in.nextInt();\n            int[] f = new int[n];\n            int sum = 0;\n            for (int i = 0; i < n; i++) {\n                f[i] = in.nextInt();\n                sum += f[i];\n            }\n            StringBuilder result = new StringBuilder();\n            while (sum > 0) {\n                int max = 0;\n                TreeSet<Integer> nz = new TreeSet<>();\n                for (int i = 0; i < n; i++) {\n                    if (f[i] > f[max]) {\n                        max = i;\n                    }\n                    if (f[i] > 0) {\n                        nz.add(i);\n                    }\n                }\n                System.out.println(Arrays.toString(f));\n                if (f[max] * 2 == sum && nz.size() == 2) {\n                    int a = nz.pollFirst();\n                    int b = nz.pollFirst();\n                    f[a]--;\n                    f[b]--;\n                    result.append((char) ('A' + a) + \"\" + (char) ('A' + b) + \" \");\n                    sum -= 2;\n                } else {\n                    f[max]--;\n                    result.append((char) ('A' + max) + \" \");\n                    sum -= 1;\n                }\n            }\n            System.out.printf(\"Case #%d: %s\\n\", cc, result.toString().trim());\n            out.printf(\"Case #%d: %s\\n\", cc, result.toString().trim());\n        }\n        out.close();\n    }\n}"}
{"idx":"1503","func":"class ProblemA {\n\n    public static void main(String args[]) {\n        Scanner in = new Scanner(System.in);\n        int T = Integer.parseInt(in.nextLine());\n\n        for (long i = 1; i <= T; i++) {\n            int N = Integer.parseInt(in.nextLine());\n            int[] p = new int[N];\n            for (int j = 0; j < N; j++) {\n                p[j] = in.nextInt();\n            }\n\n            in.nextLine();\n            StringBuilder sb = new StringBuilder();\n            while (true) {\n                int[] sortedIndices = IntStream.range(0, p.length)\n                        .boxed().sorted((i1, j) -> -Integer.compare(p[i1], p[j]))\n                        .mapToInt(ele -> ele).toArray();\n            \n                int ssum = IntStream.of(p).sum();\n                int first = p[sortedIndices[0]];\n                int second = p.length >= 2 ? p[sortedIndices[1]] : 0;\n                int third = p.length >= 3 ? p[sortedIndices[2]] : 0;\n            \n                if (first == 0) {\n                    break;\n                }\n            \n                sb.append((char) ('A' + sortedIndices[0]));\n                p[sortedIndices[0]] = p[sortedIndices[0]] - 1;\n                if (first == second && (2 * third <= ssum - 2)) {\n                    sb.append((char) ('A' + sortedIndices[1]));\n                    p[sortedIndices[1]] = p[sortedIndices[1]] - 1;\n                }\n            \n                if (IntStream.of(p).anyMatch(x -> x > 0)) {\n                    sb.append(\" \");\n                }\n            \n                int max = 0, sum = 0;\n                for (int i2 = 0; i2 < p.length; i2++) {\n                    sum += p[i2];\n                    if (p[i2] > max) {\n                        max = p[i2];\n                    }\n                }\n            \n                if (max * 2 > sum) {\n                    throw new RuntimeException(\"fail\");\n                }\n            }\n\n            String answer = sb.toString();\n\n            System.out.printf(\"Case #%d: %s%n\", i, answer);\n        }\n\n        in.close();\n    }\n}"}
{"idx":"1504","func":"class A {\n\/\/    Scanner sc = new Scanner(System.in);\n\/\/    PrintWriter pw = new PrintWriter(System.out);\n    Scanner sc = new Scanner(new File(\"r1c_tc\/A-large.in\"));\n    PrintWriter pw = new PrintWriter(\"r1c_tc\/A-large.out\");\n    public A() throws FileNotFoundException {\n    }\n\n    public static void main(String[] args) throws FileNotFoundException {\n        A r = new A();\n        int t = r.sc.nextInt();\n        for(int cs = 1; cs <= t; cs++) {\n            r.pw.print(String.format(\"Case #%d: \", cs));\n            int n = r.sc.nextInt();\n            int[] p = new int[n];\n            int[] cur = new int[n];\n            for(int i = 0; i < n; i++) {\n                p[i] = r.sc.nextInt();\n            }\n            int curSum = 0;\n            List<String> ans = new ArrayList<>();\n            while(true) {\n                \/\/ try two\n                int tmp = curSum + 2;\n                int a = -1, b = -1;\n                int i = 0;\n                while(i < n) {\n                    if(p[i] > 0 && cur[i] + 1 <= tmp \/ 2) {\n                        cur[i]++;\n                        p[i]--;\n                        if(a == -1) a = i;\n                        else b = i;\n                    } else {\n                        i++;\n                    }\n                    if(a != -1 && b != -1) break;\n                }\n                if(a != -1 && b != -1) {\n                    String pair = String.valueOf((char)('A' + a)) + String.valueOf((char)('A' + b));\n                    ans.add(pair);\n                    curSum += 2;\n                    continue;\n                } else if(a != -1) {\n                    cur[a]--;\n                    p[a]++;\n                }\n                \/\/ try one\n                tmp = curSum + 1;\n                a = -1;\n                i = 0;\n                while(i < n) {\n                    if(p[i] > 0 && cur[i] + 1 <= tmp \/ 2) {\n                        cur[i]++;\n                        p[i]--;\n                        a = i;\n                        break;\n                    }\n                    i++;\n                }\n                if(a != -1) {\n                    ans.add(String.valueOf((char)('A' + a)));\n                    curSum += 1;\n                } else {\n                    break;\n                }\n            }\n            Collections.reverse(ans);\n            r.pw.println(String.join(\" \", ans));\n        }\n        r.pw.flush();\n    }\n}"}
{"idx":"1505","func":"class SenateEvacuation {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner input=new Scanner(new File(\"Input.in\"));\n        PrintWriter output=new PrintWriter(\"Output.out\");\n        int testCase,totalCases;\n        totalCases=input.nextInt();\n        for(testCase=1;testCase<=totalCases;testCase++)\n        {\n            int N=input.nextInt();\n            int[] P=new int[N];\n            for(int i=0;i<N;i++)\n            {\n                P[i]=input.nextInt();\n            }\n            String result=\"\";\n            int resultIndex=0;\n            for(int i1=0;i1<P.length;i1++)\n            {\n                if(P[i1]>P[resultIndex])\n                    resultIndex=i1;\n            }\n            int firstLargestIndex=resultIndex;\n            int resultIndex1=0;\n            if(firstLargestIndex==0)\n                resultIndex1=1;\n            for(int i1=0;i1<P.length;i1++)\n            {\n                if(i1==firstLargestIndex)\n                    continue;\n                if(P[i1]>P[resultIndex1])\n                    resultIndex1=i1;\n            }\n            int secondLargestIndex=resultIndex1;\n            \/\/System.out.println(\"Largest \"+firstLargestIndex+\" \"+secondLargestIndex);\n            while(P[firstLargestIndex]-P[secondLargestIndex]>0)\n            {\n                if(P[firstLargestIndex]-P[secondLargestIndex]>1)\n                {\n                    result+=(char)(65+firstLargestIndex)+\"\"+(char)(65+firstLargestIndex)+\" \";\n                    P[firstLargestIndex]-=2;\n                }\n                else \n                {\n                    result+=(char)(65+firstLargestIndex)+\" \";\n                    P[firstLargestIndex]-=1;\n                }\n                \n            }\n            for(int i=0;i<P.length;i++)\n            {\n                if(i==firstLargestIndex || i== secondLargestIndex)\n                    continue;\n                while(P[i]>0)\n                {\n                    if(P[i]-2>=0)\n                    {\n                        result+=(char)(65+i)+\"\"+(char)(65+i)+\" \";\n                        P[i]-=2;\n                    }\n                    else\n                    {\n                        result+=(char)(65+i)+\" \";\n                        P[i]-=1;\n                    }\n                }\n            }\n            while(P[firstLargestIndex]>0)\n            {\n                result+=(char)(65+firstLargestIndex)+\"\"+(char)(65+secondLargestIndex)+\" \";\n                P[firstLargestIndex]--;\n            }\n            String solution=result;\n            System.out.println(\"Case #\"+testCase+\": \"+solution);\n            output.println(\"Case #\"+testCase+\": \"+solution);\n        }\n\n        output.flush();\n    }\n\n}"}
{"idx":"1506","func":"static void main(String args[])\n{\n    int t,i,ind=1,n,temp;\n    Scanner sc=new Scanner(System.in);\n    t=sc.nextInt();\n    String s;\n    while(t-- >0)\n    {\n        s=sc.next();\n        n=s.length();\n        int arr[]=new int[26],ans[]=new int[10];\n        for(i=0;i<26;++i)\n            arr[i]=0;\n        \n        for(i=0;i<10;++i)\n            ans[i]=0;\n\n        \n        for(i=0;i<n;++i)\n        {\n            arr[(int)s.charAt(i)-65]++;            \n        }\n        \n        if(arr[6]!=0)\n        {\n            temp=arr[6];\n            ans[8]=temp;\/\/eight\n            \n            arr[6]=0;\n            arr[4]-=temp;\n            arr[8]-=temp;\n            arr[7]-=temp;\n            arr[19]-=temp;\n        }\n        if(arr[20]!=0)\/\/four\n        {\n            temp=arr[20];\n            ans[4]=temp;\n            \n            arr[5]-=temp;\n            arr[14]-=temp;\n            arr[20]-=temp;\n            arr[17]-=temp;\n        }\n        if(arr[25]!=0)\/\/zero\n        {\n            temp=arr[25];\n            ans[0]=temp;\n            \n            arr[25]-=temp;\n            arr[4]-=temp;\n            arr[14]-=temp;\n            arr[17]-=temp;\n        }\n        if(arr[22]!=0)\/\/two\n        {\n            temp=arr[22];\n            ans[2]=temp;\n            \n            arr[22]-=temp;\n            arr[19]-=temp;\n            arr[14]-=temp;\n        }\n        if(arr[23]!=0)\/\/six\n        {\n            temp=arr[23];\n            ans[6]=temp;\n            \n            arr[18]-=temp;\n            arr[23]-=temp;\n            arr[8]-=temp;\n        }\n        \n        \n        if(arr[14]!=0)\/\/one\n        {\n            temp=arr[14];\n            ans[1]=temp;\n            \n            arr[14]=0;\n            arr[13]-=temp;\n            arr[4]-=temp;\n        }\n        \n        if(arr[5]!=0)\/\/five\n        {\n            temp=arr[5];\n            ans[5]=temp;\n            \n            arr[5]=0;\n            arr[8]-=temp;\n            arr[21]-=temp;\n            arr[4]-=temp;\n        }\n        if(arr[21]!=0)\/\/seven\n        {\n            temp=arr[21];\n            ans[7]=temp;\n            \n            arr[21]=0;\n            arr[18]-=temp;\n            arr[13]-=temp;\n            arr[4]-=temp;\n            arr[4]-=temp;\n        }\n        if(arr[8]!=0)\/\/nine\n        {\n            temp=arr[8];\n            ans[9]=temp;\n            \n            arr[8]=0;\n            arr[13]-=temp;\n            arr[13]-=temp;\n            arr[4]-=temp;\n        }\n        if(arr[19]!=0)\/\/three\n        {\n            temp=arr[19];\n            ans[3]=temp;\n            \n            arr[14]=0;\n            arr[17]-=temp;\n            arr[7]-=temp;\n            arr[4]-=temp;\n            arr[4]-=temp;\n        }\n        System.out.print(\"Case #\"+ind+\": \");\n        for(i=0;i<10;++i)\n        while(ans[i]-- >0)    \n        System.out.print(i);\n    System.out.println();\n    ++ind;\n    }\n}\n}"}
{"idx":"1507","func":"class A {\n\n    public static void main(String[] args) throws IOException, URISyntaxException {\n        int caseNum = 0;\n        List<String> lines = new ArrayList<>();\n        String result = new String();\n        int parties = 0;\n        for (String line : Files.readAllLines(Paths.get(ClassLoader.getSystemResource(\"A-large.in\").toURI()))) {\n            if (caseNum == 0) {\n                ++caseNum;\n                continue;\n            }\n\n            if (parties == 0) {\n                parties = Integer.valueOf(line);\n                continue;\n            }\n\n            String[] nesto = line.split(\" \");\n            int[] members = new int[nesto.length];\n            for (int i = 0; i < nesto.length; i++) {\n                members[i] = Integer.valueOf(nesto[i]);\n            }\n\n            boolean evacuated = false;\n\n            int f = -1, fi = -1, s = -1, si = -1, sum = 0;\n            int[] sorted;\n            while (!evacuated) {\n                sorted = Arrays.copyOf(members, members.length);\n                Arrays.sort(sorted);\n                f = sorted[sorted.length - 1];\n                s = sorted[sorted.length - 2];\n                if (f == 0) {\n                    evacuated = true;\n                    break;\n                }\n                for (int i = 0; i < members.length; i++) {\n                    sum += members[i];\n                    if (f == members[i] && fi == -1) {\n                        fi = i;\n                    }\n                    if (si == -1 && s == members[i] && i != fi) {\n                        si = i;\n                    }\n                }\n\n                if (sum == 3) {\n                    result += (String.valueOf((char)(fi + 65)) + \" \");\n                    members[fi]--;\n                } else {\n                    result += String.valueOf((char)(fi + 65)) + String.valueOf((char)(si + 65)) + \" \";\n                    members[fi]--;\n                    if (si != -1) {\n                        members[si]--;\n                    }\n                }\n                s = -1;\n                f = -1;\n                si = -1;\n                fi = -1;\n                sum = 0;\n            }\n\n            lines.add(String.format(\"Case #%s: %s\", caseNum++, result.trim()));\n            result = new String();\n            parties = 0;\n        }\n        Files.write(Paths.get(\"src\\\\a.out\"), lines, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n\n    }\n\n}"}
{"idx":"1508","func":". *\/\nclass Ideone\n{\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        String alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        Scanner scn = new Scanner(System.in);\n        int $ = scn.nextInt();\n        for (int cas = 0; cas < $; cas++) {\n            StringJoiner sj = new StringJoiner(\" \");\n        \n            int N = scn.nextInt();\n            int[] arr = new int[N];\n            for (int i = 0; i < N; i++) {\n                arr[i] = scn.nextInt();\n            }\n            \n            while (true) {\n                String s = \"\";\n                int sum = 0;\n                for (int i : arr)\n                    sum += i;\n                \n                if (sum == 0)\n                    break;\n                \n                int max = 0;\n                int ind = -1;\n                \n                for (int $$ = 2-(sum%2); $$ > 0; $$--) {\n                    ind = -1;\n                    for (int i = 0; i < N; i++) {\n                        if (ind == -1 || arr[i] > max) {\n                            max = arr[i];\n                            ind = i;\n                        }\n                    }\n                    s += alphabet.charAt(ind);\n                    arr[ind]--;\n                }\n                \n                sj.add(s);\n                \n            }\n            System.out.printf(\"Case #%d: %s\\n\", cas+1, sj);\n        }\n    }\n}"}
{"idx":"1509","func":"class Senate\n{\n    public static void main(String[] args) throws Exception\n    {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(in.readLine());\n        for (int t = 0; t < T; ++t)\n        {\n            int N = Integer.parseInt(in.readLine());\n            PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n            StringTokenizer st = new StringTokenizer(in.readLine());\n            for (int i = 0; i < N; ++i) pq.add(Integer.parseInt(st.nextToken())*100+i);\n            StringBuilder sb = new StringBuilder();\n            sb.append(String.format(\"Case #%d:\", t+1));\n            while (!pq.isEmpty())\n            {\n                int a = pq.poll();\n                if (a\/100 == 1 && pq.size() > 1)\n                {\n                    sb.append(' ').append((char)(a%100+'A'));\n                    continue;\n                }\n                int b = pq.poll();\n                int ca = a\/100, pa = a%100;\n                int cb = b\/100, pb = b%100;\n                sb.append(' ').append((char)(pa+'A')).append((char)(pb+'A'));\n                if (ca > 1) pq.add(a-100);\n                if (cb > 1) pq.add(b-100);\n            }\n            System.out.println(sb.toString());\n        }\n    }\n}"}
{"idx":"1510","func":"class TaskA {\n    public static void main(String[] args) {\n        String fileName = \"A-large.in\";\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n\n            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + \".out\"))) {\n                int tests = Integer.valueOf(br.readLine());\n                for (int test = 1; test <= tests; ++test) {\n                    int n = new Scanner(br.readLine()).nextInt();\n                    Scanner scanner = new Scanner(br.readLine());\n                    int s[] = new int[n];\n                    for (int i = 0; i < n; ++i)\n                        s[i] = scanner.nextInt();\n                    bw.write(\"Case #\" + test + \": \");\n                    while (true) {\n                        int max = 0;\n                        for (int ss: s)\n                            max = Math.max(max, ss);\n                        if (max == 0)\n                            break;\n                        ArrayList<Integer> pos = new ArrayList<Integer>();\n                        for (int i = 0; i < n; ++i) {\n                            if (s[i] == max)\n                                pos.add(i);\n                        }\n                        int ps = pos.size();\n                        if (pos.size() % 2 == 1) {\n                            ps--;\n                            int cur = pos.get(pos.size() - 1);\n                            s[cur]--;\n                            bw.write(\"\" + (char)('A' + cur) + \" \");\n                        }\n                        for (int i = 0; i < ps; i += 2) {\n                            int c1 = pos.get(i);\n                            int c2 = pos.get(i + 1);\n                            s[c1]--;\n                            s[c2]--;\n                            bw.write(\"\" + (char)('A' + c1) + (char)('A' + c2) + \" \");\n                        }\n                    }\n                    bw.write(\"\\n\");\n                }\n                bw.close();\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1511","func":"class codejam {\n\n    static String i0 = \"dummy.in\";\n    static String o0 = \"dummy.out\";\n\n    static String i1 = \"small.in\";\n    static String o1 = \"small.out\";\n\n    static String i2 = \"large.in\";\n    static String o2 = \"large.out\";\n\n    public static void main(String[] args) throws Exception {\n\n        Scanner r = null;\n        FileWriter w = null;\n\n        r = new Scanner(new FileReader(i0));\n        w = new FileWriter(new File(o0));\n\n        int t = r.nextInt();\n        \/\/r.nextLine();\n        \n        for (int i=0;i<t;i++){\n            w.write(\"Case #\"+(i+1)+\": \");\n            int n = r.nextInt();\n            Map<String, Integer> mp = new HashMap<String, Integer>();\n            int mn = 10001;\n            for (int j=0;j<n;j++){\n                int p = r.nextInt();\n                if (mn > p)\n                    mn = p;\n                mp.put(String.valueOf((char)('A'+j)), p);\n            }\n            ArrayList<Map.Entry<String, Integer>> al = new ArrayList<Map.Entry<String, Integer>>(mp.entrySet());\n            Collections.sort(al, (o1, o2) -> o2.getValue() - o1.getValue());\n            boolean gothru = false;\n            while(!gothru){\n                gothru = true;\n                for (int j=0;j<n;j++){\n                    if (al.get(j).getValue() == mn)\n                        continue;\n                    else{\n                        gothru = false;\n                        w.write(al.get(j).getKey()+\" \");\n                        al.get(j).setValue(al.get(j).getValue()-1);\n                    }\n                }\n            }\n            for (int j=0;j<mn;j++){\n                for (int k=0;k<n;k++){\n                    if (k == n-2){\n                        w.write(al.get(k).getKey());\n                        w.write(al.get(k+1).getKey());\n                        w.write(\" \");\n                        break;\n                    } else {\n                        w.write(al.get(k).getKey()+\" \");\n                    }\n                }\n            }\n            \/\/w.write(s1+\" \"+s2);\n            w.write(\"\\n\");\n        }\n        w.close();\n    }\n}"}
{"idx":"1512","func":"class Senate\n{\n    private static final String PROBLEM_NAME = \"Senate\";\n    private static final String PATH = \"I:\/EclipseWorkspace\/CodeJam2016\/src\/com\/devil\/one_c\/\";\n    private static PrintWriter writer;\n\n    public static void main(String[] arg) throws IOException\n    {\n        BufferedReader reader = new BufferedReader(new FileReader(PATH + PROBLEM_NAME + \".in\"));\n        writer = new PrintWriter(new BufferedWriter(new FileWriter(PATH + PROBLEM_NAME + \".out\")));\n\n        int testCases = Integer.parseInt(reader.readLine()); \/\/ input testcases\n\n        for (int i = 0; i < testCases; i++)\n        {\n            int partyCount = Integer.parseInt(reader.readLine());\n            int[][] dist = new int[partyCount][2];\n            StringTokenizer tokenizer = new StringTokenizer(reader.readLine());\n\n            int count = 0;\n\n            for (int j = 0; j < partyCount; j++)\n            {\n                dist[j][0] = Integer.parseInt(tokenizer.nextToken());\n                dist[j][1] = j + 65; \/\/ 65 is ascii for A\n                count += dist[j][0];\n            }\n\n            Arrays.sort(dist, comparator);\n\n            \/\/ for (int j = 0; j < partyCount; j++)\n            \/\/ {\n            \/\/ System.out.println(dist[j][0] + \" \" + dist[j][1]);\n            \/\/ }\n\n            StringBuilder answer = new StringBuilder();\n\n            while (dist[0][0] > 0)\n            {\n                if (dist[1][0] \/ ((float) (count - 1)) <= 0.5)\n                {\n                    answer.append(((char) dist[0][1]) + \" \");\n                    dist[0][0]--;\n                    count -= 1;\n                }\n                else\n                {\n                    answer.append(((char) dist[0][1]) + \"\" + ((char) dist[1][1]) + \" \");\n                    dist[0][0]--;\n                    dist[1][0]--;\n                    count -= 2;\n                }\n                Arrays.sort(dist, comparator);\n            }\n\n            answer.deleteCharAt(answer.length() - 1);\n            writer.println(\"Case #\" + (i + 1) + \": \" + answer);\n\n        }\n\n        reader.close();\n        writer.close();\n    }\n\n    private static Comparator comparator = new Comparator<int[]>()\n    {\n\n        @Override\n        public int compare(int[] obj1, int[] obj2)\n        {\n            return obj1[0] < obj2[0] ? 1 : obj1[0] == obj2[0] ? 0 : -1;\n        }\n    };\n}"}
{"idx":"1513","func":"class CodeJamCA {\n    public static void main(String []args){\n        Scanner reader = new Scanner(System.in);\n        int g = reader.nextInt();\n        \n        for(int k=0;k<g;k++){\n            int N = reader.nextInt();\n            int [] t = new int[N];\n            int tot = 0;\n            for(int i=0;i<N;i++){\n                t[i] = reader.nextInt();\n                tot+= t[i];\n            }\n            System.out.print(\"Case #\"+(k+1)+\":\");\n            while(tot !=0){\n                String answ = \"\";\n                int max = 0;\n                int mindex = 0;\n                for(int i =0;i<N;i++){\n                    if(max < t[i]){\n                        max = t[i];\n                        mindex = i;\n                    }\n                }\n                t[mindex]--;\n                tot--;\n                answ += (char) (((int) 'A')+mindex);\n\n                max = 0;\n                mindex = 0;\n                for(int i =0;i<N;i++){\n                    if(max < t[i]){\n                        max = t[i];\n                        mindex = i;\n                    }\n                }\n                if(tot == 1){\n                    tot--;\n                    answ+= (char) (((int) 'A')+mindex);\n                }\n                else if(max !=0 && tot!=2){\n                    tot--;\n                    answ+= (char) (((int) 'A')+mindex);\n                    t[mindex]--;\n                }\n                System.out.print(\" \"+answ);\n                \n                \n                \n            }\n            System.out.println();\n        }\n        \n        \n        reader.close();\n    }\n}"}
{"idx":"1514","func":"class App1 {\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();  \/\/ Scanner has functions to read ints, longs, strings, chars, etc.\n        in.nextLine();\n\/\/        System.out.println(\"t: \" + t);\n\n        for (int i = 1; i <= t; ++i) {\n            int parties = in.nextInt();\n\/\/            System.out.println(\"parties: \" + parties);\n            String s = in.nextLine();\n            s = in.nextLine();\n\/\/            System.out.println(\"line: \" + s);\n            String values[] = s.trim().split(\" \");\n\/\/            System.out.println(Arrays.toString(values));\n\n            List<Integer> p = new ArrayList<Integer>(parties);\n\n            for (int z = 0; z < parties; ++z) {\n                p.add(z, Integer.parseInt(values[z]));\n\n            }\n\n            StringBuffer sb = new StringBuffer(\"\");\n\n            int max1 = 0;\n            int max2 = 0;\n            do {\n                sb.append(\" \");\n\n                max1 = Collections.max(p);\n                if(max1>0) {\n                    int index1 = p.indexOf(max1);\n                    p.set(index1, max1 - 1);\n                    sb.append((char) ('A' + index1));\n                }\n\n                if (max1 == 1) { \/\/last step, count number of 1s\n                    int numOfones = 0;\n                    for (int z = 0; z < p.size(); ++z) {\n                        if (p.get(z) == 1) {\n                            ++numOfones;\n                        }\n                    }\n                    if (numOfones > 1 && numOfones % 2 != 1) {\n\/\/                        int sum = 0;\n\/\/                        for (int h = 0 ; h < p.size(); ++h ) {\n\/\/                            sum += p.get(h);\n\/\/                        }\n\/\/                        if (sum > 0) {\n\/\/\n\/\/                            for (int h = 0 ; h < p.size(); ++h ) {\n\/\/                                if(p.get(h)\/sum > 0.5) {\n\/\/                                    System.out.println(\"WARNING\");\n\/\/                                }\n\/\/                                System.out.println(\"r:\" + (p.get(h)\/sum));\n\/\/                                System.out.println(\"\" + p.toString());\n\/\/                            }\n\/\/                        }\n                        continue;\n                    }\n                }\n\n                max2 = Collections.max(p);\n                if (max2 > 0) {\n                    int index2 = p.indexOf(max2);\n                    p.set(index2, max2 - 1);\n                    sb.append((char) ('A' + index2));\n                }\n\n\/\/                int sum = 0;\n\/\/                for (int h = 0 ; h < p.size(); ++h ) {\n\/\/                    sum += p.get(h);\n\/\/                }\n\/\/                if (sum > 0) {\n\/\/\n\/\/                    for (int h = 0 ; h < p.size(); ++h ) {\n\/\/                        if(p.get(h)\/sum > 0.5) {\n\/\/                            System.out.println(\"WARNING\");\n\/\/                        }\n\/\/                        System.out.println(\"r:\" + (p.get(h)\/sum));\n\/\/                        System.out.println(\"\" + p.toString());\n\/\/                    }\n\/\/                }\n\n\/\/                System.out.println(\"max1\" + max1 + \" max2 \" + max2);\n            } while(max1 != 0 || max2 != 0);\n\n\/\/            System.out.println(\"line\" + n);\n\n            System.out.println(\"Case #\" + i + \":\" + sb.toString());\n        }\n\n    }\n}"}
{"idx":"1515","func":"class A {\n\n    private static Scanner in;\n    private static PrintStream out;\n\n    private static final String CASE_N = \"Case #\";\n    private static final String COLON_SPACE = \": \";\n\n    public static void main(String[] args) throws Throwable {\n        in = new Scanner(System.in);\n        in = new Scanner(new FileInputStream(\"A-large.in\"));\n        out = System.out;\n        out = new PrintStream(new FileOutputStream(\"A-large.out\"));\n\n        final char[] chr = new char[100];\n        for (char ch = 'A'; ch <= 'Z'; ch++) {\n            chr[ch - 'A'] = ch;\n        }\n\n        int T = in.nextInt();\n\n        int[] max1and2 = new int[2];\n\n        for (int t = 1; t <= T; t++) {\n            out.print(CASE_N);\n            out.print(t);\n            out.print(COLON_SPACE);\n\n            int N = in.nextInt();\n            int[] P = new int[N];\n            int total = 0;\n            for (int n = 0; n < N; n++) {\n                P[n] = in.nextInt();\n                total += P[n];\n            }\n\n            while (total > 0) {\n                int vMax = -1;\n                int iMax = -1;\n                int vMax21 = -1;\n                int iMax21 = -1;\n                \n                for (int i = 0; i < P.length; i++) {\n                    int v = P[i];\n                    if (v > vMax) {\n                        vMax21 = vMax;\n                        iMax21 = iMax;\n                \n                        vMax = v;\n                        iMax = i;\n                    } else if (v > vMax21) {\n                        vMax21 = v;\n                        iMax21 = i;\n                    }\n                }\n                \n                max1and2[0] = iMax;\n                max1and2[1] = iMax21;\n                int iMax1 = max1and2[0];\n                int iMax2 = max1and2[1];\n                int vMax1 = P[iMax1];\n                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;\n\n                if (vMax1 == vMax2) {\n                    out.print(chr[iMax1]);\n                    P[iMax1]--;\n                    total--;\n\n                    if (total > 2 || total == 1) {\n                        out.print(chr[iMax2]);\n                        P[iMax2]--;\n                        total--;\n                    }\n                } else {\n                    out.print(chr[iMax1]);\n                    P[iMax1]--;\n                    total--;\n\n                    if (total > 2 || total == 1) {\n                        out.print(chr[iMax1]);\n                        P[iMax1]--;\n                        total--;\n                    }\n                }\n\n                if (total > 0) {\n                    out.print(' ');\n                }\n            }\n\n            out.println();\n        }\n        out.flush();\n    }\n\n}"}
{"idx":"1516","func":"class senate {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) {\n        \/\/ TODO code application logic here\n        Scanner s=new Scanner(System.in);\n        int t=s.nextInt();\n        for(int f=1;f<=t;f++)\n        {\n            System.out.print(\"Case #\"+f+\": \");\n            \/\/code here\n            int n=s.nextInt();\n            int[] p=new int[n];\n            for(int i=0;i<n;i++)\n                p[i]=s.nextInt();\n            \n            while(true)\n            {\n                int max=0,m_ind=-1;\n                int sec=0,s_ind=-1;\n                int count=0,flag=0;\n                if(n%2!=0)\n                {\n                for(int i=0;i<n&&p[i]==1;i++)\n                        count++;\n                if(count==n)\n                    flag=1;\n                }\n                if(flag==0)\n                {\n                for(int i=0;i<n;i++)\n                {\n                    if(max<p[i])\n                    {\n                        max=p[i];\n                        m_ind=i;\n                    }\n                }\n                \n                if(max==0)\n                    break;\n                for(int i=0;i<n;i++)\n                {\n                    if(sec<p[i]&&i!=m_ind)\n                    {\n                        sec=p[i];\n                        s_ind=i;\n                    }\n                }\n            p[m_ind]--;\n            p[s_ind]--;\n            int on=65+m_ind;\n            int tw=65+s_ind;\n            System.out.print((char)on);\n            System.out.print((char)tw);\n            System.out.print(\" \");\n        \n                    }\n            \n            else\n                {\n                    p[0]--;\n                    int on=65;\n                    System.out.print((char)(on)+\" \");\n                    flag=0;\n                }\n              }\n            System.out.println();\n            }\n            \n            \n            \n        }\n    }"}
{"idx":"1517","func":"class ProblemA \n{\n    public static void main(String[] args) \n    {\n        Scanner input = new Scanner(System.in);\n        int cases = input.nextInt();\n        for(int c = 1; c <= cases; c++)\n        {\n            String ans = \"\";\n            int parties = input.nextInt();\n            int sens[] = new int[parties];\n            int total = 0;\n            for(int p = 0; p < parties; p++)\n            {\n                sens[p] = input.nextInt();\n                total += sens[p];\n            }\n            while(total > 3)\n            {\n                int largest = 0;\n                int second = 0;\n                for(int i = 0; i < sens.length; i++)\n                {\n                    if(sens[i] > sens[largest])\n                    {\n                        largest = i;\n                        second = -1;\n                    }\n                    else if(sens[i] == sens[largest] && i != 0)\n                    {\n                        second = i;\n                    }\n                }\n                ans += \" \" + (char)(65 + largest);\n                if(second == -1)\n                {\n                    ans += (char)(65 + largest);\n                    sens[largest] -= 2;\n                }\n                else\n                {\n                    ans += (char)(65 + second);\n                    sens[second] -= 1;\n                    sens[largest] -= 1;\n                }\n                total -= 2;\n            }\n            if(total == 3)\n            {\n                int place = -1;\n                for(int i = 0; i < sens.length; i++)\n                    if(sens[i] == 1)\n                    {\n                        place = i;\n                        sens[i] = 0;\n                        break;\n                    }\n                ans += \" \" + (char)(65 + place);\n                int left1 = -1;\n                int left2 = -1;\n                for(int i = 0; i < sens.length; i++)\n                {\n                    if(sens[i] == 1 && left1 == -1)\n                    {\n                        left1 = i;\n                    }\n                    else if (sens[i] == 1)\n                    {\n                        left2 = i;\n                        break;\n                    }\n                }\n                ans += \" \" + (char)(65 + left1);\n                if(left2 != -1)\n                    ans += (char)(65 + left2);\n            }\n            if(total <= 2)\n            {\n                int left1 = -1;\n                int left2 = -1;\n                for(int i = 0; i < sens.length; i++)\n                {\n                    if(sens[i] == 1 && left1 == -1)\n                    {\n                        left1 = i;\n                    }\n                    else if (sens[i] == 1)\n                    {\n                        left2 = i;\n                        break;\n                    }\n                }\n                ans += \" \" + (char)(65 + left1);\n                if(left2 != -1)\n                    ans += (char)(65 + left2);\n            }\n            System.out.println(\"Case #\" + c + \":\" + ans);\n        }\n    }\n}"}
{"idx":"1518","func":"class Main {\n\n    \/\/Fractiles - failed\n    public static void main(String... orange) throws Exception {\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++) {\n            int N = input.nextInt();\n            int[] senatorList = new int[N];\n            int max = 0;\n            int maxValue = 0;\n            int sum = 0;\n            for(int i = 0; i<N; i++){\n                senatorList[i] = input.nextInt();\n                if(senatorList[i] > maxValue) {\n                    maxValue = senatorList[i];\n                    max = i;\n                }\n                sum += senatorList[i];\n            }\n            StringBuilder answerSB = new StringBuilder();\n            while(sum>0){\n                answerSB.append(String.valueOf((char)(max + 65)));\n                senatorList[max]--;\n                sum--;\n                if(sum == 0) break;\n                int[] maxes1 = new int[2];\n                maxes1[0] = 0; \/\/max\n                maxes1[1] = 0; \/\/maxValue\n                for(int i = 0; i<N; i++) {\n                    if (senatorList[i] > maxes1[1]) {\n                        maxes1[1] = senatorList[i];\n                        maxes1[0] = i;\n                    }\n                }\n                int[] maxes = maxes1;\n                max = maxes[0];\n                maxValue = maxes[1];\n                sum--;\n                maxValue--;\n                if(sum ==0) {\n                    senatorList[max]--;\n                    answerSB.append(String.valueOf((char)(max + 65)));\n                    break;\n                }\n                else if((double)maxValue\/(double)sum <=0.5 && sum > 1) {\n                    senatorList[max]--;\n                    answerSB.append(String.valueOf((char)(max + 65)));\n                }\n                else{\n                    sum++;\n                    maxValue++;\n                }\n                answerSB.append(\" \");\n                int[] maxes2 = new int[2];\n                maxes2[0] = 0; \/\/max\n                maxes2[1] = 0; \/\/maxValue\n                for(int i = 0; i<N; i++) {\n                    if (senatorList[i] > maxes2[1]) {\n                        maxes2[1] = senatorList[i];\n                        maxes2[0] = i;\n                    }\n                }\n                maxes = maxes2;\n                max = maxes[0];\n                maxValue = maxes[1];\n            }\n\n            String answer = answerSB.toString();\n            System.out.printf(\"Case #%d: %s\\n\", n + 1, answer);\n\n        }\n\n    }\n}"}
{"idx":"1519","func":"class Problem1 {\n    public static void main(String args[]){\n        List<String> inputList1 = new ArrayList<String>();\n        String filePath = \"\/Users\/zzluck\/Downloads\/\";\n        String fileName = \"A-large.in.txt\";\n        String fullFileName = filePath + fileName;\n        try {\n            BufferedReader in = new BufferedReader(new FileReader(fullFileName));\n            String s;\n            while ((s = in.readLine()) != null) { \n                inputList1.add(s.trim());\n            }\n            in.close();\n        } catch (IOException e) {\n                System.err.println(\"Error during input process:\"+e); \n                System.exit(1);\n        }\n        List<String> inputList = inputList1;\n        List<String> outputList = new ArrayList<String>();\n        String testCaseResult = \"\";\n        \n        int testCount = Integer.valueOf(inputList.get(0));\n        int curIdx =1;\n        for(int i = 1; i<=testCount;i++){\n            String line = inputList.get(curIdx)+\" \"+inputList.get(curIdx+1);\n            curIdx= curIdx+2;\n            String answer=\"\";\n             String strArr[] = line.split(\" \");\n             int n = Integer.valueOf(strArr[0]);\n             int p[] = new int[n];\n             char pCh[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n             int totalNum = 0;\n             String outP = \"\";\n             for(int i3 =0; i3<n;i3++){\n                 p[i3] = Integer.valueOf(strArr[i3+1]);\n                 \n             }\n             \/\/psum\n             for (int i2 : p){\n                 totalNum += i2;\n             }\n             \/\/make answer\n             for (int i1=0; i1<totalNum;i1++){\n                 int totalNum1=0;\n                for (int i3 : p){\n                     totalNum1 += i3;\n                }\n                int curNum = totalNum1;\n                int max = p[0];\n                int min = p[0];\n                int maxIdx = 0;\n                for(int i5=1; i5 < p.length ; i5++) {\n                \n                    if( p[i5] > max ){\n                        max = p[i5];\n                        maxIdx = i5;\n                    }\n                }\n                 int curMaxIdx = maxIdx;\n                 if (n >= curNum){\n                     int max1 = p[p.length-1];\n                    int min1 = p[p.length-1];\n                    int maxIdx1 = p.length-1;\n                    for(int i5=p.length-2; i5 >=0 ; i5--) {\n                        if( p[i5] > max1 ){\n                            max1 = p[i5];\n                            maxIdx1 = i5;\n                        }\n                    }\n                    curMaxIdx = maxIdx1;\n                 }\n                 \n                 \n                 outP += pCh[curMaxIdx];\n                 p[curMaxIdx]-- ;\n                 \n                 if(outP.length() == 2){\n                     answer += outP+\" \";\n                     outP =\"\";\n                 }\n                int totalNum2=0;\n                for (int i4 : p){\n                     totalNum2 += i4;\n                }\n                 curNum=totalNum2;\n                 if(curNum == 2&&(outP.length()!=0)){\n                     answer += outP+\" \";\n                     outP =\"\";\n                 }\n             }\n            \n            \n             answer=answer.trim();\n            testCaseResult = answer;\n            outputList.add(\"Case #\"+i+\": \" + testCaseResult+\"\\n\");\n            \n            \n        }\n        String filePath1 = \"\/Users\/zzluck\/Downloads\/codejamOutput\/\";\n        String fileName1 = \"sol1.txt\";\n        String fullFileName1 = filePath1 + fileName1;\n        try{\n            File file = new File(fullFileName1) ;\n            FileWriter fw = new FileWriter(file) ;\n             \n            \/\/ \ud30c\uc77c\uc548\uc5d0 \ubb38\uc790\uc5f4 \uc4f0\uae30\n            for(int i=0; i<outputList.size(); i++){\n                fw.write(outputList.get(i));\n                fw.flush();\n            }\n            \/\/ \uac1d\uccb4 \ub2eb\uae30\n            fw.close(); \n             \n             \n        }catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1520","func":"class ProblemA {\n\n    private static final String PROBLEM_CODE = \"A\";\n    private static final String INPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-large.in\", PROBLEM_CODE);\n\/\/    private static final String INPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-small-attempt0.in\", PROBLEM_CODE);\n    private static final String OUTPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-out%s.txt\", PROBLEM_CODE, System.currentTimeMillis());\n\n    public static void main(final String[] args) {\n        ProblemA app = new ProblemA();\n\n        try {\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(ProblemA.INPUT_PATH))))) {\n                    List<String> answerList = new ArrayList<String>();\n                    int testCaseCount = Integer.parseInt(br.readLine());\n                    testCaseCount = 50;\n                    for (int testCaseIndex = 0; testCaseIndex < testCaseCount; testCaseIndex++) {\n        \/\/                String element = br.readLine();\n                        int n = Integer.parseInt(br.readLine()); \n                        int[] elem = new int[n];\n                        String[] line = br.readLine().split(\" \");\n                        for(int i = 0 ; i < n; i++) {\n                            elem[i] = Integer.parseInt(line[i]);\n                        }\n                        StringBuilder sb = new StringBuilder();\n                        while(true) {\n                            \n                            int max = 1;\n                            List<Integer> maxIndexes = new ArrayList<>();\n                            int lastCount = 0;\n                            for(int i = 0 ; i < n; i++) {\n                                lastCount+=elem[i];\n                                if(max < elem[i]) {\n                                    max = elem[i];\n                                    maxIndexes = new ArrayList<>();\n                                    maxIndexes.add(i);\n                                } else if(max == elem[i]) {\n                                    maxIndexes.add(i);\n                                }\n                            }\n                            if(maxIndexes.size() == 0) break;\n                            \n                            sb.append((char) (maxIndexes.get(0) + 'A'));\n                            elem[maxIndexes.get(0)]--;\n                            if(maxIndexes.size() >= 2 && (lastCount > 3 || lastCount == 2)) {\n                                sb.append((char) (maxIndexes.get(1) + 'A'));\n                                elem[maxIndexes.get(1)]--;\n                            }\n                            \n                            sb.append(\" \");\n                        }\n                        String answer = sb.substring(0, sb.length() - 1); \n        \/\/                String answer = solveProblem(element); \n                        answerList.add(answer);\n                        \n                        System.out.printf(\"%s: %s : %s \\r\\n\", testCaseIndex + 1, elem, answer);\n                    }\n                    final List<String> solve = answerList;\n                    final String FORMAT = \"Case #{0}: {1}\";\n                    try (BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File (ProblemA.OUTPUT_PATH))))){\n                        for (int i = 0; i < solve.size(); i++) {\n                            Object[] ans = new Object[2];\n                            ans[0] = String.valueOf(i + 1);\n                            ans[1] = solve.get(i);\n                            String write = MessageFormat.format(FORMAT, ans);\n                            bufferedWriter.write(write);\n                            bufferedWriter.newLine();\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                } catch(Exception e) {\n                    e.printStackTrace();\n                }\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1521","func":"class R1CA {\n\n    public static void main(String[] args) throws FileNotFoundException {\n\n        Scanner sc = new Scanner(System.in);\n        PrintWriter writer = new PrintWriter(\"out.txt\");\n        int T = sc.nextInt();\n        for (int i = 0; i < T; i++) {\n            int N = sc.nextInt();\n            Map<Integer, Integer> c = new HashMap<>();\n            for (int j = 0; j < N; j++) {\n                c.put(j, sc.nextInt());\n            }\n            StringBuilder sb = new StringBuilder();\n            while (true) {\n                int m1 = -1, m2 = -1;\n                int m1v = 0, m2v = 0;\n\n                for (Map.Entry<Integer, Integer> entry : c.entrySet()) {\n                    if (entry.getValue() > m1v) {\n                        if (c.containsKey(m2)) {\n                            c.put(m2, c.get(m2) + 1);\n                        }\n                        m2v = m1v;\n                        m2 = m1;\n                        m1v = entry.getValue();\n                        m1 = entry.getKey();\n                        entry.setValue(entry.getValue() - 1);\n                    } else if (entry.getValue() > m2v) {\n                        if (c.containsKey(m2)) {\n                            c.put(m2, c.get(m2) + 1);\n                        }\n                        m2 = entry.getKey();\n                        m2v = entry.getKey();\n                        entry.setValue(entry.getValue() - 1);\n                    }\n\n\n                }\n                if (c.containsKey(m2) && c.containsKey(m1)) {\n                    int c1 = c.get(m1);\n                    int c2 = c.get(m2);\n                    if (c1 > c2) {\n                        c.put(m2, c.get(m2) + 1);\n                        m2 = m1;\n                        m2v = m1v;\n                        c.put(m1, c.get(m1) - 1);\n                    }\n                }\n                if (c.containsKey(m1)) {\n                    sb.append((char) ('A' + m1));\n                }\n                if (c.containsKey(m2)) {\n                    sb.append((char) ('A' + m2));\n                }\n                sb.append(\" \");\n                boolean cont = false;\n                for (Map.Entry<Integer, Integer> entry : c.entrySet()) {\n                    if (entry.getValue() > 0) {\n                        cont = true;\n                        break;\n                    }\n                }\n                if (!cont) {\n                    break;\n                }\n\n\n            }\n\n            String re = sb.toString();\n            String[] sp = re.split(\" \");\n            if (sp.length >1 && sp[sp.length - 1].length() < 2) {\n                String aa = sp[sp.length - 1];\n                sp[sp.length - 1] = sp[sp.length - 2];\n                sp[sp.length - 2] = aa;\n                sb = new StringBuilder();\n                for (String s : sp) {\n                    sb.append(s).append(\" \");\n                }\n\n            }\n\n            writer.println(\"Case #\" + (i + 1) + \": \" + sb.toString());\n        }\n        writer.flush();\n        writer.close();\n    }\n\n}"}
{"idx":"1522","func":"class Main {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"src\/prob1\/in2.in\"));\n        PrintWriter out = new PrintWriter(\"src\/prob1\/out2.txt\");\n        Main m = new Main();\n        int T = in.nextInt();\n        in.nextLine();\n        for(int i = 1; i <= T; i++){\n            int nParties = in.nextInt();\n            int total = 0;\n            int[] parties = new int[nParties];\n            for(int j=0; j<nParties; j++){parties[j] = in.nextInt();total += parties[j];};\n            String sol = m.solve(total, parties);\n            System.out.println(\"Case #\" + i + \": \" + sol);\n            out.write(\"Case #\" + i + \": \" + sol);\n            out.write(\"\\n\");\n        }\n\/\/        while(in.hasNext()){\n\/\/\/\/            System.out.println(in.next());\n\/\/            out.write(in.nextLine()); \/\/ in.next() retrieves next token\n\/\/        }\n        out.close();\n    }\n\n    public String solve(int tot, int[] p){\n        if(tot == 0)return \"\";\n\/\/        printParties(p);\n        String out = \"\";\n        if(tot % 2 == 1){\n            int max = 0;\n            for(int i=0; i<p.length; i++){\n                if(p[i] > p[max])max = i;\n            }\n            int m = max;\n            p[m]--;\n            tot--;\n            out += Character.toChars('A'+m)[0] + \" \";\n        }\n        while(tot > 0){\n            int max = 0;\n            for(int i=0; i<p.length; i++){\n                if(p[i] > p[max])max = i;\n            }\n            int m = max;\n            p[m]--;\n            tot--;\n            out += Character.toChars('A'+m)[0];\n            int max = 0;\n            for(int i=0; i<p.length; i++){\n                if(p[i] > p[max])max = i;\n            }\n            m = max;\n            p[m]--;\n            tot--;\n            out += Character.toChars('A'+m)[0] + \" \";\n        }\n        return out;\n    }\n\n\n}"}
{"idx":"1523","func":"class A {\n    public static void main(String[] args) throws FileNotFoundException {\n        FileInputStream fin = new FileInputStream(\"A-large.in.txt\");\n        Scanner scanner = new Scanner(fin);\n        FileOutputStream fout = new FileOutputStream(\"A-large.out.txt\");\n        PrintWriter writer = new PrintWriter(fout);\n        int testCount = scanner.nextInt();\n        for (int testCase = 1; testCase <= testCount; ++testCase) {\n            int n = scanner.nextInt();\n            int[] a = new int[n];\n            for (int i = 0; i < n; ++i) {\n                a[i] = scanner.nextInt();\n            }\n            writer.printf(\"Case #%d: %s\\n\", testCase, solve(a));\n        }\n        writer.close();\n    }\n\n    private static String solve(int[] a) {\n        int n = a.length;\n\n        int sum = 0;\n        for (int i = 0; i < n; ++i) {\n            sum += a[i];\n        }\n\n        String res = \"\";\n        int n1 = a.length;\n        int idx1 = -1;\n        int max = 0;\n        for (int i = 0; i < n1; ++i) {\n            if (a[i] > max) {\n                max = a[i];\n                idx1 = i;\n            }\n        }\n        int idx = idx1;\n        while (true) {\n            --a[idx];\n            --sum;\n            res += (char)('A' + idx);\n            if (sum == 0) {\n                break;\n            }\n            int n2 = a.length;\n            int idx2 = -1;\n            int max = 0;\n            for (int i = 0; i < n2; ++i) {\n                if (a[i] > max) {\n                    max = a[i];\n                    idx2 = i;\n                }\n            }\n            idx = idx2;\n            if (a[idx] * 2 <= sum) {\n                res += \" \";\n            }\n        }\n        return res;\n    }\n}"}
{"idx":"1524","func":"class D {\n    public static void main(String [] args) throws Exception\n    {        \n        Scanner sc = new Scanner(new File(\"D\/large.txt\"));\n        PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(new File(\"src\/D.txt\"))));\n        int size = sc.nextInt();\n        sc.nextLine();\n        \n        for (int i=0; i<size; i++) {\n            \n            int length = sc.nextInt();\n            System.out.println(length);\n            \n            \/\/ Case #\n            writer.print(\"Case #\" + (i+1) + \":\");\n            System.out.print(\"Case #\" + (i+1) + \":\");\n            \n            \n            \/\/ Solve\n            int max = -1;\n            int index = -1;\n            int[] line = new int[length];\n            for(int j=0; j<length; j++) {\n                line[j] = sc.nextInt();\n                if(line[j]>max) {\n                    index = j;\n                    max = line[j];\n                }\n            }\n            \n            while(max!=0) {\n                int i1 = -1;\n                int i2 = -1;\n                int count = 0;\n                for(int j=0; j<length; j++) {\n                    if(line[j]==max) {\n                        i2 = i1;\n                        i1 = j;\n                        count++;\n                    }\n                }\n                \n                \n                if(count%2==0) {\n                    line[i1]--;\n                    line[i2]--;\n                    writer.print(\" \" + String.valueOf((char)(i1 + 65)) + String.valueOf((char)(i2 + 65)));\n                    System.out.print(\" \" + String.valueOf((char)(i1 + 65)) + String.valueOf((char)(i2 + 65)));\n                }\n                else {\n                    line[i1]--;\n                    writer.print(\" \" + String.valueOf((char)(i1 + 65)));\n                    System.out.print(\" \" + String.valueOf((char)(i1 + 65)));\n                }\n                \n                \n                \n                max = 0;\n                for(int j=0; j<length; j++) {\n                    if(line[j]>max) {\n                        index = j;\n                        max = line[j];\n                    }\n                }\n            }\n            \n\n\n            \n            \n            \n            \/\/ Print result\n\n\n            \n            \n            writer.println(\"\");\n            System.out.println(\"\");\n        }\n\n        writer.close();\n        sc.close();\n    }\n}"}
{"idx":"1525","func":"class Codejam {\n    final static String PROBLEM_NAME = \"A-small\";\n    final static String WORK_DIR = \"C:\\\\Users\\\\Ketan\\\\Documents\\\\NetBeansProjects\\\\codejam\\\\src\\\\\";\n    final static String INPUT_FILE_NAME = PROBLEM_NAME+\".in\";\n    final static String OUTPUT_FILE_NAME = PROBLEM_NAME+\".out\";\n\n    static int[][] maxBest = new int[31][2];\n\n    char digittochar(int i) {\n            char c;\n            c = (char) (i+65);\n            return c;\n        }\n        \n    public static void main(String[] args) throws Exception {\n        try (\n                    Scanner sc = new Scanner(new FileReader(WORK_DIR+INPUT_FILE_NAME));\n                    PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR+OUTPUT_FILE_NAME))\n                ) \n            {\n                int caseCnt = sc.nextInt();\n                for (int caseNum = 0; caseNum < caseCnt; caseNum++) {\n                        System.out.println(\"Processing test case \" + (caseNum + 1));\n                        pw.print(\"Case #\" + (caseNum + 1) + \": \");\n                        Codejam r = new Codejam();\n                        int n = sc.nextInt();\n                        int[] arr = new int[n];\n                        int sum = 0;\n                        for(int i=0; i<n; i++) {\n                            arr[i] = sc.nextInt();\n                            sum += arr[i];\n                        }\n                        boolean even = sum%2==0 ? true : false;\n                        boolean stop = false;\n                        while(!stop) {\n                            int m1 = 0;\n                            int m1i = 0;\n                            int m2 = 0;\n                            int m2i = 0;\n                            for(int i=0; i<n; i++){\n                                if(m1 < arr[i] && arr[i] > 0){\n                                    m2 = m1;\n                                    m2i = m1i;\n                                    m1 =arr[i];\n                                    m1i = i;\n                                } else if(m2 < arr[i] && arr[i] > 0){\n                                    m2 = arr[i];\n                                    m2i = i;\n                                }\n                            }\n                            if (!even) {\n                                pw.print(r.digittochar(m1i));\n                                arr[m1i]--;\n                                even = true;\n                            }\n                            else if(m1 > 0 && m2 > 0) {\n                                pw.print(r.digittochar(m1i)+\"\"+r.digittochar(m2i));\n                                arr[m1i]--;\n                                arr[m2i]--;\n                            }\n                            else if(m1 > 0 && m2 <= 0) {\n                                pw.print(r.digittochar(m1i));\n                                arr[m1i]--;\n                            }\n                            else\n                                stop = true;\n                            pw.print(\" \");\n                        }\n                        pw.println();\n                }\n                pw.flush();\n            }\n    }\n}"}
{"idx":"1526","func":"class Senate {\n\n    public static void main(String[] args) throws Exception {\n        Senate object = new Senate();\n        String className = object.getClass().getSimpleName();\n\n        FileReader fileReader = new FileReader(new File(className.toLowerCase() + \".in\"));\n        StreamTokenizer st = new StreamTokenizer(new BufferedReader(fileReader));\n\n        FileWriter wr = new FileWriter(className.toLowerCase() + \".out\");\n\n        st.nextToken();\n        int testCases = (int) st.nval;\n\n        for (int tc = 1; tc <= testCases; tc++) {\n\n            System.out.println(\"At test \" + tc + \"\/\" + testCases);\n\n            st.nextToken();\n            int N = (int) st.nval;\n\n            int[] P = new int[N];\n\n            for (int i = 0; i < N; i++) {\n                st.nextToken();\n                P[i] = (int) st.nval;\n            }\n            List<String> output = new ArrayList<>();\n            \n            Map<Character, Integer> count = new HashMap<>();\n            \n            for (int i = 0; i < P.length; i++) {\n                count.put((char) ('A' + i), P[i]);\n            }\n            \n            while (count.size() > 0) {\n            \n                int maxOccurs = 0;\n                List<Character> occurs = new ArrayList<>();\n            \n                for (Character ch : count.keySet())\n                    maxOccurs = Math.max(maxOccurs, count.get(ch));\n            \n                for (Character ch : count.keySet())\n                    if (count.get(ch) == maxOccurs)\n                        occurs.add(ch);\n            \n                if ((occurs.size() % 2) == 1) {\n                    \/\/ choose one\n                    char ch = occurs.get(0);\n            \n                    count.put(ch, maxOccurs - 1);\n            \n                    if (maxOccurs - 1 == 0) {\n                        count.remove(ch);\n                    }\n            \n                    output.add(\"\" + ch);\n                } else {\n                    \/\/ remove two\n                    char ch1 = occurs.get(0);\n                    char ch2 = occurs.get(1);\n            \n                    count.put(ch1, maxOccurs - 1);\n                    count.put(ch2, maxOccurs - 1);\n            \n                    if (maxOccurs - 1 == 0) {\n                        count.remove(ch1);\n                        count.remove(ch2);\n                    }\n            \n                    output.add(\"\" + ch1 + \"\" + ch2);\n                }\n            \n            }\n\n            List<String> result = output;\n\n            StringBuilder sb = new StringBuilder();\n            for (String str : result) {\n                sb.append(str + \" \");\n            }\n\n            wr.write(\"Case #\" + tc + \": \" + sb.toString().trim() + \"\\r\\n\");\n        }\n\n        wr.close();\n    }\n}"}
{"idx":"1527","func":"class CodeJamQuestion {\n\n    public static void main(String[] args) {\n        try {\n            Scanner in = new Scanner(new File(\"A-large.in\"));\n            PrintWriter out = new PrintWriter(\"A-large.out\");\n\n            \/\/int tests = Integer.parseInt(in.nextLine());\n            int tests = in.nextInt();\n            \n            for (int test = 1; test <= tests; test++) {\n                String answer = \"Case #\" + test + \": \";\n                int n = in.nextInt();\n                int[] ps = new int[n];\n                for(int i=0;i<n;i++){\n                    int temp = in.nextInt();\n                    ps[i] = temp;\n                }\n                \n                int greatest = 1;\n                int great = 0; \n                if(ps[0]>ps[1]){\n                    greatest = 0;\n                    great = 1;\n                }\n                \n                \n                for(int i=2;i<n;i++){\n                    if(ps[greatest] < ps[i]){\n                        great = greatest;\n                        greatest = i;\n                    }\n                    else if(ps[great]< ps[i]) great = i;\n                }\n                \n                while(ps[great]+1 < ps[greatest]){\n                    answer += ((char)('A'+greatest)) + \"\" + ((char)('A'+greatest)) + \" \";\n                    ps[greatest] -= 2;\n                }\n                \n                if(ps[great] < ps[greatest]){\n                    answer += ((char)('A'+greatest)) + \" \";\n                    ps[greatest]--;\n                }\n                \n                for(int i=0;i<n;i++){\n                    if(i!=greatest && i!=great){\n                        while(ps[i]>1){\n                            answer += ((char)('A'+i)) + \"\" + ((char)('A'+i)) + \" \";\n                            ps[i]-=2;\n                        }\n                        if(ps[i]==1){\n                            answer += ((char)('A'+i)) + \" \";\n                            ps[i]-=1;                            \n                        }\n                    }\n                }\n                for(int i=0;i<ps[greatest];i++) answer += ((char)('A'+greatest)) + \"\" + ((char)('A'+great)) + \" \";\n                \n                out.println(answer);\n            }\n            in.close();\n            out.close();\n        } catch (FileNotFoundException ex) {\n            System.out.println(\"ERROR\");\n        }\n\n    }\n    \n}"}
{"idx":"1528","func":"class A {\n\n    private final String problemName = \"A\";\n    \/\/private final String inTheMiddle = \"-small\";\n    private final String inTheMiddle = \"-large\";\n    private final String inTheEnd = \"\";\n    \/\/private final String inTheEnd = \"-attempt0\";\n    private int caseC;\n\n    public static void main(String[] args) throws IOException {\n        A my = new A();\n        BufferedReader r = new BufferedReader(new FileReader(new File(my.problemName+my.inTheMiddle+my.inTheEnd+\".in\")));\n        BufferedWriter w = new BufferedWriter(new FileWriter(my.problemName+my.inTheMiddle+my.inTheEnd+\".out\"));\n        my.caseC = Integer.parseInt(r.readLine());\n        for (int c=0; c<my.caseC;c++) {\n            w.write(\"Case #\" + (c+1) +\": \");\n            int N = Integer.parseInt(r.readLine());\n            int[] partySize = new int[N];\n            String[] args1 = r.readLine().split(\"\\\\s+\");\n            int sum = 0;\n            for(int i=0 ; i<N ; i++) {\n                partySize[i] = Integer.parseInt(args1[i]);\n                sum += partySize[i];\n            }\n            while(sum!=0) {\n                int biggestPartyIndex1 = -1;\n                int biggestPartyIndex2 = -1;\n                int biggestPartySize = 0;\n                for(int i=0 ; i<N ; i++) {\n                    if(partySize[i]>biggestPartySize) {\n                        biggestPartyIndex1 = i;\n                        biggestPartySize = partySize[i];\n                        biggestPartyIndex2 = -1;\n                    } else if(partySize[i]==biggestPartySize) {\n                        biggestPartyIndex2 = i;\n                    }\n                }\n                int evacuated = (biggestPartyIndex1==-1 ? 0 : 1) + (biggestPartyIndex2==-1 ? 0 : 1);\n                if(sum!=3) {\n                    w.write((biggestPartyIndex1 == -1 ? \"\" : (char) ('A' + biggestPartyIndex1)) + \"\" + (biggestPartyIndex2 == -1 ? \"\" : (char) ('A' + biggestPartyIndex2)));\n                    if (sum - evacuated != 0) {\n                        w.write(\" \");\n                    }\n                    sum -= evacuated;\n                    if (biggestPartyIndex1 != -1) {\n                        partySize[biggestPartyIndex1] -= 1;\n                    }\n                    if (biggestPartyIndex2 != -1) {\n                        partySize[biggestPartyIndex2] -= 1;\n                    }\n                } else {\n                    w.write((biggestPartyIndex1 == -1 ? \"\" : (char) ('A' + biggestPartyIndex1)) + \" \");\n                    sum -= 1;\n                    if (biggestPartyIndex1 != -1) {\n                        partySize[biggestPartyIndex1] -= 1;\n                    }\n                }\n            }\n            w.write(\"\\n\");\n        }\n        r.close();\n        w.close();\n    }\n\n}"}
{"idx":"1529","func":"class SenateEvacuation {\n\n\n    public static void main(String[] args){\n\n\n        Scanner input;\n        Formatter output;\n        int a=1,b = 1;\n        try{\n            output = new Formatter( \"output.txt\" );\n            input = new Scanner(new File( \"A-large(1).in\" ));\/\/Change to console while coding\n            \/\/input = new Scanner(System.in);\n            int T = input.nextInt();\n\n            char[] letters = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n            for (int i = 0 ; i < T ; i++ ) {\n\n                int N = input.nextInt();\n                int[] P = new int[N];\n                for( int j = 0 ; j < N ;j++ ){\n                    P[j] = input.nextInt();\n                }\n\n                int hold = 0;\n                boolean cont = true;\n\n                output.format(\"Case #%d: \",(i+1));\n                while( cont){\n                    int largest = 0;\n                    int num = 0;\n                    for( int j = 0 ; j < N ;j++ ){\n                        num += P[j];\n                    }\n\n                    int count = 0;\n                    for( int j = 0 ; j < N ;j++ ){\n                        if(P[j] == 0){\n                            cont = false;\n                            count++;\n                        }\n                        else{\n                            cont = true;\n                            break;\n                        }\n                    }\n                    if(count == N){\n                        break;\n                    }\n                    for( int j = 0 ; j < N ;j++ ){\n                        if(P[j] > largest){\n                            hold = j;\n                            largest = P[j];\n                        }\n                    }\n                    System.out.println(\"hold \" + hold);\n                    output.format(\"%c\",letters[hold]);\n\n                    P[hold]-= 1;\n                    largest = 0;\n                    count = 0;\n                    if(num %2 != 0){\n                        output.format(\" \");\n                        continue;\n                    }\n                    for( int j = 0 ; j < N ;j++ ){\n                        if(P[j] == 0){\n                            cont = false;\n                            count++;\n                        }\n                        else{\n                            cont = true;\n                            break;\n                        }\n                    }\n                    if(count == N){\n                        break;\n                    }\n                    for( int j = 0 ; j < N ;j++ ){\n                        if(P[j] > largest){\n                            hold = j;\n                            largest = P[j];;\n                        }\n                    }\n                    System.out.println(\"hold \" + hold);\n                    output.format(\"%c \",letters[hold]);\n                    P[hold]--;\n                }\n\n                output.format(\"\\n\");\n\n            }\n            output.close();\n        }\n        catch (Exception e){\n            e.printStackTrace();\n        }\n\n\n\n\n    }\n\n\n}"}
{"idx":"1530","func":"static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"A.in\"));\n        PrintWriter out = new PrintWriter(new File(\"A.out\"));\n        \n        int tt = in.nextInt();\n        in.nextLine();\n        for(int tc=1; tc<=tt; tc++) {            \n            int n = in.nextInt();\n            int[] a = new int[n];\n            for(int i=0; i<n; i++) {\n                a[i] = in.nextInt();\n            }\n            \n            out.print(\"Case #\"+tc+\": \");\n            \n            if (n > 2) {\n                int m1, i1;            \n                while (true) {\n                    m1 = 0;\n                    i1 = -1;\n                    for(int i=0; i<n; i++) {\n                        if (a[i] >= m1) {\n                            m1 = a[i];\n                            i1 = i;\n                        }\n                    }\n                    if (m1 == 1) break;\n                    out.print((char)((int)'A'+i1)+\" \");\n                    a[i1]--;            \n                }\n                out.print((char)((int)'A'+n-1)+\" \");\n                for(int i=0; i<n-1; i+=2) {\n                    out.print((char)((int)'A'+i)+\"\"+(char)((int)'A'+i+1)+\" \");\n                }\n            } else {\n                if (a[0] == a[1]) {\n                    for(int i=0; i<a[0]; i++) {\n                        out.print(\"AB \");\n                    }\n                } else {\n                    if (a[0] > a[1]) {\n                        for(int i=a[0]; i>a[1]; i--) {\n                            out.print(\"A \");\n                        }\n                        for(int i=0; i<a[1]; i++) {\n                            out.print(\"AB \");\n                        }\n                    } else {\n                        for(int i=a[1]; i>a[0]; i--) {\n                            out.print(\"B \");\n                        }\n                        for(int i=0; i<a[0]; i++) {\n                            out.print(\"AB \");\n                        }\n                    }                    \n                }                \n            }\n            out.println();\n        }\n        \n        out.close();\n        in.close();\n    }\n}"}
{"idx":"1531","func":"class SenateEvacuation {\n    static PrintWriter writer;\n\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n        Scanner sc = new Scanner(new File(\"in.txt\"));\n        writer = new PrintWriter(\"out.txt\", \"UTF-8\");\n        int T = sc.nextInt();\n        for (int t = 0; t < T; t++) {\n            int n = sc.nextInt();\n            int[] s = new int[n];\n            int count = 0;\n            for (int i = 0; i < n; i++) {\n                s[i] = sc.nextInt();\n                count += s[i];\n            }\n            System.out.println(Arrays.toString(s));\n            String evac = \"\";\n            while (count > 0) {\n\n                ArrayList<Integer> candidate = new ArrayList<>();\n                \/\/ for (int i=0;i<n;i++)candidate.add(i);\n\n                top: for (int i = 0; i < n; i++) {\n                    for (int k = 0; k < n; k++) {\n\/\/                        System.out.println(Arrays.toString(s));\n                        boolean ij = false;\n                        boolean ik = false;\n                        if (s[i] > 0) {\n                            s[i]--;\n                            count--;\n                            ij = true;\n                        }\n                        if (s[k] > 0) {\n                            s[k]--;\n                            count--;\n                            ik = true;\n                        }\n                        if (!ij&&!ik)continue;\n                        boolean flag = true;\n                        for (int j = 0; j < n; j++) {\n                            if (s[j] > count \/ 2) {\n                                flag = false;\n                                break;\n                            }\n                        }\n                        if (flag) {\n                            if (ij) {\n                                candidate.add(i);\n                            }\n                            if (ik)\n                                candidate.add(k);\n                            break top;\n                        } else {\n                            if (ij) {\n                                s[i]++;\n                                count++;\n                            }\n                            if (ik) {\n                                s[k]++;\n                                count++;\n                            }\n                        }\n                    }\n                }\n                for (int i : candidate) {\n                    evac += (char) (65 + i);\n                    \/\/ s[i]--;\n                    \/\/ count--;\n                }\n                evac += \" \";\n                \/\/ System.out.println(evac);\n\n            }\n\n            evac = evac.substring(0, evac.length() - 1);\n            String s1 = \"Case #\" + (t + 1) + \": \" + evac;\n            writer.println(s1);\n            System.out.println(s1);\n        }\n        writer.close();\n    }\n}"}
{"idx":"1532","func":"class Senate{\n \n     public static void main(String args[])throws Exception{\n     \n     BufferedReader br=new BufferedReader(new FileReader(\"E:\/gcj16\/senate.txt\"));\n     PrintWriter pw=new PrintWriter(\"E:\/gcj16\/senate_out.txt\");\n\n     int tc=Integer.parseInt(br.readLine())+1;\n     int i=0,j=0,k=0,l=0,min=0,max=1001,i1=0,n=0;\n     int []ax=null;\n     int count=0;\n     StringTokenizer st=null;\n     String temp=\"\",op=\"\";\n     for(i1=1;i1<tc;i1++)\n          {\n                    ax=new int[26];\n            count=0;\n            n=Integer.parseInt(br.readLine());\n            st=new StringTokenizer(br.readLine());\n            for(i=0;i<n;i++){\n                ax[i]=Integer.parseInt(st.nextToken());\n                count+=ax[i];\n            }\n                    op=\"\";\n            while(count>0)\n            {       max=-1;\n                for(i=0;i<n;i++)\n                             if(ax[i]>max)\n                     max=ax[i];\n\n                            j=count!=3?2:1;\n                for(i=0;i<n&&j>0;i++)\n                    if(ax[i]==max)\n                    {\n                        j--;\n                        count--;\n                        ax[i]--;\n                        op+=(\"\"+((char)(65+i)));\n                    }\n                op+=\" \";\n\n            }\n            System.out.println(\"Case #\"+i1+\": \"+op.trim());\n            pw.println(\"Case #\"+i1+\": \"+op.trim());\n\n\n          }\n\n      pw.close();\n     \n     \n     }\n\n\n\n}"}
{"idx":"1533","func":"class Senator {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        \/\/ TODO Auto-generated method stub\n        \n        File file = new File(\"input2\");\n        \n        BufferedReader br = new BufferedReader(new FileReader(file));\n        \n        int tcs = Integer.parseInt(br.readLine());\n        \n        while(tcs-- > 0){\n            \n            Map<Integer,Character> alphabets = new HashMap<Integer,Character>();\n            \n            alphabets.put(1,'A');\n            alphabets.put(2,'B');\n            alphabets.put(3,'C');\n            alphabets.put(4,'D');\n            alphabets.put(5,'E');\n            alphabets.put(6,'F');\n            alphabets.put(7,'G');\n            alphabets.put(8,'H');\n            alphabets.put(9,'I');\n            alphabets.put(10,'J');\n            alphabets.put(11,'K');\n            alphabets.put(12,'L');\n            alphabets.put(13,'M');\n            alphabets.put(14,'N');\n            alphabets.put(15,'O');\n            alphabets.put(16,'P');\n            alphabets.put(17,'Q');\n            alphabets.put(18,'R');\n            alphabets.put(19,'S');\n            alphabets.put(20,'T');\n            alphabets.put(21,'U');\n            alphabets.put(22,'V');\n            alphabets.put(23,'W');\n            alphabets.put(24,'X');\n            alphabets.put(25,'Y');\n            alphabets.put(26,'Z');\n            \n            int n = Integer.parseInt(br.readLine());\n            \n            List<Long> senators = new ArrayList<Long>();\n            \n            String s[] = br.readLine().split(\" \");\n            \n            for(int i = 0; i < s.length; i++){\n                senators.add(Long.parseLong(s[i]));\n            }\n\n            while(!(Collections.frequency(senators, (long)0) == senators.size())){\n                String x=\"\";\n                for(int i = 0; i < 2; i++){\n                    \n                    int index = senators.indexOf(Collections.max(senators));\n                    if(senators.get(index) == 0){\n                        break;\n                    }\n                    if(Collections.frequency(senators, (long)1) > 2 && Collections.frequency(senators, (long)1) % 2 > 0){\n                        senators.set(index, senators.get(index) - 1);\n                        x=\"\"+alphabets.get(index + 1);\n                        break;\n                    }\n                    senators.set(index, senators.get(index) - 1);\n                    x = x + alphabets.get(index + 1);\n                }\n            \n                System.out.print(x);\n                System.out.print(\" \");\n            }\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"1534","func":"class A {\n    public static void main(String[] args) {\n        Scanner in = null;\n        A a = new A();\n        try {\n            in = new Scanner(System.in);\n            int count = in.nextInt();\n            for (int test = 1; test <= count; test++) {\n                int N = in.nextInt();\n                int[] sen = new int[N];\n                int totalNum = 0;\n                for (int i = 0; i < N; i++) {\n                    sen[i] = in.nextInt();\n                    totalNum += sen[i];\n                }\n                int totalNum1 = totalNum;\n                StringBuilder result1 = new StringBuilder();\n                int start = 'A';\n                while (totalNum1 > 0) {\n                    int max1 = 0;\n                    int max2 = 0;\n                    int max3 = 0;\n                    int maxSen1 = 0;\n                    int maxSen2 = 0;\n                    for (int i = 0; i < N; i++) {\n                        if (sen[i] > max1) {\n                            maxSen1 = i;\n                            max1 = sen[i];\n                        }\n                    }\n                    sen[maxSen1]--;\n                    for (int i = 0; i < N; i++) {\n                        if (sen[i] > max2) {\n                            maxSen2 = i;\n                            max2 = sen[i];\n                        }\n                    }\n                    sen[maxSen2]--;\n                    if (totalNum1 > 2) {\n                        max3 = 0;\n                        for (int i = 0; i < N; i++) {\n                            if (sen[i] > max3) {\n                                max3 = sen[i];\n                            }\n                        }\n                        if (max3 == max2) {\n                            char x = (char) (start + maxSen1);\n                            result1.append(x);\n                            totalNum1--;\n                            sen[maxSen2]++;\n                        } else {\n                            char x = (char) (start + maxSen1);\n                            result1.append(x);\n                            totalNum1--;\n                            x = (char) (start + maxSen2);\n                            result1.append(x);\n                            totalNum1--;\n                        }\n                    } else {\n                        if (max1 == max2 || maxSen1 == maxSen2) {\n                            char x = (char) (start + maxSen1);\n                            result1.append(x);\n                            totalNum1--;\n                            x = (char) (start + maxSen2);\n                            result1.append(x);\n                            totalNum1--;\n                        } else {\n                            char x = (char) (start + maxSen1);\n                            result1.append(x);\n                            totalNum1--;\n                            sen[maxSen2]++;\n                        }\n                    }\n                    result1.append(\" \");\n                }\n                String result = result1.toString();\n                System.out.println(\"Case #\" + test + \": \" + result);\n            }\n            in.close();\n        } catch (Exception e) {\n            \/\/ TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1535","func":"class Senate{\n    \/\/static String filename = \"A-sample\";            \/\/ io filename here, change accordingly\n    \/\/static String filename = \"A-small-attempt0\";    \n    static String filename = \"A-large\";    \n    static String inname = filename + \".in\";    \n    static String outname = filename + \".out\";  \n    public static void main(String[] args){\n        try{\n            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));\n            \/\/Scanner in = new Scanner(System.in);\n            BufferedWriter out = new BufferedWriter(new FileWriter(outname));\n            int t = in.nextInt();\n            in.nextLine();\n            for (int cas = 1; cas <= t; cas++){\n                int n = in.nextInt();\n                int[] p = new int[n];\n                for (int i = 0; i < n; i++) p[i] = in.nextInt();\n                int n1 = p.length;\n                int max1 = 0;\n                int max2 = 0;\n                for (int i = 0; i < n1; i++)\n                    if (p[i] > p[max1]) max1 = i;\n                if (max1 == 0) max2 = 1;\n                for (int i = 0; i < n1; i++)\n                    if (i != max1 && p[i] > p[max2]) max2 = i;\n                String ans1 = \"\";\n                int ptr = 0;\n                while (p[max1] > p[max2]){\n                    for (; ptr < n1; ptr++){\n                        if (ptr == max1 || ptr == max2) continue;\n                        while (p[ptr] > 0){\n                            ans1 += (\"\"+(char)('A'+max1)) + (\"\"+(char)('A'+ptr)) + \" \";\n                            p[max1]--;\n                            p[ptr]--;\n                            if (p[max1] <= p[max2]) break;\n                        }\n                        if (p[max1] <= p[max2]) break;\n                    }\n                }\n                for (; ptr < n1; ptr++){\n                    if (ptr == max1 || ptr == max2) continue;\n                    if (p[ptr] <= 0) continue;\n                    for (int i = ptr+1; i < n1; i++){\n                        if (i == max1 || i == max2) continue;\n                        while (p[i] > 0){\n                            ans1 += (\"\"+(char)('A'+ptr)) + (\"\"+(char)('A'+i)) + \" \";\n                            p[i]--;\n                            p[ptr]--;\n                            if (p[ptr] <= 0) break;\n                        }\n                        if (p[ptr] <= 0) break;\n                    }\n                }\n                for (int i = 0; i < n1; i++){\n                    if (i == max1 || i == max2) continue;\n                    while (p[i] > 0){\n                        ans1 += (\"\"+(char)('A'+i))+ \" \";\n                        p[i]--;\n                    }\n                }\n                while (p[max1] > 0){\n                    ans1 += (\"\"+(char)('A'+max1)) + (\"\"+(char)('A'+max2)) + \" \";\n                    p[max1]--;\n                    p[max2]--;\n                }\n                String ans = ans1;\n\n                String s = in.nextLine();\n                \n                System.out.print(\"Case #\" + cas + \": \" + ans + \"\\n\");\n                out.write(\"Case #\" + cas + \": \" + ans + \"\\n\");\n            }\n            in.close();\n            out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1536","func":"class A {\n    public static void main(String[] args) {\n         try {\n\n             Scanner scanner = (new Scanner(new File(\"c:\/users\/rafal\/ideaprojects\/src\/Ain.txt\")));\n\n\n             FileOutputStream out = new FileOutputStream(\"c:\/users\/rafal\/ideaprojects\/src\/Aout.txt\");\n\n             int numberOfCases;\n             numberOfCases = scanner.nextInt();\n             scanner.nextLine();\n\n             PrintWriter wr = new PrintWriter(out);\n             for (int i = 0; i < numberOfCases; i++) {\n                 int caseNumber = i + 1;\n                int n = scanner.nextInt();\n                \n                int largestIdx = 0;\n                int []p = new int[n];\n                int sum = 0;\n                for (int i1 = 0; i1 < n ; i1++) {\n                    p[i1] = scanner.nextInt();\n                    if (p[i1] > p[largestIdx]) {\n                        largestIdx = i1;\n                    }\n                    sum += p[i1];\n                }\n                \n                StringBuffer result = new StringBuffer();\n                int largest = p[largestIdx];\n                \n                int idx = 0;\n                while (sum > 2 * largest) {\n                    \/\/ remove one\n                    if (idx == largestIdx) {\n                        idx++;\n                    }\n                    if (p[idx] > 0) {\n                        p[idx]--;\n                        sum--;\n                        result.append(\" \" + (char)('A' + idx));\n                    } else {\n                        idx++;\n                    }\n                }\n                \n                while (sum > 0) {\n                    \/\/ remove one\n                    if (idx == largestIdx) {\n                        idx++;\n                    }\n                    if (p[idx] > 0) {\n                        p[idx]--;\n                        sum -= 2;\n                        result.append(\" \" + (char)('A' + idx));\n                        result.append((char)('A' + largestIdx));\n                    } else {\n                        idx++;\n                    }\n                }\n                \n                \n                wr.println(\"Case #\" + caseNumber + \": \" + result);\n                System.out.println(\"Case #\" + caseNumber + \": \" + result);\n                \/\/ ...\n                 if (i < numberOfCases - 1)\n                    scanner.nextLine();\n             }\n             wr.close();\n             out.close();\n\n         } catch (IOException e) {\n             System.out.println(\"Error: \" + e);\n         }\n     }\n\n\n}"}
{"idx":"1537","func":"class Round1C_A {\n\n\n    public static void main(String []args) throws IOException {\n\n        FileReader fr = new FileReader(\"A-large11.in\");\n        BufferedReader br = new BufferedReader(fr);\n        String s;\n\n\n        \/\/Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int T;\n        if((s = br.readLine()) != null)\n            T = Integer.parseInt(s);\/\/c.nextInt();\n        else\n        {\n            System.out.println(\"File has nothing to read.\");\n            return;\n        }\n        if(T < 1 || T > 100) {\n            System.out.println(\"Improper number of test cases.\");\n            return;\n        }\n\n        int N;\n        int arr[], temp[];\n        for(int k = 0;k < T;k++) {\n            if((s = br.readLine()) != null)\n                N = Integer.parseInt(s);\/\/c.nextInt();\n            else {\n                System.out.println(\"File has nothing to read.\");\n                return;\n            }\n            arr = new int[N];\n            if((s = br.readLine()) == null) {\n                System.out.println(\"File has nothing to read.\");\n                return;\n            }\n            Scanner sc;\n            sc = new Scanner(s);\n            int p = 0;\n            while(sc.hasNext()) {\n                arr[p] = sc.nextInt();p++;\n            }\n            \n            int tot, max, secmax;tot = 0;\n            for(int i = 0;i < N;i++)\n                tot += arr[i];    \n            int print[];\n            int printIndex;\n            print = new int[2002];Arrays.fill(print, -1);\n            printIndex = 0;\n\n            while(true) {\n                \/\/temp = Arrays.copyOf(arr, N);\n                \/\/Arrays.sort(temp);\n                int maxpos, secmaxpos;maxpos = 0;max = arr[0];\n                for(int i = 1;i < N;i++) {\n                    if(arr[i] > max) {\n                        max = arr[i];\n                        maxpos = i;\n                    }\n                }\n                    \n                boolean flag, tflag;tflag = false;\n                flag = false;\n                int tcount;\n                tcount = 0;\n                if(max == 1) {\n                    int count;\n                    count = 0;\n                    for(int i = 0;i < N;i++) {\n                        if(arr[i] == 1)\n                            count++;\n                        if(arr[i] == 0)\n                            tcount++;\n                    }\n                    if(tcount == N) {\n                        tflag = true;\n                        break;\n                    }\n                    if(count == 3)\n                        flag = true;\n                }\n                if(!flag) {\n                    print[printIndex++] = maxpos;\n                    secmax = -1;secmaxpos = 0;\n                    for(int i = 0;i < N;i++) {\n                        if(i != maxpos && arr[i] > secmax) {\n                            secmax = arr[i];\n                            secmaxpos = i;\n                        }    \n                    }\n                    print[printIndex++] = secmaxpos;\n                    arr[maxpos]--;\n                    arr[secmaxpos]--;\n                    print[printIndex++] = -2;\n                }\n                else {\n                    print[printIndex++] = maxpos;\n                    arr[maxpos]--;\n                    print[printIndex++] = -2;\n\n                    for(int i = 0;i < N;i++) \n                        if(arr[i] == 1) { \n                            print[printIndex++] = i;\n        arr[i]--;}            break;\n                }\n                \n                tot = 0;\n                for(int i = 0;i < N;i++)\n                    tot += arr[i];\n                if(tot == 0)\n                    break;    \n\n            }    \n\n\n            System.out.print(\"Case #\" + (k + 1) + \": \");\n            for(int j = 0;j < 2000 && print[j] != -1;j++) \n                if(print[j] != -2) \n                    System.out.print(  ((char)(print[j] + 65)) );\n                else\n                    System.out.print(\" \");\n                \n            System.out.println();    \n            \n        }\n\n    }\n\n}"}
{"idx":"1538","func":"class roundOne{\n\n    int val;\n    char c;\n    \n    public roundOne(int val, char c)\n    {\n        this.val = val;\n        this.c = c;\n    }\n    \n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong();\n        \n        \n        for(long i = 0; i < n;)\n        {\n            i++;\n            \n            ArrayList<roundOne> hm = new ArrayList<roundOne>();\n            \n            int numberOfParties = sc.nextInt();\n            \n            char c = 'A';\n            \n            int sum = 0;\n            for(int k = 0; k < numberOfParties; k++)\n            {\n                int p = sc.nextInt();\n                sum = sum + p;\n                hm.add(new roundOne(p, c++));\n            }\n            \n            System.out.print(\"Case #\" + i + \":\");\n            Collections.sort(hm, new Comparator<roundOne>(){\n                    public int compare(roundOne o1, roundOne o2){\n                        if(o1.val == o2.val)\n                            return 0;\n                        return o1.val < o2.val ? 1 : -1;\n                    }\n               });\n            roundOne r1, r2;\n            \n            do\n            {\n                System.out.print(\" \");\n                r1 = hm.get(0);\n                \n                System.out.print(r1.c);\n                r1.val--;\n                \n                r2 = hm.get(1);\n                sum--;\n                \n                if(sum != 2)\n                {\n                    sum--;\n                    if(r1.val > r2.val) {\n                        System.out.print(r1.c);\n                        r1.val--;\n                    } else if(r2.val > 0) {\n                        System.out.print(r2.c);\n                        r2.val--;\n                    }\n                }\n                \n                    \n                \n                Collections.sort(hm, new Comparator<roundOne>(){\n                        public int compare(roundOne o1, roundOne o2){\n                            if(o1.val == o2.val)\n                                return 0;\n                            return o1.val < o2.val ? 1 : -1;\n                        }\n                   });    \n            }while(hm.get(0).val > 0);\n            \n            System.out.println();\n        }\n    }\n}"}
{"idx":"1539","func":"class Main\n{  \n\npublic static void main(String[] args)throws java.lang.Exception\n{\n\/\/BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\/\/PrintWriter out=new PrintWriter(System.out);\n\nBufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\nPrintWriter out=new PrintWriter(\"output.txt\");\n\n\nint x1,t,i,n,sum,new_sum,max1,max2;\nboolean found;\n\nString str=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nt=Integer.parseInt(in.readLine());\n\nfor(x1=0;x1<t;x1++)\n{\n    n=Integer.parseInt(in.readLine());\n\n    int[][] a=new int[n][2];\n\n    StringTokenizer st=new StringTokenizer(in.readLine());\n\n\n    sum=0;\n\n    for(i=0;i<n;i++)\n    {\n        a[i][0]=Integer.parseInt(st.nextToken());\n        a[i][1]=i;\n        sum+=a[i][0];\n    }\n\n\n    out.print(\"Case #\"+(x1+1)+\":\");\n\n    while(sum>0)\n    {\n        Arrays.sort(a,new Comparator<int[]>(){\n        public int compare(int[] c1,int[] c2)\n        {\n        int t2=c1[0]-c2[0];\n            return t2;\n        }\n        });\n\n\n\n        \/\/Arrays.sort(a);\n        max1=a[n-1][0];\n        max2=a[n-2][0];\n\n        new_sum=sum-2;\n\n\n        found=true;\n\n        if(new_sum>0)\n        {\n\n        for(i=0;i<n-2;i++)\n        {\n            if(a[i][0]\/new_sum>0.5)\n            {\n                found=false;\n            }\n        }\n\n        }\n\n\n        if(found)                \/\/    Remove two elements\n        {\n            out.print(\" \"+str.charAt(a[n-1][1])+str.charAt(a[n-2][1]));\n\n            a[n-1][0]--;\n            a[n-2][0]--;\n\n            sum-=2;\n        }\n        else                      \/\/  Remove one element\n        {\n            out.print(\" \"+str.charAt(a[n-1][1]));\n\n            a[n-1][0]--;\n\n            sum-=1;\n        }\n\n    }\n\n    out.println();\n\n}\n\n\n\nout.flush();\nout.close();\n}\n}"}
{"idx":"1540","func":"class Senate {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int numOfCases = scanner.nextInt();\n        for (int i = 1; i <= numOfCases; ++i) {\n            int numOfParties = scanner.nextInt();\n            List<Integer> parties = new ArrayList<>();\n            for (int v = 0; v < numOfParties; ++v) {\n                int num = scanner.nextInt();\n                parties.add(num);\n            }\n            final List<Integer> parties1 = parties;\n            StringBuffer sb = new StringBuffer(\"\");\n            int sum = parties1.stream().reduce(0, (a, v) -> a + v);;\n            while (sum != 0) {\n                if (sum % 2 == 1) {\n                    int max1 = 0;\n                    int position = -1;\n                    for (int i1 = 0; i1 < parties1.size(); i1++) {\n                        if (parties1.get(i1) > max1) {\n                            position = i1;\n                            max1 = parties1.get(i1);\n                        }\n                    }\n                    int max = position;\n                    parties1.set(max, parties1.get(max) - 1);\n                    sb.append(\" \").append((char)('A' + max));\n                } else {\n                    int max2 = 0;\n                    int position1 = -1;\n                    for (int i2 = 0; i2 < parties1.size(); i2++) {\n                        if (parties1.get(i2) > max2) {\n                            position1 = i2;\n                            max2 = parties1.get(i2);\n                        }\n                    }\n                    int max = position1;\n                    int max1 = 0;\n                    int position = -1;\n                    for (int i1 = 0; i1 < parties1.size(); i1++) {\n                        if (i1 != max && parties1.get(i1) > max1) {\n                            position = i1;\n                            max1 = parties1.get(i1);\n                        }\n                    }\n                    int max2nd = position;\n                    if (max2nd == -1) {\n                        System.err.println(\"Something wrong\");\n                        parties1.forEach(System.err::print);\n                        System.err.println(\" \" + sb.toString());\n                        throw new RuntimeException(\"Something went wrong\");\n                    } else {\n                        if ((((double) parties1.get(max2nd)) \/ ((double) (sum - 2))) >= 0.6){\n                            sb.append(\" \").append((char) ('A'+max)).append((char)('A'+max2nd));\n                            parties1.set(max, parties1.get(max) - 1);\n                            parties1.set(max2nd, parties1.get(max2nd) - 1);\n                        } else {\n                            sb.append(\" \").append((char)('A'+max)).append((char)('A'+max));\n                            parties1.set(max, parties1.get(max) - 2);\n                        }\n                    }\n                }\n                sum = parties1.stream().reduce(0, (a, v) -> a + v);\n            }\n            String plan = sb.toString();\n            System.out.println(\"Case #\" + i + \":\" + plan);\n            scanner.nextLine();\n        }\n    }\n}"}
{"idx":"1541","func":"class Main {\n    static char[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n\n    public static void main(String[] args) throws Exception{\n        BufferedReader in = new BufferedReader(new FileReader(\"A.in\"));\n        FileWriter fw = new FileWriter(\"A.out\");\n        int testCaseCount = Integer.parseInt(in.readLine());\n        for(int i=0;i<testCaseCount;i++){\n            int numberOfParties = Integer.parseInt(in.readLine());\n            int totalNumOfSenators = 0;\n            String senatorCountStr = in.readLine();\n            ArrayList<Integer> senetorCount = new ArrayList<Integer>();\n\n            String[] elements = senatorCountStr.split(\"\\\\s+\");\n            for(int j = 0;j<elements.length;j++){\n                int count = Integer.parseInt(elements[j]);\n                senetorCount.add(count);\n                totalNumOfSenators += count;\n            }\n            String runners = \"\";\n\n            while (totalNumOfSenators > 0){\n                for(int j = 0;j<2;j++){\n                    boolean done = false;\n                    for(int k = 0;k<numberOfParties;k++){\n                        if(done){\n                            continue;\n                        }\n                        for(int l = 0;l<numberOfParties;l++){\n                            if(k == l){\n                                continue;\n                            }else{\n                                if(senetorCount.get(k) <= 0 || (totalNumOfSenators > 1 && ((1 == j && senetorCount.get(l)*2 > totalNumOfSenators-1) ||(0 == j && (senetorCount.get(l)-1)*2 > totalNumOfSenators-2)))){\n\n                                } else{\n                                    boolean ok = true;\n                                    for(int m = 0;m<numberOfParties;m++){\n                                        if(m == k){\n                                            continue;\n                                        }\n                                        boolean spentNext = false;\n                                        if(totalNumOfSenators > 1){\n                                            if((1 == j && senetorCount.get(m)*2 <= totalNumOfSenators-1)){\n\n                                            } else if(0 == j && (!spentNext || (senetorCount.get(m))*2 <= totalNumOfSenators-1)){\n                                                if((senetorCount.get(m))*2 <= totalNumOfSenators-1){\n\n                                                } else if ((senetorCount.get(m)-1)*2 <= totalNumOfSenators-2){\n                                                    spentNext = true;\n                                                }\n\n                                            } else{\n                                                ok = false;\n                                                break;\n                                            }\n\n                                        } \n                                    }\n                                    if(ok){\n                                        runners += String.valueOf(alphabet[k]);\n                                        senetorCount.set(k, senetorCount.get(k)-1);\n                                        totalNumOfSenators--;\n                                        done = true;\n                                    }\n\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n                if(!runners.isEmpty()){\n                    runners += \" \";\n                }\n            }\n            fw.write(\"Case #\"+(i+1)+\": \"+runners+\"\\n\");\n\n\n        }\n        in.close();\n        fw.close();\n    }\n\n}"}
{"idx":"1542","func":"class Senate {\n\n    public static void main(String[] args) throws Exception {\n\n        BufferedReader br = new BufferedReader(\n                new FileReader(new File(\"\/Users\/vaibhav\/Documents\/workspace\/test\/data\/input.txt\")));\n        int n = Integer.parseInt(br.readLine());\n        char[] alpha = new char[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n                'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n\n        for (int i = 0; i < n; i++) {\n            int[] list = new int[Integer.parseInt(br.readLine())];\n            String[] nums = br.readLine().split(\" \");\n            for (int j = 0; j < nums.length; j++) {\n                list[j] = Integer.parseInt(nums[j]);\n            }\n            \n            System.out.print(\"Case #\" + (i + 1) + \": \");\n            while (true) {\n                StringBuffer out = new StringBuffer();\n                int index = 0;\n                for (int j = 1; j < list.length; j++) {\n                    if (list[index] < list[j]) {\n                        index = j;\n                    }\n                }\n                if (list[index] < 1) {\n                    System.out.println();\n                    break;\n                }\n                list[index]--;\n                out.append(alpha[index]);\n                \n                index = 0;\n                for (int j = 1; j < list.length; j++) {\n                    if (list[index] < list[j]) {\n                        index = j;\n                    }\n                }\n                if (list[index] < 1) {\n                    System.out.println(out + \" \");\n                    break;\n                }\n                if(list[index] == 1) {\n                    int sum = 0;\n                    for (int j = 0; j < list.length; j++) {\n                        sum = sum + list[j];\n                    }\n                    if(sum == 2) {\n                        System.out.print(out + \" \");\n                        continue;\n                    }\n                }\n                list[index]--;\n                out.append(alpha[index]);\n\n                System.out.print(out + \" \");\n            }\n\n        }\n\n        br.close();\n\n    }\n\n}"}
{"idx":"1543","func":"class Evac {\n    @SuppressWarnings(\"resource\")\n    public static void main(String[] args) throws FileNotFoundException\n    {\n        System.out.println(\"Enter no. of test cases.\");\n        FileInputStream fis = new FileInputStream(\"A3.txt\");\n        Scanner in = new Scanner(fis);\n        \/\/Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for (int i=1;i<=t;i++)\n        {\n            int N = in.nextInt();\n            ArrayList<Integer> tp = new ArrayList<Integer>();\n            int sum=0;\n            for ( int j=0;j<N;j++)\n            {\n                int nt = in.nextInt();\n                tp.add(nt);\n                sum += nt;\n            }\n            StringBuilder sb = new StringBuilder();\n            while (sum>0)\n            {\n                int max1 = 0;\n                int imax1 = -1;\n                for (int k=0;k<N;k++)\n                {\n                    if(tp.get(k)>max1)\n                    {\n                        max1 = tp.get(k);\n                        imax1 =k;\n                    }\n                }\n                int max2 = 0;\n                int imax2 = -1;\n                for (int k=0;k<N;k++)\n                {\n                    if(tp.get(k)>max2&&(max2<=max1&&k!=imax1))\n                    {\n                        max2 = tp.get(k);\n                        imax2 =k;\n                    }\n                }\n                \/\/System.out.println(imax1);\n                \/\/System.out.println(imax2);\n                int k=0;\n                for (k=0;k<N;k++)\n                {\n                    if ((k==imax1||k==imax2)&&(2*(tp.get(k)-1)>sum-2))\n                            break;\n                    else if (k!=imax1&&k!=imax2&&(2*tp.get(k)>(sum-2)))\n                        break;    \n                }\n                if(k==N)\n                {\n                    char c =(char)('A'+imax1);\n                    char d =(char)('A'+imax2);\n                    sb.append(c);\n                    sb.append(d);\n                    sb.append(\" \");\n                    sum -=2;\n                    tp.set(imax1, tp.get(imax1)-1);\n                    tp.set(imax2, tp.get(imax2)-1);\n                }\n                else\n                {\n                    char c =(char)('A'+imax1);\n                    sb.append(c);\n                    sb.append(\" \");\n                    sum-=1;\n                    tp.set(imax1, tp.get(imax1)-1);\n                }                \n            }\n            System.out.println(\"Case #\"+i+\": \"+sb.toString());            \n        }\n    }\n\n}"}
{"idx":"1544","func":"class Main {\n    public static void main(String[] args) {\n        FileReader file = null;\n        try {\n            file = new FileReader(\"E:\\\\Windows\\\\chrome download\\\\A-large.in\");\n        }\n        catch (FileNotFoundException e) {\n            \n        }\n        BufferedReader in = new BufferedReader(file);\n        int tests = 0;\n        try {\n            tests = Integer.parseInt(in.readLine());\n        }\n        catch (IOException e) {\n            \n        }\n        for (int i = 1; i <= tests; i++) {\n            System.out.print(\"Case #\" + i + \":\");\n            int n = 0;\n            try {\n                n = Integer.parseInt(in.readLine());\n            }\n            catch (IOException e) {\n                \n            }\n            int[] senators = new int[n];\n            int sum = 0;\n            String[] s = null;\n            try {\n                s = in.readLine().split(\" \");\n            }\n            catch (IOException e) {\n                \n            }\n            for (int j = 0; j < n; j++) {\n                int senator = 0;\n                senator = Integer.parseInt(s[j]);\n                sum += senator;\n                senators[j] = senator;\n            }\n            while (sum > 0) {\n                int index1 = 0;\n                for (int j = 0; j < senators.length; j++) {\n                    if (senators[j] > senators[index1]) {\n                        index1 = j;\n                    }\n                }\n                senators[index1]--;\n                sum--;\n                int index2 = 0;\n                for (int j = 0; j < senators.length; j++) {\n                    if (senators[j] > senators[index2] && sum != 0) {\n                        index2 = j;\n                    }\n                }\n                senators[index2]--;\n                sum--;\n                int index3 = 0;\n                boolean b = false;\n                for (int j = 0; j < senators.length; j++) {\n                    if (senators[j] > senators[index3] && sum != 0) {\n                        index3 = j;\n                    }\n                }\n                if (senators[index3] == 0 || (sum - 1) \/ senators[index3] >= 1) {\n                    b = true;\n                }\n                else {\n                    senators[index2]++;\n                    sum++;\n                }\n                char x = (char) ('a' + index1);\n                char y;\n                if (b) {\n                    y = (char) ('a' + index2);\n                    System.out.print(\" \" + x + y);\n                }\n                else {\n                    System.out.print(\" \" + x);\n                }\n            }\n            System.out.println(\"\");\n        }\n    }\n}"}
{"idx":"1545","func":"class A3rd {\nstatic String chr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner sc = new Scanner(System.in);\n\n        int T = sc.nextInt();\n        \n        for(int i=1;i<=T;i++){\n            String per=\"\";\n        \n        int n = sc.nextInt();\n        int [] p = new int[n];\n        for(int k = 0;k<n;k++){\n            p[k]= sc.nextInt();\n        }\n        \/\/Arrays.sort(p);\n        boolean ok = false;\n        int last=0;\n        do{\n            \n        \n        int max =0;\n        ok = false;\n        for(int k = 0;k<n;k++){\n            if(0<p[k])\n                ok = true;\n        }\n        if(ok){\n            for(int k = 0;k<n;k++){\n                if(p[max]<p[k])\n                    {\n                    max = k;\n                    last=0;\n                    }\n            \n            }\n            per  = per + chr.charAt(max);\n            p[max]--;    \n        }\n        ok = false;\n        for(int k = 0;k<n;k++){\n            if(0<p[k])\n                ok = true;\n        }\n        max =0;\n        if(ok){\n            for(int k = 0;k<n;k++){\n                if(p[max]<p[k])\n                    {\n                    max = k;\n                    last = 1;\n                    }\n            }\n            per  = per + chr.charAt(max)+\" \";\n            p[max]--;    \n        }\n        \n        \n        }while(ok);\n        \/\/System.out.println(\"Casejjk #\"+i+\": \"+per.charAt(per.length()-2));\n        \n        if(last==0)\n        {\n            \n            \/\/System.out.println(\"Case #\"+i+\": \"+per);\n            \n            \/\/System.out.println(\"Case #\"+i+\": \"+per);\n            String s = per.substring(0, per.length()-4);\n            \/\/System.out.println(\"Case #\"+i+\": \"+s);\n            String u = per.substring(per.length()-4);\n            \/\/System.out.println(\"Case #\"+i+\": \"+u);\n            StringBuilder ss = new StringBuilder(u);\n            u = ss.reverse().toString();\n            \/\/System.out.println(\"Case #\"+i+\": \"+u);\n            per=s+u;\n            \/\/System.out.println(\"Case #\"+i+\": \"+per);\n        \/\/    s= per.substring(0,per.length()-2)+\" \"+per.substring(per.length()-2);\n        \/\/s=per;\n        }\n    per=    per.trim();\n        System.out.println(\"Case #\"+i+\": \"+per);\n        }\n\n    }\n\n}"}
{"idx":"1546","func":"static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    int T = scanner.nextInt();\n    scanner.nextLine();\n    for (int t = 1; t <= T; t++) {\n      \/\/ TODO\n    int N = scanner.nextInt();\n    int senators[] = new int[N];\n    \n    int top1 = 0;\n    int top1C = 0;\n    int top2 = 0;\n    int top2C = 0;\n    int count = 0;\n    for (int i = 0; i < N; i++) {\n      senators[i] = scanner.nextInt();\n      count += senators[i];\n    \n      if (senators[i] > top1C) {\n    \n        if (top1C > top2C) {\n          top2 = top1;\n          top2C = top1C;\n        }\n    \n        top1 = i;\n        top1C = senators[i];\n    \n      } else if (senators[i]> top2C) {\n        top2 = i;\n        top2C = senators[i];\n      }\n    }\n    \n    System.out.printf(\"Case #%d:\", t);\n    while (top1C > top2C) {\n      char t11 = (char)('A' + top1);\n      if (top1C - top2C >= 2) {\n        System.out.print(\" \" + t11 + t11);\n        top1C -= 2;\n      } else {\n        System.out.print(\" \" + t11);\n        top1C -= 1;\n      }\n    }\n    \n    for (int i = 0; i < N; i++) {\n      if (i != top1 && i != top2) {\n        char t1 = (char)('A' + i);\n        while (senators[i] > 0) {\n          if (senators[i] >= 2) {\n            System.out.print(\" \" + t1 + t1);\n            senators[i] -= 2;\n          } else {\n            System.out.print(\" \" + t1);\n            senators[i] -= 1;\n          }\n        }\n      }\n    }\n    \n    while (top1C > 0) {\n      char t1 = (char)('A' + top1);\n      char t2 = (char)('A' + top2);\n      System.out.print(\" \" + t1 + t2);\n      top1C -= 1;\n    }\n    \n    System.out.print(\"\\n\");\n    }\n  }\n}"}
{"idx":"1547","func":"class A {\n    \n    public static void main(String[] args) {\n        A a = new A();\n        try{\n            BufferedReader br=new BufferedReader(new FileReader(\"A-large.in\"));\n            BufferedWriter out=new BufferedWriter(new FileWriter(\"A-large.in\".split(\"\\\\.\")[0]+\"_output.txt\"));\n            String s;\n        \n            if((s=br.readLine())!=null){\n                int noLines = Integer.parseInt(s);\n                if(noLines!=0){\n                    for (int index = 0; index < noLines; index++) {\n                        if ((s = br.readLine()) != null) {\n                            String outputString = \"Case #\" + (index + 1) + \": \";\n                            int inputParties = Integer.parseInt(s.trim());\n                            String inputString = br.readLine().trim();\n                            String[] tokenizer = inputString.split(\" \");\n                            HashMap<Character, Integer> hmIn=new HashMap<Character, Integer>();\n                            for(int i=0;i<inputParties;i++){\n                                hmIn.put((char)('A'+i), Integer.parseInt(tokenizer[i]));\n                            }\n                            String output = \"\";\n                            while(hmIn.size()>2){\n                                int maxValueInMap=(Collections.max(hmIn.values()));\n                                for(Iterator<HashMap.Entry<Character, Integer>> it = hmIn.entrySet().iterator(); it.hasNext(); ) {\n                                    HashMap.Entry<Character, Integer> entry = it.next();\n                                    if (entry.getValue()==maxValueInMap) {\n                                        output = output + entry.getKey() + \" \";\n                                        if(entry.getValue() == 1){\n                                            it.remove();\n                                            break;\n                                        }\n                                        else{\n                                            entry.setValue(entry.getValue()-1);\n                                        }\n                                    }\n                                }\n                            }\n                            if(hmIn.size()==2){\n                                int key1=-1,key2=-1;\n                                Character key1c=' ',key2c=' ';\n                                for(Character key : hmIn.keySet()){\n                                    if(key1==-1){\n                                        key1 = hmIn.get(key);\n                                        key1c = key;\n                                    }\n                                    else{\n                                        key2 = hmIn.get(key);\n                                        key2c = key;\n                                    }\n                                }\n                                if(key1>key2){\n                                    for(int i=0;i<(key1-key2);i++)\n                                        output += key1c + \" \";\n                                }\n                                if(key2>key1){\n                                    for(int i=0;i<(key2-key1);i++)\n                                        output += key2c + \" \";\n                                }\n                                if(key1==key2){\n                                    for(int i=0;i<key1;i++)\n                                        output +=  key1c + \"\" + key2c + \" \";\n                                }\n                            }\n                            String output1 = output.trim();\n                            outputString += output1;\n                            System.out.println(outputString);\n                            out.write(outputString);\n                            out.newLine();\n                        }\n                    }\n                }\n            }\n            out.close();\n            br.close();\n        }\n        catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n\n}"}
{"idx":"1548","func":"class A {\n\n    public static final String rutaDatos = \"C:\\\\Users\\\\Augusto\\\\Desktop\\\\Code Jam\\\\\";\n    \n    \n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        \n        String problem = \"A\";\n        \/\/String input=problem+\"-sample.in\";\n        \/\/String input=problem+\"-small-attempt1.in\";\n        String input=problem+\"-large.in\";\n        Scanner in = new Scanner(new File(rutaDatos+\"input\\\\\"+input));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(rutaDatos+\"output\\\\\"+input+\".out.txt\")));    \n        \n        int T = in.nextInt();\n        for(int i=0;i<T;i++) {\n            \n            String answer = \"Case #\"+(i+1)+\":\";\n            \n            \/*********************************\/\n            \n            int ns[] = new int[26];\n            int np = in.nextInt();\n            for(int j=0;j<np;j++)\n                ns[j] = in.nextInt();\n            \n            \n            while(true) {\n                int may=0;\n                int ts=0;\n                for(int j=0;j<26;j++) {\n                    if(ns[j]>ns[may])\n                        may = j;\n                    ts+=ns[j];\n                }\n                int may2=0;\n                for(int j=0;j<26;j++)\n                    if(ns[j]-(j==may?1:0)>=ns[may2]-(may2==may?1:0))\n                        may2 = j;\n                if(ts==0) break;\n                ns[may]--;\n                answer = answer + \" \" + (char)(may+'A');\n                ts--;\n                if(ts==0) break;\n                \/\/System.out.println(may+\" \"+may2);\n                \/*for(int j=0;j<26;j++)\n                    if(ns[j]-(j==may2?1:0)>=(ts-1)\/2) continue;*\/\n                if(ts==2) continue;\n                answer = answer + (char)(may2+'A');\n                ns[may2]--;\n                \/\/System.out.println(answer);\n            }\n            \n            \/*********************************\/\n            \n            \n            System.out.println(answer);\n            out.println(answer);\n        }\n        out.close();\n    }\n    \n}"}
{"idx":"1549","func":"class SenateEvacuation {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        int t = reader.nextInt();\n        reader.nextLine();\n\n        for (int i = 1; i <= t; i++) {\n            int n = reader.nextInt();\n            int[] p = new int[n];\n            int sum = 0;\n            for (int j = 0; j < n; j++) {\n                p[j] = reader.nextInt();\n                sum += p[j];\n            }\n\n            String sol = \"\";\n            int acc = 0;\n            while (acc < sum) {\n                \/\/ find current max\n                int maxP = 0, maxPI = 0;\n                for (int k = 0; k < n; k++) {\n                    if (p[k] > maxP) {\n                        maxP = p[k];\n                        maxPI = k;\n                    }\n                }\n                p[maxPI]--; acc++;\n                char e = (char)(maxPI + 65);\n                sol += \" \" + e;\n                \/\/ how many max(s) we're left with?\n                int l = 0, m = 0;\n                for (int k = 0; k < n; k++) {\n                    if (p[k] == maxP) {\n                        l++;\n                        m = k;\n                    }\n                }\n                if (l == 1) { \/\/ no good!\n                    \/\/ remove the last max together\n                    p[m]--; acc++;\n                    char f = (char)(m + 65);\n                    sol += f;\n                }\n            }\n\n            System.out.println(\"Case #\" + i + \":\" + sol);\n        }\n    }\n}"}
{"idx":"1550","func":"class Senate {\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(new File(\"A-large.in\"));\n        \/\/ System.out.println(\"HELLO\");\n        \/\/Scanner in = new Scanner(System.in);\n        PrintWriter fileOut = new PrintWriter(new FileWriter(\"SenateLarge.out\"));\n        \n        int T = in.nextInt();\n        for (int test = 1; test <= T; test++)\n        {\n            int N = in.nextInt();\n            ArrayList<Integer> all = new ArrayList<Integer>();\n            int total = 0;\n            for (int m = 0; m < N; m++)\n            {\n                int num = in.nextInt();\n                total += num;\n                all.add(num);                \n            }\n            fileOut.printf(\"Case #%d: \", test);\n            while (total != 0)\n            {\n                int max = 0;\n                int secondI = 0;\n                boolean secondUsed = false;\n                for (int i = 0; i < N; i++)\n                {\n                    if (all.get(i) >= all.get(max))\n                        max = i;\n                    if (all.get(i) >= total\/2.0 && !secondUsed)\n                    {\n                        secondI = i;\n                        secondUsed = true;\n                    }\n                }\n                \n                if (secondUsed && secondI != max)\n                {\n                    all.set(max, all.get(max) - 1);\n                    char c = (char) (max + 'A');\n                    fileOut.print(c);\n                    total--;\n                    all.set(secondI, all.get(secondI) - 1);\n                    c = (char) (secondI + 'A');\n                    fileOut.print(c + \" \");\n                    total--;\n                }\n                else\n                {\n                    all.set(max, all.get(max) - 1);\n                    char c = (char) (max + 'A');\n                    fileOut.print(c + \" \");\n                    total--;\n                }\n            }\n            fileOut.println();\n        }\n        fileOut.close();\n\n    }\n\n}"}
{"idx":"1551","func":"class A {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n        String s = r.readLine();\n        int T = Integer.parseInt(s);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < T; i++) {\n            sb.append(\"Case #\" + (i+1) + \":\");\n            s = r.readLine();\n            int N = Integer.parseInt(s);\n            s = r.readLine();\n            String[] parts = s.split(\" \");\n            int[] nrs = new int[N];\n            int count = 0;\n            for (int j = 0; j < N; j++) {\n                nrs[j] = Integer.parseInt(parts[j]);\n                count += nrs[j];\n            }\n            while (count != 0) {\n                int max = 0;\n                char[] maxP = new char[2];\n                int[] takes = new int[2];\n                for (int j = 0; j < N; j++) {\n                    if (nrs[j] > max) {\n                        max = nrs[j];\n                        takes[0] = j;\n                        takes[1] = -1;\n                        maxP[0] = (char) (((int) ('A')) + j);\n                        maxP[1] = 0;\n                    } else if (nrs[j] == max) {\n                        maxP[1] = (char) (((int) ('A')) + j);\n                        takes[1] = j;\n                    }\n                }\n                if (takes[1] != -1) {\n                    if (count == 3) {\n                        sb.append(\" \" + maxP[0]);\n                        nrs[takes[0]]--;\n                        count--;\n                    } else {\n                        sb.append(\" \" + maxP[0] + maxP[1]);\n                        nrs[takes[0]]--;\n                        nrs[takes[1]]--;\n                        count-=2;\n                    }\n                } else {\n                    sb.append(\" \" + maxP[0]);\n                    nrs[takes[0]]--;\n                    count--;\n                }\n            }\n            sb.append(\"\\n\");\n        }        \n        System.out.println(sb.toString());\n        PrintWriter writer = new PrintWriter(\"Qual1C.AAA.txt\", \"UTF-8\");\n        writer.println(sb.toString());\n        writer.close();\n    }\n\n}"}
{"idx":"1552","func":"static void main(String[] args)\n    {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int tcase=in.nextInt();\n    for(int i=1;i<=tcase;i++)\n        {\n            int N=in.nextInt();\n            int[] data=new int[N];\n            int total=0;\n            for(int j=0;j<N;j++)\n            {\n                data[j]=in.nextInt();\n                total=total+data[j];\n                \n            }\n            System.out.print(\"Case #\"+i+\": \");\n            for(int k=1;k<=total;k++)\n            {\n                int total1=0;\n                    for(int j=0;j<data.length;j++)\n                    {\n                        total1=total1+data[j];\n                    }\n                    int max1=0,max1index=-1,max2=0,max2index=-1;\n                    for(int j=0;j<data.length;j++)\n                    {\n                        if(data[j]>max1)\n                        {\n                            max1=data[j];\n                            max1index=j;\n                        }\n                    }\n                   if(max1index>=0)\n                   {\n                       data[max1index]--;\n                       System.out.print((char)(max1index+65));\n                   }\n                   if(total1!=3)\n                   {\n                    for(int j=0;j<data.length;j++)\n                    {\n                        if(data[j]>max2)\n                        {\n                            max2=data[j];\n                            max2index=j;\n                        }\n                    }\n                    if(max2index>=0)\n                   {\n                       data[max2index]--;\n                       System.out.print((char)(max2index+65));\n                   }\n                   }\n                   if(max2index>=0||max1index>=0)\n                   {\n                       System.out.print(\" \");\n                   }\n                \n            }\n        System.out.println(\"\");\n        }\n    \n    }\n}"}
{"idx":"1553","func":"class ProblemB {\n    \n    public static void main(String[] agrs) throws FileNotFoundException {\n        String FILENAME = \"longB\";\n        \n        File FILE = new File(FILENAME);\n        \n        Scanner fileReader = new Scanner(FILE);\n        \n        int T =  fileReader.nextInt();\n        \n        for (int test = 0; test < T; test ++) {\n            int B = fileReader.nextInt();\n            String M1 = fileReader.next();\n            \n            long M = Long.parseLong(M1);\n            \n            int num = B - 2;\n            long max = (long) Math.pow((double)2, (double)num);\n            int[] x = new int[num];\n            \n            \n            if (M > max) {\n                System.out.println(\"Case #\" + (test+1) + \": IMPOSSIBLE\");\n            } else {\n                int[][] matrix = new int[B][B];\n                for (int i = 0; i < B; i ++) {\n                    for (int j = i+1; j < B-1; j ++) {\n                        matrix[i][j] = 1;\n                    }\n                }\n                \n                long dec = max \/ 2;\n                long left = M;\n                int index = 0;\n                for (int i = 0; i < num; i ++) {\n                    if (left >= dec) {\n                        left -= dec;\n                        x[i] = 1;\n                    }\n                    dec = dec \/ 2;\n                }\n                int indi = 0;\n                for (int i = B-2; i > 0; i --) {\n                    matrix[i][B-1] = x[indi];\n                    indi ++;\n                }\n                \n                if (left == 1) {\n                    matrix[0][B-1] = 1;\n                }\n                \n                \n                System.out.println(\"Case #\" + (test+1) + \": POSSIBLE\");\n                for (int i = 0; i < B; i ++) {\n                    for (int j = 0; j < B; j ++) {\n                        System.out.print(matrix[i][j]);\n                    }\n                    System.out.println(\"\");\n                }\n            }\n\n            \n        }\n        fileReader.close();\n    }\n}"}
{"idx":"1554","func":"class Main {\n    private static final String inputPath = \"\/home\/abduqodir\/Programming\/ideaProjects\/Other\/functions.in\";\n    private static final String outputPath = \"\/home\/abduqodir\/Programming\/ideaProjects\/Other\/functions.out\";\n\n    public static void main (String[] args) throws IOException {\n        Scanner scanner = new Scanner(new FileInputStream(inputPath));\n        PrintWriter printer = new PrintWriter(new FileOutputStream(outputPath));\n        int T = scanner.nextInt();\n        for (int i = 0; i < T; i++) {\n            printer.format(\"Case #%d: \", i + 1);\n            int b = scanner.nextInt();\n            long m = scanner.nextLong();\n            int[][] map = new int[b][b];\n            for (int j = 1; j < b; j++) {\n                for (int k = j + 1; k < b; k++) {\n                    map[j][k] = 1;\n                }\n            }\n            map[0][b - 1] = 1;\n            m--;\n            long bin = 1;\n            for (int j = 2; j < b - 1; j++) {\n                bin *= 2;\n            }\n            for (int j = 1; j < b - 1; j++) {\n                if (m >= bin) {\n                    map[0][j] = 1;\n                    m -= bin;\n                }\n                bin \/= 2;\n            }\n            if (m == 0) {\n                printer.println(\"POSSIBLE\");\n                for (int j = 0; j < b; j++) {\n                    for (int k = 0; k < b; k++) {\n                        printer.print(map[j][k]);\n                    }\n                    printer.println();\n                }\n            } else {\n                printer.print(\"IMPOSSIBLE\");\n                printer.println();\n            }\n            printer.flush();\n        }\n    }\n}"}
{"idx":"1555","func":"class GCJR1B {\n\n    public static void main(String[] args) throws Exception {\n        Scanner cin = new Scanner(new FileInputStream(\"B-small-attempt1.in\"));\n        PrintWriter cout = new PrintWriter(new FileOutputStream(\"output.txt\"));\n        int T = cin.nextInt();\n        for (int t = 0; t < T; ++t) {\n            int B = cin.nextInt(), M = cin.nextInt();\n            cout.print(\"Case #\" + (t + 1) + \": \");\n            if (M > (1 << (B - 2))) {\n                cout.println(\"IMPOSSIBLE\");\n                continue;\n            }\n            int[][] a = new int[10][10];\n            for (int i = 0; i < 10; ++i)\n                Arrays.fill(a[i], 0);\n            switch (M) {\n            case 1:\n                a[0][B - 1] = 1;\n                break;\n            case 2:\n                a[0][B - 1] = 1;\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                break;\n            case 3:\n                a[0][B - 1] = 1;\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                break;\n            case 4:\n                a[0][B - 1] = 1;\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                a[1][2] = 1;\n                break;\n            case 5:\n                a[0][B - 1] = 1;\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[1][2] = 1;\n                break;\n            case 6:\n                a[0][B - 1] = 1;\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[1][2] = 1;\n                a[1][3] = 1;\n                break;\n            case 7:\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[1][2] = 1;\n                a[1][3] = 1;\n                a[2][3] = 1;\n                break;\n            case 8:\n                a[0][B - 1] = 1;\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[1][2] = 1;\n                a[1][3] = 1;\n                a[2][3] = 1;\n                break;\n            case 9:\n                a[0][B - 1] = 1;\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[0][4] = 1;\n                a[4][B - 1] = 1;\n                a[1][2] = 1;\n                a[1][3] = 1;\n                a[2][3] = 1;\n                break;\n            case 10:\n                a[0][B - 1] = 1;\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[0][4] = 1;\n                a[4][B - 1] = 1;\n                a[1][2] = 1;\n                a[1][3] = 1;\n                a[2][3] = 1;\n                a[1][4] = 1;\n                break;\n            case 11:\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[0][4] = 1;\n                a[4][B - 1] = 1;\n                a[1][2] = 1;\n                a[1][3] = 1;\n                a[2][3] = 1;\n                a[1][4] = 1;\n                a[2][4] = 1;\n                break;\n            case 12:\n                a[0][B - 1] = 1;\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[0][4] = 1;\n                a[4][B - 1] = 1;\n                a[1][2] = 1;\n                a[1][3] = 1;\n                a[2][3] = 1;\n                a[1][4] = 1;\n                a[2][4] = 1;\n                break;\n            case 13:\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[0][4] = 1;\n                a[4][B - 1] = 1;\n                a[1][2] = 1;\n                a[1][3] = 1;\n                a[2][3] = 1;\n                a[1][4] = 1;\n                a[2][4] = 1;\n                a[3][4] = 1;\n                break;\n            case 14:\n                a[0][B - 1] = 1;\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[0][4] = 1;\n                a[4][B - 1] = 1;\n                a[1][2] = 1;\n                a[1][3] = 1;\n                a[2][3] = 1;\n                a[1][4] = 1;\n                a[2][4] = 1;\n                a[3][4] = 1;\n                break;\n            case 15:\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[0][4] = 1;\n                a[4][B - 1] = 1;\n                a[1][2] = 1;\n                a[1][3] = 1;\n                a[2][3] = 1;\n                a[1][4] = 1;\n                a[2][4] = 1;\n                a[3][4] = 1;\n                break;\n            case 16:\n                a[0][B - 1] = 1;\n                a[0][1] = 1;\n                a[1][B - 1] = 1;\n                a[0][2] = 1;\n                a[2][B - 1] = 1;\n                a[0][3] = 1;\n                a[3][B - 1] = 1;\n                a[0][4] = 1;\n                a[4][B - 1] = 1;\n                a[1][2] = 1;\n                a[1][3] = 1;\n                a[2][3] = 1;\n                a[1][4] = 1;\n                a[2][4] = 1;\n                a[3][4] = 1;\n                break;\n            }\n            cout.println(\"POSSIBLE\");\n            for (int i = 0; i < B; ++i) {\n                for (int j = 0; j < B; ++j)\n                    cout.print(a[i][j]);\n                cout.println();\n            }\n            \/*\n             * if (M >= 1) a[0][B - 1] = 1; if (M >= 2){ a[0][1] = 1; a[1][B -\n             * 1] = 1; if (M >= 3){ a[0][2] = 1; a[2][B - 1] = 1; } } if (M >=\n             * 4){ a[1][2] = 1; if (M >= 5){ a[0][3] = 1; a[3][B - 1] = 1; } if\n             * (M >= 6){ a[1][3] = 1; } }\n             *\/\n        }\n        cout.flush();\n    }\n\n}"}
{"idx":"1556","func":"class Main {\n    \n    private static Scanner scan = new Scanner(System.in);\n    static long p2[] = new long[101];\n    \n    public static void main(String[] args) {\n        int T = scan.nextInt();\n        p2[0] = 1;\n        for(int i=1; i<101; i++) p2[i] = p2[i-1]*2;\n        int X = 1;\n        while(T-- > 0) {\n            int n = scan.nextInt();\n            long m = scan.nextLong();\n            boolean [][] ans = new boolean[n][n];\n            for(int i=0; i<n; i++) {\n                for(int j=i+1; j<n; j++) {\n                    ans[i][j] = true;\n                }\n            }\n            System.out.print(\"Case #\" + (X++) + \": \");\n            if(m <= p2[n-2]) {\n                System.out.println(\"POSSIBLE\");\n                BigInteger bi = new BigInteger(\"\" + (p2[n-2] - m));\n                String s = bi.toString(2);\n                for(int i=s.length()-1; i>=0; i--) {\n                    if(s.charAt(i) == '1') {\n                        ans[s.length()-i][n-1] = false;\n                    }\n                }\n                for(int i=0; i<n; i++) {\n                    for(int j=0; j<n; j++) {\n                        if(ans[i][j] == true) System.out.print(\"1\");\n                        else System.out.print(\"0\");\n                    }\n                    System.out.println();\n                }\n            }\n            else {\n                System.out.println(\"IMPOSSIBLE\");\n            }\n        }\n    }\n    \n}"}
{"idx":"1557","func":"class B {\n    public static void main(String[] args) {\n        long[] max = new long[51];\n        max[0] = 0; max[1] = 0; max[2] = 1;\n        for (int i = 3; i <= 50; i++) {\n            max[i] = max[i-1] * 2;\n        }\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int t=1; t<=T; t++) {\n            int B = in.nextInt();\n            long M = in.nextLong();\n            if (M > max[B]) {\n                System.out.format(\"Case #%d: IMPOSSIBLE\\n\", t);\n            } else {\n                System.out.format(\"Case #%d: POSSIBLE\\n\", t);\n                if (M == max[B]) {\n                    for (int i = 0; i < B; i++) {\n                        for (int j = 0; j < B; j++) {\n                            if (j>i) System.out.print('1');\n                            else System.out.print('0');\n                        }\n                        System.out.println();\n                    }\n                } else {\n                    String binaryB = Long.toBinaryString(M);\n                    binaryB = '0' + binaryB + '0';\n                    while (binaryB.length() < B) {\n                        binaryB = '0' + binaryB;\n                    }\n                    System.out.println(binaryB);\n                    boolean flag = false;\n                    for (int i = 1; i < B; i++) {\n                        if (binaryB.charAt(i) == '1') {\n                            flag = true;\n                        }\n                        for (int j = 0; j < B; j++) {\n                            if (flag && j>i) System.out.print('1');\n                            else System.out.print('0');\n                        }\n                        System.out.println();\n                    }\n                }\n            }\n        }\n    }\n}"}
{"idx":"1558","func":"class B {\n    public static void main(String[] args) throws FileNotFoundException {\n\/\/        Scanner scan = new Scanner(System.in);\n\/\/        PrintWriter out = new PrintWriter(System.out);\n        Scanner scan = new Scanner(new FileInputStream(new File(\"B.in\")));\n        PrintWriter out = new PrintWriter(new FileOutputStream(new File(\"B.out\")));\n        int T = scan.nextInt();\n        for(int t=1;t<=T;t++) {\n            int B = scan.nextInt();\n            long M = scan.nextLong();\n            boolean[][] adj = new boolean[B][B];\n            long[] cnts = new long[B];\n            cnts[B-1] = 1;\n            for(int i=B-2;i>0;i--) {\n                cnts[i] = 0;\n                for(int j=B-1;j>i;j--) {\n                    adj[i][j] = true;\n                    cnts[i] += cnts[j];\n                }\n            }\n            int ptr = 1;\n            while(ptr < B && M > 0) {\n                if(M >= cnts[ptr]) {\n                    adj[0][ptr] = true;\n                    M -= cnts[ptr];\n                }\n                ptr++;\n            }\n            boolean possible = M == 0;\n            \n            out.printf(\"Case #%d: %s\\n\", t, possible ? \"POSSIBLE\" : \"IMPOSSIBLE\");\n            if(possible) {\n                for(int i=0;i<B;i++) {\n                    for(int j=0;j<B;j++) {\n                        if(adj[i][j])\n                            out.print(\"1\");\n                        else\n                            out.print(\"0\");\n                    }\n                    out.println();\n                }\n            }\n        }\n        out.close();\n    }\n}"}
{"idx":"1559","func":"class B {\n    \n    private static int d;\n    private static int[] n1;\n    private static int[] n2;\n    \n    public static void main(String[] args) throws IOException {\n        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n        String s = r.readLine();\n        int T = Integer.parseInt(s);\n        StringBuilder sb = new StringBuilder();    \n        for (int i = 0; i < T; i++) {\n            sb.append(\"Case #\" + (i+1) + \": \");\n            s = r.readLine();\n            String[] parts = s.split(\" \");\n            int B = Integer.parseInt(parts[0]);\n            long M = Long.parseLong(parts[1]);\n            if (Math.pow(2, B-2) < M) {\n                sb.append(\"IMPOSSIBLE\");\n            } else {\n                sb.append(\"POSSIBLE\\n\");\n                sb.append(\"0\");\n                for (int j = 1; j < B; j++) {\n                    sb.append(\"1\");\n                }\n                boolean[] binear = new boolean[B];\n                M--;\n                for (int j = 0; j < B; j++) {\n                    if (M >= Math.pow(2, B-j-1)) {\n                        binear[j] = true;\n                        M -= Math.pow(2, B-j-1);\n                    }\n                }\n                for (int j = 1; j < B; j++) {\n                    sb.append(\"\\n\");\n                    for (int k = 0; k < B; k++) {\n                        if (k <= j) {\n                            sb.append(\"0\");\n                        } else if (k == B-1){\n                            if (binear[B-j]) {\n                                sb.append(\"1\");\n                            } else {\n                                sb.append(\"0\");\n                            }\n                        } else {\n                            sb.append(\"1\");\n                        }\n                    }\n                }\n            }            \n            sb.append(\"\\n\");\n        }\n        System.out.println(sb.toString());\n        PrintWriter writer = new PrintWriter(\"Qual1C.BBB.txt\", \"UTF-8\");\n        writer.println(sb.toString());\n        writer.close();\n\n    }\n\n}"}
{"idx":"1560","func":"class R1C_B_1 {\n\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        Scanner scanner = new Scanner(new File(\"D:\/ForPrograms\/java\/TESTS\/B-large.in\"));\n        FileWriter writer = new FileWriter(\"D:\/ForPrograms\/java\/TESTS\/B-large.out\", false);\n        \n        int cases = scanner.nextInt();\n        \n        \n        for(int i=0;i<cases;i++){\n            \n            int b = scanner.nextInt();\n            long c = scanner.nextLong();\n            \n            writer.write(\"Case #\"+(i+1)+\": \");\n            \n            long rc = b-2;\n            long maxCount = 1;\n            while(rc>0){\n                maxCount *= 2;\n                rc--;\n            }\n            \n            \n            \n            \n            if(maxCount >= c){\n                writer.write(\"POSSIBLE\");\n                \n                long needMinus = maxCount-c;\n                \n                long[][] arr = new long[b][b];\n                for(int j=0;j<b;j++){\n                    Arrays.fill(arr[j], 0);\n                }\n                \n                if(c == 0){\n                    \n                }\n                else{\n                    \n                    for(int j=0;j<b;j++){\n                        for(int k=0;k<b;k++){\n                            if(k>j){\n                                arr[j][k] = 1;\n                            }\n                        }\n                    }\n                    \n                    if(maxCount == c){\n                        \n                    }\n                    else{\n                        \n                        long[] arrm = new long[b-2];\n                        Arrays.fill(arrm, 0);\n                        long cn = 1;\n                        for(int j=b-3;j>=0;j--){\n                            cn*=2;\n                            arrm[j] = cn\/2;\n                        }\n                        \/\/arrm[b-2] = 1;\n                        \n                        \n                        for(int l=0;l<b-2;l++){\n                            if(needMinus >= arrm[l]){\n                                needMinus -= arrm[l];\n                                arr[0][l+1] = 0;\n                            }\n                        }\n                    \n                    }\n                    \n                    \n                    \n                }\n                writer.append('\\r');\n                writer.append('\\n');\n                for(int j=0;j<b;j++){\n                    for(int k=0;k<b;k++){\n                        System.out.print(arr[j][k]+\"\");\n                        writer.write(arr[j][k]+\"\");\n                    }\n                    System.out.println(\"\");\n                    writer.append('\\r');\n                    writer.append('\\n');\n                }\n                \n            }\n            else{\n                writer.write(\"IMPOSSIBLE\");\n                writer.append('\\r');\n                writer.append('\\n');\n            }\n            \n            \n            \n            \/\/writer.append('\\r');\n            \/\/writer.append('\\n');\n            \n            \n            \/*if(i != cases-1)\n                scanner.nextLine();*\/\n    \n        }\n        \n        \n        scanner.close();\n        writer.close();\n        \n        \n    }\n\n}"}
{"idx":"1561","func":"class Slides {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt(); \n        for (int i = 1; i <= t; ++i) {\n            int b = in.nextInt();\n            long m = in.nextLong();\n            long p = pow(2,b-2);\n            if (p<m){\n                System.out.println(\"Case #\" + i + \": IMPOSSIBLE\");\n            } else {\n                System.out.println(\"Case #\" + i + \": POSSIBLE\");\n                if (p==m){\n                    for (int j1=0; j1<b; ++j1){\n                        String s = \"\";\n                        for (int j2 = 0; j2<b; ++j2){\n                            if (j2<=j1) s += \"0\";\n                            else s += \"1\";\n                        }\n                        System.out.println(s);\n                    }\n                } else {\n                    for (int j1=0; j1<b; ++j1){\n                        String s = \"\";\n                        for (int j2 = 0; j2<b-1; ++j2){\n                            if (j2<=j1) s += \"0\";\n                            else s += \"1\";\n                        }\n                        if (j1 == 0) s += \"0\";\n                        else {\n                            if (m%2==1) s += \"1\";\n                            else s += \"0\";\n                            m \/= 2;\n                        }\n                        System.out.println(s);\n                    }\n                }\n            }\n        }\n        in.close();\n    }\n    \n    public static long pow(long a, long b){\n        if (b==0) return 1;\n        else if (b%2==0) return pow(a*a,b\/2);\n        else return a*pow(a*a,b\/2);\n    }\n}"}
{"idx":"1562","func":"class B {\n\n    public static void main(String[] args) throws Exception {\n\/\/        BufferedReader br = new BufferedReader(new FileReader(\"B-small-attempt1.in\"));\n\/\/        PrintWriter pw = new PrintWriter(new File(\"B-small.out\"));\n        BufferedReader br = new BufferedReader(new FileReader(\"B-large.in\"));\n        PrintWriter pw = new PrintWriter(new File(\"B-large.out\"));\n        int T = Integer.parseInt(br.readLine());\n        for(int i=1;i<=T;i++){\n            String[] l = br.readLine().split(\" \");\n            int B = Integer.parseInt(l[0]);\n            long M = Long.parseLong(l[1]);\n            BigInteger x = BigInteger.valueOf(2);\n            if(BigInteger.valueOf(M).compareTo(x.pow(B-2))>0){\n                pw.println(\"Case #\"+i+\": IMPOSSIBLE\");\n                continue;\n            }\n            pw.println(\"Case #\"+i+\": POSSIBLE\");\n            if(BigInteger.valueOf(M).compareTo(x.pow(B-2))==0){\n                String s = Long.toString(M-1, 2);\n                int le = s.length();\n                for(int b=0;b<B-le-2;b++)\n                    s = \"0\"+s;\n                pw.println(\"0\"+(M==1?\"\":s)+\"1\");\n            }\n            else{\n                String s = Long.toString(M, 2);\n                int le = s.length();\n                for(int b=0;b<B-le-2;b++)\n                    s = \"0\"+s;\n                pw.println(\"0\"+s+\"0\");\n            }\n            for(int j=1;j<B;j++){\n                String s = \"\";\n                for(int z=0;z<j+1;z++)\n                    s+=\"0\";\n                for(int o=B-2-j;o>=0;o--)\n                    s+=\"1\";\n                pw.println(s);\n            }\n        }\n        pw.close();\n        br.close();\n    }\n}"}
{"idx":"1563","func":"class Main1 {\n\n    public static void main(String[] args) {\n\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext()) {\n            int t = cin.nextInt();\n            for (int i = 0; i < t; i++) {\n                int index = i + 1;\n                long b = cin.nextLong();\n                long m = cin.nextLong();\n                long temp = 1;\n                temp = temp << (b-2);\n                if (m > temp) {\n                    System.out.println(\"Case #\" + index + \": IMPOSSIBLE\");\n                } else {\n                    System.out.println(\"Case #\" + index + \": POSSIBLE\");\n                    long tmpM = m - 1;\n                    long index1 = 2;\n                    List<Long> list = new ArrayList<Long>();\n                    while (tmpM > 0) {\n                        if ((tmpM & 1) > 0) {\n                            list.add(index1);\n                        }\n                        tmpM = tmpM >> 1;\n                        index1++;\n                    }\n                    int matrix[][] = new int[60][60];\n                    for (int i3 = 1; i3 <= b; i3++) {\n                        for (int j = 1; j < b; j++) {\n                            if (i3 < j) {\n                                matrix[i3][j] = 1;\n                            } else {\n                                matrix[i3][j] = 0;\n                            }\n                        }\n                    }\n                    for (int i1 = 1; i1 <= b; i1++) {\n                        matrix[i1][(int) b] = 0;\n                    }\n                    for (int i2 = 0; i2 < list.size(); i2++) {\n                        long tmp = list.get(i2);\n                        matrix[(int) tmp][(int) b] = 1;\n                    }\n                    matrix[1][(int)b] = 1;\n                    for (int i4 = 1; i4 <= b; i4++) {\n                        for (int j = 1; j <= b; j++) {\n                            if (j == b) {\n                                System.out.println(matrix[i4][j]);\n                            } else {\n                                System.out.print(matrix[i4][j]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n}"}
{"idx":"1564","func":"class ProblemB {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(\n                System.in)));\n        in = new Scanner(new File(\"B-large.in\"));\n        \n        int T = in.nextInt();\n        for (int i=1; i<=T; i++) {\n            int B = in.nextInt();\n            long M = in.nextLong();\n            \n            long temp = (long)Math.pow(2, B-2);\n            if (M > temp) {\n                System.out.printf(\"Case #%d: IMPOSSIBLE\\n\", i);\n            } else {\n                boolean[] b = new boolean[B];\n                for (int j=1; j<B; j++) {\n                    temp \/= 2;\n                    if (M > temp) {\n                        M -= temp;\n                        b[B-1-j] = true;\n                    }\n                }\n                StringBuilder sb = new StringBuilder();\n                for (int j=0; j<B; j++) {\n                    sb.append('\\n');\n                    for (int k=0; k<=j; k++) {\n                        sb.append('0');\n                    }\n                    for (int k=j+1; k<B; k++) {\n                        if (k == B-1) {\n                            sb.append(b[j]?'1':'0');\n                        } else {\n                            sb.append('1');\n                        }\n                    }\n                }\n                System.out.printf(\"Case #%d: POSSIBLE\", i);\n                System.out.println(sb.toString());\n            }\n        }\n    }\n}"}
{"idx":"1565","func":"class Slides {\n    public static void main(String[] args) {\n        \/\/Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        Scanner in = new Scanner(System.in);\n        int loops = in.nextInt();\n         \n        for (int loop = 1; loop <= loops; ++loop) {\n            int b= in.nextInt(); long m = in.nextLong();\n            long max = 1;\n            for(int i = 2; i < b; i++) {\n                max*=2;\n            }\n           if (m > max) {\n               String line = String.format(\"Case #%1$s: IMPOSSIBLE\", loop);\n               System.out.println(line); \n               continue;\n           }\n            \n           String line = String.format(\"Case #%1$s: POSSIBLE\", loop);\n           System.out.println(line); \n           \n           \n           long pow = max\/2;\n           boolean[] linked = new boolean[b];\n           int index = b-2;\n           while (m > 1) {\n               if (m >= pow) {\n                   linked[index] = true;\n                   m -= pow;\n               }\n               pow \/= 2;\n               index--;\n           }\n           if (m == 1) {\n               linked[0] = true;\n               m -= 1;\n           }\n           \n           StringBuilder builder;\n           for (int i = 0; i < b-1; i++) {\n               builder = new StringBuilder();\n               for (int j = 0; j < i+1; j++)\n                   builder.append(0);\n               for (int j = 0; j < b - i -2; j++)\n                   builder.append(1);\n               builder.append(linked[i] ? 1 : 0);\n                System.out.println(builder);\n           }\n           builder = new StringBuilder();\n           for (int j = 0; j < b; j++)\n               builder.append(0);\n           System.out.println(builder);\n           \n           \/\/String line = String.format(\"Case #%1$s: %2$s\", loop, flow);\n           \/\/System.out.println(line);\n        }\n        in.close();\n }\n}"}
{"idx":"1566","func":"class TaskB {\n    public static void main(String[] args) {\n        String fileName = \"B-large.in\";\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n\n            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + \".out\"))) {\n                int tests = Integer.valueOf(br.readLine());\n                for (int test = 1; test <= tests; ++test) {\n                    Scanner scanner = new Scanner(br.readLine());\n                    int b = scanner.nextInt();\n                    long m = scanner.nextLong();\n                    long initM = m;\n                    bw.write(\"Case #\" + test + \": \");\n                    int tt[][] = new int[b][b];\n                    long max = ((long) Math.pow(2, b - 2));\n                    if (m > max) {\n                        bw.write(\"IMPOSSIBLE\\n\");\n                    } else {\n                        bw.write(\"POSSIBLE\\n\");\n                        StringBuffer res = new StringBuffer();\n                        if (m == max) {\n                            res.append(\"1\");\n                            tt[0][b - 1] = 1;\n                            --m;\n                        } else {\n                            res.append(\"0\");\n                            tt[0][b - 1] = 0;\n                        }\n\n                        for (int i = 1; i < b; ++i) {\n                            boolean set = (m & 1) != 0;\n                            res.append(set ? \"1\" : \"0\");\n                            tt[0][b - 1 - i] = set ? 1 : 0;\n                            m = m >> 1;\n                        }\n                        bw.write(res.reverse().toString() + \"\\n\");\n                        for (int i = 2; i < b + 1; ++i) {\n                            StringBuffer sb = new StringBuffer();\n\n                            for (int j = 0; j < i; ++j) {\n                                sb.append(\"0\");\n                                tt[i - 1][j] = 0;\n                            }\n                            for (int j = 0; j < b - i; ++j) {\n                                sb.append(\"1\");\n                                tt[i - 1][j + i] = 1;\n                            }\n                            sb.append(\"\\n\");\n                            bw.write(sb.toString());\n                        }\n                        long val[] = new long[b];\n                        for (int i = 0; i < b; ++i)\n                            val[i] = 0;\n                        val[b - 1] = 1;\n                        for (int i = 0; i < b; ++i) {\n                            for (int j = b - i - 1; j >= 0; --j) {\n                                if (tt[j][b - i - 1] == 1)\n                                    val[j] += val[b - i - 1];\n                            }\n                        }\n                        if (initM != val[0])\n                            break;\n                    }\n\n                }\n                bw.close();\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1567","func":"class B {\n    public static void main(String[] args) throws IOException {\n        Scanner s = new Scanner(new File(\"b.in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"b.out\"));\n        int T = s.nextInt();\n        for (int t = 1; t <= T; t++) {\n            out.write(\"Case #\"+t+\": \"); \n            int B  = s.nextInt();\n            int M = s.nextInt();\n            int magicNumber = (B*B-B)\/2;\n            matrix = new boolean[B][B];\n            int magicLimit = 1<<magicNumber;\n            boolean foundAnswer=false;\n            for(int magic=0; magic<magicLimit && !foundAnswer; magic++){\n                int it=0;\n                for(int j=0; j<B; j++){\n                    for(int k=j+1; k<B; k++){\n                        matrix[j][k]=(magic>>it++)%2==1;\n                    }\n                }\n                \n                cant = new int[B];\n                cant[B-1]=1;\n                for(int i=B-2; i>=0; i--){\n                    for(int j=0; j<B; j++){\n                        if(matrix[i][j])\n                            cant[i]+=cant[j];\n                    }\n                }\n                if(cant[0]==M){\n                    foundAnswer=true;\n                    out.write(\"POSSIBLE\\n\");\n                    for(int i=0; i<B; i++){\n                        for(int j=0; j<B; j++){\n                            if(matrix[i][j]){\n                                out.write(\"1\");\n                            }else{\n                                out.write(\"0\");\n                            }\n                        }\n                        out.write(\"\\n\");\n                    }\n                }\n            }\n            if(!foundAnswer){\n                out.write(\"IMPOSSIBLE\\n\");\n            }\n        }\n        out.close();\n    }\n    \n    static boolean[][] matrix;\n    static int[] cant;\n}"}
{"idx":"1568","func":"static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    int T = scanner.nextInt();\n    scanner.nextLine();\n    for (int t = 1; t <= T; t++) {\n      int B = scanner.nextInt();\n    long M = scanner.nextLong();\n    \n    boolean pos = true;\n    long max = 1;\n    for (int i = 0; i < B - 2; i++) {\n      max = max * 2;\n    }\n    \n    if (max < M) {\n      pos = false;\n    }\n    \n    System.out.printf(\"Case #%d: %s\\n\", t, pos?\"POSSIBLE\":\"IMPOSSIBLE\");\n    \n    if (pos) {\n      int [][] matrix = new int[B][];\n      for (int i = 0; i < B; i++) {\n        matrix[i] = new int[B];\n      }\n    \n      int use = B - 2;\n      while (max > M) {\n        max \/= 2;\n        use --;\n      }\n    \n      for (int i = 0; i <= use; i++) {\n        matrix[i][B-1] = 1;\n        for (int j = i + 1; j <= use; j++) {\n          matrix[i][j] = 1;\n        }\n      }\n    \n      int next = use + 1;\n      long diff = M - max;\n      while (diff > 0) {\n        long link = 1;\n        int log = 0;\n        while (link * 2 <= diff) {\n          link *= 2;\n          log ++;\n        }\n    \n        matrix[next][B-1] = 1;\n        matrix[log+1][next] = 1;\n        diff -= link;\n      }\n    \n      for (int i = 0; i < B; i++) {\n        for (int j = 0; j < B; j++) {\n          System.out.print(matrix[i][j]);\n        }\n        System.out.print(\"\\n\");\n      }\n    }\n    }\n  }\n}"}
{"idx":"1569","func":"class B {\n\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        Scanner scanner = new Scanner(new File(\"E:\/Downloads\/B-large.in\"));\n        FileWriter writer = new FileWriter(\"E:\/Downloads\/data.out\", false);\n        \n        int cases = scanner.nextInt();\n        \n        \n        for(int i=0;i<cases;i++){\n            \n            int br = scanner.nextInt();\n            long cr = scanner.nextLong();\n            \n            writer.write(\"Case #\"+(i+1)+\": \");\n            \n            long rc = br-2;\n            long maximu = 1;\n            while(rc>0){\n                maximu *= 2;\n                rc--;\n            }\n            \n            \n            \n            \n            if(maximu >= cr){\n                writer.write(\"POSSIBLE\");\n                \n                long needMinus = maximu-cr;\n                \n                long[][] arr = new long[br][br];\n                for(int j=0;j<br;j++){\n                    Arrays.fill(arr[j], 0);\n                }\n                \n                if(cr == 0){\n                    \n                }\n                else{\n                    for(int j=0;j<br;j++){\n                        for(int k=0;k<br;k++){\n                            if(k>j){\n                                arr[j][k] = 1;\n                            }\n                        }\n                    }\n                    if(maximu == cr){\n                        \n                    }\n                    else{\n                        \n                        long[] arraywith = new long[br-2];\n                        Arrays.fill(arraywith, 0);\n                        long cn = 1;\n                        for(int j=br-3;j>=0;j--){\n                            cn*=2;\n                            arraywith[j] = cn\/2;\n                        }    \n                        for(int l=0;l<br-2;l++){\n                            if(needMinus >= arraywith[l]){\n                                needMinus -= arraywith[l];\n                                arr[0][l+1] = 0;\n                            }\n                        }\n                    \n                    }\n                    \n                    \n                    \n                }\n                writer.append('\\r');\n                writer.append('\\n');\n                for(int j=0;j<br;j++){\n                    for(int k=0;k<br;k++){\n                        System.out.print(arr[j][k]+\"\");\n                        writer.write(arr[j][k]+\"\");\n                    }\n                    System.out.println(\"\");\n                    writer.append('\\r');\n                    writer.append('\\n');\n                }\n                \n            }\n            else{\n                writer.write(\"IMPOSSIBLE\");\n                writer.append('\\r');\n                writer.append('\\n');\n            }\n        }\n        \n        \n        scanner.close();\n        writer.close();\n        \n        \n    }\n\n}"}
{"idx":"1570","func":"class B {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scanner = new Scanner(new File(\"B.in\"));\n        PrintWriter writer = new PrintWriter(\"B.out\");\n        int T = scanner.nextInt();\n        for (int t = 0; t < T; t++) {\n            int B = scanner.nextInt();\n            long M = scanner.nextLong();\n            long bi[] = new long[B + 1];\n            long now = 1, sum = now;\n            bi[1] = now;\n            for (int b = 2; b < B; b++) {\n                now = Math.min(now, M - sum);\n                if (now == 0) break;\n                bi[b] = now;\n                sum += now;\n                now *= 2;\n            }\n            bi[B] = sum;\n\/\/            writer.println(Arrays.toString(bi));\n\n            writer.printf(\"Case #%d: \", t + 1);\n            if (bi[B] < M) {\n                writer.println(\"IMPOSSIBLE\");\n            } else {\n                writer.println(\"POSSIBLE\");\n                int res[][] = new int[B + 1][B + 1];\n                for (int i = 1; i <= B; i++) {\n                    sum = bi[i];\n                    for (int j = i - 1; j >= 1 && sum > 0; j--) {\n                        if (bi[j] == 0 || sum - bi[j] < 0) continue;\n                        sum -= bi[j];\n                        res[j][i] = 1;\n                    }\n                }\n                for (int i = 1; i <= B; i++) {\n                    for (int j = 1; j <= B; j++) {\n                        writer.print(res[i][j]);\n                    }\n                    writer.println();\n                }\n            }\n        }\n        writer.close();\n    }\n}"}
{"idx":"1571","func":"class B {\n    public static void main(String[] args) throws IOException {\n        \/\/ TODO Auto-generated method stub\n        Scanner scanner = new Scanner(new File(\"D:\/GCJ2016\/B\/B-large.in\"));\n        FileWriter writer = new FileWriter(\"D:\/GCJ2016\/B\/B-large.out\", false);\n        int cases = scanner.nextInt();\n        for(int i=0;i<cases;i++){    \n            int br = scanner.nextInt();\n            long cr = scanner.nextLong();\n            writer.write(\"Case #\"+(i+1)+\": \");\n            long rc = br-2;\n            long maximu = 1;\n            while(rc>0){\n                maximu *= 2;\n                rc--;\n            }\n            if(maximu >= cr){\n                writer.write(\"POSSIBLE\");\n                long needMinus = maximu-cr;\n                long[][] arr = new long[br][br];\n                for(int j=0;j<br;j++){\n                    Arrays.fill(arr[j], 0);\n                }\n                if(cr == 0){    \n                }\n                else{\n                    for(int j=0;j<br;j++){\n                        for(int k=0;k<br;k++){\n                            if(k>j){\n                                arr[j][k] = 1;\n                            }\n                        }\n                    }\n                    if(maximu == cr){\n                    }\n                    else{\n                        \n                        long[] arraywith = new long[br-2];\n                        Arrays.fill(arraywith, 0);\n                        long cn = 1;\n                        for(int j=br-3;j>=0;j--){\n                            cn*=2;\n                            arraywith[j] = cn\/2;\n                        }    \n                        for(int l=0;l<br-2;l++){\n                            if(needMinus >= arraywith[l]){\n                                needMinus -= arraywith[l];\n                                arr[0][l+1] = 0;\n                            }\n                        }\n                    }\n                }\n                writer.append('\\r');\n                writer.append('\\n');\n                for(int j=0;j<br;j++){\n                    for(int k=0;k<br;k++){\n                        System.out.print(arr[j][k]+\"\");\n                        writer.write(arr[j][k]+\"\");\n                    }\n                    System.out.println(\"\");\n                    writer.append('\\r');\n                    writer.append('\\n');\n                }\n            }\n            else{\n                writer.write(\"IMPOSSIBLE\");\n                writer.append('\\r');\n                writer.append('\\n');\n            }\n        }\n        scanner.close();\n        writer.close();\n    }\n}"}
{"idx":"1572","func":"class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int tests = sc.nextInt();\n        for(int testNum = 1; testNum <= tests; testNum++)\n        {\n            System.out.print(\"Case #\" + testNum + \": \");\n            int buildings = sc.nextInt();\n            long ways = sc.nextLong();\n            \n            if(ways > Math.pow(2, buildings - 2))\n                System.out.println(\"IMPOSSIBLE\");\n            else if(buildings == 2)\n            {\n                \/\/Special case for n = 2\n                System.out.println(\"POSSIBLE\");\n                if(ways == 0)\n                    System.out.println(\"00\\n00\");\n                else if(ways == 1)\n                    System.out.println(\"01\\n00\");\n            }\n            else if(ways == Math.pow(2, buildings - 2))\n            {\n                System.out.println(\"POSSIBLE\");\n                for(int i = 0; i < buildings; i++)\n                {\n                    for(int j = 0; j < buildings; j++)\n                    {\n                        if(i < j)\n                            System.out.print(\"1\");\n                        else\n                            System.out.print(\"0\");\n                    }\n                    System.out.println();\n                }\n            }\n            else\n            {\n                System.out.println(\"POSSIBLE\");\n                \n                int[][] edges = new int[buildings][buildings];\n                \/\/Create 2^(i - 1) ways to reach building i\n                for(int i = 0; i < buildings - 1; i++)\n                {\n                    for(int j = i + 1; j < buildings - 1; j++)\n                        edges[i][j] = 1;\n                }\n                \n                \/\/Find binary representation to add edges to last building\n                for(int i = 0; i < buildings - 1; i++)\n                {\n                    if((1L << i & ways) > 0)\n                        edges[i + 1][buildings - 1] = 1;\n                }\n                \n                for(int i = 0; i < buildings; i++)\n                {\n                    for(int j = 0; j < buildings; j++)\n                    {\n                        System.out.print(edges[i][j]);\n                    }\n                    System.out.println();\n                }\n                \n                \/\/countWays(edges);\n            }\n        }\n    }\n}"}
{"idx":"1573","func":"class CB {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n\n        for (int t = 1; t <= T; t++) {\n            int B = in.nextInt();\n            Long M = in.nextLong();\n            String ans = \"\";\n            if (Math.pow(2, B - 2) < M) {\n                ans = \"IMPOSSIBLE\";\n                System.out.printf(\"Case #%d: \", t);\n                System.out.println(ans);\n            } else {\n                ans = \"POSSIBLE\";\n                System.out.printf(\"Case #%d: \", t);\n                System.out.println(ans);\n\n                String binary = Long.toBinaryString(M-1);\n                int l = binary.length();\n                if (B == 2) {\n                    if (M == 1) {\n                        System.out.println(\"01\");\n                        System.out.println(\"00\");\n                    }\n                } else {\n                    for (int i = 0; i < B; i++) {\n                        if (i == 0) {\n                            String firstLine = \"\";\n                            firstLine = binary + \"1\";\n                            while (firstLine.length() < B) {\n                                firstLine = \"0\" + firstLine;\n                            }\n                            System.out.print(firstLine);\n                        } else {\n                            for (int j = 0; j < B; j++) {\n                                if (j <= i) {\n                                    System.out.print(\"0\");\n                                } else {\n                                    System.out.print(\"1\");\n                                }\n                            }\n                        }\n                        System.out.println();\n                    }\n                }\n            }\n        }\n    }\n}"}
{"idx":"1574","func":"class B1 {\n\n    public static final String rutaDatos = \"C:\\\\Users\\\\Augusto\\\\Desktop\\\\Code Jam\\\\\";\n    \n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        String problem = \"B\";\n        \/\/String input=problem+\"-sample.in\";\n        \/\/String input=problem+\"-small-attempt1.in\";\n        String input=problem+\"-large.in\";\n        Scanner in = new Scanner(new File(rutaDatos+\"input\\\\\"+input));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(rutaDatos+\"output\\\\\"+input+\".out.txt\")));    \n        \n        int T = in.nextInt();\n        for(int i=0;i<T;i++) {\n            \n            \/*********************************\/\n            \n            int B = in.nextInt();\n            long M = in.nextLong();\n            \n            \n            \n            String answer = \"Case #\"+(i+1)+\": \";\n            \n            long l = 1;\n            for(int j=0;j<B-2;j++) l = l*2;\n            \n            if(M>l) {\n                answer += \"IMPOSSIBLE\";\n                System.out.println(answer);\n                out.println(answer);\n            }\n            else {\n                answer += \"POSSIBLE\";\n                System.out.println(answer);\n                out.println(answer);\n                for(int j=0;j<B;j++) {\n                    for(int k=0;k<B;k++) {\n                        int d=0;\n                        if(k>j&&k<B-1) {\n                            d = 1;\n                        }\n                        if(j==0&&k==B-1) d=1;\n                        else if(k==B-1) {\n                            long p = M-1;\n                            String s = Long.toBinaryString(p);\n                            \/\/System.out.println(\"*\"+s+\"*\");\n                            if(j>s.length()) d=0;\n                            else d = (s.charAt(s.length()-j))-'0';\n                        }\n                        System.out.print(d);\n                        out.print(d);\n                    }\n                    System.out.println();\n                    out.println();\n                }\n            }\n            \n            \n            \n            \n            \/*********************************\/\n            \n            \n        }\n        out.close();\n    }\n    \n}"}
{"idx":"1575","func":"class B {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/Scanner scanner = new Scanner(System.in);\n        Scanner scanner = new Scanner(new File(\"inputBlarge.txt\"));\n        int tests = scanner.nextInt();\n        for (int test=1; test<=tests; test++) {\n            scanner.nextLine();\n            int b = scanner.nextInt();\n            long m = scanner.nextLong();\n            int[][] ans = new int[b+1][b+1];\n\n            ans[1][b] = 1;\n            m--;\n            if (m > 0 && 2 < b) {\n                ans[2][b] = 1;\n                m--;\n            }\n\n            for (int i=2; i<b; i++) {\n                ans[1][i] = 1;\n            }\n\n            int next = 3;\n            long add = 2L;\n            while (m > 0 && next < b) {\n                ans[next][b] = 1;\n                for (int prev = next - 1; prev >= 2; prev--) {\n                    ans[next][prev] = 1;\n                }\n                m -= add;\n                add *= 2;\n                next++;\n            }\n            add \/= 4;\n            int last = next - 1;\n            int prev = last - 1;\n            while (m < 0) {\n                while (add > -m) {\n                    prev--;\n                    add \/= 2;\n                }\n                m += add;\n                ans[last][prev] = 0;\n            }\n\n            if (m > 0) {\n                System.out.println(\"Case #\" + test + \": IMPOSSIBLE\");\n            } else {\n                System.out.println(\"Case #\" + test + \": POSSIBLE\");\n                for (int y=1; y<ans.length; y++) {\n                    for (int x=1; x<ans[0].length; x++) {\n                        System.out.print(ans[y][x]);\n                    }\n                    System.out.println();\n                }\n            }\n        }\n\n        scanner.close();\n    }\n}"}
{"idx":"1576","func":"class Slides {\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\n        int T = Integer.parseInt(bf.readLine());\n\n        final StringBuilder[] results = new StringBuilder[T];\n        for (int testcase = 1; testcase <= T; testcase++) {\n\n            \/\/ hahahahaha, this reduces to printing a bitstring\n            \/\/ that's really weird, eh?\n            StringTokenizer st = new StringTokenizer(bf.readLine());\n            int B = Integer.parseInt(st.nextToken());\n            long M = Long.parseLong(st.nextToken());\n\n            StringBuilder output = new StringBuilder();\n            \n            long numBits = B - 2;\n            long maxValue = 1L << numBits;\n            if(M <= maxValue){\n                output.append(\"POSSIBLE\");\n                int[][] adjMatrix = new int[B][B];\n                for(int i=1; i < B -1; i++){\n                    \/\/ every bit connects to the end\n                    adjMatrix[i][B-1] = 1;\n                    \/\/ every bit connects to each lower bit\n                    for(int j=1; j < i; j++){\n                        adjMatrix[i][j] = 1;\n                    }\n                }\n                \n                if(M == maxValue){\n                    \/\/ connect everything\n                    for(int i=1; i < B; i++){\n                        adjMatrix[0][i] = 1;\n                    }\n                } else {\n                    \/\/ each entry (i+1) has exactly 2^i  paths leading from it, and they add summatively\n                    for(int i=0; i < numBits; i++){\n                        if((M & (1L << i)) > 0){\n                            adjMatrix[0][i+1] = 1;\n                        }\n                    }\n                }\n                \n                for(int i=0; i < B; i++){\n                    output.append(\"\\n\");\n                    for(int j=0; j < B; j++){\n                        output.append(adjMatrix[i][j]);\n                    }\n                }\n            } else {\n                output.append(\"IMPOSSIBLE\");\n            }\n            \n            results[testcase - 1] = output;\n\n        }\n\n        for (int testcase = 1; testcase <= T; testcase++) {\n            System.out.println(\"Case #\" + testcase + \": \"\n                    + results[testcase - 1].toString());\n        }\n    }\n\n}"}
{"idx":"1577","func":"class CodeJam {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        final int T = Integer.parseInt(sc.nextLine());\n        for (int caseCount = 1; caseCount <= T; caseCount++) {\n            final int B = sc.nextInt();\n            final long M = sc.nextLong();\n            int[][] g = new int[B][B];\n            long[] pathCounts = new long[B];\n            g[B-2][B-1] = 1;\n            pathCounts[B-1] = 1;\n            for (int y = B - 2; y >= 0; y--) {\n                long count = 0;\n                for (int x = y + 1; x < B; x++) {\n                    try {\n                    if (count + pathCounts[x] <= M) {\n                        g[y][x] = 1;\n                        count += pathCounts[x];\n                    }\n                    \n                    } catch (InputMismatchException e) {\n                        System.out.print(e.getMessage()); \/\/try to find out specific reason.\n                    }\n                }\n                pathCounts[y] = count;\n            }\n            boolean possible = (pathCounts[0] == M);\n\n            System.out.print(\"Case #\" + caseCount + \": \");\n            if (possible) {\n                System.out.println(\"POSSIBLE\");\n                for (int y = 0; y < B; y++) {\n                    for (int x = 0; x < B; x++) {\n                        System.out.print(g[y][x]);\n                    }\n                    System.out.println();\n                }\n            } else {\n                System.out.println(\"IMPOSSIBLE\");\n            }\n        }\n        sc.close();\n    }\n\n}"}
{"idx":"1578","func":"class RoundThreeProblemThree {\n\n    public static void main(String[] args) {\n\n\/\/        String ipf = \"\/Users\/KiRaN\/Desktop\/CodeBase\/Google_CodeBase\/SheepSleep\/src\/small.in\";\n\/\/        String opf = \"\/Users\/KiRaN\/Desktop\/CodeBase\/Google_CodeBase\/SheepSleep\/src\/small.out\";\n        \n        String ipf = \"\/Users\/KiRaN\/Desktop\/CodeBase\/Google_CodeBase\/SheepSleep\/src\/large.in\";\n        String opf = \"\/Users\/KiRaN\/Desktop\/CodeBase\/Google_CodeBase\/SheepSleep\/src\/large.out\";\n        \n        \n        try {\n\n            BufferedReader bufferedReader = new BufferedReader(new FileReader(ipf));\n            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(opf));\n\n            \/\/ Total number of test cases\n            int noOfTestCases = Integer.valueOf(bufferedReader.readLine());\n            \n            \n            \n            for (int testCases = 0; testCases < noOfTestCases; testCases++){\n                String var1 = bufferedReader.readLine();\n                int var2 = Integer.parseInt(var1.split(\" \")[0]);\n                long var3 = Long.parseLong(var1.split(\" \")[1]);\n                long var4 = var3;\n                long var5;\n                String v6 = \"\";\n                String v7 = \"0\";\n                \n                for(int it1=2;it1<var2;it1++){\n                    v6 += v7;\n\n                    for(int it2=1;it2<var2;it2++){\n                        \n                        if(it1<=it2)\n                            v6 += \"1\";\n                        else\n                            v6 += \"0\";\n                        \n                    }\n\n                    v6 += \"\\n\";\n\n                }\n                for(int it3=0;it3<var2;it3++){\n                    \n                        v6 += \"0\";\n                    \n                }\n                \n                boolean v8[]  = new boolean[var2-1];\n\/\/              for(int i = 0; i < (b-1); i++){\n\/\/                  tempA[i] = false;\n\/\/                  \n\/\/              }\n                long v9 = (long) Math.pow(2, (var2-2));\n                System.out.println(\"  maxPossible  \" + v9);\n                if(var2 == 2 && var3 == 1){\n                    \n                    bufferedWriter.write(\"Case #\" + (testCases + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n                    bufferedWriter.write(\"01\" + \"\\n\");\n                    bufferedWriter.write(\"00\" + \"\\n\");\n                    System.out.println(\"Case #\" + (testCases + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n                    System.out.println(\"01\" + \"\\n\");\n                    System.out.println(\"00\" + \"\\n\");\n\n                }else if(var3 > v9){\n                    \n\n                    bufferedWriter.write(\"Case #\" + (testCases + 1) + \": \" + \"IMPOSSIBLE\" + \"\\n\");\n                    System.out.println(\"Case #\" + (testCases + 1) + \": \" + \"IMPOSSIBLE\" + \"\\n\");\n                    \n                }else{\n                    \n                    bufferedWriter.write(\"Case #\" + (testCases + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n\n                    var5 = v9\/2;\n                    for(int i = 0; i < (var2-1); i++){\n                        \n                        if(var4 == 0)\n                            break;\n                        \n                        if(var4 >= var5){\n                            \n                            v8[i] = true;\n                            var4 -= var5;\n                            \n                        }\n                        var5 \/=2;\n                        \n                    }\n                    String tempresult = \"0\";\n\n                    for(int i = 0; i < (var2-1); i++){\n                        if(v8[i]){\n                            tempresult = tempresult + \"1\";\n                        }else{\n                            tempresult = tempresult + \"0\";\n                        }\n                        \n                    }   \n                    \n                    v6 = tempresult + \"\\n\" + v6;\n\n                    \n                    System.out.println(v6);\n\n                    bufferedWriter.write(v6 + \"\\n\");\n\n                }\n\n\n                \n\n            }\n                \n            bufferedReader.close();\n            bufferedWriter.close();\n\n        } catch (FileNotFoundException fileNotFoundException) {\n\n            System.out.println(\"Some Exception: \" + fileNotFoundException.getMessage());\n            fileNotFoundException.printStackTrace();\n\n        } catch (IOException ioException) {\n\n            System.out.println(\"Some Exception: \" + ioException.getMessage());\n            ioException.printStackTrace();\n\n        } catch (Exception exception) {\n            \n            System.out.println(\"Some Exception: \" + exception.getMessage());\n            exception.printStackTrace();\n        }\n\n    }\n\n}"}
{"idx":"1579","func":"class q2 {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        for (int i=1; i<=t; i++) {\n            System.out.print(\"Case #\" + i + \": \");\n            int b = in.nextInt();\n            long m = in.nextLong();\n            if (Math.pow(2, b-2)<m) {\n                System.out.println(\"IMPOSSIBLE\");\n            }\n            else {\n                System.out.println(\"POSSIBLE\");\n                for (int j=1; j<=b; j++) {\n                    if (j==1) {\n                        String first=\"0\";\n                        for (int a=0; a<b; a++) {\n                            if (((long)Math.pow(2, b-2)==m)) {\n                                if (a>0)\n                                    first +='1';\n                            }\n                            else  if (a==0){\n                                first += Long.toBinaryString(m);\n                                first = first + \"0\";\n                                while (first.length()<b) {\n                                    first = \"0\" + first;\n                                }\n                            }\n                        }\n                        System.out.println(first);\n                    }\n                    else {\n                        for (int k=1; k<=b; k++) {\n                            if (k>j) {\n                                System.out.print(\"1\");\n                            }\n                            else {\n                                System.out.print(\"0\");\n                            }\n                        }\n                        System.out.println();\n                    }\n                }\n            }\n        }\n    }\n}"}
{"idx":"1580","func":"class Slides\n{\n    public static void main(String[] args) throws Exception\n    {\n        \n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(in.readLine());\n        for (int t = 0; t < T; ++t)\n        {\n            StringTokenizer st = new StringTokenizer(in.readLine());\n            int B = Integer.parseInt(st.nextToken());\n            long M = Long.parseLong(st.nextToken());\n            long MAX = (1L<<(B-2));\n            if (M > MAX) System.out.printf(\"Case #%d: IMPOSSIBLE\\n\", t+1);\n            else\n            {\n                System.out.printf(\"Case #%d: POSSIBLE\\n\", t+1);\n                String S = Long.toBinaryString(M-1)+\"1\";\n                while (S.length() < B) S = \"0\"+S;\n                System.out.println(S);\n                for (int i = 1; i < B-1; ++i)\n                {\n                    for (int j = 0; j < B; ++j)\n                    {\n                        if (j <= i) System.out.print(\"0\");\n                        else System.out.print(\"1\");\n                    }\n                    System.out.println();\n                }\n                for (int i = 0; i < B; ++i) System.out.print(\"0\");\n                System.out.println();\n            }\n        }\n    }\n}"}
{"idx":"1581","func":"class Main {\n    public static void main(String[] args) throws IOException{\n        Scanner scanner = new Scanner(System.in);\n        \/\/Scanner scanner = new Scanner(new FileInputStream(new File(\"B-large.in\")));\n        \/\/FileOutputStream fo = new FileOutputStream(new File(\"output.out\"));\n        int t = scanner.nextInt();\n        for(int x = 1; x <= t; ++x){\n            int b = scanner.nextInt();\n            long m = scanner.nextLong();\n            System.out.print(\"Case #\"+x+\": \");\n            \/\/fo.write((\"Case #\"+x+\": \").getBytes());\n            if(m > Math.pow(2, b - 2)){\n                System.out.print(\"IMPOSSIBLE\\n\");\n                \/\/fo.write((\"IMPOSSIBLE\\n\").getBytes());\n                continue;\n            }\n            else\n                System.out.print(\"POSSIBLE\\n\");\n                \/\/fo.write((\"POSSIBLE\\n\").getBytes());\n            int[][] slides = new int[b][b];\n            for(int i = 0; i < b; ++i){\n                for(int j = i + 1; j < b; ++j){\n                    slides[i][j] = 1;\n                }\n            }\n            String str = Long.toBinaryString(m-1) + \"\";\n            if(str.equals(\"0\"))\n                str = \"\";\n            while(str.length() < b - 1){\n                str = \"0\" + str;\n            }\n            str += \"1\";\n            \/\/fo.write((str+\"\\n\").getBytes());\n            System.out.println(str);\n            for(int i = 1; i < b; ++i){\n                for(int j = 0; j < b; ++j){\n                    \/\/fo.write((slides[i][j]+\"\").getBytes());\n                    System.out.print(slides[i][j]);\n                }\n                \/\/fo.write((\"\\n\").getBytes());\n                System.out.print(\"\\n\");\n            }\n        }\n    }\n}"}
{"idx":"1582","func":"class CodeJam3_B {\n\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"C:\/Users\/Madi\/codejam\/B-small-practice.in\"));\n                BufferedWriter bw = new BufferedWriter(new FileWriter(\"C:\/Users\/Madi\/codejam\/B-small-practice.out\"))) {\n\n            int t = Integer.parseInt(br.readLine());\n\n            for (int i = 0; i < t; i++) {\n                String[] s = br.readLine().split(\" \");\n                int b = Integer.parseInt(s[0]);\n                long m = Long.parseLong(s[1]);\n                int cs = i + 1;\n                if (m > Math.pow(2, b - 2)) {\n                    bw.write(\"Case #\" + cs + \": IMPOSSIBLE\");\n                    bw.write(\"\\n\");\n                    bw.flush();\n                } else {\n                \n                    int pow = 0;\n                    long res = 1;\n                    while (pow < b - 2) {\n                        res *= 2;\n                        pow++;\n                    }\n                    res -= m;\n                    ArrayList<Integer> list = new ArrayList<>();\n                    while (res > 0) {\n                        pow = 0;\n                        long k = 1;\n                        while (pow <= 50) {\n                            if (k == res) {\n                                list.add(pow + 1);\n                                res = 0;\n                                break;\n                            } else if (k > res) {\n                                list.add(pow);\n                                res -= k \/ 2;\n                                break;\n                            }\n                            k *= 2;\n                            pow++;\n                        }\n                    }\n                \n                    bw.write(\"Case #\" + cs + \": POSSIBLE\\n\");\n                \n                    for (int i1 = 0; i1 < b; i1++) {\n                        for (int j = 0; j < b; j++) {\n                            if (i1 >= j || (j == b - 1 && list.contains(i1))) {\n                                bw.write(\"0\");\n                            } else {\n                                bw.write(\"1\");\n                            }\n                        }\n                        bw.write(\"\\n\");\n                    }\n                    bw.flush();\n                }\n            }\n\n        }\n\n    }\n}"}
{"idx":"1583","func":"class B {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int i = 1; i<=T; i++) {\n            int B = sc.nextInt();\n            String s = sc.next();\n            long M = Long.parseLong(s);\n            long prod = 1;\n            for(int i1 = 2; i1<=B-1; i1++) {\n                prod*=2;\n            }\n            long p2 = prod;\n            if(p2<M) {\n                System.out.println(\"Case #\" + i + \": IMPOSSIBLE\");\n                continue;\n            }\n            System.out.println(\"Case #\" + i + \": POSSIBLE\");\n            boolean[][] board = new boolean[B][B];\n            for(int r = 0; r<B; r++) {\n                for(int c = r+1; c<B; c++) {\n                    board[r][c] = true;\n                }\n            }\n            long diff = p2-M;\n            int d = 1;\n            while(diff>0) {\n                if(diff%2 == 1) {\n                    board[d][B-1] = false;\n                }\n                diff \/=2;\n                d++;\n            }\n            StringBuilder sb = new StringBuilder();\n            for(int r = 0; r<B; r++) {\n                for(int c = 0; c<B; c++) {\n                    if(board[r][c]) \n                        sb.append('1');\n                    else\n                        sb.append('0');    \n                }\n                sb.append('\\n');\n            }\n            System.out.print(sb);\n            \n            \n        }\n    }\n}"}
{"idx":"1584","func":"class B {\n    public static void main(String[] args) {\n        \/*\n        BigInteger[] ways = new BigInteger[50];\n        for(int i =0; i<50; i++){\n            ways[i] = new BigInteger(\"0\");\n        }\n        ways[0] = new BigInteger(\"1\");\n        for(int i = 1; i<50; i++){\n            for(int j =0; j<i; j++){\n                ways[i]=ways[i].add(ways[j]);\n            }\n            System.out.println(ways[i].toString());\n        }\n        *\/\n        Scanner in = new Scanner(System.in);\n        long max = (1L<<48);\n        int cases=in.nextInt();\n        for(int q=1; q<=cases;q++){\n            int builds = in.nextInt();\n            long ways = in.nextLong();\n            long max2 = (1L<<(builds-2));\n            if(ways>max2){\n                System.out.println(\"Case #\"+q+\": IMPOSSIBLE\");\n            }\n            else{\n                System.out.println(\"Case #\"+q+\": POSSIBLE\");\n                String[] strings = new String[builds];\n                Arrays.fill(strings, \"\");\n                for(int i =0; i<builds;i++){\n                    for(int j = 0;j<=i;j++){\n                        strings[i]+=\"0\";\n                    }\n                    for(int j = i+1;j+1<builds;j++){\n                        strings[i]+=\"1\";\n                    }\n                }\n                for(int i = builds-2;i>=0;i--){\n                    long can = 1;\n                    if(i>0){\n                        can = (1L<<i-1);\n                    }\n                    if(can<=ways){\n                        ways-=can;\n                        strings[i]+=\"1\";\n                    }\n                    else{\n                        strings[i]+=\"0\";\n                    }\n                }\n                for(int i =0;i<builds; i++){\n                    System.out.println(strings[i]);\n                }\n            }\n        }\n    }\n}"}
{"idx":"1585","func":"class B {\n\n    public static void main(String[] args) {\n\n\/\/        String in = \"\/Users\/Moshin\/Code Jam\/\/small.in\";\n\/\/        String out = \"\/Users\/Moshin\/Code Jam\/small.out\";\n        String in = \"\/Users\/Moshin\/Code Jam\/large.in\";\n        String out = \"\/Users\/Moshin\/Code Jam\/large.out\";\n\n        try {\n\n            BufferedReader bufferedReader = new BufferedReader(new FileReader(in));\n            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(out));\n\n            \/\/ Total number of test cases\n            int noOfTestCases = Integer.valueOf(bufferedReader.readLine());\n            \n            \n        \n            for (int t = 0; t < noOfTestCases; t++){\n                String bm = bufferedReader.readLine();\n                int b = Integer.parseInt(bm.split(\" \")[0]);\n                long m = Long.parseLong(bm.split(\" \")[1]);\n                long tempM = m;\n                long tempMax;\n                String result = \"\";\n                String first = \"0\";\n                \n                for(int i=2;i<b;i++){\n                    result += first;\n\n                    for(int j=1;j<b;j++){\n                        \n                        if(i<=j)\n                            result += \"1\";\n                        else\n                            result += \"0\";\n                        \n                    }\n\n                    result += \"\\n\";\n\n                }\n                for(int j=0;j<b;j++){\n                    \n                        result += \"0\";\n                    \n                }\n                \n                boolean tempA[]  = new boolean[b-1];\n\/\/                for(int i = 0; i < (b-1); i++){\n\/\/                    tempA[i] = false;\n\/\/                    \n\/\/                }\n                long maxPossible = (long) Math.pow(2, (b-2));\n                System.out.println(\"  maxPossible  \" + maxPossible);\n                if(b == 2 && m == 1){\n                    \n                    bufferedWriter.write(\"Case #\" + (t + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n                    bufferedWriter.write(\"01\" + \"\\n\");\n                    bufferedWriter.write(\"00\" + \"\\n\");\n                    System.out.println(\"Case #\" + (t + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n                    System.out.println(\"01\" + \"\\n\");\n                    System.out.println(\"00\" + \"\\n\");\n\n                }else if(m > maxPossible){\n                    \n\n                    bufferedWriter.write(\"Case #\" + (t + 1) + \": \" + \"IMPOSSIBLE\" + \"\\n\");\n                    System.out.println(\"Case #\" + (t + 1) + \": \" + \"IMPOSSIBLE\" + \"\\n\");\n                    \n                }else{\n                    \n                    bufferedWriter.write(\"Case #\" + (t + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n\n                    tempMax = maxPossible\/2;\n                    for(int i = 0; i < (b-1); i++){\n                        \n                        if(tempM == 0)\n                            break;\n                        \n                        if(tempM >= tempMax){\n                            \n                            tempA[i] = true;\n                            tempM -= tempMax;\n                            \n                        }\n                        tempMax \/=2;\n                        \n                    }\n                    String tempresult = \"0\";\n\n                    for(int i = 0; i < (b-1); i++){\n                        if(tempA[i]){\n                            tempresult = tempresult + \"1\";\n                        }else{\n                            tempresult = tempresult + \"0\";\n                        }\n                        \n                    }    \n                    \n                    result = tempresult + \"\\n\" + result;\n\n                    \n                    System.out.println(result);\n\n                    bufferedWriter.write(result + \"\\n\");\n\n                }\n\n\n                \n\n            }\n                \n            bufferedReader.close();\n            bufferedWriter.close();\n\n        }catch (Exception exception) {\n            \n            exception.printStackTrace();\n        \n        }\n\n    }\n\n\n}"}
{"idx":"1586","func":"class B {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n\n        for (int t = 1; t <= T; ++t) {\n            int n = in.nextInt();\n            long m = in.nextLong();\n            boolean[][] b = new boolean[n][n];\n            long[] sum = new long[n];\n            sum[0] = 1;\n            b[0][n - 1] = true;\n            --m;\n            int cur = 1;\n            while (m > 0 && cur < n - 1) {\n                b[cur][n - 1] = true;\n                b[0][cur] = true;\n                --m;\n                sum[cur]++;\n                for (int prev = cur - 1; prev > 0; --prev) {\n                    if (m >= sum[prev]) {\n                        b[prev][cur] = true;\n                        m -= sum[prev];\n                        sum[cur] += sum[prev];\n                    }\n                }\n                ++cur;\n            }\n\n            if (m > 0) {\n                System.out.println(\"Case #\" + t + \": IMPOSSIBLE\");\n            } else {\n                System.out.println(\"Case #\" + t + \": POSSIBLE\");\n                for (int i = 0; i < n; ++i) {\n                    for (int j = 0; j < n; ++j) {\n                        System.out.print(b[i][j] ? 1 : 0);\n                    }\n                    System.out.println();\n                }\n            }\n        }\n    }\n}"}
{"idx":"1587","func":"class cj {\n\n    \/**\n     * @param args the command line arguments\n     *\/\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int i = 1; i <= T; i++)\n        {\n            System.out.print(\"Case #\" + i + \": \");\n            int B = sc.nextInt();\n            BigInteger M = new BigInteger(sc.next());\n            BigInteger two = new BigInteger(\"2\");\n            if(M.compareTo(two.pow(B-2)) == 1)\n            {\n                System.out.println(\"IMPOSSIBLE\");\n                continue;\n            }\n            System.out.println(\"POSSIBLE\");\n            BigInteger M1 = M.subtract(BigInteger.ONE);\n            int res[][] = new int[B][B];\n            for(int i2 = 0; i2 < B; i2++)\n            {\n                for(int j = 0; j < B; j++)\n                {\n                    res[i2][j] = (j > i2) ? 1 : 0;\n                }\n            }\n            for(int i4 = 1; i4 < B - 1; i4++)\n            {\n                res[0][i4] = 0;\n            }\n            BigInteger two1 = new BigInteger(\"2\");\n            for(int i1 = B - 2; i1 > 0; i1--)\n            {\n                if(M1.mod(two1).equals(BigInteger.ONE))\n                {\n                    res[0][i1] = 1;\n                }\n                M1 = M1.divide(two1);\n            }\n            for(int i3 = 0; i3 < B; i3++)\n            {\n                for(int j = 0; j < B; j++)\n                {\n                    System.out.print(res[i3][j]);\n                }\n                System.out.println();\n            }\n        }\n            \n    }\n}"}
{"idx":"1588","func":"class B {\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n        String filename = \"B-large\";\n        Scanner sc = new Scanner(new File(filename + \".in\"));\n        \/\/Scanner sc = new Scanner(System.in);\n        PrintWriter pw = new PrintWriter(filename + \".out\", \"UTF-8\");\n        while (sc.hasNext()) {\n            int T = sc.nextInt();\n            for (int i = 1; i <= T; i++) {\n                int B = sc.nextInt();\n                long M = sc.nextLong();\n                long max = 1L << (B - 2);\n                if (M > max) {\n                    System.out.println(\"Case #\" + i + \": IMPOSSIBLE\");\n                    pw.println(\"Case #\" + i + \": IMPOSSIBLE\");\n                } else {\n                    String str = \"0\";\n                    System.out.println(\"Case #\" + i + \": POSSIBLE\");\n                    pw.println(\"Case #\" + i + \": POSSIBLE\");\n                    for(int j = B-2; j > 0; j--) {\n                        if(M >= (1L << (j-1))) {\n                            M -= (1L << (j-1));\n                            str += \"1\";\n                        } else {\n                            str += \"0\";\n                        }\n                    }\n                    str += M==1 ? \"1\" : \"0\";\n                    pw.println(str);\n                    System.out.println(str);\n                    for(int j = 1; j < B; j++) {\n                        for(int k = 0; k < B; k++) {\n                            pw.print(k <= j ? \"0\" : \"1\");\n                            System.out.print(k <= j ? \"0\" : \"1\");\n                        }\n                        pw.println();\n                        System.out.println();\n                    }\n                }\n                \n            }\n            pw.close();\n        }\n    }\n\n}"}
{"idx":"1589","func":"class Slides {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int t = scanner.nextInt();\n        for(int cas=1; cas<=t; ++cas) {\n            int b = scanner.nextInt();\n            long m = scanner.nextLong();\n            if(m > Math.pow(2, b-2)){\n                System.out.printf(\"Case #%d: IMPOSSIBLE\\n\", cas);\n            }\n            else {\n                boolean[][] ans = new boolean[b][b];\n                if(m>0) {\n                    ans[0][b-1] = true;\n                    m--;\n                }\n                for(int i=0; i<b-1; ++i) {\n                    if(m>0) \n                        ans[i+1][b-1] = true;\n                    if(m>=Math.pow(2, i)) {\n                        for(int j=0; j<=i; ++j)\n                            ans[j][i+1] = true;\n                        m-=Math.pow(2,i);\n                    }\n                    else {\n                        int row = 1;\n                        while(m>0) {\n                            if(m%2==1) {\n                                ans[row][i+1] = true;\n                            }\n                            m\/=2;\n                            row++;\n                        }\n                    }\n                }\n                System.out.printf(\"Case #%d: POSSIBLE\\n\", cas);\n                for(int i=0; i<b; ++i){\n                    for(int j=0; j<b; ++j)\n                        System.out.printf(\"%s\", ans[i][j]?\"1\":\"0\");\n                    System.out.println();\n                }\n                \n            }\n        }\n    }\n}"}
{"idx":"1590","func":"class B {\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(\"\/Users\/chao\/Downloads\/B-large.in\"));\n        \/\/BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        FileWriter out = new FileWriter(\"\/Users\/chao\/Desktop\/B-large.txt\");\n        \/\/PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        String s = in.readLine();\n        int m = Integer.parseInt(s);\n        for (int cases = 1; cases <= m; cases++) {\n            String[] ss = in.readLine().split(\" \");\n            int B = Integer.parseInt(ss[0]);\n            long M = Long.parseLong(ss[1]);\n            out.write(\"Case #\" + cases + \": \");\n            int n = B;\n            long x = 1;\n            for (int i1 = 0; i1 < B-2; i1++) {\n                x*=2;\n            }\n            long max = x;\n            if (max >= M) {\n                out.write(\"POSSIBLE\\n\");\n                int[][] map = new int[n][n];\n                for (int i = 1; i < n; i++) {\n                    for (int j = i + 1; j < n; j++) {\n                        map[i][j] = 1;\n                    }\n                }\n                for (int k = 1; k < n; k++) {\n                    if (k != n-1) max = max\/2;\n                    if (max <= M) {\n                        M-=max;\n                        map[0][k] = 1;\n                    }\n                }\n                for (int i = 0; i < n; i++) {\n                    for (int j = 0; j < n; j++) {\n                        out.write(\"\"+map[i][j]);\n                    }\n                    out.write(\"\\n\");\n                }\n            } else {\n                out.write(\"IMPOSSIBLE\\n\");\n            }\n        }\n        in.close();\n        out.flush();\n        out.close();\n    }\n\n}"}
{"idx":"1591","func":"class B {\n    public static void main(String args[]) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(in));\n        int T = parseInt(br.readLine());\n        for (int z=0;z<T;z++) {\n            String[] ss = br.readLine().trim().split(\"\\\\s+\");\n            int B = parseInt(ss[0]);\n            Long M = Long.parseLong(ss[1]);\n\n            long x = 1L << (B-2);\n            if (M > x) {\n                out.println(\"Case #\" + (z+1) + \": IMPOSSIBLE\");\n                continue;\n            } \n            boolean[][] mat = new boolean[B][B];\n            for(int i=1;i<B;i++) {\n                for(int j=i+1;j<B;j++) {\n                    mat[i][j] = true;\n                }\n            }\n            if (M == x) {\n                for(int j=1;j<B;j++) {\n                    mat[0][j] = true;\n                }\n            } else {\n                int u = B-2;\n                while (M > 0) {\n                    if ((M&1) == 1) {\n                        mat[0][u] = true;\n                    }\n                    u--;\n                    M >>= 1;\n                }\n            }\n            out.println(\"Case #\" + (z+1) + \": POSSIBLE\");\n            StringBuilder sb = new StringBuilder();\n            for(int i=0;i<B;i++) {\n                for(int j=0;j<B;j++) {\n                    sb.append(mat[i][j] ? 1 : 0);\n                }\n                sb.append(\"\\n\");\n            }\n            out.print(sb);\n        }\n    }\n}"}
{"idx":"1592","func":"class Slides {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scanner = new Scanner(new BufferedReader(new FileReader(\"in.txt\")));\n        PrintWriter writer = new PrintWriter(\"out.txt\");\n        int t = scanner.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int b = scanner.nextInt();\n            long m = scanner.nextLong();\n            writer.print(\"Case #\" + i + \": \");\n            if (m > Math.pow(2, b-2)) {\n                writer.println(\"IMPOSSIBLE\");\n                continue;\n            }\n            writer.println(\"POSSIBLE\");\n            int[][] s = new int[b][b];\n            for (int j = 1; j < b; j++) {\n                for (int k = j+1; k < b; k++) {\n                    s[j][k] = 1;\n                }\n            }\n            if (m == Math.pow(2, b-2)) {\n                s[0][b-1] = 1;\n                m--;\n            }\n            for (int j = 1; j < b-1; j++) {\n                if ((m&(long)Math.pow(2, b-2-j)) != 0) {\n                    s[0][j] = 1;\n                }\n            }\n            for (int j = 0; j < b; j++) {\n                for (int k = 0; k < b; k++) {\n                    writer.print(s[j][k]);\n                }\n                writer.println();\n            }\n        }\n        writer.close();\n        scanner.close();\n    }\n}"}
{"idx":"1593","func":"class b {\n\n    public static void main(String[] args) throws IOException {\n        FileInputStream in = null;\n        PrintWriter out = null;\n\n          try {\n             in = new FileInputStream(\"B-large.in\");\n             out = new PrintWriter( \"outputB-large.txt\" );\n\n             Scanner sc = new Scanner (in);\n             String line = sc.nextLine();\n\n             int T = Integer.parseInt(line);\n\n             for(int t=1; t<=T; t++) {\n                 line = sc.nextLine();\n                 \n                 int B = Integer.parseInt(line.split(\" \")[0]);\n                 long M = Long.parseLong(line.split(\" \")[1]);\n                 \n                 String output = \"Case #\" + t + \": \";\n                 \n                 if((1L << (B-2)) < M ) {\n                     output += \"IMPOSSIBLE\\n\";\n                     out.print( output );\n                     continue;\n                 }\n                 output += \"POSSIBLE\\n\";\n                 for (int i=0; i<B; i++) {\n                      for (int j=0; j<B; j++) {\n                        int k = 0;\n                        if (i < j) {\n                          if (i != 0) k = 1;\n                          else if (j == B-1) k = 1;\n                          else if ( ((1L << (B-j-2)) & (M-1)) != 0 ) k = 1;\n                        }\n                        output += k;\n                      }\n                      output += \"\\n\";\n                 }\n                 out.print( output );\n             }\n          } finally {\n              if (in != null) {\n                in.close();\n              }\n              if (out != null) {\n                out.close();\n             }\n          }\n    }\n}"}
{"idx":"1594","func":"class B {\n    static Scanner in = null;\n    static PrintWriter out = null;\n    static FileInputStream toclose=null;\n    \n    \/\/static String file = \"B-training.in\";\n    \/\/static String file = \"B-small-attempt1.in\";\n    static String file = \"B-large.in\";\n    static String folder = \"CodeJam16\";\n    static String contest = \"1C\";\n\n    public static void main(String[] args) {\n        String empInput = \"C:\/Users\/Momo\/Desktop\/\"+folder+\"\/\"+file;\n        String empOutput = \"C:\/Users\/Momo\/Desktop\/\"+folder+\"\/Liet-\"+contest+\"-\"+file+\".out\";\n        try {\n            toclose = new FileInputStream(empInput);\n            System.setIn(toclose);\n            in = new Scanner(System.in);\n            out = new PrintWriter(empOutput);\n        } catch (Exception e) {\n            System.out.println(\"Ouverture\");\n            e.printStackTrace();\n        }\n\n        int nbLig = in.nextInt();\n        \n        for(int lig=0; lig<nbLig; lig++){\n            int nBuild = in.nextInt();\n            long nMouv = in.nextLong();\n            \n            int[][] slides = new int[nBuild][nBuild];\n            \n            if( ((long)Math.pow(2, nBuild-2)) < nMouv ){\n                out.println(\"Case #\"+(lig+1)+\": \"+ \"IMPOSSIBLE\" );\n            }else{\n                out.println(\"Case #\"+(lig+1)+\": \"+ \"POSSIBLE\" );\n                \n                for(int i=0; i<nBuild; i++){\n                    for(int j=i+1; j<nBuild; j++){\n                        if(j!=nBuild-1 || i==0){\n                            slides[i][j]=1;\n                        }else{ \/\/last collumn\n                            slides[i][j]= (int) (((nMouv-1)>>(i-1) )%2);\n                        }\n                    }\n                }\n                \n                \n                for(int i=0; i<nBuild; i++){\n                    for(int j=0; j<nBuild; j++){\n                        out.print(slides[i][j]);\n                    }\n                    out.println();\n                }\n            }\n            \n        }\n        in.close();\n        out.close();\n        try {\n            toclose.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    \n}"}
{"idx":"1595","func":"class B\n{\n    static int N;\n\n    static int ans;\n\n    public static void main(String ... orange) throws Exception\n    {\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++)\n        {\n            int B = input.nextInt();\n            long M = input.nextLong();\n\n            if (M > (1L << (B - 2)))\n            {\n                System.out.printf(\"Case #%d: IMPOSSIBLE\\n\", n + 1);\n                continue;\n            }\n\n            boolean[][] slides = new boolean[B][B];\n            if (M == (1L << (B - 2)))\n            {\n            for (int i = 0; i < B; i++)\n                for (int j = i + 1; j < B; j++)\n                    slides[i][j] = true;\n            }\n            for (int i = 0; i + 1 < B; i++)\n                for (int j = i + 1; j + 1 < B; j++)\n                    slides[i][j] = true;\n            for (int i = 0; i + 2 < B; i++)\n                if ((M & (1L << i)) > 0)\n                    slides[i + 1][B - 1] = true;\n\n            System.out.printf(\"Case #%d: POSSIBLE\\n\", n + 1);\n            for (int i = 0; i < B; i++)\n            {\n                for (int j = 0; j < B; j++)\n                    System.out.print(slides[i][j] ? '1' : '0');\n                System.out.println();\n            }\n        }\n    }\n}"}
{"idx":"1596","func":"class B {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        try (Scanner scanner = new Scanner(new File(\"round1C_B.in\"));\n             PrintWriter writer = new PrintWriter(new File(\"round1C_B.out\"))) {\n\n            int caseCount = scanner.nextInt();\n            for (int caseNo = 1; caseNo <= caseCount; ++caseNo) {\n                long b = scanner.nextInt();\n                long m = scanner.nextLong();\n                if ((1L << (b - 2)) < m) {\n                    writer.println(String.format(\"Case #%d: IMPOSSIBLE\", caseNo));\n                    continue;\n                }\n                writer.println(String.format(\"Case #%d: POSSIBLE\", caseNo));\n                boolean x[] = new boolean[(int) b];\n                Arrays.fill(x, false);\n                for (int i = 2; i < b; ++i) {\n                    if (((1L << (i - 2)) & (m - 1)) > 0) {\n                        x[i] = true;\n                    }\n                }\n\n                writer.print(0);\n                for (int j = 2; j <= b; j++)\n                    writer.print(1);\n                writer.println();\n\n                for (int i = 2; i < b; ++i) {\n                    for (int j = 1; j <= i; ++j)\n                        writer.print(0);\n                    for (int j = i + 1; j < b; ++j)\n                        writer.print(1);\n                    writer.println(x[i] ? 1 : 0);\n                }\n\n                for (int j = 1; j <= b; j++)\n                    writer.print(0);\n                writer.println();\n\n            }\n\n        }\n    }\n\n}"}
{"idx":"1597","func":"class Main {\n    public static void main(String[] args) throws Exception {\n        \/\/ set up scanner and iterate over test cases\n        Scanner scanner = new Scanner(new FileInputStream(\n            \"C:\\\\Users\\\\Stefan\\\\Downloads\\\\B-small-attempt1.in\"));\n        PrintStream output = new PrintStream(\n            \"C:\\\\Users\\\\Stefan\\\\Downloads\\\\B-small-attempt1.out\");\n        int T = scanner.nextInt();\n        for (int t = 1; t <= T; ++t) {\n            \/\/ get parameters\n            int B = scanner.nextInt();\n            int M = scanner.nextInt();\n            \/\/ solve problem\n            output.print(\"Case #\" + t + \":\");\n            \/\/ there are no cycles in graph\n            \/\/ determine if it is possible, only depends on maximum\n            long maxWays = 0x01 << (B - 2);\n            if (M > maxWays) {\n                output.println(\" IMPOSSIBLE\");\n                continue;\n            }\n               output.println(\" POSSIBLE\");\n               \/\/ print solution matrix\n               \/\/ first node: construct M by using counts of 2 ^ X\n               if (B == 2)\n                   output.println(\"01\");\n               else {\n                   long maxNodeWays = 0x01 << (B - 3);\n                   output.print(\"0\");\n                for (int slide = 1; slide < B - 1; ++slide) {\n                    if (M >= maxNodeWays) {\n                           output.print(\"1\");\n                           M -= maxNodeWays;\n                    }\n                    else\n                        output.print(\"0\");\n                       maxNodeWays \/= 2;\n                }\n                   if (M > 0)\n                       output.println(\"1\");\n                   else\n                       output.println(\"0\");\n               }\n               \/\/ output slides from building b towards any other building\n            \/\/ make slides between all nodes except 1 and B\n            for (int b = 1; b < B - 1; ++b) {\n                for (int slide = 0; slide < B; ++slide)\n                    if (slide <= b)\n                        output.print(\"0\");\n                    else\n                        output.print(\"1\");\n                   output.println();\n            }\n            \/\/ no slides from last node\n            for (int slide = 0; slide < B; ++slide)\n                output.print(\"0\");\n               output.println();\n        }\n        output.close();\n        System.out.println(\"finished\");\n    }\n}"}
{"idx":"1598","func":"class B {\n\n    public static void main(String[] args) {\n        B b = new B();\n        Scanner in = new Scanner(System.in);\n        int cases = Integer.parseInt(in.nextLine());\n        for (int a=0; a<cases; a++) {\n            String[] line = in.nextLine().split(\" \");\n            int b1 = Integer.parseInt(line[0]);\n            long m = Long.parseLong(line[1]);\n            boolean[][] connected = new boolean[b1][b1];\n            long[] value = new long[b1];\n            value[b1-1] = 1;\n            value[b1-2] = 1;\n            connected[b1-2][b1-1] = true;\n            for (int i=b1-3; i>=0; i--) {\n                int j = i+1;\n                while (j < b1 && value[i] < m) {\n                    if (value[i] + value[j] <= m) {\n                        value[i] += value[j];\n                        connected[i][j] = true;\n                    }\n                    j++;\n                }\n            }\n            if (value[0]==m) {\n                System.out.printf(\"Case #%d: POSSIBLE\\n\",a+1);\n                int b2 = connected.length;\n                for (int i=0; i<b2; i++) {\n                    StringBuilder build = new StringBuilder();\n                    for (int j=0; j<b2; j++) {\n                        if (connected[i][j]) {\n                            build.append(1);\n                        }\n                        else {\n                            build.append(0);\n                        }\n                    }\n                    System.out.println(build.toString());\n                }\n            }\n            else {\n                System.out.printf(\"Case #%d: IMPOSSIBLE\\n\",a+1);\n            }\n        }\n    }\n}"}
{"idx":"1599","func":"class Slides {\n\n    public static void main(String[] args) throws IOException {\n         Scanner in = new Scanner(new File(\"B-large.in\"));\n        \/\/ System.out.println(\"HELLO\");\n        \/\/Scanner in = new Scanner(System.in);\n        PrintWriter fileOut = new PrintWriter(new FileWriter(\"SlidesLarge.out\"));\n        int T = in.nextInt();\n        for (int test = 1; test <= T; test++)\n        {\n            int B = in.nextInt();\n            long M = in.nextLong();\n            long maxB = (long) Math.pow(2, B-2);\n            if (M <= maxB)\n            {\n                fileOut.printf(\"Case #%d: POSSIBLE\\n\", test);\n                int[][] arr = new int[B][B];\n                for (int r = 1; r < B; r++)\n                {\n                    for (int c = 0; c < B; c++)\n                    {\n                        if (c > r)\n                            arr[r][c] = 1;\n                        else\n                            arr[r][c] = 0;\n                    }\n                }\n                \/\/ Lower triangle now\n                \/\/ Make first line binary of M;\n                \/\/ work from back...\n                M --;\n                arr[0][B-1] = 1;\n                String bin = Long.toBinaryString(M);\n                int l = bin.length();\n                \/\/System.out.println(bin);\n                for (int i = 0; i < l; i++)\n                {\n                    if (bin.charAt(l-i-1) == '1')\n                    {\n                        arr[0][B-i-2] = 1;\n                    }\n                }\n                \/\/ Now print arr\n                for(int i = 0; i< B; i++)\n                {\n                    for(int j = 0; j< B; j++)\n                    {\n                        fileOut.print(arr[i][j]);\n                    }\n                    fileOut.println();\n                }\n            }\n            else\n            {\n                \/\/ Not possible\n                fileOut.printf(\"Case #%d: IMPOSSIBLE\\n\", test);\n            }\n        }\n        fileOut.close();\n\n    }\n\n}"}
{"idx":"1600","func":"class Main_Round1C_2016_B {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt();\n        for (int casei = 1; casei <= t; casei++) {\n            int b = sc.nextInt();\n            long m = sc.nextLong();\n            long ret1 = 1;\n            for (int i1 = 0; i1 < b - 2; i1++) {\n                ret1 *= 2;\n            }\n\n            long max = ret1;\n\n            if (m > max) {\n                System.out.printf(\"Case #%d: %s\\n\", casei, \"IMPOSSIBLE\");\n            } else {\n                System.out.printf(\"Case #%d: %s\\n\", casei, \"POSSIBLE\");\n\n                int[][] ret = new int[b][b];\n                for (int i = 1; i < b; i++) {\n                    for (int j = i + 1; j < b; j++) {\n                        ret[i][j] = 1;\n                    }\n                }\n\n                if (m == max) {\n                    for (int j = 1; j < b; j++) {\n                        ret[0][j] = 1;\n                    }\n                } else {\n                    int bit = b - 2;\n                    while (m > 0) {\n                        if (m % 2 != 0) {\n                            ret[0][bit] = 1;\n                        }\n                        bit--;\n                        m \/= 2;\n                    }\n                }\n\n                for (int i = 0; i < b; i++) {\n                    StringBuilder sb = new StringBuilder();\n                    for (int j = 0; j < b; j++) {\n                        sb.append((char)('0' + ret[i][j]));\n                    }\n                    System.out.println(sb);\n                }\n            }\n        }\n\n        sc.close();\n    }\n}"}
{"idx":"1601","func":"class Main {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(new File(\"B-large.in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\n\n        int caseLength = in.nextInt();\n        for (int caseNumber = 1; caseNumber <= caseLength; caseNumber++) {\n            System.out.println(\"==\" + caseNumber);\n            out.write(String.format(\"Case #%d: \", caseNumber));\n            int buildingCount = in.nextInt();\n            long target = in.nextLong() - 1;\n\n            long temp = Long.highestOneBit(target);\n            int buildingNeeded = temp != 0 ? Long.numberOfTrailingZeros(temp) + 3 : 2;\n\n            if (buildingCount < buildingNeeded) {\n                out.write(\"IMPOSSIBLE\\n\");\n                continue;\n            }\n\n            out.write(\"POSSIBLE\\n\");\n\n            boolean[] answer = new boolean[buildingCount];\n            answer[0] = true;\n\n            while (target > 0) {\n                System.out.println(target);\n\n                long temp2 = Long.highestOneBit(target);\n                answer[Long.numberOfTrailingZeros(temp2) + 1] = true;\n                target -= temp2;\n            }\n\n            for (int i = buildingCount - 1; i >= 0; i--) {\n                out.write(answer[i] ? '1' : '0');\n            }\n\n            out.newLine();\n\n            for (int i = 1; i < buildingCount; i++) {\n                for (int j = 0; j < i + 1; j++) {\n                    out.write('0');\n                }\n\n                for (int j = 0; j < buildingCount - (i + 1); j++) {\n                    out.write('1');\n                }\n\n                out.newLine();\n            }\n        }\n\n        out.close();\n    }\n}"}
{"idx":"1602","func":"class b {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n         \n        for (int n = 0; n < numCases; n++){\n            \n            int b = input.nextInt();\n            int m = input.nextInt();\n            \n            int[][] test = new int[b][b];\n            int[] road = new int[b];\n            \n            for(int i = 0;i<b;i++)\n                road[i]=1;\n                \n            int ans=0,tmp=0,t=0,br=0;\n            for(int i = b-2;i>=0;i--)\n            {     \n                tmp=ans;\n                t=0;\n                br=i;\n                for(int j = b-1;j>i;j--)\n                {\n                    ans+=road[j];\n                    t+=road[j];\n                    test[i][j]=1;\n                    if(t>=m)\n                        break;\n                }\n                road[i]=ans-tmp;\n                if(t>=m)\n                    break;\n\n            }\n            \n            if(t>=m){\n            System.out.printf(\"Case #%d: POSSIBLE\\n\", n + 1);\n            if(t>m)\n            {int tt=0;\n                for(int i = br+1;i<b;i++){\n                    tt+=road[i];\n                    if(tt>m){\n                        test[br][i]=0;\n                        tt-=road[i];\n                    }\n                }\n                    \n            }\n            int pos=0;\n            for(int i = b-1;i>=0;i--){\n                int tm=0;\n                for(int j = 0;j<b;j++)\n                    tm+=test[i][j];\n                if(tm>0)\n                    pos=i;\n            }\n            for(int i = 0;i<pos;i++)\n            {\n                test[i][i+1]=1;\n            }\n            for(int i = 0;i<b;i++){\n                for(int j = 0;j<b;j++)\n                    System.out.printf(\"%d\",test[i][j]);\n                System.out.println();\n                }\n            }\n            else\n                System.out.printf(\"Case #%d: IMPOSSIBLE\\n\", n + 1);    \n\n        }\n    }\n\n}"}
{"idx":"1603","func":"class codejam {\n\n    static String i0 = \"dummy.in\";\n    static String o0 = \"dummy.out\";\n\n    static String i1 = \"small.in\";\n    static String o1 = \"small.out\";\n\n    static String i2 = \"large.in\";\n    static String o2 = \"large.out\";\n\n    public static void main(String[] args) throws Exception {\n\n        Scanner r = null;\n        FileWriter w = null;\n\n        r = new Scanner(new FileReader(i0));\n        w = new FileWriter(new File(o0));\n\n        int t = r.nextInt();\n        \/\/r.nextLine();\n        \n        for (int i=0;i<t;i++){\n            w.write(\"Case #\"+(i+1)+\": \");\n            int b = r.nextInt();\n            long m = r.nextLong();\n            if (m > (long)Math.pow(2, b-2)){\n                w.write(\"IMPOSSIBLE\\n\");\n                continue;\n            } else {\n                w.write(\"POSSIBLE\\n\");\n                String s = Long.toBinaryString(m-1);\n                int len = s.length();\n                w.write(\"0\");\n                if (s.length() < b-2){\n                    for(int j=0;j<b-2-len;j++){\n                        s = \"0\"+s;\n                    }\n                }\n                if (b != 2){\n                    w.write(s);\n                }\n                w.write(\"1\\n\");\n                for(int j=1;j<b;j++){\n                    for (int k=0;k<=j;k++){\n                        w.write(\"0\");\n                    }\n                    for (int k=j+1;k<b;k++){\n                        w.write(\"1\");\n                    }\n                    w.write(\"\\n\");\n                }\n            }\n            \/\/w.write(\"\\n\");\n        }\n        w.close();\n    }\n}"}
{"idx":"1604","func":"class Main{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int cases = sc.nextInt();\n        for(int c=1;c<=cases;c++){\n            int B = sc.nextInt();\n            long M = sc.nextLong();\n            if(M>1<<B-2) System.out.printf(\"Case #%d: IMPOSSIBLE\\n\",c);\n            else{\n                System.out.printf(\"Case #%d: POSSIBLE\\n\",c);\n                int[][] paths = new int[B][B];\n                for(int i=0; i<B;i++){\n                    for(int j=0;j<B;j++){\n                        if(j>i) paths[i][j] = 1;\n                    }\n                }\n                char[] ch = Long.toBinaryString(M-1).toCharArray();\n                for(int i=0;i<B-1;i++) paths[0][i] = 0;\n                for(int i=B-ch.length-1;i<B-1;i++) paths[0][i] = ch[i-B+ch.length+1]-48;\n                for(int i=0; i<B;i++){\n                    for(int j=0;j<B;j++){\n                        System.out.print(paths[i][j]);\n                    }\n                    System.out.println();\n                }\n            }\n        }\n    }\n\n}"}
{"idx":"1605","func":"class B implements Runnable {\n\n    @Override\n    public void run() {\n        Scanner in = new Scanner(System.in);\n        for (int casei : ZeroTo.get(in.nextInt())) {\n            int n = in.nextInt();\n            long m = in.nextLong();\n            long max = 1L << (long) (n - 2);\n\/\/            System.out.println(max);\n\n            System.out.print(\"Case #\" + (casei + 1) + \": \");\n            if (m <= max) {\n                System.out.println(\"POSSIBLE\");\n                for (int i : ZeroTo.get(n)) {\n                    boolean[] row = new boolean[n];\n                    if (i < n - 1) {\n                        row[i + 1] = true;\n                        long coverEnd = 1L << (long) (n - i - 2);\n                        long coverStart = Math.max(1, coverEnd \/ 2);\n\/\/                        System.out.println(i + \" \" + coverStart + \" \" + coverEnd);\n                        if (coverStart < m && m < coverEnd) {\n                            long remain = m - coverStart;\n                            long factor = coverStart \/ 2;\n\/\/                            System.out.println(\"factor \" + factor);\n                            for (int j : FromTo.get(i + 2, n)) {\n                                if (remain >= factor) {\n                                    row[j] = true;\n                                    remain -= factor;\n                                }\n                                factor = Math.max(1, factor \/ 2);\n                            }\n                        } else if (m >= coverEnd) {\n                            for (int j : FromTo.get(i + 2, n))\n                                row[j] = true;\n                        }\n                    }\n                    for (boolean v : row)\n                        System.out.print(v ? 1 : 0);\n                    System.out.println();\n                }\n            } else {\n                System.out.println(\"IMPOSSIBLE\");\n            }\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        System.setIn(new BufferedInputStream(new FileInputStream(\"\/Users\/imyoyo\/Desktop\/B-large.in\")));\n        System.setOut(new PrintStream(new OutputStream() {\n            @Override\n            public void write(int b) throws IOException {\n                System.out.write(b);\n                new PrintStream(\"\/Users\/imyoyo\/kb\/mavens\/solutions\/src\/main\/java\/output.txt\").write(b);\n            }\n        }));\n        new B().run();\n    }\n\n}"}
{"idx":"1606","func":"class B {\n\n    public static void main ( String [] args ) throws FileNotFoundException {\n        System.setOut( new PrintStream( \"B.out\" ));\n        Scanner s = new Scanner( System.in ) ;\n        int tests = s.nextInt();\n        for ( int  test=1; test<=tests; test++ ){\n            String answer = \"\";\n            int b = s.nextInt();\n            BigInteger m = s.nextBigInteger();\n\n            long max = (1l<<(b-2));\n\n            if ( m.compareTo(BigInteger.valueOf(max))> 0 ){\n                answer = \"IMPOSSIBLE\";\n            } else {\n                m = m.subtract( BigInteger.ONE );\n\n                answer = \"POSSIBLE\\n\";\n                for ( int i=0; i<b; i++ ){\n                    for ( int j=0; j<b; j++ ){\n                        if ( i>0 && i<j && j == b - 1 ){\n                            if ( (m.longValue() & ( 1l<<(i-1))) >0){\n                                answer += \"1\";\n                            } else {\n                                answer += \"0\";\n                            }\n                        } else {\n                            if ( i<j){\n                                answer = answer + \"1\";\n                            } else {\n                                answer = answer + \"0\";\n                            }\n                        }\n                    }\n                    if ( i<b-1) {\n                        answer += \"\\n\";\n                    }\n                }\n            }\n\n            System.err.println(\"Case #\"+test + \": \" + b + \" \" + (m.add( BigInteger.ONE )));\n            System.err.println(\"Case #\"+test + \": \" + answer );\n            System.out.println(\"Case #\"+test + \": \" + answer );\n        }\n    }\n\n}"}
{"idx":"1607","func":"class B {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(new File(\"BL.in\"));\n        PrintWriter out = new PrintWriter(\"BL.out\");\n        long[] counts = new long[55];\n        counts[0] = 1;\n        for (int i = 1; i < 55; i++) {\n            for (int j = 0; j < i; j++) {\n                counts[i] += counts[j]; \/\/ 2^(i-1)\n            }\n        }\n        int tc = in.nextInt();\n        for (int cc = 1; cc <= tc; cc++) {\n            int b = in.nextInt();\n            long t = in.nextLong();\n            char[][] result = new char[b][b];\n            for (char[] a : result)\n                Arrays.fill(a, '0');\n            for (int i = b - 1; i > 0; i--) {\n                for (int j = i + 1; j < b; j++) {\n                    result[i][j] = '1';\n                }\n            }\n            if (t > counts[b - 1]) {\n                System.out.printf(\"Case #%d: IMPOSSIBLE\\n\", cc);\n                out.printf(\"Case #%d: IMPOSSIBLE\\n\", cc);\n\n            } else {\n                System.out.printf(\"Case #%d: POSSIBLE\\n\", cc);\n                out.printf(\"Case #%d: POSSIBLE\\n\", cc);\n\n                if (t == counts[b - 1]) {\n                    for (int i = 1; i < b; i++) {\n                        result[0][i] = '1';\n                    }\n                } else {\n                    while (t > 0) {\n                        long bit = t & -t;\n                        int idx = 0;\n                        while (1L << idx < bit)\n                            idx++;\n                        if (idx >= b) {\n                            throw new Exception(\"That's how you know you ....ed up\");\n                        }\n                        result[0][b - 1 - (idx + 1)] = '1';\n                        t -= bit;\n                    }\n                }\n                for (int i = 0; i < b; i++) {\n                    System.out.printf(new String(result[i]) + \"\\n\");\n                    out.printf(new String(result[i]) + \"\\n\");\n\n                }\n            }\n        }\n        out.close();\n    }\n}"}
{"idx":"1608","func":"class Slides {\n\n    public static void main(String[] args) throws Exception {\n        Slides object = new Slides();\n        String className = object.getClass().getSimpleName();\n\n        FileReader fileReader = new FileReader(new File(className.toLowerCase() + \".in\"));\n        StreamTokenizer st = new StreamTokenizer(new BufferedReader(fileReader));\n\n        FileWriter wr = new FileWriter(className.toLowerCase() + \".out\");\n\n        st.nextToken();\n        int testCases = (int) st.nval;\n\n        st.resetSyntax();\n        st.wordChars(0, 256);\n        st.whitespaceChars(0, 32);\n\n        for (int tc = 1; tc <= testCases; tc++) {\n\n            System.out.println(\"At test \" + tc + \"\/\" + testCases);\n\n            st.nextToken();\n            int B = Integer.valueOf(st.sval);\n\n            st.nextToken();\n            long M = Long.valueOf(st.sval);\n            int[][] mat = new int[B][B];\n            String result1 = \"IMPOSSIBLE\";\n            \n            long[] row = new long[B];\n            \n            for (int i = 0; i < B - 1; i++)\n                for (int j = 0; j < B - 1; j++) {\n            \n                    if (i >= j) {\n                        continue;\n                    }\n            \n                    mat[i][j] = 1;\n                }\n            \n            row[0] = row[1] = 1;\n            for (int i = 2; i < B - 1; i++) {\n                row[i] = 2 * row[i - 1];\n            }\n            \n            long requested = M;\n            \n            for (int i = B - 2; i >= 0; i--) {\n            \n                if (row[i] <= requested) {\n                    requested -= row[i];\n                    mat[i][B - 1] = 1;\n                }\n            \n            }\n            \n            if (requested == 0) {\n                \/\/ encode\n            \n                result1 = \"POSSIBLE\\n\";\n            \n                for (int i = 0; i < B; i++) {\n                    for (int j = 0; j < B; j++)\n                        result1 += mat[i][j];\n            \n                    result1 += \"\\n\";\n                }\n            }\n\n            String result = result1;\n\n            wr.write(\"Case #\" + tc + \": \" + result.trim() + \"\\r\\n\");\n        }\n\n        wr.close();\n    }\n\n}"}
{"idx":"1609","func":"class ProblemB {\n    public static void main(String[] args) throws FileNotFoundException {\n\/\/        Scanner sc = new Scanner(new File(\"B-small-attempt3.in\"));\n\/\/        Scanner sc = new Scanner(new File(\"B.in\"));\n        Scanner sc = new Scanner(new File(\"B-large.in\"));\n\n        int t = sc.nextInt();\n        int count = 1;\n        \n        long[] possibleRoutes = new long[52];\n        for(int i = 2; i <= 50; i++) {\n            possibleRoutes[i] = 1;\n            for(int j = 0; j < i; j++) {\n                possibleRoutes[i] += possibleRoutes[j];\n            }\n            \n\/\/            System.out.println(\"Numbuildings: \" + (i) + \" Possible routes: \" + possibleRoutes[i]);\n        }\n        possibleRoutes[1] = 1;\n\n        while (t-- > 0) {\n            int B = sc.nextInt(); \/\/ num buildings\n            long M = sc.nextLong(); \/\/ num routes\n            \n            \/\/ To many routes needed\n            if(M > possibleRoutes[B]) {\n                System.out.println(\"Case #\" + count + \": \" + \"IMPOSSIBLE\");\n            \/\/ \n            } else {\n                int building = B;\n                long routes = M;\n                System.out.println(\"Case #\" + count + \": \" + \"POSSIBLE\");\n\/\/                System.out.println(building);\n                boolean buildSlides = false;\n                \n                for(int j = 0; j < B; j++) {\n                    if(routes < possibleRoutes[building] && !buildSlides) {\n\/\/                        System.out.println(\"Don't use building: \" + building + \" it gives: \" + test[building] + \" extra routes\");\n                        \/\/ Next one also gives to much slides\n                        if(routes <= possibleRoutes[building-1]) {\n                            for(int i = 0; i < B; i++) {\n                                if(i == j+1) {\n                                    System.out.print(\"1\");\n                                } else {\n                                    System.out.print(\"0\");\n                                }\n                            }\n                            System.out.println(\"\");\n                        } else {\n                            buildSlides = true;\n\/\/                            routes -= possibleRoutes[building-1];\n                            for(int i = B; i > 0; i--) {\n                                if(possibleRoutes[i] <= routes) {\n                                    routes -= possibleRoutes[i];\n                                    System.out.print(\"1\");\n                                } else {\n                                    System.out.print(\"0\");\n                                }\n                            }\n                            System.out.println(\"\");\n                        }\n                    } else {\n\/\/                        System.out.println(\"Use building: \" + building);\n                        buildSlides = true;\n                        for(int i = 0; i < B; i++) {\n                            if(i > j) {\n                                System.out.print(\"1\");\n                            } else {\n                                System.out.print(\"0\");\n                            }\n                        }\n                        System.out.println(\"\");\n                    }\n                    \n                    building--;\n                }\n\/\/                System.out.println(routes);\n            }\n\n            \n            count++;\n        }\n\n        sc.close();\n    }\n}"}
{"idx":"1610","func":"class slides{\n   private static String fileName = \"B-small\";\n   public static void main(String[] args) throws IOException{\n      BufferedReader f = new BufferedReader(new FileReader(fileName+\".in\"));\n      PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName+\".out\")));\n      int Num=Integer.parseInt(f.readLine());\n      for(int ind=0;ind<Num;ind++){\n         String[] inar=f.readLine().split(\" \");\n         long B = Long.parseLong(inar[0]);\n         long M = Long.parseLong(inar[1]);\n         \n         if(M>Math.pow(2,B-2))\n            out.println(\"Case #\"+(ind+1)+\": IMPOSSIBLE\");\n         else{\n            long T = (long)Math.pow(2,B-2)-M;\n            int[] connected=new int[(int)B];\n            for(int x=0;x<B;x++)\n               connected[x]=1;\n            String bin = Long.toBinaryString(T);\n            int i=1;\n            for(int x=bin.length()-1;x>=0;x--){\n               if(bin.substring(x,x+1).compareTo(\"1\")==0)\n                  connected[i]=0;\n               i++;\n            }\n                 \n            out.println(\"Case #\"+(ind+1)+\": POSSIBLE\");\n            for(int x=0;x<B-1;x++){\n               for(int y=0;y<=x;y++)\n                  out.print(\"0\");\n               for(int y=x+1;y<B-1;y++)\n                  out.print(\"1\");\n               out.print(connected[x]);\n               out.print(\"\\n\");\n            }\n            for(int x=0;x<B;x++)\n               out.print(\"0\");\n            out.print(\"\\n\");\n         }\n      }\n      out.close();\n   }\n}"}
{"idx":"1611","func":"class B {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();  \/\/ number of test cases\n        in.nextLine();\n        for (int i = 1; i <= t; ++i) {\n            String[] nums = in.nextLine().split(\" \");\n            int B = Integer.parseInt(nums[0]);\n            BigInteger M = new BigInteger(nums[1]);\n            BigInteger[] result = new BigInteger[B+1];\n            result[0] = BigInteger.ZERO;\n            result[1] = BigInteger.ONE;\n            BigInteger runningSum = BigInteger.ONE;\n            for(int i4=2; i4<=B; i4++) {\n                result[i4] = runningSum;\n                runningSum = runningSum.add(result[i4]);\n            }\n            \/\/ System.out.println(B + \"\");\n            \/\/ System.out.println(M.toString());\n            BigInteger[] numWays = result;\n            \/\/ System.out.println(numWays[B]);\n            if (numWays[B].compareTo(M) < 0) {\n                System.out.println(\"Case #\" + i + \": IMPOSSIBLE\");            \n            } else {\n                System.out.println(\"Case #\" + i + \": POSSIBLE\");    \n                int[][] matrix = new int[B][B];\n                for(int i3=0; i3<B;i3++) {\n                    for(int j=i3+1; j<B;j++) {\n                        matrix[i3][j] = 1;\n                    }    \n                }\n                \n                BigInteger difference = numWays[B].subtract(M);\n                \n                while(difference.compareTo(BigInteger.ZERO) != 0) {\n                    for(int i2=B-1; i2>=1; i2--){\n                        if (difference.compareTo(numWays[i2]) >= 0) {\n                            \/\/System.out.println(i);\n                            matrix[i2-1][B-1] = 0;\n                            difference = difference.subtract(numWays[i2]);\n                        }\n                    }\n                }\n                \n                for(int i1=0; i1<B;i1++) {\n                    for(int j=0; j<B;j++) {\n                        System.out.print(matrix[i1][j]);\n                    }    \n                    System.out.println(\"\");\n                }   \n            }\n        }\n    }\n}"}
{"idx":"1612","func":"static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"B.in\"));\n        PrintWriter out = new PrintWriter(new File(\"B.out\"));\n        \n        int tt = in.nextInt();\n        for(int tc=1; tc<=tt; tc++) {            \n            int b = in.nextInt();\n            long m = in.nextLong();\n            out.print(\"Case #\"+tc+\": \");\n            long p = 1;\n            long[] pp = new long[b];\n            pp[0] = 1;\n            for (int i = 1; i < b-1; i++) {                \n                pp[i] = p;\n                p = p*2;                \n            }\n            if (p < m) {\n                out.println(\"IMPOSSIBLE\");\n            } else {\n                out.println(\"POSSIBLE\");\n                \n                out.print(\"0\");\n                for (int i = 1; i < b; i++) {\n                    if (m >= pp[b-i-1]) {\n                        out.print(\"1\");\n                        m -= pp[b-i-1];\n                    } else {\n                        out.print(\"0\");\n                    }\n                }\n                \n                out.println();\n                \n                for (int i = 1; i < b; i++) {\n                    for (int j = 0; j <= i; j++)\n                        out.print(\"0\");\n                    for (int j = i+1; j < b; j++)\n                        out.print(\"1\");\n                    out.println();\n                }\n            }            \n        }\n        \n        out.close();\n        in.close();\n    }\n}"}
{"idx":"1613","func":"class B {\n\n    static StringTokenizer st;\n    static BufferedReader br;\n    static PrintWriter pw;\n    public static void main(String[] args) throws IOException{\n        br = new BufferedReader(new InputStreamReader(System.in));\n        pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\/\/        br = new BufferedReader(new FileReader(\"B-small.in\"));\n\/\/        pw = new PrintWriter(new BufferedWriter(new FileWriter(\"B-small.out\")));\n        int cnttest = Integer.parseInt(next());\n        for (int test = 1; test <= cnttest; test++) {\n            pw.print(\"Case #\"+test+\": \");\n            int n = Integer.parseInt(next());\n            long m = Long.parseLong(next());\n            int[][]a = new int[n+1][n+1];\n            long M = m;\n            int pow = 0;\n            while (M % 2==0) {\n                M \/= 2;\n                pow++;\n            }\n            boolean ok = true;\n            if (M==1) {\n                if (pow+2 > n)\n                    ok = false;\n                else {\n                    for (int i = 1; i <= pow+1; i++) {\n                        for (int j = 1; j < i; j++) {\n                            a[j][i] = 1;\n                        }\n                    }\n                    for (int i = 1; i <= pow+1; i++) {\n                        a[i][n] = 1;\n                    }\n                }\n            }\n            else {\n                for (int i = 1; i < n; i++) {\n                    for (int j = 1; j < i; j++) {\n                        a[j][i] = 1;\n                    }\n                }\n                for (int i = 0; i < 60; i++) {\n                    if ((m & (1l << i)) != 0) {\n                        if (i+2 >= n) {\n                            ok = false;\n                            break;\n                        }\n                        a[i+2][n] = 1;\n                    }\n                }\n            }\n            if (ok) {\n                pw.println(\"POSSIBLE\");\n                for (int i = 1; i <= n; i++) {\n                    for (int j = 1; j <= n; j++) {\n                        pw.print(a[i][j]);\n                    }\n                    pw.println();\n                }\n            }\n            else\n                pw.println(\"IMPOSSIBLE\");\n        }\n        pw.close();\n    }\n\n\n    private static String next() throws IOException{\n        while (st==null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine());\n        return st.nextToken();\n    }\n\n}"}
{"idx":"1614","func":"class ProblemB {\n    public static void main(String[] args) throws Exception {\n        String fileName = args[0];\n        ProblemB obj = new ProblemB();\n        BufferedReader br = new BufferedReader(new FileReader(fileName));\n        BufferedWriter bw = new BufferedWriter(\n                new FileWriter(fileName + \".out\"));\n        \n        int T = Integer.parseInt(br.readLine());\n        for (int i = 0; i < T; i++) {\n            String str = br.readLine();\n            StringTokenizer token = new StringTokenizer(str, \" \");\n            int B = Integer.parseInt(token.nextToken());\n            long M = Long.parseLong(token.nextToken());\n        \n            boolean[][] mtx = new boolean[B][B];\n            for (int j = 1; j < B - 1; j++) {\n                for (int k = 0; k < j; k++) {\n                    mtx[k][j] = true;\n                }\n            }\n        \n            for (int j = 0; j < B - 2; j++) {\n                if (M >= (1L << (B - j - 3))) {\n                    mtx[B - j - 2][B - 1] = true;\n                    M -= (1L << (B - j - 3));\n                }\n            }\n            if (M >= 1) {\n                mtx[0][B - 1] = true;\n                M -= 1;\n            }\n            if (M == 0) {\n                bw.write(\"Case #\" + (i + 1) + \": \" + \"POSSIBLE\");\n                bw.write(\"\\r\\n\");\n                for (int j = 0; j < B; j++) {\n                    for (int k = 0; k < B; k++) {\n                        bw.write(mtx[j][k] ? '1' : '0');\n                    }\n                    bw.write(\"\\r\\n\");\n                }\n            } else {\n                bw.write(\"Case #\" + (i + 1) + \": \" + \"IMPOSSIBLE\");\n                bw.write(\"\\r\\n\");\n            }\n        }\n        bw.close();\n        br.close();\n    }\n}"}
{"idx":"1615","func":"class Solution {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        FileInputStream fileInputStream = new FileInputStream(\"\/Users\/ratmir\/Downloads\/B-small-attempt1 (1).in\");\n        \/\/Scanner sc = new Scanner(System.in);\n        Scanner sc = new Scanner(fileInputStream);\n        FileOutputStream outputStream = new FileOutputStream(\"\/Users\/ratmir\/Documents\/code\/hackerrank\/algs\/src\/codejam\/y2016\/r3\/z2\/ztest3.txt\");\n        PrintWriter printWriter = new PrintWriter(outputStream);\n        int tn = sc.nextInt();\n        for (int ti = 1; ti <= tn; ti++) {\n            int n = sc.nextInt();\n            int m = sc.nextInt();\n            if (n==2 && m==1) {\n                String res = \"Case #\" + ti + \": POSSIBLE\\n01\\n00\";\/\/ + ways.get(n-1)+\" \"+i;\n                printWriter.write(res + \"\\n\");\n                System.out.println(res);\n                continue;\n            }\n            if (n==2 && m>1) {\n                String res = \"Case #\" + ti + \": IMPOSSIBLE\";\/\/ + ways.get(n-1)+\" \"+i;\n                printWriter.write(res + \"\\n\");\n                System.out.println(res);\n                continue;\n            }\n            int nv = 1 + ((n - 1) * (n - 2));\n            int cnt = 1 << nv;\n            System.err.println(cnt);\n            int cntt = 0;\n            boolean ok = false;\n            int [] rx = new int[nv];\n            int [] cx = new int[nv];\n            int cidx = 0;\n            for (int i=0;i<n-1;i++) {\n                for (int j=1;j<=n-1;j++) {\n                    if (i!=j) {\n                        rx[cidx] = i;\n                        cx[cidx] = j;\n                        cidx++;\n                    }\n                }\n            }\n            inner:\n            for (int i = 0; i < cnt; i++) {\n                Map<Integer, Set<Integer>> map = new HashMap<Integer, Set<Integer>>();\n                Map<Integer, Integer> income = new HashMap<Integer, Integer>();\n                int k = i;\n                int kx = 0;\n                while (k > 0) {\n                    if (k % 2 == 1) {\n                        int v = rx[kx];\n                        int v2 = cx[kx];\n                        Set<Integer> integers = map.get(v);\n                        if (integers == null) {\n                            integers = new HashSet<Integer>();\n                            map.put(v, integers);\n                        }\n                        integers.add(v2);\n                        Integer idx1 = income.get(v2);\n                        if (idx1 == null) {\n                            income.put(v2, 1);\n                        } else {\n                            income.put(v2, idx1 + 1);\n                        }\n                    }\n                    k = k \/ 2;\n                    kx++;\n                }\n\/\/                map.put(0, new HashSet<Integer>());\n\/\/                map.put(1, new HashSet<Integer>());\n\/\/                map.put(2, new HashSet<Integer>());\n\/\/                map.put(3, new HashSet<Integer>());\n\/\/                map.get(0).add(4);\n\/\/                map.get(0).add(1);\n\/\/                map.get(1).add(2);\n\/\/                map.get(1).add(3);\n\/\/                map.get(2).add(4);\n\/\/                map.get(3).add(2);\n\/\/                map.get(3).add(4);\n\/\/                income.put(0, 0);\n\/\/                income.put(1, 1);\n\/\/                income.put(2, 2);\n\/\/                income.put(3, 1);\n\/\/                income.put(4,3);\n                Map<Integer, Integer> ways = new HashMap<Integer, Integer>();\n                ways.put(0, 1);\n                Set<Integer> cur = new HashSet<Integer>();\n                cur.add(0);\n                int x = 0;\n                while (cur.size() > 0) {\n                    x++;\n                    if (x > 100) {\n                        continue inner;\n                    }\n                    Set<Integer> cs = new HashSet<Integer>();\n                    for (Integer integer : cur) {\n                        Set<Integer> ss = map.get(integer);\n                        if (ss == null) {\n                            continue;\n                        }\n                        for (Integer v1 : map.get(integer)) {\n                            \/\/System.err.println(integer+\" \"+v1);\n                            Integer w1 = ways.get(v1);\n                            if (w1 == null) {\n                                ways.put(v1, ways.get(integer));\n                            } else {\n                                ways.put(v1, w1 + ways.get(integer));\n                            }\n                            Integer inc = income.get(v1);\n                            if (inc == 1) {\n                                cs.add(v1);\n                            } else {\n                                income.put(v1, inc - 1);\n                            }\n                        }\n                    }\n                    cur = cs;\n                }\n                if (ways.get(n - 1) != null && ways.get(n - 1) == m) {\n\/\/                   if (true) {\n\/\/                    System.out.println(map);\n                    String res = \"Case #\" + ti + \": POSSIBLE\";\/\/ + ways.get(n-1)+\" \"+i;\n                    printWriter.write(res + \"\\n\");\n                    System.out.println(res);\n                    StringBuilder sb = new StringBuilder();\n                    for (int idx = 0; idx < n; idx++) {\n                        for (int jdx = 0; jdx < n; jdx++) {\n                            if (idx == jdx) {\n                                sb = sb.append(0);\n                            } else {\n                                sb = sb.append((map.get(idx) == null || !map.get(idx).contains(jdx)) ? 0 : 1);\n                            }\n                        }\n                        sb = sb.append(\"\\n\");\n                    }\n                    System.out.print(sb);\n                    printWriter.write(sb.toString());\n                    ok = true;\n                    break inner;\n                }\n            }\n            if (!ok) {\n                String res = \"Case #\" + ti + \": IMPOSSIBLE\";\n                printWriter.write(res + \"\\n\");\n                System.out.println(res);\n            }\n        }\n        printWriter.close();\n    }\n\n}"}
{"idx":"1616","func":"class Be\n{\n    public static void main(String[] args) throws Exception\n    {\n        out = new PrintWriter(new FileWriter(\"outB.txt\"));\n        int testCases = Integer.parseInt(next());\n        for (int t = 1; t <= testCases; t++)\n        {\n            int b = Integer.parseInt(next());\n            long m = Long.parseLong(next());\n\n            if (Math.pow(2, b - 2) < m)\n                out.printf(\"Case #%d: IMPOSSIBLE%n\", t);\n            else\n            {\n                int[][] g = new int[b][b];\n                for (int i = 1; i < b; i++)\n                    g[0][i] = 1;\n\n                long c = 1;\n\n                long[] p = new long[b];\n                p[b - 1] = 1;\n\n                for (int i = b - 2; i >= 0; i--)\n                    for (int j = i + 1; j < b; j++)\n                    {\n                        if (c == m)\n                            break;\n\n                        if (c + p[j] <= m)\n                        {\n                            g[i][j] = 1;\n                            p[i] += p[j];\n                            c += p[j];\n                        }\n                    }\n\n                if (c == m)\n                {\n                    out.printf(\"Case #%d: POSSIBLE%n\", t);\n                    for (int i = 0; i < b; i++)\n                    {\n                        for (int j = 0; j < b; j++)\n                            out.print(Math.min(1, g[i][j]));\n                        out.println();\n                    }\n                }\n                else\n                    out.printf(\"Case #%d: IMPOSSIBLE%n\", t);\n            }\n        }\n        out.close();\n    }\n\n    static BufferedReader br = new BufferedReader(new InputStreamReader(\n            System.in));\n    static PrintWriter out = new PrintWriter(new BufferedWriter(\n            new OutputStreamWriter(System.out)));\n    static StringTokenizer st;\n\n    static String next() throws IOException\n    {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine().trim());\n        return st.nextToken();\n    }\n\n}"}
{"idx":"1617","func":"class B {\n    private static final double EPS = 1e-12;\n    private static final int INF = 1 << 20;\n    private static final int[] di = {-1, 0, 0, 1};\n    private static final int[] dj = {0, -1, 1, 0};\n\n    \/\/ shared table\n    static {\n        \/\/ :TODO\n    }\n\n    final int B;\n    final long M;\n    final static String possible = \"POSSIBLE\";\n    final static String impossible = \"IMPOSSIBLE\";\n\n    \/\/ parse\n    public B(final Scanner sc) {\n        B = sc.nextInt();\n        M = sc.nextLong();\n    }\n\n    \/\/ Template\n    public static void main(String... args) throws Exception {\n        try (final Scanner sc = new Scanner(System.in)) {\n            final int T = sc.nextInt();\n            final Object[] solvers = new Object[T];\n            for (int i = 0; i < T; i++)\n                solvers[i] = new B(sc);\n            final Iterator<String> results = Arrays.stream(solvers)\n                    .map(Object::toString)\n                    .iterator();\n            for (int i = 1; i <= T; i++)\n                System.out.printf(\"Case #%s: %s\\n\", i, results.next());\n        }\n    }\n}"}
{"idx":"1618","func":"class CodeJamCB {\n    public static void main(String []args){\n        Scanner reader = new Scanner(System.in);\n        int g = reader.nextInt();\n        for(int k=0;k<g;k++){\n            int b = reader.nextInt();\n            long m = reader.nextLong();\n            BigInteger c = new BigInteger(m+\"\");\n            BigInteger two = new BigInteger(\"2\");\n            BigInteger rez = two.pow(b-2);\n            if(rez.compareTo(c)<0){\n                System.out.println(\"Case #\"+(k+1)+\": IMPOSSIBLE\");\n            }\n            else{\n                System.out.println(\"Case #\"+(k+1)+\": POSSIBLE\");\n                BigInteger e = new BigInteger(m+\"\");\n                int max = lo(m)+1;\n                int [][] t = new int[b][b];\n                for(int i=0;i<=max;i++){\n                    for(int j=i+1;j<=max;j++){\n                        t[i][j] = 1;\n                    }\n                }\n                \n                while(m>0){\n                    if(m==1){\n                        t[0][b-1] = 1;\n                        m--;\n                    }\n                    else{\n                        int log = lo(m)+1;\n                        t[log][b-1] = 1;\n                        m-= Math.pow(2, log-1);\n                    }\n                }\n                for(int i=0;i<b;i++){\n                    t[b-1][i] = 0;\n                }\n                \n                \n                for(int i=0;i<t.length;i++){\n                    for(int j=0;j<t.length;j++){\n                        System.out.print(t[i][j]);\n                    }\n                    System.out.println();\n                }\n            }\n        }\n        \n        \n        reader.close();\n    }\n    public static int lo(long a){\n        double c = (double) a;\n        double rez = Math.log(c)\/Math.log(2);\n        return (int) rez;\n    }\n}"}
{"idx":"1619","func":"class B{\n    static final String inFile=\"B-small.in\";\n    static final String outFile=\"B.out\";\n    \n    static int t,n,count;\n    static long m, rem;\n    static String line,str,s,u;\n    static String[]row;\n    static int[][]a;\n    static boolean debug = false;\n    \n    public static void main(String [ ] args) throws IOException{\n        B r = new B();\n        int i,j,k,l;\n        \n        BufferedReader br = new BufferedReader(new FileReader(B.inFile));\n        try {\n            File file = new File(B.outFile);\n            if (!file.exists()) {file.createNewFile();}\n            FileWriter fw = new FileWriter(file.getAbsoluteFile());\n            BufferedWriter bw = new BufferedWriter(fw);\n            \n            B.line = br.readLine();\n            B.t = Integer.valueOf(B.line); \/\/1 <= T <= 200\n        \n            B.a = new int[50][50];\n            for(l = 0; l < B.t; l++){\n                B.line = br.readLine();\n                B.row = B.line.split(\"\\\\s\");\n                B.n = Integer.valueOf(B.row[0]);\n                B.m = Long.valueOf(B.row[1]);\n                for(i = 0; i < B.n; i++){\n                    Arrays.fill(B.a[i], 0);\n                }\n                \n                \/\/m\n                bw.write(\"Case #\"+(l+1)+\": \");\n                if(B.m > Math.pow(2,B.n-2)){\n                    bw.write(\"IMPOSSIBLE\\n\");\n                } else {\n                    if (B.m>0) {\n                        int i1,j1,k1;\n                        B.a[0][B.n-1]=1;\n                        B.rem = B.m;\n                        int pow = 0;\n                        for(; B.rem>0; ){\n                            B.rem\/=2;pow++;\n                        }\n                        B.rem = (long) Math.pow(2, pow-1);\n                        \n                        \/\/System.out.println(\"AC\"+rem);\n                        \/\/create pow matrix\n                        for(i1 = 1; i1 <pow; i1++){\n                            for(j1 = i1; j1 <pow; j1++){\n                                    if(i1<j1) B.a[i1][j1]=1;\n                                    if(j1<B.n-1) B.a[j1][B.n-1]=1;\n                                    B.a[0][j1]=1;\n                            }\n                        }\n                        \n                        \/\/last 2^pow-2^pow elements\n                        B.rem = B.m - (long) Math.pow(2, pow-1);\n                        if(B.rem>0){\n                            \/\/connect i = pow\n                            B.a[0][pow]=1;\n                            B.a[pow][B.n-1]=1;\n                            B.rem--;\/\/1 done\n                            \/\/add a[pow][j] iff 1 is in j position in binary representation\n                            \/\/System.out.println(\"AB\"+(rem));\n                            \/\/System.out.println(\"AA\"+pow);\n                                \n                            for(int step=1;B.rem>0;step++){\n                                System.out.print(B.rem%2);\n                                if(B.rem%2==1) {\n                                    B.a[pow][pow-step]=1;\n                                    \/\/System.out.println(\"A[\"+(pow-step));\n                                }\n                                B.rem\/=2;\n                            }\n                            \/\/System.out.println(\"AA\");\n                        }\n                    }\n                    \/\/output\n                    bw.write(\"POSSIBLE\\n\");\n                    for(i = 0; i < B.n; i++){\n                        for(j = 0; j < B.n; j++){\n                            bw.write(\"\"+B.a[i][j]);\n                        }\n                        bw.write(\"\\n\");\n                    }\n                }\n            }\n            bw.close();\n        } finally {br.close();}\n    }\n}"}
{"idx":"1620","func":"class B {\n  public static void main(String[] args) throws Exception {\n    BufferedWriter bw = new BufferedWriter(new FileWriter(\n        \"B-large.out\"));\n    BufferedReader br = new BufferedReader(new FileReader(\n        \"B-large.in\"));\n    br.readLine();\n    String line;\n    int testCase = 1;\n    while ((line = br.readLine()) != null) {\n      if (line.length() == 0) {\n        break;\n      }\n      bw.write(\"Case #\" + testCase++ + \": \");\n      String[] parts = line.split(\" \");\n      long b = Long.parseLong(parts[0]);\n      long m = Long.parseLong(parts[1]);\n      if (b == 2) {\n        if (m != 1) {\n          bw.write(\"IMPOSSIBLE\\n\");\n        } else {\n          bw.write(\"POSSIBLE\\n01\\n00\\n\");\n        }\n      } else {\n        long max = (1L << (b - 2));\n        if (m > max) {\n          bw.write(\"IMPOSSIBLE\\n\");\n        } else {\n          bw.write(\"POSSIBLE\\n0\");\n          bw.write(String.format(\"%\" + (b - 2) + \"s\",\n              Long.toBinaryString(m - 1))\n              .replace(' ', '0'));\n          bw.write(\"1\\n\");\n          for (int j = 1; j < b; j++) {\n            for (int k = 0; k < b; k++) {\n              bw.write(k <= j ? \"0\" : \"1\");\n            }\n            bw.write(\"\\n\");\n          }\n        }\n      }\n    }\n    br.close();\n    bw.close();\n  }\n}"}
{"idx":"1621","func":"class A {\n    Scanner sc;\n    PrintWriter pw;\n    int N;\n    int[] p = new int[3];\n    \n    public static void main(String[] args) throws Exception{\n        String filePrefix = args.length>0?args[0]:\"A-large\";\n\n        try {\n            A r = new A();\n            r.sc = new Scanner(new FileReader(filePrefix + \".in\"));\n            r.pw = new PrintWriter(new FileWriter(filePrefix + \".out\"));\n            int ntest = r.sc.nextInt();\n            for(int test=1; test<=ntest; test++) {\n                Scanner sc = r.sc;\n                r.N = sc.nextInt();\n                for(int i=0; i<3; i++)\n                    r.p[i] = sc.nextInt();\n                r.pw.print(\"Case #\" + test + \": \");\n                System.out.print(\"Case #\" + test + \": \");\n                int SIZE = 1<<r.N;\n                char[] C = {'R','P','S'};\n                char[] ans = null;\n                for(int i=0; i<3; i++) {\n                    int[] win = new int[SIZE*2-1];\n                    win[0] = i;\n                    for(int j=0; j<SIZE-1; j++) {\n                        win[j*2+1] = win[j];\n                        win[j*2+2] = (win[j]+2)%3;\n                    }\n                    \n                    int[] cnt = new int[3];\n                    char[] ini = new char[SIZE];\n                    for(int j=0; j<SIZE; j++) {\n                        cnt[win[SIZE-1+j]]++;\n                        ini[j] = C[win[SIZE-1+j]];\n                    }\n                    boolean ok = true;\n                    for(int j=0; j<3; j++)\n                        if(cnt[j]!=r.p[j])\n                            ok = false;\n                    \n                    if(!ok)\n                        continue;\n                    \n                    \/\/sort for alphabetical \n                    for(int j=0; j<r.N; j++) {\n                        for(int k=0; k<SIZE; k+=1<<(j+1)) {\n                            boolean rev = false;\n                            for(int l=0; l<1<<j; l++) {\n                                if(ini[k+l] > ini[k+(1<<j)+l]) {\n                                    rev = true;\n                                    break;\n                                }\n                            }\n                            if(rev) {\n                                for(int l=0; l<1<<j; l++) {\n                                    char temp = ini[k+l];\n                                    ini[k+l] = ini[k+(1<<j)+l];\n                                    ini[k+(1<<j)+l] = temp;\n                                }\n                            }\n                        }\n                    }\n                    if(ans==null || String.valueOf(ini).compareTo(String.valueOf(ans))<0)\n                        ans = ini;\n                }\n                Object s = ans==null ? \"IMPOSSIBLE\" : String.valueOf(ans);\n                \n                r.pw.println(s);\n                System.out.println(s);\n            }\n            System.out.println(\"Finished.\");\n            r.sc.close();\n            r.pw.close();\n        } catch(Exception e) {\n            System.err.println(e);\n        }\n    }\n}"}
{"idx":"1622","func":"class ProblemA {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int numCases = Integer.parseInt(in.nextLine());\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n            String line = in.nextLine();\n            Scanner sc = new Scanner(line);\n            int n = Integer.parseInt(sc.next());\n            int r = Integer.parseInt(sc.next());\n            int p = Integer.parseInt(sc.next());\n            int s = Integer.parseInt(sc.next());\n            int[] test = new int[3];\n            test[0] = 1;\n            test[1] = 1;\n            for(int i = 1; i < n; i++){\n                int[] nextStep = new int[3];\n                nextStep[0] = test[0] + test[2];\n                nextStep[1] = test[1] + test[0];\n                nextStep[2] = test[1] + test[2];\n                test[0] = nextStep[0];\n                test[1] = nextStep[1];\n                test[2] = nextStep[2];\n            }\n            ArrayList<String> round = new ArrayList<String>();\n                \n            if(test[0] == p && test[1] == r && test[2] == s){\n                round.add(\"PR\");\n            } else if(test[0] == r && test[1] == s && test[2] == p){\n                round.add(\"RS\");\n            } else if(test[0] == s && test[1] == p && test[2] == r){\n                round.add(\"PS\");\n            } else {\n                System.out.println(\"Case #\" + caseNum + \": \" + \"IMPOSSIBLE\");\n                continue;\n            }\n            for(int i = 1; i < n; i++){\n                ArrayList<String> nextRound = new ArrayList<String>();\n                for(int j = 0; j < round.size(); j++){\n                    if(round.get(j).equals(\"PR\")){\n                        nextRound.add(\"PR\");\n                        nextRound.add(\"RS\");\n                    } else if(round.get(j).equals(\"PS\")){\n                        nextRound.add(\"PR\");\n                        nextRound.add(\"PS\");\n                    } else if(round.get(j).equals(\"RS\")){\n                        nextRound.add(\"RS\");\n                        nextRound.add(\"PS\");\n                    }\n                }\n                round = nextRound;\n            }\n            for(int i = 1; i < n; i++){\n                ArrayList<String> lastRound = new ArrayList<String>();\n                for(int j = 0; j < round.size()\/2; j++){\n                    String s1 = round.get(2*j);\n                    String s2 = round.get(2*j + 1);\n                    if(s1.compareTo(s2) < 0){\n                        lastRound.add(s1 + s2);\n                    } else {\n                        lastRound.add(s2 + s1);\n                    }\n                }\n                round = lastRound;\n            }\n            if(round.size() != 1){\n                System.out.println(\"FAIL\");\n            }\n            System.out.println(\"Case #\" + caseNum + \": \" + round.get(0));\n        }\n    }\n}"}
{"idx":"1623","func":"class RatherPerplexingShowdown {\n    \n    public static void main(String[] args) throws Exception {\n        File inputFile = new File(\"A-large.in\");\n        Scanner in = new Scanner(inputFile);\n        File outputFile = new File(\"output.txt\");\n        PrintWriter out = new PrintWriter(outputFile);\n\n        String[][] answers = new String[13][3];\n        answers[0] = new String[] {\"P\", \"R\", \"S\"};\n        for (int n=1; n<=12; n++) {\n            \/\/ P <- P R\n            String s1 = answers[n-1][0] + answers[n-1][1];\n            String s2 = answers[n-1][1] + answers[n-1][0];\n            answers[n][0] = s1.compareTo(s2) < 0 ? s1 : s2;\n            \/\/ R <- R S\n            s1 = answers[n-1][1] + answers[n-1][2];\n            s2 = answers[n-1][2] + answers[n-1][1];\n            answers[n][1] = s1.compareTo(s2) < 0 ? s1 : s2;\n            \/\/ S <- S P\n            s1 = answers[n-1][2] + answers[n-1][0];\n            s2 = answers[n-1][0] + answers[n-1][2];\n            answers[n][2] = s1.compareTo(s2) < 0 ? s1 : s2;            \n        }\n\n        int T = in.nextInt();\n        for (int t=0; t<T; t++) {\n            int N = in.nextInt();\n            int R = in.nextInt();\n            int P = in.nextInt();\n            int S = in.nextInt();\n            String best = null;\n            for (int i=0; i<3; i++) {\n                String cand = answers[N][i];\n                int[] stats = new int[3];\n                for (char c : cand.toCharArray()) {\n                    if (c == 'R') {\n                        stats[0]++;\n                    } else if (c == 'P') {\n                        stats[1]++;\n                    } else {\n                        stats[2]++;\n                    }\n                }\n                if (stats[0] == R && stats[1] == P && stats[2] == S) {\n                    if (best == null || cand.compareTo(best) < 0) {\n                        best = cand;\n                    }\n                }\n            }\n            String answer = (best == null) ? \"IMPOSSIBLE\" : best;\n            out.println(\"Case #\"+(t+1)+\": \"+answer);\n        }\n\n        out.close();\n    }\n    \n}"}
{"idx":"1624","func":"class RPS {\n    public static void main(String[] args) throws IOException{\n        BufferedReader buf = new BufferedReader(new FileReader(\"RPS.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"RPS.out\")));\n        int t = Integer.parseInt(buf.readLine());\n        for(int i = 1; i <= t; i++){\n            String[] str = buf.readLine().split(\" \");\n            int n = Integer.parseInt(str[0]);\n            int r = Integer.parseInt(str[1]);\n            int p = Integer.parseInt(str[2]);\n            int s = Integer.parseInt(str[3]);\n            String st = \"R\";\n            String st2 = \"P\";\n            String st3 = \"S\";\n            for(int j = 0; j < n; j++){\n                String stemp = \"\";\n                String stemp2 = \"\";\n                String stemp3 = \"\";\n                if(st.compareTo(st2) < 0){\n                    stemp = st + st2;\n                } else {\n                    stemp = st2 + st;\n                }\n                if(st2.compareTo(st3) < 0){\n                    stemp2 = st2 + st3;\n                } else {\n                    stemp2 = st3 + st2;\n                }\n                if(st3.compareTo(st) < 0){\n                    stemp3 = st3 + st;\n                } else {\n                    stemp3 = st + st3;\n                }\n                st = stemp;\n                st2 = stemp2;\n                st3 = stemp3;\n            }\n            \/**\n            for(int j = 0; j < n; j++){\n                String stemp = \"\";\n                for(int k = 0; k < st.length(); k++){\n                    if(st.charAt(k) == 'R'){\n                        if(j == n - 1){\n                            stemp = stemp + \"RS\";\n                        } else {\n                            stemp = stemp + \"SR\";\n                        }\n                    } else if(st.charAt(k) == 'P'){\n                        stemp = stemp + \"PR\";\n                    } else if(st.charAt(k) == 'S'){\n                        stemp = stemp + \"PS\";\n                    }\n                }\n                st = stemp;\n            }\n            String st2 = \"P\";\n            for(int j = 0; j < n; j++){\n                String stemp = \"\";\n                for(int k = 0; k < st2.length(); k++){\n                    if(st2.charAt(k) == 'R'){\n                        if(j == n - 1){\n                            stemp = stemp + \"RS\";\n                        } else {\n                            stemp = stemp + \"SR\";\n                        }\n                    } else if(st2.charAt(k) == 'P'){\n                        stemp = stemp + \"PR\";\n                    } else if(st2.charAt(k) == 'S'){\n                        stemp = stemp + \"PS\";\n                    }\n                }\n                st2 = stemp;\n            }\n            String st3 = \"S\";\n            for(int j = 0; j < n; j++){\n                String stemp = \"\";\n                for(int k = 0; k < st3.length(); k++){\n                    if(st3.charAt(k) == 'R'){\n                        if(j == n - 1){\n                            stemp = stemp + \"RS\";\n                        } else {\n                            stemp = stemp + \"SR\";\n                        }\n                    } else if(st3.charAt(k) == 'P'){\n                        stemp = stemp + \"PR\";\n                    } else if(st3.charAt(k) == 'S'){\n                        stemp = stemp + \"PS\";\n                    }\n                }\n                st3 = stemp;\n            }\n            *\/\n            out.print(\"Case #\" + i + \": \");\n            int countr = 0;\n            int countp = 0;\n            int counts = 0;\n            for(int j = 0; j < st.length(); j++){\n                if(st.charAt(j) == 'R'){\n                    countr++;\n                } else if(st.charAt(j) == 'P'){\n                    countp++;\n                } else if(st.charAt(j) == 'S'){\n                    counts++;\n                }\n            }\n            if (countr == r && countp == p && counts == s){\n                out.println(st);\n            } else {\n                countr = 0;\n                countp = 0;\n                counts = 0;\n                for(int j = 0; j < st.length(); j++){\n                    if(st2.charAt(j) == 'R'){\n                        countr++;\n                    } else if(st2.charAt(j) == 'P'){\n                        countp++;\n                    } else if(st2.charAt(j) == 'S'){\n                        counts++;\n                    }\n                }\n                if (countr == r && countp == p && counts == s){\n                    out.println(st2);\n                } else {\n                    countr = 0;\n                    countp = 0;\n                    counts = 0;\n                    for(int j = 0; j < st.length(); j++){\n                        if(st3.charAt(j) == 'R'){\n                            countr++;\n                        } else if(st3.charAt(j) == 'P'){\n                            countp++;\n                        } else if(st3.charAt(j) == 'S'){\n                            counts++;\n                        }\n                    }\n                    if (countr == r && countp == p && counts == s){\n                        out.println(st3);\n                    } else {\n                        out.println(\"IMPOSSIBLE\");\n                    }\n                }\n            }\n        }\n        out.close();\n    }\n}"}
{"idx":"1625","func":"class A {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src\/A-large.in\"))));\n\n        String output = \"\";\n        int t = sc.nextInt();\n        sc.nextLine();\n        for (int i = 1; i <= t; i++) {\n            int n = sc.nextInt();\n            int r = sc.nextInt();\n            int p = sc.nextInt();\n            int s = sc.nextInt();\n            ArrayList<String> poss = new ArrayList<String>();\n            \n            String ans = \"P\";\n            int ar = 0;\n            int ap = 0;\n            int as = 0;\n            for (int j = 0; j < n; j++) {\n                StringBuilder next = new StringBuilder();\n                for (char c : ans.toCharArray()) {\n                    if (c=='P')\n                        next.append(\"PR\");\n                    if (c=='S')\n                        next.append(\"PS\");\n                    if (c=='R')\n                        next.append(\"RS\");\n                }\n                ans = next.toString();\n            }\n            for (char c : ans.toCharArray()) {\n                if (c=='P')\n                    ap++;\n                if (c=='R')\n                    ar++;\n                if (c=='S')\n                    as++;\n            }\n            if (ap==p&&ar==r&&as==s) {\n                for (int j = 0; j < n; j++) {\n                    StringBuilder fa = new StringBuilder();\n                    int step = 1<<j;\n                    for (int k = 0; k < ans.length(); k += step*2) {\n                        if (ans.substring(k, k+step).compareTo(ans.substring(k+step, k+step*2)) < 0) {\n                            fa.append(ans.substring(k, k+step*2));\n                        } else {\n                            fa.append(ans.substring(k+step, k+step*2));\n                            fa.append(ans.substring(k, k+step));\n                        }\n                    }\n                    ans = fa.toString();\n                }\n                poss.add(ans);\n            }\n            \n            ans = \"R\";\n            ar = 0;\n            ap = 0;\n            as = 0;\n            for (int j = 0; j < n; j++) {\n                StringBuilder next = new StringBuilder();\n                for (char c : ans.toCharArray()) {\n                    if (c=='P')\n                        next.append(\"PR\");\n                    if (c=='S')\n                        next.append(\"PS\");\n                    if (c=='R')\n                        next.append(\"RS\");\n                }\n                ans = next.toString();\n            }\n            for (char c : ans.toCharArray()) {\n                if (c=='P')\n                    ap++;\n                if (c=='R')\n                    ar++;\n                if (c=='S')\n                    as++;\n            }\n            if (ap==p&&ar==r&&as==s) {\n                for (int j = 0; j < n; j++) {\n                    StringBuilder fa = new StringBuilder();\n                    int step = 1<<j;\n                    for (int k = 0; k < ans.length(); k += step*2) {\n                        if (ans.substring(k, k+step).compareTo(ans.substring(k+step, k+step*2)) < 0) {\n                            fa.append(ans.substring(k, k+step*2));\n                        } else {\n                            fa.append(ans.substring(k+step, k+step*2));\n                            fa.append(ans.substring(k, k+step));\n                        }\n                    }\n                    ans = fa.toString();\n                }\n                poss.add(ans);\n            }\n            \n            ans = \"S\";\n            ar = 0;\n            ap = 0;\n            as = 0;\n            for (int j = 0; j < n; j++) {\n                StringBuilder next = new StringBuilder();\n                for (char c : ans.toCharArray()) {\n                    if (c=='P')\n                        next.append(\"PR\");\n                    if (c=='S')\n                        next.append(\"PS\");\n                    if (c=='R')\n                        next.append(\"RS\");\n                }\n                ans = next.toString();\n            }\n            for (char c : ans.toCharArray()) {\n                if (c=='P')\n                    ap++;\n                if (c=='R')\n                    ar++;\n                if (c=='S')\n                    as++;\n            }\n            if (ap==p&&ar==r&&as==s) {\n                for (int j = 0; j < n; j++) {\n                    StringBuilder fa = new StringBuilder();\n                    int step = 1<<j;\n                    for (int k = 0; k < ans.length(); k += step*2) {\n                        if (ans.substring(k, k+step).compareTo(ans.substring(k+step, k+step*2)) < 0) {\n                            fa.append(ans.substring(k, k+step*2));\n                        } else {\n                            fa.append(ans.substring(k+step, k+step*2));\n                            fa.append(ans.substring(k, k+step));\n                        }\n                    }\n                    ans = fa.toString();\n                }\n                poss.add(ans);\n            }\n            \n            if (poss.size() == 0)\n                output += \"Case #\" + i + \": \" + \"IMPOSSIBLE\" + \"\\n\";\n            else {\n                Collections.sort(poss);\n                output += \"Case #\" + i + \": \" + poss.get(0) + \"\\n\";\n            }\n        }\n        \n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src\/A-large.out\"), \"utf-8\"));\n        bw.write(output);\n        bw.close();\n    }\n}"}
{"idx":"1626","func":"class A {\n    static String[] r = new String[13];\n    static String[] p = new String[13];\n    static String[] s = new String[13];\n\n    public static void main(String[] args) {\n        r[0] = \"R\";\n        p[0] = \"P\";\n        s[0] = \"S\";\n        for (int i = 0; i < 12; i++) {\n            if (r[i].compareTo(p[i]) < 0) {\n                p[i + 1] = r[i] + p[i];\n            } else {\n                p[i + 1] = p[i] + r[i];\n            }\n\n            if (r[i].compareTo(s[i]) < 0) {\n                r[i + 1] = r[i] + s[i];\n            } else {\n                r[i + 1] = s[i] + r[i];\n            }\n\n            if (s[i].compareTo(p[i]) < 0) {\n                s[i + 1] = s[i] + p[i];\n            } else {\n                s[i + 1] = p[i] + s[i];\n            }\n        }\n\n        Scanner sc = new Scanner(System.in);\n        int numCases = sc.nextInt();\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n            int N = sc.nextInt();\n\n            int[] R = new int[N + 1];\n            R[0] = sc.nextInt();\n            int[] P = new int[N + 1];\n            P[0] = sc.nextInt();\n            int[] S = new int[N + 1];\n            S[0] = sc.nextInt();\n\n            for (int i = 0; i < N; i++) {\n                P[i + 1] = (P[i] + R[i] - S[i]) \/ 2;\n                R[i + 1] = (R[i] + S[i] - P[i]) \/ 2;\n                S[i + 1] = (P[i] + S[i] - R[i]) \/ 2;\n            }\n\n            System.out.print(\"Case #\" + caseNum + \": \");\n            boolean possible = true;\n            for (int i = 0; i <= N; i++) {\n                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {\n                    System.out.println(\"IMPOSSIBLE\");\n                    possible = false;\n                    break;\n                }\n            }\n            if (!possible) {\n                continue;\n            }\n            if (R[N] == 1) {\n                System.out.println(r[N]);\n            } else if (P[N] == 1) {\n                System.out.println(p[N]);\n            } else {\n                System.out.println(s[N]);\n            }\n        }\n        sc.close();\n    }\n}"}
{"idx":"1627","func":"class A {\n    \n    public static void main(String[] args) throws IOException {\n        \n\/\/        Scanner qwe = new Scanner(System.in);\n        Scanner qwe = new Scanner(new File(\"A.in\"));\n\n        int T = qwe.nextInt();\n        \n        int p = 0;\n        int r = 1;\n        int s = 2;\n        \n        int[][][] am = new int[13][3][3];\n        int[][] ordering = new int[13][3];\n        String[][] str = new String[13][3];\n        \n        for(int i =0; i < 3; i++) am[0][i][i] = 1;\n        ordering[0][p] = 0;\n        ordering[0][r] = 1;\n        ordering[0][s] = 2;\n        str[0][p] = \"P\";\n        str[0][r] = \"R\";\n        str[0][s] = \"S\";\n        \n        for(int lvl =1; lvl < 13; lvl++){\n            \n            for(int i =0; i < 3; i++){\n                for(int j =0; j < 3; j++)\n                    am[lvl][i][j] = am[lvl-1][(i+1)%3][j]+am[lvl-1][i][j];\n            }\n            \n            for(int i =0; i < 3; i++)\n            {\n                ordering[lvl][i] = ordering[lvl-1][i]+ordering[lvl-1][(i+1)%3]-1;\n                String a = str[lvl-1][i]+str[lvl-1][(i+1)%3];\n                String b = str[lvl-1][(i+1)%3]+str[lvl-1][i];\n                if(a.compareTo(b) < 0){\n                    str[lvl][i] = a;\n                }\n                else str[lvl][i] = b;\n            }\n            \n            \/\/System.out.println(Arrays.toString(ordering[lvl]));\n            \n        }\n        \n        \n        for(int cse = 1; cse <= T; cse++){\n            int N = qwe.nextInt();\n            int R = qwe.nextInt();\n            int P = qwe.nextInt();\n            int S = qwe.nextInt();\n            \n            boolean pos = false;\n            int best = 3;\n            String ans = \"\";\n            for(int i =0; i < 3; i++){\n                int next = ordering[N][i];\n                if(next < best){\n                    \n                    if(am[N][i][p] == P && am[N][i][r] == R && am[N][i][s] == S){\n                        ans = str[N][i];\n                        best=  next;\n                        pos = true;\n                    }\n                    \n                }\n                \n            }\n            \n            if(pos) System.out.println(\"Case #\"+cse+\": \"+ans);\n            else{\n                System.out.println(\"Case #\"+cse+\": IMPOSSIBLE\");\n            }\n            \n        }\n        \n        \n        \n        qwe.close();\n    }\n\n}"}
{"idx":"1628","func":"class A {\n\n    public static void main(String[] args) {\n    \n        Scanner in = new Scanner(System.in);\n        \n        int num = in.nextInt();\n        for(int i = 0; i < num; i++) {\n            boolean ayy = false;\n            System.out.print(\"Case #\" + (i+1) + \": \");\n            int n = in.nextInt();\n            int nn = (int) Math.pow(2, n);\n            int r = in.nextInt();\n            int p = in.nextInt();\n            int s = in.nextInt();\n            char[] test = new char[nn];\n            Arrays.fill(test, 'p');\n            if(p == nn) {\n                System.out.print(\"IMPOSSIBLE\");\n                ayy = true;\n            } else {\n                boolean solvable = true;\n                boolean unsolved = true;\n                while(solvable) {\n                    for(int ii = nn-1; ii >= 0; ii--) {\n                        if(test[ii] == 'p') {\n                            test[ii] = 'r';\n                            break;\n                        } else if (test[ii] == 'r') {\n                            test[ii] = 's';\n                            break;\n                        }\n                        if(ii == 0) {\n                            solvable = false;\n                            s = -1;\n                            break;\n                        } else {\n                            test[ii] = 'p';\n                        }\n                    }\n                    int cr = 0;\n                    int cp = 0;\n                    int cs = 0;\n                    \/*for(int ff = 0; ff < nn; ff++) {\n                        System.out.print(test[ff]);\n                    }\n                    System.out.println();*\/\n                    for(int j = 0; j < nn; j++) {\n                        if(test[j] == 'p') cp++;\n                        if(test[j] == 'r') cr++;\n                        if(test[j] == 's') cs++;\n                    }\n                    if(cr != r || cp != p || cs != s) {\n                            continue;\n                        }\n                    \/\/System.out.println(\"GOOD\");\n                    boolean decent = true;\n                    while(true && unsolved && decent) {\n                        int nnn = nn;\n                        char[] prev = new char[nn];\n                        char[] rec;\n                        for(int sp = 0; sp < nn; sp++) {\n                            prev[sp] = test[sp];\n                        }\n                        while(nnn > 1) {\n                            nnn \/= 2;\n                            rec = new char[nnn];\n                            for(int mm = 0; mm < nnn; mm++) {\n                                if(prev[mm*2] == prev[mm*2+1]) {\n                                    nnn = 0;\n                                    decent = false;\n                                    break;\n                                }\n                                if(prev[mm*2] != 'r' && prev[mm*2+1] != 'r') {\n                                    rec[mm] = 's';\n                                } else if(prev[mm*2] != 's' && prev[mm*2+1] != 's') {\n                                    rec[mm] = 'p';\n                                } else {\n                                    rec[mm] = 'r';\n                                }\n                            }\n                            prev = rec;\n                        }\n                        if(decent) {\n                            unsolved = false;\n                        }\n                    }\n                    if(!unsolved) {\n                        for(int meh = 0; meh < nn; meh++) {\n                            if(test[meh] == 'r') System.out.print('R');\n                            else if(test[meh] == 's') System.out.print('S');\n                            else System.out.print('P');\n                        }\n                        ayy = true;\n                        break;\n                    }\n                }\n            }\n            if(!ayy) System.out.print(\"IMPOSSIBLE\");\n            System.out.println();\n        }\n    }\n\n}"}
{"idx":"1629","func":"class A {\n\n    \n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n        PrintWriter pw = new PrintWriter(new File(\"A-small.out\"));\n\/\/        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n\/\/        PrintWriter pw = new PrintWriter(new File(\"A-large.out\"));\n        int T = Integer.parseInt(br.readLine());\n        for(int i=1;i<=T;i++){\n            String[] l = br.readLine().split(\" \");\n            int n = Integer.parseInt(l[0]);\n            int r = Integer.parseInt(l[1]);\n            int p = Integer.parseInt(l[2]);\n            int s = Integer.parseInt(l[3]);\n            int max = Math.max(p,Math.max(r,s));\n            if(n==1){\n                if(max>1){\n                    pw.println(\"Case #\"+i+\": IMPOSSIBLE\");\n                    continue;\n                }\n                if(p==1&&r==1){\n                    pw.println(\"Case #\"+i+\": PR\");\n                    continue;\n                }\n                if(p==1&&s==1){\n                    pw.println(\"Case #\"+i+\": PS\");\n                    continue;\n                }\n                if(s==1&&r==1){\n                    pw.println(\"Case #\"+i+\": RS\");\n                    continue;\n                }\n            }\n            if(n==2){\n                if(max>=3||p*r*s==0){\n                    pw.println(\"Case #\"+i+\": IMPOSSIBLE\");\n                    continue;\n                }\n                if(p==1&&r==1){\n                    pw.println(\"Case #\"+i+\": PSRS\");\n                    continue;\n                }\n                if(p==1&&s==1){\n                    pw.println(\"Case #\"+i+\": PRRS\");\n                    continue;\n                }\n                if(s==1&&r==1){\n                    pw.println(\"Case #\"+i+\": PRPS\");\n                    continue;\n                }\n            }\n            if(n==3){\n                if(max>=4||p*r*s==0){\n                    pw.println(\"Case #\"+i+\": IMPOSSIBLE\");\n                    continue;\n                }\n                if(p==3&&r==3){\n                    pw.println(\"Case #\"+i+\": PRPSPRRS\");\n                    continue;\n                }\n                if(p==3&&s==3){\n                    pw.println(\"Case #\"+i+\": PRPSPSRS\");\n                    continue;\n                }\n                if(s==3&&r==3){\n                    pw.println(\"Case #\"+i+\": PRRSPSRS\");\n                    continue;\n                }\n            }\n        }\n        pw.close();\n        br.close();\n    }\n}"}
{"idx":"1630","func":"static void main(String[] args) {\n    List[] p = new ArrayList[MAX_N];\n    List[] r = new ArrayList[MAX_N];\n    List[] s = new ArrayList[MAX_N];\n    List[] merged = new ArrayList[MAX_N];\n    for (int i = 0; i < MAX_N; ++i) {\n      p[i] = new ArrayList();\n      r[i] = new ArrayList();\n      s[i] = new ArrayList();\n      if (i == 0) {\n        p[0].add(\"PR\");\n        r[0].add(\"RS\");\n        s[0].add(\"PS\");\n      } else {\n        for (Object ao: p[i-1]) for (Object bo: r[i-1]) {\n          String aos = ao.toString();\n          String bos = bo.toString();\n          if (aos.compareTo(bos) > 0) { aos = bo.toString(); bos = ao.toString(); }\n          p[i].add(aos + bos);\n        }\n        for (Object ao: r[i-1]) for (Object bo: s[i-1]) {\n          String aos = ao.toString();\n          String bos = bo.toString();\n          if (aos.compareTo(bos) > 0) { aos = bo.toString(); bos = ao.toString(); }\n          r[i].add(aos + bos);\n        }\n        for (Object ao: p[i-1]) for (Object bo: s[i-1]) {\n          String aos = ao.toString();\n          String bos = bo.toString();\n          if (aos.compareTo(bos) > 0) { aos = bo.toString(); bos = ao.toString(); }\n          s[i].add(aos + bos);\n        }\n      }\n      merged[i] = new ArrayList();\n      merged[i].addAll(p[i]);\n      merged[i].addAll(r[i]);\n      merged[i].addAll(s[i]);\n      Collections.sort(merged[i]);\n    }\n\n    Scanner scan = new Scanner(System.in);\n    int tcc = scan.nextInt();\n    for (int tc = 1; tc <= tcc; ++tc) {\n      int n = scan.nextInt();\n      int rc = scan.nextInt();\n      int pc = scan.nextInt();\n      int sc = scan.nextInt();\n      String best = null;\n      for (Object o: merged[n - 1]) {\n        String os = o.toString();\n        if (best != null && o.toString().compareTo(best) > 0) break;\n        int rrc = 0;\n        int rpc = 0;\n        int rsc = 0;\n        for (int i = 0; i < os.length(); ++i) {\n          if (os.charAt(i) == 'R') ++rrc;\n          if (os.charAt(i) == 'P') ++rpc;\n          if (os.charAt(i) == 'S') ++rsc;\n        }\n        if (rrc == rc && rpc == pc && rsc == sc) best = os;\n      }\n      System.out.printf(\"Case #%d: \", tc);\n      System.out.println(best == null ? \"IMPOSSIBLE\" : best);\n    }\n  }\n}"}
{"idx":"1631","func":"class Showdown {\n    public static void main(String[] args) throws IOException{\n        Scanner kb = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(new FileWriter(\"showdown.out\"));\n        \/\/PrintStream out = System.out;\n        int [][][] solutions = new int[13][3][3];\n        solutions[0][0][0] = 1; \/\/ p\n        solutions[0][1][1] = 1; \/\/ r\n        solutions[0][2][2] = 1; \/\/ s\n        \n        String[][] answers = new String[13][3];\n        answers[0][0] = \"P\"; \/\/ p\n        answers[0][1] = \"R\"; \/\/ r\n        answers[0][2] = \"S\"; \/\/ s\n        \n        for (int i=1; i <= 12; i++) {\n            for (int j=0; j < 3; j++) {\n                solutions[i][j][0] = solutions[i-1][j][0] + solutions[i-1][j][2];\n                solutions[i][j][1] = solutions[i-1][j][1] + solutions[i-1][j][0];\n                solutions[i][j][2] = solutions[i-1][j][2] + solutions[i-1][j][1];\n                \n                \n            }\n            answers[i][0] = minString(answers[i-1][0], answers[i-1][1]);\n            answers[i][1] = minString(answers[i-1][1], answers[i-1][2]);\n            answers[i][2] = minString(answers[i-1][2], answers[i-1][0]);\n        }\n        \n        int cases = kb.nextInt();\n        for(int n=0; n < cases; n++) {\n            out.print(\"Case #\" + (n + 1) + \": \");\n            \n            int N = kb.nextInt();\n            int r = kb.nextInt();\n            int p = kb.nextInt();\n            int s = kb.nextInt();\n            \n            boolean found = false;\n            for (int j=0; j < 3; j++) {\n                if (solutions[N][j][0] == p && solutions[N][j][1] == r && solutions[N][j][2] == s) {\n                    out.print(answers[N][j]);\n                    found = true;\n                }\n            }\n            if (!found)\n                out.print(\"IMPOSSIBLE\");\n            \n            \n            out.println();\n        }\n        out.close();\n    }\n    \n    public static String minString (String a, String b) {\n        if (a.compareTo(b) < 0) return a + b;\n        return b + a;\n    }\n}"}
{"idx":"1632","func":"class A\n{\n    static char[] let={'P','R','S'};\n    public static void main(String[] args)\n    {\n        String[][] table = new String[3][13];\n        for (int i=0; i<3; i++)\n            table[i][0]=\"\"+let[i];\n        for (int n=0; n<=11; n++)\n            for (int i=0; i<3; i++)\n            {\n                String a=table[i][n], b=table[(i+1)%3][n];\n                if (a.compareTo(b)<0)\n                    table[i][n+1]=a+b;\n                else\n                    table[i][n+1]=b+a;\n            }\n        \n        Scanner in=new Scanner(System.in);\n        int numRuns=in.nextInt();\n        int[] count=new int[3];\n        for (int run=1; run<=numRuns; run++)\n        {\n            int n=in.nextInt();\n            count[1]=in.nextInt();\n            count[0]=in.nextInt();\n            count[2]=in.nextInt();\n            boolean match=false;\n            for (int i=0; i<3; i++)\n            {\n                match=true;\n                String game=table[i][n];\n                for (int j=0; j<3; j++)\n                    if (game.length()-game.replace(\"\"+let[j],\"\").length()!=count[j])\n                        match=false;\n                if (match)\n                {\n                    System.out.println(\"Case #\"+run+\": \"+game);\n                    break;\n                }\n            }\n            if (!match)\n                System.out.println(\"Case #\"+run+\": IMPOSSIBLE\");\n        }\n    }\n}"}
{"idx":"1633","func":"class TaskA {\n    public static void main(String[] args) {\n        String fileName = \"A-small-attempt1.in\";\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n\n            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + \".out\"))) {\n                int tests = Integer.valueOf(br.readLine());\n                for (int test = 1; test <= tests; ++test) {\n                    Scanner scanner = new Scanner(br.readLine());\n                    int nn = scanner.nextInt();\n                    int rr = scanner.nextInt();\n                    int pp = scanner.nextInt();\n                    int ss = scanner.nextInt();\n                    List<String> res = new ArrayList<>();\n  \/*                  char tmp[] = new char[(int)Math.pow(2, nn)];\n                    Arrays.fill(tmp, 'P');\n                    String tmpRes = null;\n                    while (true) {\n                        int cur = tmp.length - 1;\n                        int r = rr;\n                        int p = pp;\n                        int s = ss;\n                        boolean good = true;\n                        for (char c: tmp) {\n                            if ('P' == c)\n                                --p;\n                            if ('R' == c)\n                                --r;\n                            if ('S' == c)\n                                --s;\n                            if (p < 0 || s < 0 || r < 0) {\n                                good = false;\n                                break;\n                            }\n                        }\n                        if (good) {\n                            char tPrev[] = Arrays.copyOf(tmp, tmp.length);\n                            while (tPrev.length > 1) {\n                                char tCur[] = new char[tPrev.length \/ 2];\n                                for(int i =0; i < tCur.length; ++i) {\n                                    if ((tPrev[i*2] == 'R' && tPrev[i*2+1] == 'P')\n                                        || (tPrev[i*2] == 'P' && tPrev[i*2+1] == 'R'))\n                                        tCur[i] = 'P';\n                                    else if ((tPrev[i*2] == 'R' && tPrev[i*2+1] == 'S')\n                                            || (tPrev[i*2] == 'S' && tPrev[i*2+1] == 'R'))\n                                        tCur[i] = 'R';\n                                    else if ((tPrev[i*2] == 'P' && tPrev[i*2+1] == 'S')\n                                            || (tPrev[i*2] == 'S' && tPrev[i*2+1] == 'P'))\n                                        tCur[i] = 'S';\n                                    else {\n                                        good = false;\n                                        break;\n                                    }\n                                }\n                                tPrev = tCur;\n                            }\n                            if (good) {\n                                String tt = new String(tmp);\n                                if (tmpRes == null)\n                                    tmpRes = tt;\n                                else if (tmpRes.compareTo(tt) > 0)\n                                    tmpRes = tt;\n                            }\n                        }\n\n                        while( cur >= 0 && tmp[cur] == 'S')\n                            --cur;\n                        if (cur < 0)\n                            break;\n                        if (tmp[cur] == 'P')\n                            tmp[cur] = 'R';\n                        else if (tmp[cur] == 'R')\n                            tmp[cur] = 'S';\n                        for (int i = cur + 1; i < tmp.length; ++i)\n                            tmp[i] = 'P';\n                    }\n                    if (tmpRes != null)\n                        bw.write(tmpRes + \"\\n\");\n                    else\n                        bw.write(\"IMPOSSIBLE\" + \"\\n\");\n*\/\n\n                    start:\n                    for (int start = 0; start <= 2; ++start) {\n                        int n = nn;\n                        int r = rr;\n                        int p = pp;\n                        int s = ss;\n                        int prevLen = 1;\n                        char prev[] = new char[prevLen];\n                        if (start == 0)\n                            prev[0] = 'P';\n                        if (start == 1)\n                            prev[0] = 'R';\n                        if (start == 2)\n                            prev[0] = 'S';\n                        int curLen;\n                        while (n-- > 0) {\n                            curLen = prevLen * 2;\n                            char cur[] = new char[curLen];\n                            for (int i = 0; i < prevLen; ++i) {\n                                if (prev[i] == 'P') {\n                                    cur[i*2] = 'P';\n                                    cur[i*2 + 1] = 'R';\n                                } else if (prev[i] == 'R') {\n                                    if (n == 0) {\n                                        cur[i*2] = 'R';\n                                        cur[i*2 + 1] = 'S';\n                                    } else {\n                                        cur[i*2] = 'S';\n                                        cur[i*2 + 1] = 'R';\n                                    }\n                                } else if (prev[i] == 'S') {\n                                    if (n >= 2) {\n                                        cur[i*2] = 'S';\n                                        cur[i*2 + 1] = 'P';\n                                    } else {\n                                        cur[i*2] = 'P';\n                                        cur[i*2 + 1] = 'S';\n                                    }\n                                }\n                            }\n                            prevLen = curLen;\n                            prev = cur;\n                        }\n                        int a = 1;\n                        for (char c: prev) {\n                            if ('P' == c)\n                                --p;\n                            if ('R' == c)\n                                --r;\n                            if ('S' == c)\n                                --s;\n                            if (p < 0 || s < 0 || r < 0)\n                                continue start;\n                        }\n                        res.add(new String(prev));\n                    }\n                    bw.write(\"Case #\" + test + \": \");\n                    if (res.isEmpty())\n                        bw.write(\"IMPOSSIBLE\");\n                    else {\n                        String result = null;\n                        for (String s: res) {\n                            if (result == null)\n                                result = s;\n                            else {\n                                if (result.compareTo(s) > 0)\n                                    result = s;\n                            }\n                        }\n                        bw.write(result);\n                    }\n                    bw.write(\"\\n\");\n                }\n                bw.close();\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"idx":"1634","func":"class R2_A {\n    \n    public static void main(String args[]) throws IOException {\n    \n        \n        FileInputStream in = null;\n        PrintWriter out = null;\n\n        try {\n             in = new FileInputStream(\"A-large.in\");\n             out = new PrintWriter( \"A-large.output\" );\n                    \n                    \n             Scanner sc = new Scanner (in);\n             String line = sc.nextLine();\n               \n             int T = Integer.parseInt(line);\n             \n             for(int t=1 ; t <= T ; t++) {\n                 String output = \"Case #\" + t + \":\";\n                 \n                 line = sc.nextLine();\n                 int n = Integer.parseInt(line.split(\" \")[0]);\n                 int r = Integer.parseInt(line.split(\" \")[1]);\n                 int p = Integer.parseInt(line.split(\" \")[2]);\n                 int s = Integer.parseInt(line.split(\" \")[3]);\n                 \n                 Vector<HashMap<String, String>> memo = new Vector<HashMap<String, String>>();;\n                 HashMap<String, String> base = new HashMap<String, String>();\n                 base.put(\"P\", \"P\");\n                 base.put(\"R\", \"R\");\n                 base.put(\"S\", \"S\");\n                 memo.add(base);\n                 \n                 for(int i=1; i<=12; ++i) {\n                     HashMap<String, String> subMemo = new HashMap<String, String>();\n                     if ( memo.elementAt(i-1).get(\"P\").compareTo(memo.elementAt(i-1).get(\"R\")) < 0 ) {\n                         String ss = memo.elementAt(i-1).get(\"P\") + memo.elementAt(i-1).get(\"R\");              \n                         subMemo.put(\"P\", ss);\n                     } else {\n                         String ss = memo.elementAt(i-1).get(\"R\") + memo.elementAt(i-1).get(\"P\");\n                         subMemo.put(\"P\", ss);\n                     }\n                     if ( memo.elementAt(i-1).get(\"R\").compareTo(memo.elementAt(i-1).get(\"S\")) < 0  ) {\n                         String ss = memo.elementAt(i-1).get(\"R\") + memo.elementAt(i-1).get(\"S\");\n                         subMemo.put(\"R\", ss);\n                     } else {\n                         String ss = memo.elementAt(i-1).get(\"S\") + memo.elementAt(i-1).get(\"R\");\n                         subMemo.put(\"R\", ss);\n                     }\n                     if ( memo.elementAt(i-1).get(\"P\").compareTo(memo.elementAt(i-1).get(\"S\")) < 0 ) {\n                         String ss = memo.elementAt(i-1).get(\"P\") + memo.elementAt(i-1).get(\"S\");\n                         subMemo.put(\"S\", ss);\n                     } else {\n                         String ss = memo.elementAt(i-1).get(\"S\") + memo.elementAt(i-1).get(\"P\");\n                         subMemo.put(\"S\", ss);\n                     }\n                     memo.add(subMemo);\n                 }\n                 \n                 int flag = 0;\n                 for(String key : Arrays.asList(\"P\", \"R\", \"S\")) {\n                     int pNum = 0, rNum = 0, sNum = 0;\n                     String currentS = memo.elementAt(n).get(key);\n                     for (int k = 0; k < currentS.length(); k++){\n                         char c = currentS.charAt(k); \n                         if ( c == 'P' ) ++pNum;\n                         else if ( c == 'R' ) ++rNum;\n                         else if ( c == 'S' ) ++sNum;\n                     }\n                     if (pNum == p && rNum == r && sNum == s) {\n                         output += \" \" + memo.elementAt(n).get(key);\n                         out.println( output );\n                         flag = 1;\n                         break;\n                     }\n                 }\n                 \n                 if( flag == 0 ) {\n                     output += \" \" + \"IMPOSSIBLE\";\n                     out.println( output );\n                 }\n             }\n         \n         } finally {\n             if (in != null) {\n                in.close();\n             }\n             if (out != null) {\n                out.close();\n             }\n         }\n    }\n\n}"}
{"idx":"1635","func":"class A\n{\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader in  = new BufferedReader(new FileReader(\"A.in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"A.out\"));\n\n        int T = Integer.parseInt(in.readLine());\n        for(int t=1;t<=T;t++)\n        {\n            StringTokenizer st = new StringTokenizer(in.readLine());\n            int N = Integer.parseInt(st.nextToken());\n            int R = Integer.parseInt(st.nextToken());\n            int P = Integer.parseInt(st.nextToken());\n            int S = Integer.parseInt(st.nextToken());\n\n            String ans = \"IMPOSSIBLE\";\n\n            int[][] win = {{0, 1}, {1, 2}, {0, 2}};\n            for(int i=0;i<3;i++)\n            {\n                String store = new String[]{\"P\", \"R\", \"S\"}[i];\n                for(int k=0;k<N;k++)\n                {\n                    String temp = \"\";\n                    for(char c : store.toCharArray())\n                        if(c == 'P')\n                            temp += \"PR\";\n                        else if(c == 'R')\n                            temp += \"RS\";\n                        else\n                            temp += \"PS\";\n\n                    store = temp;\n                }\n\n                int p = 0, r = 0, s = 0;\n                for(char c : store.toCharArray())\n                    if(c == 'P')\n                        p++;\n                    else if(c == 'R')\n                        r++;\n                    else\n                        s++;\n\n                for(int j=1;j<(1 << N);j *= 2)\n                    for(int k=0;k+j<(1 << N);k+=j+j)\n                        if(store.substring(k+j, k+2*j).compareTo(store.substring(k, k+j)) < 0)\n                            store = store.substring(0, k) + store.substring(k+j, k+2*j) + store.substring(k, k+j) + store.substring(k+2*j);\n\n                if(P == p && R == r && S == s && (ans.equals(\"IMPOSSIBLE\") || store.compareTo(ans) < 0))\n                    ans = store;\n            }\n\n            out.write(\"Case #\"+t+\": \");\n            out.write(ans);\n            out.write(\"\\n\");\n        }\n\n        in .close();\n        out.close();\n    }\n}"}
{"idx":"1636","func":"class Main {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(new File(\"A.in\")));\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(new File(\"A.out\"))));\n\n        String[][] prs = new String[13][3];\n        prs[0][0] = \"P\";\n        prs[0][1] = \"R\";\n        prs[0][2] = \"S\";\n        int[][] prsp = new int[13][3];\n        int[][] prsr = new int[13][3];\n        int[][] prss = new int[13][3];\n        prsp[0][0] = 1;\n        prsr[0][1] = 1;\n        prss[0][2] = 1;\n        for (int n = 0; n < 12; n++) {\n            prsp[n+1][0] = prsp[n][0] + prsp[n][1];\n            prsp[n+1][1] = prsp[n][1] + prsp[n][2];\n            prsp[n+1][2] = prsp[n][2] + prsp[n][0];\n            prsr[n+1][0] = prsr[n][0] + prsr[n][1];\n            prsr[n+1][1] = prsr[n][1] + prsr[n][2];\n            prsr[n+1][2] = prsr[n][2] + prsr[n][0];\n            prss[n+1][0] = prss[n][0] + prss[n][1];\n            prss[n+1][1] = prss[n][1] + prss[n][2];\n            prss[n+1][2] = prss[n][2] + prss[n][0];\n            if (prs[n][0].compareTo(prs[n][1]) < 0) prs[n+1][0] = prs[n][0]+prs[n][1];\n            else prs[n+1][0] = prs[n][1]+prs[n][0];\n            if (prs[n][1].compareTo(prs[n][2]) < 0) prs[n+1][1] = prs[n][1]+prs[n][2];\n            else prs[n+1][1] = prs[n][2]+prs[n][1];\n            if (prs[n][2].compareTo(prs[n][0]) < 0) prs[n+1][2] = prs[n][2]+prs[n][0];\n            else prs[n+1][2] = prs[n][0]+prs[n][2];\n        }\n        \n        \n        int T = Integer.parseInt(br.readLine());\n        for (int t = 0; t < T; t++) {\n            String[] str = br.readLine().split(\" \");\n            int N = Integer.parseInt(str[0]);\n            int R = Integer.parseInt(str[1]);\n            int P = Integer.parseInt(str[2]);\n            int S = Integer.parseInt(str[3]);\n            \n            String answer = \"IMPOSSIBLE\";\n            \n            if (prsp[N][0] == P && prsr[N][0] == R && prss[N][0] == S) answer = prs[N][0];\n            else if (prsp[N][1] == P && prsr[N][1] == R && prss[N][1] == S) answer = prs[N][1];\n            else if (prsp[N][2] == P && prsr[N][2] == R && prss[N][2] == S) answer = prs[N][2];\n            \n            pw.println(\"Case #\"+(t+1)+\": \"+answer);\n            pw.flush();\n        }\n        \n        pw.close();\n        br.close();\n    }\n}"}
{"idx":"1637","func":"class A {\n    public static void main(String[]args) throws IOException {\n        BufferedReader x = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(x.readLine());\n        for (int cases = 1; cases <= t; cases++) {\n            StringTokenizer st = new StringTokenizer(x.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            int r = Integer.parseInt(st.nextToken());\n            int p = Integer.parseInt(st.nextToken());\n            int s = Integer.parseInt(st.nextToken());\n            int num1 = 1;\n            for (int i1 = 0; i1 < n; i1++) {\n                num1 *= 2;\n            }\n            \/\/check possibility\n            int num = num1;\n            if (n % 2 == 1) num++;\n            num \/= 3;\n            if ((r == num && s == num) || (s == num && p == num) || (r == num && p == num)) {\n                if (n == 1) {\n                    if (r == 0) System.out.println(\"Case #\" + cases + \": PS\");\n                    if (s == 0) System.out.println(\"Case #\" + cases + \": PR\");\n                    if (p == 0) System.out.println(\"Case #\" + cases + \": RS\");\n                    continue;\n                }\n                String ans = \"\";\n                if (n % 2 == 0) {\n                    if (p != num) ans = \"S\";\n                    if (r != num) ans = \"P\";\n                    if (s != num) ans = \"R\";\n                } else {\n                    if (p != num) ans = \"P\";\n                    if (r != num) ans = \"R\";\n                    if (s != num) ans = \"S\";\n                }\n                for (int i = n - 1; i >= 0; i--) {\n                    String temp = \"\";\n                    for (int j = 0; j < ans.length(); j++) {\n                        if (ans.charAt(j) == 'S') {\n                            if (i % 6 == 0 || i % 6 == 1 || i % 6 == 5) {\n                                temp += \"PS\";\n                            } else {\n                                temp += \"SP\";\n                            }\n                        }\n                        if (ans.charAt(j) == 'P') {\n                            if (i % 6 == 0 || i % 6 == 1 || i % 6 == 2) {\n                                temp += \"PR\";\n                            } else {\n                                temp += \"RP\";\n                            }\n                        }\n                        if (ans.charAt(j) == 'R') {\n                            if (i % 6 == 0 || i % 6 == 4 || i % 6 == 5) {\n                                temp += \"RS\";\n                            } else {\n                                temp += \"SR\";\n                            }\n                        }\n                    }\n                    ans = temp;\n                }\n                System.out.println(\"Case #\" + cases + \": \" + ans);\n            } else {\n                System.out.println(\"Case #\" + cases + \": IMPOSSIBLE\");\n            }\n        }\n    }\n}"}
{"idx":"1638","func":"class RatherPerplexingShowdown {\n    \n    static final String IMPOSSIBLE = \"IMPOSSIBLE\";\n        \n    public static void main(String[] args) {\n        try {\n            Scanner in = new Scanner(new BufferedReader(new FileReader(new File(\"A-large.in\")), 256 << 10));\n            BufferedWriter out = new BufferedWriter(new FileWriter(new File(\"output.txt\")), 256 << 10);\n\n            int testsNumber = in.nextInt();\n            for (int testId = 1; testId <= testsNumber; testId++) {\n                int rounds = in.nextInt();\n                int n = 1 << rounds;\n                int r = in.nextInt();\n                int p = in.nextInt();\n                int s = in.nextInt();\n                \n                String[] pp = new String[rounds+1];\n                String[] rr = new String[rounds+1];\n                String[] ss = new String[rounds+1];\n\n                pp[0] = \"P\";\n                rr[0] = \"R\";\n                ss[0] = \"S\";\n                \n                for (int i = 1; i <= rounds; i++) {\n                    if (pp[i-1].compareTo(rr[i-1]) < 0)\n                        pp[i] =  pp[i-1] + rr[i-1];\n                    else \n                        pp[i] =  rr[i-1] + pp[i-1];\n                    \n                    if (rr[i-1].compareTo(ss[i-1]) < 0)\n                        rr[i] =  rr[i-1] + ss[i-1];\n                    else \n                        rr[i] =  ss[i-1] + rr[i-1];\n                    \n                    if (pp[i-1].compareTo(ss[i-1]) < 0)\n                        ss[i] =  pp[i-1] + ss[i-1];\n                    else \n                        ss[i] =  ss[i-1] + pp[i-1];\n                }\n                \n                String result = null;\n                int ar = 0, ap = 0, as = 0;\n                for (int i = 0; i < pp[rounds].length(); i++) {\n                    char ch = pp[rounds].charAt(i);\n                    if (ch == 'P')\n                        ap++;\n                    else if (ch == 'R')\n                        ar++;\n                    else if (ch == 'S')\n                        as++;\n                }\n                if (ar == r & as == s & ap == p) {\n                    if (result == null || result.compareTo(pp[rounds]) > 0)\n                        result = pp[rounds];\n                }\n\n                ar = 0; ap = 0; as = 0;\n                for (int i = 0; i < rr[rounds].length(); i++) {\n                    char ch = rr[rounds].charAt(i);\n                    if (ch == 'P')\n                        ap++;\n                    else if (ch == 'R')\n                        ar++;\n                    else if (ch == 'S')\n                        as++;\n                }\n                if (ar == r & as == s & ap == p) {\n                    if (result == null || result.compareTo(rr[rounds]) > 0)\n                        result = rr[rounds];\n                }\n                \n                ar = 0; ap = 0; as = 0;\n                for (int i = 0; i < ss[rounds].length(); i++) {\n                    char ch = ss[rounds].charAt(i);\n                    if (ch == 'P')\n                        ap++;\n                    else if (ch == 'R')\n                        ar++;\n                    else if (ch == 'S')\n                        as++;\n                }\n                if (ar == r & as == s & ap == p) {\n                    if (result == null || result.compareTo(ss[rounds]) > 0)\n                        result = ss[rounds];\n                }\n\n                if (result == null)\n                    result = IMPOSSIBLE;\n                out.append(\"Case #\" + testId + \": \" + result);\n                \n                out.append(\"\\n\");\n            }\n            in.close();\n            out.close();\n        }\n        catch (RuntimeException rte) {\n            throw rte;\n        }\n        catch (Exception e) {\n            System.err.println(\"Error:\" + e.getMessage());\n        }\n    }\n}"}
{"idx":"1639","func":"class Main_Round2_2016_B {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt();\n        for (int casei = 1; casei <= t; casei++) {\n            int n = sc.nextInt();\n            int k = sc.nextInt();\n\n            double[] p = new double[n];\n            for (int i = 0; i < n; i++) {\n                p[i] = sc.nextDouble();\n            }\n\n            double max = 0;\n            for (int i = 0; i < 0x1 << n; i++) {\n                if (Integer.bitCount(i) != k) {\n                    continue;\n                }\n\n                List<Double> pp = new ArrayList<>();\n                for (int j = 0; j < n; j++) {\n                    if ((i & 0x1 << j) != 0) {\n                        pp.add(p[j]);\n                    }\n                }\n\n                double tmp2 = 0;\n                for (int j = 0; j < 0x1 << k; j++) {\n                    if (Integer.bitCount(j) != k \/ 2) {\n                        continue;\n                    }\n\n                    double tmp = 1;\n                    for (int l = 0; l < k; l++) {\n                        if ((j & 0x1 << l) == 0) {\n                            tmp *= (1 - pp.get(l));\n                        } else {\n                            tmp *= pp.get(l);\n                        }\n                    }\n                    tmp2 += tmp;\n                }\n                max = Math.max(max, tmp2);\n            }\n\n            System.out.printf(\"Case #%d: %.7f\\n\", casei, max);\n        }\n\n        sc.close();\n    }\n}"}
{"idx":"1640","func":"class ProblemB {\n    public static void main(String[] args) throws Exception {\n        String fileName = args[0];\n        ProblemB obj = new ProblemB();\n        BufferedReader br = new BufferedReader(new InputStreamReader(\n                obj.getClass().getResourceAsStream(fileName)));\n        int sfx = fileName.indexOf('.');\n        BufferedWriter bw = new BufferedWriter(\n                new FileWriter(\".\/src\/\" + fileName.substring(0, sfx) + \".out\"));\n        \n        int T = Integer.parseInt(br.readLine());\n        for (int i = 0; i < T; i++) {\n            String str = br.readLine();\n            StringTokenizer token = new StringTokenizer(str, \" \");\n            int N = Integer.parseInt(token.nextToken());\n            int K = Integer.parseInt(token.nextToken());\n        \n            double[] P = new double[N];\n            str = br.readLine();\n            token = new StringTokenizer(str, \" \");\n            for (int j = 0; j < N; j++) {\n                P[j] = Double.parseDouble(token.nextToken());\n            }\n        \n            Arrays.sort(P);\n            double ans = 0.0;\n            for (int s = 0; s <= N - K; s++) {\n                for (int e = 0; e <= N - K - s; e++) {\n                    for (int a = 0; a <= K; a++) {\n                        double[][] dp = new double[2][K + 1];\n                        dp[1][0] = 1.0;\n                        for (int k = 0; k < a; k++) {\n                            double p = P[k + s];\n                            for (int j = 0; j <= k + 1; j++) {\n                                dp[k % 2][j] = dp[(k + 1) % 2][j] * (1 - p);\n                                if (j != 0) {\n                                    dp[k % 2][j] += dp[(k + 1) % 2][j - 1] * p;\n                                }\n                            }\n                        }\n                        for (int k = a; k < K; k++) {\n                            double p = P[N - (k - a) - 1 - e];\n                            for (int j = 0; j <= k + 1; j++) {\n                                dp[k % 2][j] = dp[(k + 1) % 2][j] * (1 - p);\n                                if (j != 0) {\n                                    dp[k % 2][j] += dp[(k + 1) % 2][j - 1] * p;\n                                }\n                            }\n                        }\n                        ans = Math.max(ans, dp[1][K \/ 2]);\n                    }\n                }\n            }\n        \n            DecimalFormat ft = new DecimalFormat(\"0.000000000\");\n            bw.write(\"Case #\" + (i + 1) + \": \" + ft.format(ans));\n            bw.write(\"\\r\\n\");\n        }\n        bw.close();\n        br.close();\n    }\n}"}
{"idx":"1641","func":"class B {\n    Scanner scan;\n\n    public B(Scanner s) {\n        scan = s;\n    }\n    \n    public static void main(String[] args) throws Exception{\n        Locale.setDefault(Locale.US);\n        String cn = \"src\/\"+B.class.getName();\n        String sampleName = cn+\"-sample.in\";\n        String smallName = cn+\"-small-attempt0.in\";\n        String largeName = cn+\"-large.in\";\n        \n        String name = smallName;\n        \n        String outName = name.substring(0, name.indexOf('.'))+\".out\";\n        InputStream in = new BufferedInputStream(new FileInputStream(name));\n        PrintStream out =null;\n        out = new PrintStream(new File(outName));\n        if(out==null) out = System.out;\n        Scanner scan = new Scanner(in);\n        \n        int N = Integer.parseInt(scan.nextLine());\n        for(int c=1;c<=N;c++) {\n            B r = new B(scan);\n            int n = r.scan.nextInt();\n            int k= r.scan.nextInt();\n            double[]P = new double[n];\n            for(int i=0;i<P.length;i++)P[i]=r.scan.nextDouble();\n            double res1 =0;\n            for(int m=0;m<(1<<n);m++){\n                if(Integer.bitCount(m)!=k)continue;\n                double[]A = new double[k\/2+1];\n                A[0]=1;\n                for(int i=0;i<n;i++){\n                    if((m&(1<<i))==0)continue;\n                    double x = P[i];\n                    double[]NA =new double[n];\n                    for(int j=0;j<A.length;j++){\n                        NA[j]=A[j]*(1-x);\n                        if(j>0)NA[j]+=A[j-1]*x;\n                    }\n                    A = NA;\n                }\n                res1 = max(res1, A[k\/2]);\n            }\n            String res = \"\"+res1;\n            out.printf(\"Case #%d: %s\\n\",c, res);\n            if(out!=System.out)System.err.println(c + \" done\");\n        }\n        if(out!=System.out)System.err.println(\"All done\");\n        \n    }\n}"}
{"idx":"1642","func":"class Round_2_B {\n\n    static BufferedReader br;\n    static PrintWriter out;\n    static StringTokenizer st;\n\n    static int T, N, K;\n\n    static double[] prob;\n\n    public static void main (String[] args) throws IOException {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        out = new PrintWriter(new OutputStreamWriter(System.out));\n        br = new BufferedReader(new FileReader(\"in.txt\"));\n        out = new PrintWriter(new FileWriter(\"out.txt\"));\n\n        T = Integer.parseInt(next());\n\n        for (int t = 1; t <= T; t++) {\n            System.out.println(t);\n            N = Integer.parseInt(next());\n            K = Integer.parseInt(next());\n            prob = new double[N];\n\n            for (int i = 0; i < N; i++)\n                prob[i] = Double.parseDouble(next());\n\n            double ans = 0;\n\n            for (int i = 0; i < 1 << N; i++) {\n                int sz = 0;\n                for (int j = 0; j < N; j++) {\n                    if ((i & 1 << j) > 0)\n                        sz++;\n                }\n                if (sz == K) {\n                    double total = 0;\n                    for (int j = 0; j < 1 << N; j++) {\n                        if ((i & j) == j) {\n                            int sz2 = 0;\n                            double currProb = 1;\n                            for (int k = 0; k < N; k++) {\n                                if ((j & 1 << k) > 0) {\n                                    sz2++;\n                                    currProb *= prob[k];\n                                } else if ((i & 1 << k) > 0) {\n                                    currProb *= (1 - prob[k]);\n                                }\n                                \n                            }\n                            if (sz2 == K \/ 2)\n                                total += currProb;\n                        }\n                    }\n                    ans = Math.max(ans, total);\n                }\n            }\n            out.printf(\"Case #%d: %f\\n\", t, ans);\n        }\n\n        out.close();\n    }\n\n    static String next () throws IOException {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine().trim());\n        return st.nextToken();\n    }\n}"}
{"idx":"1643","func":"class B\n{\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader in  = new BufferedReader(new FileReader(\"B.in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"B.out\"));\n\n        int T = Integer.parseInt(in.readLine());\n        for(int t=1;t<=T;t++)\n        {\n            StringTokenizer st = new StringTokenizer(in.readLine());\n            int N = Integer.parseInt(st.nextToken());\n            int K = Integer.parseInt(st.nextToken());\n\n            st = new StringTokenizer(in.readLine());\n            double[] P = new double[N];\n            for(int i=0;i<N;i++)\n                P[i] = Double.parseDouble(st.nextToken());\n\n            double[][] tt = new double[N][N];\n            double[][] tf = new double[N][N];\n            double[][] ft = new double[N][N];\n            double[][] ff = new double[N][N];\n            for(int i=0;i<N;i++)\n                for(int j=0;j<N;j++)\n                {\n                    tt[i][j] =      P[i]  *      P[j];\n                    tf[i][j] =      P[i]  * (1 - P[j]);\n                    ft[i][j] = (1 - P[i]) *      P[j];\n                    ff[i][j] = (1 - P[i]) * (1 - P[j]);\n                }\n\n            double ans = 0;\n            for(int i=0;i<(1 << N);i++)\n            {\n                int num = 0;\n                for(int j=0;j<N;j++)\n                    if((i & (1 << j)) != 0)\n                        num++;\n\n                if(num == K)\n                {\n                    double[] prob = new double[K+1];\n                    prob[0] = 1;\n\n                    for(int j=0;j<N;j++)\n                        if((i & (1 << j)) != 0)\n                        {\n                            double[] temp = new double[K+1];\n                            temp[0] = prob[0] * (1 - P[j]);\n                            for(int a=1;a<=K;a++)\n                                temp[a] = prob[a] * (1-P[j]) + prob[a-1] * P[j];\n                            prob = temp;\n                        }\n                    ans = Math.max(ans, prob[K\/2]);\n                }\n            }\n\n            out.write(\"Case #\"+t+\": \");\n            out.write(\"\"+ans);\n            out.write(\"\\n\");\n        }\n\n        in .close();\n        out.close();\n    }\n}"}
{"idx":"1644","func":"class B_large {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src\/B-large.in\"))));\n\n        String output = \"\";\n        int t = sc.nextInt();\n        sc.nextLine();\n        for (int i = 1; i <= t; i++) {\n            int n = sc.nextInt();\n            int k = sc.nextInt();\n            double[] p = new double[n];\n            for (int j = 0; j < n; j++)\n                p[j] = sc.nextDouble();\n            Arrays.sort(p);\n            \n            double max = 0;\n            for (int j = 0; j <= k; j++) {\n                double[][] dp = new double[k+1][k+1];\n                dp[0][0] = 1;\n                for (int a = 0; a < j; a++) {\n                    dp[a+1][0] += dp[a][0]*(1-p[a]);\n                    dp[a+1][a+1] += dp[a][a]*p[a];\n                    for (int b = 1; b <= a; b++) {\n                        dp[a+1][b] += dp[a][b]*(1-p[a]);\n                        dp[a+1][b] += dp[a][b-1]*p[a];\n                    }\n                }\n                for (int a = j; a < k; a++) {\n                    dp[a+1][0] += dp[a][0]*(1-p[n-(a-j)-1]);\n                    dp[a+1][a+1] += dp[a][a]*p[n-(a-j)-1];\n                    for (int b = 1; b <= a; b++) {\n                        dp[a+1][b] += dp[a][b]*(1-p[n-(a-j)-1]);\n                        dp[a+1][b] += dp[a][b-1]*p[n-(a-j)-1];\n                    }\n                }\n                if (dp[k][k\/2] > max)\n                    max = dp[k][k\/2];\n            }\n            \n            output += \"Case #\" + i + \": \" + max + \"\\n\";\n        }\n        \n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src\/B-large.out\"), \"utf-8\"));\n        bw.write(output);\n        bw.close();\n    }\n}"}
{"idx":"1645","func":"class Bs {\n\n    private static Scanner in;\n    private static PrintWriter out;\n\n    public static void main( String[] args ) {\n        Locale.setDefault(Locale.US);\n        in = new Scanner( System.in );\n        out = new PrintWriter( System.out );\n        int tn = in.nextInt();\n                for ( int test = 1; test <= tn; test ++ ) {\n                    int n = in.nextInt();\n                    int k = in.nextInt();\n                    double[] q = new double[n];\n                    for ( int i = 0; i < n; i ++ ) {\n                        q[i] = in.nextDouble();\n                    }\n                    double r = 0.0;\n                    for ( int m = 0; m < ( 1 << n ); m ++ ) {\n                        if ( Integer.bitCount( m ) != k ) continue;\n                        double[][] p = new double[2][k + 1];\n                        p[0][0] = 1.0;\n                        int cnt = 0;\n                        for ( int i = 0; i < n; i ++ ) {\n                            if ( ( m & ( 1 << i ) ) == 0 ) continue;\n                            Arrays.fill( p[( cnt & 1 ) ^ 1], 0.0 );\n                            for ( int j = 0; j < k; j ++ ) {\n                                p[( cnt & 1 ) ^ 1][j] += ( 1.0 - q[i] ) * p[cnt & 1][j];\n                                p[( cnt & 1 ) ^ 1][j + 1] += q[i] * p[cnt & 1][j];\n                            }\n                            cnt ++;\n                        }\n        \/\/                System.out.println( m + \" \" + p[cnt & 1][k \/ 2] );\n                        r = Math.max( r, p[cnt & 1][k \/ 2] );\n                    }\n                    out.println( \"Case #\" + test + \": \" + r );\n                }\n        out.close();\n    }\n}"}
{"idx":"1646","func":"class RedTapeCommittee {\n    \n    public static void main(String[] args) throws Exception {\n        Locale.setDefault(Locale.ENGLISH);\n        File inputFile = new File(\"B-small-attempt0.in\");\n        Scanner in = new Scanner(inputFile);\n        File outputFile = new File(\"output.txt\");\n        PrintWriter out = new PrintWriter(outputFile);\n\n        int T = in.nextInt();\n        for (int t=0; t<T; t++) {\n            int N = in.nextInt();\n            int K = in.nextInt();\n            double[] P = new double[N];\n            for (int n=0; n<N; n++) {\n                P[n] = in.nextDouble();\n            }\n            double best = 0;\n            int limit = 1<<N;\n            for (int mask=0; mask<limit; mask++) {\n                if (Integer.bitCount(mask) == K) {\n                    int bits[] = new int[K];\n                    int next = 0;\n                    for (int i=0; i<N; i++) {\n                        if ((mask & (1<<i)) != 0) {\n                            bits[next++] = i;\n                        }\n                    }\n\n                    double pst = 0;\n                    int limit2 = 1<<K;\n                    for (int m=0; m<limit2; m++) {\n                        if (Integer.bitCount(m) == K\/2) {\n                            double p = 1;\n                            for (int k=0; k<K; k++) {\n                                if ((m&(1<<k)) != 0) {\n                                    p *= P[bits[k]];\n                                } else {\n                                    p *= 1-P[bits[k]];\n                                }\n                            }\n                            pst += p;\n                        }\n                    }\n                    best = Math.max(best, pst);\n                }\n            }\n            \n            out.println(\"Case #\"+(t+1)+\": \"+best);\n        }\n\n        out.close();\n    }\n    \n}"}
{"idx":"1647","func":"static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int tcc = sc.nextInt();\n    for (int tc = 1; tc <= tcc; ++tc) {\n      int n = sc.nextInt();\n      int k = sc.nextInt();\n      double[] p = new double[n];\n      double[] pc = new double[k];\n      for (int i = 0; i < n; ++i) p[i] = sc.nextDouble();\n\n      double ans = 0;\n      for (int bm = 0; bm < (1 << n); ++bm) {\n        int bs = 0;\n        for (int i = 0; i < n; ++i) if ((bm & (1 << i)) > 0) ++bs;\n        if (bs != k) continue;\n        bs = 0;\n        for (int i = 0; i < n; ++i) if ((bm & (1 << i)) > 0) pc[bs++] = p[i];\n        double[][] comp = new double[k + 1][];\n        comp[0] = new double[] { 1 };\n        for (int i = 1; i <= k; ++i) {\n          comp[i] = new double[i + 1];\n          double cp = pc[i - 1];\n          for (int j = 0; j <= i; ++j) {\n            if (j != 0) comp[i][j] += cp * comp[i-1][j-1];\n            if (j != i) comp[i][j] += (1 - cp) * comp[i-1][j];\n          }\n        }\n        ans = Math.max(ans, comp[k][k \/ 2]);\n      }\n\n      System.out.printf(\"Case #%d: %.6f%n\", tc, ans);\n    }\n  }\n}"}
{"idx":"1648","func":"class B {\n    PrintWriter out;\n    Scanner in;\n\n    public static void main(String[] args) throws IOException {\n        B r = new B();\n        r.in = new Scanner(new File(\"B.in\"));\n                r.out = new PrintWriter(\"B.out\");\n                int t = r.in.nextInt();\n                for (int i = 1; i <= t; i++) {\n                    System.err.println(i);\n                    r.out.print(\"Case #\" + i + \": \");\n                    int n = r.in.nextInt(), k = r.in.nextInt();\n                    double[] a = new double[n];\n                    for (int i1 = 0; i1 < n; i1++) {\n                        a[i1] = Double.parseDouble(r.in.next());\n                    }\n                    Arrays.sort(a);\n                    double[][] perF = new double[n+1][2*n+1];\n                    double[][] perB = new double[n+1][2*n+1];\n                    perF[0][n] = 1;\n                    perB[0][n] = 1;\n                    \n                    for (int i2 = 1; i2 <= n; i2++) {\n                        for (int j = 0; j < 2  *n + 1; j++) {\n                            if (j > 0) {\n                                perF[i2][j] += perF[i2-1][j-1]*a[i2-1];\n                                perB[i2][j] += perB[i2-1][j-1]*a[n-i2];\n                            }\n                            if (j < 2*n) {\n                                perF[i2][j] += perF[i2-1][j+1]*(1- a[i2-1]);\n                                perB[i2][j] += perB[i2-1][j+1]*(1-a[n-i2]);\n                            }\n                        }\n                    }\n                    \n                    double ans = 0;\n                    for (int t1 = 0; t1 <=k; t1++) {\n                        double cand = 0;\n                        for (int bal = -t1; bal <= t1; bal++) {\n                            int i11 = n + bal;\n                            int i2 = n - bal;\n                            if (i2 >= 0 && i2 <= 2*n) {\n                                cand += perF[t1][i11] * perB[k - t1][i2];\n                            }\n                        }\n                        ans = Math.max(ans, cand);\n                    }\n                    Locale.setDefault(Locale.US);\n                    r.out.printf(\"%.9f\",ans);\n        \/\/            out.print(\" \");\n        \/\/            solveStupid();\n                    r.out.println();\n                }\n                r.in.close();\n                r.out.close();\n    }\n}"}
{"idx":"1649","func":"class B {\n\n    static StringTokenizer st;\n    static BufferedReader br;\n    static PrintWriter pw;\n    \n    public static void main(String[] args) throws IOException{\n        br = new BufferedReader(new InputStreamReader(System.in));\n        pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\/\/        br = new BufferedReader(new FileReader(\"B-small.in\"));\n\/\/        pw = new PrintWriter(new BufferedWriter(new FileWriter(\"B-small.out\")));\n        int tests = Integer.parseInt(next());\n        for (int test = 1; test <= tests; test++) {\n            pw.print(\"Case #\"+test+\": \");\n            int n = Integer.parseInt(next());\n            int k = Integer.parseInt(next());\n            double[]p = new double[n];\n            for (int i = 0; i < n; i++) {\n                p[i] = Double.parseDouble(next());\n            }\n            double[]pp = new double[1 << n];\n            double[]pp0 = new double[1 << n];\n            for (int mask = 0; mask < (1 << n); mask++) {\n                pp[mask] = 1;\n                pp0[mask] = 1;\n                for (int i = 0; i < n; i++) {\n                    if ((mask & (1 << i)) != 0) {\n                        pp[mask] *= p[i];\n                        pp0[mask] *= 1-p[i];\n                    }\n                }\n            }\n            double ans = 0;\n            for (int mask = 0; mask < (1 << n); mask++) {\n                if (Integer.bitCount(mask)==k) {\n                    double cur = 0;\n                    for (int sub_mask = mask; sub_mask != 0; sub_mask = ((sub_mask-1) & mask)) {\n                        if (Integer.bitCount(sub_mask)==k\/2) {\n                            cur += pp[sub_mask] * pp0[mask ^ sub_mask];\n                            ans = Math.max(ans, cur);\n                        }\n                    }\n                    ans = Math.max(ans, cur);\n                }\n            }\n            pw.println(ans);\n        }\n        pw.close();\n    }\n\n    private static String next() throws IOException{\n        while (st==null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine());\n        return st.nextToken();\n    }\n\n}"}
{"idx":"1650","func":"class B {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int numCases = sc.nextInt();\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n            int N = sc.nextInt();\n            int K = sc.nextInt();\n            double[] p = new double[N];\n            for (int i = 0; i < N; i++) {\n                p[i] = sc.nextDouble();\n            }\n\n            double best = 0;\n            for (long mask = 0; mask < (1 << N); mask++) {\n                if (Long.bitCount(mask) != K) {\n                    continue;\n                }\n                double total = 0;\n                for (long yesMask = mask; yesMask != 0; yesMask = ((yesMask - 1) & mask)) {\n                    if (Long.bitCount(yesMask) != K \/ 2) {\n                        continue;\n                    }\n                    double prob = 1;\n                    for (int i = 0; i < N; i++) {\n                        if ((yesMask & (1 << i)) != 0) {\n                            prob *= p[i];\n                        } else if ((mask & (1 << i)) != 0) {\n                            prob *= (1 - p[i]);\n                        }\n                    }\n                    total += prob;\n                }\n                best = Math.max(total, best);\n            }\n            System.out.print(\"Case #\" + caseNum + \": \");\n            System.out.println(best);\n        }\n        sc.close();\n    }\n}"}
{"idx":"1651","func":"class B {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(new File(\"BL.in\"));\n        PrintWriter out = new PrintWriter(\"BL.out\");\n        int tc = in.nextInt();\n        for (int cc = 1; cc <= tc; cc++) {\n            int n = in.nextInt();\n            int k = in.nextInt();\n            double[] p = new double[n];\n            for (int i = 0; i < n; i++) {\n                p[i] = in.nextDouble();\n            }\n            Arrays.sort(p);\n\/\/            double result = 0;\n\/\/            for (int i = 0; i < 1 << n; i++) {\n\/\/                if (Integer.bitCount(i) != k)\n\/\/                    continue;\n\/\/                double[] dp = new double[k + 1];\n\/\/                dp[0] = 1;\n\/\/                for (int j = 0; j < n; j++) {\n\/\/                    if ((i & 1 << j) != 0) {\n\/\/                        for (int m = k; m >= 0; m--) {\n\/\/                            dp[m] = dp[m] * p[j] + (m == 0 ? 0 : dp[m - 1] * (1 - p[j]));\n\/\/                        }\n\/\/                    }\n\/\/                }\n\/\/                double sum = 0;\n\/\/                for (int x = 0; x <= k; x++) {\n\/\/                    sum += dp[x];\n\/\/                }\n\/\/                if (Math.abs(sum - 1) > 1e-9) {\n\/\/                    throw new Exception();\n\/\/                }\n\/\/                result = Math.max(result, dp[k \/ 2]);\n\/\/            }\n            double result2 = 0;\n            for (int i = 0; i <= k; i++) {\n                double[] dp = new double[k + 1];\n                dp[0] = 1;\n                for (int j = 0; j < i; j++) {\n                    for (int m = k; m >= 0; m--) {\n                        dp[m] = dp[m] * p[j] + (m == 0 ? 0 : dp[m - 1] * (1 - p[j]));\n                    }\n                }\n                for (int j = n - (k - i); j < n; j++) {\n                    for (int m = k; m >= 0; m--) {\n                        dp[m] = dp[m] * p[j] + (m == 0 ? 0 : dp[m - 1] * (1 - p[j]));\n                    }\n                }\n                result2 = Math.max(result2, dp[k \/ 2]);\n            }\n\/\/            if (Math.abs(result2 - result) > 1e-9) {\n\/\/                throw new Exception();\n\/\/            }\n            System.out.printf(\"Case #%d: %.8f\\n\", cc, result2);\n            out.printf(\"Case #%d: %.8f\\n\", cc, result2);\n        }\n        out.close();\n    }\n}"}
{"idx":"1652","func":"class bsmall {\n    \n    public static void main(String[] args) {\n        \n        Scanner stdin = new Scanner(System.in);\n        int numCases = stdin.nextInt();\n        \n        for (int loop=1; loop<=numCases; loop++) {\n            \n            int n = stdin.nextInt();\n            int k = stdin.nextInt();\n            double[] p = new double[n];\n            for (int i=0; i<n; i++)\n                p[i] = stdin.nextDouble();\n            \n            double res = 0;\n            for (int i=1; i<(1<<n); i++) {        \n                if (Integer.bitCount(i) != k) continue;\n\n                double tmp = 0;\n                for (int mask=i; mask>0; mask = ((mask-1)&i) ) {\n                    \n                    if (Integer.bitCount(mask) != k\/2) continue;\n                    \n                    double thisP = 1;\n                    for (int j=0; j<n; j++) {\n                        if ((mask&(1<<j)) > 0)\n                            thisP = thisP*p[j];\n                        else if ((i&(1<<j)) > 0)\n                            thisP = thisP*(1-p[j]);\n                 \n                    }\n                    tmp += thisP;\n                }\n                res = Math.max(res, tmp);\n            }\n            \n            System.out.printf(\"Case #%d: %.9f\\n\", loop, res);\n        }\n    }\n}"}
{"idx":"1653","func":"class BSmall {\n\n  static final String FILENAME = \"B-small-attempt1\";\n  static final String IN = FILENAME + \".in\";\n  static final String OUT = FILENAME + \".out\";\n  Scanner sc;\n  BufferedWriter out;\n  \n  public static void main(String args[]) throws Exception {\n    BSmall r = new BSmall();\n    r.sc = new Scanner(new File(BSmall.IN));\n    r.out = new BufferedWriter(new FileWriter(BSmall.OUT));\n    int t = r.sc.nextInt();\n    for (int i = 1; i <= t; i++) {\n      r.out.write(\"Case #\" + i + \": \");\n      int n = r.sc.nextInt();\n    int k = r.sc.nextInt();\n    double[] p = new double[n];\n    for(int i2 = 0; i2 < n; i2++) {\n      p[i2] = r.sc.nextDouble();\n    }\n    double ans = -1;\n    for(int msk = 0; msk < (1 << n); msk++) {\n      if(Integer.bitCount(msk) != k) {\n        continue;\n      }\n      int[] idx = new int[k + 1];\n      int c = 0;\n      int l = 0;\n      while(c < n) {\n        if((msk & (1 << c)) > 0) {\n          idx[l] = c;\n          l++;\n        }\n        c++;\n      }\n      double[][] dp = new double[k + 1][k + 1];\n      for(int i1 = 1; i1 <= k; i1++) {\n        for(int j = 0; j <= k\/2; j++) {\n          if(j == 0) {\n            dp[i1][j] = 1;\n            for(int x = 0; x < i1; x++) {\n              dp[i1][j] *= 1 - p[idx[x]];\n            }\n          } else if(i1 < j) {\n            dp[i1][j] = 0;\n          } else if(i1 == j) {\n            dp[i1][j] = 1;\n            for(int x = 0; x < i1; x++) {\n              dp[i1][j] *= p[idx[x]];\n            }\n          } else {\n            dp[i1][j] = dp[i1 - 1][j - 1] * p[idx[i1 - 1]] + dp[i1 - 1][j] * (1 - p[idx[i1 - 1]]);\n          }\n        }\n      }\n      ans = Math.max(ans, dp[k][k\/2]);\n    }\n    r.out.write(Double.toString(ans));\n    r.out.newLine();\n    }\n    r.sc.close();\n    r.out.close();\n  }\n}"}
{"idx":"1654","func":"class RedTape {\n    public static void main(String [] args) throws IOException {\n        Scanner input = new Scanner(new File(\"input.txt\"));\n        PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n        \n        int max = input.nextInt();\n        for(int c = 1; c <= max; c++) {\n            int size = input.nextInt();\n            int comm = input.nextInt();\n            \n            double[] arr = new double[size];\n            for(int j = 0; j < size; j++)\n                arr[j] = input.nextDouble();\n            Arrays.sort(arr);\n            double maxV = 0;\n            for(int cut = 0; cut <= comm; cut++) {\n                double[] a = new double[comm];\n                for(int j = 0; j < cut; j++)\n                    a[j] = arr[j];\n                for(int j = 0; j < comm - cut; j++)\n                    a[j + cut] = arr[size - j - 1];\n                \n                double[][] prob = new double[201][201];\n                int tie = 100;\n                prob[0][tie-1] = a[0];\n                prob[0][tie+1] = 1 - a[0];\n                for(int i = 1; i < comm; i++)\n                    for(int j = tie - i - 1; j <= tie + i + 1; j++)\n                        if(j > 0 && j < 200)\n                            prob[i][j] = prob[i-1][j+1] * a[i] + prob[i-1][j-1] * (1 - a[i]);\n                maxV = Math.max(maxV, prob[comm-1][tie]);\n            }\n            out.printf(\"Case #%d: %.10f%n\", c, maxV);\n        }\n        out.close();\n    }\n}"}
{"idx":"1655","func":"class B {\n    private static final double EPS = 1e-12;\n\n    final int N, K;\n    final double[] P;\n\n    \/\/ parse\n    public B(final Scanner sc) {\n        N = sc.nextInt();\n        K = sc.nextInt();\n        P = new double[N];\n        for (int i = 0; i < N; i++)\n            P[i] = sc.nextDouble();\n    }\n\n    \/\/ Template\n    public static void main(String... args) throws Exception {\n        try (final Scanner sc = new Scanner(System.in)) {\n            final int T = sc.nextInt();\n            final Object[] solvers = new Object[T];\n            for (int i = 0; i < T; i++)\n                solvers[i] = new B(sc);\n            final Iterator<String> results = Arrays.stream(solvers)\n                    .map(Object::toString)\n                    .iterator();\n            for (int i = 1; i <= T; i++)\n                System.out.printf(\"Case #%s: %s\\n\", i, results.next());\n        }\n    }\n}"}
{"idx":"1656","func":"class R2_B {\n\n    public static void main(String args[]) throws IOException {\n    \n        \n        FileInputStream in = null;\n        PrintWriter out = null;\n\n        try {\n             in = new FileInputStream(\"B-large.in\");\n             out = new PrintWriter( \"B-large.output\" );\n                    \n                    \n             Scanner sc = new Scanner (in);\n             String line = sc.nextLine();\n               \n             int T = Integer.parseInt(line);\n             \n             for(int t=1 ; t <= T ; t++) {\n                 String output = \"Case #\" + t + \":\";\n                 \n                 line = sc.nextLine();\n                 int n = Integer.parseInt(line.split(\" \")[0]);\n                 int k = Integer.parseInt(line.split(\" \")[1]);\n                 \n                 Vector<Double> input = new Vector<Double>();\n                 line = sc.nextLine();\n                 for(int i=0; i<n; ++i) {\n                     input.add(Double.parseDouble(line.split(\" \")[i]));\n                 }\n                 Collections.sort(input);\n                 Vector<Double> temp = new Vector<Double>();\n                 double answer = 0.0;\n                 for(int i=0; i<=k; ++i) {\n                     for (int j=0; j<i; ++j) {\n                         temp.add(input.elementAt(j));\n                     }\n                     for(int j=0; j<k-i; ++j) {\n                         temp.add(input.elementAt(n-j-1));\n                     }\n                     Vector<Vector<Double>> memo = new Vector<Vector<Double>>();\n                     for (int j=0; j<k; ++j) {\n                         Vector<Double> subMemo = new Vector<Double>();\n                         for (int jj=0; jj <= k+1; jj++) {\n                             subMemo.add(jj, 0.0);\n                         }\n                         memo.add(subMemo);\n                     }\n                     memo.elementAt(0).set(0, 1.0);\n                     for(int j=0; j<k; ++j) {\n                         for (int x = 0; x <= j+1 ; ++x) {\n                             if ( j == 0 ) {\n                                 memo.elementAt(j).set(0, 1-temp.elementAt(j));\n                                 memo.elementAt(j).set(1, temp.elementAt(j));\n                             } else if (x == 0 ) {\n                                 double val = memo.elementAt(j).elementAt(x);\n                                 val += (1-temp.elementAt(j)) * memo.elementAt(j-1).elementAt(x);\n                                 memo.elementAt(j).set(x,val);\n                             } else {\n                                 double val = memo.elementAt(j).elementAt(x); \n                                 val += (1-temp.elementAt(j)) * memo.elementAt(j-1).elementAt(x);\n                                 val += (temp.elementAt(j) * memo.elementAt(j-1).elementAt(x-1));\n                                 memo.elementAt(j).set(x, val);\n                             }     \n                         }\n                     }\n                     temp.clear();\n                     if (answer < memo.elementAt(k-1).elementAt(k\/2) )\n                         answer = memo.elementAt(k-1).elementAt(k\/2);\n                 }\n                 \n                 output += \" \" + answer;\n                 out.println(output);\n             }\n         \n         }finally {\n             if (in != null) {\n                in.close();\n             }\n             if (out != null) {\n                out.close();\n             }\n          }\n    }\n}"}
{"idx":"1657","func":"class B {\n\n\n    public static void main(String[] args) throws FileNotFoundException {\n        \/\/ test case\n\/\/        genLargeP();\n\/\/        File inputFile = new File(\"test.txt\");\n\/\/        PrintWriter out = new PrintWriter(\"test_out.txt\");\n\n        \/\/ real case\n\/\/        File inputFile = new File(\"B-small-practice.in\");\n\n        File inputFile = new File(\"B-small-attempt0.in\");\n        PrintWriter out = new PrintWriter(\"B-small-out.txt\");\n\n\/\/        File inputFile = new File(\"B-large-practice.in\");\n\n\/\/        File inputFile = new File(\"B-large.in\");\n\/\/        PrintWriter out = new PrintWriter(\"B-large-out.txt\");\n\n        Scanner in = new Scanner(inputFile);\n\n        long time0 = System.currentTimeMillis();\n\n        int T = in.nextInt();\n        for (int t = 0; t < T; t++) {\n            int N = in.nextInt();\n            int K = in.nextInt();\n            double[] P = new double[N];\n            for (int n = 0; n < N; n++) {\n                P[n] = in.nextDouble();\n            }\n\n            double maxProb = 0;\n\n            for (int i = 0; i < (1 << N); i++) {\n                int k = 0;\n                for (int n = 0; n < N; n++) {\n                    if ((i & 1 << n) != 0) {\n                        k++;\n                    }\n                }\n                if (k != K) continue;\n                double[] p = new double[K];\n                int loc = 0;\n                for (int n = 0; n < N; n++) {\n                    if ((i & 1 << n) != 0) {\n                        p[loc] = P[n];\n                        loc++;\n                    }\n                }\n\n                double curProb = 0;\n                for (int j = 0; j < (1 << K); j++) {\n                    int yes = 0;\n                    for (k = 0; k < K; k++) {\n                        if ((j & 1 << k) != 0) {\n                            yes++;\n                        }\n                    }\n                    if (yes != K\/2) continue;\n                    double temp = 1;\n                    for (k = 0; k < K; k++) {\n                        if ((j & 1 << k) != 0) {\n                            temp *= p[k];\n                        } else {\n                            temp *= (1-p[k]);\n                        }\n                    }\n                    curProb += temp;\n                }\n                if (curProb > maxProb) maxProb = curProb;\n            }\n\n            out.printf(\"Case #%d: %f\\n\", t + 1, maxProb);     \/\/\/\/ -----\n        }\n\n        long time1 = System.currentTimeMillis();\n        System.out.printf(\"[%dms] Nodes created.\\n\", time1 - time0);\n\n        in.close();\n        out.close();\n    }\n}"}
{"idx":"1658","func":"class RedTapeCommittee1 {\n\n\n    static int n, k;\n    static double[] p;\n    static double[] cand;\n    static double[][] f;\n\n    public static void main(String[] args) throws FileNotFoundException {\n\/\/        Scanner cin = new Scanner(new File(\"B-small-attempt0.in\"));\n\/\/        PrintStream cout = new PrintStream(\"B-small-attempt-mine.out\");\n        Scanner cin = new Scanner(new File(\"B-large.in\"));\n        PrintStream cout = new PrintStream(\"B-large.out\");\n\/\/        Scanner cin = new Scanner(System.in);\n\/\/        PrintStream cout = System.out;\n\n        int _case = 0;\n\n        for (int T = cin.nextInt(); T > 0; T--) {\n            _case++;\n            StringBuilder ans = new StringBuilder();\n\n            n = cin.nextInt();\n            k = cin.nextInt();\n            p = new double[n];\n            cand = new double[k];\n            double max = 0;\n            for (int i = 0; i < n; i++) p[i] = cin.nextDouble();\n            Arrays.sort(p);\n\n            for (int x = 0; x <= k; x++) {\n                int ptr = 0;\n                for (int j = 0; j < x; j++) cand[ptr++] = p[j];\n                for (int j = n - 1; j >= n + x - k; j--) cand[ptr++] = p[j];\n\n                f = new double[k][k + 1];\n                f[0][0] = 1 - cand[0];\n                f[0][1] = cand[0];\n                for (int i = 1; i < k; i++)\n                    for (int j = 0; j <= k; j++) {\n                        f[i][j] = (1 - cand[i]) * f[i - 1][j]; \/\/ vote for \"NO\"\n                        if (j > 0) f[i][j] += cand[i] * f[i - 1][j - 1]; \/\/ vote for \"YES\"\n                    }\n                max = Math.max(max, f[k - 1][k \/ 2]);\n            }\n            ans.append(String.format(\"%.10f\", max));\n\n            cout.printf(\"Case #%d: %s%n\", _case, ans.toString());\n        }\n\n        cin.close();\n        cout.close();\n    }\n}"}
{"idx":"1659","func":"class TeachingAssistant {\n\n    public static void main(String[] args) throws FileNotFoundException {\n\/\/        Scanner cin = new Scanner(new File(\"A-small-attempt0.in\"));\n\/\/        PrintStream cout = new PrintStream(\"A-small-attempt0.out\");\n        Scanner cin = new Scanner(new File(\"A-large.in\"));\n        PrintStream cout = new PrintStream(\"A-large.out\");\n\/\/        Scanner cin = new Scanner(System.in);\n\/\/        PrintStream cout = System.out;\n\n        int _case = 0;\n        for (int T = cin.nextInt(); T > 0; T--) {\n            _case++;\n            StringBuilder ans = new StringBuilder();\n\n            String s = cin.next();\n            int totalRequested = 0;\n            Stack<Character> stack = new Stack<>();\n            Stack<Integer> points = new Stack<>();\n            int maxPoints = 0;\n            int cnt = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (!stack.empty() && stack.peek() == s.charAt(i) || totalRequested == s.length() \/ 2) {\n                    maxPoints += stack.pop() == s.charAt(i) ? points.pop() : points.pop() - 5;\n                } else {\n                    stack.push(s.charAt(i));\n                    points.push(10);\n                    totalRequested++;\n                }\n            }\n            ans.append(maxPoints);\n\n            cout.printf(\"Case #%d: %s%n\", _case, ans.toString());\n        }\n\n        cin.close();\n        cout.close();\n    }\n}"}
{"idx":"1660","func":"class A\n{\n    static int N;\n\n    static int ans;\n\n    public static void main(String ... orange) throws Exception\n    {\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++)\n        {\n            char[] S = input.next().toCharArray();\n            int K = S.length;\n            int[][] table = new int[K + 1][K + 1];\n            for (int len = 2; len <= K; len += 2)\n                for (int start = 0; start + len <= K; start++)\n                {\n                    table[start][len] = (S[start] == S[start + len - 1] ? 10 : 5) + table[start + 1][len - 2];\n                    for (int first = 2; first < len; first += 2)\n                        if (table[start][first] + table[start + first][len - first] > table[start][len])\n                            table[start][len] = table[start][first] + table[start + first][len - first];\n                }\n\n            System.out.printf(\"Case #%d: \", n + 1);\n            System.out.println(table[0][K]);\n        }\n    }\n}"}
{"idx":"1661","func":"class A {\n    \n    public static int PARALLEL = 10;\n    public static int ID = 0;\n    \n    int id;\n    PrintWriter out;\n    \n    char[] cs;\n    char[] CJ = {'C', 'J'};\n    \n    public static void main(String[] args) {\n        System.setOut(null);\n        String input;\n        if (args.length == 0) {\n            input = A.class.getName() + \".in\";\n            PARALLEL = 1;\n        } else {\n            input = args[0];\n            if (args.length >= 2) ID = Integer.parseInt(args[1]);\n        }\n        System.err.printf(\"Input = %s%n\", input);\n        final A[] solvers;\n        final StringWriter[] outs;\n        try (Scanner sc = new Scanner(new BufferedInputStream(new FileInputStream(input)))) {\n            int caseN = sc.nextInt();\n            solvers = new A[caseN];\n            outs = new StringWriter[caseN];\n            for (int i = 0; i < caseN; i++) {\n                solvers[i] = new A();\n                solvers[i].id = i + 1;\n                solvers[i].out = new PrintWriter(outs[i] = new StringWriter());\n                solvers[i].out.printf(\"Case #%d: \", i + 1);\n                solvers[i].cs = sc.next().toCharArray();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        if (ID >= 1) {\n            int id = ID - 1;\n            A r = solvers[id];\n            int n = r.cs.length;\n            int[][][] dp = new int[2][2][n + 1];\n            for (int j = 0; j < 2; j++) fill(dp[0][j], -1);\n            dp[0][0][0] = dp[0][1][0] = 0;\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < 2; j++) fill(dp[(i + 1) & 1][j], -1);\n                for (int j = 0; j < 2; j++) {\n                    for (int k = 0; k < n; k++) if (dp[i & 1][j][k] >= 0) {\n                        if (k > 0) {\n                            dp[(i + 1) & 1][1 - j][k - 1] = max(dp[(i + 1) & 1][1 - j][k - 1], dp[i & 1][j][k] + (r.CJ[j] == r.cs[i] ? 0 : -5));\n                        }\n                        dp[(i + 1) & 1][1 - j][k + 1] = max(dp[(i + 1) & 1][1 - j][k + 1], dp[i & 1][j][k] + (r.CJ[1 - j] == r.cs[i] ? 10 : 5));\n                    }\n                }\n                for (int j = 0; j < 2; j++) {\n                    dp[(i + 1) & 1][j][0] = max(dp[(i + 1) & 1][j][0], dp[(i + 1) & 1][1 - j][0]);\n                }\n            }\n            r.out.println(max(dp[n & 1][0][0], dp[n & 1][1][0]));\n            System.err.flush();\n            System.err.print(outs[id].toString());\n            return;\n        }\n        Thread[] ts = new Thread[PARALLEL];\n        for (int i = 0; i < PARALLEL; i++) {\n            ts[i] = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    for (;;) {\n                        int id;\n                        synchronized (A.class) {\n                            if (ID == solvers.length) return;\n                            id = ID++;\n                            System.err.printf(\"Solve: %d \/ %d%n\", id + 1, solvers.length);\n                        }\n                        try {\n                            A r = solvers[id];\n                            int n = r.cs.length;\n                            int[][][] dp = new int[2][2][n + 1];\n                            for (int j = 0; j < 2; j++) fill(dp[0][j], -1);\n                            dp[0][0][0] = dp[0][1][0] = 0;\n                            for (int i = 0; i < n; i++) {\n                                for (int j = 0; j < 2; j++) fill(dp[(i + 1) & 1][j], -1);\n                                for (int j = 0; j < 2; j++) {\n                                    for (int k = 0; k < n; k++) if (dp[i & 1][j][k] >= 0) {\n                                        if (k > 0) {\n                                            dp[(i + 1) & 1][1 - j][k - 1] = max(dp[(i + 1) & 1][1 - j][k - 1], dp[i & 1][j][k] + (r.CJ[j] == r.cs[i] ? 0 : -5));\n                                        }\n                                        dp[(i + 1) & 1][1 - j][k + 1] = max(dp[(i + 1) & 1][1 - j][k + 1], dp[i & 1][j][k] + (r.CJ[1 - j] == r.cs[i] ? 10 : 5));\n                                    }\n                                }\n                                for (int j = 0; j < 2; j++) {\n                                    dp[(i + 1) & 1][j][0] = max(dp[(i + 1) & 1][j][0], dp[(i + 1) & 1][1 - j][0]);\n                                }\n                            }\n                            r.out.println(max(dp[n & 1][0][0], dp[n & 1][1][0]));\n                        } catch (RuntimeException e) {\n                            System.err.printf(\"Error occurred in case %d:%n\", id + 1);\n                            e.printStackTrace();\n                            System.exit(1);\n                        }\n                        solvers[id].out.flush();\n                        solvers[id] = null;\n                    }\n                }\n            });\n            ts[i].start();\n        }\n        for (int i = 0; i < PARALLEL; i++) {\n            try {\n                ts[i].join();\n            } catch (InterruptedException e) {\n                i--;\n                continue;\n            }\n        }\n        PrintWriter out;\n        String file = null;\n        if (args.length > 0) {\n            file = args[0].substring(0, args[0].lastIndexOf('.')) + \".out\";\n            try {\n                out = new PrintWriter(new File(file));\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        } else {\n            System.err.println(\"========== output ==========\");\n            System.err.flush();\n            out = new PrintWriter(System.err);\n        }\n        for (int i = 0; i < solvers.length; i++) {\n            out.print(outs[i].toString());\n        }\n        out.flush();\n        if (file != null) {\n            System.err.println(\"Output = \" + file);\n        }\n    }\n    \n}"}
{"idx":"1662","func":"class A {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(new File(\"AL.in\"));\n        PrintWriter out = new PrintWriter(\"AL.out\");\n        int tc = in.nextInt();\n        for (int cc = 1; cc <= tc; cc++) {\n            String s = in.next();\n            int gain = 0;\n            while (true) {\n                Stack<Character> stack = new Stack<>();\n                for (int i = 0; i < s.length(); i++) {\n                    if (!stack.isEmpty() && stack.peek() == s.charAt(i)) {\n                        stack.pop();\n                    } else {\n                        stack.push(s.charAt(i));\n                    }\n                }\n                StringBuilder next = new StringBuilder();\n                for (Character c : stack) {\n                    next.append(c);\n                }\n                String nx = next.toString();\n                int value = (s.length() - nx.length()) \/ 2 * 10;\n                s = nx;\n                if (value == 0)\n                    break;\n                gain += value;\n            }\n            gain += s.length() \/ 2 * 5;\n            System.out.printf(\"Case #%d: %d\\n\", cc, gain);\n            out.printf(\"Case #%d: %d\\n\", cc, gain);\n        }\n        out.close();\n    }\n}"}
